[
  {
    "id": 935,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 70,
    "end-bug-line": 70,
    "bug": "",
    "fix": "private static final byte CR = 13;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; <extra_id_0> static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) {"
      },
      {
        "txt": "super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); }"
      },
      {
        "txt": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c;"
      },
      {
        "txt": "if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray();"
      },
      {
        "txt": "} public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try {"
      },
      {
        "txt": "int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } }"
      },
      {
        "txt": "return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) {"
      },
      {
        "txt": "return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) {"
      },
      {
        "txt": "return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null;"
      },
      {
        "txt": "} else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } }"
      },
      {
        "txt": "public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 936,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 71,
    "end-bug-line": 71,
    "bug": "",
    "fix": "private static final byte LF = 10;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; <extra_id_0> static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) {"
      },
      {
        "txt": "super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); }"
      },
      {
        "txt": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c;"
      },
      {
        "txt": "if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray();"
      },
      {
        "txt": "} public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try {"
      },
      {
        "txt": "int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } }"
      },
      {
        "txt": "return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) {"
      },
      {
        "txt": "return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) {"
      },
      {
        "txt": "return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null;"
      },
      {
        "txt": "} else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } }"
      },
      {
        "txt": "public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 937,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 73,
    "end-bug-line": 73,
    "bug": "",
    "fix": "private static final int SAFE_LENGTH = 73;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; <extra_id_0> static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) {"
      },
      {
        "txt": "super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); }"
      },
      {
        "txt": "public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c;"
      },
      {
        "txt": "if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray();"
      },
      {
        "txt": "} public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try {"
      },
      {
        "txt": "int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } }"
      },
      {
        "txt": "return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) {"
      },
      {
        "txt": "return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) {"
      },
      {
        "txt": "return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null;"
      },
      {
        "txt": "} else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } }"
      },
      {
        "txt": "public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 938,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 114,
    "end-bug-line": 114,
    "bug": "private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {",
    "fix": "private static final int encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException;"
      },
      {
        "txt": "import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32;"
      },
      {
        "txt": "static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); }"
      },
      {
        "txt": "this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset; } <extra_id_0> buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); }"
      },
      {
        "txt": "buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream();"
      },
      {
        "txt": "for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); }"
      },
      {
        "txt": "} return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i];"
      },
      {
        "txt": "if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b);"
      },
      {
        "txt": "} } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); }"
      },
      {
        "txt": "public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } }"
      },
      {
        "txt": "public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; }"
      },
      {
        "txt": "try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) {"
      },
      {
        "txt": "return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException {"
      },
      {
        "txt": "if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\");"
      },
      {
        "txt": "} } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));"
      }
    ]
  },
  {
    "id": 939,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 120,
    "end-bug-line": 120,
    "bug": "",
    "fix": "return 3;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset;"
      },
      {
        "txt": "private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset;"
      },
      {
        "txt": "private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); <extra_id_0> public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS;"
      },
      {
        "txt": "if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null;"
      },
      {
        "txt": "} ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "txt": "throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);"
      },
      {
        "txt": "} public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); }"
      },
      {
        "txt": "public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } }"
      },
      {
        "txt": "public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() +"
      },
      {
        "txt": "\" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject);"
      },
      {
        "txt": "} else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException {"
      },
      {
        "txt": "if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 940,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 132,
    "end-bug-line": 132,
    "bug": "",
    "fix": "private static int getUnsignedOctet(final int index, final byte[] bytes) { int b = bytes[index]; if (b < 0) { b = 256 + b; } return b; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256);"
      },
      {
        "txt": "private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); }"
      },
      {
        "txt": "PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset; }"
      },
      {
        "txt": "buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } <extra_id_0> public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS;"
      },
      {
        "txt": "if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null;"
      },
      {
        "txt": "} ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "txt": "throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);"
      },
      {
        "txt": "} public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); }"
      },
      {
        "txt": "public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } }"
      },
      {
        "txt": "public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() +"
      },
      {
        "txt": "\" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject);"
      },
      {
        "txt": "} else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException {"
      },
      {
        "txt": "if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 941,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 144,
    "end-bug-line": 144,
    "bug": "",
    "fix": "private static int encodeByte(final int b, final boolean encode, final ByteArrayOutputStream buffer) { if (encode) { return encodeQuotedPrintable(b, buffer); } else { buffer.write(b); return 1; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256);"
      },
      {
        "txt": "private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); }"
      },
      {
        "txt": "PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset; }"
      },
      {
        "txt": "buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } <extra_id_0> public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS;"
      },
      {
        "txt": "if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null;"
      },
      {
        "txt": "} ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "txt": "throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);"
      },
      {
        "txt": "} public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); }"
      },
      {
        "txt": "public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } }"
      },
      {
        "txt": "public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() +"
      },
      {
        "txt": "\" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject);"
      },
      {
        "txt": "} else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException {"
      },
      {
        "txt": "if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 942,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 152,
    "end-bug-line": 152,
    "bug": "",
    "fix": "private static boolean isWhitespace(final int b) { return b == SPACE || b == TAB; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256);"
      },
      {
        "txt": "private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); }"
      },
      {
        "txt": "PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset; }"
      },
      {
        "txt": "buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } <extra_id_0> public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS;"
      },
      {
        "txt": "if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null;"
      },
      {
        "txt": "} ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "txt": "throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);"
      },
      {
        "txt": "} public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); }"
      },
      {
        "txt": "public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } }"
      },
      {
        "txt": "public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() +"
      },
      {
        "txt": "\" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject);"
      },
      {
        "txt": "} else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException {"
      },
      {
        "txt": "if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 943,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 175,
    "end-bug-line": 175,
    "bug": "",
    "fix": "int pos = 1;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException;"
      },
      {
        "txt": "import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {"
      },
      {
        "txt": "private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) {"
      },
      {
        "txt": "PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super();"
      },
      {
        "txt": "this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); <extra_id_0> for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "} if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {"
      },
      {
        "txt": "if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]);"
      },
      {
        "txt": "buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); }"
      },
      {
        "txt": "public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; }"
      },
      {
        "txt": "try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; }"
      },
      {
        "txt": "return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e);"
      },
      {
        "txt": "} } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else {"
      },
      {
        "txt": "throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject);"
      },
      {
        "txt": "} else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset;"
      },
      {
        "txt": "} public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 944,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 177,
    "end-bug-line": 177,
    "bug": "",
    "fix": "for (int i = 0; i < bytes.length - 3; i++) { int b = getUnsignedOctet(i, bytes); if (pos < SAFE_LENGTH) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException;"
      },
      {
        "txt": "import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {"
      },
      {
        "txt": "private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) {"
      },
      {
        "txt": "PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super();"
      },
      {
        "txt": "this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); <extra_id_0> for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) {"
      },
      {
        "txt": "} if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {"
      },
      {
        "txt": "if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]);"
      },
      {
        "txt": "buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); }"
      },
      {
        "txt": "public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; }"
      },
      {
        "txt": "try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; }"
      },
      {
        "txt": "return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e);"
      },
      {
        "txt": "} } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else {"
      },
      {
        "txt": "throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject);"
      },
      {
        "txt": "} else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset;"
      },
      {
        "txt": "} public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 945,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 178,
    "end-bug-line": 184,
    "bug": "for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b);",
    "fix": "pos += encodeByte(b, !printable.get(b), buffer);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException;"
      },
      {
        "txt": "import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {"
      },
      {
        "txt": "private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) {"
      },
      {
        "txt": "PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super();"
      },
      {
        "txt": "this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); <extra_id_0> } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); }"
      },
      {
        "txt": "return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) {"
      },
      {
        "txt": "try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); }"
      },
      {
        "txt": "} return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException {"
      },
      {
        "txt": "if (pString == null) { return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {"
      },
      {
        "txt": "if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try {"
      },
      {
        "txt": "return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject);"
      },
      {
        "txt": "} else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) {"
      },
      {
        "txt": "return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); }"
      },
      {
        "txt": "} public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 946,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 187,
    "end-bug-line": 187,
    "bug": "",
    "fix": "encodeByte(b, !printable.get(b) || isWhitespace(b), buffer);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); }"
      },
      {
        "txt": "public QuotedPrintableCodec(String charset) { super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2);"
      },
      {
        "txt": "} public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) {"
      },
      {
        "txt": "if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { <extra_id_0> encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {"
      },
      {
        "txt": "} public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try {"
      },
      {
        "txt": "int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } }"
      },
      {
        "txt": "return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) {"
      },
      {
        "txt": "return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) {"
      },
      {
        "txt": "return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset());"
      },
      {
        "txt": "} catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null;"
      },
      {
        "txt": "} else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } }"
      },
      {
        "txt": "public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 947,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 189,
    "end-bug-line": 189,
    "bug": "encodeQuotedPrintable(b, buffer);",
    "fix": "buffer.write(ESCAPE_CHAR); buffer.write(CR); buffer.write(LF); pos = 1;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); }"
      },
      {
        "txt": "public QuotedPrintableCodec(String charset) { super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2);"
      },
      {
        "txt": "} public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) {"
      },
      {
        "txt": "if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { <extra_id_0> } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) {"
      },
      {
        "txt": "public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]);"
      },
      {
        "txt": "int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray();"
      },
      {
        "txt": "} public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null;"
      },
      {
        "txt": "} try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null;"
      },
      {
        "txt": "} return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) {"
      },
      {
        "txt": "throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject);"
      },
      {
        "txt": "} else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) {"
      },
      {
        "txt": "return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() {"
      },
      {
        "txt": "return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 948,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 195,
    "end-bug-line": 195,
    "bug": "",
    "fix": "int b = getUnsignedOctet(bytes.length - 3, bytes); boolean encode = !printable.get(b) || (isWhitespace(b) && pos > SAFE_LENGTH - 5); pos += encodeByte(b, encode, buffer);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset;"
      },
      {
        "txt": "private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset;"
      },
      {
        "txt": "} private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b;"
      },
      {
        "txt": "if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } <extra_id_0> return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; }"
      },
      {
        "txt": "return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l));"
      },
      {
        "txt": "} catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) {"
      },
      {
        "txt": "return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try {"
      },
      {
        "txt": "return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);"
      },
      {
        "txt": "} public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); }"
      },
      {
        "txt": "} public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" +"
      },
      {
        "txt": "pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; }"
      },
      {
        "txt": "public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 949,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 199,
    "end-bug-line": 199,
    "bug": "",
    "fix": "if (pos > SAFE_LENGTH - 2) { buffer.write(ESCAPE_CHAR); buffer.write(CR); buffer.write(LF); } for (int i = bytes.length - 2; i < bytes.length; i++) { b = getUnsignedOctet(i, bytes);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset;"
      },
      {
        "txt": "private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset;"
      },
      {
        "txt": "} private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b;"
      },
      {
        "txt": "if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } <extra_id_0> return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; }"
      },
      {
        "txt": "return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l));"
      },
      {
        "txt": "} catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) {"
      },
      {
        "txt": "return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try {"
      },
      {
        "txt": "return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);"
      },
      {
        "txt": "} public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); }"
      },
      {
        "txt": "} public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" +"
      },
      {
        "txt": "pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; }"
      },
      {
        "txt": "public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 950,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 200,
    "end-bug-line": 200,
    "bug": "",
    "fix": "encode = !printable.get(b) || (i > bytes.length - 2 && isWhitespace(b)); encodeByte(b, encode, buffer); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset;"
      },
      {
        "txt": "private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset;"
      },
      {
        "txt": "} private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) {"
      },
      {
        "txt": "return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b;"
      },
      {
        "txt": "if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } <extra_id_0> return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; }"
      },
      {
        "txt": "return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l));"
      },
      {
        "txt": "} catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) {"
      },
      {
        "txt": "return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try {"
      },
      {
        "txt": "return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);"
      },
      {
        "txt": "} public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); }"
      },
      {
        "txt": "} public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" +"
      },
      {
        "txt": "pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) {"
      },
      {
        "txt": "return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; }"
      },
      {
        "txt": "public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 951,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 229,
    "end-bug-line": 229,
    "bug": "int u = Utils.digit16(bytes[++i]);",
    "fix": "if (bytes[++i] == CR) { continue; } int u = Utils.digit16(bytes[i]);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.net; import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder;"
      },
      {
        "txt": "import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder; import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256);"
      },
      {
        "txt": "private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i); } for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); }"
      },
      {
        "txt": "PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); } public QuotedPrintableCodec(String charset) { super(); this.charset = charset; }"
      },
      {
        "txt": "private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2); } public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null;"
      },
      {
        "txt": "} if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) { int b = c; if (b < 0) { b = 256 + b; }"
      },
      {
        "txt": "if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } } return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) {"
      },
      {
        "txt": "} ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) { try { <extra_id_0> int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } } else {"
      },
      {
        "txt": "} } else { buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); }"
      },
      {
        "txt": "public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null; } try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) {"
      },
      {
        "txt": "throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null; } return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException {"
      },
      {
        "txt": "if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException {"
      },
      {
        "txt": "if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject); } else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\");"
      },
      {
        "txt": "} } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else {"
      },
      {
        "txt": "throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() { return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) {"
      },
      {
        "txt": "return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  },
  {
    "id": 952,
    "file_path": "src/main/java/org/apache/commons/codec/net/QuotedPrintableCodec.java",
    "start-bug-line": 235,
    "end-bug-line": 235,
    "bug": "} else {",
    "fix": "} else if (b != CR && b != LF) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.UnsupportedEncodingException; import java.util.BitSet; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.DecoderException; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringDecoder; import org.apache.commons.codec.StringEncoder;"
      },
      {
        "txt": "import org.apache.commons.codec.binary.StringUtils; public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder { private final String charset; private static final BitSet PRINTABLE_CHARS = new BitSet(256); private static final byte ESCAPE_CHAR = '='; private static final byte TAB = 9; private static final byte SPACE = 32; static { for (int i = 33; i <= 60; i++) { PRINTABLE_CHARS.set(i);"
      },
      {
        "txt": "} for (int i = 62; i <= 126; i++) { PRINTABLE_CHARS.set(i); } PRINTABLE_CHARS.set(TAB); PRINTABLE_CHARS.set(SPACE); } public QuotedPrintableCodec() { this(CharEncoding.UTF_8); }"
      },
      {
        "txt": "public QuotedPrintableCodec(String charset) { super(); this.charset = charset; } private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) { buffer.write(ESCAPE_CHAR); char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16)); char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16)); buffer.write(hex1); buffer.write(hex2);"
      },
      {
        "txt": "} public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) { if (bytes == null) { return null; } if (printable == null) { printable = PRINTABLE_CHARS; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (byte c : bytes) {"
      },
      {
        "txt": "int b = c; if (b < 0) { b = 256 + b; } if (printable.get(b)) { buffer.write(b); } else { encodeQuotedPrintable(b, buffer); } }"
      },
      {
        "txt": "return buffer.toByteArray(); } public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException { if (bytes == null) { return null; } ByteArrayOutputStream buffer = new ByteArrayOutputStream(); for (int i = 0; i < bytes.length; i++) { final int b = bytes[i]; if (b == ESCAPE_CHAR) {"
      },
      {
        "txt": "int u = Utils.digit16(bytes[++i]); int l = Utils.digit16(bytes[++i]); buffer.write((char) ((u << 4) + l)); } catch (ArrayIndexOutOfBoundsException e) { throw new DecoderException(\"Invalid quoted-printable encoding\", e); } <extra_id_0> buffer.write(b); } } return buffer.toByteArray(); } public byte[] encode(byte[] bytes) {"
      },
      {
        "txt": "} public byte[] encode(byte[] bytes) { return encodeQuotedPrintable(PRINTABLE_CHARS, bytes); } public byte[] decode(byte[] bytes) throws DecoderException { return decodeQuotedPrintable(bytes); } public String encode(String pString) throws EncoderException { if (pString == null) { return null;"
      },
      {
        "txt": "} try { return encode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.getMessage(), e); } } public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException { if (pString == null) { return null;"
      },
      {
        "txt": "} return new String(decode(StringUtils.getBytesUsAscii(pString)), charset); } public String decode(String pString) throws DecoderException { if (pString == null) { return null; } try { return decode(pString, getDefaultCharset()); } catch (UnsupportedEncodingException e) {"
      },
      {
        "txt": "throw new DecoderException(e.getMessage(), e); } } public Object encode(Object pObject) throws EncoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) { return encode((byte[]) pObject); } else if (pObject instanceof String) { return encode((String) pObject);"
      },
      {
        "txt": "} else { throw new EncoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); } } public Object decode(Object pObject) throws DecoderException { if (pObject == null) { return null; } else if (pObject instanceof byte[]) {"
      },
      {
        "txt": "return decode((byte[]) pObject); } else if (pObject instanceof String) { return decode((String) pObject); } else { throw new DecoderException(\"Objects of type \" + pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); } } public String getDefaultCharset() {"
      },
      {
        "txt": "return this.charset; } public String encode(String pString, String charset) throws UnsupportedEncodingException { if (pString == null) { return null; } return StringUtils.newStringUsAscii(encode(pString.getBytes(charset))); }"
      }
    ]
  }
]
[
  {
    "id": 923,
    "file_path": "src/java/org/apache/commons/codec/binary/Base64.java",
    "start-bug-line": 446,
    "end-bug-line": 446,
    "bug": "if (lineLength > 0) {",
    "fix": "if (lineLength > 0 && pos > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.binary; import org.apache.commons.codec.BinaryDecoder; import org.apache.commons.codec.BinaryEncoder; import org.apache.commons.codec.DecoderException;"
      },
      {
        "txt": "import org.apache.commons.codec.EncoderException; import java.io.UnsupportedEncodingException; import java.math.BigInteger; public class Base64 implements BinaryEncoder, BinaryDecoder { static final int CHUNK_SIZE = 76; static final byte[] CHUNK_SEPARATOR = {'\\r','\\n'}; private static final byte[] STANDARD_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',"
      },
      {
        "txt": "'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/' }; private static final byte[] URL_SAFE_ENCODE_TABLE = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '-', '_' };"
      },
      {
        "txt": "private static final byte PAD = '='; private static final byte[] DECODE_TABLE = { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, 62, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 };"
      },
      {
        "txt": "private static final int MASK_6BITS = 0x3f; private static final int MASK_8BITS = 0xff; private final byte[] encodeTable; private final int lineLength; private final byte[] lineSeparator; private final int decodeSize; private final int encodeSize; private byte[] buf; private int pos; private int readPos;"
      },
      {
        "txt": "private int currentLinePos; private int modulus; private boolean eof; private int x; public Base64() { this(false); } public Base64(boolean urlSafe) { this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe); }"
      },
      {
        "txt": "public Base64(int lineLength) { this(lineLength, CHUNK_SEPARATOR); } public Base64(int lineLength, byte[] lineSeparator) { this(lineLength, lineSeparator, false); } public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) { this.lineLength = lineLength; this.lineSeparator = new byte[lineSeparator.length]; System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);"
      },
      {
        "txt": "if (lineLength > 0) { this.encodeSize = 4 + lineSeparator.length; } else { this.encodeSize = 4; } this.decodeSize = this.encodeSize - 1; if (containsBase64Byte(lineSeparator)) { String sep; try { sep = new String(lineSeparator, \"UTF-8\");"
      },
      {
        "txt": "} catch (UnsupportedEncodingException uee) { sep = new String(lineSeparator); } throw new IllegalArgumentException(\"lineSeperator must not contain base64 characters: [\" + sep + \"]\"); } this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE; } public boolean isUrlSafe() { return this.encodeTable == URL_SAFE_ENCODE_TABLE; }"
      },
      {
        "txt": "boolean hasData() { return this.buf != null; } int avail() { return buf != null ? pos - readPos : 0; } private void resizeBuf() { if (buf == null) { buf = new byte[8192]; pos = 0;"
      },
      {
        "txt": "readPos = 0; } else { byte[] b = new byte[buf.length * 2]; System.arraycopy(buf, 0, b, 0, buf.length); buf = b; } } int readResults(byte[] b, int bPos, int bAvail) { if (buf != null) { int len = Math.min(avail(), bAvail);"
      },
      {
        "txt": "if (buf != b) { System.arraycopy(buf, readPos, b, bPos, len); readPos += len; if (readPos >= pos) { buf = null; } } else { buf = null; } return len;"
      },
      {
        "txt": "} return eof ? -1 : 0; } void setInitialBuffer(byte[] out, int outPos, int outAvail) { if (out != null && out.length == outAvail) { buf = out; pos = outPos; readPos = outPos; } }"
      },
      {
        "txt": "void encode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } switch (modulus) {"
      },
      {
        "txt": "case 1: buf[pos++] = encodeTable[(x >> 2) & MASK_6BITS]; buf[pos++] = encodeTable[(x << 4) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; buf[pos++] = PAD; } break; case 2: buf[pos++] = encodeTable[(x >> 10) & MASK_6BITS];"
      },
      {
        "txt": "buf[pos++] = encodeTable[(x << 2) & MASK_6BITS]; if (encodeTable == STANDARD_ENCODE_TABLE) { buf[pos++] = PAD; } break; } <extra_id_0> System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; } } else { for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) {"
      },
      {
        "txt": "for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < encodeSize) { resizeBuf(); } modulus = (++modulus) % 3; int b = in[inPos++]; if (b < 0) { b += 256; } x = (x << 8) + b; if (0 == modulus) { buf[pos++] = encodeTable[(x >> 18) & MASK_6BITS];"
      },
      {
        "txt": "buf[pos++] = encodeTable[(x >> 12) & MASK_6BITS]; buf[pos++] = encodeTable[(x >> 6) & MASK_6BITS]; buf[pos++] = encodeTable[x & MASK_6BITS]; currentLinePos += 4; if (lineLength > 0 && lineLength <= currentLinePos) { System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length); pos += lineSeparator.length; currentLinePos = 0; } }"
      },
      {
        "txt": "} } } void decode(byte[] in, int inPos, int inAvail) { if (eof) { return; } if (inAvail < 0) { eof = true; }"
      },
      {
        "txt": "for (int i = 0; i < inAvail; i++) { if (buf == null || buf.length - pos < decodeSize) { resizeBuf(); } byte b = in[inPos++]; if (b == PAD) { eof = true; break; } else { if (b >= 0 && b < DECODE_TABLE.length) {"
      },
      {
        "txt": "int result = DECODE_TABLE[b]; if (result >= 0) { modulus = (++modulus) % 4; x = (x << 6) + result; if (modulus == 0) { buf[pos++] = (byte) ((x >> 16) & MASK_8BITS); buf[pos++] = (byte) ((x >> 8) & MASK_8BITS); buf[pos++] = (byte) (x & MASK_8BITS); } }"
      },
      {
        "txt": "} } } if (eof && modulus != 0) { x = x << 6; switch (modulus) { case 2: x = x << 6; buf[pos++] = (byte) ((x >> 16) & MASK_8BITS); break;"
      },
      {
        "txt": "case 3: buf[pos++] = (byte) ((x >> 16) & MASK_8BITS); buf[pos++] = (byte) ((x >> 8) & MASK_8BITS); break; } } } public static boolean isBase64(byte octet) { return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1); }"
      },
      {
        "txt": "public static boolean isArrayByteBase64(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) { if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) { return false; } } return true; } private static boolean containsBase64Byte(byte[] arrayOctet) { for (int i = 0; i < arrayOctet.length; i++) {"
      },
      {
        "txt": "if (isBase64(arrayOctet[i])) { return true; } } return false; } public static byte[] encodeBase64(byte[] binaryData) { return encodeBase64(binaryData, false); } public static byte[] encodeBase64URLSafe(byte[] binaryData) {"
      },
      {
        "txt": "return encodeBase64(binaryData, false, true); } public static byte[] encodeBase64Chunked(byte[] binaryData) { return encodeBase64(binaryData, true); } public Object decode(Object pObject) throws DecoderException { if (!(pObject instanceof byte[])) { throw new DecoderException(\"Parameter supplied to Base64 decode is not a byte[]\"); } return decode((byte[]) pObject);"
      },
      {
        "txt": "} public byte[] decode(byte[] pArray) { return decodeBase64(pArray); } public static byte[] encodeBase64(byte[] binaryData, boolean isChunked) { return encodeBase64(binaryData, isChunked, false); } public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) { if (binaryData == null || binaryData.length == 0) { return binaryData;"
      },
      {
        "txt": "} Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe); long len = (binaryData.length * 4) / 3; long mod = len % 4; if (mod != 0) { len += 4 - mod; } if (isChunked) { len += (1 + (len / CHUNK_SIZE)) * CHUNK_SEPARATOR.length; }"
      },
      {
        "txt": "if (len > Integer.MAX_VALUE) { throw new IllegalArgumentException( \"Input array too big, output array would be bigger than Integer.MAX_VALUE=\" + Integer.MAX_VALUE); } byte[] buf = new byte[(int) len]; b64.setInitialBuffer(buf, 0, buf.length); b64.encode(binaryData, 0, binaryData.length); b64.encode(binaryData, 0, -1); // Notify encoder of EOF. if (b64.buf != buf) { b64.readResults(buf, 0, buf.length);"
      },
      {
        "txt": "} if (urlSafe && b64.pos < buf.length) { byte[] smallerBuf = new byte[b64.pos]; System.arraycopy(buf, 0, smallerBuf, 0, b64.pos); buf = smallerBuf; } return buf; } public static byte[] decodeBase64(byte[] base64Data) { if (base64Data == null || base64Data.length == 0) {"
      },
      {
        "txt": "return base64Data; } Base64 b64 = new Base64(); long len = (base64Data.length * 3) / 4; byte[] buf = new byte[(int) len]; b64.setInitialBuffer(buf, 0, buf.length); b64.decode(base64Data, 0, base64Data.length); b64.decode(base64Data, 0, -1); // Notify decoder of EOF. byte[] result = new byte[b64.pos]; b64.readResults(result, 0, result.length);"
      },
      {
        "txt": "return result; } static byte[] discardWhitespace(byte[] data) { byte groomedData[] = new byte[data.length]; int bytesCopied = 0; for (int i = 0; i < data.length; i++) { switch (data[i]) { case ' ' : case '\\n' : case '\\r' :"
      },
      {
        "txt": "case '\\t' : break; default : groomedData[bytesCopied++] = data[i]; } } byte packedData[] = new byte[bytesCopied]; System.arraycopy(groomedData, 0, packedData, 0, bytesCopied); return packedData; }"
      },
      {
        "txt": "private static boolean isWhiteSpace(byte byteToCheck) { switch (byteToCheck) { case ' ' : case '\\n' : case '\\r' : case '\\t' : return true; default : return false; }"
      },
      {
        "txt": "} static byte[] discardNonBase64(byte[] data) { byte groomedData[] = new byte[data.length]; int bytesCopied = 0; for (int i = 0; i < data.length; i++) { if (isBase64(data[i])) { groomedData[bytesCopied++] = data[i]; } } byte packedData[] = new byte[bytesCopied];"
      },
      {
        "txt": "System.arraycopy(groomedData, 0, packedData, 0, bytesCopied); return packedData; } public Object encode(Object pObject) throws EncoderException { if (!(pObject instanceof byte[])) { throw new EncoderException(\"Parameter supplied to Base64 encode is not a byte[]\"); } return encode((byte[]) pObject); } public byte[] encode(byte[] pArray) {"
      },
      {
        "txt": "return encodeBase64(pArray, false, isUrlSafe()); } public static BigInteger decodeInteger(byte[] pArray) { return new BigInteger(1, decodeBase64(pArray)); } public static byte[] encodeInteger(BigInteger bigInt) { if(bigInt == null) { throw new NullPointerException(\"encodeInteger called with null parameter\"); } return encodeBase64(toIntegerBytes(bigInt), false);"
      },
      {
        "txt": "} static byte[] toIntegerBytes(BigInteger bigInt) { int bitlen = bigInt.bitLength(); bitlen = ((bitlen + 7) >> 3) << 3; byte[] bigBytes = bigInt.toByteArray(); if(((bigInt.bitLength() % 8) != 0) && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) { return bigBytes; } int startSrc = 0;"
      },
      {
        "txt": "int len = bigBytes.length; if((bigInt.bitLength() % 8) == 0) { startSrc = 1; len--; } int startDst = bitlen / 8 - len; // to pad w/ nulls as per spec byte[] resizedBytes = new byte[bitlen / 8]; System.arraycopy(bigBytes, startSrc, resizedBytes, startDst, len); return resizedBytes; }"
      }
    ]
  }
]
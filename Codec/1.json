[
  {
    "id": 920,
    "file_path": "src/java/org/apache/commons/codec/language/Caverphone.java",
    "start-bug-line": 59,
    "end-bug-line": 59,
    "bug": "txt = txt.toLowerCase();",
    "fix": "txt = txt.toLowerCase(java.util.Locale.ENGLISH);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; public class Caverphone implements StringEncoder {"
      },
      {
        "txt": "super(); } public String caverphone(String txt) { if( txt == null || txt.length() == 0 ) { return \"1111111111\"; } <extra_id_0> txt = txt.replaceAll(\"[^a-z]\", \"\"); txt = txt.replaceAll(\"e$\", \"\"); // 2.0 only txt = txt.replaceAll(\"^cough\", \"cou2f\"); txt = txt.replaceAll(\"^rough\", \"rou2f\"); txt = txt.replaceAll(\"^tough\", \"tou2f\"); txt = txt.replaceAll(\"^enough\", \"enou2f\"); // 2.0 only"
      },
      {
        "txt": "txt = txt.replaceAll(\"^tough\", \"tou2f\"); txt = txt.replaceAll(\"^enough\", \"enou2f\"); // 2.0 only txt = txt.replaceAll(\"^trough\", \"trou2f\"); // 2.0 only - note the spec says ^enough here again, c+p error I assume txt = txt.replaceAll(\"^gn\", \"2n\"); txt = txt.replaceAll(\"^mb\", \"m2\"); txt = txt.replaceAll(\"cq\", \"2q\"); txt = txt.replaceAll(\"ci\", \"si\"); txt = txt.replaceAll(\"ce\", \"se\"); txt = txt.replaceAll(\"cy\", \"sy\"); txt = txt.replaceAll(\"tch\", \"2ch\");"
      },
      {
        "txt": "txt = txt.replaceAll(\"c\", \"k\"); txt = txt.replaceAll(\"q\", \"k\"); txt = txt.replaceAll(\"x\", \"k\"); txt = txt.replaceAll(\"v\", \"f\"); txt = txt.replaceAll(\"dg\", \"2g\"); txt = txt.replaceAll(\"tio\", \"sio\"); txt = txt.replaceAll(\"tia\", \"sia\"); txt = txt.replaceAll(\"d\", \"t\"); txt = txt.replaceAll(\"ph\", \"fh\"); txt = txt.replaceAll(\"b\", \"p\");"
      },
      {
        "txt": "txt = txt.replaceAll(\"sh\", \"s2\"); txt = txt.replaceAll(\"z\", \"s\"); txt = txt.replaceAll(\"^[aeiou]\", \"A\"); txt = txt.replaceAll(\"[aeiou]\", \"3\"); txt = txt.replaceAll(\"j\", \"y\"); // 2.0 only txt = txt.replaceAll(\"^y3\", \"Y3\"); // 2.0 only txt = txt.replaceAll(\"^y\", \"A\"); // 2.0 only txt = txt.replaceAll(\"y\", \"3\"); // 2.0 only txt = txt.replaceAll(\"3gh3\", \"3kh3\"); txt = txt.replaceAll(\"gh\", \"22\");"
      },
      {
        "txt": "txt = txt.replaceAll(\"g\", \"k\"); txt = txt.replaceAll(\"s+\", \"S\"); txt = txt.replaceAll(\"t+\", \"T\"); txt = txt.replaceAll(\"p+\", \"P\"); txt = txt.replaceAll(\"k+\", \"K\"); txt = txt.replaceAll(\"f+\", \"F\"); txt = txt.replaceAll(\"m+\", \"M\"); txt = txt.replaceAll(\"n+\", \"N\"); txt = txt.replaceAll(\"w3\", \"W3\"); txt = txt.replaceAll(\"wh3\", \"Wh3\");"
      },
      {
        "txt": "txt = txt.replaceAll(\"w$\", \"3\"); // 2.0 only txt = txt.replaceAll(\"w\", \"2\"); txt = txt.replaceAll(\"^h\", \"A\"); txt = txt.replaceAll(\"h\", \"2\"); txt = txt.replaceAll(\"r3\", \"R3\"); txt = txt.replaceAll(\"r$\", \"3\"); // 2.0 only txt = txt.replaceAll(\"r\", \"2\"); txt = txt.replaceAll(\"l3\", \"L3\"); txt = txt.replaceAll(\"l$\", \"3\"); // 2.0 only txt = txt.replaceAll(\"l\", \"2\");"
      },
      {
        "txt": "txt = txt.replaceAll(\"2\", \"\"); txt = txt.replaceAll(\"3$\", \"A\"); // 2.0 only txt = txt.replaceAll(\"3\", \"\"); txt = txt + \"111111\" + \"1111\"; // 1.0 only has 6 1s return txt.substring(0, 10); // 1.0 truncates to 6 } public Object encode(Object pObject) throws EncoderException { if (!(pObject instanceof java.lang.String)) { throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); }"
      },
      {
        "txt": "return caverphone((String) pObject); } public String encode(String pString) { return caverphone(pString); } public boolean isCaverphoneEqual(String str1, String str2) { return caverphone(str1).equals(caverphone(str2)); }"
      }
    ]
  },
  {
    "id": 921,
    "file_path": "src/java/org/apache/commons/codec/language/Metaphone.java",
    "start-bug-line": 88,
    "end-bug-line": 88,
    "bug": "return txt.toUpperCase() ;",
    "fix": "return txt.toUpperCase(java.util.Locale.ENGLISH) ;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; public class Metaphone implements StringEncoder { private static final String VOWELS = \"AEIOU\" ; private static final String FRONTV = \"EIY\" ; private static final String VARSON = \"CSPTG\" ; private int maxCodeLen = 4 ; public Metaphone() { super();"
      },
      {
        "txt": "public String metaphone(String txt) { boolean hard = false ; if ((txt == null) || (txt.length() == 0)) { return \"\" ; } if (txt.length() == 1) { <extra_id_0> } char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ; StringBuffer local = new StringBuffer(40); // manipulate StringBuffer code = new StringBuffer(10) ; // output switch(inwd[0]) { case 'K' :"
      },
      {
        "txt": "switch(inwd[0]) { case 'K' : case 'G' : case 'P' : /* looking for KN, etc*/ if (inwd[1] == 'N') { local.append(inwd, 1, inwd.length - 1); } else { local.append(inwd); } break;"
      },
      {
        "txt": "case 'A': /* looking for AE */ if (inwd[1] == 'E') { local.append(inwd, 1, inwd.length - 1); } else { local.append(inwd); } break; case 'W' : /* looking for WR or WH */ if (inwd[1] == 'R') { // WR -> R local.append(inwd, 1, inwd.length - 1);"
      },
      {
        "txt": "break ; } if (inwd[1] == 'H') { local.append(inwd, 1, inwd.length - 1); local.setCharAt(0, 'W'); // WH -> W } else { local.append(inwd); } break; case 'X' : /* initial X becomes S */"
      },
      {
        "txt": "inwd[0] = 'S'; local.append(inwd); break ; default : local.append(inwd); } // now local has working string with initials fixed int wdsz = local.length(); int n = 0 ; while ((code.length() < this.getMaxCodeLen()) && (n < wdsz) ) { // max code size of 4 works well"
      },
      {
        "txt": "char symb = local.charAt(n) ; if ((symb != 'C') && (isPreviousChar( local, n, symb )) ) { n++ ; } else { // not dup switch(symb) { case 'A' : case 'E' : case 'I' : case 'O' : case 'U' : if (n == 0) { code.append(symb); } break ; // only use vowel if leading char"
      },
      {
        "txt": "case 'B' : if ( isPreviousChar(local, n, 'M') && isLastChar(wdsz, n) ) { // B is silent if word ends in MB break; } code.append(symb); break; case 'C' : // lots of C special cases if ( isPreviousChar(local, n, 'S') && !isLastChar(wdsz, n) &&"
      },
      {
        "txt": "(FRONTV.indexOf(local.charAt(n + 1)) >= 0) ) { break; } if (regionMatch(local, n, \"CIA\")) { // \"CIA\" -> X code.append('X'); break; } if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0)) { code.append('S');"
      },
      {
        "txt": "break; // CI,CE,CY -> S } if (isPreviousChar(local, n, 'S') && isNextChar(local, n, 'H') ) { // SCH->sk code.append('K') ; break ; } if (isNextChar(local, n, 'H')) { // detect CH if ((n == 0) && (wdsz >= 3) &&"
      },
      {
        "txt": "isVowel(local,2) ) { // CH consonant -> K consonant code.append('K'); } else { code.append('X'); // CHvowel -> X } } else { code.append('K'); } break ; case 'D' :"
      },
      {
        "txt": "if (!isLastChar(wdsz, n + 1) && isNextChar(local, n, 'G') && (FRONTV.indexOf(local.charAt(n + 2)) >= 0)) { // DGE DGI DGY -> J code.append('J'); n += 2 ; } else { code.append('T'); } break ; case 'G' : // GH silent at end or before consonant if (isLastChar(wdsz, n + 1) &&"
      },
      {
        "txt": "isNextChar(local, n, 'H')) { break; } if (!isLastChar(wdsz, n + 1) && isNextChar(local,n,'H') && !isVowel(local,n+2)) { break; } if ((n > 0) && ( regionMatch(local, n, \"GN\") ||"
      },
      {
        "txt": "regionMatch(local, n, \"GNED\") ) ) { break; // silent G } if (isPreviousChar(local, n, 'G')) { hard = true ; } else { hard = false ; } if (!isLastChar(wdsz, n) && (FRONTV.indexOf(local.charAt(n + 1)) >= 0) &&"
      },
      {
        "txt": "(!hard)) { code.append('J'); } else { code.append('K'); } break ; case 'H': if (isLastChar(wdsz, n)) { break ; // terminal H }"
      },
      {
        "txt": "if ((n > 0) && (VARSON.indexOf(local.charAt(n - 1)) >= 0)) { break; } if (isVowel(local,n+1)) { code.append('H'); // Hvowel } break; case 'F': case 'J' :"
      },
      {
        "txt": "case 'L' : case 'M': case 'N' : case 'R' : code.append(symb); break; case 'K' : if (n > 0) { // not initial if (!isPreviousChar(local, n, 'C')) { code.append(symb);"
      },
      {
        "txt": "} } else { code.append(symb); // initial K } break ; case 'P' : if (isNextChar(local,n,'H')) { code.append('F'); } else { code.append(symb);"
      },
      {
        "txt": "} break ; case 'Q' : code.append('K'); break; case 'S' : if (regionMatch(local,n,\"SH\") || regionMatch(local,n,\"SIO\") || regionMatch(local,n,\"SIA\")) { code.append('X');"
      },
      {
        "txt": "} else { code.append('S'); } break; case 'T' : if (regionMatch(local,n,\"TIA\") || regionMatch(local,n,\"TIO\")) { code.append('X'); break; }"
      },
      {
        "txt": "if (regionMatch(local,n,\"TCH\")) { break; } if (regionMatch(local,n,\"TH\")) { code.append('0'); } else { code.append('T'); } break ; case 'V' :"
      },
      {
        "txt": "code.append('F'); break ; case 'W' : case 'Y' : // silent if not followed by vowel if (!isLastChar(wdsz,n) && isVowel(local,n+1)) { code.append(symb); } break ; case 'X' : code.append('K'); code.append('S'); break ;"
      },
      {
        "txt": "case 'Z' : code.append('S'); break ; } // end switch n++ ; } // end else from symb != 'C' if (code.length() > this.getMaxCodeLen()) { code.setLength(this.getMaxCodeLen()); } } return code.toString();"
      },
      {
        "txt": "} private boolean isVowel(StringBuffer string, int index) { return VOWELS.indexOf(string.charAt(index)) >= 0; } private boolean isPreviousChar(StringBuffer string, int index, char c) { boolean matches = false; if( index > 0 && index < string.length() ) { matches = string.charAt(index - 1) == c; }"
      },
      {
        "txt": "return matches; } private boolean isNextChar(StringBuffer string, int index, char c) { boolean matches = false; if( index >= 0 && index < string.length() - 1 ) { matches = string.charAt(index + 1) == c; } return matches; }"
      },
      {
        "txt": "private boolean regionMatch(StringBuffer string, int index, String test) { boolean matches = false; if( index >= 0 && (index + test.length() - 1) < string.length() ) { String substring = string.substring( index, index + test.length()); matches = substring.equals( test ); } return matches; } private boolean isLastChar(int wdsz, int n) {"
      },
      {
        "txt": "return n + 1 == wdsz; } public Object encode(Object pObject) throws EncoderException { if (!(pObject instanceof java.lang.String)) { throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); } return metaphone((String) pObject); } public String encode(String pString) { return metaphone(pString);"
      },
      {
        "txt": "} public boolean isMetaphoneEqual(String str1, String str2) { return metaphone(str1).equals(metaphone(str2)); } public int getMaxCodeLen() { return this.maxCodeLen; } public void setMaxCodeLen(int maxCodeLen) { this.maxCodeLen = maxCodeLen; }"
      }
    ]
  },
  {
    "id": 922,
    "file_path": "src/java/org/apache/commons/codec/language/SoundexUtils.java",
    "start-bug-line": 53,
    "end-bug-line": 53,
    "bug": "return str.toUpperCase();",
    "fix": "return str.toUpperCase(java.util.Locale.ENGLISH);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; final class SoundexUtils { static String clean(String str) { if (str == null || str.length() == 0) { return str; } int len = str.length(); char[] chars = new char[len];"
      },
      {
        "txt": "for (int i = 0; i < len; i++) { if (Character.isLetter(str.charAt(i))) { chars[count++] = str.charAt(i); } } if (count == len) { <extra_id_0> } return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH); } static int difference(StringEncoder encoder, String s1, String s2) throws EncoderException { return differenceEncoded(encoder.encode(s1), encoder.encode(s2)); }"
      },
      {
        "txt": "return differenceEncoded(encoder.encode(s1), encoder.encode(s2)); } static int differenceEncoded(String es1, String es2) { if (es1 == null || es2 == null) { return 0; } int lengthToMatch = Math.min(es1.length(), es2.length()); int diff = 0; for (int i = 0; i < lengthToMatch; i++) { if (es1.charAt(i) == es2.charAt(i)) {"
      },
      {
        "txt": "diff++; } } return diff; }"
      }
    ]
  }
]
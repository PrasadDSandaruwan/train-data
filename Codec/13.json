[
  {
    "id": 958,
    "file_path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
    "start-bug-line": 0,
    "end-bug-line": 0,
    "bug": "",
    "fix": "package org.apache.commons.codec.binary;  /** * <p> * Operations on {@link CharSequence} that are {@code null} safe. * </p> * <p> * Copied from Apache Commons Lang r1586295 on April 10, 2014 (day of 3.3.2 release). * </p> * * @see CharSequence * @since 1.10 */ public class CharSequenceUtils {  /** * Green implementation of regionMatches. * * @param cs *            the {@code CharSequence} to be processed * @param ignoreCase *            whether or not to be case insensitive * @param thisStart *            the index to start on the {@code cs} CharSequence * @param substring *            the {@code CharSequence} to be looked for * @param start *            the index to start on the {@code substring} CharSequence * @param length *            character length of the region * @return whether the region matched */ static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart, final CharSequence substring, final int start, final int length) { if (cs instanceof String && substring instanceof String) { return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length); } int index1 = thisStart; int index2 = start; int tmpLen = length;  while (tmpLen-- > 0) { char c1 = cs.charAt(index1++); char c2 = substring.charAt(index2++);  if (c1 == c2) { continue; }  if (!ignoreCase) { return false; }  // The same check as in String.regionMatches(): if (Character.toUpperCase(c1) != Character.toUpperCase(c2) && Character.toLowerCase(c1) != Character.toLowerCase(c2)) { return false; } }  return true; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.binary; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.Charsets; public class StringUtils {"
      },
      {
        "txt": "import org.apache.commons.codec.Charsets; public class StringUtils { private static byte[] getBytes(final String string, final Charset charset) { if (string == null) { return null; } return string.getBytes(charset); } public static byte[] getBytesIso8859_1(final String string) { return getBytes(string, Charsets.ISO_8859_1);"
      },
      {
        "txt": "} public static byte[] getBytesUnchecked(final String string, final String charsetName) { if (string == null) { return null; } try { return string.getBytes(charsetName); } catch (final UnsupportedEncodingException e) { throw StringUtils.newIllegalStateException(charsetName, e); }"
      },
      {
        "txt": "} public static byte[] getBytesUsAscii(final String string) { return getBytes(string, Charsets.US_ASCII); } public static byte[] getBytesUtf16(final String string) { return getBytes(string, Charsets.UTF_16); } public static byte[] getBytesUtf16Be(final String string) { return getBytes(string, Charsets.UTF_16BE); }"
      },
      {
        "txt": "public static byte[] getBytesUtf16Le(final String string) { return getBytes(string, Charsets.UTF_16LE); } public static byte[] getBytesUtf8(final String string) { return getBytes(string, Charsets.UTF_8); } private static IllegalStateException newIllegalStateException(final String charsetName, final UnsupportedEncodingException e) { return new IllegalStateException(charsetName + \": \" + e); }"
      },
      {
        "txt": "private static String newString(final byte[] bytes, final Charset charset) { return bytes == null ? null : new String(bytes, charset); } public static String newString(final byte[] bytes, final String charsetName) { if (bytes == null) { return null; } try { return new String(bytes, charsetName); } catch (final UnsupportedEncodingException e) {"
      },
      {
        "txt": "throw StringUtils.newIllegalStateException(charsetName, e); } } public static String newStringIso8859_1(final byte[] bytes) { return new String(bytes, Charsets.ISO_8859_1); } public static String newStringUsAscii(final byte[] bytes) { return new String(bytes, Charsets.US_ASCII); } public static String newStringUtf16(final byte[] bytes) {"
      },
      {
        "txt": "return new String(bytes, Charsets.UTF_16); } public static String newStringUtf16Be(final byte[] bytes) { return new String(bytes, Charsets.UTF_16BE); } public static String newStringUtf16Le(final byte[] bytes) { return new String(bytes, Charsets.UTF_16LE); } public static String newStringUtf8(final byte[] bytes) { return newString(bytes, Charsets.UTF_8);"
      }
    ]
  },
  {
    "id": 959,
    "file_path": "src/main/java/org/apache/commons/codec/binary/StringUtils.java",
    "start-bug-line": 70,
    "end-bug-line": 70,
    "bug": "",
    "fix": "public static boolean equals(final CharSequence cs1, final CharSequence cs2) { if (cs1 == cs2) { return true; } if (cs1 == null || cs2 == null) { return false; } if (cs1 instanceof String && cs2 instanceof String) { return cs1.equals(cs2); } return CharSequenceUtils.regionMatches(cs1, false, 0, cs2, 0, Math.max(cs1.length(), cs2.length())); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.binary; import java.io.UnsupportedEncodingException; import java.nio.charset.Charset; import org.apache.commons.codec.CharEncoding; import org.apache.commons.codec.Charsets; public class StringUtils { <extra_id_0> private static byte[] getBytes(final String string, final Charset charset) { if (string == null) { return null; } return string.getBytes(charset); }"
      },
      {
        "txt": "return string.getBytes(charset); } public static byte[] getBytesIso8859_1(final String string) { return getBytes(string, Charsets.ISO_8859_1); } public static byte[] getBytesUnchecked(final String string, final String charsetName) { if (string == null) { return null; } try {"
      },
      {
        "txt": "return string.getBytes(charsetName); } catch (final UnsupportedEncodingException e) { throw StringUtils.newIllegalStateException(charsetName, e); } } public static byte[] getBytesUsAscii(final String string) { return getBytes(string, Charsets.US_ASCII); } public static byte[] getBytesUtf16(final String string) { return getBytes(string, Charsets.UTF_16);"
      },
      {
        "txt": "} public static byte[] getBytesUtf16Be(final String string) { return getBytes(string, Charsets.UTF_16BE); } public static byte[] getBytesUtf16Le(final String string) { return getBytes(string, Charsets.UTF_16LE); } public static byte[] getBytesUtf8(final String string) { return getBytes(string, Charsets.UTF_8); }"
      },
      {
        "txt": "private static IllegalStateException newIllegalStateException(final String charsetName, final UnsupportedEncodingException e) { return new IllegalStateException(charsetName + \": \" + e); } private static String newString(final byte[] bytes, final Charset charset) { return bytes == null ? null : new String(bytes, charset); } public static String newString(final byte[] bytes, final String charsetName) { if (bytes == null) { return null;"
      },
      {
        "txt": "} try { return new String(bytes, charsetName); } catch (final UnsupportedEncodingException e) { throw StringUtils.newIllegalStateException(charsetName, e); } } public static String newStringIso8859_1(final byte[] bytes) { return new String(bytes, Charsets.ISO_8859_1); }"
      },
      {
        "txt": "public static String newStringUsAscii(final byte[] bytes) { return new String(bytes, Charsets.US_ASCII); } public static String newStringUtf16(final byte[] bytes) { return new String(bytes, Charsets.UTF_16); } public static String newStringUtf16Be(final byte[] bytes) { return new String(bytes, Charsets.UTF_16BE); } public static String newStringUtf16Le(final byte[] bytes) {"
      },
      {
        "txt": "return new String(bytes, Charsets.UTF_16LE); } public static String newStringUtf8(final byte[] bytes) { return newString(bytes, Charsets.UTF_8); }"
      }
    ]
  },
  {
    "id": 960,
    "file_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
    "start-bug-line": 22,
    "end-bug-line": 22,
    "bug": "",
    "fix": "import org.apache.commons.codec.binary.StringUtils;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; <extra_id_0> public class DoubleMetaphone implements StringEncoder { private static final String VOWELS = \"AEIOUY\"; private static final String[] SILENT_START = { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" }; private static final String[] L_R_N_M_B_H_F_V_W_SPACE = { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };"
      },
      {
        "txt": "private static final String[] L_R_N_M_B_H_F_V_W_SPACE = { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" }; private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" }; private static final String[] L_T_K_S_N_M_B_Z = { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" }; private int maxCodeLen = 4; public DoubleMetaphone() { super(); }"
      },
      {
        "txt": "public String doubleMetaphone(final String value) { return doubleMetaphone(value, false); } public String doubleMetaphone(String value, final boolean alternate) { value = cleanInput(value); if (value == null) { return null; } final boolean slavoGermanic = isSlavoGermanic(value); int index = isSilentStart(value) ? 1 : 0;"
      },
      {
        "txt": "final DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen()); while (!result.isComplete() && index <= value.length() - 1) { switch (value.charAt(index)) { case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y': index = handleAEIOUY(result, index);"
      },
      {
        "txt": "break; case 'B': result.append('P'); index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1; break; case '\\u00C7': result.append('S'); index++; break; case 'C':"
      },
      {
        "txt": "index = handleC(value, result, index); break; case 'D': index = handleD(value, result, index); break; case 'F': result.append('F'); index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1; break; case 'G':"
      },
      {
        "txt": "index = handleG(value, result, index, slavoGermanic); break; case 'H': index = handleH(value, result, index); break; case 'J': index = handleJ(value, result, index, slavoGermanic); break; case 'K': result.append('K');"
      },
      {
        "txt": "index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1; break; case 'L': index = handleL(value, result, index); break; case 'M': result.append('M'); index = conditionM0(value, index) ? index + 2 : index + 1; break; case 'N':"
      },
      {
        "txt": "result.append('N'); index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1; break; case '\\u00D1': result.append('N'); index++; break; case 'P': index = handleP(value, result, index); break;"
      },
      {
        "txt": "case 'Q': result.append('K'); index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1; break; case 'R': index = handleR(value, result, index, slavoGermanic); break; case 'S': index = handleS(value, result, index, slavoGermanic); break;"
      },
      {
        "txt": "case 'T': index = handleT(value, result, index); break; case 'V': result.append('F'); index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1; break; case 'W': index = handleW(value, result, index); break;"
      },
      {
        "txt": "case 'X': index = handleX(value, result, index); break; case 'Z': index = handleZ(value, result, index, slavoGermanic); break; default: index++; break; }"
      },
      {
        "txt": "} return alternate ? result.getAlternate() : result.getPrimary(); } @Override public Object encode(final Object obj) throws EncoderException { if (!(obj instanceof String)) { throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); } return doubleMetaphone((String) obj); }"
      },
      {
        "txt": "@Override public String encode(final String value) { return doubleMetaphone(value); } public boolean isDoubleMetaphoneEqual(final String value1, final String value2) { return isDoubleMetaphoneEqual(value1, value2, false); } public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) { return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate)); }"
      },
      {
        "txt": "public int getMaxCodeLen() { return this.maxCodeLen; } public void setMaxCodeLen(final int maxCodeLen) { this.maxCodeLen = maxCodeLen; } private int handleAEIOUY(final DoubleMetaphoneResult result, final int index) { if (index == 0) { result.append('A'); }"
      },
      {
        "txt": "return index + 1; } private int handleC(final String value, final DoubleMetaphoneResult result, int index) { if (conditionC0(value, index)) { // very confusing, moved out result.append('K'); index += 2; } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) { result.append('S'); index += 2; } else if (contains(value, index, 2, \"CH\")) {"
      },
      {
        "txt": "index = handleCH(value, result, index); } else if (contains(value, index, 2, \"CZ\") && !contains(value, index - 2, 4, \"WICZ\")) { result.append('S', 'X'); index += 2; } else if (contains(value, index + 1, 3, \"CIA\")) { result.append('X'); index += 3; } else if (contains(value, index, 2, \"CC\") && !(index == 1 && charAt(value, 0) == 'M')) {"
      },
      {
        "txt": "return handleCC(value, result, index); } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) { result.append('K'); index += 2; } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) { if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) { result.append('S', 'X'); } else { result.append('S'); }"
      },
      {
        "txt": "index += 2; } else { result.append('K'); if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { index += 3; } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index + 1, 2, \"CE\", \"CI\")) { index += 2; } else { index++;"
      },
      {
        "txt": "} } return index; } private int handleCC(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && !contains(value, index + 2, 2, \"HU\")) { if ((index == 1 && charAt(value, index - 1) == 'A') || contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) { result.append(\"KS\");"
      },
      {
        "txt": "} else { result.append('X'); } index += 3; } else { // Pierce's rule result.append('K'); index += 2; } return index; }"
      },
      {
        "txt": "private int handleCH(final String value, final DoubleMetaphoneResult result, final int index) { if (index > 0 && contains(value, index, 4, \"CHAE\")) { // Michael result.append('K', 'X'); return index + 2; } else if (conditionCH0(value, index)) { result.append('K'); return index + 2; } else if (conditionCH1(value, index)) { result.append('K'); return index + 2;"
      },
      {
        "txt": "} else { if (index > 0) { if (contains(value, 0, 2, \"MC\")) { result.append('K'); } else { result.append('X', 'K'); } } else { result.append('X'); }"
      },
      {
        "txt": "return index + 2; } } private int handleD(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 2, \"DG\")) { if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) { result.append('J'); index += 3; } else { result.append(\"TK\");"
      },
      {
        "txt": "index += 2; } } else if (contains(value, index, 2, \"DT\", \"DD\")) { result.append('T'); index += 2; } else { result.append('T'); index++; } return index;"
      },
      {
        "txt": "} private int handleG(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (charAt(value, index + 1) == 'H') { index = handleGH(value, result, index); } else if (charAt(value, index + 1) == 'N') { if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) { result.append(\"KN\", \"N\"); } else if (!contains(value, index + 2, 2, \"EY\") && charAt(value, index + 1) != 'Y' && !slavoGermanic) {"
      },
      {
        "txt": "result.append(\"N\", \"KN\"); } else { result.append(\"KN\"); } index = index + 2; } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) { result.append(\"KL\", \"L\"); index += 2; } else if (index == 0 && (charAt(value, index + 1) == 'Y' ||"
      },
      {
        "txt": "contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) { result.append('K', 'J'); index += 2; } else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(value, index - 1, 1, \"E\", \"I\") && !contains(value, index - 1, 3, \"RGY\", \"OGY\")) { result.append('K', 'J'); index += 2;"
      },
      {
        "txt": "} else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) { if (contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\") || contains(value, index + 1, 2, \"ET\")) { result.append('K'); } else if (contains(value, index + 1, 3, \"IER\")) { result.append('J'); } else { result.append('J', 'K');"
      },
      {
        "txt": "} index += 2; } else if (charAt(value, index + 1) == 'G') { index += 2; result.append('K'); } else { index++; result.append('K'); } return index;"
      },
      {
        "txt": "} private int handleGH(final String value, final DoubleMetaphoneResult result, int index) { if (index > 0 && !isVowel(charAt(value, index - 1))) { result.append('K'); index += 2; } else if (index == 0) { if (charAt(value, index + 2) == 'I') { result.append('J'); } else { result.append('K');"
      },
      {
        "txt": "} index += 2; } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) || (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) || (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) { index += 2; } else { if (index > 2 && charAt(value, index - 1) == 'U' && contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) { result.append('F');"
      },
      {
        "txt": "} else if (index > 0 && charAt(value, index - 1) != 'I') { result.append('K'); } index += 2; } return index; } private int handleH(final String value, final DoubleMetaphoneResult result, int index) { if ((index == 0 || isVowel(charAt(value, index - 1))) && isVowel(charAt(value, index + 1))) {"
      },
      {
        "txt": "result.append('H'); index += 2; } else { index++; } return index; } private int handleJ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {"
      },
      {
        "txt": "if ((index == 0 && (charAt(value, index + 4) == ' ') || value.length() == 4) || contains(value, 0, 4, \"SAN \")) { result.append('H'); } else { result.append('J', 'H'); } index++; } else { if (index == 0 && !contains(value, index, 4, \"JOSE\")) { result.append('J', 'A');"
      },
      {
        "txt": "} else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) { result.append('J', 'H'); } else if (index == value.length() - 1) { result.append('J', ' '); } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) { result.append('J'); } if (charAt(value, index + 1) == 'J') {"
      },
      {
        "txt": "index += 2; } else { index++; } } return index; } private int handleL(final String value, final DoubleMetaphoneResult result, int index) { if (charAt(value, index + 1) == 'L') { if (conditionL0(value, index)) {"
      },
      {
        "txt": "result.appendPrimary('L'); } else { result.append('L'); } index += 2; } else { index++; result.append('L'); } return index;"
      },
      {
        "txt": "} private int handleP(final String value, final DoubleMetaphoneResult result, int index) { if (charAt(value, index + 1) == 'H') { result.append('F'); index += 2; } else { result.append('P'); index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1; } return index;"
      },
      {
        "txt": "} private int handleR(final String value, final DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) { if (index == value.length() - 1 && !slavoGermanic && contains(value, index - 2, 2, \"IE\") && !contains(value, index - 4, 2, \"ME\", \"MA\")) { result.appendAlternate('R'); } else { result.append('R'); }"
      },
      {
        "txt": "return charAt(value, index + 1) == 'R' ? index + 2 : index + 1; } private int handleS(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) { index++; } else if (index == 0 && contains(value, index, 5, \"SUGAR\")) { result.append('X', 'S'); index++; } else if (contains(value, index, 2, \"SH\")) {"
      },
      {
        "txt": "if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) { result.append('S'); } else { result.append('X'); } index += 2; } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) { if (slavoGermanic) { result.append('S'); } else {"
      },
      {
        "txt": "result.append('S', 'X'); } index += 3; } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) { result.append('S', 'X'); index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1; } else if (contains(value, index, 2, \"SC\")) { index = handleSC(value, result, index); } else {"
      },
      {
        "txt": "if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\")) { result.appendAlternate('S'); } else { result.append('S'); } index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1; } return index; } private int handleSC(final String value, final DoubleMetaphoneResult result, final int index) {"
      },
      {
        "txt": "if (charAt(value, index + 2) == 'H') { if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) { if (contains(value, index + 3, 2, \"ER\", \"EN\")) { result.append(\"X\", \"SK\"); } else { result.append(\"SK\"); } } else { if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') { result.append('X', 'S');"
      },
      {
        "txt": "} else { result.append('X'); } } } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) { result.append('S'); } else { result.append(\"SK\"); } return index + 3;"
      },
      {
        "txt": "} private int handleT(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 4, \"TION\")) { result.append('X'); index += 3; } else if (contains(value, index, 3, \"TIA\", \"TCH\")) { result.append('X'); index += 3; } else if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\")) { if (contains(value, index + 2, 2, \"OM\", \"AM\") ||"
      },
      {
        "txt": "contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) { result.append('T'); } else { result.append('0', 'T'); } index += 2; } else { result.append('T'); index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;"
      },
      {
        "txt": "} return index; } private int handleW(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 2, \"WR\")) { result.append('R'); index += 2; } else { if (index == 0 && (isVowel(charAt(value, index + 1)) || contains(value, index, 2, \"WH\"))) {"
      },
      {
        "txt": "if (isVowel(charAt(value, index + 1))) { result.append('A', 'F'); } else { result.append('A'); } index++; } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) || contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") || contains(value, 0, 3, \"SCH\")) { result.appendAlternate('F');"
      },
      {
        "txt": "index++; } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) { result.append(\"TS\", \"FX\"); index += 4; } else { index++; } } return index; }"
      },
      {
        "txt": "private int handleX(final String value, final DoubleMetaphoneResult result, int index) { if (index == 0) { result.append('S'); index++; } else { if (!((index == value.length() - 1) && (contains(value, index - 3, 3, \"IAU\", \"EAU\") || contains(value, index - 2, 2, \"AU\", \"OU\")))) { result.append(\"KS\"); }"
      },
      {
        "txt": "index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1; } return index; } private int handleZ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (charAt(value, index + 1) == 'H') { result.append('J'); index += 2; } else {"
      },
      {
        "txt": "if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) { result.append(\"S\", \"TS\"); } else { result.append('S'); } index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1; } return index; }"
      },
      {
        "txt": "private boolean conditionC0(final String value, final int index) { if (contains(value, index, 4, \"CHIA\")) { return true; } else if (index <= 1) { return false; } else if (isVowel(charAt(value, index - 2))) { return false; } else if (!contains(value, index - 1, 3, \"ACH\")) { return false; } else {"
      },
      {
        "txt": "final char c = charAt(value, index + 2); return (c != 'I' && c != 'E') || contains(value, index - 2, 6, \"BACHER\", \"MACHER\"); } } private boolean conditionCH0(final String value, final int index) { if (index != 0) { return false; } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) {"
      },
      {
        "txt": "return false; } else if (contains(value, 0, 5, \"CHORE\")) { return false; } else { return true; } } private boolean conditionCH1(final String value, final int index) { return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||"
      },
      {
        "txt": "contains(value, index + 2, 1, \"T\", \"S\") || ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) && (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1))); } private boolean conditionL0(final String value, final int index) { if (index == value.length() - 3 && contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) { return true; } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || contains(value, value.length() - 1, 1, \"A\", \"O\")) &&"
      },
      {
        "txt": "contains(value, index - 1, 4, \"ALLE\")) { return true; } else { return false; } } private boolean conditionM0(final String value, final int index) { if (charAt(value, index + 1) == 'M') { return true; }"
      },
      {
        "txt": "return contains(value, index - 1, 3, \"UMB\") && ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, \"ER\")); } private boolean isSlavoGermanic(final String value) { return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1; } private boolean isVowel(final char ch) { return VOWELS.indexOf(ch) != -1; }"
      },
      {
        "txt": "private boolean isSilentStart(final String value) { boolean result = false; for (final String element : SILENT_START) { if (value.startsWith(element)) { result = true; break; } } return result; }"
      },
      {
        "txt": "private String cleanInput(String input) { if (input == null) { return null; } input = input.trim(); if (input.length() == 0) { return null; } return input.toUpperCase(java.util.Locale.ENGLISH); }"
      },
      {
        "txt": "protected char charAt(final String value, final int index) { if (index < 0 || index >= value.length()) { return Character.MIN_VALUE; } return value.charAt(index); } protected static boolean contains(final String value, final int start, final int length, final String... criteria) { boolean result = false; if (start >= 0 && start + length <= value.length()) {"
      },
      {
        "txt": "final String target = value.substring(start, start + length); for (final String element : criteria) { if (target.equals(element)) { result = true; break; } } } return result; }"
      },
      {
        "txt": "public class DoubleMetaphoneResult { private final StringBuilder primary = new StringBuilder(getMaxCodeLen()); private final StringBuilder alternate = new StringBuilder(getMaxCodeLen()); private final int maxLength; public DoubleMetaphoneResult(final int maxLength) { this.maxLength = maxLength; } public void append(final char value) { appendPrimary(value); appendAlternate(value);"
      },
      {
        "txt": "} public void append(final char primary, final char alternate) { appendPrimary(primary); appendAlternate(alternate); } public void appendPrimary(final char value) { if (this.primary.length() < this.maxLength) { this.primary.append(value); } }"
      },
      {
        "txt": "public void appendAlternate(final char value) { if (this.alternate.length() < this.maxLength) { this.alternate.append(value); } } public void append(final String value) { appendPrimary(value); appendAlternate(value); } public void append(final String primary, final String alternate) {"
      },
      {
        "txt": "appendPrimary(primary); appendAlternate(alternate); } public void appendPrimary(final String value) { final int addChars = this.maxLength - this.primary.length(); if (value.length() <= addChars) { this.primary.append(value); } else { this.primary.append(value.substring(0, addChars)); }"
      },
      {
        "txt": "} public void appendAlternate(final String value) { final int addChars = this.maxLength - this.alternate.length(); if (value.length() <= addChars) { this.alternate.append(value); } else { this.alternate.append(value.substring(0, addChars)); } } public String getPrimary() {"
      },
      {
        "txt": "return this.primary.toString(); } public String getAlternate() { return this.alternate.toString(); } public boolean isComplete() { return this.primary.length() >= this.maxLength && this.alternate.length() >= this.maxLength; } }"
      }
    ]
  },
  {
    "id": 961,
    "file_path": "src/main/java/org/apache/commons/codec/language/DoubleMetaphone.java",
    "start-bug-line": 244,
    "end-bug-line": 244,
    "bug": "return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));",
    "fix": "return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; public class DoubleMetaphone implements StringEncoder { private static final String VOWELS = \"AEIOUY\"; private static final String[] SILENT_START = { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" }; private static final String[] L_R_N_M_B_H_F_V_W_SPACE ="
      },
      {
        "txt": "{ \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" }; private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER = { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" }; private static final String[] L_T_K_S_N_M_B_Z = { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" }; private int maxCodeLen = 4; public DoubleMetaphone() { super(); } public String doubleMetaphone(final String value) {"
      },
      {
        "txt": "return doubleMetaphone(value, false); } public String doubleMetaphone(String value, final boolean alternate) { value = cleanInput(value); if (value == null) { return null; } final boolean slavoGermanic = isSlavoGermanic(value); int index = isSilentStart(value) ? 1 : 0; final DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());"
      },
      {
        "txt": "while (!result.isComplete() && index <= value.length() - 1) { switch (value.charAt(index)) { case 'A': case 'E': case 'I': case 'O': case 'U': case 'Y': index = handleAEIOUY(result, index); break;"
      },
      {
        "txt": "case 'B': result.append('P'); index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1; break; case '\\u00C7': result.append('S'); index++; break; case 'C': index = handleC(value, result, index);"
      },
      {
        "txt": "break; case 'D': index = handleD(value, result, index); break; case 'F': result.append('F'); index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1; break; case 'G': index = handleG(value, result, index, slavoGermanic);"
      },
      {
        "txt": "break; case 'H': index = handleH(value, result, index); break; case 'J': index = handleJ(value, result, index, slavoGermanic); break; case 'K': result.append('K'); index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;"
      },
      {
        "txt": "break; case 'L': index = handleL(value, result, index); break; case 'M': result.append('M'); index = conditionM0(value, index) ? index + 2 : index + 1; break; case 'N': result.append('N');"
      },
      {
        "txt": "index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1; break; case '\\u00D1': result.append('N'); index++; break; case 'P': index = handleP(value, result, index); break; case 'Q':"
      },
      {
        "txt": "result.append('K'); index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1; break; case 'R': index = handleR(value, result, index, slavoGermanic); break; case 'S': index = handleS(value, result, index, slavoGermanic); break; case 'T':"
      },
      {
        "txt": "index = handleT(value, result, index); break; case 'V': result.append('F'); index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1; break; case 'W': index = handleW(value, result, index); break; case 'X':"
      },
      {
        "txt": "index = handleX(value, result, index); break; case 'Z': index = handleZ(value, result, index, slavoGermanic); break; default: index++; break; } }"
      },
      {
        "txt": "return alternate ? result.getAlternate() : result.getPrimary(); } @Override public Object encode(final Object obj) throws EncoderException { if (!(obj instanceof String)) { throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\"); } return doubleMetaphone((String) obj); } @Override"
      },
      {
        "txt": "return doubleMetaphone(value); } public boolean isDoubleMetaphoneEqual(final String value1, final String value2) { return isDoubleMetaphoneEqual(value1, value2, false); } public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate) { <extra_id_0> } public int getMaxCodeLen() { return this.maxCodeLen; } public void setMaxCodeLen(final int maxCodeLen) { this.maxCodeLen = maxCodeLen;"
      },
      {
        "txt": "public void setMaxCodeLen(final int maxCodeLen) { this.maxCodeLen = maxCodeLen; } private int handleAEIOUY(final DoubleMetaphoneResult result, final int index) { if (index == 0) { result.append('A'); } return index + 1; } private int handleC(final String value, final DoubleMetaphoneResult result, int index) {"
      },
      {
        "txt": "if (conditionC0(value, index)) { // very confusing, moved out result.append('K'); index += 2; } else if (index == 0 && contains(value, index, 6, \"CAESAR\")) { result.append('S'); index += 2; } else if (contains(value, index, 2, \"CH\")) { index = handleCH(value, result, index); } else if (contains(value, index, 2, \"CZ\") && !contains(value, index - 2, 4, \"WICZ\")) {"
      },
      {
        "txt": "result.append('S', 'X'); index += 2; } else if (contains(value, index + 1, 3, \"CIA\")) { result.append('X'); index += 3; } else if (contains(value, index, 2, \"CC\") && !(index == 1 && charAt(value, 0) == 'M')) { return handleCC(value, result, index); } else if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\")) { result.append('K');"
      },
      {
        "txt": "index += 2; } else if (contains(value, index, 2, \"CI\", \"CE\", \"CY\")) { if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\")) { result.append('S', 'X'); } else { result.append('S'); } index += 2; } else { result.append('K');"
      },
      {
        "txt": "if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\")) { index += 3; } else if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") && !contains(value, index + 1, 2, \"CE\", \"CI\")) { index += 2; } else { index++; } } return index;"
      },
      {
        "txt": "} private int handleCC(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && !contains(value, index + 2, 2, \"HU\")) { if ((index == 1 && charAt(value, index - 1) == 'A') || contains(value, index - 1, 5, \"UCCEE\", \"UCCES\")) { result.append(\"KS\"); } else { result.append('X'); }"
      },
      {
        "txt": "index += 3; } else { // Pierce's rule result.append('K'); index += 2; } return index; } private int handleCH(final String value, final DoubleMetaphoneResult result, final int index) { if (index > 0 && contains(value, index, 4, \"CHAE\")) { // Michael result.append('K', 'X');"
      },
      {
        "txt": "return index + 2; } else if (conditionCH0(value, index)) { result.append('K'); return index + 2; } else if (conditionCH1(value, index)) { result.append('K'); return index + 2; } else { if (index > 0) { if (contains(value, 0, 2, \"MC\")) {"
      },
      {
        "txt": "result.append('K'); } else { result.append('X', 'K'); } } else { result.append('X'); } return index + 2; } }"
      },
      {
        "txt": "private int handleD(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 2, \"DG\")) { if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) { result.append('J'); index += 3; } else { result.append(\"TK\"); index += 2; } } else if (contains(value, index, 2, \"DT\", \"DD\")) {"
      },
      {
        "txt": "result.append('T'); index += 2; } else { result.append('T'); index++; } return index; } private int handleG(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) {"
      },
      {
        "txt": "if (charAt(value, index + 1) == 'H') { index = handleGH(value, result, index); } else if (charAt(value, index + 1) == 'N') { if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic) { result.append(\"KN\", \"N\"); } else if (!contains(value, index + 2, 2, \"EY\") && charAt(value, index + 1) != 'Y' && !slavoGermanic) { result.append(\"N\", \"KN\"); } else { result.append(\"KN\");"
      },
      {
        "txt": "} index = index + 2; } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) { result.append(\"KL\", \"L\"); index += 2; } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) { result.append('K', 'J'); index += 2;"
      },
      {
        "txt": "} else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index + 1) == 'Y') && !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") && !contains(value, index - 1, 1, \"E\", \"I\") && !contains(value, index - 1, 3, \"RGY\", \"OGY\")) { result.append('K', 'J'); index += 2; } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) { if (contains(value, 0 ,4, \"VAN \", \"VON \") ||"
      },
      {
        "txt": "contains(value, 0, 3, \"SCH\") || contains(value, index + 1, 2, \"ET\")) { result.append('K'); } else if (contains(value, index + 1, 3, \"IER\")) { result.append('J'); } else { result.append('J', 'K'); } index += 2; } else if (charAt(value, index + 1) == 'G') {"
      },
      {
        "txt": "index += 2; result.append('K'); } else { index++; result.append('K'); } return index; } private int handleGH(final String value, final DoubleMetaphoneResult result, int index) { if (index > 0 && !isVowel(charAt(value, index - 1))) {"
      },
      {
        "txt": "result.append('K'); index += 2; } else if (index == 0) { if (charAt(value, index + 2) == 'I') { result.append('J'); } else { result.append('K'); } index += 2; } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||"
      },
      {
        "txt": "(index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) || (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) { index += 2; } else { if (index > 2 && charAt(value, index - 1) == 'U' && contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\")) { result.append('F'); } else if (index > 0 && charAt(value, index - 1) != 'I') { result.append('K'); }"
      },
      {
        "txt": "index += 2; } return index; } private int handleH(final String value, final DoubleMetaphoneResult result, int index) { if ((index == 0 || isVowel(charAt(value, index - 1))) && isVowel(charAt(value, index + 1))) { result.append('H'); index += 2; } else {"
      },
      {
        "txt": "index++; } return index; } private int handleJ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) { if ((index == 0 && (charAt(value, index + 4) == ' ') || value.length() == 4) || contains(value, 0, 4, \"SAN \")) { result.append('H');"
      },
      {
        "txt": "} else { result.append('J', 'H'); } index++; } else { if (index == 0 && !contains(value, index, 4, \"JOSE\")) { result.append('J', 'A'); } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) { result.append('J', 'H');"
      },
      {
        "txt": "} else if (index == value.length() - 1) { result.append('J', ' '); } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) { result.append('J'); } if (charAt(value, index + 1) == 'J') { index += 2; } else { index++;"
      },
      {
        "txt": "} } return index; } private int handleL(final String value, final DoubleMetaphoneResult result, int index) { if (charAt(value, index + 1) == 'L') { if (conditionL0(value, index)) { result.appendPrimary('L'); } else { result.append('L');"
      },
      {
        "txt": "} index += 2; } else { index++; result.append('L'); } return index; } private int handleP(final String value, final DoubleMetaphoneResult result, int index) { if (charAt(value, index + 1) == 'H') {"
      },
      {
        "txt": "result.append('F'); index += 2; } else { result.append('P'); index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1; } return index; } private int handleR(final String value, final DoubleMetaphoneResult result, final int index, final boolean slavoGermanic) {"
      },
      {
        "txt": "if (index == value.length() - 1 && !slavoGermanic && contains(value, index - 2, 2, \"IE\") && !contains(value, index - 4, 2, \"ME\", \"MA\")) { result.appendAlternate('R'); } else { result.append('R'); } return charAt(value, index + 1) == 'R' ? index + 2 : index + 1; } private int handleS(final String value, final DoubleMetaphoneResult result, int index,"
      },
      {
        "txt": "final boolean slavoGermanic) { if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) { index++; } else if (index == 0 && contains(value, index, 5, \"SUGAR\")) { result.append('X', 'S'); index++; } else if (contains(value, index, 2, \"SH\")) { if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) { result.append('S'); } else {"
      },
      {
        "txt": "result.append('X'); } index += 2; } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) { if (slavoGermanic) { result.append('S'); } else { result.append('S', 'X'); } index += 3;"
      },
      {
        "txt": "} else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) { result.append('S', 'X'); index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1; } else if (contains(value, index, 2, \"SC\")) { index = handleSC(value, result, index); } else { if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\")) { result.appendAlternate('S'); } else {"
      },
      {
        "txt": "result.append('S'); } index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1; } return index; } private int handleSC(final String value, final DoubleMetaphoneResult result, final int index) { if (charAt(value, index + 2) == 'H') { if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\")) { if (contains(value, index + 3, 2, \"ER\", \"EN\")) {"
      },
      {
        "txt": "result.append(\"X\", \"SK\"); } else { result.append(\"SK\"); } } else { if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') { result.append('X', 'S'); } else { result.append('X'); }"
      },
      {
        "txt": "} } else if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) { result.append('S'); } else { result.append(\"SK\"); } return index + 3; } private int handleT(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 4, \"TION\")) {"
      },
      {
        "txt": "result.append('X'); index += 3; } else if (contains(value, index, 3, \"TIA\", \"TCH\")) { result.append('X'); index += 3; } else if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\")) { if (contains(value, index + 2, 2, \"OM\", \"AM\") || contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) { result.append('T');"
      },
      {
        "txt": "} else { result.append('0', 'T'); } index += 2; } else { result.append('T'); index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1; } return index; }"
      },
      {
        "txt": "private int handleW(final String value, final DoubleMetaphoneResult result, int index) { if (contains(value, index, 2, \"WR\")) { result.append('R'); index += 2; } else { if (index == 0 && (isVowel(charAt(value, index + 1)) || contains(value, index, 2, \"WH\"))) { if (isVowel(charAt(value, index + 1))) { result.append('A', 'F'); } else {"
      },
      {
        "txt": "result.append('A'); } index++; } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) || contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") || contains(value, 0, 3, \"SCH\")) { result.appendAlternate('F'); index++; } else if (contains(value, index, 4, \"WICZ\", \"WITZ\")) { result.append(\"TS\", \"FX\");"
      },
      {
        "txt": "index += 4; } else { index++; } } return index; } private int handleX(final String value, final DoubleMetaphoneResult result, int index) { if (index == 0) { result.append('S');"
      },
      {
        "txt": "index++; } else { if (!((index == value.length() - 1) && (contains(value, index - 3, 3, \"IAU\", \"EAU\") || contains(value, index - 2, 2, \"AU\", \"OU\")))) { result.append(\"KS\"); } index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1; } return index;"
      },
      {
        "txt": "} private int handleZ(final String value, final DoubleMetaphoneResult result, int index, final boolean slavoGermanic) { if (charAt(value, index + 1) == 'H') { result.append('J'); index += 2; } else { if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) { result.append(\"S\", \"TS\");"
      },
      {
        "txt": "} else { result.append('S'); } index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1; } return index; } private boolean conditionC0(final String value, final int index) { if (contains(value, index, 4, \"CHIA\")) { return true;"
      },
      {
        "txt": "} else if (index <= 1) { return false; } else if (isVowel(charAt(value, index - 2))) { return false; } else if (!contains(value, index - 1, 3, \"ACH\")) { return false; } else { final char c = charAt(value, index + 2); return (c != 'I' && c != 'E') || contains(value, index - 2, 6, \"BACHER\", \"MACHER\");"
      },
      {
        "txt": "} } private boolean conditionCH0(final String value, final int index) { if (index != 0) { return false; } else if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") && !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\")) { return false; } else if (contains(value, 0, 5, \"CHORE\")) { return false;"
      },
      {
        "txt": "} else { return true; } } private boolean conditionCH1(final String value, final int index) { return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") || contains(value, index + 2, 1, \"T\", \"S\") || ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) && (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));"
      },
      {
        "txt": "} private boolean conditionL0(final String value, final int index) { if (index == value.length() - 3 && contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\")) { return true; } else if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") || contains(value, value.length() - 1, 1, \"A\", \"O\")) && contains(value, index - 1, 4, \"ALLE\")) { return true; } else {"
      },
      {
        "txt": "return false; } } private boolean conditionM0(final String value, final int index) { if (charAt(value, index + 1) == 'M') { return true; } return contains(value, index - 1, 3, \"UMB\") && ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, \"ER\")); }"
      },
      {
        "txt": "private boolean isSlavoGermanic(final String value) { return value.indexOf('W') > -1 || value.indexOf('K') > -1 || value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1; } private boolean isVowel(final char ch) { return VOWELS.indexOf(ch) != -1; } private boolean isSilentStart(final String value) { boolean result = false; for (final String element : SILENT_START) {"
      },
      {
        "txt": "if (value.startsWith(element)) { result = true; break; } } return result; } private String cleanInput(String input) { if (input == null) { return null;"
      },
      {
        "txt": "} input = input.trim(); if (input.length() == 0) { return null; } return input.toUpperCase(java.util.Locale.ENGLISH); } protected char charAt(final String value, final int index) { if (index < 0 || index >= value.length()) { return Character.MIN_VALUE;"
      },
      {
        "txt": "} return value.charAt(index); } protected static boolean contains(final String value, final int start, final int length, final String... criteria) { boolean result = false; if (start >= 0 && start + length <= value.length()) { final String target = value.substring(start, start + length); for (final String element : criteria) { if (target.equals(element)) {"
      },
      {
        "txt": "result = true; break; } } } return result; } public class DoubleMetaphoneResult { private final StringBuilder primary = new StringBuilder(getMaxCodeLen()); private final StringBuilder alternate = new StringBuilder(getMaxCodeLen());"
      },
      {
        "txt": "private final int maxLength; public DoubleMetaphoneResult(final int maxLength) { this.maxLength = maxLength; } public void append(final char value) { appendPrimary(value); appendAlternate(value); } public void append(final char primary, final char alternate) { appendPrimary(primary);"
      },
      {
        "txt": "appendAlternate(alternate); } public void appendPrimary(final char value) { if (this.primary.length() < this.maxLength) { this.primary.append(value); } } public void appendAlternate(final char value) { if (this.alternate.length() < this.maxLength) { this.alternate.append(value);"
      },
      {
        "txt": "} } public void append(final String value) { appendPrimary(value); appendAlternate(value); } public void append(final String primary, final String alternate) { appendPrimary(primary); appendAlternate(alternate); }"
      },
      {
        "txt": "public void appendPrimary(final String value) { final int addChars = this.maxLength - this.primary.length(); if (value.length() <= addChars) { this.primary.append(value); } else { this.primary.append(value.substring(0, addChars)); } } public void appendAlternate(final String value) { final int addChars = this.maxLength - this.alternate.length();"
      },
      {
        "txt": "if (value.length() <= addChars) { this.alternate.append(value); } else { this.alternate.append(value.substring(0, addChars)); } } public String getPrimary() { return this.primary.toString(); } public String getAlternate() {"
      },
      {
        "txt": "return this.alternate.toString(); } public boolean isComplete() { return this.primary.length() >= this.maxLength && this.alternate.length() >= this.maxLength; } }"
      }
    ]
  }
]
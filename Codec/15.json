[
  {
    "id": 971,
    "file_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
    "start-bug-line": 188,
    "end-bug-line": 192,
    "bug": "final char hwChar = str.charAt(index - 1); if ('H' == hwChar || 'W' == hwChar) { final char preHWChar = str.charAt(index - 2); final char firstCode = this.map(preHWChar); if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {",
    "fix": "for (int i=index-1 ; i>=0 ; i--) { final char prevChar = str.charAt(i); if (this.map(prevChar)==mappedChar) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; public class Soundex implements StringEncoder { public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\"; private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray(); public static final Soundex US_ENGLISH = new Soundex(); @Deprecated private int maxLength = 4; private final char[] soundexMapping;"
      },
      {
        "txt": "public Soundex() { this.soundexMapping = US_ENGLISH_MAPPING; } public Soundex(final char[] mapping) { this.soundexMapping = new char[mapping.length]; System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length); } public Soundex(final String mapping) { this.soundexMapping = mapping.toCharArray(); }"
      },
      {
        "txt": "public int difference(final String s1, final String s2) throws EncoderException { return SoundexUtils.difference(this, s1, s2); } @Override public Object encode(final Object obj) throws EncoderException { if (!(obj instanceof String)) { throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\"); } return soundex((String) obj); }"
      },
      {
        "txt": "public String encode(final String str) { return soundex(str); } private char getMappingCode(final String str, final int index) { final char mappedChar = this.map(str.charAt(index)); if (index > 1 && mappedChar != '0') { <extra_id_0> return 0; } } } return mappedChar; }"
      },
      {
        "txt": "return mappedChar; } @Deprecated public int getMaxLength() { return this.maxLength; } private char[] getSoundexMapping() { return this.soundexMapping; } private char map(final char ch) {"
      },
      {
        "txt": "final int index = ch - 'A'; if (index < 0 || index >= this.getSoundexMapping().length) { throw new IllegalArgumentException(\"The character is not mapped: \" + ch); } return this.getSoundexMapping()[index]; } @Deprecated public void setMaxLength(final int maxLength) { this.maxLength = maxLength; }"
      },
      {
        "txt": "public String soundex(String str) { if (str == null) { return null; } str = SoundexUtils.clean(str); if (str.length() == 0) { return str; } final char out[] = {'0', '0', '0', '0'}; char last, mapped;"
      },
      {
        "txt": "int incount = 1, count = 1; out[0] = str.charAt(0); last = getMappingCode(str, 0); while (incount < str.length() && count < out.length) { mapped = getMappingCode(str, incount++); if (mapped != 0) { if (mapped != '0' && mapped != last) { out[count++] = mapped; } last = mapped;"
      },
      {
        "txt": "} } return new String(out); }"
      }
    ]
  },
  {
    "id": 972,
    "file_path": "src/main/java/org/apache/commons/codec/language/Soundex.java",
    "start-bug-line": 195,
    "end-bug-line": 195,
    "bug": "",
    "fix": "if ('H'!=prevChar && 'W'!=prevChar) { break; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.codec.language; import org.apache.commons.codec.EncoderException; import org.apache.commons.codec.StringEncoder; public class Soundex implements StringEncoder { public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\"; private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray(); public static final Soundex US_ENGLISH = new Soundex();"
      },
      {
        "txt": "@Deprecated private int maxLength = 4; private final char[] soundexMapping; public Soundex() { this.soundexMapping = US_ENGLISH_MAPPING; } public Soundex(final char[] mapping) { this.soundexMapping = new char[mapping.length]; System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length); }"
      },
      {
        "txt": "public Soundex(final String mapping) { this.soundexMapping = mapping.toCharArray(); } public int difference(final String s1, final String s2) throws EncoderException { return SoundexUtils.difference(this, s1, s2); } @Override public Object encode(final Object obj) throws EncoderException { if (!(obj instanceof String)) { throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");"
      },
      {
        "txt": "} return soundex((String) obj); } @Override public String encode(final String str) { return soundex(str); } private char getMappingCode(final String str, final int index) { final char mappedChar = this.map(str.charAt(index)); if (index > 1 && mappedChar != '0') {"
      },
      {
        "txt": "if ('H' == hwChar || 'W' == hwChar) { final char preHWChar = str.charAt(index - 2); final char firstCode = this.map(preHWChar); if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) { return 0; } <extra_id_0> } return mappedChar; } @Deprecated public int getMaxLength() { return this.maxLength;"
      },
      {
        "txt": "public int getMaxLength() { return this.maxLength; } private char[] getSoundexMapping() { return this.soundexMapping; } private char map(final char ch) { final int index = ch - 'A'; if (index < 0 || index >= this.getSoundexMapping().length) { throw new IllegalArgumentException(\"The character is not mapped: \" + ch);"
      },
      {
        "txt": "} return this.getSoundexMapping()[index]; } @Deprecated public void setMaxLength(final int maxLength) { this.maxLength = maxLength; } public String soundex(String str) { if (str == null) { return null;"
      },
      {
        "txt": "} str = SoundexUtils.clean(str); if (str.length() == 0) { return str; } final char out[] = {'0', '0', '0', '0'}; char last, mapped; int incount = 1, count = 1; out[0] = str.charAt(0); last = getMappingCode(str, 0);"
      },
      {
        "txt": "while (incount < str.length() && count < out.length) { mapped = getMappingCode(str, incount++); if (mapped != 0) { if (mapped != '0' && mapped != last) { out[count++] = mapped; } last = mapped; } } return new String(out);"
      }
    ]
  }
]
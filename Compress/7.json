[
  {
    "id": 1007,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
    "start-bug-line": 98,
    "end-bug-line": 98,
    "bug": "if (buffer[i] == 0) {",
    "fix": "byte b = buffer[i]; if (b == 0) { // Trailing null",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; public class TarUtils { private static final int BYTE_MASK = 255; private TarUtils(){ } public static long parseOctal(byte[] buffer, final int offset, final int length) { long result = 0; boolean stillPadding = true;"
      },
      {
        "txt": "int end = offset + length; for (int i = offset; i < end; ++i) { final byte currentByte = buffer[i]; if (currentByte == 0) { // Found trailing null break; } if (currentByte == (byte) ' ' || currentByte == '0') { if (stillPadding) { continue; }"
      },
      {
        "txt": "if (currentByte == (byte) ' ') { // Found trailing space break; } } stillPadding = false; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( \"Invalid octal digit at position \"+i+\" in '\"+new String(buffer, offset, length)+\"'\"); } result = (result << 3) + (currentByte - '0');// TODO needs to reject invalid bytes"
      },
      {
        "txt": "return result; } public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); int end = offset + length; for (int i = offset; i < end; ++i) { <extra_id_0> break; } result.append((char) buffer[i]); } return result.toString(); }"
      },
      {
        "txt": "return result.toString(); } public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) { int i; for (i = 0; i < length && i < name.length(); ++i) { buf[offset + i] = (byte) name.charAt(i); } for (; i < length; ++i) { buf[offset + i] = 0; }"
      },
      {
        "txt": "return offset + length; } public static void formatUnsignedOctalString(final long value, byte[] buffer, final int offset, final int length) { int remaining = length; remaining--; if (value == 0) { buffer[offset + remaining--] = (byte) '0'; } else { long val = value;"
      },
      {
        "txt": "for (; remaining >= 0 && val != 0; --remaining) { buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7)); val = val >>> 3; } if (val != 0){ throw new IllegalArgumentException (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length); } } for (; remaining >= 0; --remaining) { // leading zeros"
      },
      {
        "txt": "buffer[offset + remaining] = (byte) '0'; } } public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // For space and trailing null formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = (byte) ' '; // Trailing space buf[offset + idx] = 0; // Trailing null return offset + length; }"
      },
      {
        "txt": "public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-1; // For space formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // for NUL and space formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = 0; // Trailing null"
      },
      {
        "txt": "buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static long computeCheckSum(final byte[] buf) { long sum = 0; for (int i = 0; i < buf.length; ++i) { sum += BYTE_MASK & buf[i]; } return sum; }"
      }
    ]
  },
  {
    "id": 1008,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
    "start-bug-line": 101,
    "end-bug-line": 101,
    "bug": "result.append((char) buffer[i]);",
    "fix": "result.append((char) (b & 0xFF)); // Allow for sign-extension",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "public class TarUtils { private static final int BYTE_MASK = 255; private TarUtils(){ } public static long parseOctal(byte[] buffer, final int offset, final int length) { long result = 0; boolean stillPadding = true; int end = offset + length; for (int i = offset; i < end; ++i) { final byte currentByte = buffer[i];"
      },
      {
        "txt": "if (currentByte == 0) { // Found trailing null break; } if (currentByte == (byte) ' ' || currentByte == '0') { if (stillPadding) { continue; } if (currentByte == (byte) ' ') { // Found trailing space break; }"
      },
      {
        "txt": "} stillPadding = false; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( \"Invalid octal digit at position \"+i+\" in '\"+new String(buffer, offset, length)+\"'\"); } result = (result << 3) + (currentByte - '0');// TODO needs to reject invalid bytes } return result; }"
      },
      {
        "txt": "StringBuffer result = new StringBuffer(length); int end = offset + length; for (int i = offset; i < end; ++i) { if (buffer[i] == 0) { break; } <extra_id_0> } return result.toString(); } public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) { int i; for (i = 0; i < length && i < name.length(); ++i) {"
      },
      {
        "txt": "int i; for (i = 0; i < length && i < name.length(); ++i) { buf[offset + i] = (byte) name.charAt(i); } for (; i < length; ++i) { buf[offset + i] = 0; } return offset + length; } public static void formatUnsignedOctalString(final long value, byte[] buffer,"
      },
      {
        "txt": "final int offset, final int length) { int remaining = length; remaining--; if (value == 0) { buffer[offset + remaining--] = (byte) '0'; } else { long val = value; for (; remaining >= 0 && val != 0; --remaining) { buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7)); val = val >>> 3;"
      },
      {
        "txt": "} if (val != 0){ throw new IllegalArgumentException (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length); } } for (; remaining >= 0; --remaining) { // leading zeros buffer[offset + remaining] = (byte) '0'; } }"
      },
      {
        "txt": "public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // For space and trailing null formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = (byte) ' '; // Trailing space buf[offset + idx] = 0; // Trailing null return offset + length; } public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-1; // For space formatUnsignedOctalString(value, buf, offset, idx);"
      },
      {
        "txt": "buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // for NUL and space formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = 0; // Trailing null buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; }"
      },
      {
        "txt": "public static long computeCheckSum(final byte[] buf) { long sum = 0; for (int i = 0; i < buf.length; ++i) { sum += BYTE_MASK & buf[i]; } return sum; }"
      }
    ]
  }
]
[
  {
    "id": 1065,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
    "start-bug-line": 133,
    "end-bug-line": 136,
    "bug": "if (start == end) { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, trailer)); }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN;"
      },
      {
        "txt": "import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET; import java.io.IOException; import java.math.BigInteger; import java.nio.ByteBuffer; import org.apache.commons.compress.archivers.zip.ZipEncoding; import org.apache.commons.compress.archivers.zip.ZipEncodingHelper; public class TarUtils { private static final int BYTE_MASK = 255; static final ZipEncoding DEFAULT_ENCODING = ZipEncodingHelper.getZipEncoding(null);"
      },
      {
        "txt": "static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() { public boolean canEncode(String name) { return true; } public ByteBuffer encode(String name) { final int length = name.length(); byte[] buf = new byte[length]; for (int i = 0; i < length; ++i) { buf[i] = (byte) name.charAt(i); } return ByteBuffer.wrap(buf); }"
      },
      {
        "txt": "public String decode(byte[] buffer) { final int length = buffer.length; StringBuilder result = new StringBuilder(length); for (int i = 0; i < length; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension }"
      },
      {
        "txt": "return result.toString(); } }; private TarUtils(){ } public static long parseOctal(final byte[] buffer, final int offset, final int length) { long result = 0; int end = offset + length; int start = offset; if (length < 2){"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } if (buffer[start] == 0) { return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else { break;"
      },
      {
        "txt": "} byte trailer = buffer[end - 1]; while (start < end && (trailer == 0 || trailer == ' ')) { end--; trailer = buffer[end - 1]; } <extra_id_0> for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); }"
      },
      {
        "txt": "exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII } return result; } public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) { return parseOctal(buffer, offset, length);"
      },
      {
        "txt": "} final boolean negative = buffer[offset] == (byte) 0xff; if (length < 9) { return parseBinaryLong(buffer, offset, length, negative); } return parseBinaryBigInteger(buffer, offset, length, negative); } private static long parseBinaryLong(final byte[] buffer, final int offset, final int length, final boolean negative) {"
      },
      {
        "txt": "if (length >= 9) { throw new IllegalArgumentException(\"At offset \" + offset + \", \" + length + \" byte binary number\" + \" exceeds maximum signed long\" + \" value\"); } long val = 0; for (int i = 1; i < length; i++) { val = (val << 8) + (buffer[offset + i] & 0xff); }"
      },
      {
        "txt": "if (negative) { val--; val ^= (long) Math.pow(2, (length - 1) * 8) - 1; } return negative ? -val : val; } private static long parseBinaryBigInteger(final byte[] buffer, final int offset, final int length, final boolean negative) {"
      },
      {
        "txt": "byte[] remainder = new byte[length - 1]; System.arraycopy(buffer, offset + 1, remainder, 0, length - 1); BigInteger val = new BigInteger(remainder); if (negative) { val = val.add(BigInteger.valueOf(-1)).not(); } if (val.bitLength() > 63) { throw new IllegalArgumentException(\"At offset \" + offset + \", \" + length + \" byte binary number\" + \" exceeds maximum signed long\""
      },
      {
        "txt": "+ \" value\"); } return negative ? -val.longValue() : val.longValue(); } public static boolean parseBoolean(final byte[] buffer, final int offset) { return buffer[offset] == 1; } private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length);"
      },
      {
        "txt": "string=string.replaceAll(\"\\0\", \"{NUL}\"); // Replace NULs to allow string to be printed final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length; return s; } public static String parseName(byte[] buffer, final int offset, final int length) { try { return parseName(buffer, offset, length, DEFAULT_ENCODING); } catch (IOException ex) { try { return parseName(buffer, offset, length, FALLBACK_ENCODING);"
      },
      {
        "txt": "} catch (IOException ex2) { throw new RuntimeException(ex2); } } } public static String parseName(byte[] buffer, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = length;"
      },
      {
        "txt": "for (; len > 0; len--) { if (buffer[offset + len - 1] != 0) { break; } } if (len > 0) { byte[] b = new byte[len]; System.arraycopy(buffer, offset, b, 0, len); return encoding.decode(b); }"
      },
      {
        "txt": "return \"\"; } public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) { try { return formatNameBytes(name, buf, offset, length, DEFAULT_ENCODING); } catch (IOException ex) { try { return formatNameBytes(name, buf, offset, length, FALLBACK_ENCODING); } catch (IOException ex2) {"
      },
      {
        "txt": "throw new RuntimeException(ex2); } } } public static int formatNameBytes(String name, byte[] buf, final int offset, final int length, final ZipEncoding encoding) throws IOException { int len = name.length(); ByteBuffer b = encoding.encode(name);"
      },
      {
        "txt": "while (b.limit() > length && len > 0) { b = encoding.encode(name.substring(0, --len)); } final int limit = b.limit() - b.position(); System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit); for (int i = limit; i < length; ++i) { buf[offset + i] = 0; } return offset + length; }"
      },
      {
        "txt": "public static void formatUnsignedOctalString(final long value, byte[] buffer, final int offset, final int length) { int remaining = length; remaining--; if (value == 0) { buffer[offset + remaining--] = (byte) '0'; } else { long val = value; for (; remaining >= 0 && val != 0; --remaining) { buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));"
      },
      {
        "txt": "val = val >>> 3; } if (val != 0){ throw new IllegalArgumentException (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length); } } for (; remaining >= 0; --remaining) { // leading zeros buffer[offset + remaining] = (byte) '0'; }"
      },
      {
        "txt": "} public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // For space and trailing null formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = (byte) ' '; // Trailing space buf[offset + idx] = 0; // Trailing null return offset + length; } public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-1; // For space"
      },
      {
        "txt": "formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static int formatLongOctalOrBinaryBytes( final long value, byte[] buf, final int offset, final int length) { final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE; final boolean negative = value < 0; if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars return formatLongOctalBytes(value, buf, offset, length);"
      },
      {
        "txt": "} if (length < 9) { formatLongBinary(value, buf, offset, length, negative); } formatBigIntegerBinary(value, buf, offset, length, negative); buf[offset] = (byte) (negative ? 0xff : 0x80); return offset + length; } private static void formatLongBinary(final long value, byte[] buf, final int offset, final int length,"
      },
      {
        "txt": "final boolean negative) { final int bits = (length - 1) * 8; final long max = 1l << bits; long val = Math.abs(value); if (val >= max) { throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\"); } if (negative) { val ^= max - 1;"
      },
      {
        "txt": "val |= 0xff << bits; val++; } for (int i = offset + length - 1; i >= offset; i--) { buf[i] = (byte) val; val >>= 8; } } private static void formatBigIntegerBinary(final long value, byte[] buf, final int offset,"
      },
      {
        "txt": "final int length, final boolean negative) { BigInteger val = BigInteger.valueOf(value); final byte[] b = val.toByteArray(); final int len = b.length; final int off = offset + length - len; System.arraycopy(b, 0, buf, off, len); final byte fill = (byte) (negative ? 0xff : 0); for (int i = offset + 1; i < off; i++) { buf[i] = fill;"
      },
      {
        "txt": "} } public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // for NUL and space formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = 0; // Trailing null buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static long computeCheckSum(final byte[] buf) {"
      },
      {
        "txt": "long sum = 0; for (byte element : buf) { sum += BYTE_MASK & element; } return sum; } public static boolean verifyCheckSum(byte[] header) { long storedSum = 0; long unsignedSum = 0; long signedSum = 0;"
      },
      {
        "txt": "int digits = 0; for (int i = 0; i < header.length; i++) { byte b = header[i]; if (CHKSUM_OFFSET <= i && i < CHKSUM_OFFSET + CHKSUMLEN) { if ('0' <= b && b <= '7' && digits++ < 6) { storedSum = storedSum * 8 + b - '0'; } else if (digits > 0) { digits = 6; // only look at the first octal digit sequence } b = ' ';"
      },
      {
        "txt": "} unsignedSum += 0xff & b; signedSum += b; } return storedSum == unsignedSum || storedSum == signedSum || storedSum > unsignedSum; // COMPRESS-177 }"
      }
    ]
  }
]
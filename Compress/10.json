[
  {
    "id": 1022,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
    "start-bug-line": 808,
    "end-bug-line": 809,
    "bug": "for (ZipArchiveEntry ze : entries.keySet()) { OffsetEntry offsetEntry = entries.get(ze);",
    "fix": "Map<ZipArchiveEntry, OffsetEntry> origMap = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries); entries.clear(); for (ZipArchiveEntry ze : origMap.keySet()) { OffsetEntry offsetEntry = origMap.get(ze);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.zip; import java.io.EOFException; import java.io.File;"
      },
      {
        "txt": "import java.io.IOException; import java.io.InputStream; import java.io.RandomAccessFile; import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.Enumeration; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map;"
      },
      {
        "txt": "import java.util.zip.Inflater; import java.util.zip.InflaterInputStream; import java.util.zip.ZipException; import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD; import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT; import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD; import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC; import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC_SHORT; public class ZipFile { private static final int HASH_SIZE = 509;"
      },
      {
        "txt": "static final int NIBLET_MASK = 0x0f; static final int BYTE_SHIFT = 8; private static final int POS_0 = 0; private static final int POS_1 = 1; private static final int POS_2 = 2; private static final int POS_3 = 3; private final Map<ZipArchiveEntry, OffsetEntry> entries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); private final Map<String, ZipArchiveEntry> nameMap = new HashMap<String, ZipArchiveEntry>(HASH_SIZE);"
      },
      {
        "txt": "private static final class OffsetEntry { private long headerOffset = -1; private long dataOffset = -1; } private final String encoding; private final ZipEncoding zipEncoding; private final String archiveName; private final RandomAccessFile archive; private final boolean useUnicodeExtraFields; private boolean closed;"
      },
      {
        "txt": "public ZipFile(File f) throws IOException { this(f, ZipEncodingHelper.UTF8); } public ZipFile(String name) throws IOException { this(new File(name), ZipEncodingHelper.UTF8); } public ZipFile(String name, String encoding) throws IOException { this(new File(name), encoding, true); } public ZipFile(File f, String encoding) throws IOException {"
      },
      {
        "txt": "this(f, encoding, true); } public ZipFile(File f, String encoding, boolean useUnicodeExtraFields) throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, \"r\"); boolean success = false;"
      },
      {
        "txt": "try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory(); resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close();"
      },
      {
        "txt": "} catch (IOException e2) { // NOPMD } } } } public String getEncoding() { return encoding; } public void close() throws IOException { closed = true;"
      },
      {
        "txt": "archive.close(); } public static void closeQuietly(ZipFile zipfile) { if (zipfile != null) { try { zipfile.close(); } catch (IOException e) { // NOPMD } } }"
      },
      {
        "txt": "public Enumeration<ZipArchiveEntry> getEntries() { return Collections.enumeration(entries.keySet()); } public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() { ZipArchiveEntry[] allEntries = entries.keySet().toArray(new ZipArchiveEntry[0]); Arrays.sort(allEntries, OFFSET_COMPARATOR); return Collections.enumeration(Arrays.asList(allEntries)); } public ZipArchiveEntry getEntry(String name) {"
      },
      {
        "txt": "return nameMap.get(name); } public boolean canReadEntryData(ZipArchiveEntry ze) { return ZipUtil.canHandleEntryData(ze); } public InputStream getInputStream(ZipArchiveEntry ze) throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null;"
      },
      {
        "txt": "} ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset; BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy();"
      },
      {
        "txt": "final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override public void close() throws IOException { super.close(); inflater.end(); } }; default: throw new ZipException(\"Found unsupported compression method \""
      },
      {
        "txt": "+ ze.getMethod()); } } @Override protected void finalize() throws Throwable { try { if (!closed) { System.err.println(\"Cleaning up unclosed ZipFile for archive \" + archiveName); close();"
      },
      {
        "txt": "} } finally { super.finalize(); } } private static final int CFH_LEN = private static final long CFH_SIG = ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException {"
      },
      {
        "txt": "HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory(); byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException(\"central directory is empty, can't expand\" + \" corrupt archive.\"); }"
      },
      {
        "txt": "while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes); sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } private void readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment> noUTF8Flag) throws IOException {"
      },
      {
        "txt": "byte[] cfh = new byte[CFH_LEN]; archive.readFully(cfh); int off = 0; ZipArchiveEntry ze = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(cfh, off); off += SHORT; ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK); off += SHORT; // skip version info final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(cfh, off); final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();"
      },
      {
        "txt": "final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; ze.setGeneralPurposeBit(gpFlag); off += SHORT; ze.setMethod(ZipShort.getValue(cfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(cfh, off)); ze.setTime(time); off += WORD; ze.setCrc(ZipLong.getValue(cfh, off));"
      },
      {
        "txt": "off += WORD; ze.setCompressedSize(ZipLong.getValue(cfh, off)); off += WORD; ze.setSize(ZipLong.getValue(cfh, off)); off += WORD; int fileNameLen = ZipShort.getValue(cfh, off); off += SHORT; int extraLen = ZipShort.getValue(cfh, off); off += SHORT; int commentLen = ZipShort.getValue(cfh, off);"
      },
      {
        "txt": "off += SHORT; int diskStart = ZipShort.getValue(cfh, off); off += SHORT; ze.setInternalAttributes(ZipShort.getValue(cfh, off)); off += SHORT; ze.setExternalAttributes(ZipLong.getValue(cfh, off)); off += WORD; byte[] fileName = new byte[fileNameLen]; archive.readFully(fileName); ze.setName(entryEncoding.decode(fileName), fileName);"
      },
      {
        "txt": "OffsetEntry offset = new OffsetEntry(); offset.headerOffset = ZipLong.getValue(cfh, off); entries.put(ze, offset); nameMap.put(ze.getName(), ze); byte[] cdExtraData = new byte[extraLen]; archive.readFully(cdExtraData); ze.setCentralDirectoryExtra(cdExtraData); setSizesAndOffsetFromZip64Extra(ze, offset, diskStart); byte[] comment = new byte[commentLen]; archive.readFully(comment);"
      },
      {
        "txt": "ze.setComment(entryEncoding.decode(comment)); if (!hasUTF8Flag && useUnicodeExtraFields) { noUTF8Flag.put(ze, new NameAndComment(fileName, comment)); } } private void setSizesAndOffsetFromZip64Extra(ZipArchiveEntry ze, OffsetEntry offset, int diskStart) throws IOException { Zip64ExtendedInformationExtraField z64 ="
      },
      {
        "txt": "(Zip64ExtendedInformationExtraField) ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); if (z64 != null) { boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC; boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC; boolean hasRelativeHeaderOffset = offset.headerOffset == ZIP64_MAGIC; z64.reparseCentralDirectoryData(hasUncompressedSize, hasCompressedSize, hasRelativeHeaderOffset,"
      },
      {
        "txt": "diskStart == ZIP64_MAGIC_SHORT); if (hasUncompressedSize) { ze.setSize(z64.getSize().getLongValue()); } else if (hasCompressedSize) { z64.setSize(new ZipEightByteInteger(ze.getSize())); } if (hasCompressedSize) { ze.setCompressedSize(z64.getCompressedSize().getLongValue()); } else if (hasUncompressedSize) { z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));"
      },
      {
        "txt": "} if (hasRelativeHeaderOffset) { offset.headerOffset = z64.getRelativeHeaderOffset().getLongValue(); } } } private static final int MIN_EOCD_SIZE = private static final int MAX_EOCD_SIZE = MIN_EOCD_SIZE private static final int CFD_LOCATOR_OFFSET ="
      },
      {
        "txt": "private static final int ZIP64_EOCDL_LENGTH = private static final int ZIP64_EOCDL_LOCATOR_OFFSET = private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET = private void positionAtCentralDirectory() throws IOException { boolean found = tryToLocateSignature(MIN_EOCD_SIZE + ZIP64_EOCDL_LENGTH, MAX_EOCD_SIZE + ZIP64_EOCDL_LENGTH, ZipArchiveOutputStream .ZIP64_EOCD_LOC_SIG); if (!found) {"
      },
      {
        "txt": "positionAtCentralDirectory32(); } else { positionAtCentralDirectory64(); } } private void positionAtCentralDirectory64() throws IOException { skipBytes(ZIP64_EOCDL_LOCATOR_OFFSET); byte[] zip64EocdOffset = new byte[DWORD]; archive.readFully(zip64EocdOffset);"
      },
      {
        "txt": "archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset)); byte[] sig = new byte[WORD]; archive.readFully(sig); if (sig[POS_0] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_0] || sig[POS_1] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_1] || sig[POS_2] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_2] || sig[POS_3] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_3] ) { throw new ZipException(\"archive's ZIP64 end of central \" + \"directory locator is corrupt.\");"
      },
      {
        "txt": "} skipBytes(ZIP64_EOCD_CFD_LOCATOR_OFFSET - WORD /* signature has already been read */); byte[] cfdOffset = new byte[DWORD]; archive.readFully(cfdOffset); archive.seek(ZipEightByteInteger.getLongValue(cfdOffset)); } private void positionAtCentralDirectory32() throws IOException { boolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE,"
      },
      {
        "txt": "ZipArchiveOutputStream.EOCD_SIG); if (!found) { throw new ZipException(\"archive is not a ZIP archive\"); } skipBytes(CFD_LOCATOR_OFFSET); byte[] cfdOffset = new byte[WORD]; archive.readFully(cfdOffset); archive.seek(ZipLong.getValue(cfdOffset)); } private boolean tryToLocateSignature(long minDistanceFromEnd,"
      },
      {
        "txt": "long maxDistanceFromEnd, byte[] sig) throws IOException { boolean found = false; long off = archive.length() - minDistanceFromEnd; final long stopSearching = Math.max(0L, archive.length() - maxDistanceFromEnd); if (off >= 0) { for (; off >= stopSearching; off--) { archive.seek(off); int curr = archive.read();"
      },
      {
        "txt": "if (curr == -1) { break; } if (curr == sig[POS_0]) { curr = archive.read(); if (curr == sig[POS_1]) { curr = archive.read(); if (curr == sig[POS_2]) { curr = archive.read(); if (curr == sig[POS_3]) {"
      },
      {
        "txt": "found = true; break; } } } } } } if (found) { archive.seek(off);"
      },
      {
        "txt": "} return found; } private void skipBytes(final int count) throws IOException { int totalSkipped = 0; while (totalSkipped < count) { int skippedNow = archive.skipBytes(count - totalSkipped); if (skippedNow <= 0) { throw new EOFException(); }"
      },
      {
        "txt": "} } private static final long LFH_OFFSET_FOR_FILENAME_LENGTH = private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException { <extra_id_0> long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT]; archive.readFully(b); int fileNameLen = ZipShort.getValue(b); archive.readFully(b);"
      },
      {
        "txt": "int fileNameLen = ZipShort.getValue(b); archive.readFully(b); int extraFieldLen = ZipShort.getValue(b); int lenToSkip = fileNameLen; while (lenToSkip > 0) { int skipped = archive.skipBytes(lenToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip file name in\" + \" local file header\"); }"
      },
      {
        "txt": "lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze);"
      },
      {
        "txt": "ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name, nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } } } private boolean startsWithLocalFileHeader() throws IOException {"
      },
      {
        "txt": "archive.seek(0); final byte[] start = new byte[WORD]; archive.readFully(start); for (int i = 0; i < start.length; i++) { if (start[i] != ZipArchiveOutputStream.LFH_SIG[i]) { return false; } } return true; }"
      },
      {
        "txt": "private class BoundedInputStream extends InputStream { private long remaining; private long loc; private boolean addDummyByte = false; BoundedInputStream(long start, long remaining) { this.remaining = remaining; loc = start; } @Override public int read() throws IOException {"
      },
      {
        "txt": "if (remaining-- <= 0) { if (addDummyByte) { addDummyByte = false; return 0; } return -1; } synchronized (archive) { archive.seek(loc++); return archive.read();"
      },
      {
        "txt": "} } @Override public int read(byte[] b, int off, int len) throws IOException { if (remaining <= 0) { if (addDummyByte) { addDummyByte = false; b[off] = 0; return 1; }"
      },
      {
        "txt": "return -1; } if (len <= 0) { return 0; } if (len > remaining) { len = (int) remaining; } int ret = -1; synchronized (archive) {"
      },
      {
        "txt": "archive.seek(loc); ret = archive.read(b, off, len); } if (ret > 0) { loc += ret; remaining -= ret; } return ret; } void addDummy() {"
      },
      {
        "txt": "addDummyByte = true; } } private static final class NameAndComment { private final byte[] name; private final byte[] comment; private NameAndComment(byte[] name, byte[] comment) { this.name = name; this.comment = comment; }"
      },
      {
        "txt": "} private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR = new Comparator<ZipArchiveEntry>() { public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) { if (e1 == e2) return 0; OffsetEntry off1 = entries.get(e1); OffsetEntry off2 = entries.get(e2); if (off1 == null) { return 1;"
      },
      {
        "txt": "} if (off2 == null) { return -1; } long val = (off1.headerOffset - off2.headerOffset); return val == 0 ? 0 : val < 0 ? -1 : +1; } };"
      }
    ]
  },
  {
    "id": 1023,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java",
    "start-bug-line": 842,
    "end-bug-line": 842,
    "bug": "",
    "fix": "entries.put(ze, offsetEntry);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.zip; import java.io.EOFException; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.RandomAccessFile;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Collections; import java.util.Comparator; import java.util.Enumeration; import java.util.HashMap; import java.util.LinkedHashMap; import java.util.Map; import java.util.zip.Inflater; import java.util.zip.InflaterInputStream; import java.util.zip.ZipException;"
      },
      {
        "txt": "import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD; import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT; import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD; import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC; import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC_SHORT; public class ZipFile { private static final int HASH_SIZE = 509; static final int NIBLET_MASK = 0x0f; static final int BYTE_SHIFT = 8; private static final int POS_0 = 0;"
      },
      {
        "txt": "private static final int POS_1 = 1; private static final int POS_2 = 2; private static final int POS_3 = 3; private final Map<ZipArchiveEntry, OffsetEntry> entries = new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(HASH_SIZE); private final Map<String, ZipArchiveEntry> nameMap = new HashMap<String, ZipArchiveEntry>(HASH_SIZE); private static final class OffsetEntry { private long headerOffset = -1; private long dataOffset = -1;"
      },
      {
        "txt": "} private final String encoding; private final ZipEncoding zipEncoding; private final String archiveName; private final RandomAccessFile archive; private final boolean useUnicodeExtraFields; private boolean closed; public ZipFile(File f) throws IOException { this(f, ZipEncodingHelper.UTF8); }"
      },
      {
        "txt": "public ZipFile(String name) throws IOException { this(new File(name), ZipEncodingHelper.UTF8); } public ZipFile(String name, String encoding) throws IOException { this(new File(name), encoding, true); } public ZipFile(File f, String encoding) throws IOException { this(f, encoding, true); } public ZipFile(File f, String encoding, boolean useUnicodeExtraFields)"
      },
      {
        "txt": "throws IOException { this.archiveName = f.getAbsolutePath(); this.encoding = encoding; this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; archive = new RandomAccessFile(f, \"r\"); boolean success = false; try { Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag = populateFromCentralDirectory();"
      },
      {
        "txt": "resolveLocalFileHeaderData(entriesWithoutUTF8Flag); success = true; } finally { if (!success) { try { closed = true; archive.close(); } catch (IOException e2) { // NOPMD } }"
      },
      {
        "txt": "} } public String getEncoding() { return encoding; } public void close() throws IOException { closed = true; archive.close(); } public static void closeQuietly(ZipFile zipfile) {"
      },
      {
        "txt": "if (zipfile != null) { try { zipfile.close(); } catch (IOException e) { // NOPMD } } } public Enumeration<ZipArchiveEntry> getEntries() { return Collections.enumeration(entries.keySet()); }"
      },
      {
        "txt": "public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() { ZipArchiveEntry[] allEntries = entries.keySet().toArray(new ZipArchiveEntry[0]); Arrays.sort(allEntries, OFFSET_COMPARATOR); return Collections.enumeration(Arrays.asList(allEntries)); } public ZipArchiveEntry getEntry(String name) { return nameMap.get(name); } public boolean canReadEntryData(ZipArchiveEntry ze) {"
      },
      {
        "txt": "return ZipUtil.canHandleEntryData(ze); } public InputStream getInputStream(ZipArchiveEntry ze) throws IOException, ZipException { OffsetEntry offsetEntry = entries.get(ze); if (offsetEntry == null) { return null; } ZipUtil.checkRequestedFeatures(ze); long start = offsetEntry.dataOffset;"
      },
      {
        "txt": "BoundedInputStream bis = new BoundedInputStream(start, ze.getCompressedSize()); switch (ze.getMethod()) { case ZipArchiveEntry.STORED: return bis; case ZipArchiveEntry.DEFLATED: bis.addDummy(); final Inflater inflater = new Inflater(true); return new InflaterInputStream(bis, inflater) { @Override"
      },
      {
        "txt": "public void close() throws IOException { super.close(); inflater.end(); } }; default: throw new ZipException(\"Found unsupported compression method \" + ze.getMethod()); } }"
      },
      {
        "txt": "@Override protected void finalize() throws Throwable { try { if (!closed) { System.err.println(\"Cleaning up unclosed ZipFile for archive \" + archiveName); close(); } } finally { super.finalize();"
      },
      {
        "txt": "} } private static final int CFH_LEN = private static final long CFH_SIG = ZipLong.getValue(ZipArchiveOutputStream.CFH_SIG); private Map<ZipArchiveEntry, NameAndComment> populateFromCentralDirectory() throws IOException { HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag = new HashMap<ZipArchiveEntry, NameAndComment>(); positionAtCentralDirectory();"
      },
      {
        "txt": "byte[] signatureBytes = new byte[WORD]; archive.readFully(signatureBytes); long sig = ZipLong.getValue(signatureBytes); if (sig != CFH_SIG && startsWithLocalFileHeader()) { throw new IOException(\"central directory is empty, can't expand\" + \" corrupt archive.\"); } while (sig == CFH_SIG) { readCentralDirectoryEntry(noUTF8Flag); archive.readFully(signatureBytes);"
      },
      {
        "txt": "sig = ZipLong.getValue(signatureBytes); } return noUTF8Flag; } private void readCentralDirectoryEntry(Map<ZipArchiveEntry, NameAndComment> noUTF8Flag) throws IOException { byte[] cfh = new byte[CFH_LEN]; archive.readFully(cfh); int off = 0;"
      },
      {
        "txt": "ZipArchiveEntry ze = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(cfh, off); off += SHORT; ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK); off += SHORT; // skip version info final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(cfh, off); final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames(); final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; ze.setGeneralPurposeBit(gpFlag);"
      },
      {
        "txt": "off += SHORT; ze.setMethod(ZipShort.getValue(cfh, off)); off += SHORT; long time = ZipUtil.dosToJavaTime(ZipLong.getValue(cfh, off)); ze.setTime(time); off += WORD; ze.setCrc(ZipLong.getValue(cfh, off)); off += WORD; ze.setCompressedSize(ZipLong.getValue(cfh, off)); off += WORD;"
      },
      {
        "txt": "ze.setSize(ZipLong.getValue(cfh, off)); off += WORD; int fileNameLen = ZipShort.getValue(cfh, off); off += SHORT; int extraLen = ZipShort.getValue(cfh, off); off += SHORT; int commentLen = ZipShort.getValue(cfh, off); off += SHORT; int diskStart = ZipShort.getValue(cfh, off); off += SHORT;"
      },
      {
        "txt": "ze.setInternalAttributes(ZipShort.getValue(cfh, off)); off += SHORT; ze.setExternalAttributes(ZipLong.getValue(cfh, off)); off += WORD; byte[] fileName = new byte[fileNameLen]; archive.readFully(fileName); ze.setName(entryEncoding.decode(fileName), fileName); OffsetEntry offset = new OffsetEntry(); offset.headerOffset = ZipLong.getValue(cfh, off); entries.put(ze, offset);"
      },
      {
        "txt": "nameMap.put(ze.getName(), ze); byte[] cdExtraData = new byte[extraLen]; archive.readFully(cdExtraData); ze.setCentralDirectoryExtra(cdExtraData); setSizesAndOffsetFromZip64Extra(ze, offset, diskStart); byte[] comment = new byte[commentLen]; archive.readFully(comment); ze.setComment(entryEncoding.decode(comment)); if (!hasUTF8Flag && useUnicodeExtraFields) { noUTF8Flag.put(ze, new NameAndComment(fileName, comment));"
      },
      {
        "txt": "} } private void setSizesAndOffsetFromZip64Extra(ZipArchiveEntry ze, OffsetEntry offset, int diskStart) throws IOException { Zip64ExtendedInformationExtraField z64 = (Zip64ExtendedInformationExtraField) ze.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID); if (z64 != null) {"
      },
      {
        "txt": "boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC; boolean hasCompressedSize = ze.getCompressedSize() == ZIP64_MAGIC; boolean hasRelativeHeaderOffset = offset.headerOffset == ZIP64_MAGIC; z64.reparseCentralDirectoryData(hasUncompressedSize, hasCompressedSize, hasRelativeHeaderOffset, diskStart == ZIP64_MAGIC_SHORT); if (hasUncompressedSize) { ze.setSize(z64.getSize().getLongValue());"
      },
      {
        "txt": "} else if (hasCompressedSize) { z64.setSize(new ZipEightByteInteger(ze.getSize())); } if (hasCompressedSize) { ze.setCompressedSize(z64.getCompressedSize().getLongValue()); } else if (hasUncompressedSize) { z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize())); } if (hasRelativeHeaderOffset) { offset.headerOffset ="
      },
      {
        "txt": "z64.getRelativeHeaderOffset().getLongValue(); } } } private static final int MIN_EOCD_SIZE = private static final int MAX_EOCD_SIZE = MIN_EOCD_SIZE private static final int CFD_LOCATOR_OFFSET = private static final int ZIP64_EOCDL_LENGTH = private static final int ZIP64_EOCDL_LOCATOR_OFFSET = private static final int ZIP64_EOCD_CFD_LOCATOR_OFFSET ="
      },
      {
        "txt": "private void positionAtCentralDirectory() throws IOException { boolean found = tryToLocateSignature(MIN_EOCD_SIZE + ZIP64_EOCDL_LENGTH, MAX_EOCD_SIZE + ZIP64_EOCDL_LENGTH, ZipArchiveOutputStream .ZIP64_EOCD_LOC_SIG); if (!found) { positionAtCentralDirectory32(); } else { positionAtCentralDirectory64();"
      },
      {
        "txt": "} } private void positionAtCentralDirectory64() throws IOException { skipBytes(ZIP64_EOCDL_LOCATOR_OFFSET); byte[] zip64EocdOffset = new byte[DWORD]; archive.readFully(zip64EocdOffset); archive.seek(ZipEightByteInteger.getLongValue(zip64EocdOffset)); byte[] sig = new byte[WORD]; archive.readFully(sig);"
      },
      {
        "txt": "if (sig[POS_0] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_0] || sig[POS_1] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_1] || sig[POS_2] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_2] || sig[POS_3] != ZipArchiveOutputStream.ZIP64_EOCD_SIG[POS_3] ) { throw new ZipException(\"archive's ZIP64 end of central \" + \"directory locator is corrupt.\"); } skipBytes(ZIP64_EOCD_CFD_LOCATOR_OFFSET - WORD /* signature has already been read */);"
      },
      {
        "txt": "byte[] cfdOffset = new byte[DWORD]; archive.readFully(cfdOffset); archive.seek(ZipEightByteInteger.getLongValue(cfdOffset)); } private void positionAtCentralDirectory32() throws IOException { boolean found = tryToLocateSignature(MIN_EOCD_SIZE, MAX_EOCD_SIZE, ZipArchiveOutputStream.EOCD_SIG); if (!found) { throw new ZipException(\"archive is not a ZIP archive\");"
      },
      {
        "txt": "} skipBytes(CFD_LOCATOR_OFFSET); byte[] cfdOffset = new byte[WORD]; archive.readFully(cfdOffset); archive.seek(ZipLong.getValue(cfdOffset)); } private boolean tryToLocateSignature(long minDistanceFromEnd, long maxDistanceFromEnd, byte[] sig) throws IOException { boolean found = false;"
      },
      {
        "txt": "long off = archive.length() - minDistanceFromEnd; final long stopSearching = Math.max(0L, archive.length() - maxDistanceFromEnd); if (off >= 0) { for (; off >= stopSearching; off--) { archive.seek(off); int curr = archive.read(); if (curr == -1) { break; }"
      },
      {
        "txt": "if (curr == sig[POS_0]) { curr = archive.read(); if (curr == sig[POS_1]) { curr = archive.read(); if (curr == sig[POS_2]) { curr = archive.read(); if (curr == sig[POS_3]) { found = true; break; }"
      },
      {
        "txt": "} } } } } if (found) { archive.seek(off); } return found; }"
      },
      {
        "txt": "private void skipBytes(final int count) throws IOException { int totalSkipped = 0; while (totalSkipped < count) { int skippedNow = archive.skipBytes(count - totalSkipped); if (skippedNow <= 0) { throw new EOFException(); } totalSkipped += skippedNow; } }"
      },
      {
        "txt": "private static final long LFH_OFFSET_FOR_FILENAME_LENGTH = private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag) throws IOException { for (ZipArchiveEntry ze : entries.keySet()) { OffsetEntry offsetEntry = entries.get(ze); long offset = offsetEntry.headerOffset; archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH); byte[] b = new byte[SHORT]; archive.readFully(b);"
      },
      {
        "txt": "int fileNameLen = ZipShort.getValue(b); archive.readFully(b); int extraFieldLen = ZipShort.getValue(b); int lenToSkip = fileNameLen; while (lenToSkip > 0) { int skipped = archive.skipBytes(lenToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip file name in\" + \" local file header\"); }"
      },
      {
        "txt": "lenToSkip -= skipped; } byte[] localExtraData = new byte[extraFieldLen]; archive.readFully(localExtraData); ze.setExtra(localExtraData); offsetEntry.dataOffset = offset + LFH_OFFSET_FOR_FILENAME_LENGTH + SHORT + SHORT + fileNameLen + extraFieldLen; if (entriesWithoutUTF8Flag.containsKey(ze)) { String orig = ze.getName(); NameAndComment nc = entriesWithoutUTF8Flag.get(ze);"
      },
      {
        "txt": "nc.comment); if (!orig.equals(ze.getName())) { nameMap.remove(orig); nameMap.put(ze.getName(), ze); } } <extra_id_0> } private boolean startsWithLocalFileHeader() throws IOException { archive.seek(0); final byte[] start = new byte[WORD]; archive.readFully(start); for (int i = 0; i < start.length; i++) {"
      },
      {
        "txt": "archive.readFully(start); for (int i = 0; i < start.length; i++) { if (start[i] != ZipArchiveOutputStream.LFH_SIG[i]) { return false; } } return true; } private class BoundedInputStream extends InputStream { private long remaining;"
      },
      {
        "txt": "private long loc; private boolean addDummyByte = false; BoundedInputStream(long start, long remaining) { this.remaining = remaining; loc = start; } @Override public int read() throws IOException { if (remaining-- <= 0) { if (addDummyByte) {"
      },
      {
        "txt": "addDummyByte = false; return 0; } return -1; } synchronized (archive) { archive.seek(loc++); return archive.read(); } }"
      },
      {
        "txt": "@Override public int read(byte[] b, int off, int len) throws IOException { if (remaining <= 0) { if (addDummyByte) { addDummyByte = false; b[off] = 0; return 1; } return -1; }"
      },
      {
        "txt": "if (len <= 0) { return 0; } if (len > remaining) { len = (int) remaining; } int ret = -1; synchronized (archive) { archive.seek(loc); ret = archive.read(b, off, len);"
      },
      {
        "txt": "} if (ret > 0) { loc += ret; remaining -= ret; } return ret; } void addDummy() { addDummyByte = true; }"
      },
      {
        "txt": "} private static final class NameAndComment { private final byte[] name; private final byte[] comment; private NameAndComment(byte[] name, byte[] comment) { this.name = name; this.comment = comment; } } private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR ="
      },
      {
        "txt": "new Comparator<ZipArchiveEntry>() { public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) { if (e1 == e2) return 0; OffsetEntry off1 = entries.get(e1); OffsetEntry off2 = entries.get(e2); if (off1 == null) { return 1; } if (off2 == null) {"
      },
      {
        "txt": "return -1; } long val = (off1.headerOffset - off2.headerOffset); return val == 0 ? 0 : val < 0 ? -1 : +1; } };"
      }
    ]
  }
]
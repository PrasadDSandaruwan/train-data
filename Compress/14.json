[
  {
    "id": 1028,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java",
    "start-bug-line": 65,
    "end-bug-line": 72,
    "bug": "boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) {",
    "fix": "if (buffer[start] == 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; public class TarUtils { private static final int BYTE_MASK = 255; private TarUtils(){ }"
      },
      {
        "txt": "long result = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\"); } <extra_id_0> return 0L; } while (start < end){ if (buffer[start] == ' '){ start++; } else {"
      },
      {
        "txt": "start++; } else { break; } } byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else {"
      },
      {
        "txt": "throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); } trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start]; if (currentByte < '0' || currentByte > '7'){"
      },
      {
        "txt": "throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII } return result; } public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) {"
      },
      {
        "txt": "return parseOctal(buffer, offset, length); } long val = buffer[offset] & 0x7f; for (int i = 1; i < length; i++) { if (val >= (1L << (63 - 8))) { throw new IllegalArgumentException( \"At offset \" + offset + \", \" + length + \" byte \" + \"binary number exceeds maximum signed long value\"); } val = (val << 8) + (buffer[offset + i] & 0xff);"
      },
      {
        "txt": "} return val; } public static boolean parseBoolean(final byte[] buffer, final int offset) { return buffer[offset] == 1; } private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); string=string.replaceAll(\"\\0\", \"{NUL}\"); // Replace NULs to allow string to be printed"
      },
      {
        "txt": "final String s = \"Invalid byte \"+currentByte+\" at offset \"+(current-offset)+\" in '\"+string+\"' len=\"+length; return s; } public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); int end = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break;"
      },
      {
        "txt": "} result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } public static int formatNameBytes(String name, byte[] buf, final int offset, final int length) { int i; for (i = 0; i < length && i < name.length(); ++i) { buf[offset + i] = (byte) name.charAt(i); }"
      },
      {
        "txt": "for (; i < length; ++i) { buf[offset + i] = 0; } return offset + length; } public static void formatUnsignedOctalString(final long value, byte[] buffer, final int offset, final int length) { int remaining = length; remaining--; if (value == 0) {"
      },
      {
        "txt": "buffer[offset + remaining--] = (byte) '0'; } else { long val = value; for (; remaining >= 0 && val != 0; --remaining) { buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7)); val = val >>> 3; } if (val != 0){ throw new IllegalArgumentException (value+\"=\"+Long.toOctalString(value)+ \" will not fit in octal number buffer of length \"+length);"
      },
      {
        "txt": "} } for (; remaining >= 0; --remaining) { // leading zeros buffer[offset + remaining] = (byte) '0'; } } public static int formatOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // For space and trailing null formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx++] = (byte) ' '; // Trailing space"
      },
      {
        "txt": "buf[offset + idx] = 0; // Trailing null return offset + length; } public static int formatLongOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-1; // For space formatUnsignedOctalString(value, buf, offset, idx); buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static int formatLongOctalOrBinaryBytes("
      },
      {
        "txt": "final long value, byte[] buf, final int offset, final int length) { final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE; if (value <= maxAsOctalChar) { // OK to store as octal chars return formatLongOctalBytes(value, buf, offset, length); } long val = value; for (int i = offset + length - 1; i >= offset; i--) { buf[i] = (byte) val; val >>= 8; }"
      },
      {
        "txt": "if (val != 0 || (buf[offset] & 0x80) != 0) { throw new IllegalArgumentException(\"Value \" + value + \" is too large for \" + length + \" byte field.\"); } buf[offset] |= 0x80; return offset + length; } public static int formatCheckSumOctalBytes(final long value, byte[] buf, final int offset, final int length) { int idx=length-2; // for NUL and space formatUnsignedOctalString(value, buf, offset, idx);"
      },
      {
        "txt": "buf[offset + idx++] = 0; // Trailing null buf[offset + idx] = (byte) ' '; // Trailing space return offset + length; } public static long computeCheckSum(final byte[] buf) { long sum = 0; for (int i = 0; i < buf.length; ++i) { sum += BYTE_MASK & buf[i]; } return sum;"
      }
    ]
  }
]
[
  {
    "id": 1024,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
    "start-bug-line": 240,
    "end-bug-line": 240,
    "bug": "",
    "fix": "if (signatureLength >= 512) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers; import java.io.ByteArrayInputStream; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import org.apache.commons.compress.archivers.ar.ArArchiveInputStream; import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;"
      },
      {
        "txt": "import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream; import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream; import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream; import org.apache.commons.compress.archivers.jar.JarArchiveInputStream; import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream; import org.apache.commons.compress.archivers.tar.TarArchiveInputStream; import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream; import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream; import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream; public class ArchiveStreamFactory {"
      },
      {
        "txt": "public static final String AR = \"ar\"; public static final String CPIO = \"cpio\"; public static final String DUMP = \"dump\"; public static final String JAR = \"jar\"; public static final String TAR = \"tar\"; public static final String ZIP = \"zip\"; public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in) throws ArchiveException { if (archiverName == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Archivername must not be null.\"); } if (in == null) { throw new IllegalArgumentException(\"InputStream must not be null.\"); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveInputStream(in); } if (ZIP.equalsIgnoreCase(archiverName)) { return new ZipArchiveInputStream(in);"
      },
      {
        "txt": "} if (TAR.equalsIgnoreCase(archiverName)) { return new TarArchiveInputStream(in); } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveInputStream(in); } if (CPIO.equalsIgnoreCase(archiverName)) { return new CpioArchiveInputStream(in); }"
      },
      {
        "txt": "if (DUMP.equalsIgnoreCase(archiverName)) { return new DumpArchiveInputStream(in); } throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\"); } public ArchiveOutputStream createArchiveOutputStream( final String archiverName, final OutputStream out) throws ArchiveException { if (archiverName == null) { throw new IllegalArgumentException(\"Archivername must not be null.\");"
      },
      {
        "txt": "} if (out == null) { throw new IllegalArgumentException(\"OutputStream must not be null.\"); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out); } if (ZIP.equalsIgnoreCase(archiverName)) { return new ZipArchiveOutputStream(out); }"
      },
      {
        "txt": "if (TAR.equalsIgnoreCase(archiverName)) { return new TarArchiveOutputStream(out); } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); } if (CPIO.equalsIgnoreCase(archiverName)) { return new CpioArchiveOutputStream(out); } throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");"
      },
      {
        "txt": "} public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException { if (in == null) { throw new IllegalArgumentException(\"Stream must not be null.\"); } if (!in.markSupported()) { throw new IllegalArgumentException(\"Mark is not supported.\"); } final byte[] signature = new byte[12];"
      },
      {
        "txt": "in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in); } else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in);"
      },
      {
        "txt": "} else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); } final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig); in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); }"
      },
      {
        "txt": "in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in); } <extra_id_0> TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD } } catch (IOException e) {"
      },
      {
        "txt": "} } catch (IOException e) { throw new ArchiveException(\"Could not use reset and mark operations.\", e); } throw new ArchiveException(\"No Archiver found for the stream signature\"); }"
      }
    ]
  },
  {
    "id": 1025,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java",
    "start-bug-line": 249,
    "end-bug-line": 249,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers; import java.io.ByteArrayInputStream; import java.io.IOException;"
      },
      {
        "txt": "import java.io.InputStream; import java.io.OutputStream; import org.apache.commons.compress.archivers.ar.ArArchiveInputStream; import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream; import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream; import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream; import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream; import org.apache.commons.compress.archivers.jar.JarArchiveInputStream; import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream; import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;"
      },
      {
        "txt": "import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream; import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream; import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream; public class ArchiveStreamFactory { public static final String AR = \"ar\"; public static final String CPIO = \"cpio\"; public static final String DUMP = \"dump\"; public static final String JAR = \"jar\"; public static final String TAR = \"tar\"; public static final String ZIP = \"zip\";"
      },
      {
        "txt": "public ArchiveInputStream createArchiveInputStream( final String archiverName, final InputStream in) throws ArchiveException { if (archiverName == null) { throw new IllegalArgumentException(\"Archivername must not be null.\"); } if (in == null) { throw new IllegalArgumentException(\"InputStream must not be null.\"); } if (AR.equalsIgnoreCase(archiverName)) {"
      },
      {
        "txt": "return new ArArchiveInputStream(in); } if (ZIP.equalsIgnoreCase(archiverName)) { return new ZipArchiveInputStream(in); } if (TAR.equalsIgnoreCase(archiverName)) { return new TarArchiveInputStream(in); } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveInputStream(in);"
      },
      {
        "txt": "} if (CPIO.equalsIgnoreCase(archiverName)) { return new CpioArchiveInputStream(in); } if (DUMP.equalsIgnoreCase(archiverName)) { return new DumpArchiveInputStream(in); } throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\"); } public ArchiveOutputStream createArchiveOutputStream("
      },
      {
        "txt": "final String archiverName, final OutputStream out) throws ArchiveException { if (archiverName == null) { throw new IllegalArgumentException(\"Archivername must not be null.\"); } if (out == null) { throw new IllegalArgumentException(\"OutputStream must not be null.\"); } if (AR.equalsIgnoreCase(archiverName)) { return new ArArchiveOutputStream(out);"
      },
      {
        "txt": "} if (ZIP.equalsIgnoreCase(archiverName)) { return new ZipArchiveOutputStream(out); } if (TAR.equalsIgnoreCase(archiverName)) { return new TarArchiveOutputStream(out); } if (JAR.equalsIgnoreCase(archiverName)) { return new JarArchiveOutputStream(out); }"
      },
      {
        "txt": "if (CPIO.equalsIgnoreCase(archiverName)) { return new CpioArchiveOutputStream(out); } throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\"); } public ArchiveInputStream createArchiveInputStream(final InputStream in) throws ArchiveException { if (in == null) { throw new IllegalArgumentException(\"Stream must not be null.\"); }"
      },
      {
        "txt": "if (!in.markSupported()) { throw new IllegalArgumentException(\"Mark is not supported.\"); } final byte[] signature = new byte[12]; in.mark(signature.length); try { int signatureLength = in.read(signature); in.reset(); if (ZipArchiveInputStream.matches(signature, signatureLength)) { return new ZipArchiveInputStream(in);"
      },
      {
        "txt": "} else if (JarArchiveInputStream.matches(signature, signatureLength)) { return new JarArchiveInputStream(in); } else if (ArArchiveInputStream.matches(signature, signatureLength)) { return new ArArchiveInputStream(in); } else if (CpioArchiveInputStream.matches(signature, signatureLength)) { return new CpioArchiveInputStream(in); } final byte[] dumpsig = new byte[32]; in.mark(dumpsig.length); signatureLength = in.read(dumpsig);"
      },
      {
        "txt": "in.reset(); if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) { return new DumpArchiveInputStream(in); } final byte[] tarheader = new byte[512]; in.mark(tarheader.length); signatureLength = in.read(tarheader); in.reset(); if (TarArchiveInputStream.matches(tarheader, signatureLength)) { return new TarArchiveInputStream(in);"
      },
      {
        "txt": "try { TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader)); tais.getNextEntry(); return new TarArchiveInputStream(in); } catch (Exception e) { // NOPMD } <extra_id_0> throw new ArchiveException(\"Could not use reset and mark operations.\", e); } throw new ArchiveException(\"No Archiver found for the stream signature\"); } }"
      }
    ]
  }
]
[
  {
    "id": 995,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "start-bug-line": 55,
    "end-bug-line": 55,
    "bug": "",
    "fix": "private boolean haveUnclosedEntry = false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; import java.io.File;"
      },
      {
        "txt": "import java.io.IOException; import java.io.OutputStream; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveOutputStream; public class TarArchiveOutputStream extends ArchiveOutputStream { public static final int LONGFILE_ERROR = 0; public static final int LONGFILE_TRUNCATE = 1; public static final int LONGFILE_GNU = 2; private long currSize; private String currName;"
      },
      {
        "txt": "private final byte[] recordBuf; private int assemLen; private final byte[] assemBuf; protected final TarBuffer buffer; private int longFileMode = LONGFILE_ERROR; private boolean closed = false; <extra_id_0> private final OutputStream out; public TarArchiveOutputStream(OutputStream os) { this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
      },
      {
        "txt": "public TarArchiveOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { out = os; this.buffer = new TarBuffer(os, blockSize, recordSize); this.assemLen = 0; this.assemBuf = new byte[recordSize]; this.recordBuf = new byte[recordSize]; }"
      },
      {
        "txt": "public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; } public void finish() throws IOException { writeEOFRecord(); writeEOFRecord(); } public void close() throws IOException { if (!closed) { finish();"
      },
      {
        "txt": "buffer.close(); out.close(); closed = true; } } public int getRecordSize() { return buffer.getRecordSize(); } public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException { TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;"
      },
      {
        "txt": "if (entry.getName().length() >= TarConstants.NAMELEN) { if (longFileMode == LONGFILE_GNU) { TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME); final byte[] nameBytes = entry.getName().getBytes(); // TODO is it correct to use the default charset here? longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL putArchiveEntry(longLinkEntry); write(nameBytes); write(0); // NUL terminator closeArchiveEntry();"
      },
      {
        "txt": "} else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\"); } } entry.writeEntryHeader(recordBuf); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) {"
      },
      {
        "txt": "currSize = 0; } else { currSize = entry.getSize(); } currName = entry.getName(); } public void closeArchiveEntry() throws IOException { if (assemLen > 0) { for (int i = assemLen; i < assemBuf.length; ++i) { assemBuf[i] = 0;"
      },
      {
        "txt": "} buffer.writeRecord(assemBuf); currBytes += assemLen; assemLen = 0; } if (currBytes < currSize) { throw new IOException(\"entry '\" + currName + \"' closed at '\" + currBytes + \"' before the '\" + currSize + \"' bytes specified in the header were written\");"
      },
      {
        "txt": "} } public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { throw new IOException(\"request to write '\" + numToWrite + \"' bytes exceeds size in header of '\" + currSize + \"' bytes for entry '\" + currName + \"'\"); } if (assemLen > 0) {"
      },
      {
        "txt": "if ((assemLen + numToWrite) >= recordBuf.length) { int aLen = recordBuf.length - assemLen; System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen); System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen); buffer.writeRecord(recordBuf); currBytes += recordBuf.length; wOffset += aLen; numToWrite -= aLen;"
      },
      {
        "txt": "assemLen = 0; } else { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); wOffset += numToWrite; assemLen += numToWrite; numToWrite = 0; } } while (numToWrite > 0) {"
      },
      {
        "txt": "if (numToWrite < recordBuf.length) { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); assemLen += numToWrite; break; } buffer.writeRecord(wBuf, wOffset); int num = recordBuf.length; currBytes += num; numToWrite -= num;"
      },
      {
        "txt": "wOffset += num; } } private void writeEOFRecord() throws IOException { for (int i = 0; i < recordBuf.length; ++i) { recordBuf[i] = 0; } buffer.writeRecord(recordBuf); } public void flush() throws IOException {"
      },
      {
        "txt": "out.flush(); } public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException { return new TarArchiveEntry(inputFile, entryName); }"
      }
    ]
  },
  {
    "id": 996,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "start-bug-line": 112,
    "end-bug-line": 112,
    "bug": "",
    "fix": "if(haveUnclosedEntry) { throw new IOException(\"This archives contains unclosed entries.\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; import java.io.File; import java.io.IOException; import java.io.OutputStream; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveOutputStream; public class TarArchiveOutputStream extends ArchiveOutputStream { public static final int LONGFILE_ERROR = 0; public static final int LONGFILE_TRUNCATE = 1; public static final int LONGFILE_GNU = 2;"
      },
      {
        "txt": "private long currSize; private String currName; private long currBytes; private final byte[] recordBuf; private int assemLen; private final byte[] assemBuf; protected final TarBuffer buffer; private int longFileMode = LONGFILE_ERROR; private boolean closed = false; private final OutputStream out;"
      },
      {
        "txt": "public TarArchiveOutputStream(OutputStream os) { this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { out = os; this.buffer = new TarBuffer(os, blockSize, recordSize); this.assemLen = 0;"
      },
      {
        "txt": "this.recordBuf = new byte[recordSize]; } public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; } public void finish() throws IOException { <extra_id_0> writeEOFRecord(); } public void close() throws IOException { if (!closed) { finish(); buffer.close();"
      },
      {
        "txt": "finish(); buffer.close(); out.close(); closed = true; } } public int getRecordSize() { return buffer.getRecordSize(); } public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {"
      },
      {
        "txt": "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry; if (entry.getName().length() >= TarConstants.NAMELEN) { if (longFileMode == LONGFILE_GNU) { TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME); final byte[] nameBytes = entry.getName().getBytes(); // TODO is it correct to use the default charset here? longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL putArchiveEntry(longLinkEntry); write(nameBytes); write(0); // NUL terminator"
      },
      {
        "txt": "closeArchiveEntry(); } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\"); } } entry.writeEntryHeader(recordBuf); buffer.writeRecord(recordBuf); currBytes = 0;"
      },
      {
        "txt": "if (entry.isDirectory()) { currSize = 0; } else { currSize = entry.getSize(); } currName = entry.getName(); } public void closeArchiveEntry() throws IOException { if (assemLen > 0) { for (int i = assemLen; i < assemBuf.length; ++i) {"
      },
      {
        "txt": "assemBuf[i] = 0; } buffer.writeRecord(assemBuf); currBytes += assemLen; assemLen = 0; } if (currBytes < currSize) { throw new IOException(\"entry '\" + currName + \"' closed at '\" + currBytes + \"' before the '\" + currSize"
      },
      {
        "txt": "+ \"' bytes specified in the header were written\"); } } public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { throw new IOException(\"request to write '\" + numToWrite + \"' bytes exceeds size in header of '\" + currSize + \"' bytes for entry '\" + currName + \"'\"); }"
      },
      {
        "txt": "if (assemLen > 0) { if ((assemLen + numToWrite) >= recordBuf.length) { int aLen = recordBuf.length - assemLen; System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen); System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen); buffer.writeRecord(recordBuf); currBytes += recordBuf.length; wOffset += aLen;"
      },
      {
        "txt": "numToWrite -= aLen; assemLen = 0; } else { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); wOffset += numToWrite; assemLen += numToWrite; numToWrite = 0; } }"
      },
      {
        "txt": "while (numToWrite > 0) { if (numToWrite < recordBuf.length) { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); assemLen += numToWrite; break; } buffer.writeRecord(wBuf, wOffset); int num = recordBuf.length; currBytes += num;"
      },
      {
        "txt": "numToWrite -= num; wOffset += num; } } private void writeEOFRecord() throws IOException { for (int i = 0; i < recordBuf.length; ++i) { recordBuf[i] = 0; } buffer.writeRecord(recordBuf); }"
      },
      {
        "txt": "public void flush() throws IOException { out.flush(); } public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException { return new TarArchiveEntry(inputFile, entryName); }"
      }
    ]
  },
  {
    "id": 997,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "start-bug-line": 187,
    "end-bug-line": 187,
    "bug": "",
    "fix": "haveUnclosedEntry = true;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.File; import java.io.IOException; import java.io.OutputStream; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveOutputStream; public class TarArchiveOutputStream extends ArchiveOutputStream { public static final int LONGFILE_ERROR = 0; public static final int LONGFILE_TRUNCATE = 1; public static final int LONGFILE_GNU = 2; private long currSize;"
      },
      {
        "txt": "private String currName; private long currBytes; private final byte[] recordBuf; private int assemLen; private final byte[] assemBuf; protected final TarBuffer buffer; private int longFileMode = LONGFILE_ERROR; private boolean closed = false; private final OutputStream out; public TarArchiveOutputStream(OutputStream os) {"
      },
      {
        "txt": "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) { out = os; this.buffer = new TarBuffer(os, blockSize, recordSize); this.assemLen = 0; this.assemBuf = new byte[recordSize];"
      },
      {
        "txt": "this.recordBuf = new byte[recordSize]; } public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; } public void finish() throws IOException { writeEOFRecord(); writeEOFRecord(); } public void close() throws IOException {"
      },
      {
        "txt": "if (!closed) { finish(); buffer.close(); out.close(); closed = true; } } public int getRecordSize() { return buffer.getRecordSize(); }"
      },
      {
        "txt": "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException { TarArchiveEntry entry = (TarArchiveEntry) archiveEntry; if (entry.getName().length() >= TarConstants.NAMELEN) { if (longFileMode == LONGFILE_GNU) { TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME); final byte[] nameBytes = entry.getName().getBytes(); // TODO is it correct to use the default charset here? longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL putArchiveEntry(longLinkEntry); write(nameBytes);"
      },
      {
        "txt": "write(0); // NUL terminator closeArchiveEntry(); } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\"); } } entry.writeEntryHeader(recordBuf); buffer.writeRecord(recordBuf);"
      },
      {
        "txt": "if (entry.isDirectory()) { currSize = 0; } else { currSize = entry.getSize(); } currName = entry.getName(); <extra_id_0> public void closeArchiveEntry() throws IOException { if (assemLen > 0) { for (int i = assemLen; i < assemBuf.length; ++i) { assemBuf[i] = 0; } buffer.writeRecord(assemBuf);"
      },
      {
        "txt": "} buffer.writeRecord(assemBuf); currBytes += assemLen; assemLen = 0; } if (currBytes < currSize) { throw new IOException(\"entry '\" + currName + \"' closed at '\" + currBytes + \"' before the '\" + currSize + \"' bytes specified in the header were written\");"
      },
      {
        "txt": "} } public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { throw new IOException(\"request to write '\" + numToWrite + \"' bytes exceeds size in header of '\" + currSize + \"' bytes for entry '\" + currName + \"'\"); } if (assemLen > 0) {"
      },
      {
        "txt": "if ((assemLen + numToWrite) >= recordBuf.length) { int aLen = recordBuf.length - assemLen; System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen); System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen); buffer.writeRecord(recordBuf); currBytes += recordBuf.length; wOffset += aLen; numToWrite -= aLen;"
      },
      {
        "txt": "assemLen = 0; } else { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); wOffset += numToWrite; assemLen += numToWrite; numToWrite = 0; } } while (numToWrite > 0) {"
      },
      {
        "txt": "if (numToWrite < recordBuf.length) { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); assemLen += numToWrite; break; } buffer.writeRecord(wBuf, wOffset); int num = recordBuf.length; currBytes += num; numToWrite -= num;"
      },
      {
        "txt": "wOffset += num; } } private void writeEOFRecord() throws IOException { for (int i = 0; i < recordBuf.length; ++i) { recordBuf[i] = 0; } buffer.writeRecord(recordBuf); } public void flush() throws IOException {"
      },
      {
        "txt": "out.flush(); } public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException { return new TarArchiveEntry(inputFile, entryName); }"
      }
    ]
  },
  {
    "id": 998,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java",
    "start-bug-line": 217,
    "end-bug-line": 217,
    "bug": "",
    "fix": "haveUnclosedEntry = false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; import java.io.File; import java.io.IOException; import java.io.OutputStream; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveOutputStream; public class TarArchiveOutputStream extends ArchiveOutputStream {"
      },
      {
        "txt": "public static final int LONGFILE_ERROR = 0; public static final int LONGFILE_TRUNCATE = 1; public static final int LONGFILE_GNU = 2; private long currSize; private String currName; private long currBytes; private final byte[] recordBuf; private int assemLen; private final byte[] assemBuf; protected final TarBuffer buffer;"
      },
      {
        "txt": "private int longFileMode = LONGFILE_ERROR; private boolean closed = false; private final OutputStream out; public TarArchiveOutputStream(OutputStream os) { this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {"
      },
      {
        "txt": "out = os; this.buffer = new TarBuffer(os, blockSize, recordSize); this.assemLen = 0; this.assemBuf = new byte[recordSize]; this.recordBuf = new byte[recordSize]; } public void setLongFileMode(int longFileMode) { this.longFileMode = longFileMode; } public void finish() throws IOException {"
      },
      {
        "txt": "writeEOFRecord(); writeEOFRecord(); } public void close() throws IOException { if (!closed) { finish(); buffer.close(); out.close(); closed = true; }"
      },
      {
        "txt": "} public int getRecordSize() { return buffer.getRecordSize(); } public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException { TarArchiveEntry entry = (TarArchiveEntry) archiveEntry; if (entry.getName().length() >= TarConstants.NAMELEN) { if (longFileMode == LONGFILE_GNU) { TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, TarConstants.LF_GNUTYPE_LONGNAME);"
      },
      {
        "txt": "final byte[] nameBytes = entry.getName().getBytes(); // TODO is it correct to use the default charset here? longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL putArchiveEntry(longLinkEntry); write(nameBytes); write(0); // NUL terminator closeArchiveEntry(); } else if (longFileMode != LONGFILE_TRUNCATE) { throw new RuntimeException(\"file name '\" + entry.getName() + \"' is too long ( > \" + TarConstants.NAMELEN + \" bytes)\");"
      },
      {
        "txt": "} } entry.writeEntryHeader(recordBuf); buffer.writeRecord(recordBuf); currBytes = 0; if (entry.isDirectory()) { currSize = 0; } else { currSize = entry.getSize(); }"
      },
      {
        "txt": "currName = entry.getName(); } public void closeArchiveEntry() throws IOException { if (assemLen > 0) { for (int i = assemLen; i < assemBuf.length; ++i) { assemBuf[i] = 0; } buffer.writeRecord(assemBuf); currBytes += assemLen; assemLen = 0;"
      },
      {
        "txt": "if (currBytes < currSize) { throw new IOException(\"entry '\" + currName + \"' closed at '\" + currBytes + \"' before the '\" + currSize + \"' bytes specified in the header were written\"); } <extra_id_0> public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { throw new IOException(\"request to write '\" + numToWrite + \"' bytes exceeds size in header of '\" + currSize + \"' bytes for entry '\" + currName + \"'\");"
      },
      {
        "txt": "+ currSize + \"' bytes for entry '\" + currName + \"'\"); } if (assemLen > 0) { if ((assemLen + numToWrite) >= recordBuf.length) { int aLen = recordBuf.length - assemLen; System.arraycopy(assemBuf, 0, recordBuf, 0, assemLen); System.arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen);"
      },
      {
        "txt": "buffer.writeRecord(recordBuf); currBytes += recordBuf.length; wOffset += aLen; numToWrite -= aLen; assemLen = 0; } else { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); wOffset += numToWrite; assemLen += numToWrite;"
      },
      {
        "txt": "numToWrite = 0; } } while (numToWrite > 0) { if (numToWrite < recordBuf.length) { System.arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); assemLen += numToWrite; break; }"
      },
      {
        "txt": "buffer.writeRecord(wBuf, wOffset); int num = recordBuf.length; currBytes += num; numToWrite -= num; wOffset += num; } } private void writeEOFRecord() throws IOException { for (int i = 0; i < recordBuf.length; ++i) { recordBuf[i] = 0;"
      },
      {
        "txt": "} buffer.writeRecord(recordBuf); } public void flush() throws IOException { out.flush(); } public ArchiveEntry createArchiveEntry(File inputFile, String entryName) throws IOException { return new TarArchiveEntry(inputFile, entryName); }"
      }
    ]
  }
]
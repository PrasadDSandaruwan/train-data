[
  {
    "id": 1064,
    "file_path": "src/main/java/org/apache/commons/compress/utils/IOUtils.java",
    "start-bug-line": 104,
    "end-bug-line": 104,
    "bug": "",
    "fix": "if (numToSkip > 0) { byte[] skipBuf = new byte[SKIP_BUF_SIZE]; while (numToSkip > 0) { int read = readFully(input, skipBuf, 0, (int) Math.min(numToSkip, SKIP_BUF_SIZE)); if (read < 1) { break; } numToSkip -= read; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.ByteArrayOutputStream; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream;"
      },
      {
        "txt": "public final class IOUtils { private static final int COPY_BUF_SIZE = 8024; private static final int SKIP_BUF_SIZE = 4096; private IOUtils(){ } public static long copy(final InputStream input, final OutputStream output) throws IOException { return copy(input, output, COPY_BUF_SIZE); } public static long copy(final InputStream input, final OutputStream output, int buffersize) throws IOException { final byte[] buffer = new byte[buffersize];"
      },
      {
        "txt": "int n = 0; long count=0; while (-1 != (n = input.read(buffer))) { output.write(buffer, 0, n); count += n; } return count; } public static long skip(InputStream input, long numToSkip) throws IOException { long available = numToSkip;"
      },
      {
        "txt": "long skipped = input.skip(numToSkip); if (skipped == 0) { break; } numToSkip -= skipped; } <extra_id_0> } public static int readFully(InputStream input, byte[] b) throws IOException { return readFully(input, b, 0, b.length); } public static int readFully(InputStream input, byte[] b, int offset, int len) throws IOException {"
      },
      {
        "txt": "public static int readFully(InputStream input, byte[] b, int offset, int len) throws IOException { if (len < 0 || offset < 0 || len + offset > b.length) { throw new IndexOutOfBoundsException(); } int count = 0, x = 0; while (count != len) { x = input.read(b, offset + count, len - count); if (x == -1) { break;"
      },
      {
        "txt": "} count += x; } return count; } public static byte[] toByteArray(final InputStream input) throws IOException { final ByteArrayOutputStream output = new ByteArrayOutputStream(); copy(input, output); return output.toByteArray(); }"
      },
      {
        "txt": "public static void closeQuietly(Closeable c) { if (c != null) { try { c.close(); } catch (IOException ignored) { // NOPMD } } }"
      }
    ]
  }
]
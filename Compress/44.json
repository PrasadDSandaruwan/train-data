[
  {
    "id": 1114,
    "file_path": "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
    "start-bug-line": 35,
    "end-bug-line": 35,
    "bug": "",
    "fix": "if ( checksum == null ){ throw new NullPointerException(\"Parameter checksum must not be null\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.InputStream; import java.util.zip.Checksum; public class ChecksumCalculatingInputStream extends InputStream { private final InputStream in; private final Checksum checksum; public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) { <extra_id_0> this.checksum = checksum; this.in = in; } @Override public int read() throws IOException { final int ret = in.read();"
      },
      {
        "txt": "public int read() throws IOException { final int ret = in.read(); if (ret >= 0) { checksum.update(ret); } return ret; } @Override public int read(final byte[] b) throws IOException { return read(b, 0, b.length);"
      },
      {
        "txt": "} @Override public int read(final byte[] b, final int off, final int len) throws IOException { final int ret = in.read(b, off, len); if (ret >= 0) { checksum.update(b, off, ret); } return ret; } @Override"
      },
      {
        "txt": "public long skip(final long n) throws IOException { if (read() >= 0) { return 1; } return 0; } public long getValue() { return checksum.getValue(); }"
      }
    ]
  },
  {
    "id": 1115,
    "file_path": "src/main/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStream.java",
    "start-bug-line": 36,
    "end-bug-line": 36,
    "bug": "",
    "fix": "if ( in == null ){ throw new NullPointerException(\"Parameter in must not be null\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.InputStream; import java.util.zip.Checksum; public class ChecksumCalculatingInputStream extends InputStream { private final InputStream in; private final Checksum checksum; public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) { <extra_id_0> this.checksum = checksum; this.in = in; } @Override public int read() throws IOException { final int ret = in.read();"
      },
      {
        "txt": "public int read() throws IOException { final int ret = in.read(); if (ret >= 0) { checksum.update(ret); } return ret; } @Override public int read(final byte[] b) throws IOException { return read(b, 0, b.length);"
      },
      {
        "txt": "} @Override public int read(final byte[] b, final int off, final int len) throws IOException { final int ret = in.read(b, off, len); if (ret >= 0) { checksum.update(b, off, ret); } return ret; } @Override"
      },
      {
        "txt": "public long skip(final long n) throws IOException { if (read() >= 0) { return 1; } return 0; } public long getValue() { return checksum.getValue(); }"
      }
    ]
  }
]
[
  {
    "id": 1026,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java",
    "start-bug-line": 198,
    "end-bug-line": 198,
    "bug": "currEntry = new TarArchiveEntry(headerBuf);",
    "fix": "try { currEntry = new TarArchiveEntry(headerBuf); } catch (IllegalArgumentException e) { IOException ioe = new IOException(\"Error detected parsing the header\"); ioe.initCause(e); throw ioe; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.tar; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.Map; import java.util.Map.Entry; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveInputStream; import org.apache.commons.compress.utils.ArchiveUtils; public class TarArchiveInputStream extends ArchiveInputStream { private static final int SMALL_BUFFER_SIZE = 256; private static final int BUFFER_SIZE = 8 * 1024; private boolean hasHitEOF;"
      },
      {
        "txt": "private long entrySize; private long entryOffset; private byte[] readBuf; protected final TarBuffer buffer; private TarArchiveEntry currEntry; public TarArchiveInputStream(InputStream is) { this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE); } public TarArchiveInputStream(InputStream is, int blockSize) { this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);"
      },
      {
        "txt": "} public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) { this.buffer = new TarBuffer(is, blockSize, recordSize); this.readBuf = null; this.hasHitEOF = false; } @Override public void close() throws IOException { buffer.close(); }"
      },
      {
        "txt": "public int getRecordSize() { return buffer.getRecordSize(); } @Override public int available() throws IOException { if (entrySize - entryOffset > Integer.MAX_VALUE) { return Integer.MAX_VALUE; } return (int) (entrySize - entryOffset); }"
      },
      {
        "txt": "@Override public long skip(long numToSkip) throws IOException { byte[] skipBuf = new byte[BUFFER_SIZE]; long skip = numToSkip; while (skip > 0) { int realSkip = (int) (skip > skipBuf.length ? skipBuf.length : skip); int numRead = read(skipBuf, 0, realSkip); if (numRead == -1) { break; }"
      },
      {
        "txt": "skip -= numRead; } return (numToSkip - skip); } @Override public synchronized void reset() { } public TarArchiveEntry getNextTarEntry() throws IOException { if (hasHitEOF) { return null;"
      },
      {
        "txt": "} if (currEntry != null) { long numToSkip = entrySize - entryOffset; while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException(\"failed to skip current tar entry\"); } numToSkip -= skipped; }"
      },
      {
        "txt": "} byte[] headerBuf = getRecord(); if (hasHitEOF) { currEntry = null; return null; } <extra_id_0> entryOffset = 0; entrySize = currEntry.getSize(); if (currEntry.isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0;"
      },
      {
        "txt": "byte[] buf = new byte[SMALL_BUFFER_SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName.append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName.length() > 0"
      },
      {
        "txt": "&& longName.charAt(longName.length() - 1) == 0) { longName.deleteCharAt(longName.length() - 1); } currEntry.setName(longName.toString()); } if (currEntry.isPaxHeader()){ // Process Pax headers paxHeaders(); } if (currEntry.isGNUSparse()){ // Process sparse files readGNUSparse();"
      },
      {
        "txt": "} entrySize = currEntry.getSize(); return currEntry; } private byte[] getRecord() throws IOException { if (hasHitEOF) { return null; } byte[] headerBuf = buffer.readRecord(); if (headerBuf == null) {"
      },
      {
        "txt": "hasHitEOF = true; } else if (buffer.isEOFRecord(headerBuf)) { hasHitEOF = true; } return hasHitEOF ? null : headerBuf; } private void paxHeaders() throws IOException{ Reader br = new InputStreamReader(this, \"UTF-8\") { @Override public void close() {"
      },
      {
        "txt": "} }; Map<String, String> headers = null; try { headers = parsePaxHeaders(br); } finally { br.close(); } getNextEntry(); // Get the actual file entry applyPaxHeadersToCurrentEntry(headers);"
      },
      {
        "txt": "} Map<String, String> parsePaxHeaders(Reader br) throws IOException { Map<String, String> headers = new HashMap<String, String>(); while(true){ // get length int ch; int len = 0; int read = 0; while((ch = br.read()) != -1){ read++; if (ch == ' '){ // End of length string"
      },
      {
        "txt": "StringBuffer sb = new StringBuffer(); while((ch = br.read()) != -1){ read++; if (ch == '='){ // end of keyword String keyword = sb.toString(); char[] cbuf = new char[len-read]; int got = br.read(cbuf); if (got != len - read){ throw new IOException(\"Failed to read \" + \"Paxheader. Expected \""
      },
      {
        "txt": "+ (len - read) + \" chars, read \" + got); } String value = new String(cbuf, 0, len - read - 1); headers.put(keyword, value); break; } sb.append((char) ch);"
      },
      {
        "txt": "} break; // Processed single header } len *= 10; len += ch - '0'; } if (ch == -1){ // EOF break; } }"
      },
      {
        "txt": "return headers; } private void applyPaxHeadersToCurrentEntry(Map<String, String> headers) { for (Entry<String, String> ent : headers.entrySet()){ String key = ent.getKey(); String val = ent.getValue(); if (\"path\".equals(key)){ currEntry.setName(val); } else if (\"linkpath\".equals(key)){ currEntry.setLinkName(val);"
      },
      {
        "txt": "} else if (\"gid\".equals(key)){ currEntry.setGroupId(Integer.parseInt(val)); } else if (\"gname\".equals(key)){ currEntry.setGroupName(val); } else if (\"uid\".equals(key)){ currEntry.setUserId(Integer.parseInt(val)); } else if (\"uname\".equals(key)){ currEntry.setUserName(val); } else if (\"size\".equals(key)){ currEntry.setSize(Long.parseLong(val));"
      },
      {
        "txt": "} } } private void readGNUSparse() throws IOException { sparses = new ArrayList(); sparses.addAll(currEntry.getSparses()); if (currEntry.isExtended()) { TarArchiveSparseEntry entry; do { byte[] headerBuf = getRecord();"
      },
      {
        "txt": "if (hasHitEOF) { currEntry = null; break; } entry = new TarArchiveSparseEntry(headerBuf); sparses.addAll(entry.getSparses()); } while (entry.isExtended()); } } @Override"
      },
      {
        "txt": "public ArchiveEntry getNextEntry() throws IOException { return getNextTarEntry(); } @Override public int read(byte[] buf, int offset, int numToRead) throws IOException { int totalRead = 0; if (entryOffset >= entrySize) { return -1; } if ((numToRead + entryOffset) > entrySize) {"
      },
      {
        "txt": "numToRead = (int) (entrySize - entryOffset); } if (readBuf != null) { int sz = (numToRead > readBuf.length) ? readBuf.length : numToRead; System.arraycopy(readBuf, 0, buf, offset, sz); if (sz >= readBuf.length) { readBuf = null; } else { int newLen = readBuf.length - sz;"
      },
      {
        "txt": "byte[] newBuf = new byte[newLen]; System.arraycopy(readBuf, sz, newBuf, 0, newLen); readBuf = newBuf; } totalRead += sz; numToRead -= sz; offset += sz; } while (numToRead > 0) { byte[] rec = buffer.readRecord();"
      },
      {
        "txt": "if (rec == null) { throw new IOException(\"unexpected EOF with \" + numToRead + \" bytes unread. Occured at byte: \" + getBytesRead()); } count(rec.length); int sz = numToRead; int recLen = rec.length; if (recLen > sz) { System.arraycopy(rec, 0, buf, offset, sz); readBuf = new byte[recLen - sz];"
      },
      {
        "txt": "System.arraycopy(rec, sz, readBuf, 0, recLen - sz); } else { sz = recLen; System.arraycopy(rec, 0, buf, offset, recLen); } totalRead += sz; numToRead -= sz; offset += sz; } entryOffset += totalRead;"
      },
      {
        "txt": "return totalRead; } @Override public boolean canReadEntryData(ArchiveEntry ae) { if (ae instanceof TarArchiveEntry) { TarArchiveEntry te = (TarArchiveEntry) ae; return !te.isGNUSparse(); } return false; }"
      },
      {
        "txt": "protected final TarArchiveEntry getCurrentEntry() { return currEntry; } protected final void setCurrentEntry(TarArchiveEntry e) { currEntry = e; } protected final boolean isAtEOF() { return hasHitEOF; } protected final void setAtEOF(boolean b) {"
      },
      {
        "txt": "hasHitEOF = b; } public static boolean matches(byte[] signature, int length) { if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN) { return false; } if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX,"
      },
      {
        "txt": "signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) ){ return true; } if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) && ( ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)"
      },
      {
        "txt": "|| ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) ) ){ return true; } if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_ANT, signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN) &&"
      },
      {
        "txt": "ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_ANT, signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN) ){ return true; } return false; }"
      }
    ]
  }
]
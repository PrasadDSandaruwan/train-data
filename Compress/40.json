[
  {
    "id": 1101,
    "file_path": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "start-bug-line": 85,
    "end-bug-line": 85,
    "bug": "while (bitsCachedSize < count) {",
    "fix": "while (bitsCachedSize < count && bitsCachedSize < 57) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.nio.ByteOrder; public class BitInputStream implements Closeable {"
      },
      {
        "txt": "private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1]; static { for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) { MASKS[i] = (MASKS[i - 1] << 1) + 1; } } private final InputStream in; private final ByteOrder byteOrder; private long bitsCached = 0;"
      },
      {
        "txt": "private int bitsCachedSize = 0; public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder; } @Override public void close() throws IOException { in.close(); } public void clearBitCache() {"
      },
      {
        "txt": "bitsCachedSize = 0; } public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE); } <extra_id_0> final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize);"
      },
      {
        "txt": "if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) {"
      },
      {
        "txt": "bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; }"
      }
    ]
  },
  {
    "id": 1102,
    "file_path": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "start-bug-line": 98,
    "end-bug-line": 98,
    "bug": "",
    "fix": "int overflowBits = 0; long overflow = 0l; if (bitsCachedSize < count) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.nio.ByteOrder; public class BitInputStream implements Closeable { private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1]; static {"
      },
      {
        "txt": "for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) { MASKS[i] = (MASKS[i - 1] << 1) + 1; } } private final InputStream in; private final ByteOrder byteOrder; private long bitsCached = 0; private int bitsCachedSize = 0; public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in;"
      },
      {
        "txt": "this.byteOrder = byteOrder; } @Override public void close() throws IOException { in.close(); } public void clearBitCache() { bitsCached = 0; bitsCachedSize = 0; }"
      },
      {
        "txt": "public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) {"
      },
      {
        "txt": "} else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } <extra_id_0> final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];"
      },
      {
        "txt": "} else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; }"
      }
    ]
  },
  {
    "id": 1103,
    "file_path": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "start-bug-line": 99,
    "end-bug-line": 99,
    "bug": "",
    "fix": "int bitsToAddCount = count - bitsCachedSize; overflowBits = 8 - bitsToAddCount; final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { long bitsToAdd = nextByte & MASKS[bitsToAddCount]; bitsCached |= (bitsToAdd << bitsCachedSize); overflow = (nextByte >>> bitsToAddCount) & MASKS[overflowBits]; } else { bitsCached <<= bitsToAddCount; long bitsToAdd = (nextByte >>> (overflowBits)) & MASKS[bitsToAddCount]; bitsCached |= bitsToAdd; overflow = nextByte & MASKS[overflowBits]; } bitsCachedSize = count; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.nio.ByteOrder; public class BitInputStream implements Closeable { private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1]; static {"
      },
      {
        "txt": "for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) { MASKS[i] = (MASKS[i - 1] << 1) + 1; } } private final InputStream in; private final ByteOrder byteOrder; private long bitsCached = 0; private int bitsCachedSize = 0; public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in;"
      },
      {
        "txt": "this.byteOrder = byteOrder; } @Override public void close() throws IOException { in.close(); } public void clearBitCache() { bitsCached = 0; bitsCachedSize = 0; }"
      },
      {
        "txt": "public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) {"
      },
      {
        "txt": "} else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } <extra_id_0> final long bitsOut; if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];"
      },
      {
        "txt": "} else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; return bitsOut; }"
      }
    ]
  },
  {
    "id": 1104,
    "file_path": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "start-bug-line": 101,
    "end-bug-line": 101,
    "bug": "",
    "fix": "if (overflowBits == 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.nio.ByteOrder; public class BitInputStream implements Closeable { private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1]; static { for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) {"
      },
      {
        "txt": "MASKS[i] = (MASKS[i - 1] << 1) + 1; } } private final InputStream in; private final ByteOrder byteOrder; private long bitsCached = 0; private int bitsCachedSize = 0; public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder;"
      },
      {
        "txt": "} @Override public void close() throws IOException { in.close(); } public void clearBitCache() { bitsCached = 0; bitsCachedSize = 0; } public long readBits(final int count) throws IOException {"
      },
      {
        "txt": "if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte; } if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize);"
      },
      {
        "txt": "bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } final long bitsOut; <extra_id_0> bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count;"
      },
      {
        "txt": "} bitsCachedSize -= count; return bitsOut; }"
      }
    ]
  },
  {
    "id": 1105,
    "file_path": "src/main/java/org/apache/commons/compress/utils/BitInputStream.java",
    "start-bug-line": 108,
    "end-bug-line": 108,
    "bug": "",
    "fix": "} else { bitsOut = bitsCached & MASKS[count]; bitsCached = overflow; bitsCachedSize = overflowBits; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.Closeable; import java.io.IOException; import java.io.InputStream; import java.nio.ByteOrder; public class BitInputStream implements Closeable { private static final int MAXIMUM_CACHE_SIZE = 63; // bits in long minus sign bit"
      },
      {
        "txt": "private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1]; static { for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) { MASKS[i] = (MASKS[i - 1] << 1) + 1; } } private final InputStream in; private final ByteOrder byteOrder; private long bitsCached = 0; private int bitsCachedSize = 0;"
      },
      {
        "txt": "public BitInputStream(final InputStream in, final ByteOrder byteOrder) { this.in = in; this.byteOrder = byteOrder; } @Override public void close() throws IOException { in.close(); } public void clearBitCache() { bitsCached = 0;"
      },
      {
        "txt": "bitsCachedSize = 0; } public long readBits(final int count) throws IOException { if (count < 0 || count > MAXIMUM_CACHE_SIZE) { throw new IllegalArgumentException(\"count must not be negative or greater than \" + MAXIMUM_CACHE_SIZE); } while (bitsCachedSize < count) { final long nextByte = in.read(); if (nextByte < 0) { return nextByte;"
      },
      {
        "txt": "} if (byteOrder == ByteOrder.LITTLE_ENDIAN) { bitsCached |= (nextByte << bitsCachedSize); } else { bitsCached <<= 8; bitsCached |= nextByte; } bitsCachedSize += 8; } final long bitsOut;"
      },
      {
        "txt": "bitsOut = (bitsCached & MASKS[count]); bitsCached >>>= count; } else { bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count]; } bitsCachedSize -= count; <extra_id_0> } }"
      }
    ]
  }
]
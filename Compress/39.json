[
  {
    "id": 1099,
    "file_path": "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
    "start-bug-line": 31,
    "end-bug-line": 31,
    "bug": "",
    "fix": "private static final int MAX_SANITIZED_NAME_LENGTH = 255;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.UnsupportedEncodingException; import java.util.Arrays; import org.apache.commons.compress.archivers.ArchiveEntry; public class ArchiveUtils { <extra_id_0> private ArchiveUtils(){ } public static String toString(final ArchiveEntry entry){ final StringBuilder sb = new StringBuilder(); sb.append(entry.isDirectory()? 'd' : '-');// c.f. \"ls -l\" output final String size = Long.toString(entry.getSize());"
      },
      {
        "txt": "sb.append(entry.isDirectory()? 'd' : '-');// c.f. \"ls -l\" output final String size = Long.toString(entry.getSize()); sb.append(' '); for(int i=7; i > size.length(); i--){ sb.append(' '); } sb.append(size); sb.append(' ').append(entry.getName()); return sb.toString(); }"
      },
      {
        "txt": "public static boolean matchAsciiBuffer( final String expected, final byte[] buffer, final int offset, final int length){ byte[] buffer1; try { buffer1 = expected.getBytes(CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should not happen } return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false); }"
      },
      {
        "txt": "public static boolean matchAsciiBuffer(final String expected, final byte[] buffer){ return matchAsciiBuffer(expected, buffer, 0, buffer.length); } public static byte[] toAsciiBytes(final String inputString){ try { return inputString.getBytes(CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen } }"
      },
      {
        "txt": "public static String toAsciiString(final byte[] inputBytes){ try { return new String(inputBytes, CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen } } public static String toAsciiString(final byte[] inputBytes, final int offset, final int length){ try { return new String(inputBytes, offset, length, CharsetNames.US_ASCII);"
      },
      {
        "txt": "} catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen } } public static boolean isEqual( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2, final boolean ignoreTrailingNulls){ final int minLen=length1 < length2 ? length1 : length2; for (int i=0; i < minLen; i++){"
      },
      {
        "txt": "if (buffer1[offset1+i] != buffer2[offset2+i]){ return false; } } if (length1 == length2){ return true; } if (ignoreTrailingNulls){ if (length1 > length2){ for(int i = length2; i < length1; i++){"
      },
      {
        "txt": "if (buffer1[offset1+i] != 0){ return false; } } } else { for(int i = length1; i < length2; i++){ if (buffer2[offset2+i] != 0){ return false; } }"
      },
      {
        "txt": "} return true; } return false; } public static boolean isEqual( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2){ return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false); }"
      },
      {
        "txt": "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2 ){ return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false); } public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls){ return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls); } public static boolean isEqualWithNull( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2){ return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true);"
      },
      {
        "txt": "} public static boolean isArrayZero(final byte[] a, final int size) { for (int i = 0; i < size; i++) { if (a[i] != 0) { return false; } } return true; } public static String sanitize(String s) {"
      },
      {
        "txt": "final char[] chars = s.toCharArray(); final int len = chars.length; final StringBuilder sb = new StringBuilder(); for (int i = 0; i < len; i++) { final char c = chars[i]; if (!Character.isISOControl(c)) { Character.UnicodeBlock block = Character.UnicodeBlock.of(c); if (block != null && block != Character.UnicodeBlock.SPECIALS) { sb.append(c); continue;"
      },
      {
        "txt": "} } sb.append('?'); } return sb.toString(); }"
      }
    ]
  },
  {
    "id": 1100,
    "file_path": "src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java",
    "start-bug-line": 273,
    "end-bug-line": 273,
    "bug": "final char[] chars = s.toCharArray();",
    "fix": "final char[] cs = s.toCharArray(); final char[] chars = cs.length <= MAX_SANITIZED_NAME_LENGTH ? cs : Arrays.copyOf(cs, MAX_SANITIZED_NAME_LENGTH); if (cs.length > MAX_SANITIZED_NAME_LENGTH) { for (int i = MAX_SANITIZED_NAME_LENGTH - 3; i < MAX_SANITIZED_NAME_LENGTH; i++) { chars[i] = '.'; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.utils; import java.io.UnsupportedEncodingException;"
      },
      {
        "txt": "import java.util.Arrays; import org.apache.commons.compress.archivers.ArchiveEntry; public class ArchiveUtils { private ArchiveUtils(){ } public static String toString(final ArchiveEntry entry){ final StringBuilder sb = new StringBuilder(); sb.append(entry.isDirectory()? 'd' : '-');// c.f. \"ls -l\" output final String size = Long.toString(entry.getSize()); sb.append(' ');"
      },
      {
        "txt": "for(int i=7; i > size.length(); i--){ sb.append(' '); } sb.append(size); sb.append(' ').append(entry.getName()); return sb.toString(); } public static boolean matchAsciiBuffer( final String expected, final byte[] buffer, final int offset, final int length){ byte[] buffer1;"
      },
      {
        "txt": "try { buffer1 = expected.getBytes(CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should not happen } return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false); } public static boolean matchAsciiBuffer(final String expected, final byte[] buffer){ return matchAsciiBuffer(expected, buffer, 0, buffer.length); }"
      },
      {
        "txt": "public static byte[] toAsciiBytes(final String inputString){ try { return inputString.getBytes(CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen } } public static String toAsciiString(final byte[] inputBytes){ try { return new String(inputBytes, CharsetNames.US_ASCII);"
      },
      {
        "txt": "} catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen } } public static String toAsciiString(final byte[] inputBytes, final int offset, final int length){ try { return new String(inputBytes, offset, length, CharsetNames.US_ASCII); } catch (final UnsupportedEncodingException e) { throw new RuntimeException(e); // Should never happen }"
      },
      {
        "txt": "} public static boolean isEqual( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2, final boolean ignoreTrailingNulls){ final int minLen=length1 < length2 ? length1 : length2; for (int i=0; i < minLen; i++){ if (buffer1[offset1+i] != buffer2[offset2+i]){ return false; }"
      },
      {
        "txt": "} if (length1 == length2){ return true; } if (ignoreTrailingNulls){ if (length1 > length2){ for(int i = length2; i < length1; i++){ if (buffer1[offset1+i] != 0){ return false; }"
      },
      {
        "txt": "} } else { for(int i = length1; i < length2; i++){ if (buffer2[offset2+i] != 0){ return false; } } } return true; }"
      },
      {
        "txt": "return false; } public static boolean isEqual( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2){ return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, false); } public static boolean isEqual(final byte[] buffer1, final byte[] buffer2 ){ return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, false); }"
      },
      {
        "txt": "public static boolean isEqual(final byte[] buffer1, final byte[] buffer2, final boolean ignoreTrailingNulls){ return isEqual(buffer1, 0, buffer1.length, buffer2, 0, buffer2.length, ignoreTrailingNulls); } public static boolean isEqualWithNull( final byte[] buffer1, final int offset1, final int length1, final byte[] buffer2, final int offset2, final int length2){ return isEqual(buffer1, offset1, length1, buffer2, offset2, length2, true); } public static boolean isArrayZero(final byte[] a, final int size) { for (int i = 0; i < size; i++) {"
      },
      {
        "txt": "return false; } } return true; } public static String sanitize(String s) { <extra_id_0> final int len = chars.length; final StringBuilder sb = new StringBuilder(); for (int i = 0; i < len; i++) { final char c = chars[i]; if (!Character.isISOControl(c)) { Character.UnicodeBlock block = Character.UnicodeBlock.of(c);"
      },
      {
        "txt": "if (!Character.isISOControl(c)) { Character.UnicodeBlock block = Character.UnicodeBlock.of(c); if (block != null && block != Character.UnicodeBlock.SPECIALS) { sb.append(c); continue; } } sb.append('?'); } return sb.toString();"
      }
    ]
  }
]
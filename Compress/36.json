[
  {
    "id": 1096,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java",
    "start-bug-line": 902,
    "end-bug-line": 902,
    "bug": "",
    "fix": "if (archive.files[currentEntryIndex].getSize() == 0) { return new ByteArrayInputStream(new byte[0]); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.BufferedInputStream; import java.io.ByteArrayInputStream; import java.io.Closeable; import java.io.DataInput; import java.io.DataInputStream; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.RandomAccessFile; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.BitSet; import java.util.LinkedList; import java.util.zip.CRC32; import org.apache.commons.compress.utils.BoundedInputStream; import org.apache.commons.compress.utils.CRC32VerifyingInputStream; import org.apache.commons.compress.utils.CharsetNames; import org.apache.commons.compress.utils.IOUtils; public class SevenZFile implements Closeable { static final int SIGNATURE_HEADER_SIZE = 32;"
      },
      {
        "txt": "private final String fileName; private RandomAccessFile file; private final Archive archive; private int currentEntryIndex = -1; private int currentFolderIndex = -1; private InputStream currentFolderInputStream = null; private byte[] password; private final ArrayList<InputStream> deferredBlockStreams = new ArrayList<InputStream>(); static final byte[] sevenZSignature = { (byte)'7', (byte)'z', (byte)0xBC, (byte)0xAF, (byte)0x27, (byte)0x1C"
      },
      {
        "txt": "}; public SevenZFile(final File filename, final byte[] password) throws IOException { boolean succeeded = false; this.file = new RandomAccessFile(filename, \"r\"); this.fileName = filename.getAbsolutePath(); try { archive = readHeaders(password); if (password != null) { this.password = new byte[password.length]; System.arraycopy(password, 0, this.password, 0, password.length);"
      },
      {
        "txt": "} else { this.password = null; } succeeded = true; } finally { if (!succeeded) { this.file.close(); } } }"
      },
      {
        "txt": "public SevenZFile(final File filename) throws IOException { this(filename, null); } @Override public void close() throws IOException { if (file != null) { try { file.close(); } finally { file = null;"
      },
      {
        "txt": "if (password != null) { Arrays.fill(password, (byte) 0); } password = null; } } } public SevenZArchiveEntry getNextEntry() throws IOException { if (currentEntryIndex >= archive.files.length - 1) { return null;"
      },
      {
        "txt": "} ++currentEntryIndex; final SevenZArchiveEntry entry = archive.files[currentEntryIndex]; buildDecodingStream(); return entry; } public Iterable<SevenZArchiveEntry> getEntries() { return Arrays.asList(archive.files); } private Archive readHeaders(final byte[] password) throws IOException {"
      },
      {
        "txt": "final byte[] signature = new byte[6]; file.readFully(signature); if (!Arrays.equals(signature, sevenZSignature)) { throw new IOException(\"Bad 7z signature\"); } final byte archiveVersionMajor = file.readByte(); final byte archiveVersionMinor = file.readByte(); if (archiveVersionMajor != 0) { throw new IOException(String.format(\"Unsupported 7z version (%d,%d)\", archiveVersionMajor, archiveVersionMinor));"
      },
      {
        "txt": "} final long startHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(file.readInt()); final StartHeader startHeader = readStartHeader(startHeaderCrc); final int nextHeaderSizeInt = (int) startHeader.nextHeaderSize; if (nextHeaderSizeInt != startHeader.nextHeaderSize) { throw new IOException(\"cannot handle nextHeaderSize \" + startHeader.nextHeaderSize); } file.seek(SIGNATURE_HEADER_SIZE + startHeader.nextHeaderOffset); final byte[] nextHeader = new byte[nextHeaderSizeInt]; file.readFully(nextHeader);"
      },
      {
        "txt": "final CRC32 crc = new CRC32(); crc.update(nextHeader); if (startHeader.nextHeaderCrc != crc.getValue()) { throw new IOException(\"NextHeader CRC mismatch\"); } final ByteArrayInputStream byteStream = new ByteArrayInputStream(nextHeader); DataInputStream nextHeaderInputStream = new DataInputStream( byteStream); Archive archive = new Archive(); int nid = nextHeaderInputStream.readUnsignedByte();"
      },
      {
        "txt": "if (nid == NID.kEncodedHeader) { nextHeaderInputStream = readEncodedHeader(nextHeaderInputStream, archive, password); archive = new Archive(); nid = nextHeaderInputStream.readUnsignedByte(); } if (nid == NID.kHeader) { readHeader(nextHeaderInputStream, archive); nextHeaderInputStream.close(); } else {"
      },
      {
        "txt": "throw new IOException(\"Broken or unsupported archive: no Header\"); } return archive; } private StartHeader readStartHeader(final long startHeaderCrc) throws IOException { final StartHeader startHeader = new StartHeader(); DataInputStream dataInputStream = null; try { dataInputStream = new DataInputStream(new CRC32VerifyingInputStream( new BoundedRandomAccessFileInputStream(file, 20), 20, startHeaderCrc));"
      },
      {
        "txt": "startHeader.nextHeaderOffset = Long.reverseBytes(dataInputStream.readLong()); startHeader.nextHeaderSize = Long.reverseBytes(dataInputStream.readLong()); startHeader.nextHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(dataInputStream.readInt()); return startHeader; } finally { if (dataInputStream != null) { dataInputStream.close(); } } }"
      },
      {
        "txt": "private void readHeader(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kArchiveProperties) { readArchiveProperties(header); nid = header.readUnsignedByte(); } if (nid == NID.kAdditionalStreamsInfo) { throw new IOException(\"Additional streams unsupported\"); } if (nid == NID.kMainStreamsInfo) {"
      },
      {
        "txt": "readStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kFilesInfo) { readFilesInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException(\"Badly terminated header, found \" + nid); }"
      },
      {
        "txt": "} private void readArchiveProperties(final DataInput input) throws IOException { int nid = input.readUnsignedByte(); while (nid != NID.kEnd) { final long propertySize = readUint64(input); final byte[] property = new byte[(int)propertySize]; input.readFully(property); nid = input.readUnsignedByte(); } }"
      },
      {
        "txt": "private DataInputStream readEncodedHeader(final DataInputStream header, final Archive archive, final byte[] password) throws IOException { readStreamsInfo(header, archive); final Folder folder = archive.folders[0]; final int firstPackStreamIndex = 0; final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos + 0; file.seek(folderOffset); InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file, archive.packSizes[firstPackStreamIndex]);"
      },
      {
        "txt": "for (final Coder coder : folder.getOrderedCoders()) { if (coder.numInStreams != 1 || coder.numOutStreams != 1) { throw new IOException(\"Multi input/output stream coders are not yet supported\"); } inputStreamStack = Coders.addDecoder(fileName, inputStreamStack, folder.getUnpackSizeForCoder(coder), coder, password); } if (folder.hasCrc) { inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack, folder.getUnpackSize(), folder.crc);"
      },
      {
        "txt": "} final byte[] nextHeader = new byte[(int)folder.getUnpackSize()]; final DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack); try { nextHeaderInputStream.readFully(nextHeader); } finally { nextHeaderInputStream.close(); } return new DataInputStream(new ByteArrayInputStream(nextHeader)); }"
      },
      {
        "txt": "private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid == NID.kPackInfo) { readPackInfo(header, archive); nid = header.readUnsignedByte(); } if (nid == NID.kUnpackInfo) { readUnpackInfo(header, archive); nid = header.readUnsignedByte(); } else {"
      },
      {
        "txt": "archive.folders = new Folder[0]; } if (nid == NID.kSubStreamsInfo) { readSubStreamsInfo(header, archive); nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException(\"Badly terminated StreamsInfo\"); } }"
      },
      {
        "txt": "private void readPackInfo(final DataInput header, final Archive archive) throws IOException { archive.packPos = readUint64(header); final long numPackStreams = readUint64(header); int nid = header.readUnsignedByte(); if (nid == NID.kSize) { archive.packSizes = new long[(int)numPackStreams]; for (int i = 0; i < archive.packSizes.length; i++) { archive.packSizes[i] = readUint64(header); } nid = header.readUnsignedByte();"
      },
      {
        "txt": "} if (nid == NID.kCRC) { archive.packCrcsDefined = readAllOrBits(header, (int)numPackStreams); archive.packCrcs = new long[(int)numPackStreams]; for (int i = 0; i < (int)numPackStreams; i++) { if (archive.packCrcsDefined.get(i)) { archive.packCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } nid = header.readUnsignedByte();"
      },
      {
        "txt": "} if (nid != NID.kEnd) { throw new IOException(\"Badly terminated PackInfo (\" + nid + \")\"); } } private void readUnpackInfo(final DataInput header, final Archive archive) throws IOException { int nid = header.readUnsignedByte(); if (nid != NID.kFolder) { throw new IOException(\"Expected kFolder, got \" + nid); }"
      },
      {
        "txt": "final long numFolders = readUint64(header); final Folder[] folders = new Folder[(int)numFolders]; archive.folders = folders; final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException(\"External unsupported\"); } for (int i = 0; i < (int)numFolders; i++) { folders[i] = readFolder(header); }"
      },
      {
        "txt": "nid = header.readUnsignedByte(); if (nid != NID.kCodersUnpackSize) { throw new IOException(\"Expected kCodersUnpackSize, got \" + nid); } for (final Folder folder : folders) { folder.unpackSizes = new long[(int)folder.totalOutputStreams]; for (int i = 0; i < folder.totalOutputStreams; i++) { folder.unpackSizes[i] = readUint64(header); } }"
      },
      {
        "txt": "nid = header.readUnsignedByte(); if (nid == NID.kCRC) { final BitSet crcsDefined = readAllOrBits(header, (int)numFolders); for (int i = 0; i < (int)numFolders; i++) { if (crcsDefined.get(i)) { folders[i].hasCrc = true; folders[i].crc = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } else { folders[i].hasCrc = false; }"
      },
      {
        "txt": "} nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException(\"Badly terminated UnpackInfo\"); } } private void readSubStreamsInfo(final DataInput header, final Archive archive) throws IOException { for (final Folder folder : archive.folders) { folder.numUnpackSubStreams = 1;"
      },
      {
        "txt": "} int totalUnpackStreams = archive.folders.length; int nid = header.readUnsignedByte(); if (nid == NID.kNumUnpackStream) { totalUnpackStreams = 0; for (final Folder folder : archive.folders) { final long numStreams = readUint64(header); folder.numUnpackSubStreams = (int)numStreams; totalUnpackStreams += numStreams; }"
      },
      {
        "txt": "nid = header.readUnsignedByte(); } final SubStreamsInfo subStreamsInfo = new SubStreamsInfo(); subStreamsInfo.unpackSizes = new long[totalUnpackStreams]; subStreamsInfo.hasCrc = new BitSet(totalUnpackStreams); subStreamsInfo.crcs = new long[totalUnpackStreams]; int nextUnpackStream = 0; for (final Folder folder : archive.folders) { if (folder.numUnpackSubStreams == 0) { continue;"
      },
      {
        "txt": "} long sum = 0; if (nid == NID.kSize) { for (int i = 0; i < folder.numUnpackSubStreams - 1; i++) { final long size = readUint64(header); subStreamsInfo.unpackSizes[nextUnpackStream++] = size; sum += size; } } subStreamsInfo.unpackSizes[nextUnpackStream++] = folder.getUnpackSize() - sum;"
      },
      {
        "txt": "} if (nid == NID.kSize) { nid = header.readUnsignedByte(); } int numDigests = 0; for (final Folder folder : archive.folders) { if (folder.numUnpackSubStreams != 1 || !folder.hasCrc) { numDigests += folder.numUnpackSubStreams; } }"
      },
      {
        "txt": "if (nid == NID.kCRC) { final BitSet hasMissingCrc = readAllOrBits(header, numDigests); final long[] missingCrcs = new long[numDigests]; for (int i = 0; i < numDigests; i++) { if (hasMissingCrc.get(i)) { missingCrcs[i] = 0xffffFFFFL & Integer.reverseBytes(header.readInt()); } } int nextCrc = 0; int nextMissingCrc = 0;"
      },
      {
        "txt": "for (final Folder folder: archive.folders) { if (folder.numUnpackSubStreams == 1 && folder.hasCrc) { subStreamsInfo.hasCrc.set(nextCrc, true); subStreamsInfo.crcs[nextCrc] = folder.crc; ++nextCrc; } else { for (int i = 0; i < folder.numUnpackSubStreams; i++) { subStreamsInfo.hasCrc.set(nextCrc, hasMissingCrc.get(nextMissingCrc)); subStreamsInfo.crcs[nextCrc] = missingCrcs[nextMissingCrc]; ++nextCrc;"
      },
      {
        "txt": "++nextMissingCrc; } } } nid = header.readUnsignedByte(); } if (nid != NID.kEnd) { throw new IOException(\"Badly terminated SubStreamsInfo\"); } archive.subStreamsInfo = subStreamsInfo;"
      },
      {
        "txt": "} private Folder readFolder(final DataInput header) throws IOException { final Folder folder = new Folder(); final long numCoders = readUint64(header); final Coder[] coders = new Coder[(int)numCoders]; long totalInStreams = 0; long totalOutStreams = 0; for (int i = 0; i < coders.length; i++) { coders[i] = new Coder(); final int bits = header.readUnsignedByte();"
      },
      {
        "txt": "final int idSize = bits & 0xf; final boolean isSimple = (bits & 0x10) == 0; final boolean hasAttributes = (bits & 0x20) != 0; final boolean moreAlternativeMethods = (bits & 0x80) != 0; coders[i].decompressionMethodId = new byte[idSize]; header.readFully(coders[i].decompressionMethodId); if (isSimple) { coders[i].numInStreams = 1; coders[i].numOutStreams = 1; } else {"
      },
      {
        "txt": "coders[i].numInStreams = readUint64(header); coders[i].numOutStreams = readUint64(header); } totalInStreams += coders[i].numInStreams; totalOutStreams += coders[i].numOutStreams; if (hasAttributes) { final long propertiesSize = readUint64(header); coders[i].properties = new byte[(int)propertiesSize]; header.readFully(coders[i].properties); }"
      },
      {
        "txt": "while (moreAlternativeMethods) { throw new IOException(\"Alternative methods are unsupported, please report. \" + \"The reference implementation doesn't support them either.\"); } } folder.coders = coders; folder.totalInputStreams = totalInStreams; folder.totalOutputStreams = totalOutStreams; if (totalOutStreams == 0) { throw new IOException(\"Total output streams can't be 0\");"
      },
      {
        "txt": "} final long numBindPairs = totalOutStreams - 1; final BindPair[] bindPairs = new BindPair[(int)numBindPairs]; for (int i = 0; i < bindPairs.length; i++) { bindPairs[i] = new BindPair(); bindPairs[i].inIndex = readUint64(header); bindPairs[i].outIndex = readUint64(header); } folder.bindPairs = bindPairs; if (totalInStreams < numBindPairs) {"
      },
      {
        "txt": "throw new IOException(\"Total input streams can't be less than the number of bind pairs\"); } final long numPackedStreams = totalInStreams - numBindPairs; final long packedStreams[] = new long[(int)numPackedStreams]; if (numPackedStreams == 1) { int i; for (i = 0; i < (int)totalInStreams; i++) { if (folder.findBindPairForInStream(i) < 0) { break; }"
      },
      {
        "txt": "} if (i == (int)totalInStreams) { throw new IOException(\"Couldn't find stream's bind pair index\"); } packedStreams[0] = i; } else { for (int i = 0; i < (int)numPackedStreams; i++) { packedStreams[i] = readUint64(header); } }"
      },
      {
        "txt": "folder.packedStreams = packedStreams; return folder; } private BitSet readAllOrBits(final DataInput header, final int size) throws IOException { final int areAllDefined = header.readUnsignedByte(); final BitSet bits; if (areAllDefined != 0) { bits = new BitSet(size); for (int i = 0; i < size; i++) { bits.set(i, true);"
      },
      {
        "txt": "} } else { bits = readBits(header, size); } return bits; } private BitSet readBits(final DataInput header, final int size) throws IOException { final BitSet bits = new BitSet(size); int mask = 0; int cache = 0;"
      },
      {
        "txt": "for (int i = 0; i < size; i++) { if (mask == 0) { mask = 0x80; cache = header.readUnsignedByte(); } bits.set(i, (cache & mask) != 0); mask >>>= 1; } return bits; }"
      },
      {
        "txt": "private void readFilesInfo(final DataInput header, final Archive archive) throws IOException { final long numFiles = readUint64(header); final SevenZArchiveEntry[] files = new SevenZArchiveEntry[(int)numFiles]; for (int i = 0; i < files.length; i++) { files[i] = new SevenZArchiveEntry(); } BitSet isEmptyStream = null; BitSet isEmptyFile = null; BitSet isAnti = null; while (true) {"
      },
      {
        "txt": "final int propertyType = header.readUnsignedByte(); if (propertyType == 0) { break; } final long size = readUint64(header); switch (propertyType) { case NID.kEmptyStream: { isEmptyStream = readBits(header, files.length); break; }"
      },
      {
        "txt": "case NID.kEmptyFile: { if (isEmptyStream == null) { // protect against NPE throw new IOException(\"Header format error: kEmptyStream must appear before kEmptyFile\"); } isEmptyFile = readBits(header, isEmptyStream.cardinality()); break; } case NID.kAnti: { if (isEmptyStream == null) { // protect against NPE throw new IOException(\"Header format error: kEmptyStream must appear before kAnti\");"
      },
      {
        "txt": "} isAnti = readBits(header, isEmptyStream.cardinality()); break; } case NID.kName: { final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException(\"Not implemented\"); } if (((size - 1) & 1) != 0) {"
      },
      {
        "txt": "throw new IOException(\"File names length invalid\"); } final byte[] names = new byte[(int)(size - 1)]; header.readFully(names); int nextFile = 0; int nextName = 0; for (int i = 0; i < names.length; i += 2) { if (names[i] == 0 && names[i+1] == 0) { files[nextFile++].setName(new String(names, nextName, i-nextName, CharsetNames.UTF_16LE)); nextName = i + 2;"
      },
      {
        "txt": "} } if (nextName != names.length || nextFile != files.length) { throw new IOException(\"Error parsing file names\"); } break; } case NID.kCTime: { final BitSet timesDefined = readAllOrBits(header, files.length); final int external = header.readUnsignedByte();"
      },
      {
        "txt": "if (external != 0) { throw new IOException(\"Unimplemented\"); } for (int i = 0; i < files.length; i++) { files[i].setHasCreationDate(timesDefined.get(i)); if (files[i].getHasCreationDate()) { files[i].setCreationDate(Long.reverseBytes(header.readLong())); } } break;"
      },
      {
        "txt": "} case NID.kATime: { final BitSet timesDefined = readAllOrBits(header, files.length); final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException(\"Unimplemented\"); } for (int i = 0; i < files.length; i++) { files[i].setHasAccessDate(timesDefined.get(i)); if (files[i].getHasAccessDate()) {"
      },
      {
        "txt": "files[i].setAccessDate(Long.reverseBytes(header.readLong())); } } break; } case NID.kMTime: { final BitSet timesDefined = readAllOrBits(header, files.length); final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException(\"Unimplemented\");"
      },
      {
        "txt": "} for (int i = 0; i < files.length; i++) { files[i].setHasLastModifiedDate(timesDefined.get(i)); if (files[i].getHasLastModifiedDate()) { files[i].setLastModifiedDate(Long.reverseBytes(header.readLong())); } } break; } case NID.kWinAttributes: {"
      },
      {
        "txt": "final BitSet attributesDefined = readAllOrBits(header, files.length); final int external = header.readUnsignedByte(); if (external != 0) { throw new IOException(\"Unimplemented\"); } for (int i = 0; i < files.length; i++) { files[i].setHasWindowsAttributes(attributesDefined.get(i)); if (files[i].getHasWindowsAttributes()) { files[i].setWindowsAttributes(Integer.reverseBytes(header.readInt())); }"
      },
      {
        "txt": "} break; } case NID.kStartPos: { throw new IOException(\"kStartPos is unsupported, please report\"); } case NID.kDummy: { if (skipBytesFully(header, size) < size) { throw new IOException(\"Incomplete kDummy property\"); }"
      },
      {
        "txt": "break; } default: { if (skipBytesFully(header, size) < size) { throw new IOException(\"Incomplete property of type \" + propertyType); } break; } } }"
      },
      {
        "txt": "int nonEmptyFileCounter = 0; int emptyFileCounter = 0; for (int i = 0; i < files.length; i++) { files[i].setHasStream(isEmptyStream == null ? true : !isEmptyStream.get(i)); if (files[i].hasStream()) { files[i].setDirectory(false); files[i].setAntiItem(false); files[i].setHasCrc(archive.subStreamsInfo.hasCrc.get(nonEmptyFileCounter)); files[i].setCrcValue(archive.subStreamsInfo.crcs[nonEmptyFileCounter]); files[i].setSize(archive.subStreamsInfo.unpackSizes[nonEmptyFileCounter]);"
      },
      {
        "txt": "++nonEmptyFileCounter; } else { files[i].setDirectory(isEmptyFile == null ? true : !isEmptyFile.get(emptyFileCounter)); files[i].setAntiItem(isAnti == null ? false : isAnti.get(emptyFileCounter)); files[i].setHasCrc(false); files[i].setSize(0); ++emptyFileCounter; } } archive.files = files;"
      },
      {
        "txt": "calculateStreamMap(archive); } private void calculateStreamMap(final Archive archive) throws IOException { final StreamMap streamMap = new StreamMap(); int nextFolderPackStreamIndex = 0; final int numFolders = archive.folders != null ? archive.folders.length : 0; streamMap.folderFirstPackStreamIndex = new int[numFolders]; for (int i = 0; i < numFolders; i++) { streamMap.folderFirstPackStreamIndex[i] = nextFolderPackStreamIndex; nextFolderPackStreamIndex += archive.folders[i].packedStreams.length;"
      },
      {
        "txt": "} long nextPackStreamOffset = 0; final int numPackSizes = archive.packSizes != null ? archive.packSizes.length : 0; streamMap.packStreamOffsets = new long[numPackSizes]; for (int i = 0; i < numPackSizes; i++) { streamMap.packStreamOffsets[i] = nextPackStreamOffset; nextPackStreamOffset += archive.packSizes[i]; } streamMap.folderFirstFileIndex = new int[numFolders]; streamMap.fileFolderIndex = new int[archive.files.length];"
      },
      {
        "txt": "int nextFolderIndex = 0; int nextFolderUnpackStreamIndex = 0; for (int i = 0; i < archive.files.length; i++) { if (!archive.files[i].hasStream() && nextFolderUnpackStreamIndex == 0) { streamMap.fileFolderIndex[i] = -1; continue; } if (nextFolderUnpackStreamIndex == 0) { for (; nextFolderIndex < archive.folders.length; ++nextFolderIndex) { streamMap.folderFirstFileIndex[nextFolderIndex] = i;"
      },
      {
        "txt": "if (archive.folders[nextFolderIndex].numUnpackSubStreams > 0) { break; } } if (nextFolderIndex >= archive.folders.length) { throw new IOException(\"Too few folders in archive\"); } } streamMap.fileFolderIndex[i] = nextFolderIndex; if (!archive.files[i].hasStream()) {"
      },
      {
        "txt": "continue; } ++nextFolderUnpackStreamIndex; if (nextFolderUnpackStreamIndex >= archive.folders[nextFolderIndex].numUnpackSubStreams) { ++nextFolderIndex; nextFolderUnpackStreamIndex = 0; } } archive.streamMap = streamMap; }"
      },
      {
        "txt": "private void buildDecodingStream() throws IOException { final int folderIndex = archive.streamMap.fileFolderIndex[currentEntryIndex]; if (folderIndex < 0) { deferredBlockStreams.clear(); return; } final SevenZArchiveEntry file = archive.files[currentEntryIndex]; if (currentFolderIndex == folderIndex) { file.setContentMethods(archive.files[currentEntryIndex - 1].getContentMethods()); } else {"
      },
      {
        "txt": "currentFolderIndex = folderIndex; deferredBlockStreams.clear(); if (currentFolderInputStream != null) { currentFolderInputStream.close(); currentFolderInputStream = null; } final Folder folder = archive.folders[folderIndex]; final int firstPackStreamIndex = archive.streamMap.folderFirstPackStreamIndex[folderIndex]; final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos + archive.streamMap.packStreamOffsets[firstPackStreamIndex];"
      },
      {
        "txt": "currentFolderInputStream = buildDecoderStack(folder, folderOffset, firstPackStreamIndex, file); } InputStream fileStream = new BoundedInputStream(currentFolderInputStream, file.getSize()); if (file.getHasCrc()) { fileStream = new CRC32VerifyingInputStream(fileStream, file.getSize(), file.getCrcValue()); } deferredBlockStreams.add(fileStream); } private InputStream buildDecoderStack(final Folder folder, final long folderOffset, final int firstPackStreamIndex, final SevenZArchiveEntry entry) throws IOException {"
      },
      {
        "txt": "file.seek(folderOffset); InputStream inputStreamStack = new BufferedInputStream( new BoundedRandomAccessFileInputStream(file, archive.packSizes[firstPackStreamIndex])); final LinkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>(); for (final Coder coder : folder.getOrderedCoders()) { if (coder.numInStreams != 1 || coder.numOutStreams != 1) { throw new IOException(\"Multi input/output stream coders are not yet supported\"); }"
      },
      {
        "txt": "final SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId); inputStreamStack = Coders.addDecoder(fileName, inputStreamStack, folder.getUnpackSizeForCoder(coder), coder, password); methods.addFirst(new SevenZMethodConfiguration(method, Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack))); } entry.setContentMethods(methods); if (folder.hasCrc) { return new CRC32VerifyingInputStream(inputStreamStack, folder.getUnpackSize(), folder.crc);"
      },
      {
        "txt": "return inputStreamStack; } public int read() throws IOException { return getCurrentStream().read(); } private InputStream getCurrentStream() throws IOException { <extra_id_0> throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\"); } while (deferredBlockStreams.size() > 1) { final InputStream stream = deferredBlockStreams.remove(0); IOUtils.skip(stream, Long.MAX_VALUE); stream.close();"
      },
      {
        "txt": "IOUtils.skip(stream, Long.MAX_VALUE); stream.close(); } return deferredBlockStreams.get(0); } public int read(final byte[] b) throws IOException { return read(b, 0, b.length); } public int read(final byte[] b, final int off, final int len) throws IOException { return getCurrentStream().read(b, off, len);"
      },
      {
        "txt": "} private static long readUint64(final DataInput in) throws IOException { final long firstByte = in.readUnsignedByte(); int mask = 0x80; long value = 0; for (int i = 0; i < 8; i++) { if ((firstByte & mask) == 0) { return value | ((firstByte & (mask - 1)) << (8 * i)); } final long nextByte = in.readUnsignedByte();"
      },
      {
        "txt": "value |= nextByte << (8 * i); mask >>>= 1; } return value; } public static boolean matches(final byte[] signature, final int length) { if (length < sevenZSignature.length) { return false; } for (int i = 0; i < sevenZSignature.length; i++) {"
      },
      {
        "txt": "if (signature[i] != sevenZSignature[i]) { return false; } } return true; } private static long skipBytesFully(final DataInput input, long bytesToSkip) throws IOException { if (bytesToSkip < 1) { return 0; }"
      },
      {
        "txt": "long skipped = 0; while (bytesToSkip > Integer.MAX_VALUE) { final long skippedNow = skipBytesFully(input, Integer.MAX_VALUE); if (skippedNow == 0) { return skipped; } skipped += skippedNow; bytesToSkip -= skippedNow; } while (bytesToSkip > 0) {"
      },
      {
        "txt": "final int skippedNow = input.skipBytes((int) bytesToSkip); if (skippedNow == 0) { return skipped; } skipped += skippedNow; bytesToSkip -= skippedNow; } return skipped; } @Override"
      },
      {
        "txt": "public String toString() { return archive.toString(); }"
      }
    ]
  }
]
[
  {
    "id": 1003,
    "file_path": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
    "start-bug-line": 239,
    "end-bug-line": 240,
    "bug": "if (read == 0 && inf.finished()) { return -1;",
    "fix": "if (read == 0) { if (inf.finished()) { return -1; } else if (lengthOfLastRead == -1) { throw new IOException(\"Truncated ZIP file\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.compress.archivers.zip; import java.io.EOFException; import java.io.IOException; import java.io.InputStream; import java.io.PushbackInputStream;"
      },
      {
        "txt": "import java.util.zip.CRC32; import java.util.zip.DataFormatException; import java.util.zip.Inflater; import java.util.zip.ZipException; import org.apache.commons.compress.archivers.ArchiveEntry; import org.apache.commons.compress.archivers.ArchiveInputStream; public class ZipArchiveInputStream extends ArchiveInputStream { private static final int SHORT = 2; private static final int WORD = 4; private final ZipEncoding zipEncoding;"
      },
      {
        "txt": "private final boolean useUnicodeExtraFields; private final InputStream in; private final Inflater inf = new Inflater(true); private final CRC32 crc = new CRC32(); private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE]; private ZipArchiveEntry current = null; private boolean closed = false; private boolean hitCentralDirectory = false; private int readBytesOfEntry = 0, offsetInBuffer = 0; private int bytesReadFromStream = 0;"
      },
      {
        "txt": "private int lengthOfLastRead = 0; private boolean hasDataDescriptor = false; private static final int LFH_LEN = 30; local file header signature 4 bytes (0x04034b50) version needed to extract 2 bytes general purpose bit flag 2 bytes compression method 2 bytes last mod file time 2 bytes last mod file date 2 bytes crc-32 4 bytes"
      },
      {
        "txt": "compressed size 4 bytes uncompressed size 4 bytes file name length 2 bytes extra field length 2 bytes public ZipArchiveInputStream(InputStream inputStream) { this(inputStream, ZipEncodingHelper.UTF8, true); } public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields) {"
      },
      {
        "txt": "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding); this.useUnicodeExtraFields = useUnicodeExtraFields; in = new PushbackInputStream(inputStream, buf.length); } public ZipArchiveEntry getNextZipEntry() throws IOException { if (closed || hitCentralDirectory) { return null; } if (current != null) { closeEntry();"
      },
      {
        "txt": "} byte[] lfh = new byte[LFH_LEN]; try { readFully(lfh); } catch (EOFException e) { return null; } ZipLong sig = new ZipLong(lfh); if (sig.equals(ZipLong.CFH_SIG)) { hitCentralDirectory = true;"
      },
      {
        "txt": "return null; } if (!sig.equals(ZipLong.LFH_SIG)) { return null; } int off = WORD; current = new ZipArchiveEntry(); int versionMadeBy = ZipShort.getValue(lfh, off); off += SHORT; current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)"
      },
      {
        "txt": "& ZipFile.NIBLET_MASK); final int generalPurposeFlag = ZipShort.getValue(lfh, off); final boolean hasEFS = (generalPurposeFlag & ZipArchiveOutputStream.EFS_FLAG) != 0; final ZipEncoding entryEncoding = hasEFS ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding; hasDataDescriptor = (generalPurposeFlag & 8) != 0; off += SHORT; current.setMethod(ZipShort.getValue(lfh, off)); off += SHORT;"
      },
      {
        "txt": "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off)); current.setTime(time); off += WORD; if (!hasDataDescriptor) { current.setCrc(ZipLong.getValue(lfh, off)); off += WORD; current.setCompressedSize(ZipLong.getValue(lfh, off)); off += WORD; current.setSize(ZipLong.getValue(lfh, off)); off += WORD;"
      },
      {
        "txt": "} else { off += 3 * WORD; } int fileNameLen = ZipShort.getValue(lfh, off); off += SHORT; int extraLen = ZipShort.getValue(lfh, off); off += SHORT; byte[] fileName = new byte[fileNameLen]; readFully(fileName); current.setName(entryEncoding.decode(fileName));"
      },
      {
        "txt": "byte[] extraData = new byte[extraLen]; readFully(extraData); current.setExtra(extraData); if (!hasEFS && useUnicodeExtraFields) { ZipUtil.setNameAndCommentFromExtraFields(current, fileName, null); } return current; } public ArchiveEntry getNextEntry() throws IOException { return getNextZipEntry();"
      },
      {
        "txt": "} public int read(byte[] buffer, int start, int length) throws IOException { if (closed) { throw new IOException(\"The stream is closed\"); } if (inf.finished() || current == null) { return -1; } if (start <= buffer.length && length >= 0 && start >= 0 && buffer.length - start >= length) {"
      },
      {
        "txt": "if (current.getMethod() == ZipArchiveOutputStream.STORED) { int csize = (int) current.getSize(); if (readBytesOfEntry >= csize) { return -1; } if (offsetInBuffer >= lengthOfLastRead) { offsetInBuffer = 0; if ((lengthOfLastRead = in.read(buf)) == -1) { return -1; }"
      },
      {
        "txt": "count(lengthOfLastRead); bytesReadFromStream += lengthOfLastRead; } int toRead = length > lengthOfLastRead ? lengthOfLastRead - offsetInBuffer : length; if ((csize - readBytesOfEntry) < toRead) { toRead = csize - readBytesOfEntry; } System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);"
      },
      {
        "txt": "offsetInBuffer += toRead; readBytesOfEntry += toRead; crc.update(buffer, start, toRead); return toRead; } if (inf.needsInput()) { fill(); if (lengthOfLastRead > 0) { bytesReadFromStream += lengthOfLastRead; }"
      },
      {
        "txt": "int read = 0; try { read = inf.inflate(buffer, start, length); } catch (DataFormatException e) { throw new ZipException(e.getMessage()); } <extra_id_0> } crc.update(buffer, start, read); return read; } throw new ArrayIndexOutOfBoundsException(); }"
      },
      {
        "txt": "throw new ArrayIndexOutOfBoundsException(); } public void close() throws IOException { if (!closed) { closed = true; in.close(); } } public long skip(long value) throws IOException { if (value >= 0) {"
      },
      {
        "txt": "long skipped = 0; byte[] b = new byte[1024]; while (skipped != value) { long rem = value - skipped; int x = read(b, 0, (int) (b.length > rem ? rem : b.length)); if (x == -1) { return skipped; } skipped += x; }"
      },
      {
        "txt": "return skipped; } throw new IllegalArgumentException(); } public static boolean matches(byte[] signature, int length) { if (length < ZipArchiveOutputStream.LFH_SIG.length) { return false; } return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file || checksig(signature, ZipArchiveOutputStream.EOCD_SIG); // empty zip"
      },
      {
        "txt": "} private static boolean checksig(byte[] signature, byte[] expected){ for (int i = 0; i < expected.length; i++) { if (signature[i] != expected[i]) { return false; } } return true; } private void closeEntry() throws IOException {"
      },
      {
        "txt": "if (closed) { throw new IOException(\"The stream is closed\"); } if (current == null) { return; } skip(Long.MAX_VALUE); int inB; if (current.getMethod() == ZipArchiveOutputStream.DEFLATED) { inB = inf.getTotalIn();"
      },
      {
        "txt": "} else { inB = readBytesOfEntry; } int diff = 0; if ((diff = bytesReadFromStream - inB) != 0) { ((PushbackInputStream) in).unread(buf, lengthOfLastRead - diff, diff); } if (hasDataDescriptor) { readFully(new byte[4 * WORD]);"
      },
      {
        "txt": "} inf.reset(); readBytesOfEntry = offsetInBuffer = bytesReadFromStream = lengthOfLastRead = 0; crc.reset(); current = null; } private void fill() throws IOException { if (closed) { throw new IOException(\"The stream is closed\");"
      },
      {
        "txt": "} if ((lengthOfLastRead = in.read(buf)) > 0) { inf.setInput(buf, 0, lengthOfLastRead); } } private void readFully(byte[] b) throws IOException { int count = 0, x = 0; while (count != b.length) { count += x = in.read(b, count, b.length - count); if (x == -1) {"
      },
      {
        "txt": "throw new EOFException(); } } }"
      }
    ]
  }
]
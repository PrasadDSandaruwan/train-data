[
  {
    "id": 2167,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 296,
    "end-bug-line": 297,
    "bug": "protected String getLanguage() { Node n = node;",
    "fix": "protected static String findEnclosingAttribute(Node n, String attrName) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale;"
      },
      {
        "txt": "import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element;"
      },
      {
        "txt": "import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id;"
      },
      {
        "txt": "public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale);"
      },
      {
        "txt": "this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); }"
      },
      {
        "txt": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName();"
      },
      {
        "txt": "String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);"
      },
      {
        "txt": "return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;"
      },
      {
        "txt": "case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; }"
      },
      {
        "txt": "if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) {"
      },
      {
        "txt": "if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null; String ns = null;"
      },
      {
        "txt": "int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); }"
      },
      {
        "txt": "public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); }"
      },
      {
        "txt": "public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) {"
      },
      {
        "txt": "if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null;"
      },
      {
        "txt": "if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) {"
      },
      {
        "txt": "aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } }"
      },
      {
        "txt": "aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; }"
      },
      {
        "txt": "return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) {"
      },
      {
        "txt": "defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; }"
      },
      {
        "txt": "public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() {"
      },
      {
        "txt": "} public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } <extra_id_0> while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr;"
      },
      {
        "txt": "if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE"
      },
      {
        "txt": "|| node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else {"
      },
      {
        "txt": "NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) {"
      },
      {
        "txt": "children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } }"
      },
      {
        "txt": "else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } }"
      },
      {
        "txt": "public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject("
      },
      {
        "txt": "context, this, node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix)"
      },
      {
        "txt": ": context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\");"
      },
      {
        "txt": "} public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) {"
      },
      {
        "txt": "return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); }"
      },
      {
        "txt": "element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer();"
      },
      {
        "txt": "} public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) {"
      },
      {
        "txt": "return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0"
      },
      {
        "txt": "|| buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']');"
      },
      {
        "txt": "} else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']');"
      },
      {
        "txt": "} else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break;"
      },
      {
        "txt": "case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) {"
      },
      {
        "txt": "string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index)"
      },
      {
        "txt": "+ \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) {"
      },
      {
        "txt": "if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling();"
      },
      {
        "txt": "} return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++;"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;"
      },
      {
        "txt": "} public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); }"
      },
      {
        "txt": "public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) {"
      },
      {
        "txt": "if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;"
      },
      {
        "txt": "Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); }"
      },
      {
        "txt": "return null; } public Object getValue() { return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "} if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes();"
      },
      {
        "txt": "StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } }"
      },
      {
        "txt": "return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) {"
      },
      {
        "txt": "AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers("
      },
      {
        "txt": "NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) {"
      },
      {
        "txt": "return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i);"
      },
      {
        "txt": "if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild();"
      },
      {
        "txt": "while (current != null) { if (current == node1) { return -1; } if (current == node2) { return 1; } current = current.getNextSibling(); } return 0;"
      }
    ]
  },
  {
    "id": 2168,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 301,
    "end-bug-line": 301,
    "bug": "String attr = e.getAttribute(\"xml:lang\");",
    "fix": "String attr = e.getAttribute(attrName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException;"
      },
      {
        "txt": "import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer {"
      },
      {
        "txt": "private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) {"
      },
      {
        "txt": "super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent);"
      },
      {
        "txt": "this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) {"
      },
      {
        "txt": "if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true;"
      },
      {
        "txt": "} if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) {"
      },
      {
        "txt": "int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE;"
      },
      {
        "txt": "case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI);"
      },
      {
        "txt": "} } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim();"
      },
      {
        "txt": "return s1.equals(s2); } public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); }"
      },
      {
        "txt": "else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test,"
      },
      {
        "txt": "boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix);"
      },
      {
        "txt": "} public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI;"
      },
      {
        "txt": "} if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix);"
      },
      {
        "txt": "} if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname);"
      },
      {
        "txt": "if (attr != null) { namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; }"
      },
      {
        "txt": "} namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node;"
      },
      {
        "txt": "if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; }"
      },
      {
        "txt": "} aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() {"
      },
      {
        "txt": "return node; } public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() { return false;"
      },
      {
        "txt": "} public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang)"
      },
      {
        "txt": "} protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; <extra_id_0> if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); }"
      },
      {
        "txt": "n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string);"
      },
      {
        "txt": "} else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i);"
      },
      {
        "txt": "node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true));"
      },
      {
        "txt": "} } else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode ="
      },
      {
        "txt": "node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild( JXPathContext context, QName name, int index)"
      },
      {
        "txt": "{ if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(),"
      },
      {
        "txt": "index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) {"
      },
      {
        "txt": "return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {"
      },
      {
        "txt": "NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix();"
      },
      {
        "txt": "if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) {"
      },
      {
        "txt": "element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) {"
      },
      {
        "txt": "throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) {"
      },
      {
        "txt": "buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node);"
      },
      {
        "txt": "String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) {"
      },
      {
        "txt": "buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE :"
      },
      {
        "txt": "} return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1);"
      },
      {
        "txt": "index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); }"
      },
      {
        "txt": "return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++;"
      },
      {
        "txt": "} } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) {"
      },
      {
        "txt": "if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) {"
      },
      {
        "txt": "int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count;"
      },
      {
        "txt": "} public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) {"
      },
      {
        "txt": "return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName;"
      },
      {
        "txt": "} String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node;"
      },
      {
        "txt": "String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname);"
      },
      {
        "txt": "if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null; } public Object getValue() { return stringValue(node);"
      },
      {
        "txt": "} private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "} if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) {"
      },
      {
        "txt": "buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node"
      },
      {
        "txt": ": node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \""
      },
      {
        "txt": "+ \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue();"
      },
      {
        "txt": "if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1;"
      },
      {
        "txt": "} if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) {"
      },
      {
        "txt": "return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; }"
      },
      {
        "txt": "if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2169,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 311,
    "end-bug-line": 311,
    "bug": "",
    "fix": "protected String getLanguage() { return findEnclosingAttribute(node, \"xml:lang\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction;"
      },
      {
        "txt": "public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";"
      },
      {
        "txt": "public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) {"
      },
      {
        "txt": "super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT :"
      },
      {
        "txt": "return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim();"
      },
      {
        "txt": "s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node);"
      },
      {
        "txt": "} else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator("
      },
      {
        "txt": "NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) {"
      },
      {
        "txt": "return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) {"
      },
      {
        "txt": "return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else {"
      },
      {
        "txt": "namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE;"
      },
      {
        "txt": "} } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) {"
      },
      {
        "txt": "Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break;"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; }"
      },
      {
        "txt": "public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() {"
      },
      {
        "txt": "return false; } public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "} } n = n.getParentNode(); } return null; } <extra_id_0> public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string);"
      },
      {
        "txt": "if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength();"
      },
      {
        "txt": "for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) {"
      },
      {
        "txt": "Node child = children.item(i); node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class);"
      },
      {
        "txt": "if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild( JXPathContext context,"
      },
      {
        "txt": "QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this,"
      },
      {
        "txt": "node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI);"
      },
      {
        "txt": "NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context,"
      },
      {
        "txt": "QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); }"
      },
      {
        "txt": "Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); }"
      },
      {
        "txt": "else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() {"
      },
      {
        "txt": "Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; }"
      },
      {
        "txt": "StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/');"
      },
      {
        "txt": "} String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else {"
      },
      {
        "txt": "String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else {"
      },
      {
        "txt": "buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE :"
      },
      {
        "txt": "buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']');"
      },
      {
        "txt": "break; case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index)"
      },
      {
        "txt": "+ \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1);"
      },
      {
        "txt": "index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName();"
      },
      {
        "txt": "if (nm.equals(node.getNodeName())) { count++; } } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1;"
      },
      {
        "txt": "Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() {"
      },
      {
        "txt": "int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling();"
      },
      {
        "txt": "} return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) {"
      },
      {
        "txt": "String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName();"
      },
      {
        "txt": "if (localName != null) { return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement();"
      },
      {
        "txt": "} Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) {"
      },
      {
        "txt": "if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null; }"
      },
      {
        "txt": "public Object getValue() { return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) {"
      },
      {
        "txt": "String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) {"
      },
      {
        "txt": "Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } return buf.toString().trim(); }"
      },
      {
        "txt": "public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) {"
      },
      {
        "txt": "throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) {"
      },
      {
        "txt": "Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; }"
      },
      {
        "txt": "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1;"
      },
      {
        "txt": "} if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) {"
      },
      {
        "txt": "return -1; } if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2170,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 632,
    "end-bug-line": 632,
    "bug": "",
    "fix": "if (node.getNodeType() == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document;"
      },
      {
        "txt": "import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace;"
      },
      {
        "txt": "private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) {"
      },
      {
        "txt": "super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test);"
      },
      {
        "txt": "} public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test;"
      },
      {
        "txt": "QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) {"
      },
      {
        "txt": "String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE"
      },
      {
        "txt": "|| nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false;"
      },
      {
        "txt": "} if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null;"
      },
      {
        "txt": "String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln);"
      },
      {
        "txt": "} public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith);"
      },
      {
        "txt": "} public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; }"
      },
      {
        "txt": "String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node;"
      },
      {
        "txt": "if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; }"
      },
      {
        "txt": "} aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null;"
      },
      {
        "txt": "} return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) {"
      },
      {
        "txt": "if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } }"
      },
      {
        "txt": "if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; } public Object getImmediateNode() { return node;"
      },
      {
        "txt": "} public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() { return 1; }"
      },
      {
        "txt": "public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node;"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); }"
      },
      {
        "txt": "return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else {"
      },
      {
        "txt": "node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); }"
      },
      {
        "txt": "if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } }"
      },
      {
        "txt": "else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode);"
      },
      {
        "txt": "} } } } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) {"
      },
      {
        "txt": "index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) {"
      },
      {
        "txt": "NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); }"
      },
      {
        "txt": "} throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value);"
      },
      {
        "txt": "return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix);"
      },
      {
        "txt": "if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); }"
      },
      {
        "txt": "} NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); }"
      },
      {
        "txt": "parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); }"
      },
      {
        "txt": "switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI,"
      },
      {
        "txt": "getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':');"
      },
      {
        "txt": "buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']');"
      },
      {
        "txt": "} } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break;"
      },
      {
        "txt": "case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString();"
      },
      {
        "txt": "} private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); }"
      },
      {
        "txt": "index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      },
      {
        "txt": "private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } }"
      },
      {
        "txt": "n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++;"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE"
      },
      {
        "txt": "|| n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count; } public int hashCode() {"
      },
      {
        "txt": "return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; }"
      },
      {
        "txt": "String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName();"
      },
      {
        "txt": "int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) {"
      },
      {
        "txt": "return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue();"
      },
      {
        "txt": "} aNode = aNode.getParentNode(); } return null; } public Object getValue() { <extra_id_0> } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "} NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child));"
      },
      {
        "txt": "} } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id);"
      },
      {
        "txt": "} private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory;"
      },
      {
        "txt": "} public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType();"
      },
      {
        "txt": "int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength();"
      },
      {
        "txt": "for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; // Should not happen"
      },
      {
        "txt": "} Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; } if (current == node2) { return 1; } current = current.getNextSibling();"
      },
      {
        "txt": "} return 0; }"
      }
    ]
  },
  {
    "id": 2171,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 638,
    "end-bug-line": 639,
    "bug": "String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim();",
    "fix": "return \"\";",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction;"
      },
      {
        "txt": "public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";"
      },
      {
        "txt": "public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) {"
      },
      {
        "txt": "super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT :"
      },
      {
        "txt": "return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim();"
      },
      {
        "txt": "s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node);"
      },
      {
        "txt": "} else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator("
      },
      {
        "txt": "NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) {"
      },
      {
        "txt": "return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) {"
      },
      {
        "txt": "return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else {"
      },
      {
        "txt": "namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE;"
      },
      {
        "txt": "} } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) {"
      },
      {
        "txt": "Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break;"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; }"
      },
      {
        "txt": "public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() {"
      },
      {
        "txt": "return false; } public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "return attr; } } n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {"
      },
      {
        "txt": "String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes();"
      },
      {
        "txt": "int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes();"
      },
      {
        "txt": "for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } } else {"
      },
      {
        "txt": "String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild("
      },
      {
        "txt": "JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context,"
      },
      {
        "txt": "this, node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();"
      },
      {
        "txt": "nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); }"
      },
      {
        "txt": "public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name);"
      },
      {
        "txt": "} Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\");"
      },
      {
        "txt": "} else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); }"
      },
      {
        "txt": "public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\";"
      },
      {
        "txt": "} StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {"
      },
      {
        "txt": "buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); }"
      },
      {
        "txt": "else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); }"
      },
      {
        "txt": "else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE :"
      },
      {
        "txt": "case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string ="
      },
      {
        "txt": "string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() {"
      },
      {
        "txt": "int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); }"
      },
      {
        "txt": "return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; }"
      },
      {
        "txt": "n = n.getPreviousSibling(); } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; }"
      },
      {
        "txt": "public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) {"
      },
      {
        "txt": "String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) {"
      },
      {
        "txt": "node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node;"
      },
      {
        "txt": "while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null;"
      },
      {
        "txt": "public Object getValue() { return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { <extra_id_0> } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {"
      },
      {
        "txt": "} if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) {"
      },
      {
        "txt": "buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node"
      },
      {
        "txt": ": node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \""
      },
      {
        "txt": "+ \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue();"
      },
      {
        "txt": "if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1;"
      },
      {
        "txt": "} if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) {"
      },
      {
        "txt": "return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; }"
      },
      {
        "txt": "if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2172,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 641,
    "end-bug-line": 641,
    "bug": "",
    "fix": "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"xml:space\"));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr;"
      },
      {
        "txt": "import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node;"
      },
      {
        "txt": "private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node;"
      },
      {
        "txt": "} public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; }"
      },
      {
        "txt": "public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false;"
      },
      {
        "txt": "} NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard"
      },
      {
        "txt": "|| testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) {"
      },
      {
        "txt": "case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE;"
      },
      {
        "txt": "} return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } }"
      },
      {
        "txt": "return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); }"
      },
      {
        "txt": "public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "} return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith)"
      },
      {
        "txt": "{ return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() {"
      },
      {
        "txt": "return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) {"
      },
      {
        "txt": "return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) {"
      },
      {
        "txt": "String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue();"
      },
      {
        "txt": "break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace);"
      },
      {
        "txt": "if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement();"
      },
      {
        "txt": "} while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode();"
      },
      {
        "txt": "} } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; }"
      },
      {
        "txt": "public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() {"
      },
      {
        "txt": "return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); }"
      },
      {
        "txt": "protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; } }"
      },
      {
        "txt": "n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string);"
      },
      {
        "txt": "} else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i);"
      },
      {
        "txt": "node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true));"
      },
      {
        "txt": "} } else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode ="
      },
      {
        "txt": "node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild( JXPathContext context, QName name, int index)"
      },
      {
        "txt": "{ if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(),"
      },
      {
        "txt": "index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) {"
      },
      {
        "txt": "return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) {"
      },
      {
        "txt": "NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix();"
      },
      {
        "txt": "if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) {"
      },
      {
        "txt": "element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) {"
      },
      {
        "txt": "throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) {"
      },
      {
        "txt": "buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node);"
      },
      {
        "txt": "String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) {"
      },
      {
        "txt": "buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE :"
      },
      {
        "txt": "} return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1);"
      },
      {
        "txt": "index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); }"
      },
      {
        "txt": "return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++;"
      },
      {
        "txt": "} } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) {"
      },
      {
        "txt": "if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) {"
      },
      {
        "txt": "int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count;"
      },
      {
        "txt": "} public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) {"
      },
      {
        "txt": "return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName;"
      },
      {
        "txt": "} String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node;"
      },
      {
        "txt": "String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname);"
      },
      {
        "txt": "if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null; } public Object getValue() { return stringValue(node);"
      },
      {
        "txt": "private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } <extra_id_0> String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); }"
      },
      {
        "txt": "else { buf.append(stringValue(child)); } } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id);"
      },
      {
        "txt": "return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath());"
      },
      {
        "txt": "} return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0;"
      },
      {
        "txt": "} int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {"
      },
      {
        "txt": "NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) { return 1; }"
      },
      {
        "txt": "} return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; } if (current == node2) { return 1;"
      },
      {
        "txt": "} current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2173,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 643,
    "end-bug-line": 643,
    "bug": "return text == null ? \"\" : text.trim();",
    "fix": "return text == null ? \"\" : trim ? text.trim() : text;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document;"
      },
      {
        "txt": "import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace;"
      },
      {
        "txt": "private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) {"
      },
      {
        "txt": "super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test);"
      },
      {
        "txt": "} public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test;"
      },
      {
        "txt": "QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) {"
      },
      {
        "txt": "String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE"
      },
      {
        "txt": "|| nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false;"
      },
      {
        "txt": "} if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null;"
      },
      {
        "txt": "String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln);"
      },
      {
        "txt": "} public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith);"
      },
      {
        "txt": "} public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; }"
      },
      {
        "txt": "String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node;"
      },
      {
        "txt": "if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; }"
      },
      {
        "txt": "} aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null;"
      },
      {
        "txt": "} return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) {"
      },
      {
        "txt": "if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } }"
      },
      {
        "txt": "if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; } public Object getImmediateNode() { return node;"
      },
      {
        "txt": "} public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() { return 1; }"
      },
      {
        "txt": "public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node;"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); }"
      },
      {
        "txt": "return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else {"
      },
      {
        "txt": "node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); }"
      },
      {
        "txt": "if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } }"
      },
      {
        "txt": "else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode);"
      },
      {
        "txt": "} } } } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) {"
      },
      {
        "txt": "index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) {"
      },
      {
        "txt": "NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); }"
      },
      {
        "txt": "} throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value);"
      },
      {
        "txt": "return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix);"
      },
      {
        "txt": "if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); }"
      },
      {
        "txt": "} NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); }"
      },
      {
        "txt": "parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); }"
      },
      {
        "txt": "switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI,"
      },
      {
        "txt": "getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':');"
      },
      {
        "txt": "buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']');"
      },
      {
        "txt": "} } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break;"
      },
      {
        "txt": "case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString();"
      },
      {
        "txt": "} private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); }"
      },
      {
        "txt": "index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      },
      {
        "txt": "private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } }"
      },
      {
        "txt": "n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++;"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE"
      },
      {
        "txt": "|| n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count; } public int hashCode() {"
      },
      {
        "txt": "return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; }"
      },
      {
        "txt": "String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName();"
      },
      {
        "txt": "int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) {"
      },
      {
        "txt": "return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue();"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } return null; } public Object getValue() { return stringValue(node); } private String stringValue(Node node) {"
      },
      {
        "txt": "if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); <extra_id_0> } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes();"
      },
      {
        "txt": "} NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child));"
      },
      {
        "txt": "} } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id);"
      },
      {
        "txt": "} private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory;"
      },
      {
        "txt": "} public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType();"
      },
      {
        "txt": "int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength();"
      },
      {
        "txt": "for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; // Should not happen"
      },
      {
        "txt": "} Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; } if (current == node2) { return 1; } current = current.getNextSibling();"
      },
      {
        "txt": "} return 0; }"
      }
    ]
  },
  {
    "id": 2174,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 647,
    "end-bug-line": 647,
    "bug": "return text == null ? \"\" : text.trim();",
    "fix": "return text == null ? \"\" : trim ? text.trim() : text;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList;"
      },
      {
        "txt": "import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI ="
      },
      {
        "txt": "\"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; }"
      },
      {
        "txt": "public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true;"
      },
      {
        "txt": "} if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix();"
      },
      {
        "txt": "if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false;"
      },
      {
        "txt": "} if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE;"
      },
      {
        "txt": "case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget();"
      },
      {
        "txt": "String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; }"
      },
      {
        "txt": "s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node);"
      },
      {
        "txt": "ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); }"
      },
      {
        "txt": "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); }"
      },
      {
        "txt": "public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); }"
      },
      {
        "txt": "if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); }"
      },
      {
        "txt": "else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) {"
      },
      {
        "txt": "if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) {"
      },
      {
        "txt": "namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() {"
      },
      {
        "txt": "if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue();"
      },
      {
        "txt": "break; } } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace;"
      },
      {
        "txt": "} public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; } public boolean isActual() { return true; }"
      },
      {
        "txt": "public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) {"
      },
      {
        "txt": "String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\");"
      },
      {
        "txt": "if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE"
      },
      {
        "txt": "|| node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else {"
      },
      {
        "txt": "NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) {"
      },
      {
        "txt": "children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } }"
      },
      {
        "txt": "else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } }"
      },
      {
        "txt": "public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject("
      },
      {
        "txt": "context, this, node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix)"
      },
      {
        "txt": ": context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\");"
      },
      {
        "txt": "} public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) {"
      },
      {
        "txt": "return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); }"
      },
      {
        "txt": "element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer();"
      },
      {
        "txt": "} public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) {"
      },
      {
        "txt": "return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0"
      },
      {
        "txt": "|| buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']');"
      },
      {
        "txt": "} else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']');"
      },
      {
        "txt": "} else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break;"
      },
      {
        "txt": "case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) {"
      },
      {
        "txt": "string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index)"
      },
      {
        "txt": "+ \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) {"
      },
      {
        "txt": "if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling();"
      },
      {
        "txt": "} return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++;"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node;"
      },
      {
        "txt": "} public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); }"
      },
      {
        "txt": "public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) {"
      },
      {
        "txt": "if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix;"
      },
      {
        "txt": "Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); }"
      },
      {
        "txt": "return null; } public Object getValue() { return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); <extra_id_0> } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) {"
      },
      {
        "txt": "Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } return buf.toString().trim(); }"
      },
      {
        "txt": "public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) {"
      },
      {
        "txt": "throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) {"
      },
      {
        "txt": "Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; }"
      },
      {
        "txt": "if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1;"
      },
      {
        "txt": "} if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) {"
      },
      {
        "txt": "return -1; } if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2175,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 653,
    "end-bug-line": 656,
    "bug": "if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document;"
      },
      {
        "txt": "import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace;"
      },
      {
        "txt": "private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) {"
      },
      {
        "txt": "super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test);"
      },
      {
        "txt": "} public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test;"
      },
      {
        "txt": "QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) {"
      },
      {
        "txt": "String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE"
      },
      {
        "txt": "|| nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false;"
      },
      {
        "txt": "} if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null;"
      },
      {
        "txt": "String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln);"
      },
      {
        "txt": "} public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith);"
      },
      {
        "txt": "} public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; }"
      },
      {
        "txt": "String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node;"
      },
      {
        "txt": "if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; }"
      },
      {
        "txt": "} aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null;"
      },
      {
        "txt": "} return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) {"
      },
      {
        "txt": "if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } }"
      },
      {
        "txt": "if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; } public Object getImmediateNode() { return node;"
      },
      {
        "txt": "} public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() { return 1; }"
      },
      {
        "txt": "public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node;"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode(); }"
      },
      {
        "txt": "return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else {"
      },
      {
        "txt": "node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); }"
      },
      {
        "txt": "if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } }"
      },
      {
        "txt": "else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode);"
      },
      {
        "txt": "} } } } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) {"
      },
      {
        "txt": "index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) {"
      },
      {
        "txt": "NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); }"
      },
      {
        "txt": "} throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value);"
      },
      {
        "txt": "return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix);"
      },
      {
        "txt": "if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); }"
      },
      {
        "txt": "} NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); }"
      },
      {
        "txt": "parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); }"
      },
      {
        "txt": "switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI,"
      },
      {
        "txt": "getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':');"
      },
      {
        "txt": "buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']');"
      },
      {
        "txt": "} } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break;"
      },
      {
        "txt": "case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString();"
      },
      {
        "txt": "} private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); }"
      },
      {
        "txt": "index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      },
      {
        "txt": "private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } }"
      },
      {
        "txt": "n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++;"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE"
      },
      {
        "txt": "|| n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count; } public int hashCode() {"
      },
      {
        "txt": "return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; }"
      },
      {
        "txt": "String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName();"
      },
      {
        "txt": "int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) {"
      },
      {
        "txt": "return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue();"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } return null; } public Object getValue() { return stringValue(node); } private String stringValue(Node node) {"
      },
      {
        "txt": "int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) {"
      },
      {
        "txt": "return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i); <extra_id_0> buf.append(stringValue(child)); } } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) {"
      },
      {
        "txt": "} public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory();"
      },
      {
        "txt": "if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)"
      },
      {
        "txt": "{ Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1;"
      },
      {
        "txt": "} if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) {"
      },
      {
        "txt": "return -1; } if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) {"
      },
      {
        "txt": "if (current == node1) { return -1; } if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2176,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 658,
    "end-bug-line": 658,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction;"
      },
      {
        "txt": "public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";"
      },
      {
        "txt": "public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) {"
      },
      {
        "txt": "super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT :"
      },
      {
        "txt": "return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim();"
      },
      {
        "txt": "s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node);"
      },
      {
        "txt": "} else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator("
      },
      {
        "txt": "NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) {"
      },
      {
        "txt": "return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) {"
      },
      {
        "txt": "return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else {"
      },
      {
        "txt": "namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE;"
      },
      {
        "txt": "} } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) {"
      },
      {
        "txt": "Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break;"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; }"
      },
      {
        "txt": "public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() {"
      },
      {
        "txt": "return false; } public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "return attr; } } n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) {"
      },
      {
        "txt": "String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes();"
      },
      {
        "txt": "int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes();"
      },
      {
        "txt": "for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } } else {"
      },
      {
        "txt": "String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild("
      },
      {
        "txt": "JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context,"
      },
      {
        "txt": "this, node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();"
      },
      {
        "txt": "nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); }"
      },
      {
        "txt": "public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name);"
      },
      {
        "txt": "} Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\");"
      },
      {
        "txt": "} else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); }"
      },
      {
        "txt": "public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\";"
      },
      {
        "txt": "} StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') {"
      },
      {
        "txt": "buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); }"
      },
      {
        "txt": "else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); }"
      },
      {
        "txt": "else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE :"
      },
      {
        "txt": "case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string ="
      },
      {
        "txt": "string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; } } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() {"
      },
      {
        "txt": "int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); }"
      },
      {
        "txt": "return count; } private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; }"
      },
      {
        "txt": "n = n.getPreviousSibling(); } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; }"
      },
      {
        "txt": "public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) {"
      },
      {
        "txt": "String localName = node.getLocalName(); if (localName != null) { return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) {"
      },
      {
        "txt": "node = ((Document) node).getDocumentElement(); } Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node;"
      },
      {
        "txt": "while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null;"
      },
      {
        "txt": "} public Object getValue() { return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); }"
      },
      {
        "txt": "if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16);"
      },
      {
        "txt": "Node child = list.item(i); if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); <extra_id_0> } return buf.toString().trim(); } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument();"
      },
      {
        "txt": "Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException("
      },
      {
        "txt": "\"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue();"
      },
      {
        "txt": "Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {"
      },
      {
        "txt": "return 1; } if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; }"
      },
      {
        "txt": "if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1;"
      },
      {
        "txt": "} if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2177,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 660,
    "end-bug-line": 660,
    "bug": "return buf.toString().trim();",
    "fix": "return buf.toString();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils;"
      },
      {
        "txt": "import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element; import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L;"
      },
      {
        "txt": "private Node node; private Map namespaces; private String defaultNamespace; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale);"
      },
      {
        "txt": "this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node;"
      },
      {
        "txt": "} public boolean testNode(NodeTest test) { return testNode(node, test); } public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) {"
      },
      {
        "txt": "return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; }"
      },
      {
        "txt": "if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType();"
      },
      {
        "txt": "switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE; case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI :"
      },
      {
        "txt": "return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); }"
      },
      {
        "txt": "} return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2);"
      },
      {
        "txt": "} public QName getName() { String ln = null; String ns = null; int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) {"
      },
      {
        "txt": "ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse,"
      },
      {
        "txt": "NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); }"
      },
      {
        "txt": "public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) { if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; }"
      },
      {
        "txt": "if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null; if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); }"
      },
      {
        "txt": "if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) { aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) {"
      },
      {
        "txt": "namespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } }"
      },
      {
        "txt": "namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; } return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) {"
      },
      {
        "txt": "aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } }"
      },
      {
        "txt": "aNode = aNode.getParentNode(); } } if (defaultNamespace == null) { defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node;"
      },
      {
        "txt": "} public Object getImmediateNode() { return node; } public boolean isActual() { return true; } public boolean isCollection() { return false; }"
      },
      {
        "txt": "public int getLength() { return 1; } public boolean isLeaf() { return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase());"
      },
      {
        "txt": "} protected String getLanguage() { Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; }"
      },
      {
        "txt": "} n = n.getParentNode(); } return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) {"
      },
      {
        "txt": "node.setNodeValue(string); } else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) {"
      },
      {
        "txt": "Node child = children.item(i); node.removeChild(child); } if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i);"
      },
      {
        "txt": "node.appendChild(child.cloneNode(true)); } } else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) {"
      },
      {
        "txt": "Node textNode = node.getOwnerDocument().createTextNode(string); node.appendChild(textNode); } } } } public NodePointer createChild( JXPathContext context, QName name,"
      },
      {
        "txt": "int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node,"
      },
      {
        "txt": "name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null);"
      },
      {
        "txt": "if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node;"
      },
      {
        "txt": "String prefix = name.getPrefix(); if (prefix != null) { String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else {"
      },
      {
        "txt": "if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode();"
      },
      {
        "txt": "if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\"); } parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer();"
      },
      {
        "txt": "if (parent != null) { buffer.append(parent.asPath()); } switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); }"
      },
      {
        "txt": "String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI(); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI);"
      },
      {
        "txt": "if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']'); break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break;"
      },
      {
        "txt": "case Node.DOCUMENT_NODE : } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"');"
      },
      {
        "txt": "} return string; } private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) {"
      },
      {
        "txt": "count++; } } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling();"
      },
      {
        "txt": "while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1;"
      },
      {
        "txt": "Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfPI(String target) { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); }"
      },
      {
        "txt": "return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { return object == this || object instanceof DOMNodePointer && node == ((DOMNodePointer) object).node; } public static String getPrefix(Node node) { String prefix = node.getPrefix();"
      },
      {
        "txt": "if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? null : name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) {"
      },
      {
        "txt": "return localName; } String name = node.getNodeName(); int index = name.lastIndexOf(':'); return index < 0 ? name : name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement(); }"
      },
      {
        "txt": "Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String prefix = getPrefix(node); String qname = prefix == null ? \"xmlns\" : \"xmlns:\" + prefix; Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue(); } } aNode = aNode.getParentNode(); } return null; } public Object getValue() {"
      },
      {
        "txt": "return stringValue(node); } private String stringValue(Node node) { int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } if (nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue();"
      },
      {
        "txt": "return text == null ? \"\" : text.trim(); } if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i);"
      },
      {
        "txt": "buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } <extra_id_0> } public Pointer getPointerByID(JXPathContext context, String id) { Document document = node.getNodeType() == Node.DOCUMENT_NODE ? (Document) node : node.getOwnerDocument(); Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id)"
      },
      {
        "txt": "Element element = document.getElementById(id); return element == null ? (Pointer) new NullPointer(getLocale(), id) : new DOMNodePointer(element, getLocale(), id); } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - \" + \"cannot create path: \""
      },
      {
        "txt": "+ asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue(); Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) {"
      },
      {
        "txt": "return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { return 1; }"
      },
      {
        "txt": "if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; } if (n == node2) { return 1;"
      },
      {
        "txt": "} } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1; } if (current == node2) {"
      },
      {
        "txt": "return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2178,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 240,
    "end-bug-line": 240,
    "bug": "return ((Element) node).getTextTrim();",
    "fix": "StringBuffer buf = new StringBuffer(); for (NodeIterator children = childIterator(null, false, null); children.setPosition(children.getPosition() + 1);) { NodePointer ptr = children.getNodePointer(); if (ptr.getImmediateNode() instanceof Element || ptr.getImmediateNode() instanceof Text) { buf.append(ptr.getValue()); } } return buf.toString();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale;"
      },
      {
        "txt": "import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction;"
      },
      {
        "txt": "import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) {"
      },
      {
        "txt": "super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent);"
      },
      {
        "txt": "this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) {"
      },
      {
        "txt": "return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node);"
      },
      {
        "txt": "} private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns; }"
      },
      {
        "txt": "return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } }"
      },
      {
        "txt": "else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; } public int compareChildNodePointers("
      },
      {
        "txt": "NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1;"
      },
      {
        "txt": "} if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) {"
      },
      {
        "txt": "Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen }"
      },
      {
        "txt": "if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i);"
      },
      {
        "txt": "if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; } public Object getBaseValue() {"
      },
      {
        "txt": "return node; } public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { if (node instanceof Element) {"
      },
      {
        "txt": "return ((Element) node).getContent().size() == 0; } if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null; String ln = null;"
      },
      {
        "txt": "if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); }"
      },
      {
        "txt": "} public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { <extra_id_0> } if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) { text = text.trim(); }"
      },
      {
        "txt": "text = text.trim(); } return text; } if (node instanceof Text) { return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); }"
      },
      {
        "txt": "if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text; } return null; } public void setValue(Object value) {"
      },
      {
        "txt": "if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else {"
      },
      {
        "txt": "Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); }"
      },
      {
        "txt": "else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); }"
      },
      {
        "txt": "else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } }"
      },
      {
        "txt": "} } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child);"
      },
      {
        "txt": "} else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) {"
      },
      {
        "txt": "return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction;"
      },
      {
        "txt": "} return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "return attr; } } n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent();"
      },
      {
        "txt": "return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent();"
      },
      {
        "txt": "} if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context, QName name, int index)"
      },
      {
        "txt": "{ if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(),"
      },
      {
        "txt": "index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null);"
      },
      {
        "txt": "if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node;"
      },
      {
        "txt": "String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns);"
      },
      {
        "txt": "} } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1);"
      },
      {
        "txt": "return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() {"
      },
      {
        "txt": "if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0"
      },
      {
        "txt": "|| buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']');"
      },
      {
        "txt": "} else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']');"
      },
      {
        "txt": "} else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } }"
      },
      {
        "txt": "else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append("
      },
      {
        "txt": "']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"');"
      },
      {
        "txt": "} return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent();"
      },
      {
        "txt": "int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1;"
      },
      {
        "txt": "} List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; } } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1;"
      },
      {
        "txt": "} List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent();"
      },
      {
        "txt": "int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) {"
      },
      {
        "txt": "break; } } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) {"
      },
      {
        "txt": "return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory();"
      },
      {
        "txt": "if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2179,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 249,
    "end-bug-line": 249,
    "bug": "",
    "fix": "String result = null;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List;"
      },
      {
        "txt": "import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace;"
      },
      {
        "txt": "import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\";"
      },
      {
        "txt": "public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) {"
      },
      {
        "txt": "super(parent); this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); }"
      },
      {
        "txt": "public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() {"
      },
      {
        "txt": "return getNamespaceURI(node); } private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns;"
      },
      {
        "txt": "} return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); }"
      },
      {
        "txt": "} else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; }"
      },
      {
        "txt": "public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) {"
      },
      {
        "txt": "return -1; } if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size();"
      },
      {
        "txt": "for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen"
      },
      {
        "txt": "} if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) {"
      },
      {
        "txt": "Object n = children.get(i); if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; }"
      },
      {
        "txt": "public Object getBaseValue() { return node; } public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getContent().size() == 0; } if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null;"
      },
      {
        "txt": "String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "} return new QName(ns, ln); } public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim(); }"
      },
      {
        "txt": "String text = ((Comment) node).getText(); if (text != null) { text = text.trim(); } return text; } <extra_id_0> return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); } if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "} if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text; } return null; }"
      },
      {
        "txt": "public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } }"
      },
      {
        "txt": "else { Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent());"
      },
      {
        "txt": "} else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi);"
      },
      {
        "txt": "} else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); }"
      },
      {
        "txt": "} } } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone();"
      },
      {
        "txt": "element.addContent((Element) child); } else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); }"
      },
      {
        "txt": "else if (node instanceof ProcessingInstruction) { child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } }"
      },
      {
        "txt": "public boolean testNode(NodeTest test) { return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true;"
      },
      {
        "txt": "} if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix();"
      },
      {
        "txt": "if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false;"
      },
      {
        "txt": "} if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI :"
      },
      {
        "txt": "return node instanceof ProcessingInstruction; } return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false;"
      },
      {
        "txt": "} private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; }"
      },
      {
        "txt": "public static String getLocalName(Object node) { if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) {"
      },
      {
        "txt": "String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);"
      },
      {
        "txt": "if (attr != null && !attr.equals(\"\")) { return attr; } } n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "Object parent = ((Element) node).getParent(); return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "return (Element) ((ProcessingInstruction) node).getParent(); } if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context, QName name,"
      },
      {
        "txt": "int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node,"
      },
      {
        "txt": "name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it ="
      },
      {
        "txt": "childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild("
      },
      {
        "txt": "JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); }"
      },
      {
        "txt": "Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) {"
      },
      {
        "txt": "element.setAttribute(name.getName(), \"\", ns); } } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name);"
      },
      {
        "txt": "it.setPosition(1); return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); }"
      },
      {
        "txt": "public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) {"
      },
      {
        "txt": "if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName());"
      },
      {
        "txt": "buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } }"
      },
      {
        "txt": "} else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\");"
      },
      {
        "txt": "buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index)"
      },
      {
        "txt": "+ \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1);"
      },
      {
        "txt": "index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; }"
      },
      {
        "txt": "List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) {"
      },
      {
        "txt": "break; } } return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) {"
      },
      {
        "txt": "return 1; } List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0;"
      },
      {
        "txt": "for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; } } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) {"
      },
      {
        "txt": "return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) {"
      },
      {
        "txt": "break; } } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; }"
      },
      {
        "txt": "List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; }"
      },
      {
        "txt": "if (child == node) { break; } } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) {"
      },
      {
        "txt": "if (object == this) { return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) {"
      },
      {
        "txt": "AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2180,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 250,
    "end-bug-line": 253,
    "bug": "return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim();",
    "fix": "result = ((Text) node).getText();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale;"
      },
      {
        "txt": "import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction;"
      },
      {
        "txt": "import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) {"
      },
      {
        "txt": "super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent);"
      },
      {
        "txt": "this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) {"
      },
      {
        "txt": "return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node);"
      },
      {
        "txt": "} private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns; }"
      },
      {
        "txt": "return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } }"
      },
      {
        "txt": "else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; } public int compareChildNodePointers("
      },
      {
        "txt": "NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1;"
      },
      {
        "txt": "} if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) {"
      },
      {
        "txt": "Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen }"
      },
      {
        "txt": "if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i);"
      },
      {
        "txt": "if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0; } public Object getBaseValue() {"
      },
      {
        "txt": "return node; } public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { if (node instanceof Element) {"
      },
      {
        "txt": "return ((Element) node).getContent().size() == 0; } if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null; String ln = null;"
      },
      {
        "txt": "if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); }"
      },
      {
        "txt": "return new QName(ns, ln); } public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim(); } if (node instanceof Comment) {"
      },
      {
        "txt": "if (text != null) { text = text.trim(); } return text; } if (node instanceof Text) { <extra_id_0> } if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); }"
      },
      {
        "txt": "text = text.trim(); } return text; } return null; } public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) {"
      },
      {
        "txt": "((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else { Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) {"
      },
      {
        "txt": "Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); } else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string));"
      },
      {
        "txt": "} else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); } else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment);"
      },
      {
        "txt": "} else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } } } } private void addContent(List content) {"
      },
      {
        "txt": "Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child); } else if (child instanceof Text) { child = ((Text) child).clone();"
      },
      {
        "txt": "element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) { child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); }"
      },
      {
        "txt": "else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) { return testNode(this, node, test); } public static boolean testNode("
      },
      {
        "txt": "NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false;"
      },
      {
        "txt": "} NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard"
      },
      {
        "txt": "|| testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE :"
      },
      {
        "txt": "return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction; } return false; }"
      },
      {
        "txt": "if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true;"
      },
      {
        "txt": "} s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) { String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; }"
      },
      {
        "txt": "if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) { if (node instanceof Element) { return ((Element) node).getName(); }"
      },
      {
        "txt": "if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() {"
      },
      {
        "txt": "Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) { return attr; } }"
      },
      {
        "txt": "n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent(); return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) {"
      },
      {
        "txt": "return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent(); } if (node instanceof Comment) { return (Element) ((Comment) node).getParent();"
      },
      {
        "txt": "} return null; } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0;"
      },
      {
        "txt": "} boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) { NodeTest nodeTest;"
      },
      {
        "txt": "String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); }"
      },
      {
        "txt": "} throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value);"
      },
      {
        "txt": "return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix);"
      },
      {
        "txt": "if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns); } } else {"
      },
      {
        "txt": "Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() {"
      },
      {
        "txt": "Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; }"
      },
      {
        "txt": "StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); }"
      },
      {
        "txt": "String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI);"
      },
      {
        "txt": "if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } } else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append("
      },
      {
        "txt": "']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); } return buffer.toString();"
      },
      {
        "txt": "} private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); }"
      },
      {
        "txt": "index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      },
      {
        "txt": "private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break; } } return count;"
      },
      {
        "txt": "} return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1; } List children; if (parent instanceof Element) {"
      },
      {
        "txt": "children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) { count++;"
      },
      {
        "txt": "} if (child == node) { break; } } return count; } private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) {"
      },
      {
        "txt": "parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1; } List children = parent.getContent(); int count = 0;"
      },
      {
        "txt": "for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break; } } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i);"
      },
      {
        "txt": "if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) { break; } }"
      },
      {
        "txt": "return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof JDOMNodePointer)) {"
      },
      {
        "txt": "return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \""
      },
      {
        "txt": "+ asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2181,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 256,
    "end-bug-line": 260,
    "bug": "String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text;",
    "fix": "result = ((ProcessingInstruction) node).getData();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment;"
      },
      {
        "txt": "import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI ="
      },
      {
        "txt": "\"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node;"
      },
      {
        "txt": "this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith)"
      },
      {
        "txt": "{ return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) {"
      },
      {
        "txt": "return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) {"
      },
      {
        "txt": "ns = null; } return ns; } return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix);"
      },
      {
        "txt": "if (ns != null) { return ns.getURI(); } } else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); }"
      },
      {
        "txt": "} return null; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) {"
      },
      {
        "txt": "return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ("
      },
      {
        "txt": "(node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1;"
      },
      {
        "txt": "} } return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); }"
      },
      {
        "txt": "List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1; } if (n == node2) { return 1; }"
      },
      {
        "txt": "} return 0; } public Object getBaseValue() { return node; } public boolean isCollection() { return false; } public int getLength() {"
      },
      {
        "txt": "return 1; } public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; } if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true;"
      },
      {
        "txt": "} public QName getName() { String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName();"
      },
      {
        "txt": "} else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public Object getImmediateNode() { return node; } public Object getValue() {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getTextTrim(); } if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) { text = text.trim(); } return text; }"
      },
      {
        "txt": "return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); } if (node instanceof ProcessingInstruction) { <extra_id_0> } return null; } public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class);"
      },
      {
        "txt": "if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else {"
      },
      {
        "txt": "Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); }"
      },
      {
        "txt": "else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); }"
      },
      {
        "txt": "else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } }"
      },
      {
        "txt": "} } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child);"
      },
      {
        "txt": "} else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) {"
      },
      {
        "txt": "return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction;"
      },
      {
        "txt": "} return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "return attr; } } n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent();"
      },
      {
        "txt": "return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent();"
      },
      {
        "txt": "} if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context, QName name, int index)"
      },
      {
        "txt": "{ if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(),"
      },
      {
        "txt": "index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null);"
      },
      {
        "txt": "if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node;"
      },
      {
        "txt": "String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns);"
      },
      {
        "txt": "} } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1);"
      },
      {
        "txt": "return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() {"
      },
      {
        "txt": "if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0"
      },
      {
        "txt": "|| buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']');"
      },
      {
        "txt": "} else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']');"
      },
      {
        "txt": "} else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } }"
      },
      {
        "txt": "else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append("
      },
      {
        "txt": "']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"');"
      },
      {
        "txt": "} return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent();"
      },
      {
        "txt": "int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1;"
      },
      {
        "txt": "} List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; } } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1;"
      },
      {
        "txt": "} List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent();"
      },
      {
        "txt": "int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) {"
      },
      {
        "txt": "break; } } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) {"
      },
      {
        "txt": "return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory();"
      },
      {
        "txt": "if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2182,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 262,
    "end-bug-line": 262,
    "bug": "return null;",
    "fix": "boolean trim = !\"preserve\".equals(findEnclosingAttribute(node, \"space\", Namespace.XML_NAMESPACE)); return result != null && trim ? result.trim() : result;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer {"
      },
      {
        "txt": "private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node;"
      },
      {
        "txt": "} public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; }"
      },
      {
        "txt": "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); }"
      },
      {
        "txt": "public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns; } return null; }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } else if (node instanceof Element) { Element element = (Element) node;"
      },
      {
        "txt": "Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)"
      },
      {
        "txt": "{ Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } if ("
      },
      {
        "txt": "!(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) {"
      },
      {
        "txt": "return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException("
      },
      {
        "txt": "\"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1;"
      },
      {
        "txt": "} if (n == node2) { return 1; } } return 0; } public Object getBaseValue() { return node; }"
      },
      {
        "txt": "public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; }"
      },
      {
        "txt": "if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix();"
      },
      {
        "txt": "if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); }"
      },
      {
        "txt": "public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim(); } if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) {"
      },
      {
        "txt": "text = text.trim(); } return text; } if (node instanceof Text) { return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); }"
      },
      {
        "txt": "String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text; } <extra_id_0> } public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string);"
      },
      {
        "txt": "if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else { Element element = (Element) node; element.getContent().clear();"
      },
      {
        "txt": "if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); } else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText();"
      },
      {
        "txt": "element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); } else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone();"
      },
      {
        "txt": "element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } } } }"
      },
      {
        "txt": "private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child); } else if (child instanceof Text) {"
      },
      {
        "txt": "child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) { child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child);"
      },
      {
        "txt": "} else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) { return testNode(this, node, test); }"
      },
      {
        "txt": "public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; } if (test instanceof NodeNameTest) { if (!(node instanceof Element)) {"
      },
      {
        "txt": "return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; }"
      },
      {
        "txt": "if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) {"
      },
      {
        "txt": "case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction; } return false;"
      },
      {
        "txt": "} if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) {"
      },
      {
        "txt": "return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) { String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix;"
      },
      {
        "txt": "} if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) { if (node instanceof Element) { return ((Element) node).getName();"
      },
      {
        "txt": "} if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); }"
      },
      {
        "txt": "protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) { return attr; }"
      },
      {
        "txt": "} n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent(); return parent instanceof Element ? (Element) parent : null; }"
      },
      {
        "txt": "if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent(); } if (node instanceof Comment) {"
      },
      {
        "txt": "return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) {"
      },
      {
        "txt": "index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) {"
      },
      {
        "txt": "NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer();"
      },
      {
        "txt": "} } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index);"
      },
      {
        "txt": "ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) {"
      },
      {
        "txt": "Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns); } }"
      },
      {
        "txt": "else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); }"
      },
      {
        "txt": "public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\";"
      },
      {
        "txt": "} StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/');"
      },
      {
        "txt": "} String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else {"
      },
      {
        "txt": "String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else {"
      },
      {
        "txt": "buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } } else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\");"
      },
      {
        "txt": "buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); }"
      },
      {
        "txt": "return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\'');"
      },
      {
        "txt": "} index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string;"
      },
      {
        "txt": "} private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName();"
      },
      {
        "txt": "for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break; } }"
      },
      {
        "txt": "return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1; } List children;"
      },
      {
        "txt": "if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) {"
      },
      {
        "txt": "count++; } if (child == node) { break; } } return count; } private int getRelativePositionOfTextNode() { Element parent;"
      },
      {
        "txt": "if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1; } List children = parent.getContent();"
      },
      {
        "txt": "int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break; } }"
      },
      {
        "txt": "return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) { break; }"
      },
      {
        "txt": "} return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) { return true; }"
      },
      {
        "txt": "if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException("
      },
      {
        "txt": "\"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2183,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 436,
    "end-bug-line": 436,
    "bug": "Object n = node;",
    "fix": "return findEnclosingAttribute(node, \"lang\", Namespace.XML_NAMESPACE); }  protected static String findEnclosingAttribute(Object n, String attrName, Namespace ns) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element;"
      },
      {
        "txt": "import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI ="
      },
      {
        "txt": "\"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; }"
      },
      {
        "txt": "public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith);"
      },
      {
        "txt": "} public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); }"
      },
      {
        "txt": "public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; }"
      },
      {
        "txt": "return ns; } return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI();"
      },
      {
        "txt": "} } else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null;"
      },
      {
        "txt": "} public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; }"
      },
      {
        "txt": "if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes();"
      },
      {
        "txt": "int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; } }"
      },
      {
        "txt": "return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size();"
      },
      {
        "txt": "for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1; } if (n == node2) { return 1; } } return 0;"
      },
      {
        "txt": "} public Object getBaseValue() { return node; } public boolean isCollection() { return false; } public int getLength() { return 1; }"
      },
      {
        "txt": "public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; } if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() {"
      },
      {
        "txt": "String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim();"
      },
      {
        "txt": "} if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) { text = text.trim(); } return text; } if (node instanceof Text) { return ((Text) node).getTextTrim();"
      },
      {
        "txt": "} if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); } if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text;"
      },
      {
        "txt": "} return null; } public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else {"
      },
      {
        "txt": "nodeParent(node).removeContent((Text) node); } } else { Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); }"
      },
      {
        "txt": "else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); } else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi ="
      },
      {
        "txt": "(ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); } else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class);"
      },
      {
        "txt": "if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } } } } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) {"
      },
      {
        "txt": "Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child); } else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) {"
      },
      {
        "txt": "child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) { child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child);"
      },
      {
        "txt": "} } } public boolean testNode(NodeTest test) { return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test)"
      },
      {
        "txt": "{ if (test == null) { return true; } if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName();"
      },
      {
        "txt": "String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node);"
      },
      {
        "txt": "return equalStrings(namespaceURI, nodeNS); } return false; } if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA);"
      },
      {
        "txt": "case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction; } return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "return testPI.equals(nodePI); } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim();"
      },
      {
        "txt": "return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) { String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix;"
      },
      {
        "txt": "} return null; } public static String getLocalName(Object node) { if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); }"
      },
      {
        "txt": "} public boolean isLanguage(String lang) { String current = getLanguage(); return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { <extra_id_0> while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) { return attr; } } n = nodeParent(n); } return null; } private static Element nodeParent(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { Object parent = ((Element) node).getParent(); return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); }"
      },
      {
        "txt": "if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent(); } if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context,"
      },
      {
        "txt": "QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this,"
      },
      {
        "txt": "node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI);"
      },
      {
        "txt": "NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); }"
      },
      {
        "txt": "public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name);"
      },
      {
        "txt": "} Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns);"
      },
      {
        "txt": "if (attr == null) { element.setAttribute(name.getName(), \"\", ns); } } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } }"
      },
      {
        "txt": "NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node);"
      },
      {
        "txt": "} public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) {"
      },
      {
        "txt": "if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln);"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('[');"
      },
      {
        "txt": "buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } }"
      },
      {
        "txt": "} } else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append("
      },
      {
        "txt": "\"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string ="
      },
      {
        "txt": "string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1;"
      },
      {
        "txt": "} List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; }"
      },
      {
        "txt": "if (child == node) { break; } } return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent();"
      },
      {
        "txt": "if (parent == null) { return 1; } List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); }"
      },
      {
        "txt": "int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; } }"
      },
      {
        "txt": "return count; } private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); }"
      },
      {
        "txt": "if (parent == null) { return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; }"
      },
      {
        "txt": "if (child == node) { break; } } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1;"
      },
      {
        "txt": "} List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++;"
      },
      {
        "txt": "} if (child == node) { break; } } return count; } public int hashCode() { return System.identityHashCode(node); }"
      },
      {
        "txt": "public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; }"
      },
      {
        "txt": "private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2184,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 440,
    "end-bug-line": 441,
    "bug": "String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);",
    "fix": "String attr = e.getAttributeValue(attrName, ns);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer {"
      },
      {
        "txt": "private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node;"
      },
      {
        "txt": "} public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; }"
      },
      {
        "txt": "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); }"
      },
      {
        "txt": "public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns; } return null; }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } else if (node instanceof Element) { Element element = (Element) node;"
      },
      {
        "txt": "Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)"
      },
      {
        "txt": "{ Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } if ("
      },
      {
        "txt": "!(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) {"
      },
      {
        "txt": "return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException("
      },
      {
        "txt": "\"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1;"
      },
      {
        "txt": "} if (n == node2) { return 1; } } return 0; } public Object getBaseValue() { return node; }"
      },
      {
        "txt": "public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; }"
      },
      {
        "txt": "if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix();"
      },
      {
        "txt": "if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); }"
      },
      {
        "txt": "public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim(); } if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) {"
      },
      {
        "txt": "text = text.trim(); } return text; } if (node instanceof Text) { return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); }"
      },
      {
        "txt": "if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text; } return null; } public void setValue(Object value) {"
      },
      {
        "txt": "if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else {"
      },
      {
        "txt": "Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); }"
      },
      {
        "txt": "else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); }"
      },
      {
        "txt": "else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } }"
      },
      {
        "txt": "} } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child);"
      },
      {
        "txt": "} else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) {"
      },
      {
        "txt": "return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction;"
      },
      {
        "txt": "} return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "} protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; <extra_id_0> if (attr != null && !attr.equals(\"\")) { return attr; } } n = nodeParent(n); }"
      },
      {
        "txt": "n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent(); return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) {"
      },
      {
        "txt": "return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent(); } if (node instanceof Comment) { return (Element) ((Comment) node).getParent();"
      },
      {
        "txt": "} return null; } public NodePointer createChild( JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0;"
      },
      {
        "txt": "} boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index); if (success) { NodeTest nodeTest;"
      },
      {
        "txt": "String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); }"
      },
      {
        "txt": "} throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value);"
      },
      {
        "txt": "return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix);"
      },
      {
        "txt": "if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns); } } else {"
      },
      {
        "txt": "Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() {"
      },
      {
        "txt": "Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; }"
      },
      {
        "txt": "StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); }"
      },
      {
        "txt": "String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI);"
      },
      {
        "txt": "if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\");"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } } else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append("
      },
      {
        "txt": "']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); } return buffer.toString();"
      },
      {
        "txt": "} private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); }"
      },
      {
        "txt": "index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      },
      {
        "txt": "private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break; } } return count;"
      },
      {
        "txt": "} return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1; } List children; if (parent instanceof Element) {"
      },
      {
        "txt": "children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) { count++;"
      },
      {
        "txt": "} if (child == node) { break; } } return count; } private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) {"
      },
      {
        "txt": "parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1; } List children = parent.getContent(); int count = 0;"
      },
      {
        "txt": "for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break; } } return count;"
      },
      {
        "txt": "} private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i);"
      },
      {
        "txt": "if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) { break; } }"
      },
      {
        "txt": "return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof JDOMNodePointer)) {"
      },
      {
        "txt": "return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \""
      },
      {
        "txt": "+ asPath()); } return factory; }"
      }
    ]
  },
  {
    "id": 2185,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 756,
    "end-bug-line": 756,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document; import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer {"
      },
      {
        "txt": "private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node;"
      },
      {
        "txt": "} public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id; } public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; }"
      },
      {
        "txt": "public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); }"
      },
      {
        "txt": "public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix); } public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null; } return ns; } return null; }"
      },
      {
        "txt": "public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } else if (node instanceof Element) { Element element = (Element) node;"
      },
      {
        "txt": "Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } } return null; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2)"
      },
      {
        "txt": "{ Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0; } if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } if ("
      },
      {
        "txt": "!(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) { List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) {"
      },
      {
        "txt": "return -1; } else if (n == node2) { return 1; } } return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException("
      },
      {
        "txt": "\"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent(); int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1;"
      },
      {
        "txt": "} if (n == node2) { return 1; } } return 0; } public Object getBaseValue() { return node; }"
      },
      {
        "txt": "public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; }"
      },
      {
        "txt": "if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; } public QName getName() { String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix();"
      },
      {
        "txt": "if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); } else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); }"
      },
      {
        "txt": "public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) { return ((Element) node).getTextTrim(); } if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) {"
      },
      {
        "txt": "text = text.trim(); } return text; } if (node instanceof Text) { return ((Text) node).getTextTrim(); } if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); }"
      },
      {
        "txt": "if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); } return text; } return null; } public void setValue(Object value) {"
      },
      {
        "txt": "if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); } else { nodeParent(node).removeContent((Text) node); } } else {"
      },
      {
        "txt": "Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent()); } else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); }"
      },
      {
        "txt": "else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) { ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); }"
      },
      {
        "txt": "else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } }"
      },
      {
        "txt": "} } private void addContent(List content) { Element element = (Element) node; int count = content.size(); for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child);"
      },
      {
        "txt": "} else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); } else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) {"
      },
      {
        "txt": "child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone(); element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) {"
      },
      {
        "txt": "return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node, NodeTest test) { if (test == null) { return true; }"
      },
      {
        "txt": "if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) {"
      },
      {
        "txt": "return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) { String nodeNS = JDOMNodePointer.getNamespaceURI(node); return equalStrings(namespaceURI, nodeNS); } return false; }"
      },
      {
        "txt": "if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : return (node instanceof Element) || (node instanceof Document); case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction;"
      },
      {
        "txt": "} return false; } if (test instanceof ProcessingInstructionTest && node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI); } return false; }"
      },
      {
        "txt": "private static boolean equalStrings(String s1, String s2) { if (s1 == s2) { return true; } s1 = s1 == null ? \"\" : s1.trim(); s2 = s2 == null ? \"\" : s2.trim(); return s1.equals(s2); } public static String getPrefix(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) {"
      },
      {
        "txt": "if (node instanceof Element) { return ((Element) node).getName(); } if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage();"
      },
      {
        "txt": "return current == null ? super.isLanguage(lang) : current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE); if (attr != null && !attr.equals(\"\")) {"
      },
      {
        "txt": "return attr; } } n = nodeParent(n); } return null; } private static Element nodeParent(Object node) { if (node instanceof Element) { Object parent = ((Element) node).getParent();"
      },
      {
        "txt": "return parent instanceof Element ? (Element) parent : null; } if (node instanceof Text) { return (Element) ((Text) node).getParent(); } if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent(); } if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent();"
      },
      {
        "txt": "} if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild( JXPathContext context, QName name, int index)"
      },
      {
        "txt": "{ if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(),"
      },
      {
        "txt": "index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null);"
      },
      {
        "txt": "if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node;"
      },
      {
        "txt": "String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns);"
      },
      {
        "txt": "} } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); } } NodeIterator it = attributeIterator(name); it.setPosition(1);"
      },
      {
        "txt": "return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); } parent.getContent().remove(node); } public String asPath() {"
      },
      {
        "txt": "if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); } if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0"
      },
      {
        "txt": "|| buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']');"
      },
      {
        "txt": "} else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']');"
      },
      {
        "txt": "} else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); } } } }"
      },
      {
        "txt": "else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append("
      },
      {
        "txt": "']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"');"
      },
      {
        "txt": "} return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) { return 1; } List children = ((Element)parent).getContent();"
      },
      {
        "txt": "int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } return 1; } private int getRelativePositionOfElement() { Object parent = ((Element) node).getParent(); if (parent == null) { return 1;"
      },
      {
        "txt": "} List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent(); } int count = 0; for (int i = 0; i < children.size(); i++) {"
      },
      {
        "txt": "Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; } } return count; }"
      },
      {
        "txt": "private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent(); } if (parent == null) { return 1;"
      },
      {
        "txt": "} List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++; } if (child == node) { break;"
      },
      {
        "txt": "} } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) { return 1; } List children = parent.getContent();"
      },
      {
        "txt": "int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) { count++; } if (child == node) {"
      },
      {
        "txt": "break; } } return count; } public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) {"
      },
      {
        "txt": "return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node; } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory();"
      },
      {
        "txt": "throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; } <extra_id_0>"
      }
    ]
  }
]
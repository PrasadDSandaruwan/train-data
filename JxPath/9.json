[
  {
    "id": 2205,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 37,
    "end-bug-line": 37,
    "bug": "",
    "fix": "private boolean invert;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet;"
      },
      {
        "txt": "import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { <extra_id_0> public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; }"
      },
      {
        "txt": "return 2; } protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context, Expression left, Expression right) {"
      },
      {
        "txt": "Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset();"
      },
      {
        "txt": "} if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); }"
      },
      {
        "txt": "if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r);"
      },
      {
        "txt": "} protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; } } return false; }"
      },
      {
        "txt": "protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } }"
      },
      {
        "txt": "return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue();"
      },
      {
        "txt": "} if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); }"
      },
      {
        "txt": "if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2206,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 39,
    "end-bug-line": 39,
    "bug": "",
    "fix": "this(arg1, arg2, false); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { <extra_id_0> super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() {"
      },
      {
        "txt": "} protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context);"
      },
      {
        "txt": "Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); }"
      },
      {
        "txt": "if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) {"
      },
      {
        "txt": "return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); }"
      },
      {
        "txt": "protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) {"
      },
      {
        "txt": "HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false;"
      },
      {
        "txt": "} protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); }"
      },
      {
        "txt": "if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) {"
      },
      {
        "txt": "return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2207,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 40,
    "end-bug-line": 40,
    "bug": "",
    "fix": "protected CoreOperationCompare(Expression arg1, Expression arg2, boolean invert) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { <extra_id_0> } protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true;"
      },
      {
        "txt": "protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context);"
      },
      {
        "txt": "if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) {"
      },
      {
        "txt": "r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r);"
      },
      {
        "txt": "} if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) {"
      },
      {
        "txt": "while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet();"
      },
      {
        "txt": "while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false; }"
      },
      {
        "txt": "protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) {"
      },
      {
        "txt": "r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));"
      },
      {
        "txt": "} if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2208,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 41,
    "end-bug-line": 41,
    "bug": "",
    "fix": "this.invert = invert;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); <extra_id_0> protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; }"
      },
      {
        "txt": "return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) {"
      },
      {
        "txt": "((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer();"
      },
      {
        "txt": "} if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); }"
      },
      {
        "txt": "if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) {"
      },
      {
        "txt": "Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) {"
      },
      {
        "txt": "left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) {"
      },
      {
        "txt": "if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue();"
      },
      {
        "txt": "} if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); }"
      },
      {
        "txt": "if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2209,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 43,
    "end-bug-line": 43,
    "bug": "",
    "fix": "public Object computeValue(EvalContext context) { return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } <extra_id_0> protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; }"
      },
      {
        "txt": "return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) {"
      },
      {
        "txt": "((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer();"
      },
      {
        "txt": "} if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); }"
      },
      {
        "txt": "if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) {"
      },
      {
        "txt": "Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) {"
      },
      {
        "txt": "left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) {"
      },
      {
        "txt": "if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue();"
      },
      {
        "txt": "} if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); }"
      },
      {
        "txt": "if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2210,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 123,
    "end-bug-line": 127,
    "bug": "if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation {"
      },
      {
        "txt": "public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; } protected boolean equal("
      },
      {
        "txt": "EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) {"
      },
      {
        "txt": "l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator();"
      },
      {
        "txt": "} if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); }"
      },
      {
        "txt": "if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true;"
      },
      {
        "txt": "} } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) {"
      },
      {
        "txt": "return true; } } return false; } protected boolean equal(Object l, Object r) { <extra_id_0> if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue(); }"
      },
      {
        "txt": "r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));"
      },
      {
        "txt": "} if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2211,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 136,
    "end-bug-line": 138,
    "bug": "if (l == r) { return true; }",
    "fix": "boolean result;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) {"
      },
      {
        "txt": "super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context,"
      },
      {
        "txt": "Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer();"
      },
      {
        "txt": "} if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); }"
      },
      {
        "txt": "if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) {"
      },
      {
        "txt": "return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; }"
      },
      {
        "txt": "} return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) {"
      },
      {
        "txt": "return true; } } return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; }"
      },
      {
        "txt": "if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } <extra_id_0> if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); }"
      },
      {
        "txt": "return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2212,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 140,
    "end-bug-line": 140,
    "bug": "return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r));",
    "fix": "result = l == r || InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r); } else if (l instanceof Number || r instanceof Number) { //if either side is NaN, no comparison returns true: double ld = InfoSetUtil.doubleValue(l); if (Double.isNaN(ld)) { return false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2;"
      },
      {
        "txt": "} protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context);"
      },
      {
        "txt": "Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); }"
      },
      {
        "txt": "if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) {"
      },
      {
        "txt": "return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); }"
      },
      {
        "txt": "protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) {"
      },
      {
        "txt": "HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false;"
      },
      {
        "txt": "} protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); }"
      },
      {
        "txt": "r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { <extra_id_0> } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ("
      },
      {
        "txt": "if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2213,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 142,
    "end-bug-line": 144,
    "bug": "//if either side is NaN, no comparison returns true: if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r));",
    "fix": "double rd = InfoSetUtil.doubleValue(r); if (Double.isNaN(rd)) { return false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() {"
      },
      {
        "txt": "return true; } protected boolean equal( EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) {"
      },
      {
        "txt": "((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer();"
      },
      {
        "txt": "} if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); }"
      },
      {
        "txt": "if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) {"
      },
      {
        "txt": "Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) {"
      },
      {
        "txt": "left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) {"
      },
      {
        "txt": "if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue();"
      },
      {
        "txt": "if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } <extra_id_0> } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r);"
      },
      {
        "txt": "} return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2214,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 146,
    "end-bug-line": 146,
    "bug": "",
    "fix": "result = ld == rd; } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation {"
      },
      {
        "txt": "public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; } protected boolean equal("
      },
      {
        "txt": "EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) {"
      },
      {
        "txt": "l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator();"
      },
      {
        "txt": "} if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); }"
      },
      {
        "txt": "if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true;"
      },
      {
        "txt": "} } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) {"
      },
      {
        "txt": "if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true;"
      },
      {
        "txt": "} } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true;"
      },
      {
        "txt": "if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } <extra_id_0> return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); } }"
      }
    ]
  },
  {
    "id": 2215,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 147,
    "end-bug-line": 148,
    "bug": "return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r)));",
    "fix": "l = InfoSetUtil.stringValue(l); r = InfoSetUtil.stringValue(r); } result = l == r || l != null && l.equals(r);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) {"
      },
      {
        "txt": "super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() { return 2; } protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context,"
      },
      {
        "txt": "Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer();"
      },
      {
        "txt": "} if (r instanceof InitialContext) { ((EvalContext) r).reset(); } if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); }"
      },
      {
        "txt": "if (r instanceof Collection) { r = ((Collection) r).iterator(); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) {"
      },
      {
        "txt": "return contains((Iterator) r, l); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; }"
      },
      {
        "txt": "} return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) {"
      },
      {
        "txt": "return true; } } return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; }"
      },
      {
        "txt": "} if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true; }"
      },
      {
        "txt": "return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { <extra_id_0> } return l != null && l.equals(r); } }"
      }
    ]
  },
  {
    "id": 2216,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 150,
    "end-bug-line": 150,
    "bug": "return l != null && l.equals(r);",
    "fix": "return result ^ invert;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator;"
      },
      {
        "txt": "import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected int getPrecedence() {"
      },
      {
        "txt": "return 2; } protected boolean isSymmetric() { return true; } protected boolean equal( EvalContext context, Expression left, Expression right) {"
      },
      {
        "txt": "Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext) { ((EvalContext) l).reset(); } if (l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext) { ((EvalContext) r).reset();"
      },
      {
        "txt": "} if (r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); }"
      },
      {
        "txt": "if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } if (l instanceof Iterator) { return contains((Iterator) l, r); } if (r instanceof Iterator) { return contains((Iterator) r, l); } return equal(l, r);"
      },
      {
        "txt": "} protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true; } } return false; }"
      },
      {
        "txt": "protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } }"
      },
      {
        "txt": "return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue();"
      },
      {
        "txt": "} if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); }"
      },
      {
        "txt": "return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } <extra_id_0> } }"
      }
    ]
  },
  {
    "id": 2217,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationEqual.java",
    "start-bug-line": 31,
    "end-bug-line": 33,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { return equal(context, args[0], args[1]) ? Boolean.TRUE : Boolean.FALSE; }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationEqual extends CoreOperationCompare { public CoreOperationEqual(Expression arg1, Expression arg2) { super(arg1, arg2); } <extra_id_0> public String getSymbol() { return \"=\"; } }"
      }
    ]
  },
  {
    "id": 2218,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
    "start-bug-line": 28,
    "end-bug-line": 28,
    "bug": "super(arg1, arg2);",
    "fix": "super(arg1, arg2, true);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationNotEqual extends CoreOperationCompare { public CoreOperationNotEqual(Expression arg1, Expression arg2) { <extra_id_0> } public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { return equal(context, args[0], args[1]) ? Boolean.FALSE : Boolean.TRUE; } public String getSymbol() { return \"!=\";"
      },
      {
        "txt": "public String getSymbol() { return \"!=\"; }"
      }
    ]
  },
  {
    "id": 2219,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationNotEqual.java",
    "start-bug-line": 31,
    "end-bug-line": 33,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { return equal(context, args[0], args[1]) ? Boolean.FALSE : Boolean.TRUE; }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationNotEqual extends CoreOperationCompare { public CoreOperationNotEqual(Expression arg1, Expression arg2) { super(arg1, arg2); } <extra_id_0> public String getSymbol() { return \"!=\"; } }"
      }
    ]
  }
]
[
  {
    "id": 2157,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/dom/DOMNodePointer.java",
    "start-bug-line": 116,
    "end-bug-line": 116,
    "bug": "return nodeType == Node.ELEMENT_NODE;",
    "fix": "return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.dom; import java.util.HashMap; import java.util.Locale;"
      },
      {
        "txt": "import java.util.Map; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest; import org.apache.commons.jxpath.ri.compiler.NodeTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.model.beans.NullPointer; import org.apache.commons.jxpath.util.TypeUtils; import org.w3c.dom.Attr; import org.w3c.dom.Comment; import org.w3c.dom.Document; import org.w3c.dom.Element;"
      },
      {
        "txt": "import org.w3c.dom.NamedNodeMap; import org.w3c.dom.Node; import org.w3c.dom.NodeList; import org.w3c.dom.ProcessingInstruction; public class DOMNodePointer extends NodePointer { private static final long serialVersionUID = -8751046933894857319L; private Node node; private Map namespaces; private String defaultNamespace; private String id;"
      },
      {
        "txt": "public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\"; public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public DOMNodePointer(Node node, Locale locale) { super(null, locale); this.node = node; } public DOMNodePointer(Node node, Locale locale, String id) { super(null, locale);"
      },
      {
        "txt": "this.node = node; this.id = id; } public DOMNodePointer(NodePointer parent, Node node) { super(parent); this.node = node; } public boolean testNode(NodeTest test) { return testNode(node, test); }"
      },
      {
        "txt": "public static boolean testNode(Node node, NodeTest test) { if (test == null) { return true; } else if (test instanceof NodeNameTest) { if (node.getNodeType() != Node.ELEMENT_NODE) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test; QName testName = nodeNameTest.getNodeName();"
      },
      {
        "txt": "String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(DOMNodePointer.getLocalName(node))) { String nodeNS = DOMNodePointer.getNamespaceURI(node);"
      },
      {
        "txt": "} } else if (test instanceof NodeTypeTest) { int nodeType = node.getNodeType(); switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : <extra_id_0> case Compiler.NODE_TYPE_TEXT : return nodeType == Node.CDATA_SECTION_NODE || nodeType == Node.TEXT_NODE; case Compiler.NODE_TYPE_COMMENT : return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI :"
      },
      {
        "txt": "return nodeType == Node.COMMENT_NODE; case Compiler.NODE_TYPE_PI : return nodeType == Node.PROCESSING_INSTRUCTION_NODE; } return false; } else if (test instanceof ProcessingInstructionTest) { if (node.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "return testPI.equals(nodePI); } } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == null) { return s2 == null || s2.trim().length() == 0; } if (s2 == null) {"
      },
      {
        "txt": "return s1 == null || s1.trim().length() == 0; } if (s1 != null && !s1.trim().equals(s2.trim())) { return false; } return true; } public QName getName() { String ln = null; String ns = null;"
      },
      {
        "txt": "int type = node.getNodeType(); if (type == Node.ELEMENT_NODE) { ns = DOMNodePointer.getPrefix(node); ln = DOMNodePointer.getLocalName(node); } else if (type == Node.PROCESSING_INSTRUCTION_NODE) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); }"
      },
      {
        "txt": "public String getNamespaceURI() { return getNamespaceURI(node); } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) { return new DOMNodeIterator(this, test, reverse, startWith); }"
      },
      {
        "txt": "public NodeIterator attributeIterator(QName name) { return new DOMAttributeIterator(this, name); } public NodePointer namespacePointer(String prefix) { return new NamespacePointer(this, prefix); } public NodeIterator namespaceIterator() { return new DOMNamespaceIterator(this); } public String getNamespaceURI(String prefix) {"
      },
      {
        "txt": "if (prefix == null || prefix.equals(\"\")) { return getDefaultNamespaceURI(); } if (prefix.equals(\"xml\")) { return XML_NAMESPACE_URI; } if (prefix.equals(\"xmlns\")) { return XMLNS_NAMESPACE_URI; } String namespace = null;"
      },
      {
        "txt": "if (namespaces == null) { namespaces = new HashMap(); } else { namespace = (String) namespaces.get(prefix); } if (namespace == null) { String qname = \"xmlns:\" + prefix; Node aNode = node; if (aNode instanceof Document) {"
      },
      {
        "txt": "aNode = ((Document)aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { namespace = attr.getValue(); break; } }"
      },
      {
        "txt": "aNode = aNode.getParentNode(); } if (namespace == null || namespace.equals(\"\")) { namespace = NodePointer.UNKNOWN_NAMESPACE; } } namespaces.put(prefix, namespace); if (namespace == UNKNOWN_NAMESPACE) { return null; }"
      },
      {
        "txt": "return namespace; } public String getDefaultNamespaceURI() { if (defaultNamespace == null) { Node aNode = node; if (aNode instanceof Document) { aNode = ((Document) aNode).getDocumentElement(); } while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "Attr attr = ((Element) aNode).getAttributeNode(\"xmlns\"); if (attr != null) { defaultNamespace = attr.getValue(); break; } } aNode = aNode.getParentNode(); } } if (defaultNamespace == null) {"
      },
      {
        "txt": "defaultNamespace = \"\"; } return defaultNamespace.equals(\"\") ? null : defaultNamespace; } public Object getBaseValue() { return node; } public Object getImmediateNode() { return node; }"
      },
      {
        "txt": "public boolean isActual() { return true; } public boolean isCollection() { return false; } public int getLength() { return 1; } public boolean isLeaf() {"
      },
      {
        "txt": "return !node.hasChildNodes(); } public boolean isLanguage(String lang) { String current = getLanguage(); if (current == null) { return super.isLanguage(lang); } return current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() {"
      },
      {
        "txt": "Node n = node; while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { Element e = (Element) n; String attr = e.getAttribute(\"xml:lang\"); if (attr != null && !attr.equals(\"\")) { return attr; } } n = n.getParentNode();"
      },
      {
        "txt": "} return null; } public void setValue(Object value) { if (node.getNodeType() == Node.TEXT_NODE || node.getNodeType() == Node.CDATA_SECTION_NODE) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { node.setNodeValue(string); }"
      },
      {
        "txt": "else { node.getParentNode().removeChild(node); } } else { NodeList children = node.getChildNodes(); int count = children.getLength(); for (int i = count; --i >= 0;) { Node child = children.item(i); node.removeChild(child);"
      },
      {
        "txt": "} if (value instanceof Node) { Node valueNode = (Node) value; if (valueNode instanceof Element || valueNode instanceof Document) { children = valueNode.getChildNodes(); for (int i = 0; i < children.getLength(); i++) { Node child = children.item(i); node.appendChild(child.cloneNode(true)); }"
      },
      {
        "txt": "} else { node.appendChild(valueNode.cloneNode(true)); } } else { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { Node textNode = node.getOwnerDocument().createTextNode(string);"
      },
      {
        "txt": "node.appendChild(textNode); } } } } public NodePointer createChild( JXPathContext context, QName name, int index) {"
      },
      {
        "txt": "if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context, this, node, name.toString(), index);"
      },
      {
        "txt": "if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI(); nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer();"
      },
      {
        "txt": "} } throw new JXPathAbstractFactoryException( \"Factory could not create a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\"); } public NodePointer createChild(JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index);"
      },
      {
        "txt": "ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) { return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) {"
      },
      {
        "txt": "String ns = getNamespaceURI(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); } element.setAttributeNS(ns, name.toString(), \"\"); } else { if (!element.hasAttribute(name.getName())) { element.setAttribute(name.getName(), \"\");"
      },
      {
        "txt": "} } NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Node parent = node.getParentNode(); if (parent == null) { throw new JXPathException(\"Cannot remove root DOM node\");"
      },
      {
        "txt": "} parent.removeChild(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath());"
      },
      {
        "txt": "} switch (node.getNodeType()) { case Node.ELEMENT_NODE : if (parent instanceof DOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String ln = DOMNodePointer.getLocalName(node); String nsURI = getNamespaceURI();"
      },
      {
        "txt": "if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) { buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix);"
      },
      {
        "txt": "buffer.append(':'); buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement());"
      },
      {
        "txt": "buffer.append(']'); } } } break; case Node.TEXT_NODE : case Node.CDATA_SECTION_NODE : buffer.append(\"/text()\"); buffer.append('['); buffer.append(getRelativePositionOfTextNode()).append(']');"
      },
      {
        "txt": "break; case Node.PROCESSING_INSTRUCTION_NODE : String target = ((ProcessingInstruction) node).getTarget(); buffer.append(\"/processing-instruction(\\'\"); buffer.append(target).append(\"')\"); buffer.append('['); buffer.append(getRelativePositionOfPI(target)).append(']'); break; case Node.DOCUMENT_NODE : }"
      },
      {
        "txt": "return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\'');"
      },
      {
        "txt": "} index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string;"
      },
      {
        "txt": "} private int getRelativePositionByName() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) { String nm = n.getNodeName(); if (nm.equals(node.getNodeName())) { count++; }"
      },
      {
        "txt": "} n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfElement() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.ELEMENT_NODE) {"
      },
      {
        "txt": "count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfTextNode() { int count = 1; Node n = node.getPreviousSibling(); while (n != null) {"
      },
      {
        "txt": "if (n.getNodeType() == Node.TEXT_NODE || n.getNodeType() == Node.CDATA_SECTION_NODE) { count++; } n = n.getPreviousSibling(); } return count; } private int getRelativePositionOfPI(String target) { int count = 1;"
      },
      {
        "txt": "Node n = node.getPreviousSibling(); while (n != null) { if (n.getNodeType() == Node.PROCESSING_INSTRUCTION_NODE && ((ProcessingInstruction) n).getTarget().equals(target)) { count++; } n = n.getPreviousSibling(); } return count; }"
      },
      {
        "txt": "public int hashCode() { return System.identityHashCode(node); } public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof DOMNodePointer)) { return false; }"
      },
      {
        "txt": "DOMNodePointer other = (DOMNodePointer) object; return node == other.node; } public static String getPrefix(Node node) { String prefix = node.getPrefix(); if (prefix != null) { return prefix; } String name = node.getNodeName(); int index = name.lastIndexOf(':');"
      },
      {
        "txt": "if (index == -1) { return null; } return name.substring(0, index); } public static String getLocalName(Node node) { String localName = node.getLocalName(); if (localName != null) { return localName; }"
      },
      {
        "txt": "String name = node.getNodeName(); int index = name.lastIndexOf(':'); if (index == -1) { return name; } return name.substring(index + 1); } public static String getNamespaceURI(Node node) { if (node instanceof Document) { node = ((Document) node).getDocumentElement();"
      },
      {
        "txt": "} Element element = (Element) node; String uri = element.getNamespaceURI(); if (uri != null) { return uri; } String qname; String prefix = getPrefix(node); if (prefix == null) { qname = \"xmlns\";"
      },
      {
        "txt": "} else { qname = \"xmlns:\" + prefix; } Node aNode = node; while (aNode != null) { if (aNode.getNodeType() == Node.ELEMENT_NODE) { Attr attr = ((Element) aNode).getAttributeNode(qname); if (attr != null) { return attr.getValue();"
      },
      {
        "txt": "} } aNode = aNode.getParentNode(); } return null; } public Object getValue() { return stringValue(node); } private String stringValue(Node node) {"
      },
      {
        "txt": "int nodeType = node.getNodeType(); if (nodeType == Node.COMMENT_NODE) { String text = ((Comment) node).getData(); return text == null ? \"\" : text.trim(); } else if ( nodeType == Node.TEXT_NODE || nodeType == Node.CDATA_SECTION_NODE) { String text = node.getNodeValue(); return text == null ? \"\" : text.trim();"
      },
      {
        "txt": "} else if (nodeType == Node.PROCESSING_INSTRUCTION_NODE) { String text = ((ProcessingInstruction) node).getData(); return text == null ? \"\" : text.trim(); } else { NodeList list = node.getChildNodes(); StringBuffer buf = new StringBuffer(16); for (int i = 0; i < list.getLength(); i++) { Node child = list.item(i);"
      },
      {
        "txt": "if (child.getNodeType() == Node.TEXT_NODE) { buf.append(child.getNodeValue()); } else { buf.append(stringValue(child)); } } return buf.toString().trim(); } }"
      },
      {
        "txt": "public Pointer getPointerByID(JXPathContext context, String id) { Document document; if (node.getNodeType() == Node.DOCUMENT_NODE) { document = (Document) node; } else { document = node.getOwnerDocument(); } Element element = document.getElementById(id); if (element != null) {"
      },
      {
        "txt": "return new DOMNodePointer(element, getLocale(), id); } else { return new NullPointer(getLocale(), id); } } private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException("
      },
      {
        "txt": "\"Factory is not set on the JXPathContext - \" + \"cannot create path: \" + asPath()); } return factory; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Node node1 = (Node) pointer1.getBaseValue();"
      },
      {
        "txt": "Node node2 = (Node) pointer2.getBaseValue(); if (node1 == node2) { return 0; } int t1 = node1.getNodeType(); int t2 = node2.getNodeType(); if (t1 == Node.ATTRIBUTE_NODE && t2 != Node.ATTRIBUTE_NODE) { return -1; } else if (t1 != Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) {"
      },
      {
        "txt": "return 1; } else if (t1 == Node.ATTRIBUTE_NODE && t2 == Node.ATTRIBUTE_NODE) { NamedNodeMap map = ((Node) getNode()).getAttributes(); int length = map.getLength(); for (int i = 0; i < length; i++) { Node n = map.item(i); if (n == node1) { return -1; }"
      },
      {
        "txt": "else if (n == node2) { return 1; } } return 0; // Should not happen } Node current = node.getFirstChild(); while (current != null) { if (current == node1) { return -1;"
      },
      {
        "txt": "} else if (current == node2) { return 1; } current = current.getNextSibling(); } return 0; }"
      }
    ]
  },
  {
    "id": 2158,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/jdom/JDOMNodePointer.java",
    "start-bug-line": 376,
    "end-bug-line": 376,
    "bug": "return node instanceof Element;",
    "fix": "return (node instanceof Element) || (node instanceof Document);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.jdom; import java.util.List; import java.util.Locale; import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathException; import org.apache.commons.jxpath.ri.Compiler; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.compiler.NodeNameTest;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.compiler.NodeTest; import org.apache.commons.jxpath.ri.compiler.NodeTypeTest; import org.apache.commons.jxpath.ri.compiler.ProcessingInstructionTest; import org.apache.commons.jxpath.ri.model.NodeIterator; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.util.TypeUtils; import org.jdom.Attribute; import org.jdom.CDATA; import org.jdom.Comment; import org.jdom.Document;"
      },
      {
        "txt": "import org.jdom.Element; import org.jdom.Namespace; import org.jdom.ProcessingInstruction; import org.jdom.Text; public class JDOMNodePointer extends NodePointer { private static final long serialVersionUID = -6346532297491082651L; private Object node; private String id; public static final String XML_NAMESPACE_URI = \"http://www.w3.org/XML/1998/namespace\";"
      },
      {
        "txt": "public static final String XMLNS_NAMESPACE_URI = \"http://www.w3.org/2000/xmlns/\"; public JDOMNodePointer(Object node, Locale locale) { super(null, locale); this.node = node; } public JDOMNodePointer(Object node, Locale locale, String id) { super(null, locale); this.node = node; this.id = id;"
      },
      {
        "txt": "} public JDOMNodePointer(NodePointer parent, Object node) { super(parent); this.node = node; } public NodeIterator childIterator( NodeTest test, boolean reverse, NodePointer startWith) {"
      },
      {
        "txt": "return new JDOMNodeIterator(this, test, reverse, startWith); } public NodeIterator attributeIterator(QName name) { return new JDOMAttributeIterator(this, name); } public NodeIterator namespaceIterator() { return new JDOMNamespaceIterator(this); } public NodePointer namespacePointer(String prefix) { return new JDOMNamespacePointer(this, prefix);"
      },
      {
        "txt": "} public String getNamespaceURI() { return getNamespaceURI(node); } private static String getNamespaceURI(Object node) { if (node instanceof Element) { Element element = (Element) node; String ns = element.getNamespaceURI(); if (ns != null && ns.equals(\"\")) { ns = null;"
      },
      {
        "txt": "} return ns; } return null; } public String getNamespaceURI(String prefix) { if (node instanceof Document) { Element element = ((Document)node).getRootElement(); Namespace ns = element.getNamespace(prefix); if (ns != null) {"
      },
      {
        "txt": "return ns.getURI(); } } else if (node instanceof Element) { Element element = (Element) node; Namespace ns = element.getNamespace(prefix); if (ns != null) { return ns.getURI(); } }"
      },
      {
        "txt": "return null; } public int compareChildNodePointers( NodePointer pointer1, NodePointer pointer2) { Object node1 = pointer1.getBaseValue(); Object node2 = pointer2.getBaseValue(); if (node1 == node2) { return 0;"
      },
      {
        "txt": "} if ((node1 instanceof Attribute) && !(node2 instanceof Attribute)) { return -1; } else if ( !(node1 instanceof Attribute) && (node2 instanceof Attribute)) { return 1; } else if ( (node1 instanceof Attribute) && (node2 instanceof Attribute)) {"
      },
      {
        "txt": "List list = ((Element) getNode()).getAttributes(); int length = list.size(); for (int i = 0; i < length; i++) { Object n = list.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; }"
      },
      {
        "txt": "} return 0; // Should not happen } if (!(node instanceof Element)) { throw new RuntimeException( \"JXPath internal error: \" + \"compareChildNodes called for \" + node); } List children = ((Element) node).getContent();"
      },
      {
        "txt": "int length = children.size(); for (int i = 0; i < length; i++) { Object n = children.get(i); if (n == node1) { return -1; } else if (n == node2) { return 1; } }"
      },
      {
        "txt": "return 0; } public Object getBaseValue() { return node; } public boolean isCollection() { return false; } public int getLength() { return 1;"
      },
      {
        "txt": "} public boolean isLeaf() { if (node instanceof Element) { return ((Element) node).getContent().size() == 0; } else if (node instanceof Document) { return ((Document) node).getContent().size() == 0; } return true; }"
      },
      {
        "txt": "public QName getName() { String ns = null; String ln = null; if (node instanceof Element) { ns = ((Element) node).getNamespacePrefix(); if (ns != null && ns.equals(\"\")) { ns = null; } ln = ((Element) node).getName(); }"
      },
      {
        "txt": "else if (node instanceof ProcessingInstruction) { ln = ((ProcessingInstruction) node).getTarget(); } return new QName(ns, ln); } public Object getImmediateNode() { return node; } public Object getValue() { if (node instanceof Element) {"
      },
      {
        "txt": "return ((Element) node).getTextTrim(); } else if (node instanceof Comment) { String text = ((Comment) node).getText(); if (text != null) { text = text.trim(); } return text; } else if (node instanceof Text) {"
      },
      {
        "txt": "return ((Text) node).getTextTrim(); } else if (node instanceof CDATA) { return ((CDATA) node).getTextTrim(); } else if (node instanceof ProcessingInstruction) { String text = ((ProcessingInstruction) node).getData(); if (text != null) { text = text.trim(); }"
      },
      {
        "txt": "return text; } return null; } public void setValue(Object value) { if (node instanceof Text) { String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { ((Text) node).setText(string); }"
      },
      {
        "txt": "else { nodeParent(node).removeContent((Text) node); } } else { Element element = (Element) node; element.getContent().clear(); if (value instanceof Element) { Element valueElement = (Element) value; addContent(valueElement.getContent());"
      },
      {
        "txt": "} else if (value instanceof Document) { Document valueDocument = (Document) value; addContent(valueDocument.getContent()); } else if (value instanceof Text || value instanceof CDATA) { String string = ((Text) value).getText(); element.addContent(new Text(string)); } else if (value instanceof ProcessingInstruction) {"
      },
      {
        "txt": "ProcessingInstruction pi = (ProcessingInstruction) ((ProcessingInstruction) value) .clone(); element.addContent(pi); } else if (value instanceof Comment) { Comment comment = (Comment) ((Comment) value).clone(); element.addContent(comment); } else {"
      },
      {
        "txt": "String string = (String) TypeUtils.convert(value, String.class); if (string != null && !string.equals(\"\")) { element.addContent(new Text(string)); } } } } private void addContent(List content) { Element element = (Element) node; int count = content.size();"
      },
      {
        "txt": "for (int i = 0; i < count; i++) { Object child = content.get(i); if (child instanceof Element) { child = ((Element) child).clone(); element.addContent((Element) child); } else if (child instanceof Text) { child = ((Text) child).clone(); element.addContent((Text) child); }"
      },
      {
        "txt": "else if (node instanceof CDATA) { child = ((CDATA) child).clone(); element.addContent((CDATA) child); } else if (node instanceof ProcessingInstruction) { child = ((ProcessingInstruction) child).clone(); element.addContent((ProcessingInstruction) child); } else if (node instanceof Comment) { child = ((Comment) child).clone();"
      },
      {
        "txt": "element.addContent((Comment) child); } } } public boolean testNode(NodeTest test) { return testNode(this, node, test); } public static boolean testNode( NodePointer pointer, Object node,"
      },
      {
        "txt": "NodeTest test) { if (test == null) { return true; } else if (test instanceof NodeNameTest) { if (!(node instanceof Element)) { return false; } NodeNameTest nodeNameTest = (NodeNameTest) test;"
      },
      {
        "txt": "QName testName = nodeNameTest.getNodeName(); String namespaceURI = nodeNameTest.getNamespaceURI(); boolean wildcard = nodeNameTest.isWildcard(); String testPrefix = testName.getPrefix(); if (wildcard && testPrefix == null) { return true; } if (wildcard || testName.getName() .equals(JDOMNodePointer.getLocalName(node))) {"
      },
      {
        "txt": "return equalStrings(namespaceURI, nodeNS); } } else if (test instanceof NodeTypeTest) { switch (((NodeTypeTest) test).getNodeType()) { case Compiler.NODE_TYPE_NODE : <extra_id_0> case Compiler.NODE_TYPE_TEXT : return (node instanceof Text) || (node instanceof CDATA); case Compiler.NODE_TYPE_COMMENT : return node instanceof Comment; case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction;"
      },
      {
        "txt": "case Compiler.NODE_TYPE_PI : return node instanceof ProcessingInstruction; } return false; } else if (test instanceof ProcessingInstructionTest) { if (node instanceof ProcessingInstruction) { String testPI = ((ProcessingInstructionTest) test).getTarget(); String nodePI = ((ProcessingInstruction) node).getTarget(); return testPI.equals(nodePI);"
      },
      {
        "txt": "} } return false; } private static boolean equalStrings(String s1, String s2) { if (s1 == null && s2 != null) { return false; } if (s1 != null && s2 == null) { return false;"
      },
      {
        "txt": "} if (s1 != null && !s1.trim().equals(s2.trim())) { return false; } return true; } public static String getPrefix(Object node) { if (node instanceof Element) { String prefix = ((Element) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix;"
      },
      {
        "txt": "} else if (node instanceof Attribute) { String prefix = ((Attribute) node).getNamespacePrefix(); return (prefix == null || prefix.equals(\"\")) ? null : prefix; } return null; } public static String getLocalName(Object node) { if (node instanceof Element) { return ((Element) node).getName();"
      },
      {
        "txt": "} else if (node instanceof Attribute) { return ((Attribute) node).getName(); } return null; } public boolean isLanguage(String lang) { String current = getLanguage(); if (current == null) { return super.isLanguage(lang);"
      },
      {
        "txt": "} return current.toUpperCase().startsWith(lang.toUpperCase()); } protected String getLanguage() { Object n = node; while (n != null) { if (n instanceof Element) { Element e = (Element) n; String attr = e.getAttributeValue(\"lang\", Namespace.XML_NAMESPACE);"
      },
      {
        "txt": "if (attr != null && !attr.equals(\"\")) { return attr; } } n = nodeParent(n); } return null; } private Element nodeParent(Object node) { if (node instanceof Element) {"
      },
      {
        "txt": "Object parent = ((Element) node).getParent(); if (parent instanceof Element) { return (Element) parent; } } else if (node instanceof Text) { return (Element) ((Text) node).getParent(); } else if (node instanceof CDATA) { return (Element) ((CDATA) node).getParent();"
      },
      {
        "txt": "} else if (node instanceof ProcessingInstruction) { return (Element) ((ProcessingInstruction) node).getParent(); } else if (node instanceof Comment) { return (Element) ((Comment) node).getParent(); } return null; } public NodePointer createChild("
      },
      {
        "txt": "JXPathContext context, QName name, int index) { if (index == WHOLE_COLLECTION) { index = 0; } boolean success = getAbstractFactory(context).createObject( context,"
      },
      {
        "txt": "this, node, name.toString(), index); if (success) { NodeTest nodeTest; String prefix = name.getPrefix(); String namespaceURI = prefix != null ? context.getNamespaceURI(prefix) : context.getDefaultNamespaceURI();"
      },
      {
        "txt": "nodeTest = new NodeNameTest(name, namespaceURI); NodeIterator it = childIterator(nodeTest, false, null); if (it != null && it.setPosition(index + 1)) { return it.getNodePointer(); } } throw new JXPathAbstractFactoryException(\"Factory could not create \" + \"a child node for path: \" + asPath() + \"/\" + name + \"[\" + (index + 1) + \"]\");"
      },
      {
        "txt": "} public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { NodePointer ptr = createChild(context, name, index); ptr.setValue(value); return ptr; } public NodePointer createAttribute(JXPathContext context, QName name) { if (!(node instanceof Element)) {"
      },
      {
        "txt": "return super.createAttribute(context, name); } Element element = (Element) node; String prefix = name.getPrefix(); if (prefix != null) { Namespace ns = element.getNamespace(prefix); if (ns == null) { throw new JXPathException( \"Unknown namespace prefix: \" + prefix); }"
      },
      {
        "txt": "Attribute attr = element.getAttribute(name.getName(), ns); if (attr == null) { element.setAttribute(name.getName(), \"\", ns); } } else { Attribute attr = element.getAttribute(name.getName()); if (attr == null) { element.setAttribute(name.getName(), \"\"); }"
      },
      {
        "txt": "} NodeIterator it = attributeIterator(name); it.setPosition(1); return it.getNodePointer(); } public void remove() { Element parent = nodeParent(node); if (parent == null) { throw new JXPathException(\"Cannot remove root JDOM node\"); }"
      },
      {
        "txt": "parent.getContent().remove(node); } public String asPath() { if (id != null) { return \"id('\" + escape(id) + \"')\"; } StringBuffer buffer = new StringBuffer(); if (parent != null) { buffer.append(parent.asPath()); }"
      },
      {
        "txt": "if (node instanceof Element) { if (parent instanceof JDOMNodePointer) { if (buffer.length() == 0 || buffer.charAt(buffer.length() - 1) != '/') { buffer.append('/'); } String nsURI = getNamespaceURI(); String ln = JDOMNodePointer.getLocalName(node); if (equalStrings(nsURI, getNamespaceResolver().getDefaultNamespaceURI())) {"
      },
      {
        "txt": "buffer.append(ln); buffer.append('['); buffer.append(getRelativePositionByName()).append(']'); } else { String prefix = getNamespaceResolver().getPrefix(nsURI); if (prefix != null) { buffer.append(prefix); buffer.append(':'); buffer.append(ln);"
      },
      {
        "txt": "buffer.append('['); buffer.append(getRelativePositionByName()); buffer.append(']'); } else { buffer.append(\"node()\"); buffer.append('['); buffer.append(getRelativePositionOfElement()); buffer.append(']'); }"
      },
      {
        "txt": "} } } else if (node instanceof Text || node instanceof CDATA) { buffer.append(\"/text()\"); buffer.append('[').append(getRelativePositionOfTextNode()).append( ']'); } else if (node instanceof ProcessingInstruction) { String target = ((ProcessingInstruction) node).getTarget();"
      },
      {
        "txt": "buffer.append(\"/processing-instruction(\\'\").append(target).append( \"')\"); buffer.append('[').append(getRelativePositionOfPI(target)).append( ']'); } return buffer.toString(); } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) {"
      },
      {
        "txt": "string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index)"
      },
      {
        "txt": "+ \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } private int getRelativePositionByName() { if (node instanceof Element) { Object parent = ((Element) node).getParent(); if (!(parent instanceof Element)) {"
      },
      {
        "txt": "return 1; } List children = ((Element)parent).getContent(); int count = 0; String name = ((Element) node).getQualifiedName(); for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if ((child instanceof Element) && ((Element) child).getQualifiedName().equals(name)) { count++;"
      },
      {
        "txt": "} if (child == node) { break; } } return count; } return 1; } private int getRelativePositionOfElement() {"
      },
      {
        "txt": "Object parent = ((Element) node).getParent(); if (parent == null) { return 1; } List children; if (parent instanceof Element) { children = ((Element) parent).getContent(); } else { children = ((Document) parent).getContent();"
      },
      {
        "txt": "} int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Element) { count++; } if (child == node) { break; }"
      },
      {
        "txt": "} return count; } private int getRelativePositionOfTextNode() { Element parent; if (node instanceof Text) { parent = (Element) ((Text) node).getParent(); } else { parent = (Element) ((CDATA) node).getParent();"
      },
      {
        "txt": "} if (parent == null) { return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof Text || child instanceof CDATA) { count++;"
      },
      {
        "txt": "} if (child == node) { break; } } return count; } private int getRelativePositionOfPI(String target) { Element parent = (Element) ((ProcessingInstruction) node).getParent(); if (parent == null) {"
      },
      {
        "txt": "return 1; } List children = parent.getContent(); int count = 0; for (int i = 0; i < children.size(); i++) { Object child = children.get(i); if (child instanceof ProcessingInstruction && (target == null || target.equals( ((ProcessingInstruction) child).getTarget()))) {"
      },
      {
        "txt": "count++; } if (child == node) { break; } } return count; } public int hashCode() { return System.identityHashCode(node);"
      },
      {
        "txt": "} public boolean equals(Object object) { if (object == this) { return true; } if (!(object instanceof JDOMNodePointer)) { return false; } JDOMNodePointer other = (JDOMNodePointer) object; return node == other.node;"
      },
      {
        "txt": "} private AbstractFactory getAbstractFactory(JXPathContext context) { AbstractFactory factory = context.getFactory(); if (factory == null) { throw new JXPathException( \"Factory is not set on the JXPathContext - cannot create path: \" + asPath()); } return factory; }"
      }
    ]
  }
]
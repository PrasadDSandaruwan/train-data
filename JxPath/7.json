[
  {
    "id": 2189,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThan.java",
    "start-bug-line": 31,
    "end-bug-line": 34,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context)); double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context)); return l > r ? Boolean.TRUE : Boolean.FALSE;",
    "fix": "protected boolean evaluateCompare(int compare) { return compare > 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationGreaterThan extends CoreOperationRelationalExpression { public CoreOperationGreaterThan(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } <extra_id_0> } public String getSymbol() { return \">\"; } }"
      }
    ]
  },
  {
    "id": 2190,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationGreaterThanOrEqual.java",
    "start-bug-line": 32,
    "end-bug-line": 35,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context)); double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context)); return l >= r ? Boolean.TRUE : Boolean.FALSE;",
    "fix": "protected boolean evaluateCompare(int compare) { return compare >= 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationGreaterThanOrEqual extends CoreOperationRelationalExpression { public CoreOperationGreaterThanOrEqual(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } <extra_id_0> } public String getSymbol() { return \">=\"; } }"
      }
    ]
  },
  {
    "id": 2191,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThan.java",
    "start-bug-line": 31,
    "end-bug-line": 34,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context)); double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context)); return l < r ? Boolean.TRUE : Boolean.FALSE;",
    "fix": "protected boolean evaluateCompare(int compare) { return compare < 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationLessThan extends CoreOperationRelationalExpression { public CoreOperationLessThan(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } <extra_id_0> } public String getSymbol() { return \"<\"; } }"
      }
    ]
  },
  {
    "id": 2192,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationLessThanOrEqual.java",
    "start-bug-line": 32,
    "end-bug-line": 35,
    "bug": "public Object computeValue(org.apache.commons.jxpath.ri.EvalContext context) { double l = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[0].computeValue(context)); double r = org.apache.commons.jxpath.ri.InfoSetUtil.doubleValue(args[1].computeValue(context)); return l <= r ? Boolean.TRUE : Boolean.FALSE;",
    "fix": "protected boolean evaluateCompare(int compare) { return compare <= 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public class CoreOperationLessThanOrEqual extends CoreOperationRelationalExpression { public CoreOperationLessThanOrEqual(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } <extra_id_0> } public String getSymbol() { return \"<=\"; } }"
      }
    ]
  },
  {
    "id": 2193,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import java.util.Collection; import java.util.HashSet; import java.util.Iterator;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; <extra_id_0> public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args); } protected final int getPrecedence() { return 3;"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; }"
      }
    ]
  },
  {
    "id": 2194,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 20,
    "end-bug-line": 20,
    "bug": "",
    "fix": "import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; <extra_id_0> public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args); } protected final int getPrecedence() { return 3;"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; }"
      }
    ]
  },
  {
    "id": 2195,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 33,
    "end-bug-line": 33,
    "bug": "",
    "fix": "public final Object computeValue(EvalContext context) { return compute(args[0].computeValue(context), args[1] .computeValue(context)) ? Boolean.TRUE : Boolean.FALSE; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args); } <extra_id_0> protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; }"
      },
      {
        "txt": "return false; }"
      }
    ]
  },
  {
    "id": 2196,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 42,
    "end-bug-line": 42,
    "bug": "",
    "fix": "protected abstract boolean evaluateCompare(int compare);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2197,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 43,
    "end-bug-line": 43,
    "bug": "",
    "fix": "private boolean compute(Object left, Object right) { left = reduce(left); right = reduce(right);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2198,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 44,
    "end-bug-line": 44,
    "bug": "",
    "fix": "if (left instanceof InitialContext) { ((InitialContext) left).reset(); } if (right instanceof InitialContext) { ((InitialContext) right).reset(); } if (left instanceof Iterator && right instanceof Iterator) { return findMatch((Iterator) left, (Iterator) right); } if (left instanceof Iterator) { return containsMatch((Iterator) left, right); } if (right instanceof Iterator) { return containsMatch((Iterator) right, left); } return evaluateCompare(compare(left, right)); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2199,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 45,
    "end-bug-line": 45,
    "bug": "",
    "fix": "private Object reduce(Object o) { if (o instanceof SelfContext) { o = ((EvalContext) o).getSingleNodePointer(); } if (o instanceof Collection) { o = ((Collection) o).iterator(); } return o; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2200,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 46,
    "end-bug-line": 46,
    "bug": "",
    "fix": "private boolean containsMatch(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (evaluateCompare(compare(element, value))) { return true; } } return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2201,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 47,
    "end-bug-line": 47,
    "bug": "",
    "fix": "private boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) { if (containsMatch(left.iterator(), rit.next())) { return true; } } return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 2202,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 48,
    "end-bug-line": 48,
    "bug": "",
    "fix": "private int compare(Object l, Object r) { double ld = InfoSetUtil.doubleValue(l); double rd = InfoSetUtil.doubleValue(r); return ld == rd ? 0 : ld < rd ? -1 : 1; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args);"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } <extra_id_0> }"
      }
    ]
  }
]
[
  {
    "id": 2203,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 76,
    "end-bug-line": 76,
    "bug": "",
    "fix": "if (Double.isNaN(ld)) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.ri.EvalContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args); } public final Object computeValue(EvalContext context) { return compute(args[0].computeValue(context), args[1] .computeValue(context)) ? Boolean.TRUE : Boolean.FALSE;"
      },
      {
        "txt": "} protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } protected abstract boolean evaluateCompare(int compare); private boolean compute(Object left, Object right) { left = reduce(left);"
      },
      {
        "txt": "right = reduce(right); if (left instanceof InitialContext) { ((InitialContext) left).reset(); } if (right instanceof InitialContext) { ((InitialContext) right).reset(); } if (left instanceof Iterator && right instanceof Iterator) { return findMatch((Iterator) left, (Iterator) right); }"
      },
      {
        "txt": "return containsMatch((Iterator) left, right); } if (right instanceof Iterator) { return containsMatch((Iterator) right, left); } double ld = InfoSetUtil.doubleValue(left); <extra_id_0> return evaluateCompare(ld == rd ? 0 : ld < rd ? -1 : 1); } private Object reduce(Object o) { if (o instanceof SelfContext) { o = ((EvalContext) o).getSingleNodePointer(); }"
      },
      {
        "txt": "o = ((EvalContext) o).getSingleNodePointer(); } if (o instanceof Collection) { o = ((Collection) o).iterator(); } return o; } private boolean containsMatch(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next();"
      },
      {
        "txt": "if (compute(element, value)) { return true; } } return false; } private boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next());"
      },
      {
        "txt": "} while (rit.hasNext()) { if (containsMatch(left.iterator(), rit.next())) { return true; } } return false; }"
      }
    ]
  },
  {
    "id": 2204,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationRelationalExpression.java",
    "start-bug-line": 77,
    "end-bug-line": 77,
    "bug": "",
    "fix": "if (Double.isNaN(rd)) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationRelationalExpression extends CoreOperation { protected CoreOperationRelationalExpression(Expression[] args) { super(args); } public final Object computeValue(EvalContext context) { return compute(args[0].computeValue(context), args[1] .computeValue(context)) ? Boolean.TRUE : Boolean.FALSE; }"
      },
      {
        "txt": "protected final int getPrecedence() { return 3; } protected final boolean isSymmetric() { return false; } protected abstract boolean evaluateCompare(int compare); private boolean compute(Object left, Object right) { left = reduce(left); right = reduce(right);"
      },
      {
        "txt": "if (left instanceof InitialContext) { ((InitialContext) left).reset(); } if (right instanceof InitialContext) { ((InitialContext) right).reset(); } if (left instanceof Iterator && right instanceof Iterator) { return findMatch((Iterator) left, (Iterator) right); } if (left instanceof Iterator) {"
      },
      {
        "txt": "} if (right instanceof Iterator) { return containsMatch((Iterator) right, left); } double ld = InfoSetUtil.doubleValue(left); double rd = InfoSetUtil.doubleValue(right); <extra_id_0> } private Object reduce(Object o) { if (o instanceof SelfContext) { o = ((EvalContext) o).getSingleNodePointer(); } if (o instanceof Collection) {"
      },
      {
        "txt": "} if (o instanceof Collection) { o = ((Collection) o).iterator(); } return o; } private boolean containsMatch(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (compute(element, value)) {"
      },
      {
        "txt": "return true; } } return false; } private boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); }"
      },
      {
        "txt": "while (rit.hasNext()) { if (containsMatch(left.iterator(), rit.next())) { return true; } } return false; }"
      }
    ]
  }
]
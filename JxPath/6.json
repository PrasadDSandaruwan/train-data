[
  {
    "id": 2187,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 57,
    "end-bug-line": 57,
    "bug": "if (l instanceof InitialContext || l instanceof SelfContext) {",
    "fix": "if (l instanceof InitialContext) { ((EvalContext) l).reset(); }  if (l instanceof SelfContext) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet;"
      },
      {
        "txt": "import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); }"
      },
      {
        "txt": "EvalContext context, Expression left, Expression right) { Object l = left.compute(context); Object r = right.compute(context); <extra_id_0> l = ((EvalContext) l).getSingleNodePointer(); } if (r instanceof InitialContext || r instanceof SelfContext) { r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) {"
      },
      {
        "txt": "} if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) { r = ((Collection) r).iterator(); } if ((l instanceof Iterator) && !(r instanceof Iterator)) { return contains((Iterator) l, r); }"
      },
      {
        "txt": "if (!(l instanceof Iterator) && (r instanceof Iterator)) { return contains((Iterator) r, l); } if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) {"
      },
      {
        "txt": "Object element = it.next(); if (equal(element, value)) { return true; } } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) {"
      },
      {
        "txt": "left.add(lit.next()); } while (rit.hasNext()) { if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) {"
      },
      {
        "txt": "if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true; } } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue();"
      },
      {
        "txt": "} if (l == r) { return true; } if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); }"
      },
      {
        "txt": "if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r))); } return l != null && l.equals(r); }"
      }
    ]
  },
  {
    "id": 2188,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/CoreOperationCompare.java",
    "start-bug-line": 61,
    "end-bug-line": 61,
    "bug": "if (r instanceof InitialContext || r instanceof SelfContext) {",
    "fix": "if (r instanceof InitialContext) { ((EvalContext) r).reset(); }  if (r instanceof SelfContext) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import java.util.Collection; import java.util.HashSet; import java.util.Iterator; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.InfoSetUtil; import org.apache.commons.jxpath.ri.axes.InitialContext; import org.apache.commons.jxpath.ri.axes.SelfContext; public abstract class CoreOperationCompare extends CoreOperation { public CoreOperationCompare(Expression arg1, Expression arg2) { super(new Expression[] { arg1, arg2 }); } protected boolean equal( EvalContext context, Expression left,"
      },
      {
        "txt": "{ Object l = left.compute(context); Object r = right.compute(context); if (l instanceof InitialContext || l instanceof SelfContext) { l = ((EvalContext) l).getSingleNodePointer(); } <extra_id_0> r = ((EvalContext) r).getSingleNodePointer(); } if (l instanceof Collection) { l = ((Collection) l).iterator(); } if (r instanceof Collection) {"
      },
      {
        "txt": "} if (r instanceof Collection) { r = ((Collection) r).iterator(); } if ((l instanceof Iterator) && !(r instanceof Iterator)) { return contains((Iterator) l, r); } if (!(l instanceof Iterator) && (r instanceof Iterator)) { return contains((Iterator) r, l); }"
      },
      {
        "txt": "if (l instanceof Iterator && r instanceof Iterator) { return findMatch((Iterator) l, (Iterator) r); } return equal(l, r); } protected boolean contains(Iterator it, Object value) { while (it.hasNext()) { Object element = it.next(); if (equal(element, value)) { return true;"
      },
      {
        "txt": "} } return false; } protected boolean findMatch(Iterator lit, Iterator rit) { HashSet left = new HashSet(); while (lit.hasNext()) { left.add(lit.next()); } while (rit.hasNext()) {"
      },
      {
        "txt": "if (contains(left.iterator(), rit.next())) { return true; } } return false; } protected boolean equal(Object l, Object r) { if (l instanceof Pointer && r instanceof Pointer) { if (l.equals(r)) { return true;"
      },
      {
        "txt": "} } if (l instanceof Pointer) { l = ((Pointer) l).getValue(); } if (r instanceof Pointer) { r = ((Pointer) r).getValue(); } if (l == r) { return true;"
      },
      {
        "txt": "} if (l instanceof Boolean || r instanceof Boolean) { return (InfoSetUtil.booleanValue(l) == InfoSetUtil.booleanValue(r)); } if (l instanceof Number || r instanceof Number) { return (InfoSetUtil.doubleValue(l) == InfoSetUtil.doubleValue(r)); } if (l instanceof String || r instanceof String) { return ( InfoSetUtil.stringValue(l).equals(InfoSetUtil.stringValue(r)));"
      },
      {
        "txt": "} return l != null && l.equals(r); }"
      }
    ]
  }
]
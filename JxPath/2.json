[
  {
    "id": 2159,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import org.apache.commons.jxpath.NodeSet;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; <extra_id_0> import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.util.ValueUtils; import java.util.Collections; import java.util.Iterator;"
      },
      {
        "txt": "import java.util.Collections; import java.util.Iterator; import java.util.Locale; public abstract class Expression { protected static final Double ZERO = new Double(0); protected static final Double ONE = new Double(1); protected static final Double NOT_A_NUMBER = new Double(Double.NaN); private boolean contextDependencyKnown = false; private boolean contextDependent; public boolean isContextDependent() {"
      },
      {
        "txt": "if (!contextDependencyKnown) { contextDependent = computeContextDependent(); contextDependencyKnown = true; } return contextDependent; } public abstract boolean computeContextDependent(); public abstract Object computeValue(EvalContext context); public abstract Object compute(EvalContext context); public Iterator iterate(EvalContext context) {"
      },
      {
        "txt": "Object result = compute(context); if (result instanceof EvalContext) { return new ValueIterator((EvalContext) result); } return ValueUtils.iterate(result); } public Iterator iteratePointers(EvalContext context) { Object result = compute(context); if (result == null) { return Collections.EMPTY_LIST.iterator();"
      },
      {
        "txt": "} if (result instanceof EvalContext) { return (EvalContext) result; } return new PointerIterator(ValueUtils.iterate(result), new QName(null, \"value\"), context.getRootContext().getCurrentNodePointer().getLocale()); } public static class PointerIterator implements Iterator { private Iterator iterator;"
      },
      {
        "txt": "private QName qname; private Locale locale; public PointerIterator(Iterator it, QName qname, Locale locale) { this.iterator = it; this.qname = qname; this.locale = locale; } public boolean hasNext() { return iterator.hasNext(); }"
      },
      {
        "txt": "public Object next() { Object o = iterator.next(); return o instanceof Pointer ? o : NodePointer.newNodePointer(qname, o, locale); } public void remove() { throw new UnsupportedOperationException(); } } public static class ValueIterator implements Iterator { private Iterator iterator;"
      },
      {
        "txt": "public ValueIterator(Iterator it) { this.iterator = it; } public boolean hasNext() { return iterator.hasNext(); } public Object next() { Object o = iterator.next(); if (o instanceof Pointer) { return ((Pointer) o).getValue();"
      },
      {
        "txt": "} return o; } public void remove() { throw new UnsupportedOperationException(); } }"
      }
    ]
  },
  {
    "id": 2160,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
    "start-bug-line": 77,
    "end-bug-line": 77,
    "bug": "",
    "fix": "if (result instanceof NodeSet) { return new ValueIterator(((NodeSet) result).getPointers().iterator()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.util.ValueUtils; import java.util.Collections; import java.util.Iterator; import java.util.Locale; public abstract class Expression { protected static final Double ZERO = new Double(0); protected static final Double ONE = new Double(1); protected static final Double NOT_A_NUMBER = new Double(Double.NaN);"
      },
      {
        "txt": "private boolean contextDependencyKnown = false; private boolean contextDependent; public boolean isContextDependent() { if (!contextDependencyKnown) { contextDependent = computeContextDependent(); contextDependencyKnown = true; } return contextDependent; } public abstract boolean computeContextDependent();"
      },
      {
        "txt": "public abstract Object compute(EvalContext context); public Iterator iterate(EvalContext context) { Object result = compute(context); if (result instanceof EvalContext) { return new ValueIterator((EvalContext) result); } <extra_id_0> } public Iterator iteratePointers(EvalContext context) { Object result = compute(context); if (result == null) { return Collections.EMPTY_LIST.iterator(); }"
      },
      {
        "txt": "return Collections.EMPTY_LIST.iterator(); } if (result instanceof EvalContext) { return (EvalContext) result; } return new PointerIterator(ValueUtils.iterate(result), new QName(null, \"value\"), context.getRootContext().getCurrentNodePointer().getLocale()); } public static class PointerIterator implements Iterator {"
      },
      {
        "txt": "private Iterator iterator; private QName qname; private Locale locale; public PointerIterator(Iterator it, QName qname, Locale locale) { this.iterator = it; this.qname = qname; this.locale = locale; } public boolean hasNext() { return iterator.hasNext();"
      },
      {
        "txt": "} public Object next() { Object o = iterator.next(); return o instanceof Pointer ? o : NodePointer.newNodePointer(qname, o, locale); } public void remove() { throw new UnsupportedOperationException(); } } public static class ValueIterator implements Iterator {"
      },
      {
        "txt": "private Iterator iterator; public ValueIterator(Iterator it) { this.iterator = it; } public boolean hasNext() { return iterator.hasNext(); } public Object next() { Object o = iterator.next(); if (o instanceof Pointer) {"
      },
      {
        "txt": "return ((Pointer) o).getValue(); } return o; } public void remove() { throw new UnsupportedOperationException(); } }"
      }
    ]
  },
  {
    "id": 2161,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
    "start-bug-line": 88,
    "end-bug-line": 88,
    "bug": "",
    "fix": "if (result instanceof NodeSet) { return new PointerIterator(((NodeSet) result).getPointers().iterator(), new QName(null, \"value\"), context.getRootContext().getCurrentNodePointer().getLocale()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.util.ValueUtils; import java.util.Collections; import java.util.Iterator; import java.util.Locale; public abstract class Expression { protected static final Double ZERO = new Double(0); protected static final Double ONE = new Double(1); protected static final Double NOT_A_NUMBER = new Double(Double.NaN);"
      },
      {
        "txt": "private boolean contextDependencyKnown = false; private boolean contextDependent; public boolean isContextDependent() { if (!contextDependencyKnown) { contextDependent = computeContextDependent(); contextDependencyKnown = true; } return contextDependent; } public abstract boolean computeContextDependent();"
      },
      {
        "txt": "public abstract Object computeValue(EvalContext context); public abstract Object compute(EvalContext context); public Iterator iterate(EvalContext context) { Object result = compute(context); if (result instanceof EvalContext) { return new ValueIterator((EvalContext) result); } return ValueUtils.iterate(result); } public Iterator iteratePointers(EvalContext context) {"
      },
      {
        "txt": "if (result == null) { return Collections.EMPTY_LIST.iterator(); } if (result instanceof EvalContext) { return (EvalContext) result; } <extra_id_0> new QName(null, \"value\"), context.getRootContext().getCurrentNodePointer().getLocale()); } public static class PointerIterator implements Iterator { private Iterator iterator; private QName qname;"
      },
      {
        "txt": "private Iterator iterator; private QName qname; private Locale locale; public PointerIterator(Iterator it, QName qname, Locale locale) { this.iterator = it; this.qname = qname; this.locale = locale; } public boolean hasNext() { return iterator.hasNext();"
      },
      {
        "txt": "} public Object next() { Object o = iterator.next(); return o instanceof Pointer ? o : NodePointer.newNodePointer(qname, o, locale); } public void remove() { throw new UnsupportedOperationException(); } } public static class ValueIterator implements Iterator {"
      },
      {
        "txt": "private Iterator iterator; public ValueIterator(Iterator it) { this.iterator = it; } public boolean hasNext() { return iterator.hasNext(); } public Object next() { Object o = iterator.next(); if (o instanceof Pointer) {"
      },
      {
        "txt": "return ((Pointer) o).getValue(); } return o; } public void remove() { throw new UnsupportedOperationException(); } }"
      }
    ]
  },
  {
    "id": 2162,
    "file_path": "src/java/org/apache/commons/jxpath/ri/compiler/Expression.java",
    "start-bug-line": 145,
    "end-bug-line": 145,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.compiler; import org.apache.commons.jxpath.Pointer; import org.apache.commons.jxpath.ri.EvalContext; import org.apache.commons.jxpath.ri.model.NodePointer; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.util.ValueUtils;"
      },
      {
        "txt": "import java.util.Collections; import java.util.Iterator; import java.util.Locale; public abstract class Expression { protected static final Double ZERO = new Double(0); protected static final Double ONE = new Double(1); protected static final Double NOT_A_NUMBER = new Double(Double.NaN); private boolean contextDependencyKnown = false; private boolean contextDependent; public boolean isContextDependent() {"
      },
      {
        "txt": "if (!contextDependencyKnown) { contextDependent = computeContextDependent(); contextDependencyKnown = true; } return contextDependent; } public abstract boolean computeContextDependent(); public abstract Object computeValue(EvalContext context); public abstract Object compute(EvalContext context); public Iterator iterate(EvalContext context) {"
      },
      {
        "txt": "Object result = compute(context); if (result instanceof EvalContext) { return new ValueIterator((EvalContext) result); } return ValueUtils.iterate(result); } public Iterator iteratePointers(EvalContext context) { Object result = compute(context); if (result == null) { return Collections.EMPTY_LIST.iterator();"
      },
      {
        "txt": "} if (result instanceof EvalContext) { return (EvalContext) result; } return new PointerIterator(ValueUtils.iterate(result), new QName(null, \"value\"), context.getRootContext().getCurrentNodePointer().getLocale()); } public static class PointerIterator implements Iterator { private Iterator iterator;"
      },
      {
        "txt": "private QName qname; private Locale locale; public PointerIterator(Iterator it, QName qname, Locale locale) { this.iterator = it; this.qname = qname; this.locale = locale; } public boolean hasNext() { return iterator.hasNext(); }"
      },
      {
        "txt": "public Object next() { Object o = iterator.next(); return o instanceof Pointer ? o : NodePointer.newNodePointer(qname, o, locale); } public void remove() { throw new UnsupportedOperationException(); } } public static class ValueIterator implements Iterator { private Iterator iterator;"
      },
      {
        "txt": "public ValueIterator(Iterator it) { this.iterator = it; } public boolean hasNext() { return iterator.hasNext(); } public Object next() { Object o = iterator.next(); if (o instanceof Pointer) { return ((Pointer) o).getValue();"
      },
      {
        "txt": "return o; } public void remove() { throw new UnsupportedOperationException(); } } <extra_id_0>"
      }
    ]
  }
]
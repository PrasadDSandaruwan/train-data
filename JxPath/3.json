[
  {
    "id": 2163,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import org.apache.commons.jxpath.AbstractFactory; import org.apache.commons.jxpath.JXPathAbstractFactoryException;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.beans; <extra_id_0> import org.apache.commons.jxpath.JXPathInvalidAccessException; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.model.NodePointer; public class NullPropertyPointer extends PropertyPointer { private String propertyName = \"*\"; private boolean byNameAttribute = false;"
      },
      {
        "txt": "private String propertyName = \"*\"; private boolean byNameAttribute = false; public NullPropertyPointer(NodePointer parent) { super(parent); } public QName getName() { return new QName(propertyName); } public void setPropertyIndex(int index) { }"
      },
      {
        "txt": "public int getLength() { return 0; } public Object getBaseValue() { return null; } public Object getImmediateNode() { return null; } public boolean isLeaf() {"
      },
      {
        "txt": "return true; } public NodePointer getValuePointer() { return new NullPointer(this, new QName(getPropertyName())); } protected boolean isActualProperty() { return false; } public boolean isActual() { return false;"
      },
      {
        "txt": "} public boolean isContainer() { return true; } public void setValue(Object value) { if (parent == null || parent.isContainer()) { throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", the target object is null\");"
      },
      {
        "txt": "} else if (parent instanceof PropertyOwnerPointer && ((PropertyOwnerPointer) parent). isDynamicPropertyDeclarationSupported()){ PropertyPointer propertyPointer = ((PropertyOwnerPointer) parent).getPropertyPointer(); propertyPointer.setPropertyName(propertyName); propertyPointer.setValue(value); } else {"
      },
      {
        "txt": "throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", path does not match a changeable location\"); } } public NodePointer createPath(JXPathContext context) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { return newParent.createAttribute(context, getName());"
      },
      {
        "txt": "} else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), getIndex()); } } public NodePointer createPath(JXPathContext context, Object value) {"
      },
      {
        "txt": "NodePointer newParent = parent.createPath(context); if (isAttribute()) { NodePointer pointer = newParent.createAttribute(context, getName()); pointer.setValue(value); return pointer; } else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer();"
      },
      {
        "txt": "} return newParent.createChild(context, getName(), index, value); } } public NodePointer createChild( JXPathContext context, QName name, int index) { return createPath(context).createChild(context, name, index);"
      },
      {
        "txt": "} public NodePointer createChild( JXPathContext context, QName name, int index, Object value) { return createPath(context).createChild(context, name, index, value); } public String getPropertyName() {"
      },
      {
        "txt": "return propertyName; } public void setPropertyName(String propertyName) { this.propertyName = propertyName; } public void setNameAttributeValue(String attributeValue) { this.propertyName = attributeValue; byNameAttribute = true; } public boolean isCollection() {"
      },
      {
        "txt": "return getIndex() != WHOLE_COLLECTION; } public int getPropertyCount() { return 0; } public String[] getPropertyNames() { return new String[0]; } public String asPath() { if (!byNameAttribute) {"
      },
      {
        "txt": "return super.asPath(); } else { StringBuffer buffer = new StringBuffer(); buffer.append(getImmediateParentPointer().asPath()); buffer.append(\"[@name='\"); buffer.append(escape(getPropertyName())); buffer.append(\"']\"); if (index != WHOLE_COLLECTION) { buffer.append('[').append(index + 1).append(']');"
      },
      {
        "txt": "} return buffer.toString(); } } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\""
      },
      {
        "txt": "+ string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"');"
      },
      {
        "txt": "} return string; }"
      }
    ]
  },
  {
    "id": 2164,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
    "start-bug-line": 109,
    "end-bug-line": 109,
    "bug": "",
    "fix": "if (parent instanceof NullPointer && parent.equals(newParent)) { throw createBadFactoryException(context.getFactory()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathInvalidAccessException; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.model.NodePointer; public class NullPropertyPointer extends PropertyPointer { private String propertyName = \"*\"; private boolean byNameAttribute = false; public NullPropertyPointer(NodePointer parent) { super(parent); }"
      },
      {
        "txt": "public QName getName() { return new QName(propertyName); } public void setPropertyIndex(int index) { } public int getLength() { return 0; } public Object getBaseValue() { return null;"
      },
      {
        "txt": "} public Object getImmediateNode() { return null; } public boolean isLeaf() { return true; } public NodePointer getValuePointer() { return new NullPointer(this, new QName(getPropertyName())); }"
      },
      {
        "txt": "protected boolean isActualProperty() { return false; } public boolean isActual() { return false; } public boolean isContainer() { return true; } public void setValue(Object value) {"
      },
      {
        "txt": "if (parent == null || parent.isContainer()) { throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", the target object is null\"); } else if (parent instanceof PropertyOwnerPointer && ((PropertyOwnerPointer) parent). isDynamicPropertyDeclarationSupported()){ PropertyPointer propertyPointer ="
      },
      {
        "txt": "((PropertyOwnerPointer) parent).getPropertyPointer(); propertyPointer.setPropertyName(propertyName); propertyPointer.setValue(value); } else { throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", path does not match a changeable location\"); }"
      },
      {
        "txt": "public NodePointer createPath(JXPathContext context) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { return newParent.createAttribute(context, getName()); } else { <extra_id_0> if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), getIndex()); }"
      },
      {
        "txt": "return newParent.createChild(context, getName(), getIndex()); } } public NodePointer createPath(JXPathContext context, Object value) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { NodePointer pointer = newParent.createAttribute(context, getName()); pointer.setValue(value); return pointer; }"
      },
      {
        "txt": "else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), index, value); } } public NodePointer createChild( JXPathContext context,"
      },
      {
        "txt": "QName name, int index) { return createPath(context).createChild(context, name, index); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ return createPath(context).createChild(context, name, index, value); } public String getPropertyName() { return propertyName; } public void setPropertyName(String propertyName) { this.propertyName = propertyName; } public void setNameAttributeValue(String attributeValue) {"
      },
      {
        "txt": "this.propertyName = attributeValue; byNameAttribute = true; } public boolean isCollection() { return getIndex() != WHOLE_COLLECTION; } public int getPropertyCount() { return 0; } public String[] getPropertyNames() {"
      },
      {
        "txt": "return new String[0]; } public String asPath() { if (!byNameAttribute) { return super.asPath(); } else { StringBuffer buffer = new StringBuffer(); buffer.append(getImmediateParentPointer().asPath()); buffer.append(\"[@name='\");"
      },
      {
        "txt": "buffer.append(escape(getPropertyName())); buffer.append(\"']\"); if (index != WHOLE_COLLECTION) { buffer.append('[').append(index + 1).append(']'); } return buffer.toString(); } } private String escape(String string) { int index = string.indexOf('\\'');"
      },
      {
        "txt": "while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string ="
      },
      {
        "txt": "string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; }"
      }
    ]
  },
  {
    "id": 2165,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
    "start-bug-line": 138,
    "end-bug-line": 138,
    "bug": "",
    "fix": "if (parent instanceof NullPointer && parent.equals(newParent)) { throw createBadFactoryException(context.getFactory()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.beans; import org.apache.commons.jxpath.JXPathContext; import org.apache.commons.jxpath.JXPathInvalidAccessException; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.model.NodePointer; public class NullPropertyPointer extends PropertyPointer {"
      },
      {
        "txt": "private String propertyName = \"*\"; private boolean byNameAttribute = false; public NullPropertyPointer(NodePointer parent) { super(parent); } public QName getName() { return new QName(propertyName); } public void setPropertyIndex(int index) { }"
      },
      {
        "txt": "public int getLength() { return 0; } public Object getBaseValue() { return null; } public Object getImmediateNode() { return null; } public boolean isLeaf() {"
      },
      {
        "txt": "return true; } public NodePointer getValuePointer() { return new NullPointer(this, new QName(getPropertyName())); } protected boolean isActualProperty() { return false; } public boolean isActual() { return false;"
      },
      {
        "txt": "} public boolean isContainer() { return true; } public void setValue(Object value) { if (parent == null || parent.isContainer()) { throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", the target object is null\");"
      },
      {
        "txt": "} else if (parent instanceof PropertyOwnerPointer && ((PropertyOwnerPointer) parent). isDynamicPropertyDeclarationSupported()){ PropertyPointer propertyPointer = ((PropertyOwnerPointer) parent).getPropertyPointer(); propertyPointer.setPropertyName(propertyName); propertyPointer.setValue(value); } else {"
      },
      {
        "txt": "throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", path does not match a changeable location\"); } } public NodePointer createPath(JXPathContext context) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { return newParent.createAttribute(context, getName());"
      },
      {
        "txt": "} else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), getIndex()); } } public NodePointer createPath(JXPathContext context, Object value) {"
      },
      {
        "txt": "if (isAttribute()) { NodePointer pointer = newParent.createAttribute(context, getName()); pointer.setValue(value); return pointer; } else { <extra_id_0> PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), index, value); } }"
      },
      {
        "txt": "} } public NodePointer createChild( JXPathContext context, QName name, int index) { return createPath(context).createChild(context, name, index); } public NodePointer createChild("
      },
      {
        "txt": "JXPathContext context, QName name, int index, Object value) { return createPath(context).createChild(context, name, index, value); } public String getPropertyName() { return propertyName; }"
      },
      {
        "txt": "public void setPropertyName(String propertyName) { this.propertyName = propertyName; } public void setNameAttributeValue(String attributeValue) { this.propertyName = attributeValue; byNameAttribute = true; } public boolean isCollection() { return getIndex() != WHOLE_COLLECTION; }"
      },
      {
        "txt": "public int getPropertyCount() { return 0; } public String[] getPropertyNames() { return new String[0]; } public String asPath() { if (!byNameAttribute) { return super.asPath(); }"
      },
      {
        "txt": "else { StringBuffer buffer = new StringBuffer(); buffer.append(getImmediateParentPointer().asPath()); buffer.append(\"[@name='\"); buffer.append(escape(getPropertyName())); buffer.append(\"']\"); if (index != WHOLE_COLLECTION) { buffer.append('[').append(index + 1).append(']'); } return buffer.toString();"
      },
      {
        "txt": "} } private String escape(String string) { int index = string.indexOf('\\''); while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\'');"
      },
      {
        "txt": "} index = string.indexOf('\\\"'); while (index != -1) { string = string.substring(0, index) + \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string;"
      }
    ]
  },
  {
    "id": 2166,
    "file_path": "src/java/org/apache/commons/jxpath/ri/model/beans/NullPropertyPointer.java",
    "start-bug-line": 224,
    "end-bug-line": 224,
    "bug": "",
    "fix": " private JXPathAbstractFactoryException createBadFactoryException(AbstractFactory factory) { return new JXPathAbstractFactoryException(\"Factory \" + factory + \" reported success creating object for path: \" + asPath() + \" but object was null.  Terminating to avoid stack recursion.\"); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.jxpath.ri.model.beans; import org.apache.commons.jxpath.JXPathContext;"
      },
      {
        "txt": "import org.apache.commons.jxpath.JXPathInvalidAccessException; import org.apache.commons.jxpath.ri.QName; import org.apache.commons.jxpath.ri.model.NodePointer; public class NullPropertyPointer extends PropertyPointer { private String propertyName = \"*\"; private boolean byNameAttribute = false; public NullPropertyPointer(NodePointer parent) { super(parent); } public QName getName() {"
      },
      {
        "txt": "return new QName(propertyName); } public void setPropertyIndex(int index) { } public int getLength() { return 0; } public Object getBaseValue() { return null; }"
      },
      {
        "txt": "public Object getImmediateNode() { return null; } public boolean isLeaf() { return true; } public NodePointer getValuePointer() { return new NullPointer(this, new QName(getPropertyName())); } protected boolean isActualProperty() {"
      },
      {
        "txt": "return false; } public boolean isActual() { return false; } public boolean isContainer() { return true; } public void setValue(Object value) { if (parent == null || parent.isContainer()) {"
      },
      {
        "txt": "throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", the target object is null\"); } else if (parent instanceof PropertyOwnerPointer && ((PropertyOwnerPointer) parent). isDynamicPropertyDeclarationSupported()){ PropertyPointer propertyPointer = ((PropertyOwnerPointer) parent).getPropertyPointer();"
      },
      {
        "txt": "propertyPointer.setPropertyName(propertyName); propertyPointer.setValue(value); } else { throw new JXPathInvalidAccessException( \"Cannot set property \" + asPath() + \", path does not match a changeable location\"); } }"
      },
      {
        "txt": "public NodePointer createPath(JXPathContext context) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { return newParent.createAttribute(context, getName()); } else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); }"
      },
      {
        "txt": "return newParent.createChild(context, getName(), getIndex()); } } public NodePointer createPath(JXPathContext context, Object value) { NodePointer newParent = parent.createPath(context); if (isAttribute()) { NodePointer pointer = newParent.createAttribute(context, getName()); pointer.setValue(value); return pointer; }"
      },
      {
        "txt": "else { if (newParent instanceof PropertyOwnerPointer) { PropertyOwnerPointer pop = (PropertyOwnerPointer) newParent; newParent = pop.getPropertyPointer(); } return newParent.createChild(context, getName(), index, value); } } public NodePointer createChild( JXPathContext context,"
      },
      {
        "txt": "QName name, int index) { return createPath(context).createChild(context, name, index); } public NodePointer createChild( JXPathContext context, QName name, int index, Object value)"
      },
      {
        "txt": "{ return createPath(context).createChild(context, name, index, value); } public String getPropertyName() { return propertyName; } public void setPropertyName(String propertyName) { this.propertyName = propertyName; } public void setNameAttributeValue(String attributeValue) {"
      },
      {
        "txt": "this.propertyName = attributeValue; byNameAttribute = true; } public boolean isCollection() { return getIndex() != WHOLE_COLLECTION; } public int getPropertyCount() { return 0; } public String[] getPropertyNames() {"
      },
      {
        "txt": "return new String[0]; } public String asPath() { if (!byNameAttribute) { return super.asPath(); } else { StringBuffer buffer = new StringBuffer(); buffer.append(getImmediateParentPointer().asPath()); buffer.append(\"[@name='\");"
      },
      {
        "txt": "buffer.append(escape(getPropertyName())); buffer.append(\"']\"); if (index != WHOLE_COLLECTION) { buffer.append('[').append(index + 1).append(']'); } return buffer.toString(); } } private String escape(String string) { int index = string.indexOf('\\'');"
      },
      {
        "txt": "while (index != -1) { string = string.substring(0, index) + \"&apos;\" + string.substring(index + 1); index = string.indexOf('\\''); } index = string.indexOf('\\\"'); while (index != -1) { string ="
      },
      {
        "txt": "+ \"&quot;\" + string.substring(index + 1); index = string.indexOf('\\\"'); } return string; } <extra_id_0>"
      }
    ]
  }
]
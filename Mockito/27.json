[
  {
    "id": 2860,
    "file_path": "src/org/mockito/internal/util/MockUtil.java",
    "start-bug-line": 64,
    "end-bug-line": 65,
    "bug": "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) org.mockito.Mockito.withSettings().defaultAnswer(org.mockito.Mockito.RETURNS_DEFAULTS));",
    "fix": "MethodInterceptorFilter newFilter = newMethodInterceptorFilter(oldMockHandler.getMockSettings());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util; import org.mockito.cglib.proxy.Callback; import org.mockito.cglib.proxy.Factory; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.InvocationNotifierHandler; import org.mockito.internal.MockHandler;"
      },
      {
        "txt": "import org.mockito.internal.MockHandlerInterface; import org.mockito.internal.creation.MethodInterceptorFilter; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.util.reflection.LenientCopyTool; import java.io.Serializable; @SuppressWarnings(\"unchecked\") public class MockUtil { private final MockCreationValidator creationValidator; public MockUtil(MockCreationValidator creationValidator) {"
      },
      {
        "txt": "this.creationValidator = creationValidator; } public MockUtil() { this(new MockCreationValidator()); } public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) { creationValidator.validateType(classToMock); creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces()); creationValidator.validateMockedType(classToMock, settings.getSpiedInstance()); settings.initiateMockName(classToMock);"
      },
      {
        "txt": "MethodInterceptorFilter filter = newMethodInterceptorFilter(settings); Class<?>[] interfaces = settings.getExtraInterfaces(); Class<?>[] ancillaryTypes; if (settings.isSerializable()) { ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class); } else { ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces; } Object spiedInstance = settings.getSpiedInstance(); T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);"
      },
      {
        "txt": "new LenientCopyTool().copyToMock(spiedInstance, mock); } return mock; } public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); <extra_id_0> ((Factory) mock).setCallback(0, newFilter); } private <T> MethodInterceptorFilter newMethodInterceptorFilter(MockSettingsImpl settings) { MockHandler<T> mockHandler = new MockHandler<T>(settings); InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings); return new MethodInterceptorFilter(invocationNotifierHandler, settings);"
      },
      {
        "txt": "InvocationNotifierHandler<T> invocationNotifierHandler = new InvocationNotifierHandler<T>(mockHandler, settings); return new MethodInterceptorFilter(invocationNotifierHandler, settings); } public <T> MockHandlerInterface<T> getMockHandler(T mock) { if (mock == null) { throw new NotAMockException(\"Argument should be a mock, but is null!\"); } if (isMockitoMock(mock)) { return (MockHandlerInterface) getInterceptor(mock).getHandler(); } else {"
      },
      {
        "txt": "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass()); } } private <T> boolean isMockitoMock(T mock) { return getInterceptor(mock) != null; } public boolean isMock(Object mock) { return mock != null && isMockitoMock(mock); } private <T> MethodInterceptorFilter getInterceptor(T mock) {"
      },
      {
        "txt": "if (!(mock instanceof Factory)) { return null; } Factory factory = (Factory) mock; Callback callback = factory.getCallback(0); if (callback instanceof MethodInterceptorFilter) { return (MethodInterceptorFilter) callback; } return null; }"
      },
      {
        "txt": "public MockName getMockName(Object mock) { return getMockHandler(mock).getMockSettings().getMockName(); }"
      }
    ]
  }
]
[
  {
    "id": 2813,
    "file_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
    "start-bug-line": 20,
    "end-bug-line": 20,
    "bug": "",
    "fix": "private boolean serializable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.internal.util.MockName; import org.mockito.stubbing.Answer;"
      },
      {
        "txt": "private static final long serialVersionUID = 4475297236197939568L; private Class<?>[] extraInterfaces; private String name; private Object spiedInstance; private Answer<Object> defaultAnswer; private MockName mockName; <extra_id_0> public MockSettings serializable() { return this.extraInterfaces(java.io.Serializable.class); } public MockSettings extraInterfaces(Class<?>... extraInterfaces) { if (extraInterfaces == null || extraInterfaces.length == 0) { new Reporter().extraInterfacesRequiresAtLeastOneInterface();"
      },
      {
        "txt": "if (extraInterfaces == null || extraInterfaces.length == 0) { new Reporter().extraInterfacesRequiresAtLeastOneInterface(); } for (Class<?> i : extraInterfaces) { if (i == null) { new Reporter().extraInterfacesDoesNotAcceptNullParameters(); } else if (!i.isInterface()) { new Reporter().extraInterfacesAcceptsOnlyInterfaces(i); } }"
      },
      {
        "txt": "this.extraInterfaces = extraInterfaces; return this; } public MockName getMockName() { return mockName; } public Class<?>[] getExtraInterfaces() { return extraInterfaces; } public Object getSpiedInstance() {"
      },
      {
        "txt": "return spiedInstance; } public MockSettings name(String name) { this.name = name; return this; } public MockSettings spiedInstance(Object spiedInstance) { this.spiedInstance = spiedInstance; return this; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public MockSettings defaultAnswer(Answer defaultAnswer) { this.defaultAnswer = defaultAnswer; return this; } public Answer<Object> getDefaultAnswer() { return defaultAnswer; } public boolean isSerializable() { return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);"
      },
      {
        "txt": "} public void initiateMockName(Class classToMock) { mockName = new MockName(name, classToMock); }"
      }
    ]
  },
  {
    "id": 2814,
    "file_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
    "start-bug-line": 22,
    "end-bug-line": 22,
    "bug": "return this.extraInterfaces(java.io.Serializable.class);",
    "fix": "this.serializable = true; return this;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.internal.util.MockName; import org.mockito.stubbing.Answer; public class MockSettingsImpl implements MockSettings {"
      },
      {
        "txt": "private Class<?>[] extraInterfaces; private String name; private Object spiedInstance; private Answer<Object> defaultAnswer; private MockName mockName; public MockSettings serializable() { <extra_id_0> } public MockSettings extraInterfaces(Class<?>... extraInterfaces) { if (extraInterfaces == null || extraInterfaces.length == 0) { new Reporter().extraInterfacesRequiresAtLeastOneInterface(); } for (Class<?> i : extraInterfaces) {"
      },
      {
        "txt": "} for (Class<?> i : extraInterfaces) { if (i == null) { new Reporter().extraInterfacesDoesNotAcceptNullParameters(); } else if (!i.isInterface()) { new Reporter().extraInterfacesAcceptsOnlyInterfaces(i); } } this.extraInterfaces = extraInterfaces; return this;"
      },
      {
        "txt": "} public MockName getMockName() { return mockName; } public Class<?>[] getExtraInterfaces() { return extraInterfaces; } public Object getSpiedInstance() { return spiedInstance; }"
      },
      {
        "txt": "public MockSettings name(String name) { this.name = name; return this; } public MockSettings spiedInstance(Object spiedInstance) { this.spiedInstance = spiedInstance; return this; } @SuppressWarnings(\"unchecked\") public MockSettings defaultAnswer(Answer defaultAnswer) {"
      },
      {
        "txt": "this.defaultAnswer = defaultAnswer; return this; } public Answer<Object> getDefaultAnswer() { return defaultAnswer; } public boolean isSerializable() { return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class); } public void initiateMockName(Class classToMock) {"
      },
      {
        "txt": "mockName = new MockName(name, classToMock); }"
      }
    ]
  },
  {
    "id": 2815,
    "file_path": "src/org/mockito/internal/creation/MockSettingsImpl.java",
    "start-bug-line": 74,
    "end-bug-line": 74,
    "bug": "return extraInterfaces != null && java.util.Arrays.asList(extraInterfaces).contains(java.io.Serializable.class);",
    "fix": "return serializable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.internal.util.MockName; import org.mockito.stubbing.Answer; public class MockSettingsImpl implements MockSettings { private static final long serialVersionUID = 4475297236197939568L; private Class<?>[] extraInterfaces;"
      },
      {
        "txt": "private String name; private Object spiedInstance; private Answer<Object> defaultAnswer; private MockName mockName; public MockSettings serializable() { return this.extraInterfaces(java.io.Serializable.class); } public MockSettings extraInterfaces(Class<?>... extraInterfaces) { if (extraInterfaces == null || extraInterfaces.length == 0) { new Reporter().extraInterfacesRequiresAtLeastOneInterface();"
      },
      {
        "txt": "} for (Class<?> i : extraInterfaces) { if (i == null) { new Reporter().extraInterfacesDoesNotAcceptNullParameters(); } else if (!i.isInterface()) { new Reporter().extraInterfacesAcceptsOnlyInterfaces(i); } } this.extraInterfaces = extraInterfaces; return this;"
      },
      {
        "txt": "} public MockName getMockName() { return mockName; } public Class<?>[] getExtraInterfaces() { return extraInterfaces; } public Object getSpiedInstance() { return spiedInstance; }"
      },
      {
        "txt": "public MockSettings name(String name) { this.name = name; return this; } public MockSettings spiedInstance(Object spiedInstance) { this.spiedInstance = spiedInstance; return this; } @SuppressWarnings(\"unchecked\") public MockSettings defaultAnswer(Answer defaultAnswer) {"
      },
      {
        "txt": "return this; } public Answer<Object> getDefaultAnswer() { return defaultAnswer; } public boolean isSerializable() { <extra_id_0> } public void initiateMockName(Class classToMock) { mockName = new MockName(name, classToMock); } }"
      }
    ]
  },
  {
    "id": 2816,
    "file_path": "src/org/mockito/internal/util/MockUtil.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import java.io.Serializable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util; import static org.mockito.Mockito.RETURNS_DEFAULTS; import static org.mockito.Mockito.withSettings; import org.mockito.cglib.proxy.*;"
      },
      {
        "txt": "import org.mockito.internal.MockHandler; import org.mockito.internal.MockHandlerInterface; import org.mockito.internal.creation.MethodInterceptorFilter; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.util.reflection.LenientCopyTool; <extra_id_0> @SuppressWarnings(\"unchecked\") public class MockUtil { private final CreationValidator creationValidator; public MockUtil(CreationValidator creationValidator) { this.creationValidator = creationValidator; }"
      },
      {
        "txt": "this.creationValidator = creationValidator; } public MockUtil() { this(new CreationValidator()); } public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) { creationValidator.validateType(classToMock); creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces()); creationValidator.validateMockedType(classToMock, settings.getSpiedInstance()); settings.initiateMockName(classToMock);"
      },
      {
        "txt": "MockHandler<T> mockHandler = new MockHandler<T>(settings); MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings); Class<?>[] interfaces = settings.getExtraInterfaces(); Class<?>[] ancillaryTypes; ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces; Object spiedInstance = settings.getSpiedInstance(); T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes); if (spiedInstance != null) { new LenientCopyTool().copyToMock(spiedInstance, mock); }"
      },
      {
        "txt": "return mock; } public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)); ((Factory) mock).setCallback(0, newFilter); } public <T> MockHandlerInterface<T> getMockHandler(T mock) {"
      },
      {
        "txt": "if (mock == null) { throw new NotAMockException(\"Argument should be a mock, but is null!\"); } if (isMockitoMock(mock)) { return (MockHandlerInterface) getInterceptor(mock).getHandler(); } else { throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass()); } } private <T> boolean isMockitoMock(T mock) {"
      },
      {
        "txt": "return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null; } public boolean isMock(Object mock) { return mock != null && isMockitoMock(mock); } private <T> MethodInterceptorFilter getInterceptor(T mock) { Factory factory = (Factory) mock; Callback callback = factory.getCallback(0); if (callback instanceof MethodInterceptorFilter) { return (MethodInterceptorFilter) callback;"
      },
      {
        "txt": "} return null; } public MockName getMockName(Object mock) { return getMockHandler(mock).getMockSettings().getMockName(); }"
      }
    ]
  },
  {
    "id": 2817,
    "file_path": "src/org/mockito/internal/util/MockUtil.java",
    "start-bug-line": 45,
    "end-bug-line": 45,
    "bug": "",
    "fix": "if (settings.isSerializable()) { ancillaryTypes = interfaces == null ? new Class<?>[] {Serializable.class} : new ArrayUtils().concat(interfaces, Serializable.class); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util; import static org.mockito.Mockito.RETURNS_DEFAULTS;"
      },
      {
        "txt": "import static org.mockito.Mockito.withSettings; import org.mockito.cglib.proxy.*; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.MockHandler; import org.mockito.internal.MockHandlerInterface; import org.mockito.internal.creation.MethodInterceptorFilter; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.util.reflection.LenientCopyTool; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public class MockUtil { private final CreationValidator creationValidator; public MockUtil(CreationValidator creationValidator) { this.creationValidator = creationValidator; } public MockUtil() { this(new CreationValidator()); } public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) { creationValidator.validateType(classToMock);"
      },
      {
        "txt": "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance()); settings.initiateMockName(classToMock); MockHandler<T> mockHandler = new MockHandler<T>(settings); MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings); Class<?>[] interfaces = settings.getExtraInterfaces(); Class<?>[] ancillaryTypes; <extra_id_0> Object spiedInstance = settings.getSpiedInstance(); T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes); if (spiedInstance != null) { new LenientCopyTool().copyToMock(spiedInstance, mock); } return mock;"
      },
      {
        "txt": "} return mock; } public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)); ((Factory) mock).setCallback(0, newFilter); }"
      },
      {
        "txt": "public <T> MockHandlerInterface<T> getMockHandler(T mock) { if (mock == null) { throw new NotAMockException(\"Argument should be a mock, but is null!\"); } if (isMockitoMock(mock)) { return (MockHandlerInterface) getInterceptor(mock).getHandler(); } else { throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass()); } }"
      },
      {
        "txt": "private <T> boolean isMockitoMock(T mock) { return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null; } public boolean isMock(Object mock) { return mock != null && isMockitoMock(mock); } private <T> MethodInterceptorFilter getInterceptor(T mock) { Factory factory = (Factory) mock; Callback callback = factory.getCallback(0); if (callback instanceof MethodInterceptorFilter) {"
      },
      {
        "txt": "return (MethodInterceptorFilter) callback; } return null; } public MockName getMockName(Object mock) { return getMockHandler(mock).getMockSettings().getMockName(); }"
      }
    ]
  },
  {
    "id": 2818,
    "file_path": "src/org/mockito/internal/util/MockUtil.java",
    "start-bug-line": 46,
    "end-bug-line": 46,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util; import static org.mockito.Mockito.RETURNS_DEFAULTS; import static org.mockito.Mockito.withSettings;"
      },
      {
        "txt": "import org.mockito.cglib.proxy.*; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.MockHandler; import org.mockito.internal.MockHandlerInterface; import org.mockito.internal.creation.MethodInterceptorFilter; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.util.reflection.LenientCopyTool; @SuppressWarnings(\"unchecked\") public class MockUtil {"
      },
      {
        "txt": "private final CreationValidator creationValidator; public MockUtil(CreationValidator creationValidator) { this.creationValidator = creationValidator; } public MockUtil() { this(new CreationValidator()); } public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings) { creationValidator.validateType(classToMock); creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());"
      },
      {
        "txt": "settings.initiateMockName(classToMock); MockHandler<T> mockHandler = new MockHandler<T>(settings); MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings); Class<?>[] interfaces = settings.getExtraInterfaces(); Class<?>[] ancillaryTypes; ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces; <extra_id_0> Object spiedInstance = settings.getSpiedInstance(); T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes); if (spiedInstance != null) { new LenientCopyTool().copyToMock(spiedInstance, mock); } return mock;"
      },
      {
        "txt": "} return mock; } public <T> void resetMock(T mock) { MockHandlerInterface<T> oldMockHandler = getMockHandler(mock); MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler); MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS)); ((Factory) mock).setCallback(0, newFilter); }"
      },
      {
        "txt": "public <T> MockHandlerInterface<T> getMockHandler(T mock) { if (mock == null) { throw new NotAMockException(\"Argument should be a mock, but is null!\"); } if (isMockitoMock(mock)) { return (MockHandlerInterface) getInterceptor(mock).getHandler(); } else { throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass()); } }"
      },
      {
        "txt": "private <T> boolean isMockitoMock(T mock) { return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null; } public boolean isMock(Object mock) { return mock != null && isMockitoMock(mock); } private <T> MethodInterceptorFilter getInterceptor(T mock) { Factory factory = (Factory) mock; Callback callback = factory.getCallback(0); if (callback instanceof MethodInterceptorFilter) {"
      },
      {
        "txt": "return (MethodInterceptorFilter) callback; } return null; } public MockName getMockName(Object mock) { return getMockHandler(mock).getMockSettings().getMockName(); }"
      }
    ]
  }
]
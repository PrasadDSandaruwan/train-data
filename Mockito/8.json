[
  {
    "id": 2780,
    "file_path": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java",
    "start-bug-line": 79,
    "end-bug-line": 79,
    "bug": "} else {",
    "fix": "} else if (typeParameter != actualTypeArgument) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util.reflection; import org.mockito.exceptions.base.MockitoException;"
      },
      {
        "txt": "import org.mockito.internal.util.Checks; import java.lang.reflect.*; import java.util.*; public abstract class GenericMetadataSupport { protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>(); protected void registerTypeVariablesOn(Type classType) { if (!(classType instanceof ParameterizedType)) { return; } ParameterizedType parameterizedType = (ParameterizedType) classType;"
      },
      {
        "txt": "Type[] actualTypeArguments = parameterizedType.getActualTypeArguments(); for (int i = 0; i < actualTypeArguments.length; i++) { TypeVariable typeParameter = typeParameters[i]; Type actualTypeArgument = actualTypeArguments[i]; if (actualTypeArgument instanceof WildcardType) { contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument)); <extra_id_0> contextualActualTypeParameters.put(typeParameter, actualTypeArgument); } } } protected void registerTypeParametersOn(TypeVariable[] typeParameters) { for (TypeVariable typeVariable : typeParameters) {"
      },
      {
        "txt": "protected void registerTypeParametersOn(TypeVariable[] typeParameters) { for (TypeVariable typeVariable : typeParameters) { registerTypeVariableIfNotPresent(typeVariable); } } private void registerTypeVariableIfNotPresent(TypeVariable typeVariable) { if (!contextualActualTypeParameters.containsKey(typeVariable)) { contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable)); } }"
      },
      {
        "txt": "private BoundedType boundsOf(TypeVariable typeParameter) { if (typeParameter.getBounds()[0] instanceof TypeVariable) { return boundsOf((TypeVariable) typeParameter.getBounds()[0]); } return new TypeVarBoundedType(typeParameter); } private BoundedType boundsOf(WildcardType wildCard) { WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard); if (wildCardBoundedType.firstBound() instanceof TypeVariable) { return boundsOf((TypeVariable) wildCardBoundedType.firstBound());"
      },
      {
        "txt": "} return wildCardBoundedType; } public abstract Class<?> rawType(); public List<Type> extraInterfaces() { return Collections.emptyList(); } public Class<?>[] rawExtraInterfaces() { return new Class[0]; }"
      },
      {
        "txt": "public boolean hasRawExtraInterfaces() { return rawExtraInterfaces().length > 0; } public Map<TypeVariable, Type> actualTypeArguments() { TypeVariable[] typeParameters = rawType().getTypeParameters(); LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>(); for (TypeVariable typeParameter : typeParameters) { Type actualType = getActualTypeArgumentFor(typeParameter); actualTypeArguments.put(typeParameter, actualType); }"
      },
      {
        "txt": "return actualTypeArguments; } protected Type getActualTypeArgumentFor(TypeVariable typeParameter) { Type type = this.contextualActualTypeParameters.get(typeParameter); if (type instanceof TypeVariable) { TypeVariable typeVariable = (TypeVariable) type; return getActualTypeArgumentFor(typeVariable); } return type; }"
      },
      {
        "txt": "public GenericMetadataSupport resolveGenericReturnType(Method method) { Type genericReturnType = method.getGenericReturnType(); if (genericReturnType instanceof Class) { return new NotGenericReturnTypeSupport(genericReturnType); } if (genericReturnType instanceof ParameterizedType) { return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType()); } if (genericReturnType instanceof TypeVariable) { return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);"
      },
      {
        "txt": "} throw new MockitoException(\"Ouch, it shouldn't happen, type '\" + genericReturnType.getClass().getCanonicalName() + \"' on method : '\" + method.toGenericString() + \"' is not supported : \" + genericReturnType); } public static GenericMetadataSupport inferFrom(Type type) { Checks.checkNotNull(type, \"type\"); if (type instanceof Class) { return new FromClassGenericMetadataSupport((Class<?>) type); } if (type instanceof ParameterizedType) { return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);"
      },
      {
        "txt": "} throw new MockitoException(\"Type meta-data for this Type (\" + type.getClass().getCanonicalName() + \") is not supported : \" + type); } private static class FromClassGenericMetadataSupport extends GenericMetadataSupport { private final Class<?> clazz; public FromClassGenericMetadataSupport(Class<?> clazz) { this.clazz = clazz; for (Class currentExploredClass = clazz; currentExploredClass != null && currentExploredClass != Object.class; currentExploredClass = superClassOf(currentExploredClass)"
      },
      {
        "txt": ") { readActualTypeParametersOnDeclaringClass(currentExploredClass); } } private Class superClassOf(Class currentExploredClass) { Type genericSuperclass = currentExploredClass.getGenericSuperclass(); if (genericSuperclass instanceof ParameterizedType) { Type rawType = ((ParameterizedType) genericSuperclass).getRawType(); return (Class) rawType; }"
      },
      {
        "txt": "return (Class) genericSuperclass; } private void readActualTypeParametersOnDeclaringClass(Class<?> clazz) { registerTypeParametersOn(clazz.getTypeParameters()); registerTypeVariablesOn(clazz.getGenericSuperclass()); for (Type genericInterface : clazz.getGenericInterfaces()) { registerTypeVariablesOn(genericInterface); } } @Override"
      },
      {
        "txt": "public Class<?> rawType() { return clazz; } } private static class FromParameterizedTypeGenericMetadataSupport extends GenericMetadataSupport { private final ParameterizedType parameterizedType; public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType) { this.parameterizedType = parameterizedType; readActualTypeParameters(); }"
      },
      {
        "txt": "private void readActualTypeParameters() { registerTypeVariablesOn(parameterizedType.getRawType()); registerTypeVariablesOn(parameterizedType); } @Override public Class<?> rawType() { return (Class<?>) parameterizedType.getRawType(); } } private static class ParameterizedReturnType extends GenericMetadataSupport {"
      },
      {
        "txt": "private final ParameterizedType parameterizedType; private final TypeVariable[] typeParameters; public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType) { this.parameterizedType = parameterizedType; this.typeParameters = typeParameters; this.contextualActualTypeParameters = source.contextualActualTypeParameters; readTypeParameters(); readTypeVariables(); } private void readTypeParameters() {"
      },
      {
        "txt": "registerTypeParametersOn(typeParameters); } private void readTypeVariables() { registerTypeVariablesOn(parameterizedType); } @Override public Class<?> rawType() { return (Class<?>) parameterizedType.getRawType(); } }"
      },
      {
        "txt": "private static class TypeVariableReturnType extends GenericMetadataSupport { private final TypeVariable typeVariable; private final TypeVariable[] typeParameters; private Class<?> rawType; public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable) { this.typeParameters = typeParameters; this.typeVariable = typeVariable; this.contextualActualTypeParameters = source.contextualActualTypeParameters; readTypeParameters(); readTypeVariables();"
      },
      {
        "txt": "} private void readTypeParameters() { registerTypeParametersOn(typeParameters); } private void readTypeVariables() { for (Type type : typeVariable.getBounds()) { registerTypeVariablesOn(type); } registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable)); }"
      },
      {
        "txt": "@Override public Class<?> rawType() { if (rawType == null) { rawType = extractRawTypeOf(typeVariable); } return rawType; } private Class<?> extractRawTypeOf(Type type) { if (type instanceof Class) { return (Class<?>) type;"
      },
      {
        "txt": "} if (type instanceof ParameterizedType) { return (Class<?>) ((ParameterizedType) type).getRawType(); } if (type instanceof BoundedType) { return extractRawTypeOf(((BoundedType) type).firstBound()); } if (type instanceof TypeVariable) { return extractRawTypeOf(contextualActualTypeParameters.get(type)); }"
      },
      {
        "txt": "throw new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\"); } @Override public List<Type> extraInterfaces() { Type type = extractActualBoundedTypeOf(typeVariable); if (type instanceof BoundedType) { return Arrays.asList(((BoundedType) type).interfaceBounds()); } if (type instanceof ParameterizedType) { return Collections.singletonList(type);"
      },
      {
        "txt": "} if (type instanceof Class) { return Collections.emptyList(); } throw new MockitoException(\"Cannot extract extra-interfaces from '\" + typeVariable + \"' : '\" + type + \"'\"); } public Class<?>[] rawExtraInterfaces() { List<Type> extraInterfaces = extraInterfaces(); List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>(); for (Type extraInterface : extraInterfaces) {"
      },
      {
        "txt": "Class<?> rawInterface = extractRawTypeOf(extraInterface); if(!rawType().equals(rawInterface)) { rawExtraInterfaces.add(rawInterface); } } return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]); } private Type extractActualBoundedTypeOf(Type type) { if (type instanceof TypeVariable) { If type is a TypeVariable, then it is needed to gather data elsewhere. Usually TypeVariables are declared"
      },
      {
        "txt": "on the class definition, such as such as List<E>. return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type)); } if (type instanceof BoundedType) { Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound()); if (!(actualFirstBound instanceof BoundedType)) { return type; // avoid going one step further, ie avoid : O(TypeVar) -> K(TypeVar) -> Some ParamType } return actualFirstBound; }"
      },
      {
        "txt": "return type; // irrelevant, we don't manage other types as they are not bounded. } } private static class NotGenericReturnTypeSupport extends GenericMetadataSupport { private final Class<?> returnType; public NotGenericReturnTypeSupport(Type genericReturnType) { returnType = (Class<?>) genericReturnType; } @Override public Class<?> rawType() {"
      },
      {
        "txt": "return returnType; } } public interface BoundedType extends Type { Type firstBound(); Type[] interfaceBounds(); } public static class TypeVarBoundedType implements BoundedType { private final TypeVariable typeVariable; public TypeVarBoundedType(TypeVariable typeVariable) {"
      },
      {
        "txt": "this.typeVariable = typeVariable; } public Type firstBound() { return typeVariable.getBounds()[0]; // } public Type[] interfaceBounds() { Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1]; System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1); return interfaceBounds; }"
      },
      {
        "txt": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; return typeVariable.equals(((TypeVarBoundedType) o).typeVariable); } @Override public int hashCode() { return typeVariable.hashCode(); }"
      },
      {
        "txt": "@Override public String toString() { return \"{firstBound=\" + firstBound() + \", interfaceBounds=\" + Arrays.deepToString(interfaceBounds()) + '}'; } public TypeVariable typeVariable() { return typeVariable; } } public static class WildCardBoundedType implements BoundedType { private final WildcardType wildcard;"
      },
      {
        "txt": "public WildCardBoundedType(WildcardType wildcard) { this.wildcard = wildcard; } public Type firstBound() { Type[] lowerBounds = wildcard.getLowerBounds(); Type[] upperBounds = wildcard.getUpperBounds(); return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0]; } public Type[] interfaceBounds() { return new Type[0];"
      },
      {
        "txt": "} @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; return wildcard.equals(((TypeVarBoundedType) o).typeVariable); } @Override public int hashCode() { return wildcard.hashCode();"
      },
      {
        "txt": "} @Override public String toString() { return \"{firstBound=\" + firstBound() + \", interfaceBounds=[]}\"; } public WildcardType wildCard() { return wildcard; } }"
      }
    ]
  }
]
[
  {
    "id": 2794,
    "file_path": "src/org/mockito/internal/util/reflection/GenericMaster.java",
    "start-bug-line": 20,
    "end-bug-line": 20,
    "bug": "",
    "fix": "if (actual instanceof Class) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util.reflection; import java.lang.reflect.Field; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public class GenericMaster { public Class getGenericType(Field field) { Type generic = field.getGenericType(); if (generic != null && generic instanceof ParameterizedType) { Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0]; <extra_id_0> } return Object.class; } }"
      }
    ]
  },
  {
    "id": 2795,
    "file_path": "src/org/mockito/internal/util/reflection/GenericMaster.java",
    "start-bug-line": 21,
    "end-bug-line": 21,
    "bug": "",
    "fix": "} else if (actual instanceof ParameterizedType) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util.reflection; import java.lang.reflect.Field; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type;"
      },
      {
        "txt": "public class GenericMaster { public Class getGenericType(Field field) { Type generic = field.getGenericType(); if (generic != null && generic instanceof ParameterizedType) { Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0]; return (Class) actual; <extra_id_0> } return Object.class; } }"
      }
    ]
  },
  {
    "id": 2796,
    "file_path": "src/org/mockito/internal/util/reflection/GenericMaster.java",
    "start-bug-line": 22,
    "end-bug-line": 22,
    "bug": "",
    "fix": "return (Class) ((ParameterizedType) actual).getRawType(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.util.reflection; import java.lang.reflect.Field; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type;"
      },
      {
        "txt": "public class GenericMaster { public Class getGenericType(Field field) { Type generic = field.getGenericType(); if (generic != null && generic instanceof ParameterizedType) { Type actual = ((ParameterizedType) generic).getActualTypeArguments()[0]; return (Class) actual; <extra_id_0> return Object.class; } }"
      }
    ]
  }
]
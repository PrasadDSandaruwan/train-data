[
  {
    "id": 2808,
    "file_path": "src/org/mockito/Mockito.java",
    "start-bug-line": 827,
    "end-bug-line": 827,
    "bug": "return MOCKITO_CORE.mock(classToMock, mockSettings);",
    "fix": "return MOCKITO_CORE.mock(classToMock, mockSettings, true);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.debugging.MockitoDebuggerImpl; import org.mockito.internal.stubbing.answers.*; import org.mockito.internal.stubbing.defaultanswers.*;"
      },
      {
        "txt": "import org.mockito.internal.verification.VerificationModeFactory; import org.mockito.internal.verification.api.VerificationMode; import org.mockito.runners.MockitoJUnitRunner; import org.mockito.stubbing.*; @SuppressWarnings(\"unchecked\") public class Mockito extends Matchers { private static final MockitoCore MOCKITO_CORE = new MockitoCore(); public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer(); public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls(); public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks();"
      },
      {
        "txt": "public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods(); public static <T> T mock(Class<T> classToMock) { return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS)); } public static <T> T mock(Class<T> classToMock, String name) { return mock(classToMock, withSettings() .name(name) .defaultAnswer(RETURNS_DEFAULTS)); } @Deprecated"
      },
      {
        "txt": "return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues))); } public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) { return mock(classToMock, withSettings().defaultAnswer(defaultAnswer)); } public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) { <extra_id_0> } public static <T> T spy(T object) { return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings() .spiedInstance(object) .defaultAnswer(CALLS_REAL_METHODS)); }"
      },
      {
        "txt": ".defaultAnswer(CALLS_REAL_METHODS)); } @Deprecated public static <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { return MOCKITO_CORE.stub(methodCall); } public static <T> OngoingStubbing<T> when(T methodCall) { return MOCKITO_CORE.when(methodCall); } public static <T> T verify(T mock) {"
      },
      {
        "txt": "return MOCKITO_CORE.verify(mock, times(1)); } public static <T> T verify(T mock, VerificationMode mode) { return MOCKITO_CORE.verify(mock, mode); } public static <T> void reset(T ... mocks) { MOCKITO_CORE.reset(mocks); } public static void verifyNoMoreInteractions(Object... mocks) { MOCKITO_CORE.verifyNoMoreInteractions(mocks);"
      },
      {
        "txt": "} public static void verifyZeroInteractions(Object... mocks) { MOCKITO_CORE.verifyNoMoreInteractions(mocks); } public static <T> VoidMethodStubbable<T> stubVoid(T mock) { return MOCKITO_CORE.stubVoid(mock); } public static Stubber doThrow(Throwable toBeThrown) { return MOCKITO_CORE.doAnswer(new ThrowsException(toBeThrown)); }"
      },
      {
        "txt": "public static Stubber doCallRealMethod() { return MOCKITO_CORE.doAnswer(new CallsRealMethods()); } public static Stubber doAnswer(Answer answer) { return MOCKITO_CORE.doAnswer(answer); } public static Stubber doNothing() { return MOCKITO_CORE.doAnswer(new DoesNothing()); } public static Stubber doReturn(Object toBeReturned) {"
      },
      {
        "txt": "return MOCKITO_CORE.doAnswer(new Returns(toBeReturned)); } public static InOrder inOrder(Object... mocks) { return MOCKITO_CORE.inOrder(mocks); } public static VerificationMode times(int wantedNumberOfInvocations) { return VerificationModeFactory.times(wantedNumberOfInvocations); } public static VerificationMode never() { return times(0);"
      },
      {
        "txt": "} public static VerificationMode atLeastOnce() { return VerificationModeFactory.atLeastOnce(); } public static VerificationMode atLeast(int minNumberOfInvocations) { return VerificationModeFactory.atLeast(minNumberOfInvocations); } public static VerificationMode atMost(int maxNumberOfInvocations) { return VerificationModeFactory.atMost(maxNumberOfInvocations); }"
      },
      {
        "txt": "public static VerificationMode only() { return VerificationModeFactory.only(); } public static void validateMockitoUsage() { MOCKITO_CORE.validateMockitoUsage(); } public static MockSettings withSettings() { return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS); } public static MockitoDebugger debug() {"
      },
      {
        "txt": "return new MockitoDebuggerImpl(); }"
      }
    ]
  },
  {
    "id": 2809,
    "file_path": "src/org/mockito/Mockito.java",
    "start-bug-line": 899,
    "end-bug-line": 899,
    "bug": ".defaultAnswer(CALLS_REAL_METHODS));",
    "fix": ".defaultAnswer(CALLS_REAL_METHODS), true);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.debugging.MockitoDebuggerImpl; import org.mockito.internal.stubbing.answers.*; import org.mockito.internal.stubbing.defaultanswers.*; import org.mockito.internal.verification.VerificationModeFactory; import org.mockito.internal.verification.api.VerificationMode; import org.mockito.runners.MockitoJUnitRunner; import org.mockito.stubbing.*; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public class Mockito extends Matchers { private static final MockitoCore MOCKITO_CORE = new MockitoCore(); public static final Answer<Object> RETURNS_DEFAULTS = new GloballyConfiguredAnswer(); public static final Answer<Object> RETURNS_SMART_NULLS = new ReturnsSmartNulls(); public static final Answer<Object> RETURNS_MOCKS = new ReturnsMocks(); public static final Answer<Object> CALLS_REAL_METHODS = new CallsRealMethods(); public static <T> T mock(Class<T> classToMock) { return mock(classToMock, withSettings().defaultAnswer(RETURNS_DEFAULTS)); } public static <T> T mock(Class<T> classToMock, String name) {"
      },
      {
        "txt": "return mock(classToMock, withSettings() .name(name) .defaultAnswer(RETURNS_DEFAULTS)); } @Deprecated public static <T> T mock(Class<T> classToMock, ReturnValues returnValues) { return mock(classToMock, withSettings().defaultAnswer(new AnswerReturnValuesAdapter(returnValues))); } public static <T> T mock(Class<T> classToMock, Answer defaultAnswer) { return mock(classToMock, withSettings().defaultAnswer(defaultAnswer));"
      },
      {
        "txt": "public static <T> T mock(Class<T> classToMock, MockSettings mockSettings) { return MOCKITO_CORE.mock(classToMock, mockSettings); } public static <T> T spy(T object) { return MOCKITO_CORE.mock((Class<T>) object.getClass(), withSettings() .spiedInstance(object) <extra_id_0> } @Deprecated public static <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { return MOCKITO_CORE.stub(methodCall); } public static <T> OngoingStubbing<T> when(T methodCall) {"
      },
      {
        "txt": "} public static <T> OngoingStubbing<T> when(T methodCall) { return MOCKITO_CORE.when(methodCall); } public static <T> T verify(T mock) { return MOCKITO_CORE.verify(mock, times(1)); } public static <T> T verify(T mock, VerificationMode mode) { return MOCKITO_CORE.verify(mock, mode); }"
      },
      {
        "txt": "public static <T> void reset(T ... mocks) { MOCKITO_CORE.reset(mocks); } public static void verifyNoMoreInteractions(Object... mocks) { MOCKITO_CORE.verifyNoMoreInteractions(mocks); } public static void verifyZeroInteractions(Object... mocks) { MOCKITO_CORE.verifyNoMoreInteractions(mocks); } public static <T> VoidMethodStubbable<T> stubVoid(T mock) {"
      },
      {
        "txt": "return MOCKITO_CORE.stubVoid(mock); } public static Stubber doThrow(Throwable toBeThrown) { return MOCKITO_CORE.doAnswer(new ThrowsException(toBeThrown)); } public static Stubber doCallRealMethod() { return MOCKITO_CORE.doAnswer(new CallsRealMethods()); } public static Stubber doAnswer(Answer answer) { return MOCKITO_CORE.doAnswer(answer);"
      },
      {
        "txt": "} public static Stubber doNothing() { return MOCKITO_CORE.doAnswer(new DoesNothing()); } public static Stubber doReturn(Object toBeReturned) { return MOCKITO_CORE.doAnswer(new Returns(toBeReturned)); } public static InOrder inOrder(Object... mocks) { return MOCKITO_CORE.inOrder(mocks); }"
      },
      {
        "txt": "public static VerificationMode times(int wantedNumberOfInvocations) { return VerificationModeFactory.times(wantedNumberOfInvocations); } public static VerificationMode never() { return times(0); } public static VerificationMode atLeastOnce() { return VerificationModeFactory.atLeastOnce(); } public static VerificationMode atLeast(int minNumberOfInvocations) {"
      },
      {
        "txt": "return VerificationModeFactory.atLeast(minNumberOfInvocations); } public static VerificationMode atMost(int maxNumberOfInvocations) { return VerificationModeFactory.atMost(maxNumberOfInvocations); } public static VerificationMode only() { return VerificationModeFactory.only(); } public static void validateMockitoUsage() { MOCKITO_CORE.validateMockitoUsage();"
      },
      {
        "txt": "} public static MockSettings withSettings() { return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS); } public static MockitoDebugger debug() { return new MockitoDebuggerImpl(); }"
      }
    ]
  },
  {
    "id": 2810,
    "file_path": "src/org/mockito/internal/MockitoCore.java",
    "start-bug-line": 32,
    "end-bug-line": 33,
    "bug": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); } public <T> T mock(Class<T> classToMock, MockSettings mockSettings) {",
    "fix": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import org.mockito.InOrder; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.misusing.NotAMockException;"
      },
      {
        "txt": "import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.progress.IOngoingStubbing; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubberImpl; import org.mockito.internal.util.MockUtil; import org.mockito.internal.verification.api.VerificationMode; import org.mockito.stubbing.*;"
      },
      {
        "txt": "import java.util.List; @SuppressWarnings(\"unchecked\") public class MockitoCore { private final Reporter reporter = new Reporter(); private final MockUtil mockUtil = new MockUtil(); private final MockingProgress mockingProgress = new ThreadSafeMockingProgress(); <extra_id_0> mockingProgress.validateState(); mockingProgress.resetOngoingStubbing(); return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings); } public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing();"
      },
      {
        "txt": "public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing(); if (stubbing == null) { mockingProgress.reset(); reporter.missingMethodInvocation(); } return stubbing; } @Deprecated public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) {"
      },
      {
        "txt": "mockingProgress.stubbingStarted(); return (DeprecatedOngoingStubbing) stub(); } public <T> OngoingStubbing<T> when(T methodCall) { mockingProgress.stubbingStarted(); return (OngoingStubbing) stub(); } public <T> T verify(T mock, VerificationMode mode) { if (mock == null) { reporter.nullPassedToVerify();"
      },
      {
        "txt": "} else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedToVerify(); } mockingProgress.verificationStarted(mode); return mock; } public <T> void reset(T ... mocks) { mockingProgress.validateState(); mockingProgress.reset(); mockingProgress.resetOngoingStubbing();"
      },
      {
        "txt": "for (T m : mocks) { mockUtil.resetMock(m); } } public void verifyNoMoreInteractions(Object... mocks) { assertMocksNotEmpty(mocks); mockingProgress.validateState(); for (Object mock : mocks) { try { if (mock == null) {"
      },
      {
        "txt": "reporter.nullPassedToVerifyNoMoreInteractions(); } mockUtil.getMockHandler(mock).verifyNoMoreInteractions(); } catch (NotAMockException e) { reporter.notAMockPassedToVerifyNoMoreInteractions(); } } } private void assertMocksNotEmpty(Object[] mocks) { if (mocks == null || mocks.length == 0) {"
      },
      {
        "txt": "reporter.mocksHaveToBePassedToVerifyNoMoreInteractions(); } } public InOrder inOrder(Object... mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedWhenCreatingInOrder(); } for (Object mock : mocks) { if (mock == null) { reporter.nullPassedWhenCreatingInOrder();"
      },
      {
        "txt": "} else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedWhenCreatingInOrder(); } } return new InOrderImpl(Arrays.asList(mocks)); } public Stubber doAnswer(Answer answer) { mockingProgress.stubbingStarted(); mockingProgress.resetOngoingStubbing(); return new StubberImpl().doAnswer(answer);"
      },
      {
        "txt": "} public <T> VoidMethodStubbable<T> stubVoid(T mock) { MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock); mockingProgress.stubbingStarted(); return handler.voidMethodStubbable(mock); } public void validateMockitoUsage() { mockingProgress.validateState(); } public Invocation getLastInvocation() {"
      },
      {
        "txt": "OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing()); List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations(); return allInvocations.get(allInvocations.size()-1); }"
      }
    ]
  },
  {
    "id": 2811,
    "file_path": "src/org/mockito/internal/MockitoCore.java",
    "start-bug-line": 35,
    "end-bug-line": 35,
    "bug": "",
    "fix": "if (shouldResetOngoingStubbing) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import org.mockito.InOrder; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.progress.IOngoingStubbing;"
      },
      {
        "txt": "import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubberImpl; import org.mockito.internal.util.MockUtil; import org.mockito.internal.verification.api.VerificationMode; import org.mockito.stubbing.*; import java.util.Arrays; import java.util.List; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "private final Reporter reporter = new Reporter(); private final MockUtil mockUtil = new MockUtil(); private final MockingProgress mockingProgress = new ThreadSafeMockingProgress(); public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); } public <T> T mock(Class<T> classToMock, MockSettings mockSettings) { mockingProgress.validateState(); <extra_id_0> return mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings); } public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing(); if (stubbing == null) { mockingProgress.reset();"
      },
      {
        "txt": "if (stubbing == null) { mockingProgress.reset(); reporter.missingMethodInvocation(); } return stubbing; } @Deprecated public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { mockingProgress.stubbingStarted(); return (DeprecatedOngoingStubbing) stub();"
      },
      {
        "txt": "} public <T> OngoingStubbing<T> when(T methodCall) { mockingProgress.stubbingStarted(); return (OngoingStubbing) stub(); } public <T> T verify(T mock, VerificationMode mode) { if (mock == null) { reporter.nullPassedToVerify(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedToVerify();"
      },
      {
        "txt": "} mockingProgress.verificationStarted(mode); return mock; } public <T> void reset(T ... mocks) { mockingProgress.validateState(); mockingProgress.reset(); mockingProgress.resetOngoingStubbing(); for (T m : mocks) { mockUtil.resetMock(m);"
      },
      {
        "txt": "} } public void verifyNoMoreInteractions(Object... mocks) { assertMocksNotEmpty(mocks); mockingProgress.validateState(); for (Object mock : mocks) { try { if (mock == null) { reporter.nullPassedToVerifyNoMoreInteractions(); }"
      },
      {
        "txt": "mockUtil.getMockHandler(mock).verifyNoMoreInteractions(); } catch (NotAMockException e) { reporter.notAMockPassedToVerifyNoMoreInteractions(); } } } private void assertMocksNotEmpty(Object[] mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedToVerifyNoMoreInteractions(); }"
      },
      {
        "txt": "} public InOrder inOrder(Object... mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedWhenCreatingInOrder(); } for (Object mock : mocks) { if (mock == null) { reporter.nullPassedWhenCreatingInOrder(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedWhenCreatingInOrder();"
      },
      {
        "txt": "} } return new InOrderImpl(Arrays.asList(mocks)); } public Stubber doAnswer(Answer answer) { mockingProgress.stubbingStarted(); mockingProgress.resetOngoingStubbing(); return new StubberImpl().doAnswer(answer); } public <T> VoidMethodStubbable<T> stubVoid(T mock) {"
      },
      {
        "txt": "MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock); mockingProgress.stubbingStarted(); return handler.voidMethodStubbable(mock); } public void validateMockitoUsage() { mockingProgress.validateState(); } public Invocation getLastInvocation() { OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing()); List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations();"
      },
      {
        "txt": "return allInvocations.get(allInvocations.size()-1); }"
      }
    ]
  },
  {
    "id": 2812,
    "file_path": "src/org/mockito/internal/MockitoCore.java",
    "start-bug-line": 36,
    "end-bug-line": 36,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import org.mockito.InOrder; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.progress.IOngoingStubbing; import org.mockito.internal.progress.MockingProgress;"
      },
      {
        "txt": "import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubberImpl; import org.mockito.internal.util.MockUtil; import org.mockito.internal.verification.api.VerificationMode; import org.mockito.stubbing.*; import java.util.Arrays; import java.util.List; @SuppressWarnings(\"unchecked\") public class MockitoCore {"
      },
      {
        "txt": "private final MockUtil mockUtil = new MockUtil(); private final MockingProgress mockingProgress = new ThreadSafeMockingProgress(); public <T> T mock(Class<T> classToMock, MockSettings mockSettings, boolean shouldResetOngoingStubbing) { return mock(classToMock, mockSettings); } public <T> T mock(Class<T> classToMock, MockSettings mockSettings) { mockingProgress.validateState(); mockingProgress.resetOngoingStubbing(); <extra_id_0> } public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing(); if (stubbing == null) { mockingProgress.reset(); reporter.missingMethodInvocation();"
      },
      {
        "txt": "mockingProgress.reset(); reporter.missingMethodInvocation(); } return stubbing; } @Deprecated public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { mockingProgress.stubbingStarted(); return (DeprecatedOngoingStubbing) stub(); }"
      },
      {
        "txt": "public <T> OngoingStubbing<T> when(T methodCall) { mockingProgress.stubbingStarted(); return (OngoingStubbing) stub(); } public <T> T verify(T mock, VerificationMode mode) { if (mock == null) { reporter.nullPassedToVerify(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedToVerify(); }"
      },
      {
        "txt": "mockingProgress.verificationStarted(mode); return mock; } public <T> void reset(T ... mocks) { mockingProgress.validateState(); mockingProgress.reset(); mockingProgress.resetOngoingStubbing(); for (T m : mocks) { mockUtil.resetMock(m); }"
      },
      {
        "txt": "} public void verifyNoMoreInteractions(Object... mocks) { assertMocksNotEmpty(mocks); mockingProgress.validateState(); for (Object mock : mocks) { try { if (mock == null) { reporter.nullPassedToVerifyNoMoreInteractions(); } mockUtil.getMockHandler(mock).verifyNoMoreInteractions();"
      },
      {
        "txt": "} catch (NotAMockException e) { reporter.notAMockPassedToVerifyNoMoreInteractions(); } } } private void assertMocksNotEmpty(Object[] mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedToVerifyNoMoreInteractions(); } }"
      },
      {
        "txt": "public InOrder inOrder(Object... mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedWhenCreatingInOrder(); } for (Object mock : mocks) { if (mock == null) { reporter.nullPassedWhenCreatingInOrder(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedWhenCreatingInOrder(); }"
      },
      {
        "txt": "} return new InOrderImpl(Arrays.asList(mocks)); } public Stubber doAnswer(Answer answer) { mockingProgress.stubbingStarted(); mockingProgress.resetOngoingStubbing(); return new StubberImpl().doAnswer(answer); } public <T> VoidMethodStubbable<T> stubVoid(T mock) { MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock);"
      },
      {
        "txt": "mockingProgress.stubbingStarted(); return handler.voidMethodStubbable(mock); } public void validateMockitoUsage() { mockingProgress.validateState(); } public Invocation getLastInvocation() { OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing()); List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations(); return allInvocations.get(allInvocations.size()-1);"
      }
    ]
  }
]
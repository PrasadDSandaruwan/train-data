[
  {
    "id": 2759,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 122,
    "end-bug-line": 122,
    "bug": "return reportMatcher(Any.ANY).returnFalse();",
    "fix": "return reportMatcher(new InstanceOf(Boolean.class)).returnFalse();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection;"
      },
      {
        "txt": "import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { <extra_id_0> } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar();"
      },
      {
        "txt": "public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull();"
      },
      {
        "txt": "} public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); }"
      },
      {
        "txt": "public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap();"
      },
      {
        "txt": "} public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); }"
      },
      {
        "txt": "public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); }"
      },
      {
        "txt": "public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() {"
      },
      {
        "txt": "return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz);"
      },
      {
        "txt": "} public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); }"
      },
      {
        "txt": "public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2760,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 137,
    "end-bug-line": 137,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Byte.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher;"
      },
      {
        "txt": "import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set;"
      },
      {
        "txt": "public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { <extra_id_0> } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull();"
      },
      {
        "txt": "} public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); }"
      },
      {
        "txt": "public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) {"
      },
      {
        "txt": "return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); }"
      },
      {
        "txt": "public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); }"
      },
      {
        "txt": "public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) {"
      },
      {
        "txt": "return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString();"
      },
      {
        "txt": "} public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); }"
      },
      {
        "txt": "public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2761,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 152,
    "end-bug-line": 152,
    "bug": "return reportMatcher(Any.ANY).returnChar();",
    "fix": "return reportMatcher(new InstanceOf(Character.class)).returnChar();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals;"
      },
      {
        "txt": "import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { <extra_id_0> } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz);"
      },
      {
        "txt": "} public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); }"
      },
      {
        "txt": "public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value);"
      },
      {
        "txt": "} public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); }"
      },
      {
        "txt": "public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() {"
      },
      {
        "txt": "return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString();"
      },
      {
        "txt": "} public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); }"
      },
      {
        "txt": "public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2762,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 167,
    "end-bug-line": 167,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Integer.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress;"
      },
      {
        "txt": "import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { <extra_id_0> } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() {"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject();"
      },
      {
        "txt": "} public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); }"
      },
      {
        "txt": "public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);"
      },
      {
        "txt": "} public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); }"
      },
      {
        "txt": "public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();"
      },
      {
        "txt": "} public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); }"
      },
      {
        "txt": "public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) {"
      },
      {
        "txt": "return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString();"
      },
      {
        "txt": "} public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); }"
      },
      {
        "txt": "public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2763,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 182,
    "end-bug-line": 182,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Long.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map;"
      },
      {
        "txt": "import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { <extra_id_0> } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() {"
      },
      {
        "txt": "return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString();"
      },
      {
        "txt": "} public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); }"
      },
      {
        "txt": "public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse();"
      },
      {
        "txt": "} public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value);"
      },
      {
        "txt": "} public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); }"
      },
      {
        "txt": "public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) {"
      },
      {
        "txt": "return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString();"
      },
      {
        "txt": "} public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); }"
      },
      {
        "txt": "public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher);"
      }
    ]
  },
  {
    "id": 2764,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 197,
    "end-bug-line": 197,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Float.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*;"
      },
      {
        "txt": "import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers {"
      },
      {
        "txt": "private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { <extra_id_0> } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) {"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); }"
      },
      {
        "txt": "public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {"
      },
      {
        "txt": "return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) {"
      },
      {
        "txt": "return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull();"
      },
      {
        "txt": "} public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); }"
      },
      {
        "txt": "public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) {"
      },
      {
        "txt": "return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull();"
      },
      {
        "txt": "} public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2765,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 212,
    "end-bug-line": 212,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Double.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress;"
      },
      {
        "txt": "import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse();"
      },
      {
        "txt": "} public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { <extra_id_0> } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull();"
      },
      {
        "txt": "public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() {"
      },
      {
        "txt": "return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); }"
      },
      {
        "txt": "public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) {"
      },
      {
        "txt": "return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar();"
      },
      {
        "txt": "} public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) {"
      },
      {
        "txt": "return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull();"
      },
      {
        "txt": "} public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); }"
      },
      {
        "txt": "public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) {"
      },
      {
        "txt": "return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar();"
      },
      {
        "txt": "} public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2766,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 227,
    "end-bug-line": 227,
    "bug": "return reportMatcher(Any.ANY).returnZero();",
    "fix": "return reportMatcher(new InstanceOf(Short.class)).returnZero();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List;"
      },
      {
        "txt": "import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { <extra_id_0> } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull();"
      },
      {
        "txt": "public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet();"
      },
      {
        "txt": "} public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); }"
      },
      {
        "txt": "public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) {"
      },
      {
        "txt": "return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull();"
      },
      {
        "txt": "} public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); }"
      },
      {
        "txt": "public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) {"
      },
      {
        "txt": "return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse();"
      },
      {
        "txt": "} public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) {"
      },
      {
        "txt": "return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2767,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 244,
    "end-bug-line": 244,
    "bug": "return (T) reportMatcher(Any.ANY).returnNull();",
    "fix": "return (T) reportMatcher(new InstanceOf(Object.class)).returnNull();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull;"
      },
      {
        "txt": "import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar();"
      },
      {
        "txt": "} public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { <extra_id_0> } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz);"
      },
      {
        "txt": "public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet();"
      },
      {
        "txt": "} public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); }"
      },
      {
        "txt": "public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() {"
      },
      {
        "txt": "return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull();"
      },
      {
        "txt": "} public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); }"
      },
      {
        "txt": "public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2768,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 292,
    "end-bug-line": 292,
    "bug": "return (T) reportMatcher(Any.ANY).returnFor(clazz);",
    "fix": "return (T) reportMatcher(new InstanceOf(clazz)).returnFor(clazz);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection;"
      },
      {
        "txt": "import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { <extra_id_0> } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString();"
      },
      {
        "txt": "public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap();"
      },
      {
        "txt": "} public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); }"
      },
      {
        "txt": "public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); }"
      },
      {
        "txt": "public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() {"
      },
      {
        "txt": "return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz);"
      },
      {
        "txt": "} public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); }"
      },
      {
        "txt": "public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2769,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 309,
    "end-bug-line": 309,
    "bug": "return (T) anyObject();",
    "fix": "return (T) reportMatcher(Any.ANY).returnNull();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher;"
      },
      {
        "txt": "import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set;"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); }"
      },
      {
        "txt": "return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { <extra_id_0> } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) {"
      },
      {
        "txt": "return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); }"
      },
      {
        "txt": "public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); }"
      },
      {
        "txt": "public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) {"
      },
      {
        "txt": "return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString();"
      },
      {
        "txt": "} public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); }"
      },
      {
        "txt": "public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2770,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 324,
    "end-bug-line": 324,
    "bug": "return reportMatcher(Any.ANY).returnString();",
    "fix": "return reportMatcher(new InstanceOf(String.class)).returnString();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals;"
      },
      {
        "txt": "import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress();"
      },
      {
        "txt": "public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); }"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { <extra_id_0> } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value);"
      },
      {
        "txt": "} public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); }"
      },
      {
        "txt": "public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() {"
      },
      {
        "txt": "return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString();"
      },
      {
        "txt": "} public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); }"
      },
      {
        "txt": "public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2771,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 339,
    "end-bug-line": 339,
    "bug": "return reportMatcher(Any.ANY).returnList();",
    "fix": "return reportMatcher(new InstanceOf(List.class)).returnList();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress;"
      },
      {
        "txt": "import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); }"
      },
      {
        "txt": "public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); }"
      },
      {
        "txt": "return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { <extra_id_0> } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet();"
      },
      {
        "txt": "public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);"
      },
      {
        "txt": "} public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); }"
      },
      {
        "txt": "public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull();"
      },
      {
        "txt": "} public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); }"
      },
      {
        "txt": "public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) {"
      },
      {
        "txt": "return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString();"
      },
      {
        "txt": "} public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); }"
      },
      {
        "txt": "public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2772,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 358,
    "end-bug-line": 358,
    "bug": "return (List) reportMatcher(Any.ANY).returnList();",
    "fix": "return anyList();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map;"
      },
      {
        "txt": "import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull();"
      },
      {
        "txt": "} public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { <extra_id_0> } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet();"
      },
      {
        "txt": "public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse();"
      },
      {
        "txt": "} public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value);"
      },
      {
        "txt": "} public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); }"
      },
      {
        "txt": "public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) {"
      },
      {
        "txt": "return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString();"
      },
      {
        "txt": "} public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); }"
      },
      {
        "txt": "public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher);"
      }
    ]
  },
  {
    "id": 2773,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 373,
    "end-bug-line": 373,
    "bug": "return reportMatcher(Any.ANY).returnSet();",
    "fix": "return reportMatcher(new InstanceOf(Set.class)).returnSet();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*;"
      },
      {
        "txt": "import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers {"
      },
      {
        "txt": "private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); }"
      },
      {
        "txt": "public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull();"
      },
      {
        "txt": "} public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { <extra_id_0> } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap();"
      },
      {
        "txt": "public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) {"
      },
      {
        "txt": "return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) {"
      },
      {
        "txt": "return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull();"
      },
      {
        "txt": "} public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); }"
      },
      {
        "txt": "public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) {"
      },
      {
        "txt": "return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull();"
      },
      {
        "txt": "} public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2774,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 392,
    "end-bug-line": 392,
    "bug": "return (Set) reportMatcher(Any.ANY).returnSet();",
    "fix": "return anySet();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress;"
      },
      {
        "txt": "import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse();"
      },
      {
        "txt": "} public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz);"
      },
      {
        "txt": "} public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); }"
      },
      {
        "txt": "return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { <extra_id_0> } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap();"
      },
      {
        "txt": "public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) {"
      },
      {
        "txt": "return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar();"
      },
      {
        "txt": "} public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) {"
      },
      {
        "txt": "return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull();"
      },
      {
        "txt": "} public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); }"
      },
      {
        "txt": "public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) {"
      },
      {
        "txt": "return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar();"
      },
      {
        "txt": "} public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2775,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 407,
    "end-bug-line": 407,
    "bug": "return reportMatcher(Any.ANY).returnMap();",
    "fix": "return reportMatcher(new InstanceOf(Map.class)).returnMap();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List;"
      },
      {
        "txt": "import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() {"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject();"
      },
      {
        "txt": "} public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { <extra_id_0> } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) {"
      },
      {
        "txt": "return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull();"
      },
      {
        "txt": "} public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); }"
      },
      {
        "txt": "public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) {"
      },
      {
        "txt": "return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse();"
      },
      {
        "txt": "} public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) {"
      },
      {
        "txt": "return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2776,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 427,
    "end-bug-line": 427,
    "bug": "return reportMatcher(Any.ANY).returnMap();",
    "fix": "return anyMap();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull;"
      },
      {
        "txt": "import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar();"
      },
      {
        "txt": "} public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() {"
      },
      {
        "txt": "return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString();"
      },
      {
        "txt": "} public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); }"
      },
      {
        "txt": "return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { <extra_id_0> } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); }"
      },
      {
        "txt": "public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() {"
      },
      {
        "txt": "return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull();"
      },
      {
        "txt": "} public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); }"
      },
      {
        "txt": "public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2777,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 442,
    "end-bug-line": 442,
    "bug": "return reportMatcher(Any.ANY).returnList();",
    "fix": "return reportMatcher(new InstanceOf(Collection.class)).returnList();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues;"
      },
      {
        "txt": "import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection; import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() { return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static long anyLong() { return reportMatcher(Any.ANY).returnZero(); } public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); } public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) {"
      },
      {
        "txt": "return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() { return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList(); } public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static <K, V> Map<K, V> anyMapOf(Class<K> keyClazz, Class<V> valueClazz) { return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { <extra_id_0> } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { return (Collection) reportMatcher(Any.ANY).returnList(); } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz);"
      },
      {
        "txt": "public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) { return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero(); } public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); }"
      },
      {
        "txt": "public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); } public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) {"
      },
      {
        "txt": "return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() { return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull();"
      },
      {
        "txt": "} public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz); } public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); }"
      },
      {
        "txt": "public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); } public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) { return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero(); } public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); } private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  },
  {
    "id": 2778,
    "file_path": "src/org/mockito/Matchers.java",
    "start-bug-line": 461,
    "end-bug-line": 461,
    "bug": "return (Collection) reportMatcher(Any.ANY).returnList();",
    "fix": "return anyCollection();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito; import org.hamcrest.Matcher; import org.hamcrest.core.IsNull; import org.mockito.internal.matchers.*; import org.mockito.internal.matchers.apachecommons.ReflectionEquals; import org.mockito.internal.progress.HandyReturnValues; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import java.util.Collection;"
      },
      {
        "txt": "import java.util.List; import java.util.Map; import java.util.Set; @SuppressWarnings(\"unchecked\") public class Matchers { private static final MockingProgress MOCKING_PROGRESS = new ThreadSafeMockingProgress(); public static boolean anyBoolean() { return reportMatcher(Any.ANY).returnFalse(); } public static byte anyByte() {"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnZero(); } public static char anyChar() { return reportMatcher(Any.ANY).returnChar(); } public static int anyInt() { return reportMatcher(Any.ANY).returnZero(); } public static long anyLong() { return reportMatcher(Any.ANY).returnZero();"
      },
      {
        "txt": "} public static float anyFloat() { return reportMatcher(Any.ANY).returnZero(); } public static double anyDouble() { return reportMatcher(Any.ANY).returnZero(); } public static short anyShort() { return reportMatcher(Any.ANY).returnZero(); }"
      },
      {
        "txt": "public static <T> T anyObject() { return (T) reportMatcher(Any.ANY).returnNull(); } public static <T> T anyVararg() { return (T) reportMatcher(AnyVararg.ANY_VARARG).returnNull(); } public static <T> T any(Class<T> clazz) { return (T) reportMatcher(Any.ANY).returnFor(clazz); } public static <T> T any() {"
      },
      {
        "txt": "return (T) anyObject(); } public static String anyString() { return reportMatcher(Any.ANY).returnString(); } public static List anyList() { return reportMatcher(Any.ANY).returnList(); } public static <T> List<T> anyListOf(Class<T> clazz) { return (List) reportMatcher(Any.ANY).returnList();"
      },
      {
        "txt": "} public static Set anySet() { return reportMatcher(Any.ANY).returnSet(); } public static <T> Set<T> anySetOf(Class<T> clazz) { return (Set) reportMatcher(Any.ANY).returnSet(); } public static Map anyMap() { return reportMatcher(Any.ANY).returnMap(); }"
      },
      {
        "txt": "return reportMatcher(Any.ANY).returnMap(); } public static Collection anyCollection() { return reportMatcher(Any.ANY).returnList(); } public static <T> Collection<T> anyCollectionOf(Class<T> clazz) { <extra_id_0> } public static <T> T isA(Class<T> clazz) { return reportMatcher(new InstanceOf(clazz)).<T>returnFor(clazz); } public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse();"
      },
      {
        "txt": "public static boolean eq(boolean value) { return reportMatcher(new Equals(value)).returnFalse(); } public static byte eq(byte value) { return reportMatcher(new Equals(value)).returnZero(); } public static char eq(char value) { return reportMatcher(new Equals(value)).returnChar(); } public static double eq(double value) {"
      },
      {
        "txt": "return reportMatcher(new Equals(value)).returnZero(); } public static float eq(float value) { return reportMatcher(new Equals(value)).returnZero(); } public static int eq(int value) { return reportMatcher(new Equals(value)).returnZero(); } public static long eq(long value) { return reportMatcher(new Equals(value)).returnZero();"
      },
      {
        "txt": "} public static short eq(short value) { return reportMatcher(new Equals(value)).returnZero(); } public static <T> T eq(T value) { return (T) reportMatcher(new Equals(value)).<T>returnFor(value); } public static <T> T refEq(T value, String... excludeFields) { return reportMatcher(new ReflectionEquals(value, excludeFields)).<T>returnNull(); }"
      },
      {
        "txt": "public static <T> T same(T value) { return (T) reportMatcher(new Same(value)).<T>returnFor(value); } public static Object isNull() { return reportMatcher(Null.NULL).returnNull(); } public static <T> T isNull(Class<T> clazz) { return (T) reportMatcher(Null.NULL).returnNull(); } public static Object notNull() {"
      },
      {
        "txt": "return reportMatcher(NotNull.NOT_NULL).returnNull(); } public static <T> T notNull(Class<T> clazz) { return (T) reportMatcher(NotNull.NOT_NULL).returnNull(); } public static Object isNotNull() { return notNull(); } public static <T> T isNotNull(Class<T> clazz) { return notNull(clazz);"
      },
      {
        "txt": "} public static String contains(String substring) { return reportMatcher(new Contains(substring)).returnString(); } public static String matches(String regex) { return reportMatcher(new Matches(regex)).returnString(); } public static String endsWith(String suffix) { return reportMatcher(new EndsWith(suffix)).returnString(); }"
      },
      {
        "txt": "public static String startsWith(String prefix) { return reportMatcher(new StartsWith(prefix)).returnString(); } public static <T> T argThat(Matcher<T> matcher) { return reportMatcher(matcher).<T>returnNull(); } public static char charThat(Matcher<Character> matcher) { return reportMatcher(matcher).returnChar(); } public static boolean booleanThat(Matcher<Boolean> matcher) {"
      },
      {
        "txt": "return reportMatcher(matcher).returnFalse(); } public static byte byteThat(Matcher<Byte> matcher) { return reportMatcher(matcher).returnZero(); } public static short shortThat(Matcher<Short> matcher) { return reportMatcher(matcher).returnZero(); } public static int intThat(Matcher<Integer> matcher) { return reportMatcher(matcher).returnZero();"
      },
      {
        "txt": "} public static long longThat(Matcher<Long> matcher) { return reportMatcher(matcher).returnZero(); } public static float floatThat(Matcher<Float> matcher) { return reportMatcher(matcher).returnZero(); } public static double doubleThat(Matcher<Double> matcher) { return reportMatcher(matcher).returnZero(); }"
      },
      {
        "txt": "private static HandyReturnValues reportMatcher(Matcher<?> matcher) { return MOCKING_PROGRESS.getArgumentMatcherStorage().reportMatcher(matcher); }"
      }
    ]
  }
]
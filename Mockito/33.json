[
  {
    "id": 2870,
    "file_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
    "start-bug-line": 98,
    "end-bug-line": 98,
    "bug": "",
    "fix": "if (m1.getName() != null && m1.getName().equals(m2.getName())) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.lang.reflect.Method; import java.util.Collections; import java.util.LinkedList; import java.util.List; import org.hamcrest.Matcher; import org.mockito.exceptions.PrintableInvocation; import org.mockito.internal.debugging.Location; import org.mockito.internal.matchers.CapturesArguments; import org.mockito.internal.reporting.PrintSettings;"
      },
      {
        "txt": "import org.mockito.internal.reporting.PrintingFriendlyInvocation; @SuppressWarnings(\"unchecked\") public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation, CapturesArgumensFromInvocation, Serializable { private static final long serialVersionUID = -3047126096857467610L; private final Invocation invocation; private final List<Matcher> matchers; public InvocationMatcher(Invocation invocation, List<Matcher> matchers) { this.invocation = invocation; if (matchers.isEmpty()) { this.matchers = invocation.argumentsToMatchers();"
      },
      {
        "txt": "} else { this.matchers = matchers; } } public InvocationMatcher(Invocation invocation) { this(invocation, Collections.<Matcher>emptyList()); } public Method getMethod() { return invocation.getMethod(); }"
      },
      {
        "txt": "public Invocation getInvocation() { return this.invocation; } public List<Matcher> getMatchers() { return this.matchers; } public String toString() { return invocation.toString(matchers, new PrintSettings()); } public boolean matches(Invocation actual) {"
      },
      {
        "txt": "return invocation.getMock().equals(actual.getMock()) && hasSameMethod(actual) && new ArgumentsComparator().argumentsMatch(this, actual); } private boolean safelyArgumentsMatch(Object[] actualArgs) { try { return new ArgumentsComparator().argumentsMatch(this, actualArgs); } catch (Throwable t) { return false; }"
      },
      {
        "txt": "} public boolean hasSimilarMethod(Invocation candidate) { String wantedMethodName = getMethod().getName(); String currentMethodName = candidate.getMethod().getName(); final boolean methodNameEquals = wantedMethodName.equals(currentMethodName); final boolean isUnverified = !candidate.isVerified(); final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock(); final boolean methodEquals = hasSameMethod(candidate); if (!methodNameEquals || !isUnverified || !mockIsTheSame) { return false;"
      },
      {
        "txt": "final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments()); return !overloadedButSameArgs; } public boolean hasSameMethod(Invocation candidate) { Method m1 = invocation.getMethod(); Method m2 = candidate.getMethod(); <extra_id_0> return m1.equals(m2); } public Location getLocation() { return invocation.getLocation(); } public String toString(PrintSettings printSettings) {"
      },
      {
        "txt": "} public String toString(PrintSettings printSettings) { return invocation.toString(matchers, printSettings); } public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) { if (m instanceof CapturesArguments && i.getArguments().length > k) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); }"
      },
      {
        "txt": "k++; } } public static List<InvocationMatcher> createFrom(List<Invocation> invocations) { LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>(); for (Invocation i : invocations) { out.add(new InvocationMatcher(i)); } return out; }"
      }
    ]
  },
  {
    "id": 2871,
    "file_path": "src/org/mockito/internal/invocation/InvocationMatcher.java",
    "start-bug-line": 99,
    "end-bug-line": 99,
    "bug": "return m1.equals(m2);",
    "fix": "Class[] params1 = m1.getParameterTypes(); Class[] params2 = m2.getParameterTypes(); if (params1.length == params2.length) { for (int i = 0; i < params1.length; i++) { if (params1[i] != params2[i]) return false; } return true; } } return false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.lang.reflect.Method; import java.util.Collections; import java.util.LinkedList; import java.util.List; import org.hamcrest.Matcher; import org.mockito.exceptions.PrintableInvocation; import org.mockito.internal.debugging.Location; import org.mockito.internal.matchers.CapturesArguments; import org.mockito.internal.reporting.PrintSettings;"
      },
      {
        "txt": "import org.mockito.internal.reporting.PrintingFriendlyInvocation; @SuppressWarnings(\"unchecked\") public class InvocationMatcher implements PrintableInvocation, PrintingFriendlyInvocation, CapturesArgumensFromInvocation, Serializable { private static final long serialVersionUID = -3047126096857467610L; private final Invocation invocation; private final List<Matcher> matchers; public InvocationMatcher(Invocation invocation, List<Matcher> matchers) { this.invocation = invocation; if (matchers.isEmpty()) { this.matchers = invocation.argumentsToMatchers();"
      },
      {
        "txt": "} else { this.matchers = matchers; } } public InvocationMatcher(Invocation invocation) { this(invocation, Collections.<Matcher>emptyList()); } public Method getMethod() { return invocation.getMethod(); }"
      },
      {
        "txt": "public Invocation getInvocation() { return this.invocation; } public List<Matcher> getMatchers() { return this.matchers; } public String toString() { return invocation.toString(matchers, new PrintSettings()); } public boolean matches(Invocation actual) {"
      },
      {
        "txt": "return invocation.getMock().equals(actual.getMock()) && hasSameMethod(actual) && new ArgumentsComparator().argumentsMatch(this, actual); } private boolean safelyArgumentsMatch(Object[] actualArgs) { try { return new ArgumentsComparator().argumentsMatch(this, actualArgs); } catch (Throwable t) { return false; }"
      },
      {
        "txt": "} public boolean hasSimilarMethod(Invocation candidate) { String wantedMethodName = getMethod().getName(); String currentMethodName = candidate.getMethod().getName(); final boolean methodNameEquals = wantedMethodName.equals(currentMethodName); final boolean isUnverified = !candidate.isVerified(); final boolean mockIsTheSame = getInvocation().getMock() == candidate.getMock(); final boolean methodEquals = hasSameMethod(candidate); if (!methodNameEquals || !isUnverified || !mockIsTheSame) { return false;"
      },
      {
        "txt": "final boolean overloadedButSameArgs = !methodEquals && safelyArgumentsMatch(candidate.getArguments()); return !overloadedButSameArgs; } public boolean hasSameMethod(Invocation candidate) { Method m1 = invocation.getMethod(); Method m2 = candidate.getMethod(); <extra_id_0> } public Location getLocation() { return invocation.getLocation(); } public String toString(PrintSettings printSettings) { return invocation.toString(matchers, printSettings);"
      },
      {
        "txt": "public String toString(PrintSettings printSettings) { return invocation.toString(matchers, printSettings); } public void captureArgumentsFrom(Invocation i) { int k = 0; for (Matcher m : matchers) { if (m instanceof CapturesArguments && i.getArguments().length > k) { ((CapturesArguments) m).captureFrom(i.getArguments()[k]); } k++;"
      },
      {
        "txt": "} } public static List<InvocationMatcher> createFrom(List<Invocation> invocations) { LinkedList<InvocationMatcher> out = new LinkedList<InvocationMatcher>(); for (Invocation i : invocations) { out.add(new InvocationMatcher(i)); } return out; }"
      }
    ]
  }
]
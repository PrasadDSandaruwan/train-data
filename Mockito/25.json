[
  {
    "id": 2849,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 7,
    "end-bug-line": 7,
    "bug": "",
    "fix": "import org.mockito.MockSettings;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; <extra_id_0> import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this);"
      },
      {
        "txt": "container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());"
      }
    ]
  },
  {
    "id": 2850,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import static org.mockito.Mockito.mock; import static org.mockito.Mockito.withSettings;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl;"
      },
      {
        "txt": "import org.mockito.internal.util.MockCreationValidator; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; <extra_id_0> public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod());"
      },
      {
        "txt": "GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());"
      },
      {
        "txt": "InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType();"
      },
      {
        "txt": "final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings();"
      },
      {
        "txt": "return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2851,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 53,
    "end-bug-line": 53,
    "bug": "return getMock(invocation);",
    "fix": "return getMock(invocation, returnTypeGenericMetadata);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl;"
      },
      {
        "txt": "import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues();"
      },
      {
        "txt": "GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } <extra_id_0> } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {"
      },
      {
        "txt": "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this);"
      },
      {
        "txt": "container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());"
      }
    ]
  },
  {
    "id": 2852,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 56,
    "end-bug-line": 56,
    "bug": "private Object getMock(InvocationOnMock invocation) throws Throwable {",
    "fix": "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } <extra_id_0> InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); }"
      },
      {
        "txt": "return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable {"
      },
      {
        "txt": "return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2853,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 68,
    "end-bug-line": 68,
    "bug": "return recordDeepStubMock(invocation, container);",
    "fix": "return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl;"
      },
      {
        "txt": "import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues();"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable {"
      },
      {
        "txt": "InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } <extra_id_0> } private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable {"
      },
      {
        "txt": "container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock());"
      }
    ]
  },
  {
    "id": 2854,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 77,
    "end-bug-line": 77,
    "bug": "",
    "fix": "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata) ); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } <extra_id_0> private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock;"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2855,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 78,
    "end-bug-line": 78,
    "bug": "",
    "fix": "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } <extra_id_0> private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock;"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2856,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 79,
    "end-bug-line": 79,
    "bug": "",
    "fix": "return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } <extra_id_0> private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock;"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2857,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 80,
    "end-bug-line": 80,
    "bug": "",
    "fix": "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } <extra_id_0> private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this); container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock;"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2858,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 81,
    "end-bug-line": 83,
    "bug": "private Object recordDeepStubMock(InvocationOnMock invocation, InvocationContainerImpl container) { Class<?> clz = invocation.getMethod().getReturnType(); final Object mock = org.mockito.Mockito.mock(clz, this);",
    "fix": "private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockCreationValidator;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; import java.io.Serializable; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!new MockCreationValidator().isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation); } private Object getMock(InvocationOnMock invocation) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(invocation, container); } <extra_id_0> container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock;"
      },
      {
        "txt": "}, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  }
]
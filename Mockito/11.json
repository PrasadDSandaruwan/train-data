[
  {
    "id": 2791,
    "file_path": "src/org/mockito/internal/creation/DelegatingMethod.java",
    "start-bug-line": 55,
    "end-bug-line": 55,
    "bug": "",
    "fix": "if (this == o) { return true; } if (o instanceof DelegatingMethod) { DelegatingMethod that = (DelegatingMethod) o; return method.equals(that.method); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.internal.invocation.MockitoMethod; import java.lang.reflect.Method; import java.lang.reflect.Modifier; public class DelegatingMethod implements MockitoMethod { private final Method method;"
      },
      {
        "txt": "public DelegatingMethod(Method method) { assert method != null : \"Method cannot be null\"; this.method = method; } public Class<?>[] getExceptionTypes() { return method.getExceptionTypes(); } public Method getJavaMethod() { return method; }"
      },
      {
        "txt": "public String getName() { return method.getName(); } public Class<?>[] getParameterTypes() { return method.getParameterTypes(); } public Class<?> getReturnType() { return method.getReturnType(); } public boolean isVarArgs() {"
      },
      {
        "txt": "} public boolean isAbstract() { return (method.getModifiers() & Modifier.ABSTRACT) != 0; } @Override public boolean equals(Object o) { <extra_id_0> } @Override public int hashCode() { return 1; } }"
      }
    ]
  },
  {
    "id": 2792,
    "file_path": "src/org/mockito/internal/creation/DelegatingMethod.java",
    "start-bug-line": 56,
    "end-bug-line": 56,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.internal.invocation.MockitoMethod; import java.lang.reflect.Method; import java.lang.reflect.Modifier; public class DelegatingMethod implements MockitoMethod { private final Method method; public DelegatingMethod(Method method) {"
      },
      {
        "txt": "assert method != null : \"Method cannot be null\"; this.method = method; } public Class<?>[] getExceptionTypes() { return method.getExceptionTypes(); } public Method getJavaMethod() { return method; } public String getName() {"
      },
      {
        "txt": "return method.getName(); } public Class<?>[] getParameterTypes() { return method.getParameterTypes(); } public Class<?> getReturnType() { return method.getReturnType(); } public boolean isVarArgs() { return method.isVarArgs();"
      },
      {
        "txt": "public boolean isAbstract() { return (method.getModifiers() & Modifier.ABSTRACT) != 0; } @Override public boolean equals(Object o) { return method.equals(o); <extra_id_0> @Override public int hashCode() { return 1; } }"
      }
    ]
  },
  {
    "id": 2793,
    "file_path": "src/org/mockito/internal/creation/DelegatingMethod.java",
    "start-bug-line": 60,
    "end-bug-line": 60,
    "bug": "return 1;",
    "fix": "return method.hashCode();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation; import org.mockito.internal.invocation.MockitoMethod; import java.lang.reflect.Method; import java.lang.reflect.Modifier; public class DelegatingMethod implements MockitoMethod { private final Method method; public DelegatingMethod(Method method) { assert method != null : \"Method cannot be null\"; this.method = method; }"
      },
      {
        "txt": "public Class<?>[] getExceptionTypes() { return method.getExceptionTypes(); } public Method getJavaMethod() { return method; } public String getName() { return method.getName(); } public Class<?>[] getParameterTypes() {"
      },
      {
        "txt": "return method.getParameterTypes(); } public Class<?> getReturnType() { return method.getReturnType(); } public boolean isVarArgs() { return method.isVarArgs(); } public boolean isAbstract() { return (method.getModifiers() & Modifier.ABSTRACT) != 0;"
      },
      {
        "txt": "@Override public boolean equals(Object o) { return method.equals(o); } @Override public int hashCode() { <extra_id_0> } }"
      }
    ]
  }
]
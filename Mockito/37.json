[
  {
    "id": 2878,
    "file_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
    "start-bug-line": 28,
    "end-bug-line": 28,
    "bug": "",
    "fix": "if (answer instanceof CallsRealMethods) { validateMockingConcreteClass((CallsRealMethods) answer, invocation); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.answers; import org.mockito.exceptions.Reporter; import org.mockito.internal.invocation.Invocation; import org.mockito.stubbing.Answer; public class AnswersValidator { private Reporter reporter = new Reporter(); public void validate(Answer<?> answer, Invocation invocation) { if (answer instanceof ThrowsException) { validateException((ThrowsException) answer, invocation);"
      },
      {
        "txt": "if (answer instanceof Returns) { validateReturnValue((Returns) answer, invocation); } if (answer instanceof DoesNothing) { validateDoNothing((DoesNothing) answer, invocation); } <extra_id_0> private void validateDoNothing(DoesNothing answer, Invocation invocation) { if (!invocation.isVoid()) { reporter.onlyVoidMethodsCanBeSetToDoNothing(); } } private void validateReturnValue(Returns answer, Invocation invocation) {"
      },
      {
        "txt": "} private void validateReturnValue(Returns answer, Invocation invocation) { if (invocation.isVoid()) { reporter.cannotStubVoidMethodWithAReturnValue(); } if (answer.returnsNull() && invocation.returnsPrimitive()) { reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), \"null\", invocation.getMethodName()); } if (!answer.returnsNull() && !invocation.isValidReturnType(answer.getReturnType())) { reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), answer.printReturnType(), invocation.getMethodName());"
      },
      {
        "txt": "} } private void validateException(ThrowsException answer, Invocation invocation) { Throwable throwable = answer.getThrowable(); if (throwable == null) { reporter.cannotStubWithNullThrowable(); } if (throwable instanceof RuntimeException || throwable instanceof Error) { return; }"
      },
      {
        "txt": "if (!invocation.isValidException(throwable)) { reporter.checkedExceptionInvalid(throwable); } }"
      }
    ]
  },
  {
    "id": 2879,
    "file_path": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java",
    "start-bug-line": 30,
    "end-bug-line": 30,
    "bug": "",
    "fix": "private void validateMockingConcreteClass(CallsRealMethods answer, Invocation invocation) { if (invocation.getMethod().getDeclaringClass().isInterface()) { reporter.cannotCallRealMethodOnInterface(); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.answers; import org.mockito.exceptions.Reporter; import org.mockito.internal.invocation.Invocation; import org.mockito.stubbing.Answer; public class AnswersValidator { private Reporter reporter = new Reporter(); public void validate(Answer<?> answer, Invocation invocation) { if (answer instanceof ThrowsException) { validateException((ThrowsException) answer, invocation); }"
      },
      {
        "txt": "validateReturnValue((Returns) answer, invocation); } if (answer instanceof DoesNothing) { validateDoNothing((DoesNothing) answer, invocation); } } <extra_id_0> private void validateDoNothing(DoesNothing answer, Invocation invocation) { if (!invocation.isVoid()) { reporter.onlyVoidMethodsCanBeSetToDoNothing(); } } private void validateReturnValue(Returns answer, Invocation invocation) {"
      },
      {
        "txt": "} private void validateReturnValue(Returns answer, Invocation invocation) { if (invocation.isVoid()) { reporter.cannotStubVoidMethodWithAReturnValue(); } if (answer.returnsNull() && invocation.returnsPrimitive()) { reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), \"null\", invocation.getMethodName()); } if (!answer.returnsNull() && !invocation.isValidReturnType(answer.getReturnType())) { reporter.wrongTypeOfReturnValue(invocation.printMethodReturnType(), answer.printReturnType(), invocation.getMethodName());"
      },
      {
        "txt": "} } private void validateException(ThrowsException answer, Invocation invocation) { Throwable throwable = answer.getThrowable(); if (throwable == null) { reporter.cannotStubWithNullThrowable(); } if (throwable instanceof RuntimeException || throwable instanceof Error) { return; }"
      },
      {
        "txt": "if (!invocation.isValidException(throwable)) { reporter.checkedExceptionInvalid(throwable); } }"
      }
    ]
  }
]
[
  {
    "id": 2848,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java",
    "start-bug-line": 76,
    "end-bug-line": 76,
    "bug": "return 1;",
    "fix": "return invocation.getMock() == invocation.getArguments()[0] ? 0 : 1;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.ObjectMethodsGuru; import org.mockito.internal.util.Primitives; import org.mockito.invocation.InvocationOnMock; import org.mockito.mock.MockName; import org.mockito.stubbing.Answer; import java.io.Serializable; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collection; import java.util.HashMap; import java.util.HashSet; import java.util.LinkedHashMap; import java.util.LinkedHashSet; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Set; import java.util.SortedMap;"
      },
      {
        "txt": "import java.util.SortedSet; import java.util.TreeMap; import java.util.TreeSet; public class ReturnsEmptyValues implements Answer<Object>, Serializable { private static final long serialVersionUID = 1998191268711234347L; ObjectMethodsGuru methodsGuru = new ObjectMethodsGuru(); MockUtil mockUtil = new MockUtil(); public Object answer(InvocationOnMock invocation) { if (methodsGuru.isToString(invocation.getMethod())) { Object mock = invocation.getMock();"
      },
      {
        "txt": "if (name.isDefault()) { return \"Mock for \" + mockUtil.getMockSettings(mock).getTypeToMock().getSimpleName() + \", hashCode: \" + mock.hashCode(); } else { return name.toString(); } } else if (methodsGuru.isCompareToMethod(invocation.getMethod())) { <extra_id_0> } Class<?> returnType = invocation.getMethod().getReturnType(); return returnValueFor(returnType); } Object returnValueFor(Class<?> type) { if (Primitives.isPrimitiveOrWrapper(type)) {"
      },
      {
        "txt": "Object returnValueFor(Class<?> type) { if (Primitives.isPrimitiveOrWrapper(type)) { return Primitives.defaultValueForPrimitiveOrWrapper(type); } else if (type == Collection.class) { return new LinkedList<Object>(); } else if (type == Set.class) { return new HashSet<Object>(); } else if (type == HashSet.class) { return new HashSet<Object>(); } else if (type == SortedSet.class) {"
      },
      {
        "txt": "return new TreeSet<Object>(); } else if (type == TreeSet.class) { return new TreeSet<Object>(); } else if (type == LinkedHashSet.class) { return new LinkedHashSet<Object>(); } else if (type == List.class) { return new LinkedList<Object>(); } else if (type == LinkedList.class) { return new LinkedList<Object>(); } else if (type == ArrayList.class) {"
      },
      {
        "txt": "return new ArrayList<Object>(); } else if (type == Map.class) { return new HashMap<Object, Object>(); } else if (type == HashMap.class) { return new HashMap<Object, Object>(); } else if (type == SortedMap.class) { return new TreeMap<Object, Object>(); } else if (type == TreeMap.class) { return new TreeMap<Object, Object>(); } else if (type == LinkedHashMap.class) {"
      },
      {
        "txt": "return new LinkedHashMap<Object, Object>(); } return null; }"
      }
    ]
  }
]
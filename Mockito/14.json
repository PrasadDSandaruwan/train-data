[
  {
    "id": 2800,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 20,
    "end-bug-line": 20,
    "bug": "",
    "fix": "import org.mockito.internal.verification.MockAwareVerificationMode;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.List; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher; import org.mockito.internal.invocation.MatchersBinder;"
      },
      {
        "txt": "import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl; <extra_id_0> import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl;"
      },
      {
        "txt": "private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) { this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress);"
      },
      {
        "txt": "} MockHandler() { this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) { this(oldMockHandler.getMockSettings()); } public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress"
      },
      {
        "txt": ".getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher); return null; } VerificationMode verificationMode = mockingProgress.pullVerificationMode(); InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation); mockingProgress.validateState(); if (verificationMode != null) { VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher);"
      },
      {
        "txt": "verificationMode.verify(data); return null; } invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation);"
      },
      {
        "txt": "} else { Object ret = mockSettings.getDefaultAnswer().answer(invocation); invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret; } } public VoidMethodStubbable<T> voidMethodStubbable(T mock) { return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() {"
      },
      {
        "txt": "return mockSettings; } @SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) { invocationContainerImpl.setAnswersForStubbing(answers); } public InvocationContainer getInvocationContainer() { return invocationContainerImpl; }"
      }
    ]
  },
  {
    "id": 2801,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 76,
    "end-bug-line": 76,
    "bug": "",
    "fix": "if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.List; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher; import org.mockito.internal.invocation.MatchersBinder; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl;"
      },
      {
        "txt": "import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl; import org.mockito.internal.verification.VerificationDataImpl; import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl;"
      },
      {
        "txt": "MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) { this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress); } MockHandler() {"
      },
      {
        "txt": "this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) { this(oldMockHandler.getMockSettings()); } public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress .getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher);"
      },
      {
        "txt": "} VerificationMode verificationMode = mockingProgress.pullVerificationMode(); InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation); mockingProgress.validateState(); if (verificationMode != null) { <extra_id_0> verificationMode.verify(data); return null; } invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing);"
      },
      {
        "txt": "OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation); } else { Object ret = mockSettings.getDefaultAnswer().answer(invocation); invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret;"
      },
      {
        "txt": "} } public VoidMethodStubbable<T> voidMethodStubbable(T mock) { return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() { return mockSettings; } @SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) {"
      },
      {
        "txt": "invocationContainerImpl.setAnswersForStubbing(answers); } public InvocationContainer getInvocationContainer() { return invocationContainerImpl; }"
      }
    ]
  },
  {
    "id": 2802,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 79,
    "end-bug-line": 79,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.List; import org.mockito.internal.creation.MockSettingsImpl;"
      },
      {
        "txt": "import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher; import org.mockito.internal.invocation.MatchersBinder; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl;"
      },
      {
        "txt": "import org.mockito.internal.verification.VerificationDataImpl; import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings;"
      },
      {
        "txt": "public MockHandler(MockSettingsImpl mockSettings) { this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress); } MockHandler() { this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) {"
      },
      {
        "txt": "this(oldMockHandler.getMockSettings()); } public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress .getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher); return null; } VerificationMode verificationMode = mockingProgress.pullVerificationMode();"
      },
      {
        "txt": "invocation); mockingProgress.validateState(); if (verificationMode != null) { VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl.getInvocations(), invocationMatcher); verificationMode.verify(data); return null; <extra_id_0> invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation);"
      },
      {
        "txt": "if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation); } else { Object ret = mockSettings.getDefaultAnswer().answer(invocation); invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret; } } public VoidMethodStubbable<T> voidMethodStubbable(T mock) {"
      },
      {
        "txt": "return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() { return mockSettings; } @SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) { invocationContainerImpl.setAnswersForStubbing(answers); } public InvocationContainer getInvocationContainer() {"
      },
      {
        "txt": "return invocationContainerImpl; }"
      }
    ]
  },
  {
    "id": 2803,
    "file_path": "src/org/mockito/internal/MockitoCore.java",
    "start-bug-line": 23,
    "end-bug-line": 23,
    "bug": "",
    "fix": "import org.mockito.internal.verification.MockAwareVerificationMode;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.Arrays; import java.util.List; import org.mockito.InOrder; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.AllInvocationsFinder;"
      },
      {
        "txt": "import org.mockito.internal.progress.IOngoingStubbing; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubberImpl; import org.mockito.internal.util.MockUtil; <extra_id_0> import org.mockito.internal.verification.VerificationModeFactory; import org.mockito.internal.verification.api.InOrderContext; import org.mockito.internal.verification.api.VerificationDataInOrder; import org.mockito.internal.verification.api.VerificationDataInOrderImpl; import org.mockito.stubbing.Answer; import org.mockito.stubbing.DeprecatedOngoingStubbing;"
      },
      {
        "txt": "import org.mockito.stubbing.Answer; import org.mockito.stubbing.DeprecatedOngoingStubbing; import org.mockito.stubbing.OngoingStubbing; import org.mockito.stubbing.Stubber; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; @SuppressWarnings(\"unchecked\") public class MockitoCore { private final Reporter reporter = new Reporter(); private final MockUtil mockUtil = new MockUtil();"
      },
      {
        "txt": "private final MockingProgress mockingProgress = new ThreadSafeMockingProgress(); public <T> T mock(Class<T> classToMock, MockSettings mockSettings) { T mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings); mockingProgress.mockingStarted(mock, classToMock, mockSettings); return mock; } public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing(); if (stubbing == null) { mockingProgress.reset();"
      },
      {
        "txt": "reporter.missingMethodInvocation(); } return stubbing; } public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { mockingProgress.stubbingStarted(); return (DeprecatedOngoingStubbing) stub(); } public <T> OngoingStubbing<T> when(T methodCall) { mockingProgress.stubbingStarted();"
      },
      {
        "txt": "return (OngoingStubbing) stub(); } public <T> T verify(T mock, VerificationMode mode) { if (mock == null) { reporter.nullPassedToVerify(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedToVerify(); } mockingProgress.verificationStarted(mode); return mock;"
      },
      {
        "txt": "} public <T> void reset(T ... mocks) { mockingProgress.validateState(); mockingProgress.reset(); mockingProgress.resetOngoingStubbing(); for (T m : mocks) { mockUtil.resetMock(m); } } public void verifyNoMoreInteractions(Object... mocks) {"
      },
      {
        "txt": "assertMocksNotEmpty(mocks); mockingProgress.validateState(); for (Object mock : mocks) { try { if (mock == null) { reporter.nullPassedToVerifyNoMoreInteractions(); } List<Invocation> invocations = mockUtil.getMockHandler(mock).getInvocationContainer().getInvocations(); VerificationDataImpl data = new VerificationDataImpl(invocations, null); VerificationModeFactory.noMoreInteractions().verify(data);"
      },
      {
        "txt": "} catch (NotAMockException e) { reporter.notAMockPassedToVerifyNoMoreInteractions(); } } } public void verifyNoMoreInteractionsInOrder(List<Object> mocks, InOrderContext inOrderContext) { mockingProgress.validateState(); AllInvocationsFinder finder = new AllInvocationsFinder(); VerificationDataInOrder data = new VerificationDataInOrderImpl(inOrderContext, finder.find(mocks), null); VerificationModeFactory.noMoreInteractions().verifyInOrder(data);"
      },
      {
        "txt": "} private void assertMocksNotEmpty(Object[] mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedToVerifyNoMoreInteractions(); } } public InOrder inOrder(Object... mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedWhenCreatingInOrder(); }"
      },
      {
        "txt": "for (Object mock : mocks) { if (mock == null) { reporter.nullPassedWhenCreatingInOrder(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedWhenCreatingInOrder(); } } return new InOrderImpl(Arrays.asList(mocks)); } public Stubber doAnswer(Answer answer) {"
      },
      {
        "txt": "mockingProgress.stubbingStarted(); mockingProgress.resetOngoingStubbing(); return new StubberImpl().doAnswer(answer); } public <T> VoidMethodStubbable<T> stubVoid(T mock) { MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock); mockingProgress.stubbingStarted(); return handler.voidMethodStubbable(mock); } public void validateMockitoUsage() {"
      },
      {
        "txt": "mockingProgress.validateState(); } public Invocation getLastInvocation() { OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing()); List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations(); return allInvocations.get(allInvocations.size()-1); }"
      }
    ]
  },
  {
    "id": 2804,
    "file_path": "src/org/mockito/internal/MockitoCore.java",
    "start-bug-line": 73,
    "end-bug-line": 73,
    "bug": "mockingProgress.verificationStarted(mode);",
    "fix": "mockingProgress.verificationStarted(new MockAwareVerificationMode(mock, mode));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.Arrays;"
      },
      {
        "txt": "import java.util.List; import org.mockito.InOrder; import org.mockito.MockSettings; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.misusing.NotAMockException; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.AllInvocationsFinder; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.progress.IOngoingStubbing; import org.mockito.internal.progress.MockingProgress;"
      },
      {
        "txt": "import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubberImpl; import org.mockito.internal.util.MockUtil; import org.mockito.internal.verification.VerificationDataImpl; import org.mockito.internal.verification.VerificationModeFactory; import org.mockito.internal.verification.api.InOrderContext; import org.mockito.internal.verification.api.VerificationDataInOrder; import org.mockito.internal.verification.api.VerificationDataInOrderImpl; import org.mockito.stubbing.Answer;"
      },
      {
        "txt": "import org.mockito.stubbing.DeprecatedOngoingStubbing; import org.mockito.stubbing.OngoingStubbing; import org.mockito.stubbing.Stubber; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; @SuppressWarnings(\"unchecked\") public class MockitoCore { private final Reporter reporter = new Reporter(); private final MockUtil mockUtil = new MockUtil(); private final MockingProgress mockingProgress = new ThreadSafeMockingProgress();"
      },
      {
        "txt": "public <T> T mock(Class<T> classToMock, MockSettings mockSettings) { T mock = mockUtil.createMock(classToMock, (MockSettingsImpl) mockSettings); mockingProgress.mockingStarted(mock, classToMock, mockSettings); return mock; } public IOngoingStubbing stub() { IOngoingStubbing stubbing = mockingProgress.pullOngoingStubbing(); if (stubbing == null) { mockingProgress.reset(); reporter.missingMethodInvocation();"
      },
      {
        "txt": "} return stubbing; } public <T> DeprecatedOngoingStubbing<T> stub(T methodCall) { mockingProgress.stubbingStarted(); return (DeprecatedOngoingStubbing) stub(); } public <T> OngoingStubbing<T> when(T methodCall) { mockingProgress.stubbingStarted(); return (OngoingStubbing) stub();"
      },
      {
        "txt": "public <T> T verify(T mock, VerificationMode mode) { if (mock == null) { reporter.nullPassedToVerify(); } else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedToVerify(); } <extra_id_0> return mock; } public <T> void reset(T ... mocks) { mockingProgress.validateState(); mockingProgress.reset(); mockingProgress.resetOngoingStubbing();"
      },
      {
        "txt": "mockingProgress.reset(); mockingProgress.resetOngoingStubbing(); for (T m : mocks) { mockUtil.resetMock(m); } } public void verifyNoMoreInteractions(Object... mocks) { assertMocksNotEmpty(mocks); mockingProgress.validateState(); for (Object mock : mocks) {"
      },
      {
        "txt": "try { if (mock == null) { reporter.nullPassedToVerifyNoMoreInteractions(); } List<Invocation> invocations = mockUtil.getMockHandler(mock).getInvocationContainer().getInvocations(); VerificationDataImpl data = new VerificationDataImpl(invocations, null); VerificationModeFactory.noMoreInteractions().verify(data); } catch (NotAMockException e) { reporter.notAMockPassedToVerifyNoMoreInteractions(); }"
      },
      {
        "txt": "} } public void verifyNoMoreInteractionsInOrder(List<Object> mocks, InOrderContext inOrderContext) { mockingProgress.validateState(); AllInvocationsFinder finder = new AllInvocationsFinder(); VerificationDataInOrder data = new VerificationDataInOrderImpl(inOrderContext, finder.find(mocks), null); VerificationModeFactory.noMoreInteractions().verifyInOrder(data); } private void assertMocksNotEmpty(Object[] mocks) { if (mocks == null || mocks.length == 0) {"
      },
      {
        "txt": "reporter.mocksHaveToBePassedToVerifyNoMoreInteractions(); } } public InOrder inOrder(Object... mocks) { if (mocks == null || mocks.length == 0) { reporter.mocksHaveToBePassedWhenCreatingInOrder(); } for (Object mock : mocks) { if (mock == null) { reporter.nullPassedWhenCreatingInOrder();"
      },
      {
        "txt": "} else if (!mockUtil.isMock(mock)) { reporter.notAMockPassedWhenCreatingInOrder(); } } return new InOrderImpl(Arrays.asList(mocks)); } public Stubber doAnswer(Answer answer) { mockingProgress.stubbingStarted(); mockingProgress.resetOngoingStubbing(); return new StubberImpl().doAnswer(answer);"
      },
      {
        "txt": "} public <T> VoidMethodStubbable<T> stubVoid(T mock) { MockHandlerInterface<T> handler = mockUtil.getMockHandler(mock); mockingProgress.stubbingStarted(); return handler.voidMethodStubbable(mock); } public void validateMockitoUsage() { mockingProgress.validateState(); } public Invocation getLastInvocation() {"
      },
      {
        "txt": "OngoingStubbingImpl ongoingStubbing = ((OngoingStubbingImpl) mockingProgress.pullOngoingStubbing()); List<Invocation> allInvocations = ongoingStubbing.getRegisteredInvocations(); return allInvocations.get(allInvocations.size()-1); }"
      }
    ]
  }
]
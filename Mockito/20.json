[
  {
    "id": 2831,
    "file_path": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
    "start-bug-line": 32,
    "end-bug-line": 32,
    "bug": "",
    "fix": "Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.bytebuddy; import static org.mockito.internal.util.StringJoiner.join; import java.lang.reflect.Constructor; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.configuration.GlobalConfiguration; import org.mockito.internal.creation.instance.*; import org.mockito.invocation.MockHandler; import org.mockito.mock.MockCreationSettings;"
      },
      {
        "txt": "import org.mockito.mock.SerializableMode; import org.mockito.plugins.MockMaker; public class ByteBuddyMockMaker implements MockMaker { private final ClassInstantiator classInstantiator; private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator; public ByteBuddyMockMaker() { classInstantiator = initializeClassInstantiator(); cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator(); } public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) {"
      },
      {
        "txt": "throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\"); } Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get( settings.getTypeToMock(), settings.getExtraInterfaces() ); <extra_id_0> try { mockInstance = classInstantiator.instantiate(mockedProxyType); MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance; mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings)); return ensureMockIsAssignableToMockedType(settings, mockInstance); } catch (ClassCastException cce) {"
      },
      {
        "txt": "return ensureMockIsAssignableToMockedType(settings, mockInstance); } catch (ClassCastException cce) { throw new MockitoException(join( \"ClassCastException occurred while creating the mockito mock :\", \" class to mock : \" + describeClass(mockedProxyType), \" created class : \" + describeClass(settings.getTypeToMock()), \" proxy instance class : \" + describeClass(mockInstance), \" instance creation by : \" + classInstantiator.getClass().getSimpleName(), \"\", \"You might experience classloading issues, please ask the mockito mailing-list.\","
      },
      {
        "txt": "\"\" ),cce); } catch (org.mockito.internal.creation.instance.InstantiationException e) { throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e); } } private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) { Class<T> typeToMock = settings.getTypeToMock(); return typeToMock.cast(mock); }"
      },
      {
        "txt": "private static String describeClass(Class type) { return type == null ? \"null\" : \"'\" + type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\"; } private static String describeClass(Object instance) { return instance == null ? \"null\" : describeClass(instance.getClass()); } public MockHandler getHandler(Object mock) { if (!(mock instanceof MockMethodInterceptor.MockAccess)) { return null; }"
      },
      {
        "txt": "return ((MockMethodInterceptor.MockAccess) mock).getMockitoInterceptor().getMockHandler(); } public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) { ((MockMethodInterceptor.MockAccess) mock).setMockitoInterceptor( new MockMethodInterceptor(asInternalMockHandler(newHandler), settings) ); } private static ClassInstantiator initializeClassInstantiator() { try { Class<?> objenesisClassLoader = Class.forName(\"org.mockito.internal.creation.bytebuddy.ClassInstantiator$UsingObjenesis\");"
      },
      {
        "txt": "Constructor<?> usingClassCacheConstructor = objenesisClassLoader.getDeclaredConstructor(boolean.class); return ClassInstantiator.class.cast(usingClassCacheConstructor.newInstance(new GlobalConfiguration().enableClassCache())); } catch (Throwable throwable) { throw new IllegalStateException(join( \"Mockito could not create mock: Objenesis is missing on the classpath.\", \"Please add Objenesis on the classpath.\", \"\" ), throwable); } }"
      },
      {
        "txt": "private static InternalMockHandler asInternalMockHandler(MockHandler handler) { if (!(handler instanceof InternalMockHandler)) { throw new MockitoException(join( \"At the moment you cannot provide own implementations of MockHandler.\", \"Please see the javadocs for the MockMaker interface.\", \"\" )); } return (InternalMockHandler) handler; }"
      }
    ]
  },
  {
    "id": 2832,
    "file_path": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
    "start-bug-line": 34,
    "end-bug-line": 34,
    "bug": "mockInstance = classInstantiator.instantiate(mockedProxyType);",
    "fix": "mockInstance = instantiator.newInstance(mockedProxyType);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.mockito.internal.util.StringJoiner.join; import java.lang.reflect.Constructor; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.configuration.GlobalConfiguration; import org.mockito.internal.creation.instance.*; import org.mockito.invocation.MockHandler; import org.mockito.mock.MockCreationSettings; import org.mockito.mock.SerializableMode; import org.mockito.plugins.MockMaker;"
      },
      {
        "txt": "public class ByteBuddyMockMaker implements MockMaker { private final ClassInstantiator classInstantiator; private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator; public ByteBuddyMockMaker() { classInstantiator = initializeClassInstantiator(); cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator(); } public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) { if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) { throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");"
      },
      {
        "txt": "Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get( settings.getTypeToMock(), settings.getExtraInterfaces() ); T mockInstance = null; try { <extra_id_0> MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance; mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings)); return ensureMockIsAssignableToMockedType(settings, mockInstance); } catch (ClassCastException cce) { throw new MockitoException(join( \"ClassCastException occurred while creating the mockito mock :\","
      },
      {
        "txt": "throw new MockitoException(join( \"ClassCastException occurred while creating the mockito mock :\", \" class to mock : \" + describeClass(mockedProxyType), \" created class : \" + describeClass(settings.getTypeToMock()), \" proxy instance class : \" + describeClass(mockInstance), \" instance creation by : \" + classInstantiator.getClass().getSimpleName(), \"\", \"You might experience classloading issues, please ask the mockito mailing-list.\", \"\" ),cce);"
      },
      {
        "txt": "} catch (org.mockito.internal.creation.instance.InstantiationException e) { throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e); } } private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) { Class<T> typeToMock = settings.getTypeToMock(); return typeToMock.cast(mock); } private static String describeClass(Class type) { return type == null ? \"null\" : \"'\" + type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\";"
      },
      {
        "txt": "} private static String describeClass(Object instance) { return instance == null ? \"null\" : describeClass(instance.getClass()); } public MockHandler getHandler(Object mock) { if (!(mock instanceof MockMethodInterceptor.MockAccess)) { return null; } return ((MockMethodInterceptor.MockAccess) mock).getMockitoInterceptor().getMockHandler(); }"
      },
      {
        "txt": "public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) { ((MockMethodInterceptor.MockAccess) mock).setMockitoInterceptor( new MockMethodInterceptor(asInternalMockHandler(newHandler), settings) ); } private static ClassInstantiator initializeClassInstantiator() { try { Class<?> objenesisClassLoader = Class.forName(\"org.mockito.internal.creation.bytebuddy.ClassInstantiator$UsingObjenesis\"); Constructor<?> usingClassCacheConstructor = objenesisClassLoader.getDeclaredConstructor(boolean.class); return ClassInstantiator.class.cast(usingClassCacheConstructor.newInstance(new GlobalConfiguration().enableClassCache()));"
      },
      {
        "txt": "} catch (Throwable throwable) { throw new IllegalStateException(join( \"Mockito could not create mock: Objenesis is missing on the classpath.\", \"Please add Objenesis on the classpath.\", \"\" ), throwable); } } private static InternalMockHandler asInternalMockHandler(MockHandler handler) { if (!(handler instanceof InternalMockHandler)) {"
      },
      {
        "txt": "throw new MockitoException(join( \"At the moment you cannot provide own implementations of MockHandler.\", \"Please see the javadocs for the MockMaker interface.\", \"\" )); } return (InternalMockHandler) handler; }"
      }
    ]
  },
  {
    "id": 2833,
    "file_path": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
    "start-bug-line": 45,
    "end-bug-line": 45,
    "bug": "\"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),",
    "fix": "\"  instance creation by : \" + instantiator.getClass().getSimpleName(),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.mockito.internal.util.StringJoiner.join; import java.lang.reflect.Constructor; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.configuration.GlobalConfiguration; import org.mockito.internal.creation.instance.*; import org.mockito.invocation.MockHandler; import org.mockito.mock.MockCreationSettings; import org.mockito.mock.SerializableMode; import org.mockito.plugins.MockMaker;"
      },
      {
        "txt": "public class ByteBuddyMockMaker implements MockMaker { private final ClassInstantiator classInstantiator; private final CachingMockBytecodeGenerator cachingMockBytecodeGenerator; public ByteBuddyMockMaker() { classInstantiator = initializeClassInstantiator(); cachingMockBytecodeGenerator = new CachingMockBytecodeGenerator(); } public <T> T createMock(MockCreationSettings<T> settings, MockHandler handler) { if (settings.getSerializableMode() == SerializableMode.ACROSS_CLASSLOADERS) { throw new MockitoException(\"Serialization across classloaders not yet supported with ByteBuddyMockMaker\");"
      },
      {
        "txt": "} Class<? extends T> mockedProxyType = cachingMockBytecodeGenerator.get( settings.getTypeToMock(), settings.getExtraInterfaces() ); T mockInstance = null; try { mockInstance = classInstantiator.instantiate(mockedProxyType); MockMethodInterceptor.MockAccess mockAccess = (MockMethodInterceptor.MockAccess) mockInstance; mockAccess.setMockitoInterceptor(new MockMethodInterceptor(asInternalMockHandler(handler), settings));"
      },
      {
        "txt": "} catch (ClassCastException cce) { throw new MockitoException(join( \"ClassCastException occurred while creating the mockito mock :\", \" class to mock : \" + describeClass(mockedProxyType), \" created class : \" + describeClass(settings.getTypeToMock()), \" proxy instance class : \" + describeClass(mockInstance), <extra_id_0> \"\", \"You might experience classloading issues, please ask the mockito mailing-list.\", \"\" ),cce); } catch (org.mockito.internal.creation.instance.InstantiationException e) { throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e);"
      },
      {
        "txt": "} catch (org.mockito.internal.creation.instance.InstantiationException e) { throw new MockitoException(\"Unable to create mock instance of type '\" + mockedProxyType.getSuperclass().getSimpleName() + \"'\", e); } } private <T> T ensureMockIsAssignableToMockedType(MockCreationSettings<T> settings, T mock) { Class<T> typeToMock = settings.getTypeToMock(); return typeToMock.cast(mock); } private static String describeClass(Class type) { return type == null ? \"null\" : \"'\" + type.getCanonicalName() + \"', loaded by classloader : '\" + type.getClassLoader() + \"'\";"
      },
      {
        "txt": "} private static String describeClass(Object instance) { return instance == null ? \"null\" : describeClass(instance.getClass()); } public MockHandler getHandler(Object mock) { if (!(mock instanceof MockMethodInterceptor.MockAccess)) { return null; } return ((MockMethodInterceptor.MockAccess) mock).getMockitoInterceptor().getMockHandler(); }"
      },
      {
        "txt": "public void resetMock(Object mock, MockHandler newHandler, MockCreationSettings settings) { ((MockMethodInterceptor.MockAccess) mock).setMockitoInterceptor( new MockMethodInterceptor(asInternalMockHandler(newHandler), settings) ); } private static ClassInstantiator initializeClassInstantiator() { try { Class<?> objenesisClassLoader = Class.forName(\"org.mockito.internal.creation.bytebuddy.ClassInstantiator$UsingObjenesis\"); Constructor<?> usingClassCacheConstructor = objenesisClassLoader.getDeclaredConstructor(boolean.class); return ClassInstantiator.class.cast(usingClassCacheConstructor.newInstance(new GlobalConfiguration().enableClassCache()));"
      },
      {
        "txt": "} catch (Throwable throwable) { throw new IllegalStateException(join( \"Mockito could not create mock: Objenesis is missing on the classpath.\", \"Please add Objenesis on the classpath.\", \"\" ), throwable); } } private static InternalMockHandler asInternalMockHandler(MockHandler handler) { if (!(handler instanceof InternalMockHandler)) {"
      },
      {
        "txt": "throw new MockitoException(join( \"At the moment you cannot provide own implementations of MockHandler.\", \"Please see the javadocs for the MockMaker interface.\", \"\" )); } return (InternalMockHandler) handler; }"
      }
    ]
  }
]
[
  {
    "id": 2866,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
    "start-bug-line": 9,
    "end-bug-line": 9,
    "bug": "",
    "fix": "import java.util.Arrays;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import java.io.Serializable; import java.lang.reflect.Method; <extra_id_0> import org.mockito.Mockito; import org.mockito.cglib.proxy.MethodInterceptor; import org.mockito.cglib.proxy.MethodProxy; import org.mockito.exceptions.Reporter; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.debugging.Location;"
      },
      {
        "txt": "import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.debugging.Location; import org.mockito.internal.util.ObjectMethodsGuru; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsSmartNulls implements Answer<Object>, Serializable { private static final long serialVersionUID = 7618312406617949441L; private final class ThrowingInterceptor implements MethodInterceptor { private final InvocationOnMock invocation; private final Location location = new Location();"
      },
      {
        "txt": "private ThrowingInterceptor(InvocationOnMock invocation) { this.invocation = invocation; } public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable { if (new ObjectMethodsGuru().isToString(method)) { return \"SmartNull returned by unstubbed \" + formatMethodCall() + \" method on mock\"; } new Reporter().smartNullPointerException(location); return null; }"
      },
      {
        "txt": "private String formatMethodCall() { return invocation.getMethod().getName() + \"()\"; } } private final Answer<Object> delegate = new ReturnsMoreEmptyValues(); public Object answer(final InvocationOnMock invocation) throws Throwable { Object defaultReturnValue = delegate.answer(invocation); if (defaultReturnValue != null) { return defaultReturnValue; }"
      },
      {
        "txt": "Class<?> type = invocation.getMethod().getReturnType(); if (ClassImposterizer.INSTANCE.canImposterise(type)) { return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type); } return null; }"
      }
    ]
  },
  {
    "id": 2867,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java",
    "start-bug-line": 60,
    "end-bug-line": 60,
    "bug": "return invocation.getMethod().getName() + \"()\";",
    "fix": "String args = Arrays.toString(invocation.getArguments()); return invocation.getMethod().getName() + \"(\" + args.substring(1, args.length() - 1) +\t\")\";",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.lang.reflect.Method; import org.mockito.Mockito; import org.mockito.cglib.proxy.MethodInterceptor; import org.mockito.cglib.proxy.MethodProxy; import org.mockito.exceptions.Reporter; import org.mockito.internal.creation.jmock.ClassImposterizer; import org.mockito.internal.debugging.Location; import org.mockito.internal.util.ObjectMethodsGuru; import org.mockito.invocation.InvocationOnMock;"
      },
      {
        "txt": "import org.mockito.stubbing.Answer; public class ReturnsSmartNulls implements Answer<Object>, Serializable { private static final long serialVersionUID = 7618312406617949441L; private final class ThrowingInterceptor implements MethodInterceptor { private final InvocationOnMock invocation; private final Location location = new Location(); private ThrowingInterceptor(InvocationOnMock invocation) { this.invocation = invocation; } public Object intercept(Object obj, Method method, Object[] args, MethodProxy proxy) throws Throwable {"
      },
      {
        "txt": "return \"SmartNull returned by unstubbed \" + formatMethodCall() + \" method on mock\"; } new Reporter().smartNullPointerException(location); return null; } private String formatMethodCall() { <extra_id_0> } } private final Answer<Object> delegate = new ReturnsMoreEmptyValues(); public Object answer(final InvocationOnMock invocation) throws Throwable { Object defaultReturnValue = delegate.answer(invocation); if (defaultReturnValue != null) {"
      },
      {
        "txt": "Object defaultReturnValue = delegate.answer(invocation); if (defaultReturnValue != null) { return defaultReturnValue; } Class<?> type = invocation.getMethod().getReturnType(); if (ClassImposterizer.INSTANCE.canImposterise(type)) { return ClassImposterizer.INSTANCE.imposterise(new ThrowingInterceptor(invocation), type); } return null; }"
      }
    ]
  }
]
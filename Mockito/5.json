[
  {
    "id": 2758,
    "file_path": "src/org/mockito/internal/verification/VerificationOverTimeImpl.java",
    "start-bug-line": 91,
    "end-bug-line": 91,
    "bug": "catch (org.mockito.exceptions.verification.junit.ArgumentsAreDifferent e) {",
    "fix": "catch (AssertionError e) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.verification; import org.mockito.exceptions.base.MockitoAssertionError; import org.mockito.internal.util.Timer; import org.mockito.internal.verification.api.VerificationData; import org.mockito.verification.VerificationMode; public class VerificationOverTimeImpl implements VerificationMode { private final long pollingPeriodMillis; private final long durationMillis;"
      },
      {
        "txt": "private final VerificationMode delegate; private final boolean returnOnSuccess; private final Timer timer; public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess) { this(pollingPeriodMillis, durationMillis, delegate, returnOnSuccess, new Timer(durationMillis)); } public VerificationOverTimeImpl(long pollingPeriodMillis, long durationMillis, VerificationMode delegate, boolean returnOnSuccess, Timer timer) { this.pollingPeriodMillis = pollingPeriodMillis; this.durationMillis = durationMillis; this.delegate = delegate;"
      },
      {
        "txt": "this.returnOnSuccess = returnOnSuccess; this.timer = timer; } public void verify(VerificationData data) { AssertionError error = null; timer.start(); while (timer.isCounting()) { try { delegate.verify(data); if (returnOnSuccess) {"
      },
      {
        "txt": "} else { error = null; } } catch (MockitoAssertionError e) { error = handleVerifyException(e); } <extra_id_0> error = handleVerifyException(e); } } if (error != null) { throw error; }"
      },
      {
        "txt": "throw error; } } private AssertionError handleVerifyException(AssertionError e) { if (canRecoverFromFailure(delegate)) { sleep(pollingPeriodMillis); return e; } else { throw e; }"
      },
      {
        "txt": "} protected boolean canRecoverFromFailure(VerificationMode verificationMode) { return !(verificationMode instanceof AtMost || verificationMode instanceof NoMoreInteractions); } private void sleep(long sleep) { try { Thread.sleep(sleep); } catch (InterruptedException ie) { } }"
      },
      {
        "txt": "public long getPollingPeriod() { return pollingPeriodMillis; } public long getDuration() { return durationMillis; } public VerificationMode getDelegate() { return delegate; }"
      }
    ]
  }
]
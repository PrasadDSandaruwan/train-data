[
  {
    "id": 2805,
    "file_path": "src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
    "start-bug-line": 4,
    "end-bug-line": 4,
    "bug": "",
    "fix": "import org.mockito.internal.util.reflection.BeanPropertySetter;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.configuration.injection; import org.mockito.exceptions.base.MockitoException; <extra_id_0> import java.lang.reflect.Field; import java.util.Collection; public class FinalMockCandidateFilter implements MockCandidateFilter { public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) { if(mocks.size() == 1) { final Object matchingMock = mocks.iterator().next();"
      },
      {
        "txt": "if(mocks.size() == 1) { final Object matchingMock = mocks.iterator().next(); return new OngoingInjecter() { public boolean thenInject() { try { new FieldSetter(fieldInstance, field).set(matchingMock); } catch (Exception e) { throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e); } return true;"
      },
      {
        "txt": "} }; } return new OngoingInjecter() { public boolean thenInject() { return false; } }; }"
      }
    ]
  },
  {
    "id": 2806,
    "file_path": "src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
    "start-bug-line": 25,
    "end-bug-line": 25,
    "bug": "",
    "fix": "if (!new BeanPropertySetter(fieldInstance, field).set(matchingMock)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.configuration.injection; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.util.reflection.FieldSetter; import java.lang.reflect.Field; import java.util.Collection;"
      },
      {
        "txt": "public OngoingInjecter filterCandidate(final Collection<Object> mocks, final Field field, final Object fieldInstance) { if(mocks.size() == 1) { final Object matchingMock = mocks.iterator().next(); return new OngoingInjecter() { public boolean thenInject() { try { <extra_id_0> } catch (Exception e) { throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e); } return true; } };"
      },
      {
        "txt": "} }; } return new OngoingInjecter() { public boolean thenInject() { return false; } }; }"
      }
    ]
  },
  {
    "id": 2807,
    "file_path": "src/org/mockito/internal/configuration/injection/FinalMockCandidateFilter.java",
    "start-bug-line": 26,
    "end-bug-line": 26,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.configuration.injection; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.util.reflection.FieldSetter; import java.lang.reflect.Field; import java.util.Collection; public class FinalMockCandidateFilter implements MockCandidateFilter {"
      },
      {
        "txt": "if(mocks.size() == 1) { final Object matchingMock = mocks.iterator().next(); return new OngoingInjecter() { public boolean thenInject() { try { new FieldSetter(fieldInstance, field).set(matchingMock); <extra_id_0> throw new MockitoException(\"Problems injecting dependency in \" + field.getName(), e); } return true; } }; }"
      },
      {
        "txt": "}; } return new OngoingInjecter() { public boolean thenInject() { return false; } }; }"
      }
    ]
  }
]
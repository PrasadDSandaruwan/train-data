[
  {
    "id": 2861,
    "file_path": "src/org/mockito/internal/configuration/DefaultInjectionEngine.java",
    "start-bug-line": 93,
    "end-bug-line": 93,
    "bug": "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
    "fix": "Object injected = mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject(); mocks.remove(injected);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.configuration; import org.mockito.exceptions.Reporter; import org.mockito.exceptions.base.MockitoException; import org.mockito.internal.configuration.injection.FinalMockCandidateFilter; import org.mockito.internal.configuration.injection.MockCandidateFilter; import org.mockito.internal.configuration.injection.NameBasedCandidateFilter; import org.mockito.internal.configuration.injection.TypeBasedCandidateFilter; import org.mockito.internal.util.reflection.FieldInitializer; import java.lang.reflect.Field;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Comparator; import java.util.HashSet; import java.util.Set; public class DefaultInjectionEngine { private final MockCandidateFilter mockCandidateFilter = new TypeBasedCandidateFilter(new NameBasedCandidateFilter(new FinalMockCandidateFilter())); private Comparator<Field> supertypesLast = new Comparator<Field>() { public int compare(Field field1, Field field2) { Class<?> field1Type = field1.getType(); Class<?> field2Type = field2.getType();"
      },
      {
        "txt": "if(field1Type.isAssignableFrom(field2Type)) { return 1; } if(field2Type.isAssignableFrom(field1Type)) { return -1; } return 0; } }; public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance) {"
      },
      {
        "txt": "for (Field field : injectMocksFields) { Set<Object> mocksToBeInjected = new HashSet<Object>(mocks); Object injectMocksFieldInstance = null; try { injectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize(); } catch (MockitoException e) { new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e); } Class<?> fieldClass = injectMocksFieldInstance.getClass(); while (fieldClass != Object.class) {"
      },
      {
        "txt": "fieldClass = fieldClass.getSuperclass(); } } } private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance) { for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz)) { <extra_id_0> } } private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz) { Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields(); Arrays.sort(declaredFields, supertypesLast); return declaredFields;"
      },
      {
        "txt": "Arrays.sort(declaredFields, supertypesLast); return declaredFields; }"
      }
    ]
  }
]
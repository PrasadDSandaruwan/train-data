[
  {
    "id": 2797,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 77,
    "end-bug-line": 77,
    "bug": "if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {",
    "fix": "if (((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.List; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher; import org.mockito.internal.invocation.MatchersBinder; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.OngoingStubbingImpl;"
      },
      {
        "txt": "import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl; import org.mockito.internal.verification.MockAwareVerificationMode; import org.mockito.internal.verification.VerificationDataImpl; import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl;"
      },
      {
        "txt": "MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) { this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress); } MockHandler() {"
      },
      {
        "txt": "this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) { this(oldMockHandler.getMockSettings()); } public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress .getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher);"
      },
      {
        "txt": "} VerificationMode verificationMode = mockingProgress.pullVerificationMode(); InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(), invocation); mockingProgress.validateState(); if (verificationMode != null) { <extra_id_0> VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher); verificationMode.verify(data); return null; } } invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher);"
      },
      {
        "txt": "} invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation); } else { Object ret = mockSettings.getDefaultAnswer().answer(invocation);"
      },
      {
        "txt": "invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret; } } public VoidMethodStubbable<T> voidMethodStubbable(T mock) { return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() { return mockSettings; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) { invocationContainerImpl.setAnswersForStubbing(answers); } public InvocationContainer getInvocationContainer() { return invocationContainerImpl; }"
      }
    ]
  },
  {
    "id": 2798,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 81,
    "end-bug-line": 81,
    "bug": "",
    "fix": "} else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.List; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.invocation.MatchersBinder; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl; import org.mockito.internal.verification.MockAwareVerificationMode; import org.mockito.internal.verification.VerificationDataImpl;"
      },
      {
        "txt": "import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) {"
      },
      {
        "txt": "this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress); } MockHandler() { this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) { this(oldMockHandler.getMockSettings());"
      },
      {
        "txt": "} public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress .getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher); return null; } VerificationMode verificationMode = mockingProgress.pullVerificationMode(); InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),"
      },
      {
        "txt": "mockingProgress.validateState(); if (verificationMode != null) { if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) { VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher); verificationMode.verify(data); return null; <extra_id_0> } } invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation);"
      },
      {
        "txt": "mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation); } else { Object ret = mockSettings.getDefaultAnswer().answer(invocation); invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret; }"
      },
      {
        "txt": "} public VoidMethodStubbable<T> voidMethodStubbable(T mock) { return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() { return mockSettings; } @SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) { invocationContainerImpl.setAnswersForStubbing(answers);"
      },
      {
        "txt": "} public InvocationContainer getInvocationContainer() { return invocationContainerImpl; }"
      }
    ]
  },
  {
    "id": 2799,
    "file_path": "src/org/mockito/internal/MockHandler.java",
    "start-bug-line": 83,
    "end-bug-line": 83,
    "bug": "",
    "fix": "mockingProgress.verificationStarted(verificationMode);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal; import java.util.List; import org.mockito.internal.creation.MockSettingsImpl; import org.mockito.internal.invocation.Invocation; import org.mockito.internal.invocation.InvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.invocation.MatchersBinder; import org.mockito.internal.progress.MockingProgress; import org.mockito.internal.progress.ThreadSafeMockingProgress; import org.mockito.internal.stubbing.InvocationContainer; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.OngoingStubbingImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.stubbing.VoidMethodStubbableImpl; import org.mockito.internal.verification.MockAwareVerificationMode; import org.mockito.internal.verification.VerificationDataImpl;"
      },
      {
        "txt": "import org.mockito.stubbing.Answer; import org.mockito.stubbing.VoidMethodStubbable; import org.mockito.verification.VerificationMode; public class MockHandler<T> implements MockitoInvocationHandler, MockHandlerInterface<T> { private static final long serialVersionUID = -2917871070982574165L; InvocationContainerImpl invocationContainerImpl; MatchersBinder matchersBinder = new MatchersBinder(); MockingProgress mockingProgress = new ThreadSafeMockingProgress(); private final MockSettingsImpl mockSettings; public MockHandler(MockSettingsImpl mockSettings) {"
      },
      {
        "txt": "this.mockSettings = mockSettings; this.mockingProgress = new ThreadSafeMockingProgress(); this.matchersBinder = new MatchersBinder(); this.invocationContainerImpl = new InvocationContainerImpl(mockingProgress); } MockHandler() { this(new MockSettingsImpl()); } public MockHandler(MockHandlerInterface<T> oldMockHandler) { this(oldMockHandler.getMockSettings());"
      },
      {
        "txt": "} public Object handle(Invocation invocation) throws Throwable { if (invocationContainerImpl.hasAnswersForStubbing()) { InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress .getArgumentMatcherStorage(), invocation); invocationContainerImpl.setMethodForStubbing(invocationMatcher); return null; } VerificationMode verificationMode = mockingProgress.pullVerificationMode(); InvocationMatcher invocationMatcher = matchersBinder.bindMatchers(mockingProgress.getArgumentMatcherStorage(),"
      },
      {
        "txt": "mockingProgress.validateState(); if (verificationMode != null) { if (verificationMode instanceof MockAwareVerificationMode && ((MockAwareVerificationMode) verificationMode).getMock() == invocation.getMock()) { VerificationDataImpl data = new VerificationDataImpl(invocationContainerImpl, invocationMatcher); verificationMode.verify(data); return null; <extra_id_0> } invocationContainerImpl.setInvocationForPotentialStubbing(invocationMatcher); OngoingStubbingImpl<T> ongoingStubbing = new OngoingStubbingImpl<T>(invocationContainerImpl); mockingProgress.reportOngoingStubbing(ongoingStubbing); StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) {"
      },
      {
        "txt": "StubbedInvocationMatcher stubbedInvocation = invocationContainerImpl.findAnswerFor(invocation); if (stubbedInvocation != null) { stubbedInvocation.captureArgumentsFrom(invocation); return stubbedInvocation.answer(invocation); } else { Object ret = mockSettings.getDefaultAnswer().answer(invocation); invocationContainerImpl.resetInvocationForPotentialStubbing(invocationMatcher); return ret; } }"
      },
      {
        "txt": "public VoidMethodStubbable<T> voidMethodStubbable(T mock) { return new VoidMethodStubbableImpl<T>(mock, invocationContainerImpl); } public MockSettingsImpl getMockSettings() { return mockSettings; } @SuppressWarnings(\"unchecked\") public void setAnswersForStubbing(List<Answer> answers) { invocationContainerImpl.setAnswersForStubbing(answers); }"
      },
      {
        "txt": "public InvocationContainer getInvocationContainer() { return invocationContainerImpl; }"
      }
    ]
  }
]
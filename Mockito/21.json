[
  {
    "id": 2834,
    "file_path": "src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
    "start-bug-line": 17,
    "end-bug-line": 17,
    "bug": "return withOuterClass(cls);",
    "fix": "return withParams(cls, outerClassInstance);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.instance; import java.lang.reflect.Constructor; public class ConstructorInstantiator implements Instantiator { private final Object outerClassInstance;"
      },
      {
        "txt": "this.outerClassInstance = outerClassInstance; } public <T> T newInstance(Class<T> cls) { if (outerClassInstance == null) { return noArgConstructor(cls); } <extra_id_0> } private <T> T withOuterClass(Class<T> cls) { try { Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass()); return c.newInstance(outerClassInstance); } catch (Exception e) {"
      },
      {
        "txt": "return c.newInstance(outerClassInstance); } catch (Exception e) { throw paramsException(cls, e); } } private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e); } private static <T> T noArgConstructor(Class<T> cls) {"
      },
      {
        "txt": "try { return cls.newInstance(); } catch (Exception e) { throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e); } }"
      }
    ]
  },
  {
    "id": 2835,
    "file_path": "src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
    "start-bug-line": 20,
    "end-bug-line": 20,
    "bug": "private <T> T withOuterClass(Class<T> cls) {",
    "fix": "private static <T> T withParams(Class<T> cls, Object... params) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.instance; import java.lang.reflect.Constructor; public class ConstructorInstantiator implements Instantiator { private final Object outerClassInstance; public ConstructorInstantiator(Object outerClassInstance) { this.outerClassInstance = outerClassInstance;"
      },
      {
        "txt": "public <T> T newInstance(Class<T> cls) { if (outerClassInstance == null) { return noArgConstructor(cls); } return withOuterClass(cls); } <extra_id_0> try { Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass()); return c.newInstance(outerClassInstance); } catch (Exception e) { throw paramsException(cls, e); }"
      },
      {
        "txt": "throw paramsException(cls, e); } } private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e); } private static <T> T noArgConstructor(Class<T> cls) { try { return cls.newInstance();"
      },
      {
        "txt": "} catch (Exception e) { throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e); } }"
      }
    ]
  },
  {
    "id": 2836,
    "file_path": "src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
    "start-bug-line": 24,
    "end-bug-line": 25,
    "bug": "Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass()); return c.newInstance(outerClassInstance);",
    "fix": "for (Constructor<?> constructor : cls.getDeclaredConstructors()) { Class<?>[] types = constructor.getParameterTypes(); if (paramsMatch(types, params)) { return (T) constructor.newInstance(params); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.instance; import java.lang.reflect.Constructor; public class ConstructorInstantiator implements Instantiator { private final Object outerClassInstance; public ConstructorInstantiator(Object outerClassInstance) { this.outerClassInstance = outerClassInstance; } public <T> T newInstance(Class<T> cls) {"
      },
      {
        "txt": "return noArgConstructor(cls); } return withOuterClass(cls); } private <T> T withOuterClass(Class<T> cls) { try { <extra_id_0> } catch (Exception e) { throw paramsException(cls, e); } } private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\""
      },
      {
        "txt": "private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e); } private static <T> T noArgConstructor(Class<T> cls) { try { return cls.newInstance(); } catch (Exception e) { throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e);"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 2837,
    "file_path": "src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
    "start-bug-line": 29,
    "end-bug-line": 29,
    "bug": "",
    "fix": "throw paramsException(cls, null);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.instance; import java.lang.reflect.Constructor; public class ConstructorInstantiator implements Instantiator {"
      },
      {
        "txt": "private final Object outerClassInstance; public ConstructorInstantiator(Object outerClassInstance) { this.outerClassInstance = outerClassInstance; } public <T> T newInstance(Class<T> cls) { if (outerClassInstance == null) { return noArgConstructor(cls); } return withOuterClass(cls); }"
      },
      {
        "txt": "try { Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass()); return c.newInstance(outerClassInstance); } catch (Exception e) { throw paramsException(cls, e); } <extra_id_0> private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e); } private static <T> T noArgConstructor(Class<T> cls) { try {"
      },
      {
        "txt": "private static <T> T noArgConstructor(Class<T> cls) { try { return cls.newInstance(); } catch (Exception e) { throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e); } }"
      }
    ]
  },
  {
    "id": 2838,
    "file_path": "src/org/mockito/internal/creation/instance/ConstructorInstantiator.java",
    "start-bug-line": 36,
    "end-bug-line": 36,
    "bug": "",
    "fix": "private static boolean paramsMatch(Class<?>[] types, Object[] params) { if (params.length != types.length) { return false; } for (int i = 0; i < params.length; i++) { if (!types[i].isInstance(params[i])) { return false; } } return true; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.creation.instance; import java.lang.reflect.Constructor; public class ConstructorInstantiator implements Instantiator { private final Object outerClassInstance; public ConstructorInstantiator(Object outerClassInstance) { this.outerClassInstance = outerClassInstance; } public <T> T newInstance(Class<T> cls) {"
      },
      {
        "txt": "if (outerClassInstance == null) { return noArgConstructor(cls); } return withOuterClass(cls); } private <T> T withOuterClass(Class<T> cls) { try { Constructor<T> c = cls.getDeclaredConstructor(outerClassInstance.getClass()); return c.newInstance(outerClassInstance); } catch (Exception e) {"
      },
      {
        "txt": "} } private static <T> InstantationException paramsException(Class<T> cls, Exception e) { return new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure that the outer instance has correct type and that the target class has parameter-less constructor.\", e); } <extra_id_0> private static <T> T noArgConstructor(Class<T> cls) { try { return cls.newInstance(); } catch (Exception e) { throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e);"
      },
      {
        "txt": "throw new InstantationException(\"Unable to create mock instance of '\" + cls.getSimpleName() + \"'.\\nPlease ensure it has parameter-less constructor.\", e); } }"
      }
    ]
  }
]
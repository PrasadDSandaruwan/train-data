[
  {
    "id": 2840,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 44,
    "end-bug-line": 45,
    "bug": "private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues();",
    "fix": "private transient MockitoCore mockitoCore; private transient ReturnsEmptyValues delegate;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; <extra_id_0> public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType);"
      },
      {
        "txt": "if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {"
      },
      {
        "txt": "return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata) );"
      },
      {
        "txt": "} private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); } private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) {"
      },
      {
        "txt": "return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable {"
      },
      {
        "txt": "return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2841,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 52,
    "end-bug-line": 52,
    "bug": "",
    "fix": "instantiateMockitoCoreIfNeeded(); instantiateDelegateIfNeeded();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings;"
      },
      {
        "txt": "import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable {"
      },
      {
        "txt": "private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); <extra_id_0> return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock());"
      },
      {
        "txt": "private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); }"
      },
      {
        "txt": "private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata) ); } private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())"
      },
      {
        "txt": ": withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); } private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; }"
      },
      {
        "txt": "}; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; }"
      },
      {
        "txt": "protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2842,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 59,
    "end-bug-line": 59,
    "bug": "",
    "fix": "private synchronized void instantiateMockitoCoreIfNeeded() { if (mockitoCore == null) { mockitoCore = new MockitoCore(); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } <extra_id_0> private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation);"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata)"
      },
      {
        "txt": "); } private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); }"
      },
      {
        "txt": "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { container.addAnswer(new Answer<Object>() {"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2843,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 60,
    "end-bug-line": 60,
    "bug": "",
    "fix": "private synchronized void instantiateDelegateIfNeeded() { if (delegate == null) { delegate = new ReturnsEmptyValues(); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } <extra_id_0> private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation);"
      },
      {
        "txt": "if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata)"
      },
      {
        "txt": "); } private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); }"
      },
      {
        "txt": "private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { container.addAnswer(new Answer<Object>() {"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2844,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 100,
    "end-bug-line": 100,
    "bug": "",
    "fix": ".serializable()",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport;"
      },
      {
        "txt": "import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType();"
      },
      {
        "txt": "if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) {"
      },
      {
        "txt": "return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata) );"
      },
      {
        "txt": "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings <extra_id_0> } private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata;"
      },
      {
        "txt": "protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { container.addAnswer(new Answer<Object>() { public Object answer(InvocationOnMock invocation) throws Throwable { return mock; }"
      },
      {
        "txt": "}, false); return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2845,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 114,
    "end-bug-line": 114,
    "bug": "container.addAnswer(new Answer<Object>() {",
    "fix": "container.addAnswer(new SerializableAnswer() {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*;"
      },
      {
        "txt": "import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher; import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock;"
      },
      {
        "txt": "import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata = actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) {"
      },
      {
        "txt": "return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer(); for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation);"
      },
      {
        "txt": "} } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(), withSettingsUsing(returnTypeGenericMetadata) ); }"
      },
      {
        "txt": "private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata)); } private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() {"
      },
      {
        "txt": "protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable { <extra_id_0> public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; }"
      },
      {
        "txt": "return mock; } protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); }"
      }
    ]
  },
  {
    "id": 2846,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 123,
    "end-bug-line": 123,
    "bug": "",
    "fix": "abstract class SerializableAnswer implements Answer<Object>, Serializable {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(),"
      },
      {
        "txt": "withSettingsUsing(returnTypeGenericMetadata) ); } private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));"
      },
      {
        "txt": "} private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } <extra_id_0> protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); } }"
      }
    ]
  },
  {
    "id": 2847,
    "file_path": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java",
    "start-bug-line": 124,
    "end-bug-line": 124,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.mockito.internal.stubbing.defaultanswers; import static org.mockito.Mockito.*; import java.io.Serializable; import org.mockito.MockSettings; import org.mockito.internal.InternalMockHandler; import org.mockito.internal.MockitoCore; import org.mockito.internal.creation.settings.CreationSettings; import org.mockito.internal.stubbing.InvocationContainerImpl; import org.mockito.internal.stubbing.StubbedInvocationMatcher;"
      },
      {
        "txt": "import org.mockito.internal.util.MockUtil; import org.mockito.internal.util.reflection.GenericMetadataSupport; import org.mockito.invocation.InvocationOnMock; import org.mockito.stubbing.Answer; public class ReturnsDeepStubs implements Answer<Object>, Serializable { private static final long serialVersionUID = -7105341425736035847L; private MockitoCore mockitoCore = new MockitoCore(); private ReturnsEmptyValues delegate = new ReturnsEmptyValues(); public Object answer(InvocationOnMock invocation) throws Throwable { GenericMetadataSupport returnTypeGenericMetadata ="
      },
      {
        "txt": "actualParameterizedType(invocation.getMock()).resolveGenericReturnType(invocation.getMethod()); Class<?> rawType = returnTypeGenericMetadata.rawType(); if (!mockitoCore.isTypeMockable(rawType)) { return delegate.returnValueFor(rawType); } return getMock(invocation, returnTypeGenericMetadata); } private Object getMock(InvocationOnMock invocation, GenericMetadataSupport returnTypeGenericMetadata) throws Throwable { InternalMockHandler<Object> handler = new MockUtil().getMockHandler(invocation.getMock()); InvocationContainerImpl container = (InvocationContainerImpl) handler.getInvocationContainer();"
      },
      {
        "txt": "for (StubbedInvocationMatcher stubbedInvocationMatcher : container.getStubbedInvocations()) { if(container.getInvocationForStubbing().matches(stubbedInvocationMatcher.getInvocation())) { return stubbedInvocationMatcher.answer(invocation); } } return recordDeepStubMock(createNewDeepStubMock(returnTypeGenericMetadata), container); } private Object createNewDeepStubMock(GenericMetadataSupport returnTypeGenericMetadata) { return mockitoCore.mock( returnTypeGenericMetadata.rawType(),"
      },
      {
        "txt": "withSettingsUsing(returnTypeGenericMetadata) ); } private MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata) { MockSettings mockSettings = returnTypeGenericMetadata.rawExtraInterfaces().length > 0 ? withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces()) : withSettings(); return mockSettings .defaultAnswer(returnsDeepStubsAnswerUsing(returnTypeGenericMetadata));"
      },
      {
        "txt": "} private ReturnsDeepStubs returnsDeepStubsAnswerUsing(final GenericMetadataSupport returnTypeGenericMetadata) { return new ReturnsDeepStubs() { @Override protected GenericMetadataSupport actualParameterizedType(Object mock) { return returnTypeGenericMetadata; } }; } private Object recordDeepStubMock(final Object mock, InvocationContainerImpl container) throws Throwable {"
      },
      {
        "txt": "public Object answer(InvocationOnMock invocation) throws Throwable { return mock; } }, false); return mock; } <extra_id_0> protected GenericMetadataSupport actualParameterizedType(Object mock) { CreationSettings mockSettings = (CreationSettings) new MockUtil().getMockHandler(mock).getMockSettings(); return GenericMetadataSupport.inferFrom(mockSettings.getTypeToMock()); } }"
      }
    ]
  }
]
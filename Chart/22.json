[
  {
    "id": 47,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 231,
    "end-bug-line": 231,
    "bug": "if (row >= 0) {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList();"
      },
      {
        "txt": "this.rows = new java.util.ArrayList(); } public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null;"
      },
      {
        "txt": "KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } }"
      },
      {
        "txt": "return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys);"
      },
      {
        "txt": "} public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); }"
      },
      {
        "txt": "public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey"
      },
      {
        "txt": "} int column = this.columnKeys.indexOf(columnKey); if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } <extra_id_0> KeyedObjects rowData = (KeyedObjects) this.rows.get(row); return rowData.getObject(columnKey); } else { return null; }"
      },
      {
        "txt": "return null; } } public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); }"
      },
      {
        "txt": "else { this.rowKeys.add(rowKey); row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); }"
      },
      {
        "txt": "} public void removeObject(Comparable rowKey, Comparable columnKey) { setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false;"
      },
      {
        "txt": "break; } } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex);"
      },
      {
        "txt": "this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); }"
      },
      {
        "txt": "public void removeColumn(Comparable columnKey) { int index = getColumnIndex(columnKey); if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); rowData.removeValue(columnKey);"
      },
      {
        "txt": "} this.columnKeys.remove(columnKey); } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; }"
      },
      {
        "txt": "KeyedObjects2D that = (KeyedObjects2D) obj; if (!getRowKeys().equals(that.getRowKeys())) { return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false;"
      },
      {
        "txt": "} int colCount = getColumnCount(); if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) {"
      },
      {
        "txt": "if (v2 != null) { return false; } } else { if (!v1.equals(v2)) { return false; } } }"
      },
      {
        "txt": "} return true; } public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; }"
      },
      {
        "txt": "public Object clone() throws CloneNotSupportedException { KeyedObjects2D clone = (KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); }"
      },
      {
        "txt": "return clone; }"
      }
    ]
  },
  {
    "id": 48,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 233,
    "end-bug-line": 233,
    "bug": "return rowData.getObject(columnKey);",
    "fix": "int index = rowData.getIndex(columnKey); if (index >= 0) { return rowData.getObject(index);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); }"
      },
      {
        "txt": "public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) {"
      },
      {
        "txt": "Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } } return result; }"
      },
      {
        "txt": "public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) {"
      },
      {
        "txt": "return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); }"
      },
      {
        "txt": "if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row); <extra_id_0> } else { return null; } } public void addObject(Object object, Comparable rowKey,"
      },
      {
        "txt": "} public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); }"
      },
      {
        "txt": "if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); } else { this.rowKeys.add(rowKey);"
      },
      {
        "txt": "row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); } } public void removeObject(Comparable rowKey, Comparable columnKey) {"
      },
      {
        "txt": "setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false; break; }"
      },
      {
        "txt": "} if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); }"
      },
      {
        "txt": "public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) { int index = getColumnIndex(columnKey);"
      },
      {
        "txt": "if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); rowData.removeValue(columnKey); } this.columnKeys.remove(columnKey);"
      },
      {
        "txt": "} public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; } KeyedObjects2D that = (KeyedObjects2D) obj; if (!getRowKeys().equals(that.getRowKeys())) {"
      },
      {
        "txt": "return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false; } int colCount = getColumnCount();"
      },
      {
        "txt": "if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) { if (v2 != null) { return false;"
      },
      {
        "txt": "} } else { if (!v1.equals(v2)) { return false; } } } } return true;"
      },
      {
        "txt": "} public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { KeyedObjects2D clone = (KeyedObjects2D) super.clone();"
      },
      {
        "txt": "clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); } return clone; }"
      }
    ]
  },
  {
    "id": 49,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 318,
    "end-bug-line": 318,
    "bug": "",
    "fix": "allNull = true;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); }"
      },
      {
        "txt": "public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) {"
      },
      {
        "txt": "Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } } return result; }"
      },
      {
        "txt": "public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) {"
      },
      {
        "txt": "return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); }"
      },
      {
        "txt": "int column = this.columnKeys.indexOf(columnKey); if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row); return rowData.getObject(columnKey); } else {"
      },
      {
        "txt": "return null; } } public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); }"
      },
      {
        "txt": "else { this.rowKeys.add(rowKey); row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); }"
      },
      {
        "txt": "} public void removeObject(Comparable rowKey, Comparable columnKey) { setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false;"
      },
      {
        "txt": "} } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } <extra_id_0> } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) {"
      },
      {
        "txt": "} public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) {"
      },
      {
        "txt": "int index = getColumnIndex(columnKey); if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); rowData.removeValue(columnKey); }"
      },
      {
        "txt": "this.columnKeys.remove(columnKey); } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; } KeyedObjects2D that = (KeyedObjects2D) obj;"
      },
      {
        "txt": "if (!getRowKeys().equals(that.getRowKeys())) { return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false; }"
      },
      {
        "txt": "int colCount = getColumnCount(); if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) { if (v2 != null) {"
      },
      {
        "txt": "return false; } } else { if (!v1.equals(v2)) { return false; } } } }"
      },
      {
        "txt": "return true; } public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException {"
      },
      {
        "txt": "KeyedObjects2D clone = (KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); } return clone;"
      }
    ]
  },
  {
    "id": 50,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 319,
    "end-bug-line": 319,
    "bug": "",
    "fix": "for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (KeyedObjects) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0 && row.getObject(columnIndex) != null) { allNull = false; break; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); }"
      },
      {
        "txt": "public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) {"
      },
      {
        "txt": "Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } } return result; }"
      },
      {
        "txt": "public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) {"
      },
      {
        "txt": "return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); }"
      },
      {
        "txt": "int column = this.columnKeys.indexOf(columnKey); if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row); return rowData.getObject(columnKey); } else {"
      },
      {
        "txt": "return null; } } public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); }"
      },
      {
        "txt": "else { this.rowKeys.add(rowKey); row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); }"
      },
      {
        "txt": "} public void removeObject(Comparable rowKey, Comparable columnKey) { setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false;"
      },
      {
        "txt": "} } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } <extra_id_0> } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) {"
      },
      {
        "txt": "} public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) {"
      },
      {
        "txt": "int index = getColumnIndex(columnKey); if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); rowData.removeValue(columnKey); }"
      },
      {
        "txt": "this.columnKeys.remove(columnKey); } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; } KeyedObjects2D that = (KeyedObjects2D) obj;"
      },
      {
        "txt": "if (!getRowKeys().equals(that.getRowKeys())) { return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false; }"
      },
      {
        "txt": "int colCount = getColumnCount(); if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) { if (v2 != null) {"
      },
      {
        "txt": "return false; } } else { if (!v1.equals(v2)) { return false; } } } }"
      },
      {
        "txt": "return true; } public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException {"
      },
      {
        "txt": "KeyedObjects2D clone = (KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); } return clone;"
      }
    ]
  },
  {
    "id": 51,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 320,
    "end-bug-line": 320,
    "bug": "",
    "fix": "if (allNull) { for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (KeyedObjects) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0) { row.removeValue(columnIndex); } } this.columnKeys.remove(columnKey); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); }"
      },
      {
        "txt": "public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) {"
      },
      {
        "txt": "Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } } return result; }"
      },
      {
        "txt": "public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) {"
      },
      {
        "txt": "return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); }"
      },
      {
        "txt": "int column = this.columnKeys.indexOf(columnKey); if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row); return rowData.getObject(columnKey); } else {"
      },
      {
        "txt": "return null; } } public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); }"
      },
      {
        "txt": "else { this.rowKeys.add(rowKey); row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); }"
      },
      {
        "txt": "} public void removeObject(Comparable rowKey, Comparable columnKey) { setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false;"
      },
      {
        "txt": "} } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } <extra_id_0> public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey);"
      },
      {
        "txt": "public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) { int index = getColumnIndex(columnKey);"
      },
      {
        "txt": "if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); rowData.removeValue(columnKey); } this.columnKeys.remove(columnKey);"
      },
      {
        "txt": "} public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; } KeyedObjects2D that = (KeyedObjects2D) obj; if (!getRowKeys().equals(that.getRowKeys())) {"
      },
      {
        "txt": "return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false; } int colCount = getColumnCount();"
      },
      {
        "txt": "if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) { if (v2 != null) { return false;"
      },
      {
        "txt": "} } else { if (!v1.equals(v2)) { return false; } } } } return true;"
      },
      {
        "txt": "} public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { KeyedObjects2D clone = (KeyedObjects2D) super.clone();"
      },
      {
        "txt": "clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); } return clone; }"
      }
    ]
  },
  {
    "id": 52,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 345,
    "end-bug-line": 345,
    "bug": "",
    "fix": "if (index < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.Collections; import java.util.Iterator; import java.util.List; public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L; private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList();"
      },
      {
        "txt": "this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); } public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) {"
      },
      {
        "txt": "Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) { int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } }"
      },
      {
        "txt": "} return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() {"
      },
      {
        "txt": "return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys);"
      },
      {
        "txt": "} public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) {"
      },
      {
        "txt": "throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); } int column = this.columnKeys.indexOf(columnKey); if (column < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row);"
      },
      {
        "txt": "return rowData.getObject(columnKey); } else { return null; } } public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); }"
      },
      {
        "txt": "public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey);"
      },
      {
        "txt": "if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); } else { this.rowKeys.add(rowKey); row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey);"
      },
      {
        "txt": "if (columnIndex < 0) { this.columnKeys.add(columnKey); } } public void removeObject(Comparable rowKey, Comparable columnKey) { setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount;"
      },
      {
        "txt": "item++) { if (row.getObject(item) != null) { allNull = false; break; } } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); }"
      },
      {
        "txt": "public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); <extra_id_0> } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) {"
      },
      {
        "txt": "} public void removeColumn(Comparable columnKey) { int index = getColumnIndex(columnKey); if (index < 0) { throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next();"
      },
      {
        "txt": "rowData.removeValue(columnKey); } this.columnKeys.remove(columnKey); } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false;"
      },
      {
        "txt": "} KeyedObjects2D that = (KeyedObjects2D) obj; if (!getRowKeys().equals(that.getRowKeys())) { return false; } if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) {"
      },
      {
        "txt": "return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c);"
      },
      {
        "txt": "if (v1 == null) { if (v2 != null) { return false; } } else { if (!v1.equals(v2)) { return false; } }"
      },
      {
        "txt": "} } return true; } public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result;"
      },
      {
        "txt": "} public Object clone() throws CloneNotSupportedException { KeyedObjects2D clone = (KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone());"
      },
      {
        "txt": "} return clone; }"
      }
    ]
  },
  {
    "id": 53,
    "file_path": "source/org/jfree/data/KeyedObjects2D.java",
    "start-bug-line": 378,
    "end-bug-line": 378,
    "bug": "rowData.removeValue(columnKey);",
    "fix": "int i = rowData.getIndex(columnKey); if (i >= 0) { rowData.removeValue(i); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List; public class KeyedObjects2D implements Cloneable, Serializable { private static final long serialVersionUID = -1015873563138522374L;"
      },
      {
        "txt": "private List rowKeys; private List columnKeys; private List rows; public KeyedObjects2D() { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); } public int getRowCount() { return this.rowKeys.size();"
      },
      {
        "txt": "} public int getColumnCount() { return this.columnKeys.size(); } public Object getObject(int row, int column) { Object result = null; KeyedObjects rowData = (KeyedObjects) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column); if (columnKey != null) {"
      },
      {
        "txt": "int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getObject(columnKey); } } } return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row);"
      },
      {
        "txt": "} public int getRowIndex(Comparable key) { return this.rowKeys.indexOf(key); } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); }"
      },
      {
        "txt": "public int getColumnIndex(Comparable key) { return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Object getObject(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); }"
      },
      {
        "txt": "if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } int row = this.rowKeys.indexOf(rowKey); if (row < 0) { throw new UnknownKeyException(\"Row key (\" + rowKey + \") not recognised.\"); } int column = this.columnKeys.indexOf(columnKey); if (column < 0) {"
      },
      {
        "txt": "throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } if (row >= 0) { KeyedObjects rowData = (KeyedObjects) this.rows.get(row); return rowData.getObject(columnKey); } else { return null; }"
      },
      {
        "txt": "} public void addObject(Object object, Comparable rowKey, Comparable columnKey) { setObject(object, rowKey, columnKey); } public void setObject(Object object, Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); }"
      },
      {
        "txt": "if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } KeyedObjects row; int rowIndex = this.rowKeys.indexOf(rowKey); if (rowIndex >= 0) { row = (KeyedObjects) this.rows.get(rowIndex); } else { this.rowKeys.add(rowKey);"
      },
      {
        "txt": "row = new KeyedObjects(); this.rows.add(row); } row.setObject(columnKey, object); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); } } public void removeObject(Comparable rowKey, Comparable columnKey) {"
      },
      {
        "txt": "setObject(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getObject(item) != null) { allNull = false; break; }"
      },
      {
        "txt": "} if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); }"
      },
      {
        "txt": "public void removeRow(Comparable rowKey) { int index = getRowIndex(rowKey); removeRow(index); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) { int index = getColumnIndex(columnKey);"
      },
      {
        "txt": "throw new UnknownKeyException(\"Column key (\" + columnKey + \") not recognised.\"); } Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects rowData = (KeyedObjects) iterator.next(); <extra_id_0> } this.columnKeys.remove(columnKey); } public boolean equals(Object obj) { if (obj == this) { return true;"
      },
      {
        "txt": "if (obj == this) { return true; } if (!(obj instanceof KeyedObjects2D)) { return false; } KeyedObjects2D that = (KeyedObjects2D) obj; if (!getRowKeys().equals(that.getRowKeys())) { return false; }"
      },
      {
        "txt": "if (!getColumnKeys().equals(that.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != that.getRowCount()) { return false; } int colCount = getColumnCount(); if (colCount != that.getColumnCount()) { return false;"
      },
      {
        "txt": "} for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Object v1 = getObject(r, c); Object v2 = that.getObject(r, c); if (v1 == null) { if (v2 != null) { return false; } }"
      },
      {
        "txt": "else { if (!v1.equals(v2)) { return false; } } } } return true; } public int hashCode() {"
      },
      {
        "txt": "int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { KeyedObjects2D clone = (KeyedObjects2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys);"
      },
      {
        "txt": "clone.rows = new java.util.ArrayList(this.rows.size()); Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { KeyedObjects row = (KeyedObjects) iterator.next(); clone.rows.add(row.clone()); } return clone; }"
      }
    ]
  }
]
[
  {
    "id": 15,
    "file_path": "source/org/jfree/chart/util/ShapeList.java",
    "start-bug-line": 111,
    "end-bug-line": 111,
    "bug": "return super.equals(obj);",
    "fix": "ShapeList that = (ShapeList) obj; int listSize = size(); for (int i = 0; i < listSize; i++) { if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) { return false; } } return true;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.chart.util; import java.awt.Shape; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; public class ShapeList extends AbstractObjectList { public ShapeList() { super();"
      },
      {
        "txt": "} public Shape getShape(int index) { return (Shape) get(index); } public void setShape(int index, Shape shape) { set(index, shape); } public Object clone() throws CloneNotSupportedException { return super.clone(); }"
      },
      {
        "txt": "if (obj == this) { return true; } if (!(obj instanceof ShapeList)) { return false; } <extra_id_0> } public int hashCode() { return super.hashCode(); } private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject();"
      },
      {
        "txt": "private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject(); int count = size(); stream.writeInt(count); for (int i = 0; i < count; i++) { Shape shape = getShape(i); if (shape != null) { stream.writeInt(i); SerialUtilities.writeShape(shape, stream); }"
      },
      {
        "txt": "else { stream.writeInt(-1); } } } private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { stream.defaultReadObject(); int count = stream.readInt(); for (int i = 0; i < count; i++) {"
      },
      {
        "txt": "int index = stream.readInt(); if (index != -1) { setShape(index, SerialUtilities.readShape(stream)); } } }"
      }
    ]
  }
]
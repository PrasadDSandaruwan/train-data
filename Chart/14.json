[
  {
    "id": 24,
    "file_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "start-bug-line": 2166,
    "end-bug-line": 2166,
    "bug": "",
    "fix": "if (markers == null) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.chart.plot; import java.awt.AlphaComposite; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Composite; import java.awt.Font; import java.awt.Graphics2D; import java.awt.Paint; import java.awt.Shape; import java.awt.Stroke;"
      },
      {
        "txt": "import java.awt.geom.Line2D; import java.awt.geom.Point2D; import java.awt.geom.Rectangle2D; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection; import java.util.Collections;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.ResourceBundle; import java.util.Set; import org.jfree.chart.LegendItem; import org.jfree.chart.LegendItemCollection; import org.jfree.chart.annotations.CategoryAnnotation; import org.jfree.chart.axis.Axis;"
      },
      {
        "txt": "import org.jfree.chart.axis.AxisCollection; import org.jfree.chart.axis.AxisLocation; import org.jfree.chart.axis.AxisSpace; import org.jfree.chart.axis.AxisState; import org.jfree.chart.axis.CategoryAnchor; import org.jfree.chart.axis.CategoryAxis; import org.jfree.chart.axis.ValueAxis; import org.jfree.chart.axis.ValueTick; import org.jfree.chart.event.ChartChangeEventType; import org.jfree.chart.event.PlotChangeEvent;"
      },
      {
        "txt": "import org.jfree.chart.event.RendererChangeEvent; import org.jfree.chart.event.RendererChangeListener; import org.jfree.chart.renderer.category.CategoryItemRenderer; import org.jfree.chart.renderer.category.CategoryItemRendererState; import org.jfree.chart.util.Layer; import org.jfree.chart.util.ObjectList; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PaintUtilities; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.RectangleEdge;"
      },
      {
        "txt": "import org.jfree.chart.util.RectangleInsets; import org.jfree.chart.util.SerialUtilities; import org.jfree.chart.util.SortOrder; import org.jfree.data.Range; import org.jfree.data.category.CategoryDataset; import org.jfree.data.general.Dataset; import org.jfree.data.general.DatasetChangeEvent; import org.jfree.data.general.DatasetUtilities; public class CategoryPlot extends Plot implements ValueAxisPlot, Zoomable, RendererChangeListener, Cloneable, PublicCloneable,"
      },
      {
        "txt": "Serializable { private static final long serialVersionUID = -3537691700434728188L; public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false; public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true; public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] {2.0f, 2.0f}, 0.0f); public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE; public static final Font DEFAULT_VALUE_LABEL_FONT = new Font(\"SansSerif\", Font.PLAIN, 10);"
      },
      {
        "txt": "public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false; public static final Stroke DEFAULT_CROSSHAIR_STROKE = DEFAULT_GRIDLINE_STROKE; public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue; protected static ResourceBundle localizationResources = ResourceBundle.getBundle( \"org.jfree.chart.plot.LocalizationBundle\"); private PlotOrientation orientation; private RectangleInsets axisOffset; private ObjectList domainAxes;"
      },
      {
        "txt": "private ObjectList domainAxisLocations; private boolean drawSharedDomainAxis; private ObjectList rangeAxes; private ObjectList rangeAxisLocations; private ObjectList datasets; private ObjectList datasetToDomainAxisMap; private ObjectList datasetToRangeAxisMap; private ObjectList renderers; private DatasetRenderingOrder renderingOrder = DatasetRenderingOrder.REVERSE;"
      },
      {
        "txt": "private SortOrder columnRenderingOrder = SortOrder.ASCENDING; private SortOrder rowRenderingOrder = SortOrder.ASCENDING; private boolean domainGridlinesVisible; private CategoryAnchor domainGridlinePosition; private transient Stroke domainGridlineStroke; private transient Paint domainGridlinePaint; private boolean rangeGridlinesVisible; private transient Stroke rangeGridlineStroke; private transient Paint rangeGridlinePaint; private double anchorValue;"
      },
      {
        "txt": "private boolean rangeCrosshairVisible; private double rangeCrosshairValue; private transient Stroke rangeCrosshairStroke; private transient Paint rangeCrosshairPaint; private boolean rangeCrosshairLockedOnData = true; private Map foregroundDomainMarkers; private Map backgroundDomainMarkers; private Map foregroundRangeMarkers; private Map backgroundRangeMarkers; private List annotations;"
      },
      {
        "txt": "private int weight; private AxisSpace fixedDomainAxisSpace; private AxisSpace fixedRangeAxisSpace; private LegendItemCollection fixedLegendItems; public CategoryPlot() { this(null, null, null, null); } public CategoryPlot(CategoryDataset dataset, CategoryAxis domainAxis, ValueAxis rangeAxis,"
      },
      {
        "txt": "CategoryItemRenderer renderer) { super(); this.orientation = PlotOrientation.VERTICAL; this.domainAxes = new ObjectList(); this.domainAxisLocations = new ObjectList(); this.rangeAxes = new ObjectList(); this.rangeAxisLocations = new ObjectList(); this.datasetToDomainAxisMap = new ObjectList(); this.datasetToRangeAxisMap = new ObjectList(); this.renderers = new ObjectList();"
      },
      {
        "txt": "this.datasets = new ObjectList(); this.datasets.set(0, dataset); if (dataset != null) { dataset.addChangeListener(this); } this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0); setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false); setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false); this.renderers.set(0, renderer); if (renderer != null) {"
      },
      {
        "txt": "renderer.setPlot(this); renderer.addChangeListener(this); } this.domainAxes.set(0, domainAxis); this.mapDatasetToDomainAxis(0, 0); if (domainAxis != null) { domainAxis.setPlot(this); domainAxis.addChangeListener(this); } this.drawSharedDomainAxis = false;"
      },
      {
        "txt": "this.rangeAxes.set(0, rangeAxis); this.mapDatasetToRangeAxis(0, 0); if (rangeAxis != null) { rangeAxis.setPlot(this); rangeAxis.addChangeListener(this); } configureDomainAxes(); configureRangeAxes(); this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE; this.domainGridlinePosition = CategoryAnchor.MIDDLE;"
      },
      {
        "txt": "this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE; this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.foregroundDomainMarkers = new HashMap(); this.backgroundDomainMarkers = new HashMap(); this.foregroundRangeMarkers = new HashMap(); this.backgroundRangeMarkers = new HashMap(); Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f,"
      },
      {
        "txt": "0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, 0.5f), new BasicStroke(1.0f), 0.6f); addRangeMarker(baseline, Layer.BACKGROUND); this.anchorValue = 0.0; this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE; this.rangeCrosshairValue = 0.0; this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.annotations = new java.util.ArrayList(); }"
      },
      {
        "txt": "public String getPlotType() { return localizationResources.getString(\"Category_Plot\"); } public PlotOrientation getOrientation() { return this.orientation; } public void setOrientation(PlotOrientation orientation) { if (orientation == null) { throw new IllegalArgumentException(\"Null 'orientation' argument.\"); }"
      },
      {
        "txt": "this.orientation = orientation; fireChangeEvent(); } public RectangleInsets getAxisOffset() { return this.axisOffset; } public void setAxisOffset(RectangleInsets offset) { if (offset == null) { throw new IllegalArgumentException(\"Null 'offset' argument.\"); }"
      },
      {
        "txt": "this.axisOffset = offset; fireChangeEvent(); } public CategoryAxis getDomainAxis() { return getDomainAxis(0); } public CategoryAxis getDomainAxis(int index) { CategoryAxis result = null; if (index < this.domainAxes.size()) { result = (CategoryAxis) this.domainAxes.get(index);"
      },
      {
        "txt": "} if (result == null) { Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot cp = (CategoryPlot) parent; result = cp.getDomainAxis(index); } } return result; }"
      },
      {
        "txt": "public void setDomainAxis(CategoryAxis axis) { setDomainAxis(0, axis); } public void setDomainAxis(int index, CategoryAxis axis) { setDomainAxis(index, axis, true); } public void setDomainAxis(int index, CategoryAxis axis, boolean notify) { CategoryAxis existing = (CategoryAxis) this.domainAxes.get(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} if (axis != null) { axis.setPlot(this); } this.domainAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public void setDomainAxes(CategoryAxis[] axes) { for (int i = 0; i < axes.length; i++) { setDomainAxis(i, axes[i], false); } fireChangeEvent(); } public int getDomainAxisIndex(CategoryAxis axis) {"
      },
      {
        "txt": "if (axis == null) { throw new IllegalArgumentException(\"Null 'axis' argument.\"); } return this.domainAxes.indexOf(axis); } public AxisLocation getDomainAxisLocation() { return getDomainAxisLocation(0); } public AxisLocation getDomainAxisLocation(int index) { AxisLocation result = null;"
      },
      {
        "txt": "if (index < this.domainAxisLocations.size()) { result = (AxisLocation) this.domainAxisLocations.get(index); } if (result == null) { result = AxisLocation.getOpposite(getDomainAxisLocation(0)); } return result; } public void setDomainAxisLocation(AxisLocation location) { setDomainAxisLocation(0, location, true);"
      },
      {
        "txt": "} public void setDomainAxisLocation(AxisLocation location, boolean notify) { setDomainAxisLocation(0, location, notify); } public void setDomainAxisLocation(int index, AxisLocation location) { setDomainAxisLocation(index, location, true); } public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\"); } this.domainAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getDomainAxisEdge() { return getDomainAxisEdge(0);"
      },
      {
        "txt": "} public RectangleEdge getDomainAxisEdge(int index) { RectangleEdge result = null; AxisLocation location = getDomainAxisLocation(index); if (location != null) { result = Plot.resolveDomainAxisLocation(location, this.orientation); } else { result = RectangleEdge.opposite(getDomainAxisEdge(0)); }"
      },
      {
        "txt": "return result; } public int getDomainAxisCount() { return this.domainAxes.size(); } public void clearDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i); if (axis != null) { axis.removeChangeListener(this);"
      },
      {
        "txt": "} } this.domainAxes.clear(); fireChangeEvent(); } public void configureDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i); if (axis != null) { axis.configure();"
      },
      {
        "txt": "} } } public ValueAxis getRangeAxis() { return getRangeAxis(0); } public ValueAxis getRangeAxis(int index) { ValueAxis result = null; if (index < this.rangeAxes.size()) { result = (ValueAxis) this.rangeAxes.get(index);"
      },
      {
        "txt": "} if (result == null) { Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot cp = (CategoryPlot) parent; result = cp.getRangeAxis(index); } } return result; }"
      },
      {
        "txt": "public void setRangeAxis(ValueAxis axis) { setRangeAxis(0, axis); } public void setRangeAxis(int index, ValueAxis axis) { setRangeAxis(index, axis, true); } public void setRangeAxis(int index, ValueAxis axis, boolean notify) { ValueAxis existing = (ValueAxis) this.rangeAxes.get(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} if (axis != null) { axis.setPlot(this); } this.rangeAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public void setRangeAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) { setRangeAxis(i, axes[i], false); } fireChangeEvent(); } public int getRangeAxisIndex(ValueAxis axis) {"
      },
      {
        "txt": "if (axis == null) { throw new IllegalArgumentException(\"Null 'axis' argument.\"); } int result = this.rangeAxes.indexOf(axis); if (result < 0) { // try the parent plot Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot p = (CategoryPlot) parent; result = p.getRangeAxisIndex(axis); }"
      },
      {
        "txt": "} return result; } public AxisLocation getRangeAxisLocation() { return getRangeAxisLocation(0); } public AxisLocation getRangeAxisLocation(int index) { AxisLocation result = null; if (index < this.rangeAxisLocations.size()) { result = (AxisLocation) this.rangeAxisLocations.get(index);"
      },
      {
        "txt": "} if (result == null) { result = AxisLocation.getOpposite(getRangeAxisLocation(0)); } return result; } public void setRangeAxisLocation(AxisLocation location) { setRangeAxisLocation(location, true); } public void setRangeAxisLocation(AxisLocation location, boolean notify) {"
      },
      {
        "txt": "setRangeAxisLocation(0, location, notify); } public void setRangeAxisLocation(int index, AxisLocation location) { setRangeAxisLocation(index, location, true); } public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) { throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\");"
      },
      {
        "txt": "} this.rangeAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getRangeAxisEdge() { return getRangeAxisEdge(0); } public RectangleEdge getRangeAxisEdge(int index) {"
      },
      {
        "txt": "AxisLocation location = getRangeAxisLocation(index); RectangleEdge result = Plot.resolveRangeAxisLocation(location, this.orientation); if (result == null) { result = RectangleEdge.opposite(getRangeAxisEdge(0)); } return result; } public int getRangeAxisCount() { return this.rangeAxes.size();"
      },
      {
        "txt": "} public void clearRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.removeChangeListener(this); } } this.rangeAxes.clear(); fireChangeEvent();"
      },
      {
        "txt": "} public void configureRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.configure(); } } } public CategoryDataset getDataset() {"
      },
      {
        "txt": "return getDataset(0); } public CategoryDataset getDataset(int index) { CategoryDataset result = null; if (this.datasets.size() > index) { result = (CategoryDataset) this.datasets.get(index); } return result; } public void setDataset(CategoryDataset dataset) {"
      },
      {
        "txt": "setDataset(0, dataset); } public void setDataset(int index, CategoryDataset dataset) { CategoryDataset existing = (CategoryDataset) this.datasets.get(index); if (existing != null) { existing.removeChangeListener(this); } this.datasets.set(index, dataset); if (dataset != null) { dataset.addChangeListener(this);"
      },
      {
        "txt": "} DatasetChangeEvent event = new DatasetChangeEvent(this, dataset); datasetChanged(event); } public int getDatasetCount() { return this.datasets.size(); } public void mapDatasetToDomainAxis(int index, int axisIndex) { this.datasetToDomainAxisMap.set(index, new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index)));"
      },
      {
        "txt": "} public CategoryAxis getDomainAxisForDataset(int index) { CategoryAxis result = getDomainAxis(); Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(index); if (axisIndex != null) { result = getDomainAxis(axisIndex.intValue()); } return result; } public void mapDatasetToRangeAxis(int index, int axisIndex) {"
      },
      {
        "txt": "this.datasetToRangeAxisMap.set(index, new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index))); } public ValueAxis getRangeAxisForDataset(int index) { ValueAxis result = getRangeAxis(); Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(index); if (axisIndex != null) { result = getRangeAxis(axisIndex.intValue()); } return result;"
      },
      {
        "txt": "} public CategoryItemRenderer getRenderer() { return getRenderer(0); } public CategoryItemRenderer getRenderer(int index) { CategoryItemRenderer result = null; if (this.renderers.size() > index) { result = (CategoryItemRenderer) this.renderers.get(index); } return result;"
      },
      {
        "txt": "} public void setRenderer(CategoryItemRenderer renderer) { setRenderer(0, renderer, true); } public void setRenderer(CategoryItemRenderer renderer, boolean notify) { setRenderer(0, renderer, notify); } public void setRenderer(int index, CategoryItemRenderer renderer) { setRenderer(index, renderer, true); }"
      },
      {
        "txt": "public void setRenderer(int index, CategoryItemRenderer renderer, boolean notify) { CategoryItemRenderer existing = (CategoryItemRenderer) this.renderers.get(index); if (existing != null) { existing.removeChangeListener(this); } this.renderers.set(index, renderer); if (renderer != null) { renderer.setPlot(this);"
      },
      {
        "txt": "renderer.addChangeListener(this); } configureDomainAxes(); configureRangeAxes(); if (notify) { fireChangeEvent(); } } public void setRenderers(CategoryItemRenderer[] renderers) { for (int i = 0; i < renderers.length; i++) {"
      },
      {
        "txt": "setRenderer(i, renderers[i], false); } fireChangeEvent(); } public CategoryItemRenderer getRendererForDataset(CategoryDataset dataset) { CategoryItemRenderer result = null; for (int i = 0; i < this.datasets.size(); i++) { if (this.datasets.get(i) == dataset) { result = (CategoryItemRenderer) this.renderers.get(i); break;"
      },
      {
        "txt": "} } return result; } public int getIndexOf(CategoryItemRenderer renderer) { return this.renderers.indexOf(renderer); } public DatasetRenderingOrder getDatasetRenderingOrder() { return this.renderingOrder; }"
      },
      {
        "txt": "public void setDatasetRenderingOrder(DatasetRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.renderingOrder = order; fireChangeEvent(); } public SortOrder getColumnRenderingOrder() { return this.columnRenderingOrder; }"
      },
      {
        "txt": "public void setColumnRenderingOrder(SortOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.columnRenderingOrder = order; fireChangeEvent(); } public SortOrder getRowRenderingOrder() { return this.rowRenderingOrder; }"
      },
      {
        "txt": "public void setRowRenderingOrder(SortOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.rowRenderingOrder = order; fireChangeEvent(); } public boolean isDomainGridlinesVisible() { return this.domainGridlinesVisible; }"
      },
      {
        "txt": "public void setDomainGridlinesVisible(boolean visible) { if (this.domainGridlinesVisible != visible) { this.domainGridlinesVisible = visible; fireChangeEvent(); } } public CategoryAnchor getDomainGridlinePosition() { return this.domainGridlinePosition; } public void setDomainGridlinePosition(CategoryAnchor position) {"
      },
      {
        "txt": "if (position == null) { throw new IllegalArgumentException(\"Null 'position' argument.\"); } this.domainGridlinePosition = position; fireChangeEvent(); } public Stroke getDomainGridlineStroke() { return this.domainGridlineStroke; } public void setDomainGridlineStroke(Stroke stroke) {"
      },
      {
        "txt": "if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' not permitted.\"); } this.domainGridlineStroke = stroke; fireChangeEvent(); } public Paint getDomainGridlinePaint() { return this.domainGridlinePaint; } public void setDomainGridlinePaint(Paint paint) {"
      },
      {
        "txt": "if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainGridlinePaint = paint; fireChangeEvent(); } public boolean isRangeGridlinesVisible() { return this.rangeGridlinesVisible; } public void setRangeGridlinesVisible(boolean visible) {"
      },
      {
        "txt": "if (this.rangeGridlinesVisible != visible) { this.rangeGridlinesVisible = visible; fireChangeEvent(); } } public Stroke getRangeGridlineStroke() { return this.rangeGridlineStroke; } public void setRangeGridlineStroke(Stroke stroke) { if (stroke == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeGridlineStroke = stroke; fireChangeEvent(); } public Paint getRangeGridlinePaint() { return this.rangeGridlinePaint; } public void setRangeGridlinePaint(Paint paint) { if (paint == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeGridlinePaint = paint; fireChangeEvent(); } public LegendItemCollection getFixedLegendItems() { return this.fixedLegendItems; } public void setFixedLegendItems(LegendItemCollection items) { this.fixedLegendItems = items;"
      },
      {
        "txt": "fireChangeEvent(); } public LegendItemCollection getLegendItems() { LegendItemCollection result = this.fixedLegendItems; if (result == null) { result = new LegendItemCollection(); int count = this.datasets.size(); for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) { CategoryDataset dataset = getDataset(datasetIndex); if (dataset != null) {"
      },
      {
        "txt": "CategoryItemRenderer renderer = getRenderer(datasetIndex); if (renderer != null) { int seriesCount = dataset.getRowCount(); for (int i = 0; i < seriesCount; i++) { LegendItem item = renderer.getLegendItem( datasetIndex, i); if (item != null) { result.add(item); } }"
      },
      {
        "txt": "} } } } return result; } public void handleClick(int x, int y, PlotRenderingInfo info) { Rectangle2D dataArea = info.getDataArea(); if (dataArea.contains(x, y)) { double java2D = 0.0;"
      },
      {
        "txt": "if (this.orientation == PlotOrientation.HORIZONTAL) { java2D = x; } else if (this.orientation == PlotOrientation.VERTICAL) { java2D = y; } RectangleEdge edge = Plot.resolveRangeAxisLocation( getRangeAxisLocation(), this.orientation); double value = getRangeAxis().java2DToValue( java2D, info.getDataArea(), edge);"
      },
      {
        "txt": "setAnchorValue(value); setRangeCrosshairValue(value); } } public void zoom(double percent) { if (percent > 0.0) { double range = getRangeAxis().getRange().getLength(); double scaledRange = range * percent; getRangeAxis().setRange(this.anchorValue - scaledRange / 2.0, this.anchorValue + scaledRange / 2.0);"
      },
      {
        "txt": "} else { getRangeAxis().setAutoRange(true); } } public void datasetChanged(DatasetChangeEvent event) { int count = this.rangeAxes.size(); for (int axisIndex = 0; axisIndex < count; axisIndex++) { ValueAxis yAxis = getRangeAxis(axisIndex); if (yAxis != null) {"
      },
      {
        "txt": "yAxis.configure(); } } if (getParent() != null) { getParent().datasetChanged(event); } else { PlotChangeEvent e = new PlotChangeEvent(this); e.setType(ChartChangeEventType.DATASET_UPDATED); notifyListeners(e);"
      },
      {
        "txt": "} } public void rendererChanged(RendererChangeEvent event) { Plot parent = getParent(); if (parent != null) { if (parent instanceof RendererChangeListener) { RendererChangeListener rcl = (RendererChangeListener) parent; rcl.rendererChanged(event); } else {"
      },
      {
        "txt": "throw new RuntimeException( \"The renderer has changed and I don't know what to do!\"); } } else { configureRangeAxes(); PlotChangeEvent e = new PlotChangeEvent(this); notifyListeners(e); } }"
      },
      {
        "txt": "public void addDomainMarker(CategoryMarker marker) { addDomainMarker(marker, Layer.FOREGROUND); } public void addDomainMarker(CategoryMarker marker, Layer layer) { addDomainMarker(0, marker, layer); } public void addDomainMarker(int index, CategoryMarker marker, Layer layer) { addDomainMarker(index, marker, layer, true); } public void addDomainMarker(int index, CategoryMarker marker, Layer layer,"
      },
      {
        "txt": "boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' not permitted.\"); } if (layer == null) { throw new IllegalArgumentException(\"Null 'layer' not permitted.\"); } Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundDomainMarkers.get("
      },
      {
        "txt": "new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundDomainMarkers.get( new Integer(index));"
      },
      {
        "txt": "if (markers == null) { markers = new java.util.ArrayList(); this.backgroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); } marker.addChangeListener(this); if (notify) { fireChangeEvent(); }"
      },
      {
        "txt": "} public void clearDomainMarkers() { if (this.backgroundDomainMarkers != null) { Set keys = this.backgroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.backgroundDomainMarkers.clear();"
      },
      {
        "txt": "} if (this.foregroundDomainMarkers != null) { Set keys = this.foregroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.foregroundDomainMarkers.clear(); }"
      },
      {
        "txt": "fireChangeEvent(); } public Collection getDomainMarkers(Layer layer) { return getDomainMarkers(0, layer); } public Collection getDomainMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundDomainMarkers.get(key);"
      },
      {
        "txt": "} else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundDomainMarkers.get(key); } if (result != null) { result = Collections.unmodifiableCollection(result); } return result; } public void clearDomainMarkers(int index) {"
      },
      {
        "txt": "Integer key = new Integer(index); if (this.backgroundDomainMarkers != null) { Collection markers = (Collection) this.backgroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); }"
      },
      {
        "txt": "markers.clear(); } } if (this.foregroundDomainMarkers != null) { Collection markers = (Collection) this.foregroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next();"
      },
      {
        "txt": "m.removeChangeListener(this); } markers.clear(); } } fireChangeEvent(); } public boolean removeDomainMarker(Marker marker) { return removeDomainMarker(marker, Layer.FOREGROUND); }"
      },
      {
        "txt": "public boolean removeDomainMarker(Marker marker, Layer layer) { return removeDomainMarker(0, marker, layer); } public boolean removeDomainMarker(int index, Marker marker, Layer layer) { return removeDomainMarker(index, marker, layer, true); } public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) {"
      },
      {
        "txt": "index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } <extra_id_0> if (removed && notify) { fireChangeEvent(); } return removed; } public void addRangeMarker(Marker marker) {"
      },
      {
        "txt": "} public void addRangeMarker(Marker marker) { addRangeMarker(marker, Layer.FOREGROUND); } public void addRangeMarker(Marker marker, Layer layer) { addRangeMarker(0, marker, layer); } public void addRangeMarker(int index, Marker marker, Layer layer) { addRangeMarker(index, marker, layer, true); }"
      },
      {
        "txt": "public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) { Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundRangeMarkers.put(new Integer(index), markers); }"
      },
      {
        "txt": "markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundRangeMarkers.put(new Integer(index), markers); } markers.add(marker);"
      },
      {
        "txt": "} marker.addChangeListener(this); if (notify) { fireChangeEvent(); } } public void clearRangeMarkers() { if (this.backgroundRangeMarkers != null) { Set keys = this.backgroundRangeMarkers.keySet(); Iterator iterator = keys.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.backgroundRangeMarkers.clear(); } if (this.foregroundRangeMarkers != null) { Set keys = this.foregroundRangeMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) {"
      },
      {
        "txt": "Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.foregroundRangeMarkers.clear(); } fireChangeEvent(); } public Collection getRangeMarkers(Layer layer) { return getRangeMarkers(0, layer); }"
      },
      {
        "txt": "public Collection getRangeMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundRangeMarkers.get(key); } else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundRangeMarkers.get(key); } if (result != null) {"
      },
      {
        "txt": "result = Collections.unmodifiableCollection(result); } return result; } public void clearRangeMarkers(int index) { Integer key = new Integer(index); if (this.backgroundRangeMarkers != null) { Collection markers = (Collection) this.backgroundRangeMarkers.get(key); if (markers != null) {"
      },
      {
        "txt": "Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } } if (this.foregroundRangeMarkers != null) { Collection markers"
      },
      {
        "txt": "= (Collection) this.foregroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } }"
      },
      {
        "txt": "fireChangeEvent(); } public boolean removeRangeMarker(Marker marker) { return removeRangeMarker(marker, Layer.FOREGROUND); } public boolean removeRangeMarker(Marker marker, Layer layer) { return removeRangeMarker(0, marker, layer); } public boolean removeRangeMarker(int index, Marker marker, Layer layer) { return removeRangeMarker(index, marker, layer, true);"
      },
      {
        "txt": "} public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' argument.\"); } ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer( index));"
      },
      {
        "txt": "} else { markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); } return removed;"
      },
      {
        "txt": "} public boolean isRangeCrosshairVisible() { return this.rangeCrosshairVisible; } public void setRangeCrosshairVisible(boolean flag) { if (this.rangeCrosshairVisible != flag) { this.rangeCrosshairVisible = flag; fireChangeEvent(); } }"
      },
      {
        "txt": "public boolean isRangeCrosshairLockedOnData() { return this.rangeCrosshairLockedOnData; } public void setRangeCrosshairLockedOnData(boolean flag) { if (this.rangeCrosshairLockedOnData != flag) { this.rangeCrosshairLockedOnData = flag; fireChangeEvent(); } } public double getRangeCrosshairValue() {"
      },
      {
        "txt": "return this.rangeCrosshairValue; } public void setRangeCrosshairValue(double value) { setRangeCrosshairValue(value, true); } public void setRangeCrosshairValue(double value, boolean notify) { this.rangeCrosshairValue = value; if (isRangeCrosshairVisible() && notify) { fireChangeEvent(); }"
      },
      {
        "txt": "} public Stroke getRangeCrosshairStroke() { return this.rangeCrosshairStroke; } public void setRangeCrosshairStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeCrosshairStroke = stroke; fireChangeEvent();"
      },
      {
        "txt": "} public Paint getRangeCrosshairPaint() { return this.rangeCrosshairPaint; } public void setRangeCrosshairPaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeCrosshairPaint = paint; fireChangeEvent();"
      },
      {
        "txt": "} public List getAnnotations() { return this.annotations; } public void addAnnotation(CategoryAnnotation annotation) { addAnnotation(annotation, true); } public void addAnnotation(CategoryAnnotation annotation, boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\");"
      },
      {
        "txt": "} this.annotations.add(annotation); if (notify) { fireChangeEvent(); } } public boolean removeAnnotation(CategoryAnnotation annotation) { return removeAnnotation(annotation, true); } public boolean removeAnnotation(CategoryAnnotation annotation,"
      },
      {
        "txt": "boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\"); } boolean removed = this.annotations.remove(annotation); if (removed && notify) { fireChangeEvent(); } return removed; }"
      },
      {
        "txt": "public void clearAnnotations() { this.annotations.clear(); fireChangeEvent(); } protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); }"
      },
      {
        "txt": "if (this.fixedDomainAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast( this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP);"
      },
      {
        "txt": "space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), RectangleEdge.BOTTOM); } } else { RectangleEdge domainEdge = Plot.resolveDomainAxisLocation( getDomainAxisLocation(), this.orientation); if (this.drawSharedDomainAxis) { space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);"
      },
      {
        "txt": "} for (int i = 0; i < this.domainAxes.size(); i++) { Axis xAxis = (Axis) this.domainAxes.get(i); if (xAxis != null) { RectangleEdge edge = getDomainAxisEdge(i); space = xAxis.reserveSpace(g2, this, plotArea, edge, space); } } } return space;"
      },
      {
        "txt": "} protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); } if (this.fixedRangeAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),"
      },
      {
        "txt": "RectangleEdge.TOP); space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT); }"
      },
      {
        "txt": "} else { for (int i = 0; i < this.rangeAxes.size(); i++) { Axis yAxis = (Axis) this.rangeAxes.get(i); if (yAxis != null) { RectangleEdge edge = getRangeAxisEdge(i); space = yAxis.reserveSpace(g2, this, plotArea, edge, space); } } }"
      },
      {
        "txt": "return space; } protected AxisSpace calculateAxisSpace(Graphics2D g2, Rectangle2D plotArea) { AxisSpace space = new AxisSpace(); space = calculateRangeAxisSpace(g2, plotArea, space); space = calculateDomainAxisSpace(g2, plotArea, space); return space; } public void draw(Graphics2D g2, Rectangle2D area,"
      },
      {
        "txt": "Point2D anchor, PlotState parentState, PlotRenderingInfo state) { boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); if (b1 || b2) { return; } if (state == null) { state = new PlotRenderingInfo(null);"
      },
      {
        "txt": "} state.setPlotArea(area); RectangleInsets insets = getInsets(); insets.trim(area); AxisSpace space = calculateAxisSpace(g2, area); Rectangle2D dataArea = space.shrink(area, null); this.axisOffset.trim(dataArea); state.setDataArea(dataArea); if (getRenderer() != null) { getRenderer().drawBackground(g2, this, dataArea);"
      },
      {
        "txt": "} else { drawBackground(g2, dataArea); } Map axisStateMap = drawAxes(g2, area, dataArea, state); Shape savedClip = g2.getClip(); g2.clip(dataArea); drawDomainGridlines(g2, dataArea); AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis()); if (rangeAxisState == null) {"
      },
      {
        "txt": "if (parentState != null) { rangeAxisState = (AxisState) parentState.getSharedAxisStates() .get(getRangeAxis()); } } if (rangeAxisState != null) { drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);"
      },
      {
        "txt": "} for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND); } boolean foundData = false; Composite originalComposite = g2.getComposite(); g2.setComposite(AlphaComposite.getInstance( AlphaComposite.SRC_OVER, getForegroundAlpha())); DatasetRenderingOrder order = getDatasetRenderingOrder(); if (order == DatasetRenderingOrder.FORWARD) {"
      },
      {
        "txt": "int datasetCount = this.datasets.size(); for (int i = 0; i < datasetCount; i++) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, state); } }"
      },
      {
        "txt": "for (int i = 0; i < datasetCount; i++) { foundData = render(g2, dataArea, i, state) || foundData; } for (int i = 0; i < datasetCount; i++) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, state);"
      },
      {
        "txt": "} } } else { // DatasetRenderingOrder.REVERSE int datasetCount = this.datasets.size(); for (int i = datasetCount - 1; i >= 0; i--) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i);"
      },
      {
        "txt": "r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, state); } } for (int i = this.datasets.size() - 1; i >= 0; i--) { foundData = render(g2, dataArea, i, state) || foundData; } for (int i = datasetCount - 1; i >= 0; i--) { CategoryItemRenderer r = getRenderer(i); if (r != null) {"
      },
      {
        "txt": "CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, state); } } } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND); }"
      },
      {
        "txt": "for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND); } drawAnnotations(g2, dataArea, state); g2.setClip(savedClip); g2.setComposite(originalComposite); if (!foundData) { drawNoDataMessage(g2, dataArea); } if (isRangeCrosshairVisible()) {"
      },
      {
        "txt": "drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint()); } if (getRenderer() != null) { getRenderer().drawOutline(g2, this, dataArea); } else { drawOutline(g2, dataArea); }"
      },
      {
        "txt": "} public void drawBackground(Graphics2D g2, Rectangle2D area) { fillBackground(g2, area, this.orientation); drawBackgroundImage(g2, area); } protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, PlotRenderingInfo plotState) { AxisCollection axisCollection = new AxisCollection();"
      },
      {
        "txt": "for (int index = 0; index < this.domainAxes.size(); index++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(index); if (xAxis != null) { axisCollection.add(xAxis, getDomainAxisEdge(index)); } } for (int index = 0; index < this.rangeAxes.size(); index++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index); if (yAxis != null) { axisCollection.add(yAxis, getRangeAxisEdge(index));"
      },
      {
        "txt": "} } Map axisStateMap = new HashMap(); double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset( dataArea.getHeight()); Iterator iterator = axisCollection.getAxesAtTop().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,"
      },
      {
        "txt": "RectangleEdge.TOP, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight()); iterator = axisCollection.getAxesAtBottom().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next();"
      },
      {
        "txt": "if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.BOTTOM, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtLeft().iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.LEFT, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMaxX()"
      },
      {
        "txt": "+ this.axisOffset.calculateRightOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtRight().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.RIGHT, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); }"
      },
      {
        "txt": "} return axisStateMap; } public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info) { boolean foundData = false; CategoryDataset currentDataset = getDataset(index); CategoryItemRenderer renderer = getRenderer(index); CategoryAxis domainAxis = getDomainAxisForDataset(index); ValueAxis rangeAxis = getRangeAxisForDataset(index);"
      },
      {
        "txt": "boolean hasData = !DatasetUtilities.isEmptyOrNull(currentDataset); if (hasData && renderer != null) { foundData = true; CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info); int columnCount = currentDataset.getColumnCount(); int rowCount = currentDataset.getRowCount(); int passCount = renderer.getPassCount(); for (int pass = 0; pass < passCount; pass++) { if (this.columnRenderingOrder == SortOrder.ASCENDING) {"
      },
      {
        "txt": "for (int column = 0; column < columnCount; column++) { if (this.rowRenderingOrder == SortOrder.ASCENDING) { for (int row = 0; row < rowCount; row++) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } else { for (int row = rowCount - 1; row >= 0; row--) {"
      },
      {
        "txt": "renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } } } else { for (int column = columnCount - 1; column >= 0; column--) { if (this.rowRenderingOrder == SortOrder.ASCENDING) {"
      },
      {
        "txt": "for (int row = 0; row < rowCount; row++) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } else { for (int row = rowCount - 1; row >= 0; row--) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset,"
      },
      {
        "txt": "row, column, pass); } } } } } } return foundData; } protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea) {"
      },
      {
        "txt": "if (isDomainGridlinesVisible()) { CategoryAnchor anchor = getDomainGridlinePosition(); RectangleEdge domainAxisEdge = getDomainAxisEdge(); Stroke gridStroke = getDomainGridlineStroke(); Paint gridPaint = getDomainGridlinePaint(); if ((gridStroke != null) && (gridPaint != null)) { CategoryDataset data = getDataset(); if (data != null) { CategoryAxis axis = getDomainAxis(); if (axis != null) {"
      },
      {
        "txt": "int columnCount = data.getColumnCount(); for (int c = 0; c < columnCount; c++) { double xx = axis.getCategoryJava2DCoordinate( anchor, c, columnCount, dataArea, domainAxisEdge); CategoryItemRenderer renderer1 = getRenderer(); if (renderer1 != null) { renderer1.drawDomainGridline(g2, this, dataArea, xx); }"
      },
      {
        "txt": "} } } } } } protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { if (isRangeGridlinesVisible()) { Stroke gridStroke = getRangeGridlineStroke();"
      },
      {
        "txt": "Paint gridPaint = getRangeGridlinePaint(); if ((gridStroke != null) && (gridPaint != null)) { ValueAxis axis = getRangeAxis(); if (axis != null) { Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); CategoryItemRenderer renderer1 = getRenderer(); if (renderer1 != null) { renderer1.drawRangeGridline(g2, this,"
      },
      {
        "txt": "getRangeAxis(), dataArea, tick.getValue()); } } } } } } protected void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info) { Iterator iterator = getAnnotations().iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { CategoryAnnotation annotation = (CategoryAnnotation) iterator.next(); annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info); } } protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { CategoryItemRenderer r = getRenderer(index);"
      },
      {
        "txt": "if (r == null) { return; } Collection markers = getDomainMarkers(index, layer); CategoryAxis axis = getDomainAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { CategoryMarker marker = (CategoryMarker) iterator.next(); r.drawDomainMarker(g2, this, axis, marker, dataArea);"
      },
      {
        "txt": "} } } protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { CategoryItemRenderer r = getRenderer(index); if (r == null) { return; } Collection markers = getRangeMarkers(index, layer);"
      },
      {
        "txt": "ValueAxis axis = getRangeAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker marker = (Marker) iterator.next(); r.drawRangeMarker(g2, this, axis, marker, dataArea); } } } protected void drawRangeLine(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "double value, Stroke stroke, Paint paint) { double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge()); Line2D line = null; if (this.orientation == PlotOrientation.HORIZONTAL) { line = new Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY()); } else if (this.orientation == PlotOrientation.VERTICAL) { line = new Line2D.Double(dataArea.getMinX(), java2D,"
      },
      {
        "txt": "dataArea.getMaxX(), java2D); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { if (!axis.getRange().contains(value)) {"
      },
      {
        "txt": "return; } Line2D line = null; if (orientation == PlotOrientation.HORIZONTAL) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else {"
      },
      {
        "txt": "double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } public Range getDataRange(ValueAxis axis) {"
      },
      {
        "txt": "Range result = null; List mappedDatasets = new ArrayList(); int rangeIndex = this.rangeAxes.indexOf(axis); if (rangeIndex >= 0) { mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex)); } else if (axis == getRangeAxis()) { mappedDatasets.addAll(datasetsMappedToRangeAxis(0)); } Iterator iterator = mappedDatasets.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { CategoryDataset d = (CategoryDataset) iterator.next(); CategoryItemRenderer r = getRendererForDataset(d); if (r != null) { result = Range.combine(result, r.findRangeBounds(d)); } } return result; } private List datasetsMappedToDomainAxis(int axisIndex) {"
      },
      {
        "txt": "List result = new ArrayList(); for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) { Object dataset = this.datasets.get(datasetIndex); if (dataset != null) { Integer m = (Integer) this.datasetToDomainAxisMap.get( datasetIndex); if (m == null) { // a dataset with no mapping is assigned to if (axisIndex == 0) { result.add(dataset);"
      },
      {
        "txt": "} } else { if (m.intValue() == axisIndex) { result.add(dataset); } } } } return result;"
      },
      {
        "txt": "} private List datasetsMappedToRangeAxis(int index) { List result = new ArrayList(); for (int i = 0; i < this.datasets.size(); i++) { Object dataset = this.datasets.get(i); if (dataset != null) { Integer m = (Integer) this.datasetToRangeAxisMap.get(i); if (m == null) { // a dataset with no mapping is assigned to if (index == 0) { result.add(dataset);"
      },
      {
        "txt": "} } else { if (m.intValue() == index) { result.add(dataset); } } } } return result;"
      },
      {
        "txt": "} public int getWeight() { return this.weight; } public void setWeight(int weight) { this.weight = weight; fireChangeEvent(); } public AxisSpace getFixedDomainAxisSpace() { return this.fixedDomainAxisSpace;"
      },
      {
        "txt": "} public void setFixedDomainAxisSpace(AxisSpace space) { setFixedDomainAxisSpace(space, true); } public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) { this.fixedDomainAxisSpace = space; if (notify) { fireChangeEvent(); } }"
      },
      {
        "txt": "public AxisSpace getFixedRangeAxisSpace() { return this.fixedRangeAxisSpace; } public void setFixedRangeAxisSpace(AxisSpace space) { setFixedRangeAxisSpace(space, true); } public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) { this.fixedRangeAxisSpace = space; if (notify) { fireChangeEvent();"
      },
      {
        "txt": "} } public List getCategories() { List result = null; if (getDataset() != null) { result = Collections.unmodifiableList(getDataset().getColumnKeys()); } return result; } public List getCategoriesForAxis(CategoryAxis axis) {"
      },
      {
        "txt": "List result = new ArrayList(); int axisIndex = this.domainAxes.indexOf(axis); List datasets = datasetsMappedToDomainAxis(axisIndex); Iterator iterator = datasets.iterator(); while (iterator.hasNext()) { CategoryDataset dataset = (CategoryDataset) iterator.next(); for (int i = 0; i < dataset.getColumnCount(); i++) { Comparable category = dataset.getColumnKey(i); if (!result.contains(category)) { result.add(category);"
      },
      {
        "txt": "} } } return result; } public boolean getDrawSharedDomainAxis() { return this.drawSharedDomainAxis; } public void setDrawSharedDomainAxis(boolean draw) { this.drawSharedDomainAxis = draw;"
      },
      {
        "txt": "fireChangeEvent(); } public boolean isDomainZoomable() { return false; } public boolean isRangeZoomable() { return true; } public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source) {"
      },
      {
        "txt": "} public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { } public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { } public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source) { zoomRangeAxes(factor, state, source, false);"
      },
      {
        "txt": "} public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { if (useAnchor) { double sourceY = source.getY(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceY = source.getX();"
      },
      {
        "txt": "} double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge()); rangeAxis.resizeRange(factor, anchorY); } else { rangeAxis.resizeRange(factor); } } }"
      },
      {
        "txt": "} public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { rangeAxis.zoomRange(lowerPercent, upperPercent); } } }"
      },
      {
        "txt": "public double getAnchorValue() { return this.anchorValue; } public void setAnchorValue(double value) { setAnchorValue(value, true); } public void setAnchorValue(double value, boolean notify) { this.anchorValue = value; if (notify) { fireChangeEvent();"
      },
      {
        "txt": "} } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof CategoryPlot)) { return false; } if (!super.equals(obj)) {"
      },
      {
        "txt": "return false; } CategoryPlot that = (CategoryPlot) obj; if (this.orientation != that.orientation) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { return false; } if (!this.domainAxes.equals(that.domainAxes)) {"
      },
      {
        "txt": "return false; } if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) { return false; } if (!this.rangeAxes.equals(that.rangeAxes)) { return false;"
      },
      {
        "txt": "} if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false; } if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) { return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) { return false; } if (this.renderingOrder != that.renderingOrder) { return false; } if (this.columnRenderingOrder != that.columnRenderingOrder) { return false;"
      },
      {
        "txt": "} if (this.rowRenderingOrder != that.rowRenderingOrder) { return false; } if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false; } if (this.domainGridlinePosition != that.domainGridlinePosition) { return false; }"
      },
      {
        "txt": "if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { return false; } if (this.anchorValue != that.anchorValue) {"
      },
      {
        "txt": "return false; } if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {"
      },
      {
        "txt": "return false; } if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false; }"
      },
      {
        "txt": "if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) { return false;"
      },
      {
        "txt": "} if (this.weight != that.weight) { return false; } if (!ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) { return false; } if (!ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {"
      },
      {
        "txt": "return false; } return true; } public Object clone() throws CloneNotSupportedException { CategoryPlot clone = (CategoryPlot) super.clone(); clone.domainAxes = new ObjectList(); for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(i); if (xAxis != null) {"
      },
      {
        "txt": "CategoryAxis clonedAxis = (CategoryAxis) xAxis.clone(); clone.setDomainAxis(i, clonedAxis); } } clone.domainAxisLocations = (ObjectList) this.domainAxisLocations.clone(); clone.rangeAxes = new ObjectList(); for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(i); if (yAxis != null) {"
      },
      {
        "txt": "ValueAxis clonedAxis = (ValueAxis) yAxis.clone(); clone.setRangeAxis(i, clonedAxis); } } clone.rangeAxisLocations = (ObjectList) this.rangeAxisLocations.clone(); clone.datasets = (ObjectList) this.datasets.clone(); for (int i = 0; i < clone.datasets.size(); i++) { CategoryDataset dataset = clone.getDataset(i); if (dataset != null) { dataset.addChangeListener(clone);"
      },
      {
        "txt": "} } clone.datasetToDomainAxisMap = (ObjectList) this.datasetToDomainAxisMap.clone(); clone.datasetToRangeAxisMap = (ObjectList) this.datasetToRangeAxisMap.clone(); clone.renderers = (ObjectList) this.renderers.clone(); if (this.fixedDomainAxisSpace != null) { clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedDomainAxisSpace);"
      },
      {
        "txt": "} if (this.fixedRangeAxisSpace != null) { clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedRangeAxisSpace); } return clone; } private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject(); SerialUtilities.writeStroke(this.domainGridlineStroke, stream);"
      },
      {
        "txt": "SerialUtilities.writePaint(this.domainGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeGridlineStroke, stream); SerialUtilities.writePaint(this.rangeGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream); SerialUtilities.writePaint(this.rangeCrosshairPaint, stream); } private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { stream.defaultReadObject(); this.domainGridlineStroke = SerialUtilities.readStroke(stream);"
      },
      {
        "txt": "this.domainGridlinePaint = SerialUtilities.readPaint(stream); this.rangeGridlineStroke = SerialUtilities.readStroke(stream); this.rangeGridlinePaint = SerialUtilities.readPaint(stream); this.rangeCrosshairStroke = SerialUtilities.readStroke(stream); this.rangeCrosshairPaint = SerialUtilities.readPaint(stream); for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(i); if (xAxis != null) { xAxis.setPlot(this); xAxis.addChangeListener(this);"
      },
      {
        "txt": "} } for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(i); if (yAxis != null) { yAxis.setPlot(this); yAxis.addChangeListener(this); } } int datasetCount = this.datasets.size();"
      },
      {
        "txt": "for (int i = 0; i < datasetCount; i++) { Dataset dataset = (Dataset) this.datasets.get(i); if (dataset != null) { dataset.addChangeListener(this); } } int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { CategoryItemRenderer renderer = (CategoryItemRenderer) this.renderers.get(i);"
      },
      {
        "txt": "if (renderer != null) { renderer.addChangeListener(this); } } }"
      }
    ]
  },
  {
    "id": 25,
    "file_path": "source/org/jfree/chart/plot/CategoryPlot.java",
    "start-bug-line": 2448,
    "end-bug-line": 2448,
    "bug": "",
    "fix": "if (markers == null) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.chart.plot; import java.awt.AlphaComposite; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Composite; import java.awt.Font; import java.awt.Graphics2D; import java.awt.Paint; import java.awt.Shape; import java.awt.Stroke;"
      },
      {
        "txt": "import java.awt.geom.Line2D; import java.awt.geom.Point2D; import java.awt.geom.Rectangle2D; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection; import java.util.Collections;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.ResourceBundle; import java.util.Set; import org.jfree.chart.LegendItem; import org.jfree.chart.LegendItemCollection; import org.jfree.chart.annotations.CategoryAnnotation; import org.jfree.chart.axis.Axis;"
      },
      {
        "txt": "import org.jfree.chart.axis.AxisCollection; import org.jfree.chart.axis.AxisLocation; import org.jfree.chart.axis.AxisSpace; import org.jfree.chart.axis.AxisState; import org.jfree.chart.axis.CategoryAnchor; import org.jfree.chart.axis.CategoryAxis; import org.jfree.chart.axis.ValueAxis; import org.jfree.chart.axis.ValueTick; import org.jfree.chart.event.ChartChangeEventType; import org.jfree.chart.event.PlotChangeEvent;"
      },
      {
        "txt": "import org.jfree.chart.event.RendererChangeEvent; import org.jfree.chart.event.RendererChangeListener; import org.jfree.chart.renderer.category.CategoryItemRenderer; import org.jfree.chart.renderer.category.CategoryItemRendererState; import org.jfree.chart.util.Layer; import org.jfree.chart.util.ObjectList; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PaintUtilities; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.RectangleEdge;"
      },
      {
        "txt": "import org.jfree.chart.util.RectangleInsets; import org.jfree.chart.util.SerialUtilities; import org.jfree.chart.util.SortOrder; import org.jfree.data.Range; import org.jfree.data.category.CategoryDataset; import org.jfree.data.general.Dataset; import org.jfree.data.general.DatasetChangeEvent; import org.jfree.data.general.DatasetUtilities; public class CategoryPlot extends Plot implements ValueAxisPlot, Zoomable, RendererChangeListener, Cloneable, PublicCloneable,"
      },
      {
        "txt": "Serializable { private static final long serialVersionUID = -3537691700434728188L; public static final boolean DEFAULT_DOMAIN_GRIDLINES_VISIBLE = false; public static final boolean DEFAULT_RANGE_GRIDLINES_VISIBLE = true; public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] {2.0f, 2.0f}, 0.0f); public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE; public static final Font DEFAULT_VALUE_LABEL_FONT = new Font(\"SansSerif\", Font.PLAIN, 10);"
      },
      {
        "txt": "public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false; public static final Stroke DEFAULT_CROSSHAIR_STROKE = DEFAULT_GRIDLINE_STROKE; public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue; protected static ResourceBundle localizationResources = ResourceBundle.getBundle( \"org.jfree.chart.plot.LocalizationBundle\"); private PlotOrientation orientation; private RectangleInsets axisOffset; private ObjectList domainAxes;"
      },
      {
        "txt": "private ObjectList domainAxisLocations; private boolean drawSharedDomainAxis; private ObjectList rangeAxes; private ObjectList rangeAxisLocations; private ObjectList datasets; private ObjectList datasetToDomainAxisMap; private ObjectList datasetToRangeAxisMap; private ObjectList renderers; private DatasetRenderingOrder renderingOrder = DatasetRenderingOrder.REVERSE;"
      },
      {
        "txt": "private SortOrder columnRenderingOrder = SortOrder.ASCENDING; private SortOrder rowRenderingOrder = SortOrder.ASCENDING; private boolean domainGridlinesVisible; private CategoryAnchor domainGridlinePosition; private transient Stroke domainGridlineStroke; private transient Paint domainGridlinePaint; private boolean rangeGridlinesVisible; private transient Stroke rangeGridlineStroke; private transient Paint rangeGridlinePaint; private double anchorValue;"
      },
      {
        "txt": "private boolean rangeCrosshairVisible; private double rangeCrosshairValue; private transient Stroke rangeCrosshairStroke; private transient Paint rangeCrosshairPaint; private boolean rangeCrosshairLockedOnData = true; private Map foregroundDomainMarkers; private Map backgroundDomainMarkers; private Map foregroundRangeMarkers; private Map backgroundRangeMarkers; private List annotations;"
      },
      {
        "txt": "private int weight; private AxisSpace fixedDomainAxisSpace; private AxisSpace fixedRangeAxisSpace; private LegendItemCollection fixedLegendItems; public CategoryPlot() { this(null, null, null, null); } public CategoryPlot(CategoryDataset dataset, CategoryAxis domainAxis, ValueAxis rangeAxis,"
      },
      {
        "txt": "CategoryItemRenderer renderer) { super(); this.orientation = PlotOrientation.VERTICAL; this.domainAxes = new ObjectList(); this.domainAxisLocations = new ObjectList(); this.rangeAxes = new ObjectList(); this.rangeAxisLocations = new ObjectList(); this.datasetToDomainAxisMap = new ObjectList(); this.datasetToRangeAxisMap = new ObjectList(); this.renderers = new ObjectList();"
      },
      {
        "txt": "this.datasets = new ObjectList(); this.datasets.set(0, dataset); if (dataset != null) { dataset.addChangeListener(this); } this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0); setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false); setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false); this.renderers.set(0, renderer); if (renderer != null) {"
      },
      {
        "txt": "renderer.setPlot(this); renderer.addChangeListener(this); } this.domainAxes.set(0, domainAxis); this.mapDatasetToDomainAxis(0, 0); if (domainAxis != null) { domainAxis.setPlot(this); domainAxis.addChangeListener(this); } this.drawSharedDomainAxis = false;"
      },
      {
        "txt": "this.rangeAxes.set(0, rangeAxis); this.mapDatasetToRangeAxis(0, 0); if (rangeAxis != null) { rangeAxis.setPlot(this); rangeAxis.addChangeListener(this); } configureDomainAxes(); configureRangeAxes(); this.domainGridlinesVisible = DEFAULT_DOMAIN_GRIDLINES_VISIBLE; this.domainGridlinePosition = CategoryAnchor.MIDDLE;"
      },
      {
        "txt": "this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.rangeGridlinesVisible = DEFAULT_RANGE_GRIDLINES_VISIBLE; this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.foregroundDomainMarkers = new HashMap(); this.backgroundDomainMarkers = new HashMap(); this.foregroundRangeMarkers = new HashMap(); this.backgroundRangeMarkers = new HashMap(); Marker baseline = new ValueMarker(0.0, new Color(0.8f, 0.8f, 0.8f,"
      },
      {
        "txt": "0.5f), new BasicStroke(1.0f), new Color(0.85f, 0.85f, 0.95f, 0.5f), new BasicStroke(1.0f), 0.6f); addRangeMarker(baseline, Layer.BACKGROUND); this.anchorValue = 0.0; this.rangeCrosshairVisible = DEFAULT_CROSSHAIR_VISIBLE; this.rangeCrosshairValue = 0.0; this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.annotations = new java.util.ArrayList(); }"
      },
      {
        "txt": "public String getPlotType() { return localizationResources.getString(\"Category_Plot\"); } public PlotOrientation getOrientation() { return this.orientation; } public void setOrientation(PlotOrientation orientation) { if (orientation == null) { throw new IllegalArgumentException(\"Null 'orientation' argument.\"); }"
      },
      {
        "txt": "this.orientation = orientation; fireChangeEvent(); } public RectangleInsets getAxisOffset() { return this.axisOffset; } public void setAxisOffset(RectangleInsets offset) { if (offset == null) { throw new IllegalArgumentException(\"Null 'offset' argument.\"); }"
      },
      {
        "txt": "this.axisOffset = offset; fireChangeEvent(); } public CategoryAxis getDomainAxis() { return getDomainAxis(0); } public CategoryAxis getDomainAxis(int index) { CategoryAxis result = null; if (index < this.domainAxes.size()) { result = (CategoryAxis) this.domainAxes.get(index);"
      },
      {
        "txt": "} if (result == null) { Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot cp = (CategoryPlot) parent; result = cp.getDomainAxis(index); } } return result; }"
      },
      {
        "txt": "public void setDomainAxis(CategoryAxis axis) { setDomainAxis(0, axis); } public void setDomainAxis(int index, CategoryAxis axis) { setDomainAxis(index, axis, true); } public void setDomainAxis(int index, CategoryAxis axis, boolean notify) { CategoryAxis existing = (CategoryAxis) this.domainAxes.get(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} if (axis != null) { axis.setPlot(this); } this.domainAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public void setDomainAxes(CategoryAxis[] axes) { for (int i = 0; i < axes.length; i++) { setDomainAxis(i, axes[i], false); } fireChangeEvent(); } public int getDomainAxisIndex(CategoryAxis axis) {"
      },
      {
        "txt": "if (axis == null) { throw new IllegalArgumentException(\"Null 'axis' argument.\"); } return this.domainAxes.indexOf(axis); } public AxisLocation getDomainAxisLocation() { return getDomainAxisLocation(0); } public AxisLocation getDomainAxisLocation(int index) { AxisLocation result = null;"
      },
      {
        "txt": "if (index < this.domainAxisLocations.size()) { result = (AxisLocation) this.domainAxisLocations.get(index); } if (result == null) { result = AxisLocation.getOpposite(getDomainAxisLocation(0)); } return result; } public void setDomainAxisLocation(AxisLocation location) { setDomainAxisLocation(0, location, true);"
      },
      {
        "txt": "} public void setDomainAxisLocation(AxisLocation location, boolean notify) { setDomainAxisLocation(0, location, notify); } public void setDomainAxisLocation(int index, AxisLocation location) { setDomainAxisLocation(index, location, true); } public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\"); } this.domainAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getDomainAxisEdge() { return getDomainAxisEdge(0);"
      },
      {
        "txt": "} public RectangleEdge getDomainAxisEdge(int index) { RectangleEdge result = null; AxisLocation location = getDomainAxisLocation(index); if (location != null) { result = Plot.resolveDomainAxisLocation(location, this.orientation); } else { result = RectangleEdge.opposite(getDomainAxisEdge(0)); }"
      },
      {
        "txt": "return result; } public int getDomainAxisCount() { return this.domainAxes.size(); } public void clearDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i); if (axis != null) { axis.removeChangeListener(this);"
      },
      {
        "txt": "} } this.domainAxes.clear(); fireChangeEvent(); } public void configureDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis axis = (CategoryAxis) this.domainAxes.get(i); if (axis != null) { axis.configure();"
      },
      {
        "txt": "} } } public ValueAxis getRangeAxis() { return getRangeAxis(0); } public ValueAxis getRangeAxis(int index) { ValueAxis result = null; if (index < this.rangeAxes.size()) { result = (ValueAxis) this.rangeAxes.get(index);"
      },
      {
        "txt": "} if (result == null) { Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot cp = (CategoryPlot) parent; result = cp.getRangeAxis(index); } } return result; }"
      },
      {
        "txt": "public void setRangeAxis(ValueAxis axis) { setRangeAxis(0, axis); } public void setRangeAxis(int index, ValueAxis axis) { setRangeAxis(index, axis, true); } public void setRangeAxis(int index, ValueAxis axis, boolean notify) { ValueAxis existing = (ValueAxis) this.rangeAxes.get(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} if (axis != null) { axis.setPlot(this); } this.rangeAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public void setRangeAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) { setRangeAxis(i, axes[i], false); } fireChangeEvent(); } public int getRangeAxisIndex(ValueAxis axis) {"
      },
      {
        "txt": "if (axis == null) { throw new IllegalArgumentException(\"Null 'axis' argument.\"); } int result = this.rangeAxes.indexOf(axis); if (result < 0) { // try the parent plot Plot parent = getParent(); if (parent instanceof CategoryPlot) { CategoryPlot p = (CategoryPlot) parent; result = p.getRangeAxisIndex(axis); }"
      },
      {
        "txt": "} return result; } public AxisLocation getRangeAxisLocation() { return getRangeAxisLocation(0); } public AxisLocation getRangeAxisLocation(int index) { AxisLocation result = null; if (index < this.rangeAxisLocations.size()) { result = (AxisLocation) this.rangeAxisLocations.get(index);"
      },
      {
        "txt": "} if (result == null) { result = AxisLocation.getOpposite(getRangeAxisLocation(0)); } return result; } public void setRangeAxisLocation(AxisLocation location) { setRangeAxisLocation(location, true); } public void setRangeAxisLocation(AxisLocation location, boolean notify) {"
      },
      {
        "txt": "setRangeAxisLocation(0, location, notify); } public void setRangeAxisLocation(int index, AxisLocation location) { setRangeAxisLocation(index, location, true); } public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) { throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\");"
      },
      {
        "txt": "} this.rangeAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getRangeAxisEdge() { return getRangeAxisEdge(0); } public RectangleEdge getRangeAxisEdge(int index) {"
      },
      {
        "txt": "AxisLocation location = getRangeAxisLocation(index); RectangleEdge result = Plot.resolveRangeAxisLocation(location, this.orientation); if (result == null) { result = RectangleEdge.opposite(getRangeAxisEdge(0)); } return result; } public int getRangeAxisCount() { return this.rangeAxes.size();"
      },
      {
        "txt": "} public void clearRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.removeChangeListener(this); } } this.rangeAxes.clear(); fireChangeEvent();"
      },
      {
        "txt": "} public void configureRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.configure(); } } } public CategoryDataset getDataset() {"
      },
      {
        "txt": "return getDataset(0); } public CategoryDataset getDataset(int index) { CategoryDataset result = null; if (this.datasets.size() > index) { result = (CategoryDataset) this.datasets.get(index); } return result; } public void setDataset(CategoryDataset dataset) {"
      },
      {
        "txt": "setDataset(0, dataset); } public void setDataset(int index, CategoryDataset dataset) { CategoryDataset existing = (CategoryDataset) this.datasets.get(index); if (existing != null) { existing.removeChangeListener(this); } this.datasets.set(index, dataset); if (dataset != null) { dataset.addChangeListener(this);"
      },
      {
        "txt": "} DatasetChangeEvent event = new DatasetChangeEvent(this, dataset); datasetChanged(event); } public int getDatasetCount() { return this.datasets.size(); } public void mapDatasetToDomainAxis(int index, int axisIndex) { this.datasetToDomainAxisMap.set(index, new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index)));"
      },
      {
        "txt": "} public CategoryAxis getDomainAxisForDataset(int index) { CategoryAxis result = getDomainAxis(); Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get(index); if (axisIndex != null) { result = getDomainAxis(axisIndex.intValue()); } return result; } public void mapDatasetToRangeAxis(int index, int axisIndex) {"
      },
      {
        "txt": "this.datasetToRangeAxisMap.set(index, new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index))); } public ValueAxis getRangeAxisForDataset(int index) { ValueAxis result = getRangeAxis(); Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(index); if (axisIndex != null) { result = getRangeAxis(axisIndex.intValue()); } return result;"
      },
      {
        "txt": "} public CategoryItemRenderer getRenderer() { return getRenderer(0); } public CategoryItemRenderer getRenderer(int index) { CategoryItemRenderer result = null; if (this.renderers.size() > index) { result = (CategoryItemRenderer) this.renderers.get(index); } return result;"
      },
      {
        "txt": "} public void setRenderer(CategoryItemRenderer renderer) { setRenderer(0, renderer, true); } public void setRenderer(CategoryItemRenderer renderer, boolean notify) { setRenderer(0, renderer, notify); } public void setRenderer(int index, CategoryItemRenderer renderer) { setRenderer(index, renderer, true); }"
      },
      {
        "txt": "public void setRenderer(int index, CategoryItemRenderer renderer, boolean notify) { CategoryItemRenderer existing = (CategoryItemRenderer) this.renderers.get(index); if (existing != null) { existing.removeChangeListener(this); } this.renderers.set(index, renderer); if (renderer != null) { renderer.setPlot(this);"
      },
      {
        "txt": "renderer.addChangeListener(this); } configureDomainAxes(); configureRangeAxes(); if (notify) { fireChangeEvent(); } } public void setRenderers(CategoryItemRenderer[] renderers) { for (int i = 0; i < renderers.length; i++) {"
      },
      {
        "txt": "setRenderer(i, renderers[i], false); } fireChangeEvent(); } public CategoryItemRenderer getRendererForDataset(CategoryDataset dataset) { CategoryItemRenderer result = null; for (int i = 0; i < this.datasets.size(); i++) { if (this.datasets.get(i) == dataset) { result = (CategoryItemRenderer) this.renderers.get(i); break;"
      },
      {
        "txt": "} } return result; } public int getIndexOf(CategoryItemRenderer renderer) { return this.renderers.indexOf(renderer); } public DatasetRenderingOrder getDatasetRenderingOrder() { return this.renderingOrder; }"
      },
      {
        "txt": "public void setDatasetRenderingOrder(DatasetRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.renderingOrder = order; fireChangeEvent(); } public SortOrder getColumnRenderingOrder() { return this.columnRenderingOrder; }"
      },
      {
        "txt": "public void setColumnRenderingOrder(SortOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.columnRenderingOrder = order; fireChangeEvent(); } public SortOrder getRowRenderingOrder() { return this.rowRenderingOrder; }"
      },
      {
        "txt": "public void setRowRenderingOrder(SortOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.rowRenderingOrder = order; fireChangeEvent(); } public boolean isDomainGridlinesVisible() { return this.domainGridlinesVisible; }"
      },
      {
        "txt": "public void setDomainGridlinesVisible(boolean visible) { if (this.domainGridlinesVisible != visible) { this.domainGridlinesVisible = visible; fireChangeEvent(); } } public CategoryAnchor getDomainGridlinePosition() { return this.domainGridlinePosition; } public void setDomainGridlinePosition(CategoryAnchor position) {"
      },
      {
        "txt": "if (position == null) { throw new IllegalArgumentException(\"Null 'position' argument.\"); } this.domainGridlinePosition = position; fireChangeEvent(); } public Stroke getDomainGridlineStroke() { return this.domainGridlineStroke; } public void setDomainGridlineStroke(Stroke stroke) {"
      },
      {
        "txt": "if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' not permitted.\"); } this.domainGridlineStroke = stroke; fireChangeEvent(); } public Paint getDomainGridlinePaint() { return this.domainGridlinePaint; } public void setDomainGridlinePaint(Paint paint) {"
      },
      {
        "txt": "if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainGridlinePaint = paint; fireChangeEvent(); } public boolean isRangeGridlinesVisible() { return this.rangeGridlinesVisible; } public void setRangeGridlinesVisible(boolean visible) {"
      },
      {
        "txt": "if (this.rangeGridlinesVisible != visible) { this.rangeGridlinesVisible = visible; fireChangeEvent(); } } public Stroke getRangeGridlineStroke() { return this.rangeGridlineStroke; } public void setRangeGridlineStroke(Stroke stroke) { if (stroke == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeGridlineStroke = stroke; fireChangeEvent(); } public Paint getRangeGridlinePaint() { return this.rangeGridlinePaint; } public void setRangeGridlinePaint(Paint paint) { if (paint == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeGridlinePaint = paint; fireChangeEvent(); } public LegendItemCollection getFixedLegendItems() { return this.fixedLegendItems; } public void setFixedLegendItems(LegendItemCollection items) { this.fixedLegendItems = items;"
      },
      {
        "txt": "fireChangeEvent(); } public LegendItemCollection getLegendItems() { LegendItemCollection result = this.fixedLegendItems; if (result == null) { result = new LegendItemCollection(); int count = this.datasets.size(); for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) { CategoryDataset dataset = getDataset(datasetIndex); if (dataset != null) {"
      },
      {
        "txt": "CategoryItemRenderer renderer = getRenderer(datasetIndex); if (renderer != null) { int seriesCount = dataset.getRowCount(); for (int i = 0; i < seriesCount; i++) { LegendItem item = renderer.getLegendItem( datasetIndex, i); if (item != null) { result.add(item); } }"
      },
      {
        "txt": "} } } } return result; } public void handleClick(int x, int y, PlotRenderingInfo info) { Rectangle2D dataArea = info.getDataArea(); if (dataArea.contains(x, y)) { double java2D = 0.0;"
      },
      {
        "txt": "if (this.orientation == PlotOrientation.HORIZONTAL) { java2D = x; } else if (this.orientation == PlotOrientation.VERTICAL) { java2D = y; } RectangleEdge edge = Plot.resolveRangeAxisLocation( getRangeAxisLocation(), this.orientation); double value = getRangeAxis().java2DToValue( java2D, info.getDataArea(), edge);"
      },
      {
        "txt": "setAnchorValue(value); setRangeCrosshairValue(value); } } public void zoom(double percent) { if (percent > 0.0) { double range = getRangeAxis().getRange().getLength(); double scaledRange = range * percent; getRangeAxis().setRange(this.anchorValue - scaledRange / 2.0, this.anchorValue + scaledRange / 2.0);"
      },
      {
        "txt": "} else { getRangeAxis().setAutoRange(true); } } public void datasetChanged(DatasetChangeEvent event) { int count = this.rangeAxes.size(); for (int axisIndex = 0; axisIndex < count; axisIndex++) { ValueAxis yAxis = getRangeAxis(axisIndex); if (yAxis != null) {"
      },
      {
        "txt": "yAxis.configure(); } } if (getParent() != null) { getParent().datasetChanged(event); } else { PlotChangeEvent e = new PlotChangeEvent(this); e.setType(ChartChangeEventType.DATASET_UPDATED); notifyListeners(e);"
      },
      {
        "txt": "} } public void rendererChanged(RendererChangeEvent event) { Plot parent = getParent(); if (parent != null) { if (parent instanceof RendererChangeListener) { RendererChangeListener rcl = (RendererChangeListener) parent; rcl.rendererChanged(event); } else {"
      },
      {
        "txt": "throw new RuntimeException( \"The renderer has changed and I don't know what to do!\"); } } else { configureRangeAxes(); PlotChangeEvent e = new PlotChangeEvent(this); notifyListeners(e); } }"
      },
      {
        "txt": "public void addDomainMarker(CategoryMarker marker) { addDomainMarker(marker, Layer.FOREGROUND); } public void addDomainMarker(CategoryMarker marker, Layer layer) { addDomainMarker(0, marker, layer); } public void addDomainMarker(int index, CategoryMarker marker, Layer layer) { addDomainMarker(index, marker, layer, true); } public void addDomainMarker(int index, CategoryMarker marker, Layer layer,"
      },
      {
        "txt": "boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' not permitted.\"); } if (layer == null) { throw new IllegalArgumentException(\"Null 'layer' not permitted.\"); } Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundDomainMarkers.get("
      },
      {
        "txt": "new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundDomainMarkers.get( new Integer(index));"
      },
      {
        "txt": "if (markers == null) { markers = new java.util.ArrayList(); this.backgroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); } marker.addChangeListener(this); if (notify) { fireChangeEvent(); }"
      },
      {
        "txt": "} public void clearDomainMarkers() { if (this.backgroundDomainMarkers != null) { Set keys = this.backgroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.backgroundDomainMarkers.clear();"
      },
      {
        "txt": "} if (this.foregroundDomainMarkers != null) { Set keys = this.foregroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.foregroundDomainMarkers.clear(); }"
      },
      {
        "txt": "fireChangeEvent(); } public Collection getDomainMarkers(Layer layer) { return getDomainMarkers(0, layer); } public Collection getDomainMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundDomainMarkers.get(key);"
      },
      {
        "txt": "} else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundDomainMarkers.get(key); } if (result != null) { result = Collections.unmodifiableCollection(result); } return result; } public void clearDomainMarkers(int index) {"
      },
      {
        "txt": "Integer key = new Integer(index); if (this.backgroundDomainMarkers != null) { Collection markers = (Collection) this.backgroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); }"
      },
      {
        "txt": "markers.clear(); } } if (this.foregroundDomainMarkers != null) { Collection markers = (Collection) this.foregroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next();"
      },
      {
        "txt": "m.removeChangeListener(this); } markers.clear(); } } fireChangeEvent(); } public boolean removeDomainMarker(Marker marker) { return removeDomainMarker(marker, Layer.FOREGROUND); }"
      },
      {
        "txt": "public boolean removeDomainMarker(Marker marker, Layer layer) { return removeDomainMarker(0, marker, layer); } public boolean removeDomainMarker(int index, Marker marker, Layer layer) { return removeDomainMarker(index, marker, layer, true); } public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) {"
      },
      {
        "txt": "markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent();"
      },
      {
        "txt": "} return removed; } public void addRangeMarker(Marker marker) { addRangeMarker(marker, Layer.FOREGROUND); } public void addRangeMarker(Marker marker, Layer layer) { addRangeMarker(0, marker, layer); } public void addRangeMarker(int index, Marker marker, Layer layer) {"
      },
      {
        "txt": "addRangeMarker(index, marker, layer, true); } public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) { Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList();"
      },
      {
        "txt": "this.foregroundRangeMarkers.put(new Integer(index), markers); } markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundRangeMarkers.put(new Integer(index), markers);"
      },
      {
        "txt": "} markers.add(marker); } marker.addChangeListener(this); if (notify) { fireChangeEvent(); } } public void clearRangeMarkers() { if (this.backgroundRangeMarkers != null) {"
      },
      {
        "txt": "Set keys = this.backgroundRangeMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.backgroundRangeMarkers.clear(); } if (this.foregroundRangeMarkers != null) { Set keys = this.foregroundRangeMarkers.keySet();"
      },
      {
        "txt": "Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.foregroundRangeMarkers.clear(); } fireChangeEvent(); } public Collection getRangeMarkers(Layer layer) {"
      },
      {
        "txt": "return getRangeMarkers(0, layer); } public Collection getRangeMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundRangeMarkers.get(key); } else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundRangeMarkers.get(key);"
      },
      {
        "txt": "} if (result != null) { result = Collections.unmodifiableCollection(result); } return result; } public void clearRangeMarkers(int index) { Integer key = new Integer(index); if (this.backgroundRangeMarkers != null) { Collection markers"
      },
      {
        "txt": "= (Collection) this.backgroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } }"
      },
      {
        "txt": "if (this.foregroundRangeMarkers != null) { Collection markers = (Collection) this.foregroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear();"
      },
      {
        "txt": "} } fireChangeEvent(); } public boolean removeRangeMarker(Marker marker) { return removeRangeMarker(marker, Layer.FOREGROUND); } public boolean removeRangeMarker(Marker marker, Layer layer) { return removeRangeMarker(0, marker, layer); }"
      },
      {
        "txt": "public boolean removeRangeMarker(int index, Marker marker, Layer layer) { return removeRangeMarker(index, marker, layer, true); } public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' argument.\"); } ArrayList markers; if (layer == Layer.FOREGROUND) {"
      },
      {
        "txt": "index)); } else { markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } <extra_id_0> if (removed && notify) { fireChangeEvent(); } return removed; } public boolean isRangeCrosshairVisible() {"
      },
      {
        "txt": "} public boolean isRangeCrosshairVisible() { return this.rangeCrosshairVisible; } public void setRangeCrosshairVisible(boolean flag) { if (this.rangeCrosshairVisible != flag) { this.rangeCrosshairVisible = flag; fireChangeEvent(); } }"
      },
      {
        "txt": "public boolean isRangeCrosshairLockedOnData() { return this.rangeCrosshairLockedOnData; } public void setRangeCrosshairLockedOnData(boolean flag) { if (this.rangeCrosshairLockedOnData != flag) { this.rangeCrosshairLockedOnData = flag; fireChangeEvent(); } } public double getRangeCrosshairValue() {"
      },
      {
        "txt": "return this.rangeCrosshairValue; } public void setRangeCrosshairValue(double value) { setRangeCrosshairValue(value, true); } public void setRangeCrosshairValue(double value, boolean notify) { this.rangeCrosshairValue = value; if (isRangeCrosshairVisible() && notify) { fireChangeEvent(); }"
      },
      {
        "txt": "} public Stroke getRangeCrosshairStroke() { return this.rangeCrosshairStroke; } public void setRangeCrosshairStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeCrosshairStroke = stroke; fireChangeEvent();"
      },
      {
        "txt": "} public Paint getRangeCrosshairPaint() { return this.rangeCrosshairPaint; } public void setRangeCrosshairPaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeCrosshairPaint = paint; fireChangeEvent();"
      },
      {
        "txt": "} public List getAnnotations() { return this.annotations; } public void addAnnotation(CategoryAnnotation annotation) { addAnnotation(annotation, true); } public void addAnnotation(CategoryAnnotation annotation, boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\");"
      },
      {
        "txt": "} this.annotations.add(annotation); if (notify) { fireChangeEvent(); } } public boolean removeAnnotation(CategoryAnnotation annotation) { return removeAnnotation(annotation, true); } public boolean removeAnnotation(CategoryAnnotation annotation,"
      },
      {
        "txt": "boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\"); } boolean removed = this.annotations.remove(annotation); if (removed && notify) { fireChangeEvent(); } return removed; }"
      },
      {
        "txt": "public void clearAnnotations() { this.annotations.clear(); fireChangeEvent(); } protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); }"
      },
      {
        "txt": "if (this.fixedDomainAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast( this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP);"
      },
      {
        "txt": "space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), RectangleEdge.BOTTOM); } } else { RectangleEdge domainEdge = Plot.resolveDomainAxisLocation( getDomainAxisLocation(), this.orientation); if (this.drawSharedDomainAxis) { space = getDomainAxis().reserveSpace(g2, this, plotArea, domainEdge, space);"
      },
      {
        "txt": "} for (int i = 0; i < this.domainAxes.size(); i++) { Axis xAxis = (Axis) this.domainAxes.get(i); if (xAxis != null) { RectangleEdge edge = getDomainAxisEdge(i); space = xAxis.reserveSpace(g2, this, plotArea, edge, space); } } } return space;"
      },
      {
        "txt": "} protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); } if (this.fixedRangeAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),"
      },
      {
        "txt": "RectangleEdge.TOP); space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT); }"
      },
      {
        "txt": "} else { for (int i = 0; i < this.rangeAxes.size(); i++) { Axis yAxis = (Axis) this.rangeAxes.get(i); if (yAxis != null) { RectangleEdge edge = getRangeAxisEdge(i); space = yAxis.reserveSpace(g2, this, plotArea, edge, space); } } }"
      },
      {
        "txt": "return space; } protected AxisSpace calculateAxisSpace(Graphics2D g2, Rectangle2D plotArea) { AxisSpace space = new AxisSpace(); space = calculateRangeAxisSpace(g2, plotArea, space); space = calculateDomainAxisSpace(g2, plotArea, space); return space; } public void draw(Graphics2D g2, Rectangle2D area,"
      },
      {
        "txt": "Point2D anchor, PlotState parentState, PlotRenderingInfo state) { boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); if (b1 || b2) { return; } if (state == null) { state = new PlotRenderingInfo(null);"
      },
      {
        "txt": "} state.setPlotArea(area); RectangleInsets insets = getInsets(); insets.trim(area); AxisSpace space = calculateAxisSpace(g2, area); Rectangle2D dataArea = space.shrink(area, null); this.axisOffset.trim(dataArea); state.setDataArea(dataArea); if (getRenderer() != null) { getRenderer().drawBackground(g2, this, dataArea);"
      },
      {
        "txt": "} else { drawBackground(g2, dataArea); } Map axisStateMap = drawAxes(g2, area, dataArea, state); Shape savedClip = g2.getClip(); g2.clip(dataArea); drawDomainGridlines(g2, dataArea); AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis()); if (rangeAxisState == null) {"
      },
      {
        "txt": "if (parentState != null) { rangeAxisState = (AxisState) parentState.getSharedAxisStates() .get(getRangeAxis()); } } if (rangeAxisState != null) { drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);"
      },
      {
        "txt": "} for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND); } boolean foundData = false; Composite originalComposite = g2.getComposite(); g2.setComposite(AlphaComposite.getInstance( AlphaComposite.SRC_OVER, getForegroundAlpha())); DatasetRenderingOrder order = getDatasetRenderingOrder(); if (order == DatasetRenderingOrder.FORWARD) {"
      },
      {
        "txt": "int datasetCount = this.datasets.size(); for (int i = 0; i < datasetCount; i++) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, state); } }"
      },
      {
        "txt": "for (int i = 0; i < datasetCount; i++) { foundData = render(g2, dataArea, i, state) || foundData; } for (int i = 0; i < datasetCount; i++) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, state);"
      },
      {
        "txt": "} } } else { // DatasetRenderingOrder.REVERSE int datasetCount = this.datasets.size(); for (int i = datasetCount - 1; i >= 0; i--) { CategoryItemRenderer r = getRenderer(i); if (r != null) { CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i);"
      },
      {
        "txt": "r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, state); } } for (int i = this.datasets.size() - 1; i >= 0; i--) { foundData = render(g2, dataArea, i, state) || foundData; } for (int i = datasetCount - 1; i >= 0; i--) { CategoryItemRenderer r = getRenderer(i); if (r != null) {"
      },
      {
        "txt": "CategoryAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, state); } } } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND); }"
      },
      {
        "txt": "for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND); } drawAnnotations(g2, dataArea, state); g2.setClip(savedClip); g2.setComposite(originalComposite); if (!foundData) { drawNoDataMessage(g2, dataArea); } if (isRangeCrosshairVisible()) {"
      },
      {
        "txt": "drawRangeCrosshair(g2, dataArea, getOrientation(), getRangeCrosshairValue(), getRangeAxis(), getRangeCrosshairStroke(), getRangeCrosshairPaint()); } if (getRenderer() != null) { getRenderer().drawOutline(g2, this, dataArea); } else { drawOutline(g2, dataArea); }"
      },
      {
        "txt": "} public void drawBackground(Graphics2D g2, Rectangle2D area) { fillBackground(g2, area, this.orientation); drawBackgroundImage(g2, area); } protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, PlotRenderingInfo plotState) { AxisCollection axisCollection = new AxisCollection();"
      },
      {
        "txt": "for (int index = 0; index < this.domainAxes.size(); index++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(index); if (xAxis != null) { axisCollection.add(xAxis, getDomainAxisEdge(index)); } } for (int index = 0; index < this.rangeAxes.size(); index++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index); if (yAxis != null) { axisCollection.add(yAxis, getRangeAxisEdge(index));"
      },
      {
        "txt": "} } Map axisStateMap = new HashMap(); double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset( dataArea.getHeight()); Iterator iterator = axisCollection.getAxesAtTop().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea,"
      },
      {
        "txt": "RectangleEdge.TOP, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight()); iterator = axisCollection.getAxesAtBottom().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next();"
      },
      {
        "txt": "if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.BOTTOM, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtLeft().iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.LEFT, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); } } cursor = dataArea.getMaxX()"
      },
      {
        "txt": "+ this.axisOffset.calculateRightOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtRight().iterator(); while (iterator.hasNext()) { Axis axis = (Axis) iterator.next(); if (axis != null) { AxisState axisState = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.RIGHT, plotState); cursor = axisState.getCursor(); axisStateMap.put(axis, axisState); }"
      },
      {
        "txt": "} return axisStateMap; } public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info) { boolean foundData = false; CategoryDataset currentDataset = getDataset(index); CategoryItemRenderer renderer = getRenderer(index); CategoryAxis domainAxis = getDomainAxisForDataset(index); ValueAxis rangeAxis = getRangeAxisForDataset(index);"
      },
      {
        "txt": "boolean hasData = !DatasetUtilities.isEmptyOrNull(currentDataset); if (hasData && renderer != null) { foundData = true; CategoryItemRendererState state = renderer.initialise(g2, dataArea, this, index, info); int columnCount = currentDataset.getColumnCount(); int rowCount = currentDataset.getRowCount(); int passCount = renderer.getPassCount(); for (int pass = 0; pass < passCount; pass++) { if (this.columnRenderingOrder == SortOrder.ASCENDING) {"
      },
      {
        "txt": "for (int column = 0; column < columnCount; column++) { if (this.rowRenderingOrder == SortOrder.ASCENDING) { for (int row = 0; row < rowCount; row++) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } else { for (int row = rowCount - 1; row >= 0; row--) {"
      },
      {
        "txt": "renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } } } else { for (int column = columnCount - 1; column >= 0; column--) { if (this.rowRenderingOrder == SortOrder.ASCENDING) {"
      },
      {
        "txt": "for (int row = 0; row < rowCount; row++) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset, row, column, pass); } } else { for (int row = rowCount - 1; row >= 0; row--) { renderer.drawItem(g2, state, dataArea, this, domainAxis, rangeAxis, currentDataset,"
      },
      {
        "txt": "row, column, pass); } } } } } } return foundData; } protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea) {"
      },
      {
        "txt": "if (isDomainGridlinesVisible()) { CategoryAnchor anchor = getDomainGridlinePosition(); RectangleEdge domainAxisEdge = getDomainAxisEdge(); Stroke gridStroke = getDomainGridlineStroke(); Paint gridPaint = getDomainGridlinePaint(); if ((gridStroke != null) && (gridPaint != null)) { CategoryDataset data = getDataset(); if (data != null) { CategoryAxis axis = getDomainAxis(); if (axis != null) {"
      },
      {
        "txt": "int columnCount = data.getColumnCount(); for (int c = 0; c < columnCount; c++) { double xx = axis.getCategoryJava2DCoordinate( anchor, c, columnCount, dataArea, domainAxisEdge); CategoryItemRenderer renderer1 = getRenderer(); if (renderer1 != null) { renderer1.drawDomainGridline(g2, this, dataArea, xx); }"
      },
      {
        "txt": "} } } } } } protected void drawRangeGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { if (isRangeGridlinesVisible()) { Stroke gridStroke = getRangeGridlineStroke();"
      },
      {
        "txt": "Paint gridPaint = getRangeGridlinePaint(); if ((gridStroke != null) && (gridPaint != null)) { ValueAxis axis = getRangeAxis(); if (axis != null) { Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); CategoryItemRenderer renderer1 = getRenderer(); if (renderer1 != null) { renderer1.drawRangeGridline(g2, this,"
      },
      {
        "txt": "getRangeAxis(), dataArea, tick.getValue()); } } } } } } protected void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info) { Iterator iterator = getAnnotations().iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { CategoryAnnotation annotation = (CategoryAnnotation) iterator.next(); annotation.draw(g2, this, dataArea, getDomainAxis(), getRangeAxis(), 0, info); } } protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { CategoryItemRenderer r = getRenderer(index);"
      },
      {
        "txt": "if (r == null) { return; } Collection markers = getDomainMarkers(index, layer); CategoryAxis axis = getDomainAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { CategoryMarker marker = (CategoryMarker) iterator.next(); r.drawDomainMarker(g2, this, axis, marker, dataArea);"
      },
      {
        "txt": "} } } protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { CategoryItemRenderer r = getRenderer(index); if (r == null) { return; } Collection markers = getRangeMarkers(index, layer);"
      },
      {
        "txt": "ValueAxis axis = getRangeAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker marker = (Marker) iterator.next(); r.drawRangeMarker(g2, this, axis, marker, dataArea); } } } protected void drawRangeLine(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "double value, Stroke stroke, Paint paint) { double java2D = getRangeAxis().valueToJava2D(value, dataArea, getRangeAxisEdge()); Line2D line = null; if (this.orientation == PlotOrientation.HORIZONTAL) { line = new Line2D.Double(java2D, dataArea.getMinY(), java2D, dataArea.getMaxY()); } else if (this.orientation == PlotOrientation.VERTICAL) { line = new Line2D.Double(dataArea.getMinX(), java2D,"
      },
      {
        "txt": "dataArea.getMaxX(), java2D); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { if (!axis.getRange().contains(value)) {"
      },
      {
        "txt": "return; } Line2D line = null; if (orientation == PlotOrientation.HORIZONTAL) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else {"
      },
      {
        "txt": "double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } public Range getDataRange(ValueAxis axis) {"
      },
      {
        "txt": "Range result = null; List mappedDatasets = new ArrayList(); int rangeIndex = this.rangeAxes.indexOf(axis); if (rangeIndex >= 0) { mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex)); } else if (axis == getRangeAxis()) { mappedDatasets.addAll(datasetsMappedToRangeAxis(0)); } Iterator iterator = mappedDatasets.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { CategoryDataset d = (CategoryDataset) iterator.next(); CategoryItemRenderer r = getRendererForDataset(d); if (r != null) { result = Range.combine(result, r.findRangeBounds(d)); } } return result; } private List datasetsMappedToDomainAxis(int axisIndex) {"
      },
      {
        "txt": "List result = new ArrayList(); for (int datasetIndex = 0; datasetIndex < this.datasets.size(); datasetIndex++) { Object dataset = this.datasets.get(datasetIndex); if (dataset != null) { Integer m = (Integer) this.datasetToDomainAxisMap.get( datasetIndex); if (m == null) { // a dataset with no mapping is assigned to if (axisIndex == 0) { result.add(dataset);"
      },
      {
        "txt": "} } else { if (m.intValue() == axisIndex) { result.add(dataset); } } } } return result;"
      },
      {
        "txt": "} private List datasetsMappedToRangeAxis(int index) { List result = new ArrayList(); for (int i = 0; i < this.datasets.size(); i++) { Object dataset = this.datasets.get(i); if (dataset != null) { Integer m = (Integer) this.datasetToRangeAxisMap.get(i); if (m == null) { // a dataset with no mapping is assigned to if (index == 0) { result.add(dataset);"
      },
      {
        "txt": "} } else { if (m.intValue() == index) { result.add(dataset); } } } } return result;"
      },
      {
        "txt": "} public int getWeight() { return this.weight; } public void setWeight(int weight) { this.weight = weight; fireChangeEvent(); } public AxisSpace getFixedDomainAxisSpace() { return this.fixedDomainAxisSpace;"
      },
      {
        "txt": "} public void setFixedDomainAxisSpace(AxisSpace space) { setFixedDomainAxisSpace(space, true); } public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) { this.fixedDomainAxisSpace = space; if (notify) { fireChangeEvent(); } }"
      },
      {
        "txt": "public AxisSpace getFixedRangeAxisSpace() { return this.fixedRangeAxisSpace; } public void setFixedRangeAxisSpace(AxisSpace space) { setFixedRangeAxisSpace(space, true); } public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) { this.fixedRangeAxisSpace = space; if (notify) { fireChangeEvent();"
      },
      {
        "txt": "} } public List getCategories() { List result = null; if (getDataset() != null) { result = Collections.unmodifiableList(getDataset().getColumnKeys()); } return result; } public List getCategoriesForAxis(CategoryAxis axis) {"
      },
      {
        "txt": "List result = new ArrayList(); int axisIndex = this.domainAxes.indexOf(axis); List datasets = datasetsMappedToDomainAxis(axisIndex); Iterator iterator = datasets.iterator(); while (iterator.hasNext()) { CategoryDataset dataset = (CategoryDataset) iterator.next(); for (int i = 0; i < dataset.getColumnCount(); i++) { Comparable category = dataset.getColumnKey(i); if (!result.contains(category)) { result.add(category);"
      },
      {
        "txt": "} } } return result; } public boolean getDrawSharedDomainAxis() { return this.drawSharedDomainAxis; } public void setDrawSharedDomainAxis(boolean draw) { this.drawSharedDomainAxis = draw;"
      },
      {
        "txt": "fireChangeEvent(); } public boolean isDomainZoomable() { return false; } public boolean isRangeZoomable() { return true; } public void zoomDomainAxes(double factor, PlotRenderingInfo state, Point2D source) {"
      },
      {
        "txt": "} public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { } public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { } public void zoomRangeAxes(double factor, PlotRenderingInfo state, Point2D source) { zoomRangeAxes(factor, state, source, false);"
      },
      {
        "txt": "} public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { if (useAnchor) { double sourceY = source.getY(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceY = source.getX();"
      },
      {
        "txt": "} double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge()); rangeAxis.resizeRange(factor, anchorY); } else { rangeAxis.resizeRange(factor); } } }"
      },
      {
        "txt": "} public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo state, Point2D source) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { rangeAxis.zoomRange(lowerPercent, upperPercent); } } }"
      },
      {
        "txt": "public double getAnchorValue() { return this.anchorValue; } public void setAnchorValue(double value) { setAnchorValue(value, true); } public void setAnchorValue(double value, boolean notify) { this.anchorValue = value; if (notify) { fireChangeEvent();"
      },
      {
        "txt": "} } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof CategoryPlot)) { return false; } if (!super.equals(obj)) {"
      },
      {
        "txt": "return false; } CategoryPlot that = (CategoryPlot) obj; if (this.orientation != that.orientation) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { return false; } if (!this.domainAxes.equals(that.domainAxes)) {"
      },
      {
        "txt": "return false; } if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.drawSharedDomainAxis != that.drawSharedDomainAxis) { return false; } if (!this.rangeAxes.equals(that.rangeAxes)) { return false;"
      },
      {
        "txt": "} if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false; } if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) { return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) { return false; } if (this.renderingOrder != that.renderingOrder) { return false; } if (this.columnRenderingOrder != that.columnRenderingOrder) { return false;"
      },
      {
        "txt": "} if (this.rowRenderingOrder != that.rowRenderingOrder) { return false; } if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false; } if (this.domainGridlinePosition != that.domainGridlinePosition) { return false; }"
      },
      {
        "txt": "if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { return false; } if (this.anchorValue != that.anchorValue) {"
      },
      {
        "txt": "return false; } if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) {"
      },
      {
        "txt": "return false; } if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false; }"
      },
      {
        "txt": "if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) { return false;"
      },
      {
        "txt": "} if (this.weight != that.weight) { return false; } if (!ObjectUtilities.equal(this.fixedDomainAxisSpace, that.fixedDomainAxisSpace)) { return false; } if (!ObjectUtilities.equal(this.fixedRangeAxisSpace, that.fixedRangeAxisSpace)) {"
      },
      {
        "txt": "return false; } return true; } public Object clone() throws CloneNotSupportedException { CategoryPlot clone = (CategoryPlot) super.clone(); clone.domainAxes = new ObjectList(); for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(i); if (xAxis != null) {"
      },
      {
        "txt": "CategoryAxis clonedAxis = (CategoryAxis) xAxis.clone(); clone.setDomainAxis(i, clonedAxis); } } clone.domainAxisLocations = (ObjectList) this.domainAxisLocations.clone(); clone.rangeAxes = new ObjectList(); for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(i); if (yAxis != null) {"
      },
      {
        "txt": "ValueAxis clonedAxis = (ValueAxis) yAxis.clone(); clone.setRangeAxis(i, clonedAxis); } } clone.rangeAxisLocations = (ObjectList) this.rangeAxisLocations.clone(); clone.datasets = (ObjectList) this.datasets.clone(); for (int i = 0; i < clone.datasets.size(); i++) { CategoryDataset dataset = clone.getDataset(i); if (dataset != null) { dataset.addChangeListener(clone);"
      },
      {
        "txt": "} } clone.datasetToDomainAxisMap = (ObjectList) this.datasetToDomainAxisMap.clone(); clone.datasetToRangeAxisMap = (ObjectList) this.datasetToRangeAxisMap.clone(); clone.renderers = (ObjectList) this.renderers.clone(); if (this.fixedDomainAxisSpace != null) { clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedDomainAxisSpace);"
      },
      {
        "txt": "} if (this.fixedRangeAxisSpace != null) { clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedRangeAxisSpace); } return clone; } private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject(); SerialUtilities.writeStroke(this.domainGridlineStroke, stream);"
      },
      {
        "txt": "SerialUtilities.writePaint(this.domainGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeGridlineStroke, stream); SerialUtilities.writePaint(this.rangeGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream); SerialUtilities.writePaint(this.rangeCrosshairPaint, stream); } private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { stream.defaultReadObject(); this.domainGridlineStroke = SerialUtilities.readStroke(stream);"
      },
      {
        "txt": "this.domainGridlinePaint = SerialUtilities.readPaint(stream); this.rangeGridlineStroke = SerialUtilities.readStroke(stream); this.rangeGridlinePaint = SerialUtilities.readPaint(stream); this.rangeCrosshairStroke = SerialUtilities.readStroke(stream); this.rangeCrosshairPaint = SerialUtilities.readPaint(stream); for (int i = 0; i < this.domainAxes.size(); i++) { CategoryAxis xAxis = (CategoryAxis) this.domainAxes.get(i); if (xAxis != null) { xAxis.setPlot(this); xAxis.addChangeListener(this);"
      },
      {
        "txt": "} } for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(i); if (yAxis != null) { yAxis.setPlot(this); yAxis.addChangeListener(this); } } int datasetCount = this.datasets.size();"
      },
      {
        "txt": "for (int i = 0; i < datasetCount; i++) { Dataset dataset = (Dataset) this.datasets.get(i); if (dataset != null) { dataset.addChangeListener(this); } } int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { CategoryItemRenderer renderer = (CategoryItemRenderer) this.renderers.get(i);"
      },
      {
        "txt": "if (renderer != null) { renderer.addChangeListener(this); } } }"
      }
    ]
  },
  {
    "id": 26,
    "file_path": "source/org/jfree/chart/plot/XYPlot.java",
    "start-bug-line": 2293,
    "end-bug-line": 2293,
    "bug": "",
    "fix": "if (markers == null) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.chart.plot; import java.awt.AlphaComposite; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Composite; import java.awt.Graphics2D; import java.awt.Paint;"
      },
      {
        "txt": "import java.awt.Shape; import java.awt.Stroke; import java.awt.geom.Line2D; import java.awt.geom.Point2D; import java.awt.geom.Rectangle2D; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.ResourceBundle; import java.util.Set; import java.util.TreeMap; import org.jfree.chart.LegendItem;"
      },
      {
        "txt": "import org.jfree.chart.LegendItemCollection; import org.jfree.chart.annotations.XYAnnotation; import org.jfree.chart.axis.Axis; import org.jfree.chart.axis.AxisCollection; import org.jfree.chart.axis.AxisLocation; import org.jfree.chart.axis.AxisSpace; import org.jfree.chart.axis.AxisState; import org.jfree.chart.axis.ValueAxis; import org.jfree.chart.axis.ValueTick; import org.jfree.chart.event.ChartChangeEventType;"
      },
      {
        "txt": "import org.jfree.chart.event.PlotChangeEvent; import org.jfree.chart.event.RendererChangeEvent; import org.jfree.chart.event.RendererChangeListener; import org.jfree.chart.renderer.RendererUtilities; import org.jfree.chart.renderer.xy.XYItemRenderer; import org.jfree.chart.renderer.xy.XYItemRendererState; import org.jfree.chart.util.Layer; import org.jfree.chart.util.ObjectList; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PaintUtilities;"
      },
      {
        "txt": "import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.RectangleEdge; import org.jfree.chart.util.RectangleInsets; import org.jfree.chart.util.SerialUtilities; import org.jfree.data.Range; import org.jfree.data.general.Dataset; import org.jfree.data.general.DatasetChangeEvent; import org.jfree.data.general.DatasetUtilities; import org.jfree.data.xy.XYDataset; public class XYPlot extends Plot implements ValueAxisPlot, Zoomable,"
      },
      {
        "txt": "RendererChangeListener, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 7044148245716569264L; public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] {2.0f, 2.0f}, 0.0f); public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE; public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false; public static final Stroke DEFAULT_CROSSHAIR_STROKE = DEFAULT_GRIDLINE_STROKE; public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue;"
      },
      {
        "txt": "protected static ResourceBundle localizationResources = ResourceBundle.getBundle( \"org.jfree.chart.plot.LocalizationBundle\"); private PlotOrientation orientation; private RectangleInsets axisOffset; private ObjectList domainAxes; private ObjectList domainAxisLocations; private ObjectList rangeAxes; private ObjectList rangeAxisLocations; private ObjectList datasets;"
      },
      {
        "txt": "private ObjectList renderers; private Map datasetToDomainAxisMap; private Map datasetToRangeAxisMap; private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0); private transient Paint[] quadrantPaint = new Paint[] {null, null, null, null}; private boolean domainGridlinesVisible; private transient Stroke domainGridlineStroke; private transient Paint domainGridlinePaint; private boolean rangeGridlinesVisible;"
      },
      {
        "txt": "private transient Stroke rangeGridlineStroke; private transient Paint rangeGridlinePaint; private boolean domainZeroBaselineVisible; private transient Stroke domainZeroBaselineStroke; private transient Paint domainZeroBaselinePaint; private boolean rangeZeroBaselineVisible; private transient Stroke rangeZeroBaselineStroke; private transient Paint rangeZeroBaselinePaint; private boolean domainCrosshairVisible; private double domainCrosshairValue;"
      },
      {
        "txt": "private transient Stroke domainCrosshairStroke; private transient Paint domainCrosshairPaint; private boolean domainCrosshairLockedOnData = true; private boolean rangeCrosshairVisible; private double rangeCrosshairValue; private transient Stroke rangeCrosshairStroke; private transient Paint rangeCrosshairPaint; private boolean rangeCrosshairLockedOnData = true; private Map foregroundDomainMarkers; private Map backgroundDomainMarkers;"
      },
      {
        "txt": "private Map foregroundRangeMarkers; private Map backgroundRangeMarkers; private List annotations; private transient Paint domainTickBandPaint; private transient Paint rangeTickBandPaint; private AxisSpace fixedDomainAxisSpace; private AxisSpace fixedRangeAxisSpace; private DatasetRenderingOrder datasetRenderingOrder = DatasetRenderingOrder.REVERSE; private SeriesRenderingOrder seriesRenderingOrder"
      },
      {
        "txt": "= SeriesRenderingOrder.REVERSE; private int weight; private LegendItemCollection fixedLegendItems; public XYPlot() { this(null, null, null, null); } public XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer) {"
      },
      {
        "txt": "super(); this.orientation = PlotOrientation.VERTICAL; this.weight = 1; // only relevant when this is a subplot this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0); this.domainAxes = new ObjectList(); this.domainAxisLocations = new ObjectList(); this.foregroundDomainMarkers = new HashMap(); this.backgroundDomainMarkers = new HashMap(); this.rangeAxes = new ObjectList(); this.rangeAxisLocations = new ObjectList();"
      },
      {
        "txt": "this.foregroundRangeMarkers = new HashMap(); this.backgroundRangeMarkers = new HashMap(); this.datasets = new ObjectList(); this.renderers = new ObjectList(); this.datasetToDomainAxisMap = new TreeMap(); this.datasetToRangeAxisMap = new TreeMap(); this.datasets.set(0, dataset); if (dataset != null) { dataset.addChangeListener(this); }"
      },
      {
        "txt": "this.renderers.set(0, renderer); if (renderer != null) { renderer.setPlot(this); renderer.addChangeListener(this); } this.domainAxes.set(0, domainAxis); this.mapDatasetToDomainAxis(0, 0); if (domainAxis != null) { domainAxis.setPlot(this); domainAxis.addChangeListener(this);"
      },
      {
        "txt": "} this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); this.rangeAxes.set(0, rangeAxis); this.mapDatasetToRangeAxis(0, 0); if (rangeAxis != null) { rangeAxis.setPlot(this); rangeAxis.addChangeListener(this); } this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); configureDomainAxes();"
      },
      {
        "txt": "configureRangeAxes(); this.domainGridlinesVisible = true; this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.domainZeroBaselineVisible = false; this.domainZeroBaselinePaint = Color.black; this.domainZeroBaselineStroke = new BasicStroke(0.5f); this.rangeGridlinesVisible = true; this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT;"
      },
      {
        "txt": "this.rangeZeroBaselineVisible = false; this.rangeZeroBaselinePaint = Color.black; this.rangeZeroBaselineStroke = new BasicStroke(0.5f); this.domainCrosshairVisible = false; this.domainCrosshairValue = 0.0; this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.rangeCrosshairVisible = false; this.rangeCrosshairValue = 0.0; this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE;"
      },
      {
        "txt": "this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.annotations = new java.util.ArrayList(); } public String getPlotType() { return localizationResources.getString(\"XY_Plot\"); } public PlotOrientation getOrientation() { return this.orientation; } public void setOrientation(PlotOrientation orientation) {"
      },
      {
        "txt": "if (orientation == null) { throw new IllegalArgumentException(\"Null 'orientation' argument.\"); } if (orientation != this.orientation) { this.orientation = orientation; fireChangeEvent(); } } public RectangleInsets getAxisOffset() { return this.axisOffset;"
      },
      {
        "txt": "} public void setAxisOffset(RectangleInsets offset) { if (offset == null) { throw new IllegalArgumentException(\"Null 'offset' argument.\"); } this.axisOffset = offset; fireChangeEvent(); } public ValueAxis getDomainAxis() { return getDomainAxis(0);"
      },
      {
        "txt": "} public ValueAxis getDomainAxis(int index) { ValueAxis result = null; if (index < this.domainAxes.size()) { result = (ValueAxis) this.domainAxes.get(index); } if (result == null) { Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot xy = (XYPlot) parent;"
      },
      {
        "txt": "result = xy.getDomainAxis(index); } } return result; } public void setDomainAxis(ValueAxis axis) { setDomainAxis(0, axis); } public void setDomainAxis(int index, ValueAxis axis) { setDomainAxis(index, axis, true);"
      },
      {
        "txt": "} public void setDomainAxis(int index, ValueAxis axis, boolean notify) { ValueAxis existing = getDomainAxis(index); if (existing != null) { existing.removeChangeListener(this); } if (axis != null) { axis.setPlot(this); } this.domainAxes.set(index, axis);"
      },
      {
        "txt": "if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) { fireChangeEvent(); } } public void setDomainAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) {"
      },
      {
        "txt": "setDomainAxis(i, axes[i], false); } fireChangeEvent(); } public AxisLocation getDomainAxisLocation() { return (AxisLocation) this.domainAxisLocations.get(0); } public void setDomainAxisLocation(AxisLocation location) { setDomainAxisLocation(0, location, true); }"
      },
      {
        "txt": "public void setDomainAxisLocation(AxisLocation location, boolean notify) { setDomainAxisLocation(0, location, notify); } public RectangleEdge getDomainAxisEdge() { return Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation); } public int getDomainAxisCount() { return this.domainAxes.size(); }"
      },
      {
        "txt": "public void clearDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i); if (axis != null) { axis.removeChangeListener(this); } } this.domainAxes.clear(); fireChangeEvent(); }"
      },
      {
        "txt": "public void configureDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i); if (axis != null) { axis.configure(); } } } public AxisLocation getDomainAxisLocation(int index) { AxisLocation result = null;"
      },
      {
        "txt": "if (index < this.domainAxisLocations.size()) { result = (AxisLocation) this.domainAxisLocations.get(index); } if (result == null) { result = AxisLocation.getOpposite(getDomainAxisLocation()); } return result; } public void setDomainAxisLocation(int index, AxisLocation location) { setDomainAxisLocation(index, location, true);"
      },
      {
        "txt": "} public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) { throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\"); } this.domainAxisLocations.set(index, location); if (notify) { fireChangeEvent();"
      },
      {
        "txt": "} } public RectangleEdge getDomainAxisEdge(int index) { AxisLocation location = getDomainAxisLocation(index); RectangleEdge result = Plot.resolveDomainAxisLocation(location, this.orientation); if (result == null) { result = RectangleEdge.opposite(getDomainAxisEdge()); } return result;"
      },
      {
        "txt": "} public ValueAxis getRangeAxis() { return getRangeAxis(0); } public void setRangeAxis(ValueAxis axis) { if (axis != null) { axis.setPlot(this); } ValueAxis existing = getRangeAxis(); if (existing != null) {"
      },
      {
        "txt": "existing.removeChangeListener(this); } this.rangeAxes.set(0, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } fireChangeEvent(); } public AxisLocation getRangeAxisLocation() {"
      },
      {
        "txt": "return (AxisLocation) this.rangeAxisLocations.get(0); } public void setRangeAxisLocation(AxisLocation location) { setRangeAxisLocation(0, location, true); } public void setRangeAxisLocation(AxisLocation location, boolean notify) { setRangeAxisLocation(0, location, notify); } public RectangleEdge getRangeAxisEdge() { return Plot.resolveRangeAxisLocation(getRangeAxisLocation(),"
      },
      {
        "txt": "this.orientation); } public ValueAxis getRangeAxis(int index) { ValueAxis result = null; if (index < this.rangeAxes.size()) { result = (ValueAxis) this.rangeAxes.get(index); } if (result == null) { Plot parent = getParent(); if (parent instanceof XYPlot) {"
      },
      {
        "txt": "XYPlot xy = (XYPlot) parent; result = xy.getRangeAxis(index); } } return result; } public void setRangeAxis(int index, ValueAxis axis) { setRangeAxis(index, axis, true); } public void setRangeAxis(int index, ValueAxis axis, boolean notify) {"
      },
      {
        "txt": "ValueAxis existing = getRangeAxis(index); if (existing != null) { existing.removeChangeListener(this); } if (axis != null) { axis.setPlot(this); } this.rangeAxes.set(index, axis); if (axis != null) { axis.configure();"
      },
      {
        "txt": "axis.addChangeListener(this); } if (notify) { fireChangeEvent(); } } public void setRangeAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) { setRangeAxis(i, axes[i], false); }"
      },
      {
        "txt": "fireChangeEvent(); } public int getRangeAxisCount() { return this.rangeAxes.size(); } public void clearRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.removeChangeListener(this);"
      },
      {
        "txt": "} } this.rangeAxes.clear(); fireChangeEvent(); } public void configureRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.configure();"
      },
      {
        "txt": "} } } public AxisLocation getRangeAxisLocation(int index) { AxisLocation result = null; if (index < this.rangeAxisLocations.size()) { result = (AxisLocation) this.rangeAxisLocations.get(index); } if (result == null) { result = AxisLocation.getOpposite(getRangeAxisLocation());"
      },
      {
        "txt": "} return result; } public void setRangeAxisLocation(int index, AxisLocation location) { setRangeAxisLocation(index, location, true); } public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) { throw new IllegalArgumentException("
      },
      {
        "txt": "\"Null 'location' for index 0 not permitted.\"); } this.rangeAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getRangeAxisEdge(int index) { AxisLocation location = getRangeAxisLocation(index); RectangleEdge result = Plot.resolveRangeAxisLocation(location,"
      },
      {
        "txt": "this.orientation); if (result == null) { result = RectangleEdge.opposite(getRangeAxisEdge()); } return result; } public XYDataset getDataset() { return getDataset(0); } public XYDataset getDataset(int index) {"
      },
      {
        "txt": "XYDataset result = null; if (this.datasets.size() > index) { result = (XYDataset) this.datasets.get(index); } return result; } public void setDataset(XYDataset dataset) { setDataset(0, dataset); } public void setDataset(int index, XYDataset dataset) {"
      },
      {
        "txt": "XYDataset existing = getDataset(index); if (existing != null) { existing.removeChangeListener(this); } this.datasets.set(index, dataset); if (dataset != null) { dataset.addChangeListener(this); } DatasetChangeEvent event = new DatasetChangeEvent(this, dataset); datasetChanged(event);"
      },
      {
        "txt": "} public int getDatasetCount() { return this.datasets.size(); } public int indexOf(XYDataset dataset) { int result = -1; for (int i = 0; i < this.datasets.size(); i++) { if (dataset == this.datasets.get(i)) { result = i; break;"
      },
      {
        "txt": "} } return result; } public void mapDatasetToDomainAxis(int index, int axisIndex) { this.datasetToDomainAxisMap.put(new Integer(index), new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index))); } public void mapDatasetToRangeAxis(int index, int axisIndex) {"
      },
      {
        "txt": "this.datasetToRangeAxisMap.put(new Integer(index), new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index))); } public XYItemRenderer getRenderer() { return getRenderer(0); } public XYItemRenderer getRenderer(int index) { XYItemRenderer result = null; if (this.renderers.size() > index) {"
      },
      {
        "txt": "result = (XYItemRenderer) this.renderers.get(index); } return result; } public void setRenderer(XYItemRenderer renderer) { setRenderer(0, renderer); } public void setRenderer(int index, XYItemRenderer renderer) { setRenderer(index, renderer, true); }"
      },
      {
        "txt": "public void setRenderer(int index, XYItemRenderer renderer, boolean notify) { XYItemRenderer existing = getRenderer(index); if (existing != null) { existing.removeChangeListener(this); } this.renderers.set(index, renderer); if (renderer != null) { renderer.setPlot(this); renderer.addChangeListener(this);"
      },
      {
        "txt": "} configureDomainAxes(); configureRangeAxes(); if (notify) { fireChangeEvent(); } } public void setRenderers(XYItemRenderer[] renderers) { for (int i = 0; i < renderers.length; i++) { setRenderer(i, renderers[i], false);"
      },
      {
        "txt": "} fireChangeEvent(); } public DatasetRenderingOrder getDatasetRenderingOrder() { return this.datasetRenderingOrder; } public void setDatasetRenderingOrder(DatasetRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); }"
      },
      {
        "txt": "this.datasetRenderingOrder = order; fireChangeEvent(); } public SeriesRenderingOrder getSeriesRenderingOrder() { return this.seriesRenderingOrder; } public void setSeriesRenderingOrder(SeriesRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); }"
      },
      {
        "txt": "this.seriesRenderingOrder = order; fireChangeEvent(); } public int getIndexOf(XYItemRenderer renderer) { return this.renderers.indexOf(renderer); } public XYItemRenderer getRendererForDataset(XYDataset dataset) { XYItemRenderer result = null; for (int i = 0; i < this.datasets.size(); i++) { if (this.datasets.get(i) == dataset) {"
      },
      {
        "txt": "result = (XYItemRenderer) this.renderers.get(i); if (result == null) { result = getRenderer(); } break; } } return result; } public int getWeight() {"
      },
      {
        "txt": "return this.weight; } public void setWeight(int weight) { this.weight = weight; fireChangeEvent(); } public boolean isDomainGridlinesVisible() { return this.domainGridlinesVisible; } public void setDomainGridlinesVisible(boolean visible) {"
      },
      {
        "txt": "if (this.domainGridlinesVisible != visible) { this.domainGridlinesVisible = visible; fireChangeEvent(); } } public Stroke getDomainGridlineStroke() { return this.domainGridlineStroke; } public void setDomainGridlineStroke(Stroke stroke) { if (stroke == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.domainGridlineStroke = stroke; fireChangeEvent(); } public Paint getDomainGridlinePaint() { return this.domainGridlinePaint; } public void setDomainGridlinePaint(Paint paint) { if (paint == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainGridlinePaint = paint; fireChangeEvent(); } public boolean isRangeGridlinesVisible() { return this.rangeGridlinesVisible; } public void setRangeGridlinesVisible(boolean visible) { if (this.rangeGridlinesVisible != visible) {"
      },
      {
        "txt": "this.rangeGridlinesVisible = visible; fireChangeEvent(); } } public Stroke getRangeGridlineStroke() { return this.rangeGridlineStroke; } public void setRangeGridlineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\");"
      },
      {
        "txt": "} this.rangeGridlineStroke = stroke; fireChangeEvent(); } public Paint getRangeGridlinePaint() { return this.rangeGridlinePaint; } public void setRangeGridlinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\");"
      },
      {
        "txt": "} this.rangeGridlinePaint = paint; fireChangeEvent(); } public boolean isDomainZeroBaselineVisible() { return this.domainZeroBaselineVisible; } public void setDomainZeroBaselineVisible(boolean visible) { this.domainZeroBaselineVisible = visible; fireChangeEvent();"
      },
      {
        "txt": "} public Stroke getDomainZeroBaselineStroke() { return this.domainZeroBaselineStroke; } public void setDomainZeroBaselineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.domainZeroBaselineStroke = stroke; fireChangeEvent();"
      },
      {
        "txt": "} public Paint getDomainZeroBaselinePaint() { return this.domainZeroBaselinePaint; } public void setDomainZeroBaselinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainZeroBaselinePaint = paint; fireChangeEvent();"
      },
      {
        "txt": "} public boolean isRangeZeroBaselineVisible() { return this.rangeZeroBaselineVisible; } public void setRangeZeroBaselineVisible(boolean visible) { this.rangeZeroBaselineVisible = visible; fireChangeEvent(); } public Stroke getRangeZeroBaselineStroke() { return this.rangeZeroBaselineStroke;"
      },
      {
        "txt": "} public void setRangeZeroBaselineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeZeroBaselineStroke = stroke; fireChangeEvent(); } public Paint getRangeZeroBaselinePaint() { return this.rangeZeroBaselinePaint;"
      },
      {
        "txt": "} public void setRangeZeroBaselinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeZeroBaselinePaint = paint; fireChangeEvent(); } public Paint getDomainTickBandPaint() { return this.domainTickBandPaint;"
      },
      {
        "txt": "} public void setDomainTickBandPaint(Paint paint) { this.domainTickBandPaint = paint; fireChangeEvent(); } public Paint getRangeTickBandPaint() { return this.rangeTickBandPaint; } public void setRangeTickBandPaint(Paint paint) { this.rangeTickBandPaint = paint;"
      },
      {
        "txt": "fireChangeEvent(); } public Point2D getQuadrantOrigin() { return this.quadrantOrigin; } public void setQuadrantOrigin(Point2D origin) { if (origin == null) { throw new IllegalArgumentException(\"Null 'origin' argument.\"); } this.quadrantOrigin = origin;"
      },
      {
        "txt": "fireChangeEvent(); } public Paint getQuadrantPaint(int index) { if (index < 0 || index > 3) { throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\"); } return this.quadrantPaint[index]; } public void setQuadrantPaint(int index, Paint paint) {"
      },
      {
        "txt": "if (index < 0 || index > 3) { throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\"); } this.quadrantPaint[index] = paint; fireChangeEvent(); } public void addDomainMarker(Marker marker) { addDomainMarker(marker, Layer.FOREGROUND); }"
      },
      {
        "txt": "public void addDomainMarker(Marker marker, Layer layer) { addDomainMarker(0, marker, layer); } public void clearDomainMarkers() { if (this.backgroundDomainMarkers != null) { Set keys = this.backgroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue());"
      },
      {
        "txt": "} this.backgroundDomainMarkers.clear(); } if (this.foregroundDomainMarkers != null) { Set keys = this.foregroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); }"
      },
      {
        "txt": "this.foregroundDomainMarkers.clear(); } fireChangeEvent(); } public void clearDomainMarkers(int index) { Integer key = new Integer(index); if (this.backgroundDomainMarkers != null) { Collection markers = (Collection) this.backgroundDomainMarkers.get(key); if (markers != null) {"
      },
      {
        "txt": "Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } } if (this.foregroundRangeMarkers != null) { Collection markers"
      },
      {
        "txt": "= (Collection) this.foregroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } }"
      },
      {
        "txt": "fireChangeEvent(); } public void addDomainMarker(int index, Marker marker, Layer layer) { addDomainMarker(index, marker, layer, true); } public void addDomainMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' not permitted.\"); }"
      },
      {
        "txt": "if (layer == null) { throw new IllegalArgumentException(\"Null 'layer' not permitted.\"); } Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundDomainMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundDomainMarkers.put(new Integer(index), markers);"
      },
      {
        "txt": "} markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundDomainMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundDomainMarkers.put(new Integer(index), markers); }"
      },
      {
        "txt": "markers.add(marker); } marker.addChangeListener(this); if (notify) { fireChangeEvent(); } } public boolean removeDomainMarker(Marker marker) { return removeDomainMarker(marker, Layer.FOREGROUND); }"
      },
      {
        "txt": "public boolean removeDomainMarker(Marker marker, Layer layer) { return removeDomainMarker(0, marker, layer); } public boolean removeDomainMarker(int index, Marker marker, Layer layer) { return removeDomainMarker(index, marker, layer, true); } public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) {"
      },
      {
        "txt": "index)); } else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } <extra_id_0> if (removed && notify) { fireChangeEvent(); } return removed; } public void addRangeMarker(Marker marker) {"
      },
      {
        "txt": "} public void addRangeMarker(Marker marker) { addRangeMarker(marker, Layer.FOREGROUND); } public void addRangeMarker(Marker marker, Layer layer) { addRangeMarker(0, marker, layer); } public void clearRangeMarkers() { if (this.backgroundRangeMarkers != null) { Set keys = this.backgroundRangeMarkers.keySet();"
      },
      {
        "txt": "Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.backgroundRangeMarkers.clear(); } if (this.foregroundRangeMarkers != null) { Set keys = this.foregroundRangeMarkers.keySet(); Iterator iterator = keys.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.foregroundRangeMarkers.clear(); } fireChangeEvent(); } public void addRangeMarker(int index, Marker marker, Layer layer) { addRangeMarker(index, marker, layer, true);"
      },
      {
        "txt": "} public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) { Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundRangeMarkers.put(new Integer(index), markers);"
      },
      {
        "txt": "} markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundRangeMarkers.put(new Integer(index), markers); }"
      },
      {
        "txt": "markers.add(marker); } marker.addChangeListener(this); if (notify) { fireChangeEvent(); } } public void clearRangeMarkers(int index) { Integer key = new Integer(index); if (this.backgroundRangeMarkers != null) {"
      },
      {
        "txt": "Collection markers = (Collection) this.backgroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); }"
      },
      {
        "txt": "} if (this.foregroundRangeMarkers != null) { Collection markers = (Collection) this.foregroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); }"
      },
      {
        "txt": "markers.clear(); } } fireChangeEvent(); } public boolean removeRangeMarker(Marker marker) { return removeRangeMarker(marker, Layer.FOREGROUND); } public boolean removeRangeMarker(Marker marker, Layer layer) { return removeRangeMarker(0, marker, layer);"
      },
      {
        "txt": "} public boolean removeRangeMarker(int index, Marker marker, Layer layer) { return removeRangeMarker(index, marker, layer, true); } public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' argument.\"); } ArrayList markers;"
      },
      {
        "txt": "if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundRangeMarkers.get(new Integer( index)); } else { markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } boolean removed = markers.remove(marker); if (removed && notify) {"
      },
      {
        "txt": "fireChangeEvent(); } return removed; } public void addAnnotation(XYAnnotation annotation) { addAnnotation(annotation, true); } public void addAnnotation(XYAnnotation annotation, boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\");"
      },
      {
        "txt": "} this.annotations.add(annotation); if (notify) { fireChangeEvent(); } } public boolean removeAnnotation(XYAnnotation annotation) { return removeAnnotation(annotation, true); } public boolean removeAnnotation(XYAnnotation annotation, boolean notify) {"
      },
      {
        "txt": "if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\"); } boolean removed = this.annotations.remove(annotation); if (removed && notify) { fireChangeEvent(); } return removed; } public List getAnnotations() {"
      },
      {
        "txt": "return new ArrayList(this.annotations); } public void clearAnnotations() { this.annotations.clear(); fireChangeEvent(); } protected AxisSpace calculateAxisSpace(Graphics2D g2, Rectangle2D plotArea) { AxisSpace space = new AxisSpace(); space = calculateDomainAxisSpace(g2, plotArea, space);"
      },
      {
        "txt": "space = calculateRangeAxisSpace(g2, plotArea, space); return space; } protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); } if (this.fixedDomainAxisSpace != null) {"
      },
      {
        "txt": "if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP); space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(),"
      },
      {
        "txt": "RectangleEdge.BOTTOM); } } else { for (int i = 0; i < this.domainAxes.size(); i++) { Axis axis = (Axis) this.domainAxes.get(i); if (axis != null) { RectangleEdge edge = getDomainAxisEdge(i); space = axis.reserveSpace(g2, this, plotArea, edge, space); }"
      },
      {
        "txt": "} } return space; } protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); }"
      },
      {
        "txt": "if (this.fixedRangeAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(), RectangleEdge.TOP); space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT);"
      },
      {
        "txt": "space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT); } } else { for (int i = 0; i < this.rangeAxes.size(); i++) { Axis axis = (Axis) this.rangeAxes.get(i); if (axis != null) { RectangleEdge edge = getRangeAxisEdge(i); space = axis.reserveSpace(g2, this, plotArea, edge, space);"
      },
      {
        "txt": "} } } return space; } public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) {"
      },
      {
        "txt": "boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); if (b1 || b2) { return; } if (info != null) { info.setPlotArea(area); } RectangleInsets insets = getInsets(); insets.trim(area);"
      },
      {
        "txt": "AxisSpace space = calculateAxisSpace(g2, area); Rectangle2D dataArea = space.shrink(area, null); this.axisOffset.trim(dataArea); if (info != null) { info.setDataArea(dataArea); } drawBackground(g2, dataArea); Map axisStateMap = drawAxes(g2, area, dataArea, info); PlotOrientation orient = getOrientation(); if (anchor != null && !dataArea.contains(anchor)) {"
      },
      {
        "txt": "anchor = null; } CrosshairState crosshairState = new CrosshairState(); crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY); crosshairState.setAnchor(anchor); crosshairState.setAnchorX(Double.NaN); crosshairState.setAnchorY(Double.NaN); if (anchor != null) { ValueAxis domainAxis = getDomainAxis(); if (domainAxis != null) {"
      },
      {
        "txt": "double x; if (orient == PlotOrientation.VERTICAL) { x = domainAxis.java2DToValue(anchor.getX(), dataArea, getDomainAxisEdge()); } else { x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge()); } crosshairState.setAnchorX(x);"
      },
      {
        "txt": "} ValueAxis rangeAxis = getRangeAxis(); if (rangeAxis != null) { double y; if (orient == PlotOrientation.VERTICAL) { y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge()); } else { y = rangeAxis.java2DToValue(anchor.getX(), dataArea,"
      },
      {
        "txt": "getRangeAxisEdge()); } crosshairState.setAnchorY(y); } } crosshairState.setCrosshairX(getDomainCrosshairValue()); crosshairState.setCrosshairY(getRangeCrosshairValue()); Shape originalClip = g2.getClip(); Composite originalComposite = g2.getComposite(); g2.clip(dataArea);"
      },
      {
        "txt": "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); AxisState domainAxisState = (AxisState) axisStateMap.get( getDomainAxis()); if (domainAxisState == null) { if (parentState != null) { domainAxisState = (AxisState) parentState.getSharedAxisStates() .get(getDomainAxis()); } }"
      },
      {
        "txt": "AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis()); if (rangeAxisState == null) { if (parentState != null) { rangeAxisState = (AxisState) parentState.getSharedAxisStates() .get(getRangeAxis()); } } if (domainAxisState != null) { drawDomainTickBands(g2, dataArea, domainAxisState.getTicks()); }"
      },
      {
        "txt": "if (rangeAxisState != null) { drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks()); } if (domainAxisState != null) { drawDomainGridlines(g2, dataArea, domainAxisState.getTicks()); drawZeroDomainBaseline(g2, dataArea); } if (rangeAxisState != null) { drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); drawZeroRangeBaseline(g2, dataArea);"
      },
      {
        "txt": "} for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND); } for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND); } boolean foundData = false; DatasetRenderingOrder order = getDatasetRenderingOrder(); if (order == DatasetRenderingOrder.FORWARD) {"
      },
      {
        "txt": "int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { XYItemRenderer r = getRenderer(i); if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); } }"
      },
      {
        "txt": "for (int i = 0; i < getDatasetCount(); i++) { foundData = render(g2, dataArea, i, info, crosshairState) || foundData; } for (int i = 0; i < rendererCount; i++) { XYItemRenderer r = getRenderer(i); if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis,"
      },
      {
        "txt": "Layer.FOREGROUND, info); } } } else if (order == DatasetRenderingOrder.REVERSE) { int rendererCount = this.renderers.size(); for (int i = rendererCount - 1; i >= 0; i--) { XYItemRenderer r = getRenderer(i); if (i >= getDatasetCount()) { // we need the dataset to make continue; // a link to the axes"
      },
      {
        "txt": "} if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); } } for (int i = getDatasetCount() - 1; i >= 0; i--) { foundData = render(g2, dataArea, i, info, crosshairState)"
      },
      {
        "txt": "|| foundData; } for (int i = rendererCount - 1; i >= 0; i--) { XYItemRenderer r = getRenderer(i); if (i >= getDatasetCount()) { // we need the dataset to make continue; // a link to the axes } if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i);"
      },
      {
        "txt": "r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info); } } } int xAxisIndex = crosshairState.getDomainAxisIndex(); ValueAxis xAxis = getDomainAxis(xAxisIndex); RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex); if (!this.domainCrosshairLockedOnData && anchor != null) { double xx;"
      },
      {
        "txt": "if (orient == PlotOrientation.VERTICAL) { xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge); } else { xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge); } crosshairState.setCrosshairX(xx); } setDomainCrosshairValue(crosshairState.getCrosshairX(), false); if (isDomainCrosshairVisible()) {"
      },
      {
        "txt": "double x = getDomainCrosshairValue(); Paint paint = getDomainCrosshairPaint(); Stroke stroke = getDomainCrosshairStroke(); drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint); } int yAxisIndex = crosshairState.getRangeAxisIndex(); ValueAxis yAxis = getRangeAxis(yAxisIndex); RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex); if (!this.rangeCrosshairLockedOnData && anchor != null) { double yy;"
      },
      {
        "txt": "if (orient == PlotOrientation.VERTICAL) { yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge); } else { yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge); } crosshairState.setCrosshairY(yy); } setRangeCrosshairValue(crosshairState.getCrosshairY(), false); if (isRangeCrosshairVisible()) { double y = getRangeCrosshairValue();"
      },
      {
        "txt": "Paint paint = getRangeCrosshairPaint(); Stroke stroke = getRangeCrosshairStroke(); drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint); } if (!foundData) { drawNoDataMessage(g2, dataArea); } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND); }"
      },
      {
        "txt": "for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND); } drawAnnotations(g2, dataArea, info); g2.setClip(originalClip); g2.setComposite(originalComposite); drawOutline(g2, dataArea); } public void drawBackground(Graphics2D g2, Rectangle2D area) { fillBackground(g2, area, this.orientation);"
      },
      {
        "txt": "drawQuadrants(g2, area); drawBackgroundImage(g2, area); } protected void drawQuadrants(Graphics2D g2, Rectangle2D area) { boolean somethingToDraw = false; ValueAxis xAxis = getDomainAxis(); double x = xAxis.getRange().constrain(this.quadrantOrigin.getX()); double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge()); ValueAxis yAxis = getRangeAxis(); double y = yAxis.getRange().constrain(this.quadrantOrigin.getY());"
      },
      {
        "txt": "double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge()); double xmin = xAxis.getLowerBound(); double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge()); double xmax = xAxis.getUpperBound(); double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge()); double ymin = yAxis.getLowerBound(); double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge()); double ymax = yAxis.getUpperBound(); double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge()); Rectangle2D[] r = new Rectangle2D[] {null, null, null, null};"
      },
      {
        "txt": "if (this.quadrantPaint[0] != null) { if (x > xmin && y < ymax) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[0] = new Rectangle2D.Double(Math.min(yymax, yy), Math.min(xxmin, xx), Math.abs(yy - yymax), Math.abs(xx - xxmin) ); } else { // PlotOrientation.VERTICAL r[0] = new Rectangle2D.Double(Math.min(xxmin, xx),"
      },
      {
        "txt": "Math.min(yymax, yy), Math.abs(xx - xxmin), Math.abs(yy - yymax)); } somethingToDraw = true; } } if (this.quadrantPaint[1] != null) { if (x < xmax && y < ymax) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[1] = new Rectangle2D.Double(Math.min(yymax, yy),"
      },
      {
        "txt": "Math.min(xxmax, xx), Math.abs(yy - yymax), Math.abs(xx - xxmax)); } else { // PlotOrientation.VERTICAL r[1] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymax, yy), Math.abs(xx - xxmax), Math.abs(yy - yymax)); } somethingToDraw = true; }"
      },
      {
        "txt": "} if (this.quadrantPaint[2] != null) { if (x > xmin && y > ymin) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[2] = new Rectangle2D.Double(Math.min(yymin, yy), Math.min(xxmin, xx), Math.abs(yy - yymin), Math.abs(xx - xxmin)); } else { // PlotOrientation.VERTICAL r[2] = new Rectangle2D.Double(Math.min(xxmin, xx),"
      },
      {
        "txt": "Math.min(yymin, yy), Math.abs(xx - xxmin), Math.abs(yy - yymin)); } somethingToDraw = true; } } if (this.quadrantPaint[3] != null) { if (x < xmax && y > ymin) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[3] = new Rectangle2D.Double(Math.min(yymin, yy),"
      },
      {
        "txt": "Math.min(xxmax, xx), Math.abs(yy - yymin), Math.abs(xx - xxmax)); } else { // PlotOrientation.VERTICAL r[3] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymin, yy), Math.abs(xx - xxmax), Math.abs(yy - yymin)); } somethingToDraw = true; }"
      },
      {
        "txt": "} if (somethingToDraw) { Composite originalComposite = g2.getComposite(); g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getBackgroundAlpha())); for (int i = 0; i < 4; i++) { if (this.quadrantPaint[i] != null && r[i] != null) { g2.setPaint(this.quadrantPaint[i]); g2.fill(r[i]); }"
      },
      {
        "txt": "} g2.setComposite(originalComposite); } } public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) { Paint bandPaint = getDomainTickBandPaint(); if (bandPaint != null) { boolean fillBand = false; ValueAxis xAxis = getDomainAxis();"
      },
      {
        "txt": "double previous = xAxis.getLowerBound(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); double current = tick.getValue(); if (fillBand) { getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current); } previous = current;"
      },
      {
        "txt": "fillBand = !fillBand; } double end = xAxis.getUpperBound(); if (fillBand) { getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end); } } } public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "List ticks) { Paint bandPaint = getRangeTickBandPaint(); if (bandPaint != null) { boolean fillBand = false; ValueAxis axis = getRangeAxis(); double previous = axis.getLowerBound(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); double current = tick.getValue();"
      },
      {
        "txt": "if (fillBand) { getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current); } previous = current; fillBand = !fillBand; } double end = axis.getUpperBound(); if (fillBand) { getRenderer().fillRangeGridBand(g2, this, axis, dataArea,"
      },
      {
        "txt": "previous, end); } } } protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, PlotRenderingInfo plotState) { AxisCollection axisCollection = new AxisCollection(); for (int index = 0; index < this.domainAxes.size(); index++) {"
      },
      {
        "txt": "ValueAxis axis = (ValueAxis) this.domainAxes.get(index); if (axis != null) { axisCollection.add(axis, getDomainAxisEdge(index)); } } for (int index = 0; index < this.rangeAxes.size(); index++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index); if (yAxis != null) { axisCollection.add(yAxis, getRangeAxisEdge(index)); }"
      },
      {
        "txt": "} Map axisStateMap = new HashMap(); double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset( dataArea.getHeight()); Iterator iterator = axisCollection.getAxesAtTop().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.TOP, plotState); cursor = info.getCursor();"
      },
      {
        "txt": "axisStateMap.put(axis, info); } cursor = dataArea.getMaxY() + this.axisOffset.calculateBottomOutset(dataArea.getHeight()); iterator = axisCollection.getAxesAtBottom().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.BOTTOM, plotState); cursor = info.getCursor();"
      },
      {
        "txt": "axisStateMap.put(axis, info); } cursor = dataArea.getMinX() - this.axisOffset.calculateLeftOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtLeft().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.LEFT, plotState); cursor = info.getCursor();"
      },
      {
        "txt": "axisStateMap.put(axis, info); } cursor = dataArea.getMaxX() + this.axisOffset.calculateRightOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtRight().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.RIGHT, plotState); cursor = info.getCursor();"
      },
      {
        "txt": "axisStateMap.put(axis, info); } return axisStateMap; } public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info, CrosshairState crosshairState) { boolean foundData = false;"
      },
      {
        "txt": "XYDataset dataset = getDataset(index); if (!DatasetUtilities.isEmptyOrNull(dataset)) { foundData = true; ValueAxis xAxis = getDomainAxisForDataset(index); ValueAxis yAxis = getRangeAxisForDataset(index); XYItemRenderer renderer = getRenderer(index); if (renderer == null) { renderer = getRenderer(); if (renderer == null) { // no default renderer available return foundData;"
      },
      {
        "txt": "} } XYItemRendererState state = renderer.initialise(g2, dataArea, this, dataset, info); int passCount = renderer.getPassCount(); SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder(); if (seriesOrder == SeriesRenderingOrder.REVERSE) { for (int pass = 0; pass < passCount; pass++) { int seriesCount = dataset.getSeriesCount(); for (int series = seriesCount - 1; series >= 0; series--) {"
      },
      {
        "txt": "int firstItem = 0; int lastItem = dataset.getItemCount(series) - 1; if (lastItem == -1) { continue; } if (state.getProcessVisibleItemsOnly()) { int[] itemBounds = RendererUtilities.findLiveItems( dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound()); firstItem = itemBounds[0];"
      },
      {
        "txt": "lastItem = itemBounds[1]; } for (int item = firstItem; item <= lastItem; item++) { renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass); } } } }"
      },
      {
        "txt": "else { for (int pass = 0; pass < passCount; pass++) { int seriesCount = dataset.getSeriesCount(); for (int series = 0; series < seriesCount; series++) { int firstItem = 0; int lastItem = dataset.getItemCount(series) - 1; if (state.getProcessVisibleItemsOnly()) { int[] itemBounds = RendererUtilities.findLiveItems( dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound());"
      },
      {
        "txt": "firstItem = itemBounds[0]; lastItem = itemBounds[1]; } for (int item = firstItem; item <= lastItem; item++) { renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass); } } }"
      },
      {
        "txt": "} } return foundData; } public ValueAxis getDomainAxisForDataset(int index) { if (index < 0 || index >= getDatasetCount()) { throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\"); } ValueAxis valueAxis = null;"
      },
      {
        "txt": "Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get( new Integer(index)); if (axisIndex != null) { valueAxis = getDomainAxis(axisIndex.intValue()); } else { valueAxis = getDomainAxis(0); } return valueAxis; }"
      },
      {
        "txt": "public ValueAxis getRangeAxisForDataset(int index) { if (index < 0 || index >= getDatasetCount()) { throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\"); } ValueAxis valueAxis = null; Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(new Integer(index)); if (axisIndex != null) { valueAxis = getRangeAxis(axisIndex.intValue());"
      },
      {
        "txt": "} else { valueAxis = getRangeAxis(0); } return valueAxis; } protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { if (getRenderer() == null) { return;"
      },
      {
        "txt": "} if (isDomainGridlinesVisible()) { Stroke gridStroke = getDomainGridlineStroke(); Paint gridPaint = getDomainGridlinePaint(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke); }"
      },
      {
        "txt": "} } protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area, List ticks) { if (getRenderer() == null) { return; } if (isRangeGridlinesVisible()) { Stroke gridStroke = getRangeGridlineStroke(); Paint gridPaint = getRangeGridlinePaint();"
      },
      {
        "txt": "ValueAxis axis = getRangeAxis(); if (axis != null) { Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); if (tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) { getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke); }"
      },
      {
        "txt": "} } } } protected void drawZeroDomainBaseline(Graphics2D g2, Rectangle2D area) { if (isDomainZeroBaselineVisible()) { XYItemRenderer r = getRenderer(); r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke);"
      },
      {
        "txt": "} } protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) { if (isRangeZeroBaselineVisible()) { getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke); } } public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "PlotRenderingInfo info) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) { XYAnnotation annotation = (XYAnnotation) iterator.next(); ValueAxis xAxis = getDomainAxis(); ValueAxis yAxis = getRangeAxis(); annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info); } } protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "int index, Layer layer) { XYItemRenderer r = getRenderer(index); if (r == null) { return; } if (index >= getDatasetCount()) { return; } Collection markers = getDomainMarkers(index, layer); ValueAxis axis = getDomainAxisForDataset(index);"
      },
      {
        "txt": "if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker marker = (Marker) iterator.next(); r.drawDomainMarker(g2, this, axis, marker, dataArea); } } } protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) {"
      },
      {
        "txt": "XYItemRenderer r = getRenderer(index); if (r == null) { return; } if (index >= getDatasetCount()) { return; } Collection markers = getRangeMarkers(index, layer); ValueAxis axis = getRangeAxisForDataset(index); if (markers != null && axis != null) {"
      },
      {
        "txt": "Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker marker = (Marker) iterator.next(); r.drawRangeMarker(g2, this, axis, marker, dataArea); } } } public Collection getDomainMarkers(Layer layer) { return getDomainMarkers(0, layer); }"
      },
      {
        "txt": "public Collection getRangeMarkers(Layer layer) { return getRangeMarkers(0, layer); } public Collection getDomainMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundDomainMarkers.get(key); } else if (layer == Layer.BACKGROUND) {"
      },
      {
        "txt": "result = (Collection) this.backgroundDomainMarkers.get(key); } if (result != null) { result = Collections.unmodifiableCollection(result); } return result; } public Collection getRangeMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index);"
      },
      {
        "txt": "if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundRangeMarkers.get(key); } else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundRangeMarkers.get(key); } if (result != null) { result = Collections.unmodifiableCollection(result); } return result;"
      },
      {
        "txt": "} protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) { ValueAxis axis = getRangeAxis(); if (getOrientation() == PlotOrientation.HORIZONTAL) { axis = getDomainAxis(); } if (axis.getRange().contains(value)) { double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT);"
      },
      {
        "txt": "Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } } protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) {"
      },
      {
        "txt": "if (axis.getRange().contains(value)) { Line2D line = null; if (orientation == PlotOrientation.VERTICAL) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else { double yy = axis.valueToJava2D(value, dataArea,"
      },
      {
        "txt": "RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } } protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea,"
      },
      {
        "txt": "double value, Stroke stroke, Paint paint) { ValueAxis axis = getDomainAxis(); if (getOrientation() == PlotOrientation.HORIZONTAL) { axis = getRangeAxis(); } if (axis.getRange().contains(value)) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY());"
      },
      {
        "txt": "g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } } protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { if (axis.getRange().contains(value)) { Line2D line = null;"
      },
      {
        "txt": "if (orientation == PlotOrientation.HORIZONTAL) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else { double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy,"
      },
      {
        "txt": "dataArea.getMaxX(), yy); } g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } } public void handleClick(int x, int y, PlotRenderingInfo info) { Rectangle2D dataArea = info.getDataArea(); if (dataArea.contains(x, y)) {"
      },
      {
        "txt": "ValueAxis da = getDomainAxis(); if (da != null) { double hvalue = da.java2DToValue(x, info.getDataArea(), getDomainAxisEdge()); setDomainCrosshairValue(hvalue); } ValueAxis ra = getRangeAxis(); if (ra != null) { double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge());"
      },
      {
        "txt": "setRangeCrosshairValue(vvalue); } } } private List getDatasetsMappedToDomainAxis(Integer axisIndex) { if (axisIndex == null) { throw new IllegalArgumentException(\"Null 'axisIndex' argument.\"); } List result = new ArrayList(); for (int i = 0; i < this.datasets.size(); i++) {"
      },
      {
        "txt": "Integer mappedAxis = (Integer) this.datasetToDomainAxisMap.get( new Integer(i)); if (mappedAxis == null) { if (axisIndex.equals(ZERO)) { result.add(this.datasets.get(i)); } } else { if (mappedAxis.equals(axisIndex)) { result.add(this.datasets.get(i));"
      },
      {
        "txt": "} } } return result; } private List getDatasetsMappedToRangeAxis(Integer axisIndex) { if (axisIndex == null) { throw new IllegalArgumentException(\"Null 'axisIndex' argument.\"); } List result = new ArrayList();"
      },
      {
        "txt": "for (int i = 0; i < this.datasets.size(); i++) { Integer mappedAxis = (Integer) this.datasetToRangeAxisMap.get( new Integer(i)); if (mappedAxis == null) { if (axisIndex.equals(ZERO)) { result.add(this.datasets.get(i)); } } else { if (mappedAxis.equals(axisIndex)) {"
      },
      {
        "txt": "result.add(this.datasets.get(i)); } } } return result; } public int getDomainAxisIndex(ValueAxis axis) { int result = this.domainAxes.indexOf(axis); if (result < 0) { Plot parent = getParent();"
      },
      {
        "txt": "if (parent instanceof XYPlot) { XYPlot p = (XYPlot) parent; result = p.getDomainAxisIndex(axis); } } return result; } public int getRangeAxisIndex(ValueAxis axis) { int result = this.rangeAxes.indexOf(axis); if (result < 0) {"
      },
      {
        "txt": "Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot p = (XYPlot) parent; result = p.getRangeAxisIndex(axis); } } return result; } public Range getDataRange(ValueAxis axis) { Range result = null;"
      },
      {
        "txt": "List mappedDatasets = new ArrayList(); boolean isDomainAxis = true; int domainIndex = getDomainAxisIndex(axis); if (domainIndex >= 0) { isDomainAxis = true; mappedDatasets.addAll(getDatasetsMappedToDomainAxis( new Integer(domainIndex))); } int rangeIndex = getRangeAxisIndex(axis); if (rangeIndex >= 0) {"
      },
      {
        "txt": "isDomainAxis = false; mappedDatasets.addAll(getDatasetsMappedToRangeAxis( new Integer(rangeIndex))); } Iterator iterator = mappedDatasets.iterator(); while (iterator.hasNext()) { XYDataset d = (XYDataset) iterator.next(); if (d != null) { XYItemRenderer r = getRendererForDataset(d); if (isDomainAxis) {"
      },
      {
        "txt": "if (r != null) { result = Range.combine(result, r.findDomainBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findDomainBounds(d)); } } else { if (r != null) {"
      },
      {
        "txt": "result = Range.combine(result, r.findRangeBounds(d)); } else { result = Range.combine(result, DatasetUtilities.findRangeBounds(d)); } } } } return result;"
      },
      {
        "txt": "} public void datasetChanged(DatasetChangeEvent event) { configureDomainAxes(); configureRangeAxes(); if (getParent() != null) { getParent().datasetChanged(event); } else { PlotChangeEvent e = new PlotChangeEvent(this); e.setType(ChartChangeEventType.DATASET_UPDATED);"
      },
      {
        "txt": "notifyListeners(e); } } public void rendererChanged(RendererChangeEvent event) { fireChangeEvent(); } public boolean isDomainCrosshairVisible() { return this.domainCrosshairVisible; } public void setDomainCrosshairVisible(boolean flag) {"
      },
      {
        "txt": "if (this.domainCrosshairVisible != flag) { this.domainCrosshairVisible = flag; fireChangeEvent(); } } public boolean isDomainCrosshairLockedOnData() { return this.domainCrosshairLockedOnData; } public void setDomainCrosshairLockedOnData(boolean flag) { if (this.domainCrosshairLockedOnData != flag) {"
      },
      {
        "txt": "this.domainCrosshairLockedOnData = flag; fireChangeEvent(); } } public double getDomainCrosshairValue() { return this.domainCrosshairValue; } public void setDomainCrosshairValue(double value) { setDomainCrosshairValue(value, true); }"
      },
      {
        "txt": "public void setDomainCrosshairValue(double value, boolean notify) { this.domainCrosshairValue = value; if (isDomainCrosshairVisible() && notify) { fireChangeEvent(); } } public Stroke getDomainCrosshairStroke() { return this.domainCrosshairStroke; } public void setDomainCrosshairStroke(Stroke stroke) {"
      },
      {
        "txt": "if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.domainCrosshairStroke = stroke; fireChangeEvent(); } public Paint getDomainCrosshairPaint() { return this.domainCrosshairPaint; } public void setDomainCrosshairPaint(Paint paint) {"
      },
      {
        "txt": "if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainCrosshairPaint = paint; fireChangeEvent(); } public boolean isRangeCrosshairVisible() { return this.rangeCrosshairVisible; } public void setRangeCrosshairVisible(boolean flag) {"
      },
      {
        "txt": "if (this.rangeCrosshairVisible != flag) { this.rangeCrosshairVisible = flag; fireChangeEvent(); } } public boolean isRangeCrosshairLockedOnData() { return this.rangeCrosshairLockedOnData; } public void setRangeCrosshairLockedOnData(boolean flag) { if (this.rangeCrosshairLockedOnData != flag) {"
      },
      {
        "txt": "this.rangeCrosshairLockedOnData = flag; fireChangeEvent(); } } public double getRangeCrosshairValue() { return this.rangeCrosshairValue; } public void setRangeCrosshairValue(double value) { setRangeCrosshairValue(value, true); }"
      },
      {
        "txt": "public void setRangeCrosshairValue(double value, boolean notify) { this.rangeCrosshairValue = value; if (isRangeCrosshairVisible() && notify) { fireChangeEvent(); } } public Stroke getRangeCrosshairStroke() { return this.rangeCrosshairStroke; } public void setRangeCrosshairStroke(Stroke stroke) {"
      },
      {
        "txt": "if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeCrosshairStroke = stroke; fireChangeEvent(); } public Paint getRangeCrosshairPaint() { return this.rangeCrosshairPaint; } public void setRangeCrosshairPaint(Paint paint) {"
      },
      {
        "txt": "if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeCrosshairPaint = paint; fireChangeEvent(); } public AxisSpace getFixedDomainAxisSpace() { return this.fixedDomainAxisSpace; } public void setFixedDomainAxisSpace(AxisSpace space) {"
      },
      {
        "txt": "setFixedDomainAxisSpace(space, true); } public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) { this.fixedDomainAxisSpace = space; if (notify) { fireChangeEvent(); } } public AxisSpace getFixedRangeAxisSpace() { return this.fixedRangeAxisSpace;"
      },
      {
        "txt": "} public void setFixedRangeAxisSpace(AxisSpace space) { setFixedRangeAxisSpace(space, true); } public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) { this.fixedRangeAxisSpace = space; if (notify) { fireChangeEvent(); } }"
      },
      {
        "txt": "public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source) { zoomDomainAxes(factor, info, source, false); } public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); if (domainAxis != null) { if (useAnchor) {"
      },
      {
        "txt": "double sourceX = source.getX(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceX = source.getY(); } double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge()); domainAxis.resizeRange(factor, anchorX); } else { domainAxis.resizeRange(factor);"
      },
      {
        "txt": "} } } } public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); if (domainAxis != null) { domainAxis.zoomRange(lowerPercent, upperPercent);"
      },
      {
        "txt": "} } } public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) { zoomRangeAxes(factor, info, source, false); } public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.rangeAxes.size(); i++) {"
      },
      {
        "txt": "ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { if (useAnchor) { double sourceY = source.getY(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceY = source.getX(); } double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge()); rangeAxis.resizeRange(factor, anchorY);"
      },
      {
        "txt": "} else { rangeAxis.resizeRange(factor); } } } } public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { for (int i = 0; i < this.rangeAxes.size(); i++) {"
      },
      {
        "txt": "ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { rangeAxis.zoomRange(lowerPercent, upperPercent); } } } public boolean isDomainZoomable() { return true; } public boolean isRangeZoomable() {"
      },
      {
        "txt": "return true; } public int getSeriesCount() { int result = 0; XYDataset dataset = getDataset(); if (dataset != null) { result = dataset.getSeriesCount(); } return result; }"
      },
      {
        "txt": "public LegendItemCollection getFixedLegendItems() { return this.fixedLegendItems; } public void setFixedLegendItems(LegendItemCollection items) { this.fixedLegendItems = items; fireChangeEvent(); } public LegendItemCollection getLegendItems() { if (this.fixedLegendItems != null) { return this.fixedLegendItems;"
      },
      {
        "txt": "} LegendItemCollection result = new LegendItemCollection(); int count = this.datasets.size(); for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) { XYDataset dataset = getDataset(datasetIndex); if (dataset != null) { XYItemRenderer renderer = getRenderer(datasetIndex); if (renderer == null) { renderer = getRenderer(0); }"
      },
      {
        "txt": "if (renderer != null) { int seriesCount = dataset.getSeriesCount(); for (int i = 0; i < seriesCount; i++) { if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) { LegendItem item = renderer.getLegendItem( datasetIndex, i); if (item != null) { result.add(item); }"
      },
      {
        "txt": "} } } } } return result; } public boolean equals(Object obj) { if (obj == this) { return true;"
      },
      {
        "txt": "} if (!(obj instanceof XYPlot)) { return false; } XYPlot that = (XYPlot) obj; if (this.weight != that.weight) { return false; } if (this.orientation != that.orientation) { return false;"
      },
      {
        "txt": "} if (!this.domainAxes.equals(that.domainAxes)) { return false; } if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false;"
      },
      {
        "txt": "} if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false; } if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false; } if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) { return false; }"
      },
      {
        "txt": "if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) { return false; } if (this.domainCrosshairVisible != that.domainCrosshairVisible) { return false; } if (this.domainCrosshairValue != that.domainCrosshairValue) { return false; } if (this.domainCrosshairLockedOnData"
      },
      {
        "txt": "!= that.domainCrosshairLockedOnData) { return false; } if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) { return false; } if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) { return false; } if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) { return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) { return false; } if (!ObjectUtilities.equal(this.domainGridlineStroke,"
      },
      {
        "txt": "that.domainGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false;"
      },
      {
        "txt": "} if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) { return false; } if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.domainZeroBaselineStroke,"
      },
      {
        "txt": "that.domainZeroBaselineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) { return false; } if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke,"
      },
      {
        "txt": "that.rangeCrosshairStroke)) { return false; } if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers,"
      },
      {
        "txt": "that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { return false;"
      },
      {
        "txt": "} if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) {"
      },
      {
        "txt": "return false; } if (!PaintUtilities.equal(this.domainTickBandPaint, that.domainTickBandPaint)) { return false; } if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) { return false; }"
      },
      {
        "txt": "if (!this.quadrantOrigin.equals(that.quadrantOrigin)) { return false; } for (int i = 0; i < 4; i++) { if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) { return false; } } return super.equals(obj);"
      },
      {
        "txt": "} public Object clone() throws CloneNotSupportedException { XYPlot clone = (XYPlot) super.clone(); clone.domainAxes = (ObjectList) ObjectUtilities.clone(this.domainAxes); for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i); if (axis != null) { ValueAxis clonedAxis = (ValueAxis) axis.clone(); clone.domainAxes.set(i, clonedAxis); clonedAxis.setPlot(clone);"
      },
      {
        "txt": "clonedAxis.addChangeListener(clone); } } clone.domainAxisLocations = (ObjectList) this.domainAxisLocations.clone(); clone.rangeAxes = (ObjectList) ObjectUtilities.clone(this.rangeAxes); for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { ValueAxis clonedAxis = (ValueAxis) axis.clone();"
      },
      {
        "txt": "clone.rangeAxes.set(i, clonedAxis); clonedAxis.setPlot(clone); clonedAxis.addChangeListener(clone); } } clone.rangeAxisLocations = (ObjectList) ObjectUtilities.clone( this.rangeAxisLocations); clone.datasets = (ObjectList) ObjectUtilities.clone(this.datasets); for (int i = 0; i < clone.datasets.size(); ++i) { XYDataset d = getDataset(i);"
      },
      {
        "txt": "if (d != null) { d.addChangeListener(clone); } } clone.datasetToDomainAxisMap = new TreeMap(); clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap); clone.datasetToRangeAxisMap = new TreeMap(); clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap); clone.renderers = (ObjectList) ObjectUtilities.clone(this.renderers); for (int i = 0; i < this.renderers.size(); i++) {"
      },
      {
        "txt": "XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i); if (renderer2 instanceof PublicCloneable) { PublicCloneable pc = (PublicCloneable) renderer2; clone.renderers.set(i, pc.clone()); } } clone.foregroundDomainMarkers = (Map) ObjectUtilities.clone( this.foregroundDomainMarkers); clone.backgroundDomainMarkers = (Map) ObjectUtilities.clone( this.backgroundDomainMarkers);"
      },
      {
        "txt": "clone.foregroundRangeMarkers = (Map) ObjectUtilities.clone( this.foregroundRangeMarkers); clone.backgroundRangeMarkers = (Map) ObjectUtilities.clone( this.backgroundRangeMarkers); clone.annotations = (List) ObjectUtilities.deepClone(this.annotations); if (this.fixedDomainAxisSpace != null) { clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedDomainAxisSpace); } if (this.fixedRangeAxisSpace != null) {"
      },
      {
        "txt": "clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedRangeAxisSpace); } clone.quadrantOrigin = (Point2D) ObjectUtilities.clone( this.quadrantOrigin); clone.quadrantPaint = (Paint[]) this.quadrantPaint.clone(); return clone; } private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject();"
      },
      {
        "txt": "SerialUtilities.writeStroke(this.domainGridlineStroke, stream); SerialUtilities.writePaint(this.domainGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeGridlineStroke, stream); SerialUtilities.writePaint(this.rangeGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream); SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream); SerialUtilities.writeStroke(this.domainCrosshairStroke, stream); SerialUtilities.writePaint(this.domainCrosshairPaint, stream); SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream); SerialUtilities.writePaint(this.rangeCrosshairPaint, stream);"
      },
      {
        "txt": "SerialUtilities.writePaint(this.domainTickBandPaint, stream); SerialUtilities.writePaint(this.rangeTickBandPaint, stream); SerialUtilities.writePoint2D(this.quadrantOrigin, stream); for (int i = 0; i < 4; i++) { SerialUtilities.writePaint(this.quadrantPaint[i], stream); } SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream); SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream); } private void readObject(ObjectInputStream stream)"
      },
      {
        "txt": "throws IOException, ClassNotFoundException { stream.defaultReadObject(); this.domainGridlineStroke = SerialUtilities.readStroke(stream); this.domainGridlinePaint = SerialUtilities.readPaint(stream); this.rangeGridlineStroke = SerialUtilities.readStroke(stream); this.rangeGridlinePaint = SerialUtilities.readPaint(stream); this.rangeZeroBaselineStroke = SerialUtilities.readStroke(stream); this.rangeZeroBaselinePaint = SerialUtilities.readPaint(stream); this.domainCrosshairStroke = SerialUtilities.readStroke(stream); this.domainCrosshairPaint = SerialUtilities.readPaint(stream);"
      },
      {
        "txt": "this.rangeCrosshairStroke = SerialUtilities.readStroke(stream); this.rangeCrosshairPaint = SerialUtilities.readPaint(stream); this.domainTickBandPaint = SerialUtilities.readPaint(stream); this.rangeTickBandPaint = SerialUtilities.readPaint(stream); this.quadrantOrigin = SerialUtilities.readPoint2D(stream); this.quadrantPaint = new Paint[4]; for (int i = 0; i < 4; i++) { this.quadrantPaint[i] = SerialUtilities.readPaint(stream); } this.domainZeroBaselineStroke = SerialUtilities.readStroke(stream);"
      },
      {
        "txt": "this.domainZeroBaselinePaint = SerialUtilities.readPaint(stream); int domainAxisCount = this.domainAxes.size(); for (int i = 0; i < domainAxisCount; i++) { Axis axis = (Axis) this.domainAxes.get(i); if (axis != null) { axis.setPlot(this); axis.addChangeListener(this); } } int rangeAxisCount = this.rangeAxes.size();"
      },
      {
        "txt": "for (int i = 0; i < rangeAxisCount; i++) { Axis axis = (Axis) this.rangeAxes.get(i); if (axis != null) { axis.setPlot(this); axis.addChangeListener(this); } } int datasetCount = this.datasets.size(); for (int i = 0; i < datasetCount; i++) { Dataset dataset = (Dataset) this.datasets.get(i);"
      },
      {
        "txt": "if (dataset != null) { dataset.addChangeListener(this); } } int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { XYItemRenderer renderer = (XYItemRenderer) this.renderers.get(i); if (renderer != null) { renderer.addChangeListener(this); }"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 27,
    "file_path": "source/org/jfree/chart/plot/XYPlot.java",
    "start-bug-line": 2529,
    "end-bug-line": 2529,
    "bug": "",
    "fix": "if (markers == null) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.chart.plot; import java.awt.AlphaComposite; import java.awt.BasicStroke; import java.awt.Color; import java.awt.Composite; import java.awt.Graphics2D; import java.awt.Paint; import java.awt.Shape; import java.awt.Stroke; import java.awt.geom.Line2D;"
      },
      {
        "txt": "import java.awt.geom.Point2D; import java.awt.geom.Rectangle2D; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.ResourceBundle; import java.util.Set; import java.util.TreeMap; import org.jfree.chart.LegendItem; import org.jfree.chart.LegendItemCollection; import org.jfree.chart.annotations.XYAnnotation; import org.jfree.chart.axis.Axis;"
      },
      {
        "txt": "import org.jfree.chart.axis.AxisCollection; import org.jfree.chart.axis.AxisLocation; import org.jfree.chart.axis.AxisSpace; import org.jfree.chart.axis.AxisState; import org.jfree.chart.axis.ValueAxis; import org.jfree.chart.axis.ValueTick; import org.jfree.chart.event.ChartChangeEventType; import org.jfree.chart.event.PlotChangeEvent; import org.jfree.chart.event.RendererChangeEvent; import org.jfree.chart.event.RendererChangeListener;"
      },
      {
        "txt": "import org.jfree.chart.renderer.RendererUtilities; import org.jfree.chart.renderer.xy.XYItemRenderer; import org.jfree.chart.renderer.xy.XYItemRendererState; import org.jfree.chart.util.Layer; import org.jfree.chart.util.ObjectList; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PaintUtilities; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.RectangleEdge; import org.jfree.chart.util.RectangleInsets;"
      },
      {
        "txt": "import org.jfree.chart.util.SerialUtilities; import org.jfree.data.Range; import org.jfree.data.general.Dataset; import org.jfree.data.general.DatasetChangeEvent; import org.jfree.data.general.DatasetUtilities; import org.jfree.data.xy.XYDataset; public class XYPlot extends Plot implements ValueAxisPlot, Zoomable, RendererChangeListener, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 7044148245716569264L; public static final Stroke DEFAULT_GRIDLINE_STROKE = new BasicStroke(0.5f,"
      },
      {
        "txt": "BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL, 0.0f, new float[] {2.0f, 2.0f}, 0.0f); public static final Paint DEFAULT_GRIDLINE_PAINT = Color.WHITE; public static final boolean DEFAULT_CROSSHAIR_VISIBLE = false; public static final Stroke DEFAULT_CROSSHAIR_STROKE = DEFAULT_GRIDLINE_STROKE; public static final Paint DEFAULT_CROSSHAIR_PAINT = Color.blue; protected static ResourceBundle localizationResources = ResourceBundle.getBundle( \"org.jfree.chart.plot.LocalizationBundle\");"
      },
      {
        "txt": "private PlotOrientation orientation; private RectangleInsets axisOffset; private ObjectList domainAxes; private ObjectList domainAxisLocations; private ObjectList rangeAxes; private ObjectList rangeAxisLocations; private ObjectList datasets; private ObjectList renderers; private Map datasetToDomainAxisMap; private Map datasetToRangeAxisMap;"
      },
      {
        "txt": "private transient Point2D quadrantOrigin = new Point2D.Double(0.0, 0.0); private transient Paint[] quadrantPaint = new Paint[] {null, null, null, null}; private boolean domainGridlinesVisible; private transient Stroke domainGridlineStroke; private transient Paint domainGridlinePaint; private boolean rangeGridlinesVisible; private transient Stroke rangeGridlineStroke; private transient Paint rangeGridlinePaint; private boolean domainZeroBaselineVisible;"
      },
      {
        "txt": "private transient Stroke domainZeroBaselineStroke; private transient Paint domainZeroBaselinePaint; private boolean rangeZeroBaselineVisible; private transient Stroke rangeZeroBaselineStroke; private transient Paint rangeZeroBaselinePaint; private boolean domainCrosshairVisible; private double domainCrosshairValue; private transient Stroke domainCrosshairStroke; private transient Paint domainCrosshairPaint; private boolean domainCrosshairLockedOnData = true;"
      },
      {
        "txt": "private boolean rangeCrosshairVisible; private double rangeCrosshairValue; private transient Stroke rangeCrosshairStroke; private transient Paint rangeCrosshairPaint; private boolean rangeCrosshairLockedOnData = true; private Map foregroundDomainMarkers; private Map backgroundDomainMarkers; private Map foregroundRangeMarkers; private Map backgroundRangeMarkers; private List annotations;"
      },
      {
        "txt": "private transient Paint domainTickBandPaint; private transient Paint rangeTickBandPaint; private AxisSpace fixedDomainAxisSpace; private AxisSpace fixedRangeAxisSpace; private DatasetRenderingOrder datasetRenderingOrder = DatasetRenderingOrder.REVERSE; private SeriesRenderingOrder seriesRenderingOrder = SeriesRenderingOrder.REVERSE; private int weight; private LegendItemCollection fixedLegendItems;"
      },
      {
        "txt": "public XYPlot() { this(null, null, null, null); } public XYPlot(XYDataset dataset, ValueAxis domainAxis, ValueAxis rangeAxis, XYItemRenderer renderer) { super(); this.orientation = PlotOrientation.VERTICAL; this.weight = 1; // only relevant when this is a subplot"
      },
      {
        "txt": "this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0); this.domainAxes = new ObjectList(); this.domainAxisLocations = new ObjectList(); this.foregroundDomainMarkers = new HashMap(); this.backgroundDomainMarkers = new HashMap(); this.rangeAxes = new ObjectList(); this.rangeAxisLocations = new ObjectList(); this.foregroundRangeMarkers = new HashMap(); this.backgroundRangeMarkers = new HashMap(); this.datasets = new ObjectList();"
      },
      {
        "txt": "this.renderers = new ObjectList(); this.datasetToDomainAxisMap = new TreeMap(); this.datasetToRangeAxisMap = new TreeMap(); this.datasets.set(0, dataset); if (dataset != null) { dataset.addChangeListener(this); } this.renderers.set(0, renderer); if (renderer != null) { renderer.setPlot(this);"
      },
      {
        "txt": "renderer.addChangeListener(this); } this.domainAxes.set(0, domainAxis); this.mapDatasetToDomainAxis(0, 0); if (domainAxis != null) { domainAxis.setPlot(this); domainAxis.addChangeListener(this); } this.domainAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); this.rangeAxes.set(0, rangeAxis);"
      },
      {
        "txt": "this.mapDatasetToRangeAxis(0, 0); if (rangeAxis != null) { rangeAxis.setPlot(this); rangeAxis.addChangeListener(this); } this.rangeAxisLocations.set(0, AxisLocation.BOTTOM_OR_LEFT); configureDomainAxes(); configureRangeAxes(); this.domainGridlinesVisible = true; this.domainGridlineStroke = DEFAULT_GRIDLINE_STROKE;"
      },
      {
        "txt": "this.domainGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.domainZeroBaselineVisible = false; this.domainZeroBaselinePaint = Color.black; this.domainZeroBaselineStroke = new BasicStroke(0.5f); this.rangeGridlinesVisible = true; this.rangeGridlineStroke = DEFAULT_GRIDLINE_STROKE; this.rangeGridlinePaint = DEFAULT_GRIDLINE_PAINT; this.rangeZeroBaselineVisible = false; this.rangeZeroBaselinePaint = Color.black; this.rangeZeroBaselineStroke = new BasicStroke(0.5f);"
      },
      {
        "txt": "this.domainCrosshairVisible = false; this.domainCrosshairValue = 0.0; this.domainCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; this.domainCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.rangeCrosshairVisible = false; this.rangeCrosshairValue = 0.0; this.rangeCrosshairStroke = DEFAULT_CROSSHAIR_STROKE; this.rangeCrosshairPaint = DEFAULT_CROSSHAIR_PAINT; this.annotations = new java.util.ArrayList(); }"
      },
      {
        "txt": "public String getPlotType() { return localizationResources.getString(\"XY_Plot\"); } public PlotOrientation getOrientation() { return this.orientation; } public void setOrientation(PlotOrientation orientation) { if (orientation == null) { throw new IllegalArgumentException(\"Null 'orientation' argument.\"); }"
      },
      {
        "txt": "if (orientation != this.orientation) { this.orientation = orientation; fireChangeEvent(); } } public RectangleInsets getAxisOffset() { return this.axisOffset; } public void setAxisOffset(RectangleInsets offset) { if (offset == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'offset' argument.\"); } this.axisOffset = offset; fireChangeEvent(); } public ValueAxis getDomainAxis() { return getDomainAxis(0); } public ValueAxis getDomainAxis(int index) { ValueAxis result = null;"
      },
      {
        "txt": "if (index < this.domainAxes.size()) { result = (ValueAxis) this.domainAxes.get(index); } if (result == null) { Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot xy = (XYPlot) parent; result = xy.getDomainAxis(index); } }"
      },
      {
        "txt": "return result; } public void setDomainAxis(ValueAxis axis) { setDomainAxis(0, axis); } public void setDomainAxis(int index, ValueAxis axis) { setDomainAxis(index, axis, true); } public void setDomainAxis(int index, ValueAxis axis, boolean notify) { ValueAxis existing = getDomainAxis(index);"
      },
      {
        "txt": "if (existing != null) { existing.removeChangeListener(this); } if (axis != null) { axis.setPlot(this); } this.domainAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this);"
      },
      {
        "txt": "} if (notify) { fireChangeEvent(); } } public void setDomainAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) { setDomainAxis(i, axes[i], false); } fireChangeEvent();"
      },
      {
        "txt": "} public AxisLocation getDomainAxisLocation() { return (AxisLocation) this.domainAxisLocations.get(0); } public void setDomainAxisLocation(AxisLocation location) { setDomainAxisLocation(0, location, true); } public void setDomainAxisLocation(AxisLocation location, boolean notify) { setDomainAxisLocation(0, location, notify); }"
      },
      {
        "txt": "public RectangleEdge getDomainAxisEdge() { return Plot.resolveDomainAxisLocation(getDomainAxisLocation(), this.orientation); } public int getDomainAxisCount() { return this.domainAxes.size(); } public void clearDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i);"
      },
      {
        "txt": "if (axis != null) { axis.removeChangeListener(this); } } this.domainAxes.clear(); fireChangeEvent(); } public void configureDomainAxes() { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i);"
      },
      {
        "txt": "if (axis != null) { axis.configure(); } } } public AxisLocation getDomainAxisLocation(int index) { AxisLocation result = null; if (index < this.domainAxisLocations.size()) { result = (AxisLocation) this.domainAxisLocations.get(index); }"
      },
      {
        "txt": "if (result == null) { result = AxisLocation.getOpposite(getDomainAxisLocation()); } return result; } public void setDomainAxisLocation(int index, AxisLocation location) { setDomainAxisLocation(index, location, true); } public void setDomainAxisLocation(int index, AxisLocation location, boolean notify) {"
      },
      {
        "txt": "if (index == 0 && location == null) { throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\"); } this.domainAxisLocations.set(index, location); if (notify) { fireChangeEvent(); } } public RectangleEdge getDomainAxisEdge(int index) {"
      },
      {
        "txt": "AxisLocation location = getDomainAxisLocation(index); RectangleEdge result = Plot.resolveDomainAxisLocation(location, this.orientation); if (result == null) { result = RectangleEdge.opposite(getDomainAxisEdge()); } return result; } public ValueAxis getRangeAxis() { return getRangeAxis(0);"
      },
      {
        "txt": "} public void setRangeAxis(ValueAxis axis) { if (axis != null) { axis.setPlot(this); } ValueAxis existing = getRangeAxis(); if (existing != null) { existing.removeChangeListener(this); } this.rangeAxes.set(0, axis);"
      },
      {
        "txt": "if (axis != null) { axis.configure(); axis.addChangeListener(this); } fireChangeEvent(); } public AxisLocation getRangeAxisLocation() { return (AxisLocation) this.rangeAxisLocations.get(0); } public void setRangeAxisLocation(AxisLocation location) {"
      },
      {
        "txt": "setRangeAxisLocation(0, location, true); } public void setRangeAxisLocation(AxisLocation location, boolean notify) { setRangeAxisLocation(0, location, notify); } public RectangleEdge getRangeAxisEdge() { return Plot.resolveRangeAxisLocation(getRangeAxisLocation(), this.orientation); } public ValueAxis getRangeAxis(int index) {"
      },
      {
        "txt": "ValueAxis result = null; if (index < this.rangeAxes.size()) { result = (ValueAxis) this.rangeAxes.get(index); } if (result == null) { Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot xy = (XYPlot) parent; result = xy.getRangeAxis(index); }"
      },
      {
        "txt": "} return result; } public void setRangeAxis(int index, ValueAxis axis) { setRangeAxis(index, axis, true); } public void setRangeAxis(int index, ValueAxis axis, boolean notify) { ValueAxis existing = getRangeAxis(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} if (axis != null) { axis.setPlot(this); } this.rangeAxes.set(index, axis); if (axis != null) { axis.configure(); axis.addChangeListener(this); } if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public void setRangeAxes(ValueAxis[] axes) { for (int i = 0; i < axes.length; i++) { setRangeAxis(i, axes[i], false); } fireChangeEvent(); } public int getRangeAxisCount() {"
      },
      {
        "txt": "return this.rangeAxes.size(); } public void clearRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.removeChangeListener(this); } } this.rangeAxes.clear();"
      },
      {
        "txt": "fireChangeEvent(); } public void configureRangeAxes() { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { axis.configure(); } } }"
      },
      {
        "txt": "public AxisLocation getRangeAxisLocation(int index) { AxisLocation result = null; if (index < this.rangeAxisLocations.size()) { result = (AxisLocation) this.rangeAxisLocations.get(index); } if (result == null) { result = AxisLocation.getOpposite(getRangeAxisLocation()); } return result; }"
      },
      {
        "txt": "public void setRangeAxisLocation(int index, AxisLocation location) { setRangeAxisLocation(index, location, true); } public void setRangeAxisLocation(int index, AxisLocation location, boolean notify) { if (index == 0 && location == null) { throw new IllegalArgumentException( \"Null 'location' for index 0 not permitted.\"); } this.rangeAxisLocations.set(index, location);"
      },
      {
        "txt": "if (notify) { fireChangeEvent(); } } public RectangleEdge getRangeAxisEdge(int index) { AxisLocation location = getRangeAxisLocation(index); RectangleEdge result = Plot.resolveRangeAxisLocation(location, this.orientation); if (result == null) { result = RectangleEdge.opposite(getRangeAxisEdge());"
      },
      {
        "txt": "} return result; } public XYDataset getDataset() { return getDataset(0); } public XYDataset getDataset(int index) { XYDataset result = null; if (this.datasets.size() > index) { result = (XYDataset) this.datasets.get(index);"
      },
      {
        "txt": "} return result; } public void setDataset(XYDataset dataset) { setDataset(0, dataset); } public void setDataset(int index, XYDataset dataset) { XYDataset existing = getDataset(index); if (existing != null) { existing.removeChangeListener(this);"
      },
      {
        "txt": "} this.datasets.set(index, dataset); if (dataset != null) { dataset.addChangeListener(this); } DatasetChangeEvent event = new DatasetChangeEvent(this, dataset); datasetChanged(event); } public int getDatasetCount() { return this.datasets.size();"
      },
      {
        "txt": "} public int indexOf(XYDataset dataset) { int result = -1; for (int i = 0; i < this.datasets.size(); i++) { if (dataset == this.datasets.get(i)) { result = i; break; } } return result;"
      },
      {
        "txt": "} public void mapDatasetToDomainAxis(int index, int axisIndex) { this.datasetToDomainAxisMap.put(new Integer(index), new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index))); } public void mapDatasetToRangeAxis(int index, int axisIndex) { this.datasetToRangeAxisMap.put(new Integer(index), new Integer(axisIndex)); datasetChanged(new DatasetChangeEvent(this, getDataset(index)));"
      },
      {
        "txt": "} public XYItemRenderer getRenderer() { return getRenderer(0); } public XYItemRenderer getRenderer(int index) { XYItemRenderer result = null; if (this.renderers.size() > index) { result = (XYItemRenderer) this.renderers.get(index); } return result;"
      },
      {
        "txt": "} public void setRenderer(XYItemRenderer renderer) { setRenderer(0, renderer); } public void setRenderer(int index, XYItemRenderer renderer) { setRenderer(index, renderer, true); } public void setRenderer(int index, XYItemRenderer renderer, boolean notify) { XYItemRenderer existing = getRenderer(index);"
      },
      {
        "txt": "if (existing != null) { existing.removeChangeListener(this); } this.renderers.set(index, renderer); if (renderer != null) { renderer.setPlot(this); renderer.addChangeListener(this); } configureDomainAxes(); configureRangeAxes();"
      },
      {
        "txt": "if (notify) { fireChangeEvent(); } } public void setRenderers(XYItemRenderer[] renderers) { for (int i = 0; i < renderers.length; i++) { setRenderer(i, renderers[i], false); } fireChangeEvent(); }"
      },
      {
        "txt": "public DatasetRenderingOrder getDatasetRenderingOrder() { return this.datasetRenderingOrder; } public void setDatasetRenderingOrder(DatasetRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.datasetRenderingOrder = order; fireChangeEvent(); }"
      },
      {
        "txt": "public SeriesRenderingOrder getSeriesRenderingOrder() { return this.seriesRenderingOrder; } public void setSeriesRenderingOrder(SeriesRenderingOrder order) { if (order == null) { throw new IllegalArgumentException(\"Null 'order' argument.\"); } this.seriesRenderingOrder = order; fireChangeEvent(); }"
      },
      {
        "txt": "public int getIndexOf(XYItemRenderer renderer) { return this.renderers.indexOf(renderer); } public XYItemRenderer getRendererForDataset(XYDataset dataset) { XYItemRenderer result = null; for (int i = 0; i < this.datasets.size(); i++) { if (this.datasets.get(i) == dataset) { result = (XYItemRenderer) this.renderers.get(i); if (result == null) { result = getRenderer();"
      },
      {
        "txt": "} break; } } return result; } public int getWeight() { return this.weight; } public void setWeight(int weight) {"
      },
      {
        "txt": "this.weight = weight; fireChangeEvent(); } public boolean isDomainGridlinesVisible() { return this.domainGridlinesVisible; } public void setDomainGridlinesVisible(boolean visible) { if (this.domainGridlinesVisible != visible) { this.domainGridlinesVisible = visible; fireChangeEvent();"
      },
      {
        "txt": "} } public Stroke getDomainGridlineStroke() { return this.domainGridlineStroke; } public void setDomainGridlineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.domainGridlineStroke = stroke;"
      },
      {
        "txt": "fireChangeEvent(); } public Paint getDomainGridlinePaint() { return this.domainGridlinePaint; } public void setDomainGridlinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainGridlinePaint = paint;"
      },
      {
        "txt": "fireChangeEvent(); } public boolean isRangeGridlinesVisible() { return this.rangeGridlinesVisible; } public void setRangeGridlinesVisible(boolean visible) { if (this.rangeGridlinesVisible != visible) { this.rangeGridlinesVisible = visible; fireChangeEvent(); }"
      },
      {
        "txt": "} public Stroke getRangeGridlineStroke() { return this.rangeGridlineStroke; } public void setRangeGridlineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeGridlineStroke = stroke; fireChangeEvent();"
      },
      {
        "txt": "} public Paint getRangeGridlinePaint() { return this.rangeGridlinePaint; } public void setRangeGridlinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeGridlinePaint = paint; fireChangeEvent();"
      },
      {
        "txt": "} public boolean isDomainZeroBaselineVisible() { return this.domainZeroBaselineVisible; } public void setDomainZeroBaselineVisible(boolean visible) { this.domainZeroBaselineVisible = visible; fireChangeEvent(); } public Stroke getDomainZeroBaselineStroke() { return this.domainZeroBaselineStroke;"
      },
      {
        "txt": "} public void setDomainZeroBaselineStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.domainZeroBaselineStroke = stroke; fireChangeEvent(); } public Paint getDomainZeroBaselinePaint() { return this.domainZeroBaselinePaint;"
      },
      {
        "txt": "} public void setDomainZeroBaselinePaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.domainZeroBaselinePaint = paint; fireChangeEvent(); } public boolean isRangeZeroBaselineVisible() { return this.rangeZeroBaselineVisible;"
      },
      {
        "txt": "} public void setRangeZeroBaselineVisible(boolean visible) { this.rangeZeroBaselineVisible = visible; fireChangeEvent(); } public Stroke getRangeZeroBaselineStroke() { return this.rangeZeroBaselineStroke; } public void setRangeZeroBaselineStroke(Stroke stroke) { if (stroke == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'stroke' argument.\"); } this.rangeZeroBaselineStroke = stroke; fireChangeEvent(); } public Paint getRangeZeroBaselinePaint() { return this.rangeZeroBaselinePaint; } public void setRangeZeroBaselinePaint(Paint paint) { if (paint == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'paint' argument.\"); } this.rangeZeroBaselinePaint = paint; fireChangeEvent(); } public Paint getDomainTickBandPaint() { return this.domainTickBandPaint; } public void setDomainTickBandPaint(Paint paint) { this.domainTickBandPaint = paint;"
      },
      {
        "txt": "fireChangeEvent(); } public Paint getRangeTickBandPaint() { return this.rangeTickBandPaint; } public void setRangeTickBandPaint(Paint paint) { this.rangeTickBandPaint = paint; fireChangeEvent(); } public Point2D getQuadrantOrigin() {"
      },
      {
        "txt": "return this.quadrantOrigin; } public void setQuadrantOrigin(Point2D origin) { if (origin == null) { throw new IllegalArgumentException(\"Null 'origin' argument.\"); } this.quadrantOrigin = origin; fireChangeEvent(); } public Paint getQuadrantPaint(int index) {"
      },
      {
        "txt": "if (index < 0 || index > 3) { throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\"); } return this.quadrantPaint[index]; } public void setQuadrantPaint(int index, Paint paint) { if (index < 0 || index > 3) { throw new IllegalArgumentException(\"The index value (\" + index + \") should be in the range 0 to 3.\");"
      },
      {
        "txt": "} this.quadrantPaint[index] = paint; fireChangeEvent(); } public void addDomainMarker(Marker marker) { addDomainMarker(marker, Layer.FOREGROUND); } public void addDomainMarker(Marker marker, Layer layer) { addDomainMarker(0, marker, layer); }"
      },
      {
        "txt": "public void clearDomainMarkers() { if (this.backgroundDomainMarkers != null) { Set keys = this.backgroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.backgroundDomainMarkers.clear(); }"
      },
      {
        "txt": "if (this.foregroundDomainMarkers != null) { Set keys = this.foregroundDomainMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearDomainMarkers(key.intValue()); } this.foregroundDomainMarkers.clear(); } fireChangeEvent();"
      },
      {
        "txt": "} public void clearDomainMarkers(int index) { Integer key = new Integer(index); if (this.backgroundDomainMarkers != null) { Collection markers = (Collection) this.backgroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next();"
      },
      {
        "txt": "m.removeChangeListener(this); } markers.clear(); } } if (this.foregroundRangeMarkers != null) { Collection markers = (Collection) this.foregroundDomainMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } } fireChangeEvent(); } public void addDomainMarker(int index, Marker marker, Layer layer) {"
      },
      {
        "txt": "addDomainMarker(index, marker, layer, true); } public void addDomainMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' not permitted.\"); } if (layer == null) { throw new IllegalArgumentException(\"Null 'layer' not permitted.\"); }"
      },
      {
        "txt": "Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundDomainMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); }"
      },
      {
        "txt": "else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundDomainMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundDomainMarkers.put(new Integer(index), markers); } markers.add(marker); } marker.addChangeListener(this);"
      },
      {
        "txt": "if (notify) { fireChangeEvent(); } } public boolean removeDomainMarker(Marker marker) { return removeDomainMarker(marker, Layer.FOREGROUND); } public boolean removeDomainMarker(Marker marker, Layer layer) { return removeDomainMarker(0, marker, layer); }"
      },
      {
        "txt": "public boolean removeDomainMarker(int index, Marker marker, Layer layer) { return removeDomainMarker(index, marker, layer, true); } public boolean removeDomainMarker(int index, Marker marker, Layer layer, boolean notify) { ArrayList markers; if (layer == Layer.FOREGROUND) { markers = (ArrayList) this.foregroundDomainMarkers.get(new Integer( index)); }"
      },
      {
        "txt": "else { markers = (ArrayList) this.backgroundDomainMarkers.get(new Integer( index)); } boolean removed = markers.remove(marker); if (removed && notify) { fireChangeEvent(); } return removed; }"
      },
      {
        "txt": "public void addRangeMarker(Marker marker) { addRangeMarker(marker, Layer.FOREGROUND); } public void addRangeMarker(Marker marker, Layer layer) { addRangeMarker(0, marker, layer); } public void clearRangeMarkers() { if (this.backgroundRangeMarkers != null) { Set keys = this.backgroundRangeMarkers.keySet(); Iterator iterator = keys.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.backgroundRangeMarkers.clear(); } if (this.foregroundRangeMarkers != null) { Set keys = this.foregroundRangeMarkers.keySet(); Iterator iterator = keys.iterator(); while (iterator.hasNext()) {"
      },
      {
        "txt": "Integer key = (Integer) iterator.next(); clearRangeMarkers(key.intValue()); } this.foregroundRangeMarkers.clear(); } fireChangeEvent(); } public void addRangeMarker(int index, Marker marker, Layer layer) { addRangeMarker(index, marker, layer, true); }"
      },
      {
        "txt": "public void addRangeMarker(int index, Marker marker, Layer layer, boolean notify) { Collection markers; if (layer == Layer.FOREGROUND) { markers = (Collection) this.foregroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.foregroundRangeMarkers.put(new Integer(index), markers); }"
      },
      {
        "txt": "markers.add(marker); } else if (layer == Layer.BACKGROUND) { markers = (Collection) this.backgroundRangeMarkers.get( new Integer(index)); if (markers == null) { markers = new java.util.ArrayList(); this.backgroundRangeMarkers.put(new Integer(index), markers); } markers.add(marker);"
      },
      {
        "txt": "} marker.addChangeListener(this); if (notify) { fireChangeEvent(); } } public void clearRangeMarkers(int index) { Integer key = new Integer(index); if (this.backgroundRangeMarkers != null) { Collection markers"
      },
      {
        "txt": "= (Collection) this.backgroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear(); } }"
      },
      {
        "txt": "if (this.foregroundRangeMarkers != null) { Collection markers = (Collection) this.foregroundRangeMarkers.get(key); if (markers != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker m = (Marker) iterator.next(); m.removeChangeListener(this); } markers.clear();"
      },
      {
        "txt": "} } fireChangeEvent(); } public boolean removeRangeMarker(Marker marker) { return removeRangeMarker(marker, Layer.FOREGROUND); } public boolean removeRangeMarker(Marker marker, Layer layer) { return removeRangeMarker(0, marker, layer); }"
      },
      {
        "txt": "public boolean removeRangeMarker(int index, Marker marker, Layer layer) { return removeRangeMarker(index, marker, layer, true); } public boolean removeRangeMarker(int index, Marker marker, Layer layer, boolean notify) { if (marker == null) { throw new IllegalArgumentException(\"Null 'marker' argument.\"); } ArrayList markers; if (layer == Layer.FOREGROUND) {"
      },
      {
        "txt": "index)); } else { markers = (ArrayList) this.backgroundRangeMarkers.get(new Integer( index)); } <extra_id_0> if (removed && notify) { fireChangeEvent(); } return removed; } public void addAnnotation(XYAnnotation annotation) {"
      },
      {
        "txt": "} public void addAnnotation(XYAnnotation annotation) { addAnnotation(annotation, true); } public void addAnnotation(XYAnnotation annotation, boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\"); } this.annotations.add(annotation); if (notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public boolean removeAnnotation(XYAnnotation annotation) { return removeAnnotation(annotation, true); } public boolean removeAnnotation(XYAnnotation annotation, boolean notify) { if (annotation == null) { throw new IllegalArgumentException(\"Null 'annotation' argument.\"); }"
      },
      {
        "txt": "boolean removed = this.annotations.remove(annotation); if (removed && notify) { fireChangeEvent(); } return removed; } public List getAnnotations() { return new ArrayList(this.annotations); } public void clearAnnotations() {"
      },
      {
        "txt": "this.annotations.clear(); fireChangeEvent(); } protected AxisSpace calculateAxisSpace(Graphics2D g2, Rectangle2D plotArea) { AxisSpace space = new AxisSpace(); space = calculateDomainAxisSpace(g2, plotArea, space); space = calculateRangeAxisSpace(g2, plotArea, space); return space; }"
      },
      {
        "txt": "protected AxisSpace calculateDomainAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); } if (this.fixedDomainAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getLeft(), RectangleEdge.LEFT);"
      },
      {
        "txt": "space.ensureAtLeast(this.fixedDomainAxisSpace.getRight(), RectangleEdge.RIGHT); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedDomainAxisSpace.getTop(), RectangleEdge.TOP); space.ensureAtLeast(this.fixedDomainAxisSpace.getBottom(), RectangleEdge.BOTTOM); } }"
      },
      {
        "txt": "else { for (int i = 0; i < this.domainAxes.size(); i++) { Axis axis = (Axis) this.domainAxes.get(i); if (axis != null) { RectangleEdge edge = getDomainAxisEdge(i); space = axis.reserveSpace(g2, this, plotArea, edge, space); } } } return space;"
      },
      {
        "txt": "} protected AxisSpace calculateRangeAxisSpace(Graphics2D g2, Rectangle2D plotArea, AxisSpace space) { if (space == null) { space = new AxisSpace(); } if (this.fixedRangeAxisSpace != null) { if (this.orientation == PlotOrientation.HORIZONTAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getTop(),"
      },
      {
        "txt": "RectangleEdge.TOP); space.ensureAtLeast(this.fixedRangeAxisSpace.getBottom(), RectangleEdge.BOTTOM); } else if (this.orientation == PlotOrientation.VERTICAL) { space.ensureAtLeast(this.fixedRangeAxisSpace.getLeft(), RectangleEdge.LEFT); space.ensureAtLeast(this.fixedRangeAxisSpace.getRight(), RectangleEdge.RIGHT); }"
      },
      {
        "txt": "} else { for (int i = 0; i < this.rangeAxes.size(); i++) { Axis axis = (Axis) this.rangeAxes.get(i); if (axis != null) { RectangleEdge edge = getRangeAxisEdge(i); space = axis.reserveSpace(g2, this, plotArea, edge, space); } } }"
      },
      {
        "txt": "return space; } public void draw(Graphics2D g2, Rectangle2D area, Point2D anchor, PlotState parentState, PlotRenderingInfo info) { boolean b1 = (area.getWidth() <= MINIMUM_WIDTH_TO_DRAW); boolean b2 = (area.getHeight() <= MINIMUM_HEIGHT_TO_DRAW); if (b1 || b2) {"
      },
      {
        "txt": "return; } if (info != null) { info.setPlotArea(area); } RectangleInsets insets = getInsets(); insets.trim(area); AxisSpace space = calculateAxisSpace(g2, area); Rectangle2D dataArea = space.shrink(area, null); this.axisOffset.trim(dataArea);"
      },
      {
        "txt": "if (info != null) { info.setDataArea(dataArea); } drawBackground(g2, dataArea); Map axisStateMap = drawAxes(g2, area, dataArea, info); PlotOrientation orient = getOrientation(); if (anchor != null && !dataArea.contains(anchor)) { anchor = null; } CrosshairState crosshairState = new CrosshairState();"
      },
      {
        "txt": "crosshairState.setCrosshairDistance(Double.POSITIVE_INFINITY); crosshairState.setAnchor(anchor); crosshairState.setAnchorX(Double.NaN); crosshairState.setAnchorY(Double.NaN); if (anchor != null) { ValueAxis domainAxis = getDomainAxis(); if (domainAxis != null) { double x; if (orient == PlotOrientation.VERTICAL) { x = domainAxis.java2DToValue(anchor.getX(), dataArea,"
      },
      {
        "txt": "getDomainAxisEdge()); } else { x = domainAxis.java2DToValue(anchor.getY(), dataArea, getDomainAxisEdge()); } crosshairState.setAnchorX(x); } ValueAxis rangeAxis = getRangeAxis(); if (rangeAxis != null) {"
      },
      {
        "txt": "double y; if (orient == PlotOrientation.VERTICAL) { y = rangeAxis.java2DToValue(anchor.getY(), dataArea, getRangeAxisEdge()); } else { y = rangeAxis.java2DToValue(anchor.getX(), dataArea, getRangeAxisEdge()); } crosshairState.setAnchorY(y);"
      },
      {
        "txt": "} } crosshairState.setCrosshairX(getDomainCrosshairValue()); crosshairState.setCrosshairY(getRangeCrosshairValue()); Shape originalClip = g2.getClip(); Composite originalComposite = g2.getComposite(); g2.clip(dataArea); g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getForegroundAlpha())); AxisState domainAxisState = (AxisState) axisStateMap.get("
      },
      {
        "txt": "getDomainAxis()); if (domainAxisState == null) { if (parentState != null) { domainAxisState = (AxisState) parentState.getSharedAxisStates() .get(getDomainAxis()); } } AxisState rangeAxisState = (AxisState) axisStateMap.get(getRangeAxis()); if (rangeAxisState == null) { if (parentState != null) {"
      },
      {
        "txt": "rangeAxisState = (AxisState) parentState.getSharedAxisStates() .get(getRangeAxis()); } } if (domainAxisState != null) { drawDomainTickBands(g2, dataArea, domainAxisState.getTicks()); } if (rangeAxisState != null) { drawRangeTickBands(g2, dataArea, rangeAxisState.getTicks()); }"
      },
      {
        "txt": "if (domainAxisState != null) { drawDomainGridlines(g2, dataArea, domainAxisState.getTicks()); drawZeroDomainBaseline(g2, dataArea); } if (rangeAxisState != null) { drawRangeGridlines(g2, dataArea, rangeAxisState.getTicks()); drawZeroRangeBaseline(g2, dataArea); } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.BACKGROUND);"
      },
      {
        "txt": "} for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.BACKGROUND); } boolean foundData = false; DatasetRenderingOrder order = getDatasetRenderingOrder(); if (order == DatasetRenderingOrder.FORWARD) { int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { XYItemRenderer r = getRenderer(i);"
      },
      {
        "txt": "if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); } } for (int i = 0; i < getDatasetCount(); i++) { foundData = render(g2, dataArea, i, info, crosshairState) || foundData;"
      },
      {
        "txt": "} for (int i = 0; i < rendererCount; i++) { XYItemRenderer r = getRenderer(i); if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info); } }"
      },
      {
        "txt": "} else if (order == DatasetRenderingOrder.REVERSE) { int rendererCount = this.renderers.size(); for (int i = rendererCount - 1; i >= 0; i--) { XYItemRenderer r = getRenderer(i); if (i >= getDatasetCount()) { // we need the dataset to make continue; // a link to the axes } if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i);"
      },
      {
        "txt": "ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.BACKGROUND, info); } } for (int i = getDatasetCount() - 1; i >= 0; i--) { foundData = render(g2, dataArea, i, info, crosshairState) || foundData; } for (int i = rendererCount - 1; i >= 0; i--) {"
      },
      {
        "txt": "XYItemRenderer r = getRenderer(i); if (i >= getDatasetCount()) { // we need the dataset to make continue; // a link to the axes } if (r != null) { ValueAxis domainAxis = getDomainAxisForDataset(i); ValueAxis rangeAxis = getRangeAxisForDataset(i); r.drawAnnotations(g2, dataArea, domainAxis, rangeAxis, Layer.FOREGROUND, info); }"
      },
      {
        "txt": "} } int xAxisIndex = crosshairState.getDomainAxisIndex(); ValueAxis xAxis = getDomainAxis(xAxisIndex); RectangleEdge xAxisEdge = getDomainAxisEdge(xAxisIndex); if (!this.domainCrosshairLockedOnData && anchor != null) { double xx; if (orient == PlotOrientation.VERTICAL) { xx = xAxis.java2DToValue(anchor.getX(), dataArea, xAxisEdge); }"
      },
      {
        "txt": "else { xx = xAxis.java2DToValue(anchor.getY(), dataArea, xAxisEdge); } crosshairState.setCrosshairX(xx); } setDomainCrosshairValue(crosshairState.getCrosshairX(), false); if (isDomainCrosshairVisible()) { double x = getDomainCrosshairValue(); Paint paint = getDomainCrosshairPaint(); Stroke stroke = getDomainCrosshairStroke();"
      },
      {
        "txt": "drawDomainCrosshair(g2, dataArea, orient, x, xAxis, stroke, paint); } int yAxisIndex = crosshairState.getRangeAxisIndex(); ValueAxis yAxis = getRangeAxis(yAxisIndex); RectangleEdge yAxisEdge = getRangeAxisEdge(yAxisIndex); if (!this.rangeCrosshairLockedOnData && anchor != null) { double yy; if (orient == PlotOrientation.VERTICAL) { yy = yAxis.java2DToValue(anchor.getY(), dataArea, yAxisEdge); } else {"
      },
      {
        "txt": "yy = yAxis.java2DToValue(anchor.getX(), dataArea, yAxisEdge); } crosshairState.setCrosshairY(yy); } setRangeCrosshairValue(crosshairState.getCrosshairY(), false); if (isRangeCrosshairVisible()) { double y = getRangeCrosshairValue(); Paint paint = getRangeCrosshairPaint(); Stroke stroke = getRangeCrosshairStroke(); drawRangeCrosshair(g2, dataArea, orient, y, yAxis, stroke, paint);"
      },
      {
        "txt": "} if (!foundData) { drawNoDataMessage(g2, dataArea); } for (int i = 0; i < this.renderers.size(); i++) { drawDomainMarkers(g2, dataArea, i, Layer.FOREGROUND); } for (int i = 0; i < this.renderers.size(); i++) { drawRangeMarkers(g2, dataArea, i, Layer.FOREGROUND); }"
      },
      {
        "txt": "drawAnnotations(g2, dataArea, info); g2.setClip(originalClip); g2.setComposite(originalComposite); drawOutline(g2, dataArea); } public void drawBackground(Graphics2D g2, Rectangle2D area) { fillBackground(g2, area, this.orientation); drawQuadrants(g2, area); drawBackgroundImage(g2, area); }"
      },
      {
        "txt": "protected void drawQuadrants(Graphics2D g2, Rectangle2D area) { boolean somethingToDraw = false; ValueAxis xAxis = getDomainAxis(); double x = xAxis.getRange().constrain(this.quadrantOrigin.getX()); double xx = xAxis.valueToJava2D(x, area, getDomainAxisEdge()); ValueAxis yAxis = getRangeAxis(); double y = yAxis.getRange().constrain(this.quadrantOrigin.getY()); double yy = yAxis.valueToJava2D(y, area, getRangeAxisEdge()); double xmin = xAxis.getLowerBound(); double xxmin = xAxis.valueToJava2D(xmin, area, getDomainAxisEdge());"
      },
      {
        "txt": "double xmax = xAxis.getUpperBound(); double xxmax = xAxis.valueToJava2D(xmax, area, getDomainAxisEdge()); double ymin = yAxis.getLowerBound(); double yymin = yAxis.valueToJava2D(ymin, area, getRangeAxisEdge()); double ymax = yAxis.getUpperBound(); double yymax = yAxis.valueToJava2D(ymax, area, getRangeAxisEdge()); Rectangle2D[] r = new Rectangle2D[] {null, null, null, null}; if (this.quadrantPaint[0] != null) { if (x > xmin && y < ymax) { if (this.orientation == PlotOrientation.HORIZONTAL) {"
      },
      {
        "txt": "r[0] = new Rectangle2D.Double(Math.min(yymax, yy), Math.min(xxmin, xx), Math.abs(yy - yymax), Math.abs(xx - xxmin) ); } else { // PlotOrientation.VERTICAL r[0] = new Rectangle2D.Double(Math.min(xxmin, xx), Math.min(yymax, yy), Math.abs(xx - xxmin), Math.abs(yy - yymax)); }"
      },
      {
        "txt": "somethingToDraw = true; } } if (this.quadrantPaint[1] != null) { if (x < xmax && y < ymax) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[1] = new Rectangle2D.Double(Math.min(yymax, yy), Math.min(xxmax, xx), Math.abs(yy - yymax), Math.abs(xx - xxmax)); }"
      },
      {
        "txt": "else { // PlotOrientation.VERTICAL r[1] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymax, yy), Math.abs(xx - xxmax), Math.abs(yy - yymax)); } somethingToDraw = true; } } if (this.quadrantPaint[2] != null) { if (x > xmin && y > ymin) {"
      },
      {
        "txt": "if (this.orientation == PlotOrientation.HORIZONTAL) { r[2] = new Rectangle2D.Double(Math.min(yymin, yy), Math.min(xxmin, xx), Math.abs(yy - yymin), Math.abs(xx - xxmin)); } else { // PlotOrientation.VERTICAL r[2] = new Rectangle2D.Double(Math.min(xxmin, xx), Math.min(yymin, yy), Math.abs(xx - xxmin), Math.abs(yy - yymin)); }"
      },
      {
        "txt": "somethingToDraw = true; } } if (this.quadrantPaint[3] != null) { if (x < xmax && y > ymin) { if (this.orientation == PlotOrientation.HORIZONTAL) { r[3] = new Rectangle2D.Double(Math.min(yymin, yy), Math.min(xxmax, xx), Math.abs(yy - yymin), Math.abs(xx - xxmax)); }"
      },
      {
        "txt": "else { // PlotOrientation.VERTICAL r[3] = new Rectangle2D.Double(Math.min(xx, xxmax), Math.min(yymin, yy), Math.abs(xx - xxmax), Math.abs(yy - yymin)); } somethingToDraw = true; } } if (somethingToDraw) { Composite originalComposite = g2.getComposite();"
      },
      {
        "txt": "g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, getBackgroundAlpha())); for (int i = 0; i < 4; i++) { if (this.quadrantPaint[i] != null && r[i] != null) { g2.setPaint(this.quadrantPaint[i]); g2.fill(r[i]); } } g2.setComposite(originalComposite); }"
      },
      {
        "txt": "} public void drawDomainTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) { Paint bandPaint = getDomainTickBandPaint(); if (bandPaint != null) { boolean fillBand = false; ValueAxis xAxis = getDomainAxis(); double previous = xAxis.getLowerBound(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) {"
      },
      {
        "txt": "ValueTick tick = (ValueTick) iterator.next(); double current = tick.getValue(); if (fillBand) { getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, current); } previous = current; fillBand = !fillBand; } double end = xAxis.getUpperBound();"
      },
      {
        "txt": "if (fillBand) { getRenderer().fillDomainGridBand(g2, this, xAxis, dataArea, previous, end); } } } public void drawRangeTickBands(Graphics2D g2, Rectangle2D dataArea, List ticks) { Paint bandPaint = getRangeTickBandPaint(); if (bandPaint != null) {"
      },
      {
        "txt": "boolean fillBand = false; ValueAxis axis = getRangeAxis(); double previous = axis.getLowerBound(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); double current = tick.getValue(); if (fillBand) { getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, current);"
      },
      {
        "txt": "} previous = current; fillBand = !fillBand; } double end = axis.getUpperBound(); if (fillBand) { getRenderer().fillRangeGridBand(g2, this, axis, dataArea, previous, end); } }"
      },
      {
        "txt": "} protected Map drawAxes(Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, PlotRenderingInfo plotState) { AxisCollection axisCollection = new AxisCollection(); for (int index = 0; index < this.domainAxes.size(); index++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(index); if (axis != null) { axisCollection.add(axis, getDomainAxisEdge(index));"
      },
      {
        "txt": "} } for (int index = 0; index < this.rangeAxes.size(); index++) { ValueAxis yAxis = (ValueAxis) this.rangeAxes.get(index); if (yAxis != null) { axisCollection.add(yAxis, getRangeAxisEdge(index)); } } Map axisStateMap = new HashMap(); double cursor = dataArea.getMinY() - this.axisOffset.calculateTopOutset("
      },
      {
        "txt": "dataArea.getHeight()); Iterator iterator = axisCollection.getAxesAtTop().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.TOP, plotState); cursor = info.getCursor(); axisStateMap.put(axis, info); } cursor = dataArea.getMaxY()"
      },
      {
        "txt": "+ this.axisOffset.calculateBottomOutset(dataArea.getHeight()); iterator = axisCollection.getAxesAtBottom().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.BOTTOM, plotState); cursor = info.getCursor(); axisStateMap.put(axis, info); } cursor = dataArea.getMinX()"
      },
      {
        "txt": "- this.axisOffset.calculateLeftOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtLeft().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.LEFT, plotState); cursor = info.getCursor(); axisStateMap.put(axis, info); } cursor = dataArea.getMaxX()"
      },
      {
        "txt": "+ this.axisOffset.calculateRightOutset(dataArea.getWidth()); iterator = axisCollection.getAxesAtRight().iterator(); while (iterator.hasNext()) { ValueAxis axis = (ValueAxis) iterator.next(); AxisState info = axis.draw(g2, cursor, plotArea, dataArea, RectangleEdge.RIGHT, plotState); cursor = info.getCursor(); axisStateMap.put(axis, info); } return axisStateMap;"
      },
      {
        "txt": "} public boolean render(Graphics2D g2, Rectangle2D dataArea, int index, PlotRenderingInfo info, CrosshairState crosshairState) { boolean foundData = false; XYDataset dataset = getDataset(index); if (!DatasetUtilities.isEmptyOrNull(dataset)) { foundData = true;"
      },
      {
        "txt": "ValueAxis xAxis = getDomainAxisForDataset(index); ValueAxis yAxis = getRangeAxisForDataset(index); XYItemRenderer renderer = getRenderer(index); if (renderer == null) { renderer = getRenderer(); if (renderer == null) { // no default renderer available return foundData; } } XYItemRendererState state = renderer.initialise(g2, dataArea, this,"
      },
      {
        "txt": "dataset, info); int passCount = renderer.getPassCount(); SeriesRenderingOrder seriesOrder = getSeriesRenderingOrder(); if (seriesOrder == SeriesRenderingOrder.REVERSE) { for (int pass = 0; pass < passCount; pass++) { int seriesCount = dataset.getSeriesCount(); for (int series = seriesCount - 1; series >= 0; series--) { int firstItem = 0; int lastItem = dataset.getItemCount(series) - 1; if (lastItem == -1) {"
      },
      {
        "txt": "continue; } if (state.getProcessVisibleItemsOnly()) { int[] itemBounds = RendererUtilities.findLiveItems( dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound()); firstItem = itemBounds[0]; lastItem = itemBounds[1]; } for (int item = firstItem; item <= lastItem; item++) {"
      },
      {
        "txt": "renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass); } } } } else { for (int pass = 0; pass < passCount; pass++) { int seriesCount = dataset.getSeriesCount();"
      },
      {
        "txt": "for (int series = 0; series < seriesCount; series++) { int firstItem = 0; int lastItem = dataset.getItemCount(series) - 1; if (state.getProcessVisibleItemsOnly()) { int[] itemBounds = RendererUtilities.findLiveItems( dataset, series, xAxis.getLowerBound(), xAxis.getUpperBound()); firstItem = itemBounds[0]; lastItem = itemBounds[1]; }"
      },
      {
        "txt": "for (int item = firstItem; item <= lastItem; item++) { renderer.drawItem(g2, state, dataArea, info, this, xAxis, yAxis, dataset, series, item, crosshairState, pass); } } } } } return foundData;"
      },
      {
        "txt": "} public ValueAxis getDomainAxisForDataset(int index) { if (index < 0 || index >= getDatasetCount()) { throw new IllegalArgumentException(\"Index \" + index + \" out of bounds.\"); } ValueAxis valueAxis = null; Integer axisIndex = (Integer) this.datasetToDomainAxisMap.get( new Integer(index)); if (axisIndex != null) {"
      },
      {
        "txt": "valueAxis = getDomainAxis(axisIndex.intValue()); } else { valueAxis = getDomainAxis(0); } return valueAxis; } public ValueAxis getRangeAxisForDataset(int index) { if (index < 0 || index >= getDatasetCount()) { throw new IllegalArgumentException(\"Index \" + index"
      },
      {
        "txt": "+ \" out of bounds.\"); } ValueAxis valueAxis = null; Integer axisIndex = (Integer) this.datasetToRangeAxisMap.get(new Integer(index)); if (axisIndex != null) { valueAxis = getRangeAxis(axisIndex.intValue()); } else { valueAxis = getRangeAxis(0);"
      },
      {
        "txt": "} return valueAxis; } protected void drawDomainGridlines(Graphics2D g2, Rectangle2D dataArea, List ticks) { if (getRenderer() == null) { return; } if (isDomainGridlinesVisible()) { Stroke gridStroke = getDomainGridlineStroke();"
      },
      {
        "txt": "Paint gridPaint = getDomainGridlinePaint(); Iterator iterator = ticks.iterator(); while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); getRenderer().drawDomainLine(g2, this, getDomainAxis(), dataArea, tick.getValue(), gridPaint, gridStroke); } } } protected void drawRangeGridlines(Graphics2D g2, Rectangle2D area,"
      },
      {
        "txt": "List ticks) { if (getRenderer() == null) { return; } if (isRangeGridlinesVisible()) { Stroke gridStroke = getRangeGridlineStroke(); Paint gridPaint = getRangeGridlinePaint(); ValueAxis axis = getRangeAxis(); if (axis != null) { Iterator iterator = ticks.iterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { ValueTick tick = (ValueTick) iterator.next(); if (tick.getValue() != 0.0 || !isRangeZeroBaselineVisible()) { getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, tick.getValue(), gridPaint, gridStroke); } } } }"
      },
      {
        "txt": "} protected void drawZeroDomainBaseline(Graphics2D g2, Rectangle2D area) { if (isDomainZeroBaselineVisible()) { XYItemRenderer r = getRenderer(); r.drawDomainLine(g2, this, getDomainAxis(), area, 0.0, this.domainZeroBaselinePaint, this.domainZeroBaselineStroke); } } protected void drawZeroRangeBaseline(Graphics2D g2, Rectangle2D area) {"
      },
      {
        "txt": "if (isRangeZeroBaselineVisible()) { getRenderer().drawRangeLine(g2, this, getRangeAxis(), area, 0.0, this.rangeZeroBaselinePaint, this.rangeZeroBaselineStroke); } } public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea, PlotRenderingInfo info) { Iterator iterator = this.annotations.iterator(); while (iterator.hasNext()) {"
      },
      {
        "txt": "XYAnnotation annotation = (XYAnnotation) iterator.next(); ValueAxis xAxis = getDomainAxis(); ValueAxis yAxis = getRangeAxis(); annotation.draw(g2, this, dataArea, xAxis, yAxis, 0, info); } } protected void drawDomainMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { XYItemRenderer r = getRenderer(index); if (r == null) {"
      },
      {
        "txt": "return; } if (index >= getDatasetCount()) { return; } Collection markers = getDomainMarkers(index, layer); ValueAxis axis = getDomainAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) {"
      },
      {
        "txt": "Marker marker = (Marker) iterator.next(); r.drawDomainMarker(g2, this, axis, marker, dataArea); } } } protected void drawRangeMarkers(Graphics2D g2, Rectangle2D dataArea, int index, Layer layer) { XYItemRenderer r = getRenderer(index); if (r == null) { return;"
      },
      {
        "txt": "} if (index >= getDatasetCount()) { return; } Collection markers = getRangeMarkers(index, layer); ValueAxis axis = getRangeAxisForDataset(index); if (markers != null && axis != null) { Iterator iterator = markers.iterator(); while (iterator.hasNext()) { Marker marker = (Marker) iterator.next();"
      },
      {
        "txt": "r.drawRangeMarker(g2, this, axis, marker, dataArea); } } } public Collection getDomainMarkers(Layer layer) { return getDomainMarkers(0, layer); } public Collection getRangeMarkers(Layer layer) { return getRangeMarkers(0, layer); }"
      },
      {
        "txt": "public Collection getDomainMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundDomainMarkers.get(key); } else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundDomainMarkers.get(key); } if (result != null) {"
      },
      {
        "txt": "result = Collections.unmodifiableCollection(result); } return result; } public Collection getRangeMarkers(int index, Layer layer) { Collection result = null; Integer key = new Integer(index); if (layer == Layer.FOREGROUND) { result = (Collection) this.foregroundRangeMarkers.get(key); }"
      },
      {
        "txt": "else if (layer == Layer.BACKGROUND) { result = (Collection) this.backgroundRangeMarkers.get(key); } if (result != null) { result = Collections.unmodifiableCollection(result); } return result; } protected void drawHorizontalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke,"
      },
      {
        "txt": "Paint paint) { ValueAxis axis = getRangeAxis(); if (getOrientation() == PlotOrientation.HORIZONTAL) { axis = getDomainAxis(); } if (axis.getRange().contains(value)) { double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); Line2D line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); g2.setStroke(stroke);"
      },
      {
        "txt": "g2.setPaint(paint); g2.draw(line); } } protected void drawDomainCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { if (axis.getRange().contains(value)) { Line2D line = null; if (orientation == PlotOrientation.VERTICAL) {"
      },
      {
        "txt": "double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else { double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy);"
      },
      {
        "txt": "} g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line); } } protected void drawVerticalLine(Graphics2D g2, Rectangle2D dataArea, double value, Stroke stroke, Paint paint) { ValueAxis axis = getDomainAxis(); if (getOrientation() == PlotOrientation.HORIZONTAL) {"
      },
      {
        "txt": "axis = getRangeAxis(); } if (axis.getRange().contains(value)) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM); Line2D line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); g2.setStroke(stroke); g2.setPaint(paint); g2.draw(line);"
      },
      {
        "txt": "} } protected void drawRangeCrosshair(Graphics2D g2, Rectangle2D dataArea, PlotOrientation orientation, double value, ValueAxis axis, Stroke stroke, Paint paint) { if (axis.getRange().contains(value)) { Line2D line = null; if (orientation == PlotOrientation.HORIZONTAL) { double xx = axis.valueToJava2D(value, dataArea, RectangleEdge.BOTTOM);"
      },
      {
        "txt": "line = new Line2D.Double(xx, dataArea.getMinY(), xx, dataArea.getMaxY()); } else { double yy = axis.valueToJava2D(value, dataArea, RectangleEdge.LEFT); line = new Line2D.Double(dataArea.getMinX(), yy, dataArea.getMaxX(), yy); } g2.setStroke(stroke);"
      },
      {
        "txt": "g2.setPaint(paint); g2.draw(line); } } public void handleClick(int x, int y, PlotRenderingInfo info) { Rectangle2D dataArea = info.getDataArea(); if (dataArea.contains(x, y)) { ValueAxis da = getDomainAxis(); if (da != null) { double hvalue = da.java2DToValue(x, info.getDataArea(),"
      },
      {
        "txt": "getDomainAxisEdge()); setDomainCrosshairValue(hvalue); } ValueAxis ra = getRangeAxis(); if (ra != null) { double vvalue = ra.java2DToValue(y, info.getDataArea(), getRangeAxisEdge()); setRangeCrosshairValue(vvalue); } }"
      },
      {
        "txt": "} private List getDatasetsMappedToDomainAxis(Integer axisIndex) { if (axisIndex == null) { throw new IllegalArgumentException(\"Null 'axisIndex' argument.\"); } List result = new ArrayList(); for (int i = 0; i < this.datasets.size(); i++) { Integer mappedAxis = (Integer) this.datasetToDomainAxisMap.get( new Integer(i)); if (mappedAxis == null) {"
      },
      {
        "txt": "if (axisIndex.equals(ZERO)) { result.add(this.datasets.get(i)); } } else { if (mappedAxis.equals(axisIndex)) { result.add(this.datasets.get(i)); } } }"
      },
      {
        "txt": "return result; } private List getDatasetsMappedToRangeAxis(Integer axisIndex) { if (axisIndex == null) { throw new IllegalArgumentException(\"Null 'axisIndex' argument.\"); } List result = new ArrayList(); for (int i = 0; i < this.datasets.size(); i++) { Integer mappedAxis = (Integer) this.datasetToRangeAxisMap.get( new Integer(i));"
      },
      {
        "txt": "if (mappedAxis == null) { if (axisIndex.equals(ZERO)) { result.add(this.datasets.get(i)); } } else { if (mappedAxis.equals(axisIndex)) { result.add(this.datasets.get(i)); } }"
      },
      {
        "txt": "} return result; } public int getDomainAxisIndex(ValueAxis axis) { int result = this.domainAxes.indexOf(axis); if (result < 0) { Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot p = (XYPlot) parent; result = p.getDomainAxisIndex(axis);"
      },
      {
        "txt": "} } return result; } public int getRangeAxisIndex(ValueAxis axis) { int result = this.rangeAxes.indexOf(axis); if (result < 0) { Plot parent = getParent(); if (parent instanceof XYPlot) { XYPlot p = (XYPlot) parent;"
      },
      {
        "txt": "result = p.getRangeAxisIndex(axis); } } return result; } public Range getDataRange(ValueAxis axis) { Range result = null; List mappedDatasets = new ArrayList(); boolean isDomainAxis = true; int domainIndex = getDomainAxisIndex(axis);"
      },
      {
        "txt": "if (domainIndex >= 0) { isDomainAxis = true; mappedDatasets.addAll(getDatasetsMappedToDomainAxis( new Integer(domainIndex))); } int rangeIndex = getRangeAxisIndex(axis); if (rangeIndex >= 0) { isDomainAxis = false; mappedDatasets.addAll(getDatasetsMappedToRangeAxis( new Integer(rangeIndex)));"
      },
      {
        "txt": "} Iterator iterator = mappedDatasets.iterator(); while (iterator.hasNext()) { XYDataset d = (XYDataset) iterator.next(); if (d != null) { XYItemRenderer r = getRendererForDataset(d); if (isDomainAxis) { if (r != null) { result = Range.combine(result, r.findDomainBounds(d)); }"
      },
      {
        "txt": "else { result = Range.combine(result, DatasetUtilities.findDomainBounds(d)); } } else { if (r != null) { result = Range.combine(result, r.findRangeBounds(d)); } else {"
      },
      {
        "txt": "result = Range.combine(result, DatasetUtilities.findRangeBounds(d)); } } } } return result; } public void datasetChanged(DatasetChangeEvent event) { configureDomainAxes();"
      },
      {
        "txt": "configureRangeAxes(); if (getParent() != null) { getParent().datasetChanged(event); } else { PlotChangeEvent e = new PlotChangeEvent(this); e.setType(ChartChangeEventType.DATASET_UPDATED); notifyListeners(e); } }"
      },
      {
        "txt": "public void rendererChanged(RendererChangeEvent event) { fireChangeEvent(); } public boolean isDomainCrosshairVisible() { return this.domainCrosshairVisible; } public void setDomainCrosshairVisible(boolean flag) { if (this.domainCrosshairVisible != flag) { this.domainCrosshairVisible = flag; fireChangeEvent();"
      },
      {
        "txt": "} } public boolean isDomainCrosshairLockedOnData() { return this.domainCrosshairLockedOnData; } public void setDomainCrosshairLockedOnData(boolean flag) { if (this.domainCrosshairLockedOnData != flag) { this.domainCrosshairLockedOnData = flag; fireChangeEvent(); }"
      },
      {
        "txt": "} public double getDomainCrosshairValue() { return this.domainCrosshairValue; } public void setDomainCrosshairValue(double value) { setDomainCrosshairValue(value, true); } public void setDomainCrosshairValue(double value, boolean notify) { this.domainCrosshairValue = value; if (isDomainCrosshairVisible() && notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public Stroke getDomainCrosshairStroke() { return this.domainCrosshairStroke; } public void setDomainCrosshairStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); }"
      },
      {
        "txt": "this.domainCrosshairStroke = stroke; fireChangeEvent(); } public Paint getDomainCrosshairPaint() { return this.domainCrosshairPaint; } public void setDomainCrosshairPaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); }"
      },
      {
        "txt": "this.domainCrosshairPaint = paint; fireChangeEvent(); } public boolean isRangeCrosshairVisible() { return this.rangeCrosshairVisible; } public void setRangeCrosshairVisible(boolean flag) { if (this.rangeCrosshairVisible != flag) { this.rangeCrosshairVisible = flag; fireChangeEvent();"
      },
      {
        "txt": "} } public boolean isRangeCrosshairLockedOnData() { return this.rangeCrosshairLockedOnData; } public void setRangeCrosshairLockedOnData(boolean flag) { if (this.rangeCrosshairLockedOnData != flag) { this.rangeCrosshairLockedOnData = flag; fireChangeEvent(); }"
      },
      {
        "txt": "} public double getRangeCrosshairValue() { return this.rangeCrosshairValue; } public void setRangeCrosshairValue(double value) { setRangeCrosshairValue(value, true); } public void setRangeCrosshairValue(double value, boolean notify) { this.rangeCrosshairValue = value; if (isRangeCrosshairVisible() && notify) {"
      },
      {
        "txt": "fireChangeEvent(); } } public Stroke getRangeCrosshairStroke() { return this.rangeCrosshairStroke; } public void setRangeCrosshairStroke(Stroke stroke) { if (stroke == null) { throw new IllegalArgumentException(\"Null 'stroke' argument.\"); }"
      },
      {
        "txt": "this.rangeCrosshairStroke = stroke; fireChangeEvent(); } public Paint getRangeCrosshairPaint() { return this.rangeCrosshairPaint; } public void setRangeCrosshairPaint(Paint paint) { if (paint == null) { throw new IllegalArgumentException(\"Null 'paint' argument.\"); }"
      },
      {
        "txt": "this.rangeCrosshairPaint = paint; fireChangeEvent(); } public AxisSpace getFixedDomainAxisSpace() { return this.fixedDomainAxisSpace; } public void setFixedDomainAxisSpace(AxisSpace space) { setFixedDomainAxisSpace(space, true); } public void setFixedDomainAxisSpace(AxisSpace space, boolean notify) {"
      },
      {
        "txt": "this.fixedDomainAxisSpace = space; if (notify) { fireChangeEvent(); } } public AxisSpace getFixedRangeAxisSpace() { return this.fixedRangeAxisSpace; } public void setFixedRangeAxisSpace(AxisSpace space) { setFixedRangeAxisSpace(space, true);"
      },
      {
        "txt": "} public void setFixedRangeAxisSpace(AxisSpace space, boolean notify) { this.fixedRangeAxisSpace = space; if (notify) { fireChangeEvent(); } } public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source) { zoomDomainAxes(factor, info, source, false);"
      },
      {
        "txt": "} public void zoomDomainAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); if (domainAxis != null) { if (useAnchor) { double sourceX = source.getX(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceX = source.getY();"
      },
      {
        "txt": "} double anchorX = domainAxis.java2DToValue(sourceX, info.getDataArea(), getDomainAxisEdge()); domainAxis.resizeRange(factor, anchorX); } else { domainAxis.resizeRange(factor); } } }"
      },
      {
        "txt": "} public void zoomDomainAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis domainAxis = (ValueAxis) this.domainAxes.get(i); if (domainAxis != null) { domainAxis.zoomRange(lowerPercent, upperPercent); } } }"
      },
      {
        "txt": "public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source) { zoomRangeAxes(factor, info, source, false); } public void zoomRangeAxes(double factor, PlotRenderingInfo info, Point2D source, boolean useAnchor) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { if (useAnchor) {"
      },
      {
        "txt": "double sourceY = source.getY(); if (this.orientation == PlotOrientation.HORIZONTAL) { sourceY = source.getX(); } double anchorY = rangeAxis.java2DToValue(sourceY, info.getDataArea(), getRangeAxisEdge()); rangeAxis.resizeRange(factor, anchorY); } else { rangeAxis.resizeRange(factor);"
      },
      {
        "txt": "} } } } public void zoomRangeAxes(double lowerPercent, double upperPercent, PlotRenderingInfo info, Point2D source) { for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis rangeAxis = (ValueAxis) this.rangeAxes.get(i); if (rangeAxis != null) { rangeAxis.zoomRange(lowerPercent, upperPercent);"
      },
      {
        "txt": "} } } public boolean isDomainZoomable() { return true; } public boolean isRangeZoomable() { return true; } public int getSeriesCount() {"
      },
      {
        "txt": "int result = 0; XYDataset dataset = getDataset(); if (dataset != null) { result = dataset.getSeriesCount(); } return result; } public LegendItemCollection getFixedLegendItems() { return this.fixedLegendItems; }"
      },
      {
        "txt": "public void setFixedLegendItems(LegendItemCollection items) { this.fixedLegendItems = items; fireChangeEvent(); } public LegendItemCollection getLegendItems() { if (this.fixedLegendItems != null) { return this.fixedLegendItems; } LegendItemCollection result = new LegendItemCollection(); int count = this.datasets.size();"
      },
      {
        "txt": "for (int datasetIndex = 0; datasetIndex < count; datasetIndex++) { XYDataset dataset = getDataset(datasetIndex); if (dataset != null) { XYItemRenderer renderer = getRenderer(datasetIndex); if (renderer == null) { renderer = getRenderer(0); } if (renderer != null) { int seriesCount = dataset.getSeriesCount(); for (int i = 0; i < seriesCount; i++) {"
      },
      {
        "txt": "if (renderer.isSeriesVisible(i) && renderer.isSeriesVisibleInLegend(i)) { LegendItem item = renderer.getLegendItem( datasetIndex, i); if (item != null) { result.add(item); } } } }"
      },
      {
        "txt": "} } return result; } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof XYPlot)) { return false;"
      },
      {
        "txt": "} XYPlot that = (XYPlot) obj; if (this.weight != that.weight) { return false; } if (this.orientation != that.orientation) { return false; } if (!this.domainAxes.equals(that.domainAxes)) { return false;"
      },
      {
        "txt": "} if (!this.domainAxisLocations.equals(that.domainAxisLocations)) { return false; } if (this.rangeCrosshairLockedOnData != that.rangeCrosshairLockedOnData) { return false; } if (this.domainGridlinesVisible != that.domainGridlinesVisible) { return false;"
      },
      {
        "txt": "} if (this.rangeGridlinesVisible != that.rangeGridlinesVisible) { return false; } if (this.domainZeroBaselineVisible != that.domainZeroBaselineVisible) { return false; } if (this.rangeZeroBaselineVisible != that.rangeZeroBaselineVisible) { return false; }"
      },
      {
        "txt": "if (this.domainCrosshairVisible != that.domainCrosshairVisible) { return false; } if (this.domainCrosshairValue != that.domainCrosshairValue) { return false; } if (this.domainCrosshairLockedOnData != that.domainCrosshairLockedOnData) { return false; }"
      },
      {
        "txt": "if (this.rangeCrosshairVisible != that.rangeCrosshairVisible) { return false; } if (this.rangeCrosshairValue != that.rangeCrosshairValue) { return false; } if (!ObjectUtilities.equal(this.axisOffset, that.axisOffset)) { return false; } if (!ObjectUtilities.equal(this.renderers, that.renderers)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.rangeAxes, that.rangeAxes)) { return false; } if (!this.rangeAxisLocations.equals(that.rangeAxisLocations)) { return false; } if (!ObjectUtilities.equal(this.datasetToDomainAxisMap, that.datasetToDomainAxisMap)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.datasetToRangeAxisMap, that.datasetToRangeAxisMap)) { return false; } if (!ObjectUtilities.equal(this.domainGridlineStroke, that.domainGridlineStroke)) { return false; }"
      },
      {
        "txt": "if (!PaintUtilities.equal(this.domainGridlinePaint, that.domainGridlinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeGridlineStroke, that.rangeGridlineStroke)) { return false; } if (!PaintUtilities.equal(this.rangeGridlinePaint, that.rangeGridlinePaint)) {"
      },
      {
        "txt": "return false; } if (!PaintUtilities.equal(this.domainZeroBaselinePaint, that.domainZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.domainZeroBaselineStroke, that.domainZeroBaselineStroke)) { return false; }"
      },
      {
        "txt": "if (!PaintUtilities.equal(this.rangeZeroBaselinePaint, that.rangeZeroBaselinePaint)) { return false; } if (!ObjectUtilities.equal(this.rangeZeroBaselineStroke, that.rangeZeroBaselineStroke)) { return false; } if (!ObjectUtilities.equal(this.domainCrosshairStroke, that.domainCrosshairStroke)) {"
      },
      {
        "txt": "return false; } if (!PaintUtilities.equal(this.domainCrosshairPaint, that.domainCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.rangeCrosshairStroke, that.rangeCrosshairStroke)) { return false; }"
      },
      {
        "txt": "if (!PaintUtilities.equal(this.rangeCrosshairPaint, that.rangeCrosshairPaint)) { return false; } if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; }"
      },
      {
        "txt": "if (!ObjectUtilities.equal(this.foregroundDomainMarkers, that.foregroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.backgroundDomainMarkers, that.backgroundDomainMarkers)) { return false; } if (!ObjectUtilities.equal(this.foregroundRangeMarkers, that.foregroundRangeMarkers)) {"
      },
      {
        "txt": "return false; } if (!ObjectUtilities.equal(this.backgroundRangeMarkers, that.backgroundRangeMarkers)) { return false; } if (!ObjectUtilities.equal(this.annotations, that.annotations)) { return false; } if (!PaintUtilities.equal(this.domainTickBandPaint,"
      },
      {
        "txt": "that.domainTickBandPaint)) { return false; } if (!PaintUtilities.equal(this.rangeTickBandPaint, that.rangeTickBandPaint)) { return false; } if (!this.quadrantOrigin.equals(that.quadrantOrigin)) { return false; }"
      },
      {
        "txt": "for (int i = 0; i < 4; i++) { if (!PaintUtilities.equal(this.quadrantPaint[i], that.quadrantPaint[i])) { return false; } } return super.equals(obj); } public Object clone() throws CloneNotSupportedException { XYPlot clone = (XYPlot) super.clone();"
      },
      {
        "txt": "clone.domainAxes = (ObjectList) ObjectUtilities.clone(this.domainAxes); for (int i = 0; i < this.domainAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.domainAxes.get(i); if (axis != null) { ValueAxis clonedAxis = (ValueAxis) axis.clone(); clone.domainAxes.set(i, clonedAxis); clonedAxis.setPlot(clone); clonedAxis.addChangeListener(clone); } }"
      },
      {
        "txt": "clone.domainAxisLocations = (ObjectList) this.domainAxisLocations.clone(); clone.rangeAxes = (ObjectList) ObjectUtilities.clone(this.rangeAxes); for (int i = 0; i < this.rangeAxes.size(); i++) { ValueAxis axis = (ValueAxis) this.rangeAxes.get(i); if (axis != null) { ValueAxis clonedAxis = (ValueAxis) axis.clone(); clone.rangeAxes.set(i, clonedAxis); clonedAxis.setPlot(clone); clonedAxis.addChangeListener(clone);"
      },
      {
        "txt": "} } clone.rangeAxisLocations = (ObjectList) ObjectUtilities.clone( this.rangeAxisLocations); clone.datasets = (ObjectList) ObjectUtilities.clone(this.datasets); for (int i = 0; i < clone.datasets.size(); ++i) { XYDataset d = getDataset(i); if (d != null) { d.addChangeListener(clone); }"
      },
      {
        "txt": "} clone.datasetToDomainAxisMap = new TreeMap(); clone.datasetToDomainAxisMap.putAll(this.datasetToDomainAxisMap); clone.datasetToRangeAxisMap = new TreeMap(); clone.datasetToRangeAxisMap.putAll(this.datasetToRangeAxisMap); clone.renderers = (ObjectList) ObjectUtilities.clone(this.renderers); for (int i = 0; i < this.renderers.size(); i++) { XYItemRenderer renderer2 = (XYItemRenderer) this.renderers.get(i); if (renderer2 instanceof PublicCloneable) { PublicCloneable pc = (PublicCloneable) renderer2;"
      },
      {
        "txt": "clone.renderers.set(i, pc.clone()); } } clone.foregroundDomainMarkers = (Map) ObjectUtilities.clone( this.foregroundDomainMarkers); clone.backgroundDomainMarkers = (Map) ObjectUtilities.clone( this.backgroundDomainMarkers); clone.foregroundRangeMarkers = (Map) ObjectUtilities.clone( this.foregroundRangeMarkers); clone.backgroundRangeMarkers = (Map) ObjectUtilities.clone("
      },
      {
        "txt": "this.backgroundRangeMarkers); clone.annotations = (List) ObjectUtilities.deepClone(this.annotations); if (this.fixedDomainAxisSpace != null) { clone.fixedDomainAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedDomainAxisSpace); } if (this.fixedRangeAxisSpace != null) { clone.fixedRangeAxisSpace = (AxisSpace) ObjectUtilities.clone( this.fixedRangeAxisSpace); }"
      },
      {
        "txt": "clone.quadrantOrigin = (Point2D) ObjectUtilities.clone( this.quadrantOrigin); clone.quadrantPaint = (Paint[]) this.quadrantPaint.clone(); return clone; } private void writeObject(ObjectOutputStream stream) throws IOException { stream.defaultWriteObject(); SerialUtilities.writeStroke(this.domainGridlineStroke, stream); SerialUtilities.writePaint(this.domainGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeGridlineStroke, stream);"
      },
      {
        "txt": "SerialUtilities.writePaint(this.rangeGridlinePaint, stream); SerialUtilities.writeStroke(this.rangeZeroBaselineStroke, stream); SerialUtilities.writePaint(this.rangeZeroBaselinePaint, stream); SerialUtilities.writeStroke(this.domainCrosshairStroke, stream); SerialUtilities.writePaint(this.domainCrosshairPaint, stream); SerialUtilities.writeStroke(this.rangeCrosshairStroke, stream); SerialUtilities.writePaint(this.rangeCrosshairPaint, stream); SerialUtilities.writePaint(this.domainTickBandPaint, stream); SerialUtilities.writePaint(this.rangeTickBandPaint, stream); SerialUtilities.writePoint2D(this.quadrantOrigin, stream);"
      },
      {
        "txt": "for (int i = 0; i < 4; i++) { SerialUtilities.writePaint(this.quadrantPaint[i], stream); } SerialUtilities.writeStroke(this.domainZeroBaselineStroke, stream); SerialUtilities.writePaint(this.domainZeroBaselinePaint, stream); } private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException { stream.defaultReadObject(); this.domainGridlineStroke = SerialUtilities.readStroke(stream);"
      },
      {
        "txt": "this.domainGridlinePaint = SerialUtilities.readPaint(stream); this.rangeGridlineStroke = SerialUtilities.readStroke(stream); this.rangeGridlinePaint = SerialUtilities.readPaint(stream); this.rangeZeroBaselineStroke = SerialUtilities.readStroke(stream); this.rangeZeroBaselinePaint = SerialUtilities.readPaint(stream); this.domainCrosshairStroke = SerialUtilities.readStroke(stream); this.domainCrosshairPaint = SerialUtilities.readPaint(stream); this.rangeCrosshairStroke = SerialUtilities.readStroke(stream); this.rangeCrosshairPaint = SerialUtilities.readPaint(stream); this.domainTickBandPaint = SerialUtilities.readPaint(stream);"
      },
      {
        "txt": "this.rangeTickBandPaint = SerialUtilities.readPaint(stream); this.quadrantOrigin = SerialUtilities.readPoint2D(stream); this.quadrantPaint = new Paint[4]; for (int i = 0; i < 4; i++) { this.quadrantPaint[i] = SerialUtilities.readPaint(stream); } this.domainZeroBaselineStroke = SerialUtilities.readStroke(stream); this.domainZeroBaselinePaint = SerialUtilities.readPaint(stream); int domainAxisCount = this.domainAxes.size(); for (int i = 0; i < domainAxisCount; i++) {"
      },
      {
        "txt": "Axis axis = (Axis) this.domainAxes.get(i); if (axis != null) { axis.setPlot(this); axis.addChangeListener(this); } } int rangeAxisCount = this.rangeAxes.size(); for (int i = 0; i < rangeAxisCount; i++) { Axis axis = (Axis) this.rangeAxes.get(i); if (axis != null) {"
      },
      {
        "txt": "axis.setPlot(this); axis.addChangeListener(this); } } int datasetCount = this.datasets.size(); for (int i = 0; i < datasetCount; i++) { Dataset dataset = (Dataset) this.datasets.get(i); if (dataset != null) { dataset.addChangeListener(this); }"
      },
      {
        "txt": "} int rendererCount = this.renderers.size(); for (int i = 0; i < rendererCount; i++) { XYItemRenderer renderer = (XYItemRenderer) this.renderers.get(i); if (renderer != null) { renderer.addChangeListener(this); } } }"
      }
    ]
  }
]
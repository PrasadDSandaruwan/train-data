[
  {
    "id": 34,
    "file_path": "source/org/jfree/data/DefaultKeyedValues.java",
    "start-bug-line": 318,
    "end-bug-line": 318,
    "bug": "if (index < this.keys.size()) {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.HashMap; import java.util.List; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.SortOrder; public class DefaultKeyedValues implements KeyedValues, Cloneable, PublicCloneable, Serializable {"
      },
      {
        "txt": "private static final long serialVersionUID = 8468154364608194797L; private ArrayList keys; private ArrayList values; private HashMap indexMap; public DefaultKeyedValues() { this.keys = new ArrayList(); this.values = new ArrayList(); this.indexMap = new HashMap(); } public int getItemCount() {"
      },
      {
        "txt": "return this.indexMap.size(); } public Number getValue(int item) { return (Number) this.values.get(item); } public Comparable getKey(int index) { return (Comparable) this.keys.get(index); } public int getIndex(Comparable key) { if (key == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'key' argument.\"); } final Integer i = (Integer) this.indexMap.get(key); if (i == null) { return -1; // key not found } return i.intValue(); } public List getKeys() { return (List) this.keys.clone();"
      },
      {
        "txt": "} public Number getValue(Comparable key) { int index = getIndex(key); if (index < 0) { throw new UnknownKeyException(\"Key not found: \" + key); } return getValue(index); } public void addValue(Comparable key, double value) { addValue(key, new Double(value));"
      },
      {
        "txt": "} public void addValue(Comparable key, Number value) { setValue(key, value); } public void setValue(Comparable key, double value) { setValue(key, new Double(value)); } public void setValue(Comparable key, Number value) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\");"
      },
      {
        "txt": "} int keyIndex = getIndex(key); if (keyIndex >= 0) { this.keys.set(keyIndex, key); this.values.set(keyIndex, value); } else { this.keys.add(key); this.values.add(value); this.indexMap.put(key, new Integer(this.keys.size() - 1));"
      },
      {
        "txt": "} } public void insertValue(int position, Comparable key, double value) { insertValue(position, key, new Double(value)); } public void insertValue(int position, Comparable key, Number value) { if (position < 0 || position > getItemCount()) { throw new IllegalArgumentException(\"'position' out of bounds.\"); } if (key == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Null 'key' argument.\"); } int pos = getIndex(key); if (pos == position) { this.keys.set(pos, key); this.values.set(pos, value); } else { if (pos >= 0) { this.keys.remove(pos);"
      },
      {
        "txt": "this.values.remove(pos); } this.keys.add(position, key); this.values.add(position, value); rebuildIndex(); } } private void rebuildIndex () { this.indexMap.clear(); for (int i = 0; i < this.keys.size(); i++) {"
      },
      {
        "txt": "this.indexMap.put(key, new Integer(i)); } } public void removeValue(int index) { this.keys.remove(index); this.values.remove(index); <extra_id_0> rebuildIndex(); } } public void removeValue(Comparable key) { int index = getIndex(key); if (index < 0) {"
      },
      {
        "txt": "int index = getIndex(key); if (index < 0) { return; } removeValue(index); } public void clear() { this.keys.clear(); this.values.clear(); this.indexMap.clear();"
      },
      {
        "txt": "} public void sortByKeys(SortOrder order) { final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); } Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order);"
      },
      {
        "txt": "Arrays.sort(data, comparator); clear(); for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i]; addValue(value.getKey(), value.getValue()); } } public void sortByValues(SortOrder order) { final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size];"
      },
      {
        "txt": "for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); } Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order); Arrays.sort(data, comparator); clear(); for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i];"
      },
      {
        "txt": "addValue(value.getKey(), value.getValue()); } } public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedValues)) { return false; }"
      },
      {
        "txt": "KeyedValues that = (KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) { return false; } for (int i = 0; i < count; i++) { Comparable k1 = getKey(i); Comparable k2 = that.getKey(i); if (!k1.equals(k2)) { return false;"
      },
      {
        "txt": "} Number v1 = getValue(i); Number v2 = that.getValue(i); if (v1 == null) { if (v2 != null) { return false; } } else { if (!v1.equals(v2)) {"
      },
      {
        "txt": "return false; } } } return true; } public int hashCode() { return (this.keys != null ? this.keys.hashCode() : 0); } public Object clone() throws CloneNotSupportedException {"
      },
      {
        "txt": "DefaultKeyedValues clone = (DefaultKeyedValues) super.clone(); clone.keys = (ArrayList) this.keys.clone(); clone.values = (ArrayList) this.values.clone(); clone.indexMap = (HashMap) this.indexMap.clone(); return clone; }"
      }
    ]
  },
  {
    "id": 35,
    "file_path": "source/org/jfree/data/DefaultKeyedValues.java",
    "start-bug-line": 320,
    "end-bug-line": 320,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.ArrayList; import java.util.Arrays;"
      },
      {
        "txt": "import java.util.Comparator; import java.util.HashMap; import java.util.List; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.SortOrder; public class DefaultKeyedValues implements KeyedValues, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 8468154364608194797L; private ArrayList keys;"
      },
      {
        "txt": "private ArrayList values; private HashMap indexMap; public DefaultKeyedValues() { this.keys = new ArrayList(); this.values = new ArrayList(); this.indexMap = new HashMap(); } public int getItemCount() { return this.indexMap.size(); }"
      },
      {
        "txt": "public Number getValue(int item) { return (Number) this.values.get(item); } public Comparable getKey(int index) { return (Comparable) this.keys.get(index); } public int getIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); }"
      },
      {
        "txt": "final Integer i = (Integer) this.indexMap.get(key); if (i == null) { return -1; // key not found } return i.intValue(); } public List getKeys() { return (List) this.keys.clone(); } public Number getValue(Comparable key) {"
      },
      {
        "txt": "int index = getIndex(key); if (index < 0) { throw new UnknownKeyException(\"Key not found: \" + key); } return getValue(index); } public void addValue(Comparable key, double value) { addValue(key, new Double(value)); } public void addValue(Comparable key, Number value) {"
      },
      {
        "txt": "setValue(key, value); } public void setValue(Comparable key, double value) { setValue(key, new Double(value)); } public void setValue(Comparable key, Number value) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } int keyIndex = getIndex(key);"
      },
      {
        "txt": "if (keyIndex >= 0) { this.keys.set(keyIndex, key); this.values.set(keyIndex, value); } else { this.keys.add(key); this.values.add(value); this.indexMap.put(key, new Integer(this.keys.size() - 1)); } }"
      },
      {
        "txt": "public void insertValue(int position, Comparable key, double value) { insertValue(position, key, new Double(value)); } public void insertValue(int position, Comparable key, Number value) { if (position < 0 || position > getItemCount()) { throw new IllegalArgumentException(\"'position' out of bounds.\"); } if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); }"
      },
      {
        "txt": "int pos = getIndex(key); if (pos == position) { this.keys.set(pos, key); this.values.set(pos, value); } else { if (pos >= 0) { this.keys.remove(pos); this.values.remove(pos); }"
      },
      {
        "txt": "this.keys.add(position, key); this.values.add(position, value); rebuildIndex(); } } private void rebuildIndex () { this.indexMap.clear(); for (int i = 0; i < this.keys.size(); i++) { final Object key = this.keys.get(i); this.indexMap.put(key, new Integer(i));"
      },
      {
        "txt": "} public void removeValue(int index) { this.keys.remove(index); this.values.remove(index); if (index < this.keys.size()) { rebuildIndex(); <extra_id_0> } public void removeValue(Comparable key) { int index = getIndex(key); if (index < 0) { return; }"
      },
      {
        "txt": "return; } removeValue(index); } public void clear() { this.keys.clear(); this.values.clear(); this.indexMap.clear(); } public void sortByKeys(SortOrder order) {"
      },
      {
        "txt": "final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); } Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order); Arrays.sort(data, comparator); clear();"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i]; addValue(value.getKey(), value.getValue()); } } public void sortByValues(SortOrder order) { final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i),"
      },
      {
        "txt": "(Number) this.values.get(i)); } Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order); Arrays.sort(data, comparator); clear(); for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i]; addValue(value.getKey(), value.getValue()); }"
      },
      {
        "txt": "} public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof KeyedValues)) { return false; } KeyedValues that = (KeyedValues) obj; int count = getItemCount();"
      },
      {
        "txt": "if (count != that.getItemCount()) { return false; } for (int i = 0; i < count; i++) { Comparable k1 = getKey(i); Comparable k2 = that.getKey(i); if (!k1.equals(k2)) { return false; } Number v1 = getValue(i);"
      },
      {
        "txt": "Number v2 = that.getValue(i); if (v1 == null) { if (v2 != null) { return false; } } else { if (!v1.equals(v2)) { return false; }"
      },
      {
        "txt": "} } return true; } public int hashCode() { return (this.keys != null ? this.keys.hashCode() : 0); } public Object clone() throws CloneNotSupportedException { DefaultKeyedValues clone = (DefaultKeyedValues) super.clone(); clone.keys = (ArrayList) this.keys.clone();"
      },
      {
        "txt": "clone.values = (ArrayList) this.values.clone(); clone.indexMap = (HashMap) this.indexMap.clone(); return clone; }"
      }
    ]
  },
  {
    "id": 36,
    "file_path": "source/org/jfree/data/DefaultKeyedValues.java",
    "start-bug-line": 335,
    "end-bug-line": 335,
    "bug": "return;",
    "fix": "throw new UnknownKeyException(\"The key (\" + key + \") is not recognised.\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.ArrayList; import java.util.Arrays; import java.util.Comparator; import java.util.HashMap; import java.util.List; import org.jfree.chart.util.PublicCloneable; import org.jfree.chart.util.SortOrder;"
      },
      {
        "txt": "public class DefaultKeyedValues implements KeyedValues, Cloneable, PublicCloneable, Serializable { private static final long serialVersionUID = 8468154364608194797L; private ArrayList keys; private ArrayList values; private HashMap indexMap; public DefaultKeyedValues() { this.keys = new ArrayList(); this.values = new ArrayList();"
      },
      {
        "txt": "this.indexMap = new HashMap(); } public int getItemCount() { return this.indexMap.size(); } public Number getValue(int item) { return (Number) this.values.get(item); } public Comparable getKey(int index) { return (Comparable) this.keys.get(index);"
      },
      {
        "txt": "} public int getIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } final Integer i = (Integer) this.indexMap.get(key); if (i == null) { return -1; // key not found } return i.intValue();"
      },
      {
        "txt": "} public List getKeys() { return (List) this.keys.clone(); } public Number getValue(Comparable key) { int index = getIndex(key); if (index < 0) { throw new UnknownKeyException(\"Key not found: \" + key); } return getValue(index);"
      },
      {
        "txt": "} public void addValue(Comparable key, double value) { addValue(key, new Double(value)); } public void addValue(Comparable key, Number value) { setValue(key, value); } public void setValue(Comparable key, double value) { setValue(key, new Double(value)); }"
      },
      {
        "txt": "public void setValue(Comparable key, Number value) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } int keyIndex = getIndex(key); if (keyIndex >= 0) { this.keys.set(keyIndex, key); this.values.set(keyIndex, value); } else {"
      },
      {
        "txt": "this.keys.add(key); this.values.add(value); this.indexMap.put(key, new Integer(this.keys.size() - 1)); } } public void insertValue(int position, Comparable key, double value) { insertValue(position, key, new Double(value)); } public void insertValue(int position, Comparable key, Number value) { if (position < 0 || position > getItemCount()) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"'position' out of bounds.\"); } if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } int pos = getIndex(key); if (pos == position) { this.keys.set(pos, key); this.values.set(pos, value); }"
      },
      {
        "txt": "else { if (pos >= 0) { this.keys.remove(pos); this.values.remove(pos); } this.keys.add(position, key); this.values.add(position, value); rebuildIndex(); } }"
      },
      {
        "txt": "private void rebuildIndex () { this.indexMap.clear(); for (int i = 0; i < this.keys.size(); i++) { final Object key = this.keys.get(i); this.indexMap.put(key, new Integer(i)); } } public void removeValue(int index) { this.keys.remove(index); this.values.remove(index);"
      },
      {
        "txt": "rebuildIndex(); } } public void removeValue(Comparable key) { int index = getIndex(key); if (index < 0) { <extra_id_0> } removeValue(index); } public void clear() { this.keys.clear(); this.values.clear();"
      },
      {
        "txt": "this.keys.clear(); this.values.clear(); this.indexMap.clear(); } public void sortByKeys(SortOrder order) { final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i));"
      },
      {
        "txt": "} Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_KEY, order); Arrays.sort(data, comparator); clear(); for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i]; addValue(value.getKey(), value.getValue()); } }"
      },
      {
        "txt": "public void sortByValues(SortOrder order) { final int size = this.keys.size(); final DefaultKeyedValue[] data = new DefaultKeyedValue[size]; for (int i = 0; i < size; i++) { data[i] = new DefaultKeyedValue((Comparable) this.keys.get(i), (Number) this.values.get(i)); } Comparator comparator = new KeyedValueComparator( KeyedValueComparatorType.BY_VALUE, order); Arrays.sort(data, comparator);"
      },
      {
        "txt": "clear(); for (int i = 0; i < data.length; i++) { final DefaultKeyedValue value = data[i]; addValue(value.getKey(), value.getValue()); } } public boolean equals(Object obj) { if (obj == this) { return true; }"
      },
      {
        "txt": "if (!(obj instanceof KeyedValues)) { return false; } KeyedValues that = (KeyedValues) obj; int count = getItemCount(); if (count != that.getItemCount()) { return false; } for (int i = 0; i < count; i++) { Comparable k1 = getKey(i);"
      },
      {
        "txt": "Comparable k2 = that.getKey(i); if (!k1.equals(k2)) { return false; } Number v1 = getValue(i); Number v2 = that.getValue(i); if (v1 == null) { if (v2 != null) { return false; }"
      },
      {
        "txt": "} else { if (!v1.equals(v2)) { return false; } } } return true; } public int hashCode() {"
      },
      {
        "txt": "return (this.keys != null ? this.keys.hashCode() : 0); } public Object clone() throws CloneNotSupportedException { DefaultKeyedValues clone = (DefaultKeyedValues) super.clone(); clone.keys = (ArrayList) this.keys.clone(); clone.values = (ArrayList) this.values.clone(); clone.indexMap = (HashMap) this.indexMap.clone(); return clone; }"
      }
    ]
  },
  {
    "id": 37,
    "file_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
    "start-bug-line": 455,
    "end-bug-line": 455,
    "bug": "",
    "fix": "if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } if (!this.columnKeys.contains(columnKey)) { throw new UnknownKeyException(\"Unknown key: \" + columnKey); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PublicCloneable; public class DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable, Cloneable, Serializable { private static final long serialVersionUID = -5514169970951994748L; private List rowKeys; private List columnKeys; private List rows; private boolean sortRowKeys;"
      },
      {
        "txt": "public DefaultKeyedValues2D() { this(false); } public DefaultKeyedValues2D(boolean sortRowKeys) { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys; } public int getRowCount() {"
      },
      {
        "txt": "return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size(); } public Number getValue(int row, int column) { Number result = null; DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column);"
      },
      {
        "txt": "int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getValue(index); } } return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); }"
      },
      {
        "txt": "public int getRowIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } if (this.sortRowKeys) { return Collections.binarySearch(this.rowKeys, key); } else { return this.rowKeys.indexOf(key); }"
      },
      {
        "txt": "} public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); } public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\");"
      },
      {
        "txt": "} return this.columnKeys.indexOf(key); } public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Number getValue(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); }"
      },
      {
        "txt": "if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } if (!(this.columnKeys.contains(columnKey))) { throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey); } int row = getRowIndex(rowKey); if (row >= 0) { DefaultKeyedValues rowData"
      },
      {
        "txt": "= (DefaultKeyedValues) this.rows.get(row); int col = rowData.getIndex(columnKey); return (col >= 0 ? rowData.getValue(col) : null); } else { throw new UnknownKeyException(\"Unrecognised rowKey: \" + rowKey); } } public void addValue(Number value, Comparable rowKey, Comparable columnKey) {"
      },
      {
        "txt": "setValue(value, rowKey, columnKey); } public void setValue(Number value, Comparable rowKey, Comparable columnKey) { DefaultKeyedValues row; int rowIndex = getRowIndex(rowKey); if (rowIndex >= 0) { row = (DefaultKeyedValues) this.rows.get(rowIndex); } else {"
      },
      {
        "txt": "row = new DefaultKeyedValues(); if (this.sortRowKeys) { rowIndex = -rowIndex - 1; this.rowKeys.add(rowIndex, rowKey); this.rows.add(rowIndex, row); } else { this.rowKeys.add(rowKey); this.rows.add(row); }"
      },
      {
        "txt": "} row.setValue(columnKey, value); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) { this.columnKeys.add(columnKey); } } public void removeValue(Comparable rowKey, Comparable columnKey) { setValue(null, rowKey, columnKey); boolean allNull = true;"
      },
      {
        "txt": "int rowIndex = getRowIndex(rowKey); DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) { if (row.getValue(item) != null) { allNull = false; break; } } if (allNull) {"
      },
      {
        "txt": "this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0 && row.getValue(columnIndex) != null) { allNull = false;"
      },
      {
        "txt": "break; } } if (allNull) { for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0) { row.removeValue(columnIndex);"
      },
      {
        "txt": "} } this.columnKeys.remove(columnKey); } } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) {"
      },
      {
        "txt": "} public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex); removeColumn(columnKey); } public void removeColumn(Comparable columnKey) { <extra_id_0> while (iterator.hasNext()) { DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next(); rowData.removeValue(columnKey); } this.columnKeys.remove(columnKey); }"
      },
      {
        "txt": "this.columnKeys.remove(columnKey); } public void clear() { this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear(); } public boolean equals(Object o) { if (o == null) { return false;"
      },
      {
        "txt": "} if (o == this) { return true; } if (!(o instanceof KeyedValues2D)) { return false; } KeyedValues2D kv2D = (KeyedValues2D) o; if (!getRowKeys().equals(kv2D.getRowKeys())) { return false;"
      },
      {
        "txt": "} if (!getColumnKeys().equals(kv2D.getColumnKeys())) { return false; } int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) { return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) {"
      },
      {
        "txt": "return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) { Number v1 = getValue(r, c); Number v2 = kv2D.getValue(r, c); if (v1 == null) { if (v2 != null) { return false; }"
      },
      {
        "txt": "} else { if (!v1.equals(v2)) { return false; } } } } return true; }"
      },
      {
        "txt": "public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys);"
      },
      {
        "txt": "clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = (List) ObjectUtilities.deepClone(this.rows); return clone; }"
      }
    ]
  },
  {
    "id": 38,
    "file_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
    "start-bug-line": 458,
    "end-bug-line": 458,
    "bug": "",
    "fix": "int index = rowData.getIndex(columnKey); if (index >= 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PublicCloneable; public class DefaultKeyedValues2D implements KeyedValues2D,"
      },
      {
        "txt": "PublicCloneable, Cloneable, Serializable { private static final long serialVersionUID = -5514169970951994748L; private List rowKeys; private List columnKeys; private List rows; private boolean sortRowKeys; public DefaultKeyedValues2D() { this(false); }"
      },
      {
        "txt": "public DefaultKeyedValues2D(boolean sortRowKeys) { this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys; } public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() {"
      },
      {
        "txt": "return this.columnKeys.size(); } public Number getValue(int row, int column) { Number result = null; DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column); int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getValue(index);"
      },
      {
        "txt": "} } return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\");"
      },
      {
        "txt": "} if (this.sortRowKeys) { return Collections.binarySearch(this.rowKeys, key); } else { return this.rowKeys.indexOf(key); } } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys);"
      },
      {
        "txt": "} public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } return this.columnKeys.indexOf(key); }"
      },
      {
        "txt": "public List getColumnKeys() { return Collections.unmodifiableList(this.columnKeys); } public Number getValue(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); }"
      },
      {
        "txt": "if (!(this.columnKeys.contains(columnKey))) { throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey); } int row = getRowIndex(rowKey); if (row >= 0) { DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); int col = rowData.getIndex(columnKey); return (col >= 0 ? rowData.getValue(col) : null);"
      },
      {
        "txt": "} else { throw new UnknownKeyException(\"Unrecognised rowKey: \" + rowKey); } } public void addValue(Number value, Comparable rowKey, Comparable columnKey) { setValue(value, rowKey, columnKey); } public void setValue(Number value, Comparable rowKey,"
      },
      {
        "txt": "Comparable columnKey) { DefaultKeyedValues row; int rowIndex = getRowIndex(rowKey); if (rowIndex >= 0) { row = (DefaultKeyedValues) this.rows.get(rowIndex); } else { row = new DefaultKeyedValues(); if (this.sortRowKeys) { rowIndex = -rowIndex - 1;"
      },
      {
        "txt": "this.rowKeys.add(rowIndex, rowKey); this.rows.add(rowIndex, row); } else { this.rowKeys.add(rowKey); this.rows.add(row); } } row.setValue(columnKey, value); int columnIndex = this.columnKeys.indexOf(columnKey);"
      },
      {
        "txt": "if (columnIndex < 0) { this.columnKeys.add(columnKey); } } public void removeValue(Comparable rowKey, Comparable columnKey) { setValue(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount;"
      },
      {
        "txt": "item++) { if (row.getValue(item) != null) { allNull = false; break; } } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); }"
      },
      {
        "txt": "allNull = true; for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0 && row.getValue(columnIndex) != null) { allNull = false; break; } }"
      },
      {
        "txt": "if (allNull) { for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0) { row.removeValue(columnIndex); } } this.columnKeys.remove(columnKey);"
      },
      {
        "txt": "} } public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) { removeRow(getRowIndex(rowKey)); } public void removeColumn(int columnIndex) {"
      },
      {
        "txt": "removeColumn(columnKey); } public void removeColumn(Comparable columnKey) { Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next(); <extra_id_0> } this.columnKeys.remove(columnKey); } public void clear() { this.rowKeys.clear(); this.columnKeys.clear();"
      },
      {
        "txt": "this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear(); } public boolean equals(Object o) { if (o == null) { return false; } if (o == this) { return true;"
      },
      {
        "txt": "} if (!(o instanceof KeyedValues2D)) { return false; } KeyedValues2D kv2D = (KeyedValues2D) o; if (!getRowKeys().equals(kv2D.getRowKeys())) { return false; } if (!getColumnKeys().equals(kv2D.getColumnKeys())) { return false;"
      },
      {
        "txt": "} int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) { return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) {"
      },
      {
        "txt": "for (int c = 0; c < colCount; c++) { Number v1 = getValue(r, c); Number v2 = kv2D.getValue(r, c); if (v1 == null) { if (v2 != null) { return false; } } else { if (!v1.equals(v2)) {"
      },
      {
        "txt": "return false; } } } } return true; } public int hashCode() { int result; result = this.rowKeys.hashCode();"
      },
      {
        "txt": "result = 29 * result + this.columnKeys.hashCode(); result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = (List) ObjectUtilities.deepClone(this.rows); return clone;"
      }
    ]
  },
  {
    "id": 39,
    "file_path": "source/org/jfree/data/DefaultKeyedValues2D.java",
    "start-bug-line": 459,
    "end-bug-line": 459,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data; import java.io.Serializable; import java.util.Collections; import java.util.Iterator; import java.util.List; import org.jfree.chart.util.ObjectUtilities; import org.jfree.chart.util.PublicCloneable; public class DefaultKeyedValues2D implements KeyedValues2D, PublicCloneable, Cloneable,"
      },
      {
        "txt": "Serializable { private static final long serialVersionUID = -5514169970951994748L; private List rowKeys; private List columnKeys; private List rows; private boolean sortRowKeys; public DefaultKeyedValues2D() { this(false); } public DefaultKeyedValues2D(boolean sortRowKeys) {"
      },
      {
        "txt": "this.rowKeys = new java.util.ArrayList(); this.columnKeys = new java.util.ArrayList(); this.rows = new java.util.ArrayList(); this.sortRowKeys = sortRowKeys; } public int getRowCount() { return this.rowKeys.size(); } public int getColumnCount() { return this.columnKeys.size();"
      },
      {
        "txt": "} public Number getValue(int row, int column) { Number result = null; DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); if (rowData != null) { Comparable columnKey = (Comparable) this.columnKeys.get(column); int index = rowData.getIndex(columnKey); if (index >= 0) { result = rowData.getValue(index); }"
      },
      {
        "txt": "} return result; } public Comparable getRowKey(int row) { return (Comparable) this.rowKeys.get(row); } public int getRowIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); }"
      },
      {
        "txt": "if (this.sortRowKeys) { return Collections.binarySearch(this.rowKeys, key); } else { return this.rowKeys.indexOf(key); } } public List getRowKeys() { return Collections.unmodifiableList(this.rowKeys); }"
      },
      {
        "txt": "public Comparable getColumnKey(int column) { return (Comparable) this.columnKeys.get(column); } public int getColumnIndex(Comparable key) { if (key == null) { throw new IllegalArgumentException(\"Null 'key' argument.\"); } return this.columnKeys.indexOf(key); } public List getColumnKeys() {"
      },
      {
        "txt": "return Collections.unmodifiableList(this.columnKeys); } public Number getValue(Comparable rowKey, Comparable columnKey) { if (rowKey == null) { throw new IllegalArgumentException(\"Null 'rowKey' argument.\"); } if (columnKey == null) { throw new IllegalArgumentException(\"Null 'columnKey' argument.\"); } if (!(this.columnKeys.contains(columnKey))) {"
      },
      {
        "txt": "throw new UnknownKeyException(\"Unrecognised columnKey: \" + columnKey); } int row = getRowIndex(rowKey); if (row >= 0) { DefaultKeyedValues rowData = (DefaultKeyedValues) this.rows.get(row); int col = rowData.getIndex(columnKey); return (col >= 0 ? rowData.getValue(col) : null); }"
      },
      {
        "txt": "else { throw new UnknownKeyException(\"Unrecognised rowKey: \" + rowKey); } } public void addValue(Number value, Comparable rowKey, Comparable columnKey) { setValue(value, rowKey, columnKey); } public void setValue(Number value, Comparable rowKey, Comparable columnKey) {"
      },
      {
        "txt": "DefaultKeyedValues row; int rowIndex = getRowIndex(rowKey); if (rowIndex >= 0) { row = (DefaultKeyedValues) this.rows.get(rowIndex); } else { row = new DefaultKeyedValues(); if (this.sortRowKeys) { rowIndex = -rowIndex - 1; this.rowKeys.add(rowIndex, rowKey);"
      },
      {
        "txt": "this.rows.add(rowIndex, row); } else { this.rowKeys.add(rowKey); this.rows.add(row); } } row.setValue(columnKey, value); int columnIndex = this.columnKeys.indexOf(columnKey); if (columnIndex < 0) {"
      },
      {
        "txt": "this.columnKeys.add(columnKey); } } public void removeValue(Comparable rowKey, Comparable columnKey) { setValue(null, rowKey, columnKey); boolean allNull = true; int rowIndex = getRowIndex(rowKey); DefaultKeyedValues row = (DefaultKeyedValues) this.rows.get(rowIndex); for (int item = 0, itemCount = row.getItemCount(); item < itemCount; item++) {"
      },
      {
        "txt": "if (row.getValue(item) != null) { allNull = false; break; } } if (allNull) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } allNull = true;"
      },
      {
        "txt": "for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0 && row.getValue(columnIndex) != null) { allNull = false; break; } } if (allNull) {"
      },
      {
        "txt": "for (int item = 0, itemCount = this.rows.size(); item < itemCount; item++) { row = (DefaultKeyedValues) this.rows.get(item); int columnIndex = row.getIndex(columnKey); if (columnIndex >= 0) { row.removeValue(columnIndex); } } this.columnKeys.remove(columnKey); }"
      },
      {
        "txt": "} public void removeRow(int rowIndex) { this.rowKeys.remove(rowIndex); this.rows.remove(rowIndex); } public void removeRow(Comparable rowKey) { removeRow(getRowIndex(rowKey)); } public void removeColumn(int columnIndex) { Comparable columnKey = getColumnKey(columnIndex);"
      },
      {
        "txt": "} public void removeColumn(Comparable columnKey) { Iterator iterator = this.rows.iterator(); while (iterator.hasNext()) { DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next(); rowData.removeValue(columnKey); <extra_id_0> this.columnKeys.remove(columnKey); } public void clear() { this.rowKeys.clear(); this.columnKeys.clear(); this.rows.clear();"
      },
      {
        "txt": "this.columnKeys.clear(); this.rows.clear(); } public boolean equals(Object o) { if (o == null) { return false; } if (o == this) { return true; }"
      },
      {
        "txt": "if (!(o instanceof KeyedValues2D)) { return false; } KeyedValues2D kv2D = (KeyedValues2D) o; if (!getRowKeys().equals(kv2D.getRowKeys())) { return false; } if (!getColumnKeys().equals(kv2D.getColumnKeys())) { return false; }"
      },
      {
        "txt": "int rowCount = getRowCount(); if (rowCount != kv2D.getRowCount()) { return false; } int colCount = getColumnCount(); if (colCount != kv2D.getColumnCount()) { return false; } for (int r = 0; r < rowCount; r++) { for (int c = 0; c < colCount; c++) {"
      },
      {
        "txt": "Number v1 = getValue(r, c); Number v2 = kv2D.getValue(r, c); if (v1 == null) { if (v2 != null) { return false; } } else { if (!v1.equals(v2)) { return false;"
      },
      {
        "txt": "} } } } return true; } public int hashCode() { int result; result = this.rowKeys.hashCode(); result = 29 * result + this.columnKeys.hashCode();"
      },
      {
        "txt": "result = 29 * result + this.rows.hashCode(); return result; } public Object clone() throws CloneNotSupportedException { DefaultKeyedValues2D clone = (DefaultKeyedValues2D) super.clone(); clone.columnKeys = new java.util.ArrayList(this.columnKeys); clone.rowKeys = new java.util.ArrayList(this.rowKeys); clone.rows = (List) ObjectUtilities.deepClone(this.rows); return clone; }"
      }
    ]
  }
]
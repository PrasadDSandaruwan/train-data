[
  {
    "id": 16,
    "file_path": "source/org/jfree/data/time/TimePeriodValues.java",
    "start-bug-line": 300,
    "end-bug-line": 300,
    "bug": "long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()",
    "fix": "long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data.time; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.jfree.chart.util.ObjectUtilities; import org.jfree.data.general.Series; import org.jfree.data.general.SeriesChangeEvent;"
      },
      {
        "txt": "import org.jfree.data.general.SeriesException; public class TimePeriodValues extends Series implements Serializable { static final long serialVersionUID = -2210593619794989709L; protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\"; protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\"; private String domain; private String range; private List data; private int minStartIndex = -1; private int maxStartIndex = -1;"
      },
      {
        "txt": "private int minMiddleIndex = -1; private int maxMiddleIndex = -1; private int minEndIndex = -1; private int maxEndIndex = -1; public TimePeriodValues(Comparable name) { this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION); } public TimePeriodValues(Comparable name, String domain, String range) { super(name); this.domain = domain;"
      },
      {
        "txt": "this.range = range; this.data = new ArrayList(); } public String getDomainDescription() { return this.domain; } public void setDomainDescription(String description) { String old = this.domain; this.domain = description; firePropertyChange(\"Domain\", old, description);"
      },
      {
        "txt": "} public String getRangeDescription() { return this.range; } public void setRangeDescription(String description) { String old = this.range; this.range = description; firePropertyChange(\"Range\", old, description); } public int getItemCount() {"
      },
      {
        "txt": "return this.data.size(); } public TimePeriodValue getDataItem(int index) { return (TimePeriodValue) this.data.get(index); } public TimePeriod getTimePeriod(int index) { return getDataItem(index).getPeriod(); } public Number getValue(int index) { return getDataItem(index).getValue();"
      },
      {
        "txt": "} public void add(TimePeriodValue item) { if (item == null) { throw new IllegalArgumentException(\"Null item not allowed.\"); } this.data.add(item); updateBounds(item.getPeriod(), this.data.size() - 1); fireSeriesChanged(); } private void updateBounds(TimePeriod period, int index) {"
      },
      {
        "txt": "long start = period.getStart().getTime(); long end = period.getEnd().getTime(); long middle = start + ((end - start) / 2); if (this.minStartIndex >= 0) { long minStart = getDataItem(this.minStartIndex).getPeriod() .getStart().getTime(); if (start < minStart) { this.minStartIndex = index; } }"
      },
      {
        "txt": "else { this.minStartIndex = index; } if (this.maxStartIndex >= 0) { long maxStart = getDataItem(this.maxStartIndex).getPeriod() .getStart().getTime(); if (start > maxStart) { this.maxStartIndex = index; } }"
      },
      {
        "txt": "else { this.maxStartIndex = index; } if (this.minMiddleIndex >= 0) { long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() .getTime(); long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() .getTime(); long minMiddle = s + (e - s) / 2; if (middle < minMiddle) {"
      },
      {
        "txt": "} } else { this.minMiddleIndex = index; } if (this.maxMiddleIndex >= 0) { <extra_id_0> .getTime(); long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() .getTime(); long maxMiddle = s + (e - s) / 2; if (middle > maxMiddle) { this.maxMiddleIndex = index;"
      },
      {
        "txt": "if (middle > maxMiddle) { this.maxMiddleIndex = index; } } else { this.maxMiddleIndex = index; } if (this.minEndIndex >= 0) { long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd() .getTime();"
      },
      {
        "txt": "if (end < minEnd) { this.minEndIndex = index; } } else { this.minEndIndex = index; } if (this.maxEndIndex >= 0) { long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd() .getTime();"
      },
      {
        "txt": "if (end > maxEnd) { this.maxEndIndex = index; } } else { this.maxEndIndex = index; } } private void recalculateBounds() { this.minStartIndex = -1;"
      },
      {
        "txt": "this.minMiddleIndex = -1; this.minEndIndex = -1; this.maxStartIndex = -1; this.maxMiddleIndex = -1; this.maxEndIndex = -1; for (int i = 0; i < this.data.size(); i++) { TimePeriodValue tpv = (TimePeriodValue) this.data.get(i); updateBounds(tpv.getPeriod(), i); } }"
      },
      {
        "txt": "public void add(TimePeriod period, double value) { TimePeriodValue item = new TimePeriodValue(period, value); add(item); } public void add(TimePeriod period, Number value) { TimePeriodValue item = new TimePeriodValue(period, value); add(item); } public void update(int index, Number value) { TimePeriodValue item = getDataItem(index);"
      },
      {
        "txt": "item.setValue(value); fireSeriesChanged(); } public void delete(int start, int end) { for (int i = 0; i <= (end - start); i++) { this.data.remove(start); } recalculateBounds(); fireSeriesChanged(); }"
      },
      {
        "txt": "public boolean equals(Object obj) { if (obj == this) { return true; } if (!(obj instanceof TimePeriodValues)) { return false; } if (!super.equals(obj)) { return false; }"
      },
      {
        "txt": "TimePeriodValues that = (TimePeriodValues) obj; if (!ObjectUtilities.equal(this.getDomainDescription(), that.getDomainDescription())) { return false; } if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) { return false; } int count = getItemCount();"
      },
      {
        "txt": "if (count != that.getItemCount()) { return false; } for (int i = 0; i < count; i++) { if (!getDataItem(i).equals(that.getDataItem(i))) { return false; } } return true; }"
      },
      {
        "txt": "public int hashCode() { int result; result = (this.domain != null ? this.domain.hashCode() : 0); result = 29 * result + (this.range != null ? this.range.hashCode() : 0); result = 29 * result + this.data.hashCode(); result = 29 * result + this.minStartIndex; result = 29 * result + this.maxStartIndex; result = 29 * result + this.minMiddleIndex; result = 29 * result + this.maxMiddleIndex; result = 29 * result + this.minEndIndex;"
      },
      {
        "txt": "result = 29 * result + this.maxEndIndex; return result; } public Object clone() throws CloneNotSupportedException { Object clone = createCopy(0, getItemCount() - 1); return clone; } public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException { TimePeriodValues copy = (TimePeriodValues) super.clone();"
      },
      {
        "txt": "copy.data = new ArrayList(); if (this.data.size() > 0) { for (int index = start; index <= end; index++) { TimePeriodValue item = (TimePeriodValue) this.data.get(index); TimePeriodValue clone = (TimePeriodValue) item.clone(); try { copy.add(clone); } catch (SeriesException e) { System.err.println(\"Failed to add cloned item.\");"
      },
      {
        "txt": "} } } return copy; } public int getMinStartIndex() { return this.minStartIndex; } public int getMaxStartIndex() { return this.maxStartIndex;"
      },
      {
        "txt": "} public int getMinMiddleIndex() { return this.minMiddleIndex; } public int getMaxMiddleIndex() { return this.maxMiddleIndex; } public int getMinEndIndex() { return this.minEndIndex; }"
      },
      {
        "txt": "public int getMaxEndIndex() { return this.maxEndIndex; }"
      }
    ]
  },
  {
    "id": 17,
    "file_path": "source/org/jfree/data/time/TimePeriodValues.java",
    "start-bug-line": 302,
    "end-bug-line": 302,
    "bug": "long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()",
    "fix": "long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jfree.data.time; import java.io.Serializable; import java.util.ArrayList; import java.util.List; import org.jfree.chart.util.ObjectUtilities; import org.jfree.data.general.Series; import org.jfree.data.general.SeriesChangeEvent; import org.jfree.data.general.SeriesException; public class TimePeriodValues extends Series implements Serializable {"
      },
      {
        "txt": "static final long serialVersionUID = -2210593619794989709L; protected static final String DEFAULT_DOMAIN_DESCRIPTION = \"Time\"; protected static final String DEFAULT_RANGE_DESCRIPTION = \"Value\"; private String domain; private String range; private List data; private int minStartIndex = -1; private int maxStartIndex = -1; private int minMiddleIndex = -1; private int maxMiddleIndex = -1;"
      },
      {
        "txt": "private int minEndIndex = -1; private int maxEndIndex = -1; public TimePeriodValues(Comparable name) { this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION); } public TimePeriodValues(Comparable name, String domain, String range) { super(name); this.domain = domain; this.range = range; this.data = new ArrayList();"
      },
      {
        "txt": "} public String getDomainDescription() { return this.domain; } public void setDomainDescription(String description) { String old = this.domain; this.domain = description; firePropertyChange(\"Domain\", old, description); } public String getRangeDescription() {"
      },
      {
        "txt": "return this.range; } public void setRangeDescription(String description) { String old = this.range; this.range = description; firePropertyChange(\"Range\", old, description); } public int getItemCount() { return this.data.size(); }"
      },
      {
        "txt": "public TimePeriodValue getDataItem(int index) { return (TimePeriodValue) this.data.get(index); } public TimePeriod getTimePeriod(int index) { return getDataItem(index).getPeriod(); } public Number getValue(int index) { return getDataItem(index).getValue(); } public void add(TimePeriodValue item) {"
      },
      {
        "txt": "if (item == null) { throw new IllegalArgumentException(\"Null item not allowed.\"); } this.data.add(item); updateBounds(item.getPeriod(), this.data.size() - 1); fireSeriesChanged(); } private void updateBounds(TimePeriod period, int index) { long start = period.getStart().getTime(); long end = period.getEnd().getTime();"
      },
      {
        "txt": "long middle = start + ((end - start) / 2); if (this.minStartIndex >= 0) { long minStart = getDataItem(this.minStartIndex).getPeriod() .getStart().getTime(); if (start < minStart) { this.minStartIndex = index; } } else { this.minStartIndex = index;"
      },
      {
        "txt": "} if (this.maxStartIndex >= 0) { long maxStart = getDataItem(this.maxStartIndex).getPeriod() .getStart().getTime(); if (start > maxStart) { this.maxStartIndex = index; } } else { this.maxStartIndex = index;"
      },
      {
        "txt": "} if (this.minMiddleIndex >= 0) { long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() .getTime(); long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() .getTime(); long minMiddle = s + (e - s) / 2; if (middle < minMiddle) { this.minMiddleIndex = index; }"
      },
      {
        "txt": "else { this.minMiddleIndex = index; } if (this.maxMiddleIndex >= 0) { long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() .getTime(); <extra_id_0> .getTime(); long maxMiddle = s + (e - s) / 2; if (middle > maxMiddle) { this.maxMiddleIndex = index; } }"
      },
      {
        "txt": "} } else { this.maxMiddleIndex = index; } if (this.minEndIndex >= 0) { long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd() .getTime(); if (end < minEnd) { this.minEndIndex = index;"
      },
      {
        "txt": "} } else { this.minEndIndex = index; } if (this.maxEndIndex >= 0) { long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd() .getTime(); if (end > maxEnd) { this.maxEndIndex = index;"
      },
      {
        "txt": "} } else { this.maxEndIndex = index; } } private void recalculateBounds() { this.minStartIndex = -1; this.minMiddleIndex = -1; this.minEndIndex = -1;"
      },
      {
        "txt": "this.maxStartIndex = -1; this.maxMiddleIndex = -1; this.maxEndIndex = -1; for (int i = 0; i < this.data.size(); i++) { TimePeriodValue tpv = (TimePeriodValue) this.data.get(i); updateBounds(tpv.getPeriod(), i); } } public void add(TimePeriod period, double value) { TimePeriodValue item = new TimePeriodValue(period, value);"
      },
      {
        "txt": "add(item); } public void add(TimePeriod period, Number value) { TimePeriodValue item = new TimePeriodValue(period, value); add(item); } public void update(int index, Number value) { TimePeriodValue item = getDataItem(index); item.setValue(value); fireSeriesChanged();"
      },
      {
        "txt": "} public void delete(int start, int end) { for (int i = 0; i <= (end - start); i++) { this.data.remove(start); } recalculateBounds(); fireSeriesChanged(); } public boolean equals(Object obj) { if (obj == this) {"
      },
      {
        "txt": "return true; } if (!(obj instanceof TimePeriodValues)) { return false; } if (!super.equals(obj)) { return false; } TimePeriodValues that = (TimePeriodValues) obj; if (!ObjectUtilities.equal(this.getDomainDescription(),"
      },
      {
        "txt": "that.getDomainDescription())) { return false; } if (!ObjectUtilities.equal(this.getRangeDescription(), that.getRangeDescription())) { return false; } int count = getItemCount(); if (count != that.getItemCount()) { return false;"
      },
      {
        "txt": "} for (int i = 0; i < count; i++) { if (!getDataItem(i).equals(that.getDataItem(i))) { return false; } } return true; } public int hashCode() { int result;"
      },
      {
        "txt": "result = (this.domain != null ? this.domain.hashCode() : 0); result = 29 * result + (this.range != null ? this.range.hashCode() : 0); result = 29 * result + this.data.hashCode(); result = 29 * result + this.minStartIndex; result = 29 * result + this.maxStartIndex; result = 29 * result + this.minMiddleIndex; result = 29 * result + this.maxMiddleIndex; result = 29 * result + this.minEndIndex; result = 29 * result + this.maxEndIndex; return result;"
      },
      {
        "txt": "} public Object clone() throws CloneNotSupportedException { Object clone = createCopy(0, getItemCount() - 1); return clone; } public TimePeriodValues createCopy(int start, int end) throws CloneNotSupportedException { TimePeriodValues copy = (TimePeriodValues) super.clone(); copy.data = new ArrayList(); if (this.data.size() > 0) {"
      },
      {
        "txt": "for (int index = start; index <= end; index++) { TimePeriodValue item = (TimePeriodValue) this.data.get(index); TimePeriodValue clone = (TimePeriodValue) item.clone(); try { copy.add(clone); } catch (SeriesException e) { System.err.println(\"Failed to add cloned item.\"); } }"
      },
      {
        "txt": "} return copy; } public int getMinStartIndex() { return this.minStartIndex; } public int getMaxStartIndex() { return this.maxStartIndex; } public int getMinMiddleIndex() {"
      },
      {
        "txt": "return this.minMiddleIndex; } public int getMaxMiddleIndex() { return this.maxMiddleIndex; } public int getMinEndIndex() { return this.minEndIndex; } public int getMaxEndIndex() { return this.maxEndIndex;"
      }
    ]
  }
]
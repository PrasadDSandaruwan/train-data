[
  {
    "id": 1915,
    "file_path": "src/main/java/org/jsoup/parser/CharacterReader.java",
    "start-bug-line": 118,
    "end-bug-line": 118,
    "bug": "",
    "fix": "String consumeLetterThenDigitSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) pos++; else break; } while (!isEmpty()) { char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; CharacterReader cosumes tokens off a string. To replace the old TokenQueue. class CharacterReader { static final char EOF = (char) -1;"
      },
      {
        "txt": "private final String input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) { Validate.notNull(input); input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines this.input = input; this.length = input.length(); }"
      },
      {
        "txt": "int pos() { return pos; } boolean isEmpty() { return pos >= length; } char current() { return isEmpty() ? EOF : input.charAt(pos); } char consume() {"
      },
      {
        "txt": "char val = isEmpty() ? EOF : input.charAt(pos); pos++; return val; } void unconsume() { pos--; } void advance() { pos++; }"
      },
      {
        "txt": "void mark() { mark = pos; } void rewindToMark() { pos = mark; } String consumeAsString() { return input.substring(pos, pos++); } String consumeTo(char c) {"
      },
      {
        "txt": "int offset = input.indexOf(c, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeTo(String seq) {"
      },
      {
        "txt": "int offset = input.indexOf(seq, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeToAny(char... seq) {"
      },
      {
        "txt": "int start = pos; OUTER: while (!isEmpty()) { char c = input.charAt(pos); for (char seek : seq) { if (seek == c) break OUTER; } pos++; } return pos > start ? input.substring(start, pos) : \"\";"
      },
      {
        "txt": "} String consumeToEnd() { String data = input.substring(pos, input.length()); pos = input.length(); return data; } String consumeLetterSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos);"
      },
      {
        "txt": "pos++; else break; } return input.substring(start, pos); } <extra_id_0> String consumeHexSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++;"
      },
      {
        "txt": "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++; else break; } return input.substring(start, pos); } String consumeDigitSequence() { int start = pos; while (!isEmpty()) {"
      },
      {
        "txt": "char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; } return input.substring(start, pos); } boolean matches(char c) { return !isEmpty() && input.charAt(pos) == c;"
      },
      {
        "txt": "} boolean matches(String seq) { return input.startsWith(seq, pos); } boolean matchesIgnoreCase(String seq) { return input.regionMatches(true, pos, seq, 0, seq.length()); } boolean matchesAny(char... seq) { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); for (char seek : seq) { if (seek == c) return true; } return false; } boolean matchesLetter() { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); } boolean matchesDigit() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= '0' && c <= '9'); } boolean matchConsume(String seq) {"
      },
      {
        "txt": "if (matches(seq)) { pos += seq.length(); return true; } else { return false; } } boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { pos += seq.length();"
      },
      {
        "txt": "return true; } else { return false; } } boolean containsIgnoreCase(String seq) { String loScan = seq.toLowerCase(); String hiScan = seq.toUpperCase(); return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1); }"
      },
      {
        "txt": "@Override public String toString() { return input.substring(pos); }"
      }
    ]
  },
  {
    "id": 1916,
    "file_path": "src/main/java/org/jsoup/parser/CharacterReader.java",
    "start-bug-line": 119,
    "end-bug-line": 119,
    "bug": "",
    "fix": "return input.substring(start, pos); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; CharacterReader cosumes tokens off a string. To replace the old TokenQueue. class CharacterReader { static final char EOF = (char) -1;"
      },
      {
        "txt": "private final String input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) { Validate.notNull(input); input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines this.input = input; this.length = input.length(); }"
      },
      {
        "txt": "int pos() { return pos; } boolean isEmpty() { return pos >= length; } char current() { return isEmpty() ? EOF : input.charAt(pos); } char consume() {"
      },
      {
        "txt": "char val = isEmpty() ? EOF : input.charAt(pos); pos++; return val; } void unconsume() { pos--; } void advance() { pos++; }"
      },
      {
        "txt": "void mark() { mark = pos; } void rewindToMark() { pos = mark; } String consumeAsString() { return input.substring(pos, pos++); } String consumeTo(char c) {"
      },
      {
        "txt": "int offset = input.indexOf(c, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeTo(String seq) {"
      },
      {
        "txt": "int offset = input.indexOf(seq, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeToAny(char... seq) {"
      },
      {
        "txt": "int start = pos; OUTER: while (!isEmpty()) { char c = input.charAt(pos); for (char seek : seq) { if (seek == c) break OUTER; } pos++; } return pos > start ? input.substring(start, pos) : \"\";"
      },
      {
        "txt": "} String consumeToEnd() { String data = input.substring(pos, input.length()); pos = input.length(); return data; } String consumeLetterSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos);"
      },
      {
        "txt": "pos++; else break; } return input.substring(start, pos); } <extra_id_0> String consumeHexSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++;"
      },
      {
        "txt": "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++; else break; } return input.substring(start, pos); } String consumeDigitSequence() { int start = pos; while (!isEmpty()) {"
      },
      {
        "txt": "char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; } return input.substring(start, pos); } boolean matches(char c) { return !isEmpty() && input.charAt(pos) == c;"
      },
      {
        "txt": "} boolean matches(String seq) { return input.startsWith(seq, pos); } boolean matchesIgnoreCase(String seq) { return input.regionMatches(true, pos, seq, 0, seq.length()); } boolean matchesAny(char... seq) { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); for (char seek : seq) { if (seek == c) return true; } return false; } boolean matchesLetter() { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); } boolean matchesDigit() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= '0' && c <= '9'); } boolean matchConsume(String seq) {"
      },
      {
        "txt": "if (matches(seq)) { pos += seq.length(); return true; } else { return false; } } boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { pos += seq.length();"
      },
      {
        "txt": "return true; } else { return false; } } boolean containsIgnoreCase(String seq) { String loScan = seq.toLowerCase(); String hiScan = seq.toUpperCase(); return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1); }"
      },
      {
        "txt": "@Override public String toString() { return input.substring(pos); }"
      }
    ]
  },
  {
    "id": 1917,
    "file_path": "src/main/java/org/jsoup/parser/Tokeniser.java",
    "start-bug-line": 135,
    "end-bug-line": 135,
    "bug": "String nameRef = reader.consumeLetterSequence();",
    "fix": "String nameRef = reader.consumeLetterThenDigitSequence();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; import org.jsoup.nodes.Entities; import java.util.ArrayList; import java.util.List; class Tokeniser { static final char replacementChar = '\\uFFFD'; // replaces null character"
      },
      {
        "txt": "private CharacterReader reader; // html input private ParseErrorList errors; // errors found while tokenising private TokeniserState state = TokeniserState.Data; // current tokenisation state private Token emitPending; // the token we are about to emit on next read private boolean isEmitPending = false; private StringBuilder charBuffer = new StringBuilder(); // buffers characters to output as one token StringBuilder dataBuffer; // buffers data looking for </script> Token.Tag tagPending; // tag we are building up Token.Doctype doctypePending; // doctype building up Token.Comment commentPending; // comment building up"
      },
      {
        "txt": "private Token.StartTag lastStartTag; // the last start tag emitted, to test appropriate end tag private boolean selfClosingFlagAcknowledged = true; Tokeniser(CharacterReader reader, ParseErrorList errors) { this.reader = reader; this.errors = errors; } Token read() { if (!selfClosingFlagAcknowledged) { error(\"Self closing flag not acknowledged\"); selfClosingFlagAcknowledged = true;"
      },
      {
        "txt": "} while (!isEmitPending) state.read(this, reader); if (charBuffer.length() > 0) { String str = charBuffer.toString(); charBuffer.delete(0, charBuffer.length()); return new Token.Character(str); } else { isEmitPending = false; return emitPending;"
      },
      {
        "txt": "} } void emit(Token token) { Validate.isFalse(isEmitPending, \"There is an unread token pending!\"); emitPending = token; isEmitPending = true; if (token.type == Token.TokenType.StartTag) { Token.StartTag startTag = (Token.StartTag) token; lastStartTag = startTag; if (startTag.selfClosing)"
      },
      {
        "txt": "selfClosingFlagAcknowledged = false; } else if (token.type == Token.TokenType.EndTag) { Token.EndTag endTag = (Token.EndTag) token; if (endTag.attributes.size() > 0) error(\"Attributes incorrectly present on end tag\"); } } void emit(String str) { charBuffer.append(str); }"
      },
      {
        "txt": "void emit(char c) { charBuffer.append(c); } TokeniserState getState() { return state; } void transition(TokeniserState state) { this.state = state; } void advanceTransition(TokeniserState state) {"
      },
      {
        "txt": "reader.advance(); this.state = state; } void acknowledgeSelfClosingFlag() { selfClosingFlagAcknowledged = true; } Character consumeCharacterReference(Character additionalAllowedCharacter, boolean inAttribute) { if (reader.isEmpty()) return null; if (additionalAllowedCharacter != null && additionalAllowedCharacter == reader.current())"
      },
      {
        "txt": "return null; if (reader.matchesAny('\\t', '\\n', '\\f', ' ', '<', '&')) return null; reader.mark(); if (reader.matchConsume(\"#\")) { // numbered boolean isHexMode = reader.matchConsumeIgnoreCase(\"X\"); String numRef = isHexMode ? reader.consumeHexSequence() : reader.consumeDigitSequence(); if (numRef.length() == 0) { // didn't match anything characterReferenceError(\"numeric reference with no numerals\"); reader.rewindToMark();"
      },
      {
        "txt": "return null; } if (!reader.matchConsume(\";\")) characterReferenceError(\"missing semicolon\"); // missing semi int charval = -1; try { int base = isHexMode ? 16 : 10; charval = Integer.valueOf(numRef, base); } catch (NumberFormatException e) { } // skip"
      },
      {
        "txt": "characterReferenceError(\"character outside of valid range\"); return replacementChar; } else { return (char) charval; } } else { // named <extra_id_0> String origNameRef = new String(nameRef); // for error reporting. nameRef gets chomped looking for matches boolean looksLegit = reader.matches(';'); boolean found = false; while (nameRef.length() > 0 && !found) { if (Entities.isNamedEntity(nameRef)) found = true;"
      },
      {
        "txt": "if (Entities.isNamedEntity(nameRef)) found = true; else { nameRef = nameRef.substring(0, nameRef.length()-1); reader.unconsume(); } } if (!found) { if (looksLegit) // named with semicolon characterReferenceError(String.format(\"invalid named referenece '%s'\", origNameRef));"
      },
      {
        "txt": "reader.rewindToMark(); return null; } if (inAttribute && (reader.matchesLetter() || reader.matchesDigit() || reader.matchesAny('=', '-', '_'))) { reader.rewindToMark(); return null; } if (!reader.matchConsume(\";\")) characterReferenceError(\"missing semicolon\"); // missing semi return Entities.getCharacterByName(nameRef);"
      },
      {
        "txt": "} } Token.Tag createTagPending(boolean start) { tagPending = start ? new Token.StartTag() : new Token.EndTag(); return tagPending; } void emitTagPending() { tagPending.finaliseTag(); emit(tagPending); }"
      },
      {
        "txt": "void createCommentPending() { commentPending = new Token.Comment(); } void emitCommentPending() { emit(commentPending); } void createDoctypePending() { doctypePending = new Token.Doctype(); } void emitDoctypePending() {"
      },
      {
        "txt": "emit(doctypePending); } void createTempBuffer() { dataBuffer = new StringBuilder(); } boolean isAppropriateEndTagToken() { return tagPending.tagName.equals(lastStartTag.tagName); } String appropriateEndTagName() { return lastStartTag.tagName;"
      },
      {
        "txt": "} void error(TokeniserState state) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Unexpected character '%s' in input state [%s]\", reader.current(), state)); } void eofError(TokeniserState state) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Unexpectedly reached end of file (EOF) in input state [%s]\", state)); } private void characterReferenceError(String message) {"
      },
      {
        "txt": "if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Invalid character reference: %s\", message)); } private void error(String errorMsg) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), errorMsg)); } boolean currentNodeInHtmlNS() { return true; }"
      }
    ]
  }
]
[
  {
    "id": 1978,
    "file_path": "src/main/java/org/jsoup/helper/DataUtil.java",
    "start-bug-line": 112,
    "end-bug-line": 113,
    "bug": "try { if (Charset.isSupported(meta.attr(\"charset\"))) {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.XmlDeclaration; import org.jsoup.parser.Parser; import java.io.ByteArrayOutputStream; import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.RandomAccessFile; import java.nio.ByteBuffer; import java.nio.charset.Charset;"
      },
      {
        "txt": "import java.nio.charset.IllegalCharsetNameException; import java.util.Locale; import java.util.Random; import java.util.regex.Matcher; import java.util.regex.Pattern; public final class DataUtil { private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\"); static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset private static final int bufferSize = 0x20000; // ~130K. private static final int UNICODE_BOM = 0xFEFF;"
      },
      {
        "txt": "private static final char[] mimeBoundaryChars = \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray(); static final int boundaryLength = 32; private DataUtil() {} public static Document load(File in, String charsetName, String baseUri) throws IOException { ByteBuffer byteData = readFileToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } public static Document load(InputStream in, String charsetName, String baseUri) throws IOException { ByteBuffer byteData = readToByteBuffer(in);"
      },
      {
        "txt": "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException { ByteBuffer byteData = readToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, parser); } static void crossStreams(final InputStream in, final OutputStream out) throws IOException { final byte[] buffer = new byte[bufferSize]; int len; while ((len = in.read(buffer)) != -1) {"
      },
      {
        "txt": "out.write(buffer, 0, len); } } static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) { String docData; Document doc = null; charsetName = detectCharsetFromBom(byteData, charsetName); if (charsetName == null) { // determine from meta. safe first parse as UTF-8 docData = Charset.forName(defaultCharset).decode(byteData).toString(); doc = parser.parseInput(docData, baseUri);"
      },
      {
        "txt": "String foundCharset = null; // if not found, will keep utf-8 as best attempt if (meta != null) { if (meta.hasAttr(\"http-equiv\")) { foundCharset = getCharsetFromContentType(meta.attr(\"content\")); } if (foundCharset == null && meta.hasAttr(\"charset\")) { <extra_id_0> foundCharset = meta.attr(\"charset\"); } } catch (IllegalCharsetNameException e) { foundCharset = null; } }"
      },
      {
        "txt": "} } } if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) { XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0); if (prolog.name().equals(\"xml\")) { foundCharset = prolog.attr(\"encoding\"); } } foundCharset = validateCharset(foundCharset);"
      },
      {
        "txt": "if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\"); charsetName = foundCharset; byteData.rewind(); docData = Charset.forName(foundCharset).decode(byteData).toString(); doc = null; } } else { // specified by content type header (or by user on file load) Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\"); docData = Charset.forName(charsetName).decode(byteData).toString();"
      },
      {
        "txt": "} if (doc == null) { doc = parser.parseInput(docData, baseUri); doc.outputSettings().charset(charsetName); } return doc; } static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException { Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\"); final boolean capped = maxSize > 0;"
      },
      {
        "txt": "byte[] buffer = new byte[bufferSize]; ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize); int read; int remaining = maxSize; while (true) { read = inStream.read(buffer); if (read == -1) break; if (capped) { if (read > remaining) { outStream.write(buffer, 0, remaining);"
      },
      {
        "txt": "break; } remaining -= read; } outStream.write(buffer, 0, read); } return ByteBuffer.wrap(outStream.toByteArray()); } static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException { return readToByteBuffer(inStream, 0);"
      },
      {
        "txt": "} static ByteBuffer readFileToByteBuffer(File file) throws IOException { RandomAccessFile randomAccessFile = null; try { randomAccessFile = new RandomAccessFile(file, \"r\"); byte[] bytes = new byte[(int) randomAccessFile.length()]; randomAccessFile.readFully(bytes); return ByteBuffer.wrap(bytes); } finally { if (randomAccessFile != null)"
      },
      {
        "txt": "randomAccessFile.close(); } } static ByteBuffer emptyByteBuffer() { return ByteBuffer.allocate(0); } static String getCharsetFromContentType(String contentType) { if (contentType == null) return null; Matcher m = charsetPattern.matcher(contentType); if (m.find()) {"
      },
      {
        "txt": "String charset = m.group(1).trim(); charset = charset.replace(\"charset=\", \"\"); return validateCharset(charset); } return null; } private static String validateCharset(String cs) { if (cs == null || cs.length() == 0) return null; cs = cs.trim().replaceAll(\"[\\\"']\", \"\"); try {"
      },
      {
        "txt": "if (Charset.isSupported(cs)) return cs; cs = cs.toUpperCase(Locale.ENGLISH); if (Charset.isSupported(cs)) return cs; } catch (IllegalCharsetNameException e) { } return null; } static String mimeBoundary() { final StringBuilder mime = new StringBuilder(boundaryLength); final Random rand = new Random();"
      },
      {
        "txt": "for (int i = 0; i < boundaryLength; i++) { mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]); } return mime.toString(); } private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName) { byteData.mark(); byte[] bom = new byte[4]; if (byteData.remaining() >= bom.length) { byteData.get(bom);"
      },
      {
        "txt": "byteData.rewind(); } if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE charsetName = \"UTF-32\"; // and I hope it's on your system } else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { charsetName = \"UTF-16\"; // in all Javas } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { charsetName = \"UTF-8\"; // in all Javas"
      },
      {
        "txt": "byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here } return charsetName; }"
      }
    ]
  },
  {
    "id": 1979,
    "file_path": "src/main/java/org/jsoup/helper/DataUtil.java",
    "start-bug-line": 115,
    "end-bug-line": 118,
    "bug": "} } catch (IllegalCharsetNameException e) { foundCharset = null; }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.XmlDeclaration; import org.jsoup.parser.Parser; import java.io.ByteArrayOutputStream;"
      },
      {
        "txt": "import java.io.File; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.io.RandomAccessFile; import java.nio.ByteBuffer; import java.nio.charset.Charset; import java.nio.charset.IllegalCharsetNameException; import java.util.Locale; import java.util.Random;"
      },
      {
        "txt": "import java.util.regex.Matcher; import java.util.regex.Pattern; public final class DataUtil { private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\"); static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset private static final int bufferSize = 0x20000; // ~130K. private static final int UNICODE_BOM = 0xFEFF; private static final char[] mimeBoundaryChars = \"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".toCharArray(); static final int boundaryLength = 32;"
      },
      {
        "txt": "private DataUtil() {} public static Document load(File in, String charsetName, String baseUri) throws IOException { ByteBuffer byteData = readFileToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } public static Document load(InputStream in, String charsetName, String baseUri) throws IOException { ByteBuffer byteData = readToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException {"
      },
      {
        "txt": "ByteBuffer byteData = readToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, parser); } static void crossStreams(final InputStream in, final OutputStream out) throws IOException { final byte[] buffer = new byte[bufferSize]; int len; while ((len = in.read(buffer)) != -1) { out.write(buffer, 0, len); } }"
      },
      {
        "txt": "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) { String docData; Document doc = null; charsetName = detectCharsetFromBom(byteData, charsetName); if (charsetName == null) { // determine from meta. safe first parse as UTF-8 docData = Charset.forName(defaultCharset).decode(byteData).toString(); doc = parser.parseInput(docData, baseUri); Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first(); String foundCharset = null; // if not found, will keep utf-8 as best attempt if (meta != null) {"
      },
      {
        "txt": "foundCharset = getCharsetFromContentType(meta.attr(\"content\")); } if (foundCharset == null && meta.hasAttr(\"charset\")) { try { if (Charset.isSupported(meta.attr(\"charset\"))) { foundCharset = meta.attr(\"charset\"); <extra_id_0> } } if (foundCharset == null && doc.childNode(0) instanceof XmlDeclaration) { XmlDeclaration prolog = (XmlDeclaration) doc.childNode(0); if (prolog.name().equals(\"xml\")) { foundCharset = prolog.attr(\"encoding\");"
      },
      {
        "txt": "if (prolog.name().equals(\"xml\")) { foundCharset = prolog.attr(\"encoding\"); } } foundCharset = validateCharset(foundCharset); if (foundCharset != null && !foundCharset.equals(defaultCharset)) { // need to re-decode foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\"); charsetName = foundCharset; byteData.rewind(); docData = Charset.forName(foundCharset).decode(byteData).toString();"
      },
      {
        "txt": "doc = null; } } else { // specified by content type header (or by user on file load) Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\"); docData = Charset.forName(charsetName).decode(byteData).toString(); } if (doc == null) { doc = parser.parseInput(docData, baseUri); doc.outputSettings().charset(charsetName); }"
      },
      {
        "txt": "return doc; } static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException { Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\"); final boolean capped = maxSize > 0; byte[] buffer = new byte[bufferSize]; ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize); int read; int remaining = maxSize; while (true) {"
      },
      {
        "txt": "read = inStream.read(buffer); if (read == -1) break; if (capped) { if (read > remaining) { outStream.write(buffer, 0, remaining); break; } remaining -= read; } outStream.write(buffer, 0, read);"
      },
      {
        "txt": "} return ByteBuffer.wrap(outStream.toByteArray()); } static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException { return readToByteBuffer(inStream, 0); } static ByteBuffer readFileToByteBuffer(File file) throws IOException { RandomAccessFile randomAccessFile = null; try { randomAccessFile = new RandomAccessFile(file, \"r\");"
      },
      {
        "txt": "byte[] bytes = new byte[(int) randomAccessFile.length()]; randomAccessFile.readFully(bytes); return ByteBuffer.wrap(bytes); } finally { if (randomAccessFile != null) randomAccessFile.close(); } } static ByteBuffer emptyByteBuffer() { return ByteBuffer.allocate(0);"
      },
      {
        "txt": "} static String getCharsetFromContentType(String contentType) { if (contentType == null) return null; Matcher m = charsetPattern.matcher(contentType); if (m.find()) { String charset = m.group(1).trim(); charset = charset.replace(\"charset=\", \"\"); return validateCharset(charset); } return null;"
      },
      {
        "txt": "} private static String validateCharset(String cs) { if (cs == null || cs.length() == 0) return null; cs = cs.trim().replaceAll(\"[\\\"']\", \"\"); try { if (Charset.isSupported(cs)) return cs; cs = cs.toUpperCase(Locale.ENGLISH); if (Charset.isSupported(cs)) return cs; } catch (IllegalCharsetNameException e) { }"
      },
      {
        "txt": "return null; } static String mimeBoundary() { final StringBuilder mime = new StringBuilder(boundaryLength); final Random rand = new Random(); for (int i = 0; i < boundaryLength; i++) { mime.append(mimeBoundaryChars[rand.nextInt(mimeBoundaryChars.length)]); } return mime.toString(); }"
      },
      {
        "txt": "private static String detectCharsetFromBom(ByteBuffer byteData, String charsetName) { byteData.mark(); byte[] bom = new byte[4]; if (byteData.remaining() >= bom.length) { byteData.get(bom); byteData.rewind(); } if (bom[0] == 0x00 && bom[1] == 0x00 && bom[2] == (byte) 0xFE && bom[3] == (byte) 0xFF || // BE bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE && bom[2] == 0x00 && bom[3] == 0x00) { // LE charsetName = \"UTF-32\"; // and I hope it's on your system"
      },
      {
        "txt": "} else if (bom[0] == (byte) 0xFE && bom[1] == (byte) 0xFF || // BE bom[0] == (byte) 0xFF && bom[1] == (byte) 0xFE) { charsetName = \"UTF-16\"; // in all Javas } else if (bom[0] == (byte) 0xEF && bom[1] == (byte) 0xBB && bom[2] == (byte) 0xBF) { charsetName = \"UTF-8\"; // in all Javas byteData.position(3); // 16 and 32 decoders consume the BOM to determine be/le; utf-8 should be consumed here } return charsetName; }"
      }
    ]
  },
  {
    "id": 1980,
    "file_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
    "start-bug-line": 46,
    "end-bug-line": 61,
    "bug": "final String decl = this.name; if(decl.equals(\"xml\") && attributes.size() > 1 ) { StringBuilder sb = new StringBuilder(decl); final String version = attributes.get(\"version\"); if( version != null ) { sb.append(\" version=\\\"\").append(version).append(\"\\\"\"); } final String encoding = attributes.get(\"encoding\"); if( encoding != null ) { sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\"); } return sb.toString(); } else { return this.name; }",
    "fix": "return attributes.html().trim(); // attr html starts with a \" \"",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.Validate; import java.io.IOException; An XML Declaration. @author Jonathan Hedley, jonathan@hedley.net */ public class XmlDeclaration extends Node { private final String name; private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?) Create a new XML declaration @param name of declaration"
      },
      {
        "txt": "@param baseUri base uri @param isProcessingInstruction is processing instruction public XmlDeclaration(String name, String baseUri, boolean isProcessingInstruction) { super(baseUri); Validate.notNull(name); this.name = name; this.isProcessingInstruction = isProcessingInstruction; } public String nodeName() { return \"#declaration\";"
      },
      {
        "txt": "public String name() { return name; } Get the unencoded XML declaration. @return XML declaration public String getWholeDeclaration() { <extra_id_0> } void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException { accum .append(\"<\") .append(isProcessingInstruction ? \"!\" : \"?\") .append(getWholeDeclaration())"
      },
      {
        "txt": ".append(isProcessingInstruction ? \"!\" : \"?\") .append(getWholeDeclaration()) .append(\">\"); } void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {} @Override public String toString() { return outerHtml(); }"
      }
    ]
  },
  {
    "id": 1981,
    "file_path": "src/main/java/org/jsoup/nodes/XmlDeclaration.java",
    "start-bug-line": 68,
    "end-bug-line": 68,
    "bug": ".append(getWholeDeclaration())",
    "fix": ".append(name); attributes.html(accum, out); accum .append(isProcessingInstruction ? \"!\" : \"?\")",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.helper.Validate; import java.io.IOException; An XML Declaration. @author Jonathan Hedley, jonathan@hedley.net */ public class XmlDeclaration extends Node { private final String name; private final boolean isProcessingInstruction; // <! if true, <? if false, declaration (and last data char should be ?) Create a new XML declaration @param name of declaration @param baseUri base uri"
      },
      {
        "txt": "@param isProcessingInstruction is processing instruction public XmlDeclaration(String name, String baseUri, boolean isProcessingInstruction) { super(baseUri); Validate.notNull(name); this.name = name; this.isProcessingInstruction = isProcessingInstruction; } public String nodeName() { return \"#declaration\"; }"
      },
      {
        "txt": "public String name() { return name; } Get the unencoded XML declaration. @return XML declaration public String getWholeDeclaration() { final String decl = this.name; if(decl.equals(\"xml\") && attributes.size() > 1 ) { StringBuilder sb = new StringBuilder(decl); final String version = attributes.get(\"version\");"
      },
      {
        "txt": "if( version != null ) { sb.append(\" version=\\\"\").append(version).append(\"\\\"\"); } final String encoding = attributes.get(\"encoding\"); if( encoding != null ) { sb.append(\" encoding=\\\"\").append(encoding).append(\"\\\"\"); } return sb.toString(); } else {"
      },
      {
        "txt": "} } void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException { accum .append(\"<\") .append(isProcessingInstruction ? \"!\" : \"?\") <extra_id_0> .append(\">\"); } void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {} @Override public String toString() { return outerHtml();"
      },
      {
        "txt": "public String toString() { return outerHtml(); }"
      }
    ]
  },
  {
    "id": 1982,
    "file_path": "src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
    "start-bug-line": 3,
    "end-bug-line": 3,
    "bug": "",
    "fix": "import org.jsoup.Jsoup;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; <extra_id_0> import org.jsoup.nodes.*; import java.util.List; public class XmlTreeBuilder extends TreeBuilder { @Override protected void initialiseParse(String input, String baseUri, ParseErrorList errors) { super.initialiseParse(input, baseUri, errors);"
      },
      {
        "txt": "protected void initialiseParse(String input, String baseUri, ParseErrorList errors) { super.initialiseParse(input, baseUri, errors); stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack) doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml); } @Override protected boolean process(Token token) { switch (token.type) { case StartTag: insert(token.asStartTag());"
      },
      {
        "txt": "break; case EndTag: popStackToClose(token.asEndTag()); break; case Comment: insert(token.asComment()); break; case Character: insert(token.asCharacter()); break;"
      },
      {
        "txt": "case Doctype: insert(token.asDoctype()); break; case EOF: // could put some normalisation here if desired break; default: Validate.fail(\"Unexpected token type: \" + token.type); } return true; }"
      },
      {
        "txt": "private void insertNode(Node node) { currentElement().appendChild(node); } Element insert(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name()); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { tokeniser.acknowledgeSelfClosingFlag(); if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above."
      },
      {
        "txt": "tag.setSelfClosing(); } else { stack.add(el); } return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData(), baseUri); Node insert = comment; if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml)"
      },
      {
        "txt": "String data = comment.getData(); if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) { String declaration = data.substring(1); insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\")); } } insertNode(insert); } void insert(Token.Character characterToken) { Node node = new TextNode(characterToken.getData(), baseUri);"
      },
      {
        "txt": "insertNode(node); } void insert(Token.Doctype d) { DocumentType doctypeNode = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri); insertNode(doctypeNode); } private void popStackToClose(Token.EndTag endTag) { String elName = endTag.name(); Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; // not found, skip for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "stack.remove(pos); if (next == firstFound) break; } } List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors) { initialiseParse(inputFragment, baseUri, errors); runParser(); return doc.childNodes(); }"
      }
    ]
  },
  {
    "id": 1983,
    "file_path": "src/main/java/org/jsoup/parser/XmlTreeBuilder.java",
    "start-bug-line": 76,
    "end-bug-line": 77,
    "bug": "String declaration = data.substring(1); insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));",
    "fix": "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser()); Element el = doc.child(0); insert = new XmlDeclaration(el.tagName(), comment.baseUri(), data.startsWith(\"!\")); insert.attributes().addAll(el.attributes());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.helper.Validate; import org.jsoup.nodes.*; import java.util.List; public class XmlTreeBuilder extends TreeBuilder { @Override protected void initialiseParse(String input, String baseUri, ParseErrorList errors) { super.initialiseParse(input, baseUri, errors); stack.add(doc); // place the document onto the stack. differs from HtmlTreeBuilder (not on stack) doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml); }"
      },
      {
        "txt": "@Override protected boolean process(Token token) { switch (token.type) { case StartTag: insert(token.asStartTag()); break; case EndTag: popStackToClose(token.asEndTag()); break; case Comment:"
      },
      {
        "txt": "insert(token.asComment()); break; case Character: insert(token.asCharacter()); break; case Doctype: insert(token.asDoctype()); break; case EOF: // could put some normalisation here if desired break;"
      },
      {
        "txt": "default: Validate.fail(\"Unexpected token type: \" + token.type); } return true; } private void insertNode(Node node) { currentElement().appendChild(node); } Element insert(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name());"
      },
      {
        "txt": "Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { tokeniser.acknowledgeSelfClosingFlag(); if (!tag.isKnownTag()) // unknown tag, remember this is self closing for output. see above. tag.setSelfClosing(); } else { stack.add(el); } return el;"
      },
      {
        "txt": "void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData(), baseUri); Node insert = comment; if (commentToken.bogus) { // xml declarations are emitted as bogus comments (which is right for html, but not xml) String data = comment.getData(); if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))) { <extra_id_0> } } insertNode(insert); } void insert(Token.Character characterToken) { Node node = new TextNode(characterToken.getData(), baseUri);"
      },
      {
        "txt": "void insert(Token.Character characterToken) { Node node = new TextNode(characterToken.getData(), baseUri); insertNode(node); } void insert(Token.Doctype d) { DocumentType doctypeNode = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri); insertNode(doctypeNode); } private void popStackToClose(Token.EndTag endTag) { String elName = endTag.name();"
      },
      {
        "txt": "Element firstFound = null; for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { firstFound = next; break; } } if (firstFound == null) return; // not found, skip"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next == firstFound) break; } } List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors) { initialiseParse(inputFragment, baseUri, errors); runParser();"
      },
      {
        "txt": "return doc.childNodes(); }"
      }
    ]
  }
]
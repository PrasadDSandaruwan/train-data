[
  {
    "id": 2078,
    "file_path": "src/main/java/org/jsoup/nodes/Comment.java",
    "start-bug-line": 78,
    "end-bug-line": 78,
    "bug": "if (doc.childNodeSize() > 0) {",
    "fix": "if (doc.children().size() > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.Jsoup;"
      },
      {
        "txt": "import org.jsoup.parser.Parser; import java.io.IOException; A comment node. @author Jonathan Hedley, jonathan@hedley.net */ public class Comment extends LeafNode { private static final String COMMENT_KEY = \"comment\"; Create a new comment node. @param data The contents of the comment public Comment(String data) { value = data;"
      },
      {
        "txt": "} Create a new comment node. @param data The contents of the comment @param baseUri base URI not used. This is a leaf node. @deprecated public Comment(String data, String baseUri) { this(data); } public String nodeName() { return \"#comment\";"
      },
      {
        "txt": "} Get the contents of the comment. @return comment content public String getData() { return coreValue(); } void outerHtmlHead(Appendable accum, int depth, Document.OutputSettings out) throws IOException { if (out.prettyPrint()) indent(accum, depth, out); accum"
      },
      {
        "txt": ".append(\"<!--\") .append(getData()) .append(\"-->\"); } void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) {} @Override public String toString() { return outerHtml(); } public boolean isXmlDeclaration() {"
      },
      {
        "txt": "return (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\"))); } public XmlDeclaration asXmlDeclaration() { String data = getData(); Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri(), Parser.xmlParser()); XmlDeclaration decl = null; <extra_id_0> Element el = doc.child(0); decl = new XmlDeclaration(NodeUtils.parser(doc).settings().normalizeTag(el.tagName()), data.startsWith(\"!\")); decl.attributes().addAll(el.attributes()); } return decl; }"
      },
      {
        "txt": "return decl; }"
      }
    ]
  }
]
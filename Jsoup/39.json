[
  {
    "id": 1959,
    "file_path": "src/main/java/org/jsoup/helper/DataUtil.java",
    "start-bug-line": 119,
    "end-bug-line": 119,
    "bug": "",
    "fix": "doc = null;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.parser.Parser; import java.io.*; import java.nio.ByteBuffer; import java.nio.charset.Charset; import java.nio.charset.IllegalCharsetNameException;"
      },
      {
        "txt": "import java.util.regex.Matcher; import java.util.regex.Pattern; import java.util.Locale; public class DataUtil { private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\"); static final String defaultCharset = \"UTF-8\"; // used if not found in header or meta charset private static final int bufferSize = 0x20000; // ~130K. private DataUtil() {} public static Document load(File in, String charsetName, String baseUri) throws IOException { FileInputStream inStream = null;"
      },
      {
        "txt": "try { inStream = new FileInputStream(in); ByteBuffer byteData = readToByteBuffer(inStream); return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } finally { if (inStream != null) inStream.close(); } } public static Document load(InputStream in, String charsetName, String baseUri) throws IOException {"
      },
      {
        "txt": "ByteBuffer byteData = readToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser()); } public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException { ByteBuffer byteData = readToByteBuffer(in); return parseByteData(byteData, charsetName, baseUri, parser); } static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser) { String docData; Document doc = null;"
      },
      {
        "txt": "if (charsetName == null) { // determine from meta. safe parse as UTF-8 docData = Charset.forName(defaultCharset).decode(byteData).toString(); doc = parser.parseInput(docData, baseUri); Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first(); if (meta != null) { // if not found, will keep utf-8 as best attempt String foundCharset; if (meta.hasAttr(\"http-equiv\")) { foundCharset = getCharsetFromContentType(meta.attr(\"content\")); if (foundCharset == null && meta.hasAttr(\"charset\")) { try {"
      },
      {
        "txt": "if (Charset.isSupported(meta.attr(\"charset\"))) { foundCharset = meta.attr(\"charset\"); } } catch (IllegalCharsetNameException e) { foundCharset = null; } } } else { foundCharset = meta.attr(\"charset\"); }"
      },
      {
        "txt": "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset)) { // need to re-decode foundCharset = foundCharset.trim().replaceAll(\"[\\\"']\", \"\"); charsetName = foundCharset; byteData.rewind(); docData = Charset.forName(foundCharset).decode(byteData).toString(); doc = null; } } } else { // specified by content type header (or by user on file load) Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");"
      },
      {
        "txt": "} if (docData.length() > 0 && docData.charAt(0) == 65279) { byteData.rewind(); docData = Charset.forName(defaultCharset).decode(byteData).toString(); docData = docData.substring(1); charsetName = defaultCharset; <extra_id_0> if (doc == null) { doc = parser.parseInput(docData, baseUri); doc.outputSettings().charset(charsetName); } return doc; }"
      },
      {
        "txt": "return doc; } static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException { Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\"); final boolean capped = maxSize > 0; byte[] buffer = new byte[bufferSize]; ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize); int read; int remaining = maxSize; while (true) {"
      },
      {
        "txt": "read = inStream.read(buffer); if (read == -1) break; if (capped) { if (read > remaining) { outStream.write(buffer, 0, remaining); break; } remaining -= read; } outStream.write(buffer, 0, read);"
      },
      {
        "txt": "} ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray()); return byteData; } static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException { return readToByteBuffer(inStream, 0); } static String getCharsetFromContentType(String contentType) { if (contentType == null) return null; Matcher m = charsetPattern.matcher(contentType);"
      },
      {
        "txt": "if (m.find()) { String charset = m.group(1).trim(); charset = charset.replace(\"charset=\", \"\"); if (charset.isEmpty()) return null; try { if (Charset.isSupported(charset)) return charset; charset = charset.toUpperCase(Locale.ENGLISH); if (Charset.isSupported(charset)) return charset; } catch (IllegalCharsetNameException e) { return null;"
      },
      {
        "txt": "} } return null; }"
      }
    ]
  }
]
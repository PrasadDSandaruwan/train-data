[
  {
    "id": 2044,
    "file_path": "src/main/java/org/jsoup/parser/CharacterReader.java",
    "start-bug-line": 427,
    "end-bug-line": 427,
    "bug": "",
    "fix": "if (count < 1) return \"\";",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.UncheckedIOException; import org.jsoup.helper.Validate; import java.io.IOException; import java.io.Reader; import java.io.StringReader; import java.util.Arrays; import java.util.Locale; CharacterReader consumes tokens off a string. Used internally by jsoup. API subject to changes. public final class CharacterReader { static final char EOF = (char) -1;"
      },
      {
        "txt": "private static final int maxStringCacheLen = 12; static final int maxBufferLen = 1024 * 32; // visible for testing private static final int readAheadLimit = (int) (maxBufferLen * 0.75); private final char[] charBuf; private final Reader reader; private int bufLength; private int bufSplitPoint; private int bufPos; private int readerPos; private int bufMark;"
      },
      {
        "txt": "private final String[] stringCache = new String[512]; // holds reused strings in this doc, to lessen garbage public CharacterReader(Reader input, int sz) { Validate.notNull(input); Validate.isTrue(input.markSupported()); reader = input; charBuf = new char[sz > maxBufferLen ? maxBufferLen : sz]; bufferUp(); } public CharacterReader(Reader input) { this(input, maxBufferLen);"
      },
      {
        "txt": "} public CharacterReader(String input) { this(new StringReader(input), input.length()); } private void bufferUp() { if (bufPos < bufSplitPoint) return; try { readerPos += bufPos; reader.skip(bufPos);"
      },
      {
        "txt": "reader.mark(maxBufferLen); bufLength = reader.read(charBuf); reader.reset(); bufPos = 0; bufMark = 0; bufSplitPoint = bufLength > readAheadLimit ? readAheadLimit : bufLength; } catch (IOException e) { throw new UncheckedIOException(e); } }"
      },
      {
        "txt": "public int pos() { return readerPos + bufPos; } public boolean isEmpty() { return bufPos >= bufLength; } public char current() { bufferUp(); return isEmpty() ? EOF : charBuf[bufPos]; }"
      },
      {
        "txt": "char consume() { bufferUp(); char val = isEmpty() ? EOF : charBuf[bufPos]; bufPos++; return val; } void unconsume() { bufPos--; } public void advance() {"
      },
      {
        "txt": "bufPos++; } void mark() { bufMark = bufPos; } void rewindToMark() { bufPos = bufMark; } int nextIndexOf(char c) { bufferUp();"
      },
      {
        "txt": "for (int i = bufPos; i < bufLength; i++) { if (c == charBuf[i]) return i - bufPos; } return -1; } int nextIndexOf(CharSequence seq) { bufferUp(); char startChar = seq.charAt(0); for (int offset = bufPos; offset < bufLength; offset++) {"
      },
      {
        "txt": "if (startChar != charBuf[offset]) while(++offset < bufLength && startChar != charBuf[offset]) { /* empty */ } int i = offset + 1; int last = i + seq.length()-1; if (offset < bufLength && last <= bufLength) { for (int j = 1; i < last && seq.charAt(j) == charBuf[i]; i++, j++) { /* empty */ } if (i == last) // found full sequence return offset - bufPos; } }"
      },
      {
        "txt": "return -1; } public String consumeTo(char c) { int offset = nextIndexOf(c); if (offset != -1) { String consumed = cacheString(charBuf, stringCache, bufPos, offset); bufPos += offset; return consumed; } else { return consumeToEnd();"
      },
      {
        "txt": "} } String consumeTo(String seq) { int offset = nextIndexOf(seq); if (offset != -1) { String consumed = cacheString(charBuf, stringCache, bufPos, offset); bufPos += offset; return consumed; } else { return consumeToEnd();"
      },
      {
        "txt": "} } public String consumeToAny(final char... chars) { bufferUp(); final int start = bufPos; final int remaining = bufLength; final char[] val = charBuf; OUTER: while (bufPos < remaining) { for (char c : chars) { if (val[bufPos] == c)"
      },
      {
        "txt": "break OUTER; } bufPos++; } return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\"; } String consumeToAnySorted(final char... chars) { bufferUp(); final int start = bufPos; final int remaining = bufLength;"
      },
      {
        "txt": "final char[] val = charBuf; while (bufPos < remaining) { if (Arrays.binarySearch(chars, val[bufPos]) >= 0) break; bufPos++; } return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\"; } String consumeData() { bufferUp();"
      },
      {
        "txt": "final int start = bufPos; final int remaining = bufLength; final char[] val = charBuf; while (bufPos < remaining) { final char c = val[bufPos]; if (c == '&'|| c == '<' || c == TokeniserState.nullChar) break; bufPos++; } return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\";"
      },
      {
        "txt": "} String consumeTagName() { bufferUp(); final int start = bufPos; final int remaining = bufLength; final char[] val = charBuf; while (bufPos < remaining) { final char c = val[bufPos]; if (c == '\\t'|| c == '\\n'|| c == '\\r'|| c == '\\f'|| c == ' '|| c == '/'|| c == '>'|| c == TokeniserState.nullChar) break;"
      },
      {
        "txt": "bufPos++; } return bufPos > start ? cacheString(charBuf, stringCache, start, bufPos -start) : \"\"; } String consumeToEnd() { bufferUp(); String data = cacheString(charBuf, stringCache, bufPos, bufLength - bufPos); bufPos = bufLength; return data; }"
      },
      {
        "txt": "String consumeLetterSequence() { bufferUp(); int start = bufPos; while (bufPos < bufLength) { char c = charBuf[bufPos]; if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c)) bufPos++; else break; }"
      },
      {
        "txt": "return cacheString(charBuf, stringCache, start, bufPos - start); } String consumeLetterThenDigitSequence() { bufferUp(); int start = bufPos; while (bufPos < bufLength) { char c = charBuf[bufPos]; if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c)) bufPos++; else"
      },
      {
        "txt": "break; } while (!isEmpty()) { char c = charBuf[bufPos]; if (c >= '0' && c <= '9') bufPos++; else break; } return cacheString(charBuf, stringCache, start, bufPos - start);"
      },
      {
        "txt": "} String consumeHexSequence() { bufferUp(); int start = bufPos; while (bufPos < bufLength) { char c = charBuf[bufPos]; if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) bufPos++; else break;"
      },
      {
        "txt": "} return cacheString(charBuf, stringCache, start, bufPos - start); } String consumeDigitSequence() { bufferUp(); int start = bufPos; while (bufPos < bufLength) { char c = charBuf[bufPos]; if (c >= '0' && c <= '9') bufPos++;"
      },
      {
        "txt": "else break; } return cacheString(charBuf, stringCache, start, bufPos - start); } boolean matches(char c) { return !isEmpty() && charBuf[bufPos] == c; } boolean matches(String seq) { bufferUp();"
      },
      {
        "txt": "int scanLength = seq.length(); if (scanLength > bufLength - bufPos) return false; for (int offset = 0; offset < scanLength; offset++) if (seq.charAt(offset) != charBuf[bufPos +offset]) return false; return true; } boolean matchesIgnoreCase(String seq) { bufferUp();"
      },
      {
        "txt": "int scanLength = seq.length(); if (scanLength > bufLength - bufPos) return false; for (int offset = 0; offset < scanLength; offset++) { char upScan = Character.toUpperCase(seq.charAt(offset)); char upTarget = Character.toUpperCase(charBuf[bufPos + offset]); if (upScan != upTarget) return false; } return true;"
      },
      {
        "txt": "} boolean matchesAny(char... seq) { if (isEmpty()) return false; bufferUp(); char c = charBuf[bufPos]; for (char seek : seq) { if (seek == c) return true; }"
      },
      {
        "txt": "return false; } boolean matchesAnySorted(char[] seq) { bufferUp(); return !isEmpty() && Arrays.binarySearch(seq, charBuf[bufPos]) >= 0; } boolean matchesLetter() { if (isEmpty()) return false; char c = charBuf[bufPos];"
      },
      {
        "txt": "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || Character.isLetter(c); } boolean matchesDigit() { if (isEmpty()) return false; char c = charBuf[bufPos]; return (c >= '0' && c <= '9'); } boolean matchConsume(String seq) { bufferUp();"
      },
      {
        "txt": "if (matches(seq)) { bufPos += seq.length(); return true; } else { return false; } } boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { bufPos += seq.length();"
      },
      {
        "txt": "return true; } else { return false; } } boolean containsIgnoreCase(String seq) { String loScan = seq.toLowerCase(Locale.ENGLISH); String hiScan = seq.toUpperCase(Locale.ENGLISH); return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1); }"
      },
      {
        "txt": "public String toString() { return new String(charBuf, bufPos, bufLength - bufPos); } private static String cacheString(final char[] charBuf, final String[] stringCache, final int start, final int count) { if (count > maxStringCacheLen) return new String(charBuf, start, count); <extra_id_0> int hash = 0; int offset = start; for (int i = 0; i < count; i++) { hash = 31 * hash + charBuf[offset++]; } final int index = hash & stringCache.length - 1;"
      },
      {
        "txt": "} final int index = hash & stringCache.length - 1; String cached = stringCache[index]; if (cached == null) { // miss, add cached = new String(charBuf, start, count); stringCache[index] = cached; } else { // hashcode hit, check equality if (rangeEquals(charBuf, start, count, cached)) { // hit return cached; } else { // hashcode conflict"
      },
      {
        "txt": "cached = new String(charBuf, start, count); stringCache[index] = cached; // update the cache, as recently used strings are more likely to show up again } } return cached; } static boolean rangeEquals(final char[] charBuf, final int start, int count, final String cached) { if (count == cached.length()) { int i = start; int j = 0;"
      },
      {
        "txt": "while (count-- != 0) { if (charBuf[i++] != cached.charAt(j++)) return false; } return true; } return false; } boolean rangeEquals(final int start, final int count, final String cached) { return rangeEquals(charBuf, start, count, cached);"
      }
    ]
  }
]
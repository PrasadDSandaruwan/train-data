[
  {
    "id": 2023,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 360,
    "end-bug-line": 360,
    "bug": "clearStackToContext(\"tbody\", \"tfoot\", \"thead\");",
    "fix": "clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; public class HtmlTreeBuilder extends TreeBuilder {"
      },
      {
        "txt": "private static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}; private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; private static final String[] TagSearchButton = new String[]{\"button\"}; private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"}; private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\","
      },
      {
        "txt": "\"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing"
      },
      {
        "txt": "private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html HtmlTreeBuilder() {} ParseSettings defaultSettings() { return ParseSettings.htmlDefault; }"
      },
      {
        "txt": "@Override protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) { super.initialiseParse(input, baseUri, errors, settings); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>();"
      },
      {
        "txt": "pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, errors, settings); contextElement = context;"
      },
      {
        "txt": "fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root);"
      },
      {
        "txt": "stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } }"
      },
      {
        "txt": "} runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token;"
      },
      {
        "txt": "return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() {"
      },
      {
        "txt": "return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk;"
      },
      {
        "txt": "} boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri; }"
      },
      {
        "txt": "void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } }"
      },
      {
        "txt": "boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag);"
      },
      {
        "txt": "stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) {"
      },
      {
        "txt": "Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings);"
      },
      {
        "txt": "Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); }"
      },
      {
        "txt": "return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el;"
      },
      {
        "txt": "} void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { Node node; String tagName = currentElement().tagName(); if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(characterToken.getData());"
      },
      {
        "txt": "else node = new TextNode(characterToken.getData()); currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else"
      },
      {
        "txt": "currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1); }"
      },
      {
        "txt": "void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) {"
      },
      {
        "txt": "for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next == el) { stack.remove(pos); return true; } } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (StringUtil.in(next.nodeName(), elNames))"
      },
      {
        "txt": "break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos);"
      },
      {
        "txt": "} } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { <extra_id_0> } void clearStackToTableRowContext() { clearStackToContext(\"tr\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) {"
      },
      {
        "txt": "assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) {"
      },
      {
        "txt": "int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1);"
      },
      {
        "txt": "queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; }"
      },
      {
        "txt": "String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break;"
      },
      {
        "txt": "} else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset);"
      },
      {
        "txt": "break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } }"
      },
      {
        "txt": "private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (StringUtil.in(elName, targetNames))"
      },
      {
        "txt": "return true; if (StringUtil.in(elName, baseTypes)) return false; if (extraTypes != null && StringUtil.in(elName, extraTypes)) return false; } Validate.fail(\"Should not be reachable\"); return false; } boolean inScope(String[] targetNames) {"
      },
      {
        "txt": "return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList);"
      },
      {
        "txt": "} boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos);"
      },
      {
        "txt": "String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) {"
      },
      {
        "txt": "this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts;"
      },
      {
        "txt": "} FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); }"
      },
      {
        "txt": "List<String> getPendingTableCharacters() { return pendingTableCharacters; } void setPendingTableCharacters(List<String> pendingTableCharacters) { this.pendingTableCharacters = pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements."
      },
      {
        "txt": "@param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); }"
      },
      {
        "txt": "boolean isSpecial(Element el) { String name = el.nodeName(); return StringUtil.in(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0)"
      },
      {
        "txt": "return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break;"
      },
      {
        "txt": "if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) {"
      },
      {
        "txt": "return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1;"
      },
      {
        "txt": "boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 }"
      },
      {
        "txt": "while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); // todo: avoid fostering here? newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break;"
      },
      {
        "txt": "} } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } } void removeFromActiveFormattingElements(Element el) {"
      },
      {
        "txt": "for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el);"
      },
      {
        "txt": "} Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; } return null;"
      },
      {
        "txt": "} void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\");"
      },
      {
        "txt": "boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); }"
      },
      {
        "txt": "if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" +"
      },
      {
        "txt": "\"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2024,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 364,
    "end-bug-line": 364,
    "bug": "clearStackToContext(\"tr\");",
    "fix": "clearStackToContext(\"tr\", \"template\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; public class HtmlTreeBuilder extends TreeBuilder { private static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}; private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; private static final String[] TagSearchButton = new String[]{\"button\"};"
      },
      {
        "txt": "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"}; private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\","
      },
      {
        "txt": "\"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag"
      },
      {
        "txt": "private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html HtmlTreeBuilder() {} ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings) { super.initialiseParse(input, baseUri, errors, settings);"
      },
      {
        "txt": "state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true;"
      },
      {
        "txt": "fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, errors, settings); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) {"
      },
      {
        "txt": "if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\")))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents();"
      },
      {
        "txt": "contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } } } runParser(); if (context != null)"
      },
      {
        "txt": "return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) {"
      },
      {
        "txt": "currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; } void markInsertionMode() {"
      },
      {
        "txt": "originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk;"
      },
      {
        "txt": "} Document getDocument() { return doc; } String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return;"
      },
      {
        "txt": "String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing; }"
      },
      {
        "txt": "void error(HtmlTreeBuilderState state) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing"
      },
      {
        "txt": "return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el;"
      },
      {
        "txt": "} void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData());"
      },
      {
        "txt": "insertNode(comment); } void insert(Token.Character characterToken) { Node node; String tagName = currentElement().tagName(); if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(characterToken.getData()); else node = new TextNode(characterToken.getData()); currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack."
      },
      {
        "txt": "} private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null)"
      },
      {
        "txt": "formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); }"
      },
      {
        "txt": "ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) {"
      },
      {
        "txt": "return true; } } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next;"
      },
      {
        "txt": "} } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true;"
      },
      {
        "txt": "} } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break;"
      },
      {
        "txt": "} } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (StringUtil.in(next.nodeName(), elNames)) break; } }"
      },
      {
        "txt": "void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } }"
      },
      {
        "txt": "clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\"); } void clearStackToTableRowContext() { <extra_id_0> } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break;"
      },
      {
        "txt": "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in);"
      },
      {
        "txt": "} void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() {"
      },
      {
        "txt": "boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect);"
      },
      {
        "txt": "break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break;"
      },
      {
        "txt": "} else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead);"
      },
      {
        "txt": "break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName;"
      },
      {
        "txt": "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (StringUtil.in(elName, targetNames)) return true; if (StringUtil.in(elName, baseTypes)) return false;"
      },
      {
        "txt": "if (extraTypes != null && StringUtil.in(elName, extraTypes)) return false; } Validate.fail(\"Should not be reachable\"); return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton);"
      },
      {
        "txt": "} boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true;"
      },
      {
        "txt": "if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() {"
      },
      {
        "txt": "return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement;"
      },
      {
        "txt": "} void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; }"
      },
      {
        "txt": "void setPendingTableCharacters(List<String> pendingTableCharacters) { this.pendingTableCharacters = pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) {"
      },
      {
        "txt": "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return StringUtil.in(name, TagSearchSpecial);"
      },
      {
        "txt": "} Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null;"
      },
      {
        "txt": "} void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) {"
      },
      {
        "txt": "formattingElements.remove(pos); break; } } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); }"
      },
      {
        "txt": "void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8"
      },
      {
        "txt": "skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos);"
      },
      {
        "txt": "Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); // todo: avoid fostering here? newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() {"
      },
      {
        "txt": "while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) {"
      },
      {
        "txt": "formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in);"
      },
      {
        "txt": "} void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) {"
      },
      {
        "txt": "fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in);"
      },
      {
        "txt": "} else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() +"
      },
      {
        "txt": "'}'; }"
      }
    ]
  },
  {
    "id": 2025,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1036,
    "end-bug-line": 1036,
    "bug": "if (name.equals(\"tr\")) {",
    "fix": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.nodes.*; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token }"
      },
      {
        "txt": "return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); }"
      },
      {
        "txt": "}, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\"))"
      },
      {
        "txt": "tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString()));"
      },
      {
        "txt": "return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody);"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true);"
      },
      {
        "txt": "return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break;"
      },
      {
        "txt": "} case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA);"
      },
      {
        "txt": "} } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); // matches with case sensitivity if enabled ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) {"
      },
      {
        "txt": "for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "} else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||"
      },
      {
        "txt": "t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag case tb.error(this); return false; } else { tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); <extra_id_0> tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead"
      },
      {
        "txt": "return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else"
      },
      {
        "txt": "return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \"td\", \"th\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) { tb.error(this); return false; } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { for (int i = 0; i < data.length(); i++) { char c = data.charAt(i); if (!StringUtil.isWhitespace(c)) return false; } return true; } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag);"
      },
      {
        "txt": "} private static final class Constants { private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"}; private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; private static final String[] DdDt = new String[]{\"dd\", \"dt\"};"
      },
      {
        "txt": "private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"}; private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\","
      },
      {
        "txt": "\"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2026,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1096,
    "end-bug-line": 1096,
    "bug": "if (StringUtil.in(name, \"th\", \"td\")) {",
    "fix": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.nodes.*; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); // matches with case sensitivity if enabled ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "} break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag case tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); <extra_id_0> tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \"td\", \"th\")) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) { tb.error(this); return false; } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope }"
      },
      {
        "txt": "}, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag:"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\"))"
      },
      {
        "txt": "return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); }"
      },
      {
        "txt": "} }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); }"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\":"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; }"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) {"
      },
      {
        "txt": "String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { for (int i = 0; i < data.length(); i++) { char c = data.charAt(i); if (!StringUtil.isWhitespace(c)) return false;"
      },
      {
        "txt": "} return true; } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static final class Constants { private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"}; private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; private static final String[] DdDt = new String[]{\"dd\", \"dt\"}; private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"}; private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};"
      },
      {
        "txt": "private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; }"
      }
    ]
  }
]
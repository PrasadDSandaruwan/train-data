[
  {
    "id": 1945,
    "file_path": "src/main/java/org/jsoup/nodes/Element.java",
    "start-bug-line": 1138,
    "end-bug-line": 1138,
    "bug": "clone.classNames();",
    "fix": "clone.classNames = null; // derived on first hit, otherwise gets a pointer to source classnames",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate;"
      },
      {
        "txt": "import org.jsoup.parser.Parser; import org.jsoup.parser.Tag; import org.jsoup.select.Collector; import org.jsoup.select.Elements; import org.jsoup.select.Evaluator; import org.jsoup.select.Selector; import java.util.*; import java.util.regex.Pattern; import java.util.regex.PatternSyntaxException; public class Element extends Node {"
      },
      {
        "txt": "private Tag tag; private Set<String> classNames; public Element(Tag tag, String baseUri, Attributes attributes) { super(baseUri, attributes); Validate.notNull(tag); this.tag = tag; } public Element(Tag tag, String baseUri) { this(tag, baseUri, new Attributes()); }"
      },
      {
        "txt": "@Override public String nodeName() { return tag.getName(); } public String tagName() { return tag.getName(); } public Element tagName(String tagName) { Validate.notEmpty(tagName, \"Tag name must not be empty.\"); tag = Tag.valueOf(tagName);"
      },
      {
        "txt": "return this; } public Tag tag() { return tag; } public boolean isBlock() { return tag.isBlock(); } public String id() { String id = attr(\"id\");"
      },
      {
        "txt": "return id == null ? \"\" : id; } public Element attr(String attributeKey, String attributeValue) { super.attr(attributeKey, attributeValue); return this; } public Map<String, String> dataset() { return attributes.dataset(); } @Override"
      },
      {
        "txt": "public final Element parent() { return (Element) parentNode; } public Elements parents() { Elements parents = new Elements(); accumulateParents(this, parents); return parents; } private static void accumulateParents(Element el, Elements parents) { Element parent = el.parent();"
      },
      {
        "txt": "if (parent != null && !parent.tagName().equals(\"#root\")) { parents.add(parent); accumulateParents(parent, parents); } } public Element child(int index) { return children().get(index); } public Elements children() { List<Element> elements = new ArrayList<Element>();"
      },
      {
        "txt": "for (Node node : childNodes) { if (node instanceof Element) elements.add((Element) node); } return new Elements(elements); } public List<TextNode> textNodes() { List<TextNode> textNodes = new ArrayList<TextNode>(); for (Node node : childNodes) { if (node instanceof TextNode)"
      },
      {
        "txt": "textNodes.add((TextNode) node); } return Collections.unmodifiableList(textNodes); } public List<DataNode> dataNodes() { List<DataNode> dataNodes = new ArrayList<DataNode>(); for (Node node : childNodes) { if (node instanceof DataNode) dataNodes.add((DataNode) node); }"
      },
      {
        "txt": "return Collections.unmodifiableList(dataNodes); } public Elements select(String cssQuery) { return Selector.select(cssQuery, this); } public Element appendChild(Node child) { Validate.notNull(child); addChildren(child); return this; }"
      },
      {
        "txt": "public Element prependChild(Node child) { Validate.notNull(child); addChildren(0, child); return this; } public Element insertChildren(int index, Collection<? extends Node> children) { Validate.notNull(children, \"Children collection to be inserted must not be null.\"); int currentSize = childNodeSize(); if (index < 0) index += currentSize +1; // roll around Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\");"
      },
      {
        "txt": "ArrayList<Node> nodes = new ArrayList<Node>(children); Node[] nodeArray = nodes.toArray(new Node[nodes.size()]); addChildren(index, nodeArray); return this; } public Element appendElement(String tagName) { Element child = new Element(Tag.valueOf(tagName), baseUri()); appendChild(child); return child; }"
      },
      {
        "txt": "public Element prependElement(String tagName) { Element child = new Element(Tag.valueOf(tagName), baseUri()); prependChild(child); return child; } public Element appendText(String text) { TextNode node = new TextNode(text, baseUri()); appendChild(node); return this; }"
      },
      {
        "txt": "public Element prependText(String text) { TextNode node = new TextNode(text, baseUri()); prependChild(node); return this; } public Element append(String html) { Validate.notNull(html); List<Node> nodes = Parser.parseFragment(html, this, baseUri()); addChildren(nodes.toArray(new Node[nodes.size()])); return this;"
      },
      {
        "txt": "} public Element prepend(String html) { Validate.notNull(html); List<Node> nodes = Parser.parseFragment(html, this, baseUri()); addChildren(0, nodes.toArray(new Node[nodes.size()])); return this; } @Override public Element before(String html) { return (Element) super.before(html);"
      },
      {
        "txt": "} @Override public Element before(Node node) { return (Element) super.before(node); } @Override public Element after(String html) { return (Element) super.after(html); } @Override"
      },
      {
        "txt": "public Element after(Node node) { return (Element) super.after(node); } public Element empty() { childNodes.clear(); return this; } @Override public Element wrap(String html) { return (Element) super.wrap(html);"
      },
      {
        "txt": "} public Elements siblingElements() { if (parentNode == null) return new Elements(0); List<Element> elements = parent().children(); Elements siblings = new Elements(elements.size() - 1); for (Element el: elements) if (el != this) siblings.add(el); return siblings;"
      },
      {
        "txt": "} public Element nextElementSibling() { if (parentNode == null) return null; List<Element> siblings = parent().children(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (siblings.size() > index+1) return siblings.get(index+1); else return null;"
      },
      {
        "txt": "} public Element previousElementSibling() { if (parentNode == null) return null; List<Element> siblings = parent().children(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0) return siblings.get(index-1); else return null;"
      },
      {
        "txt": "} public Element firstElementSibling() { List<Element> siblings = parent().children(); return siblings.size() > 1 ? siblings.get(0) : null; } public Integer elementSiblingIndex() { if (parent() == null) return 0; return indexInList(this, parent().children()); } public Element lastElementSibling() {"
      },
      {
        "txt": "List<Element> siblings = parent().children(); return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; } private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); if (element.equals(search)) return i;"
      },
      {
        "txt": "} return null; } public Elements getElementsByTag(String tagName) { Validate.notEmpty(tagName); tagName = tagName.toLowerCase().trim(); return Collector.collect(new Evaluator.Tag(tagName), this); } public Element getElementById(String id) { Validate.notEmpty(id);"
      },
      {
        "txt": "Elements elements = Collector.collect(new Evaluator.Id(id), this); if (elements.size() > 0) return elements.get(0); else return null; } public Elements getElementsByClass(String className) { Validate.notEmpty(className); return Collector.collect(new Evaluator.Class(className), this); }"
      },
      {
        "txt": "public Elements getElementsByAttribute(String key) { Validate.notEmpty(key); key = key.trim().toLowerCase(); return Collector.collect(new Evaluator.Attribute(key), this); } public Elements getElementsByAttributeStarting(String keyPrefix) { Validate.notEmpty(keyPrefix); keyPrefix = keyPrefix.trim().toLowerCase(); return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this); }"
      },
      {
        "txt": "public Elements getElementsByAttributeValue(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValue(key, value), this); } public Elements getElementsByAttributeValueNot(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this); } public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) { return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this); } public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {"
      },
      {
        "txt": "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this); } public Elements getElementsByAttributeValueContaining(String key, String match) { return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); } public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) { return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this); } public Elements getElementsByAttributeValueMatching(String key, String regex) { Pattern pattern;"
      },
      {
        "txt": "try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsByAttributeValueMatching(key, pattern); } public Elements getElementsByIndexLessThan(int index) { return Collector.collect(new Evaluator.IndexLessThan(index), this); }"
      },
      {
        "txt": "public Elements getElementsByIndexGreaterThan(int index) { return Collector.collect(new Evaluator.IndexGreaterThan(index), this); } public Elements getElementsByIndexEquals(int index) { return Collector.collect(new Evaluator.IndexEquals(index), this); } public Elements getElementsContainingText(String searchText) { return Collector.collect(new Evaluator.ContainsText(searchText), this); } public Elements getElementsContainingOwnText(String searchText) {"
      },
      {
        "txt": "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this); } public Elements getElementsMatchingText(Pattern pattern) { return Collector.collect(new Evaluator.Matches(pattern), this); } public Elements getElementsMatchingText(String regex) { Pattern pattern; try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsMatchingText(pattern); } public Elements getElementsMatchingOwnText(Pattern pattern) { return Collector.collect(new Evaluator.MatchesOwn(pattern), this); } public Elements getElementsMatchingOwnText(String regex) { Pattern pattern; try {"
      },
      {
        "txt": "pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsMatchingOwnText(pattern); } public Elements getAllElements() { return Collector.collect(new Evaluator.AllElements(), this); } public String text() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); text(sb); return sb.toString().trim(); } private void text(StringBuilder accum) { appendWhitespaceIfBr(this, accum); for (Node child : childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child; appendNormalisedText(accum, textNode);"
      },
      {
        "txt": "} else if (child instanceof Element) { Element element = (Element) child; if (accum.length() > 0 && element.isBlock() && !TextNode.lastCharIsWhitespace(accum)) accum.append(\" \"); element.text(accum); } } } public String ownText() { StringBuilder sb = new StringBuilder();"
      },
      {
        "txt": "ownText(sb); return sb.toString().trim(); } private void ownText(StringBuilder accum) { for (Node child : childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child; appendNormalisedText(accum, textNode); } else if (child instanceof Element) { appendWhitespaceIfBr((Element) child, accum);"
      },
      {
        "txt": "} } } private void appendNormalisedText(StringBuilder accum, TextNode textNode) { String text = textNode.getWholeText(); if (!preserveWhitespace()) { text = TextNode.normaliseWhitespace(text); if (TextNode.lastCharIsWhitespace(accum)) text = TextNode.stripLeadingWhitespace(text); }"
      },
      {
        "txt": "accum.append(text); } private static void appendWhitespaceIfBr(Element element, StringBuilder accum) { if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum)) accum.append(\" \"); } boolean preserveWhitespace() { return tag.preserveWhitespace() || parent() != null && parent().preserveWhitespace(); } public Element text(String text) {"
      },
      {
        "txt": "Validate.notNull(text); empty(); TextNode textNode = new TextNode(text, baseUri); appendChild(textNode); return this; } Test if this element has any text content (that is not just whitespace). @return true if element has non-blank text content. public boolean hasText() { for (Node child: childNodes) {"
      },
      {
        "txt": "if (child instanceof TextNode) { TextNode textNode = (TextNode) child; if (!textNode.isBlank()) return true; } else if (child instanceof Element) { Element el = (Element) child; if (el.hasText()) return true; } }"
      },
      {
        "txt": "return false; } public String data() { StringBuilder sb = new StringBuilder(); for (Node childNode : childNodes) { if (childNode instanceof DataNode) { DataNode data = (DataNode) childNode; sb.append(data.getWholeData()); } else if (childNode instanceof Element) { Element element = (Element) childNode;"
      },
      {
        "txt": "String elementData = element.data(); sb.append(elementData); } } return sb.toString(); } public String className() { return attr(\"class\"); } public Set<String> classNames() {"
      },
      {
        "txt": "if (classNames == null) { String[] names = className().split(\"\\\\s+\"); classNames = new LinkedHashSet<String>(Arrays.asList(names)); } return classNames; } Set the element's {@code class} attribute to the supplied class names. @param classNames set of classes @return this element, for chaining public Element classNames(Set<String> classNames) {"
      },
      {
        "txt": "Validate.notNull(classNames); attributes.put(\"class\", StringUtil.join(classNames, \" \")); return this; } public boolean hasClass(String className) { Set<String> classNames = classNames(); for (String name : classNames) { if (className.equalsIgnoreCase(name)) return true; }"
      },
      {
        "txt": "return false; } Add a class name to this element's {@code class} attribute. @param className class name to add @return this element public Element addClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.add(className); classNames(classes);"
      },
      {
        "txt": "return this; } Remove a class name from this element's {@code class} attribute. @param className class name to remove @return this element public Element removeClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.remove(className); classNames(classes);"
      },
      {
        "txt": "return this; } Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it. @param className class name to toggle @return this element public Element toggleClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); if (classes.contains(className)) classes.remove(className);"
      },
      {
        "txt": "else classes.add(className); classNames(classes); return this; } public String val() { if (tagName().equals(\"textarea\")) return text(); else return attr(\"value\");"
      },
      {
        "txt": "} public Element val(String value) { if (tagName().equals(\"textarea\")) text(value); else attr(\"value\", value); return this; } void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) { if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock())))"
      },
      {
        "txt": "indent(accum, depth, out); accum .append(\"<\") .append(tagName()); attributes.html(accum, out); if (childNodes.isEmpty() && tag.isSelfClosing()) accum.append(\" />\"); else accum.append(\">\"); }"
      },
      {
        "txt": "void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) { if (!(childNodes.isEmpty() && tag.isSelfClosing())) { if (out.prettyPrint() && !childNodes.isEmpty() && tag.formatAsBlock()) indent(accum, depth, out); accum.append(\"</\").append(tagName()).append(\">\"); } } public String html() { StringBuilder accum = new StringBuilder(); html(accum);"
      },
      {
        "txt": "return accum.toString().trim(); } private void html(StringBuilder accum) { for (Node node : childNodes) node.outerHtml(accum); } public Element html(String html) { empty(); append(html); return this;"
      },
      {
        "txt": "} public String toString() { return outerHtml(); } @Override public boolean equals(Object o) { return this == o; } @Override public int hashCode() {"
      },
      {
        "txt": "result = 31 * result + (tag != null ? tag.hashCode() : 0); return result; } @Override public Element clone() { Element clone = (Element) super.clone(); <extra_id_0> return clone; } }"
      }
    ]
  }
]
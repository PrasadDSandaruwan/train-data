[
  {
    "id": 2052,
    "file_path": "src/main/java/org/jsoup/helper/StringUtil.java",
    "start-bug-line": 131,
    "end-bug-line": 131,
    "bug": "",
    "fix": "public static boolean isInvisibleChar(int c) { return Character.getType(c) == 16 && (c == 8203 || c == 8204 || c == 8205 || c == 173);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import java.net.MalformedURLException; import java.net.URL; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; public final class StringUtil { static final String[] padding = {\"\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \","
      },
      {
        "txt": "\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"}; public static String join(Collection strings, String sep) { return join(strings.iterator(), sep); } public static String join(Iterator strings, String sep) { if (!strings.hasNext()) return \"\"; String start = strings.next().toString(); if (!strings.hasNext()) // only one, avoid builder"
      },
      {
        "txt": "return start; StringBuilder sb = new StringBuilder(64).append(start); while (strings.hasNext()) { sb.append(sep); sb.append(strings.next()); } return sb.toString(); } public static String join(String[] strings, String sep) { return join(Arrays.asList(strings), sep);"
      },
      {
        "txt": "} public static String padding(int width) { if (width < 0) throw new IllegalArgumentException(\"width must be > 0\"); if (width < padding.length) return padding[width]; char[] out = new char[width]; for (int i = 0; i < width; i++) out[i] = ' '; return String.valueOf(out);"
      },
      {
        "txt": "} public static boolean isBlank(String string) { if (string == null || string.length() == 0) return true; int l = string.length(); for (int i = 0; i < l; i++) { if (!StringUtil.isWhitespace(string.codePointAt(i))) return false; } return true;"
      },
      {
        "txt": "} public static boolean isNumeric(String string) { if (string == null || string.length() == 0) return false; int l = string.length(); for (int i = 0; i < l; i++) { if (!Character.isDigit(string.codePointAt(i))) return false; } return true;"
      },
      {
        "txt": "public static boolean isWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r'; } public static boolean isActuallyWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160; } <extra_id_0> public static String normaliseWhitespace(String string) { StringBuilder sb = StringUtil.stringBuilder(); appendNormalisedWhitespace(sb, string, false); return sb.toString(); } public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {"
      },
      {
        "txt": "} public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) { boolean lastWasWhite = false; boolean reachedNonWhite = false; int len = string.length(); int c; for (int i = 0; i < len; i+= Character.charCount(c)) { c = string.codePointAt(i); if (isActuallyWhitespace(c)) { if ((stripLeading && !reachedNonWhite) || lastWasWhite)"
      },
      {
        "txt": "continue; accum.append(' '); lastWasWhite = true; } else { accum.appendCodePoint(c); lastWasWhite = false; reachedNonWhite = true; } }"
      },
      {
        "txt": "} public static boolean in(final String needle, final String... haystack) { final int len = haystack.length; for (int i = 0; i < len; i++) { if (haystack[i].equals(needle)) return true; } return false; } public static boolean inSorted(String needle, String[] haystack) {"
      },
      {
        "txt": "return Arrays.binarySearch(haystack, needle) >= 0; } public static URL resolve(URL base, String relUrl) throws MalformedURLException { if (relUrl.startsWith(\"?\")) relUrl = base.getPath() + relUrl; if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0) { base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile()); } return new URL(base, relUrl); }"
      },
      {
        "txt": "public static String resolve(final String baseUrl, final String relUrl) { URL base; try { try { base = new URL(baseUrl); } catch (MalformedURLException e) { URL abs = new URL(relUrl); return abs.toExternalForm(); } return resolve(base, relUrl).toExternalForm();"
      },
      {
        "txt": "} catch (MalformedURLException e) { return \"\"; } } public static StringBuilder stringBuilder() { StringBuilder sb = stringLocal.get(); if (sb.length() > MaxCachedBuilderSize) { sb = new StringBuilder(MaxCachedBuilderSize); stringLocal.set(sb); } else {"
      },
      {
        "txt": "sb.delete(0, sb.length()); } return sb; } private static final int MaxCachedBuilderSize = 8 * 1024; private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){ @Override protected StringBuilder initialValue() { return new StringBuilder(MaxCachedBuilderSize); }"
      }
    ]
  },
  {
    "id": 2053,
    "file_path": "src/main/java/org/jsoup/helper/StringUtil.java",
    "start-bug-line": 132,
    "end-bug-line": 132,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import java.net.MalformedURLException; import java.net.URL; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; public final class StringUtil { static final String[] padding = {\"\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \","
      },
      {
        "txt": "\" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"}; public static String join(Collection strings, String sep) { return join(strings.iterator(), sep); } public static String join(Iterator strings, String sep) { if (!strings.hasNext()) return \"\"; String start = strings.next().toString(); if (!strings.hasNext()) // only one, avoid builder"
      },
      {
        "txt": "return start; StringBuilder sb = new StringBuilder(64).append(start); while (strings.hasNext()) { sb.append(sep); sb.append(strings.next()); } return sb.toString(); } public static String join(String[] strings, String sep) { return join(Arrays.asList(strings), sep);"
      },
      {
        "txt": "} public static String padding(int width) { if (width < 0) throw new IllegalArgumentException(\"width must be > 0\"); if (width < padding.length) return padding[width]; char[] out = new char[width]; for (int i = 0; i < width; i++) out[i] = ' '; return String.valueOf(out);"
      },
      {
        "txt": "} public static boolean isBlank(String string) { if (string == null || string.length() == 0) return true; int l = string.length(); for (int i = 0; i < l; i++) { if (!StringUtil.isWhitespace(string.codePointAt(i))) return false; } return true;"
      },
      {
        "txt": "} public static boolean isNumeric(String string) { if (string == null || string.length() == 0) return false; int l = string.length(); for (int i = 0; i < l; i++) { if (!Character.isDigit(string.codePointAt(i))) return false; } return true;"
      },
      {
        "txt": "public static boolean isWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r'; } public static boolean isActuallyWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160; } <extra_id_0> public static String normaliseWhitespace(String string) { StringBuilder sb = StringUtil.stringBuilder(); appendNormalisedWhitespace(sb, string, false); return sb.toString(); } public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) {"
      },
      {
        "txt": "} public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) { boolean lastWasWhite = false; boolean reachedNonWhite = false; int len = string.length(); int c; for (int i = 0; i < len; i+= Character.charCount(c)) { c = string.codePointAt(i); if (isActuallyWhitespace(c)) { if ((stripLeading && !reachedNonWhite) || lastWasWhite)"
      },
      {
        "txt": "continue; accum.append(' '); lastWasWhite = true; } else { accum.appendCodePoint(c); lastWasWhite = false; reachedNonWhite = true; } }"
      },
      {
        "txt": "} public static boolean in(final String needle, final String... haystack) { final int len = haystack.length; for (int i = 0; i < len; i++) { if (haystack[i].equals(needle)) return true; } return false; } public static boolean inSorted(String needle, String[] haystack) {"
      },
      {
        "txt": "return Arrays.binarySearch(haystack, needle) >= 0; } public static URL resolve(URL base, String relUrl) throws MalformedURLException { if (relUrl.startsWith(\"?\")) relUrl = base.getPath() + relUrl; if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0) { base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile()); } return new URL(base, relUrl); }"
      },
      {
        "txt": "public static String resolve(final String baseUrl, final String relUrl) { URL base; try { try { base = new URL(baseUrl); } catch (MalformedURLException e) { URL abs = new URL(relUrl); return abs.toExternalForm(); } return resolve(base, relUrl).toExternalForm();"
      },
      {
        "txt": "} catch (MalformedURLException e) { return \"\"; } } public static StringBuilder stringBuilder() { StringBuilder sb = stringLocal.get(); if (sb.length() > MaxCachedBuilderSize) { sb = new StringBuilder(MaxCachedBuilderSize); stringLocal.set(sb); } else {"
      },
      {
        "txt": "sb.delete(0, sb.length()); } return sb; } private static final int MaxCachedBuilderSize = 8 * 1024; private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){ @Override protected StringBuilder initialValue() { return new StringBuilder(MaxCachedBuilderSize); }"
      }
    ]
  },
  {
    "id": 2054,
    "file_path": "src/main/java/org/jsoup/helper/StringUtil.java",
    "start-bug-line": 165,
    "end-bug-line": 165,
    "bug": "else {",
    "fix": "else if (!isInvisibleChar(c)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import java.net.MalformedURLException; import java.net.URL; import java.util.Arrays; import java.util.Collection; import java.util.Iterator;"
      },
      {
        "txt": "public final class StringUtil { static final String[] padding = {\"\", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \", \" \"}; public static String join(Collection strings, String sep) { return join(strings.iterator(), sep); } public static String join(Iterator strings, String sep) { if (!strings.hasNext()) return \"\";"
      },
      {
        "txt": "String start = strings.next().toString(); if (!strings.hasNext()) // only one, avoid builder return start; StringBuilder sb = new StringBuilder(64).append(start); while (strings.hasNext()) { sb.append(sep); sb.append(strings.next()); } return sb.toString(); }"
      },
      {
        "txt": "public static String join(String[] strings, String sep) { return join(Arrays.asList(strings), sep); } public static String padding(int width) { if (width < 0) throw new IllegalArgumentException(\"width must be > 0\"); if (width < padding.length) return padding[width]; char[] out = new char[width]; for (int i = 0; i < width; i++)"
      },
      {
        "txt": "out[i] = ' '; return String.valueOf(out); } public static boolean isBlank(String string) { if (string == null || string.length() == 0) return true; int l = string.length(); for (int i = 0; i < l; i++) { if (!StringUtil.isWhitespace(string.codePointAt(i))) return false;"
      },
      {
        "txt": "} return true; } public static boolean isNumeric(String string) { if (string == null || string.length() == 0) return false; int l = string.length(); for (int i = 0; i < l; i++) { if (!Character.isDigit(string.codePointAt(i))) return false;"
      },
      {
        "txt": "} return true; } public static boolean isWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r'; } public static boolean isActuallyWhitespace(int c){ return c == ' ' || c == '\\t' || c == '\\n' || c == '\\f' || c == '\\r' || c == 160; } public static String normaliseWhitespace(String string) {"
      },
      {
        "txt": "StringBuilder sb = StringUtil.stringBuilder(); appendNormalisedWhitespace(sb, string, false); return sb.toString(); } public static void appendNormalisedWhitespace(StringBuilder accum, String string, boolean stripLeading) { boolean lastWasWhite = false; boolean reachedNonWhite = false; int len = string.length(); int c; for (int i = 0; i < len; i+= Character.charCount(c)) {"
      },
      {
        "txt": "if (isActuallyWhitespace(c)) { if ((stripLeading && !reachedNonWhite) || lastWasWhite) continue; accum.append(' '); lastWasWhite = true; } <extra_id_0> accum.appendCodePoint(c); lastWasWhite = false; reachedNonWhite = true; } } }"
      },
      {
        "txt": "} } public static boolean in(final String needle, final String... haystack) { final int len = haystack.length; for (int i = 0; i < len; i++) { if (haystack[i].equals(needle)) return true; } return false; }"
      },
      {
        "txt": "public static boolean inSorted(String needle, String[] haystack) { return Arrays.binarySearch(haystack, needle) >= 0; } public static URL resolve(URL base, String relUrl) throws MalformedURLException { if (relUrl.startsWith(\"?\")) relUrl = base.getPath() + relUrl; if (relUrl.indexOf('.') == 0 && base.getFile().indexOf('/') != 0) { base = new URL(base.getProtocol(), base.getHost(), base.getPort(), \"/\" + base.getFile()); } return new URL(base, relUrl);"
      },
      {
        "txt": "} public static String resolve(final String baseUrl, final String relUrl) { URL base; try { try { base = new URL(baseUrl); } catch (MalformedURLException e) { URL abs = new URL(relUrl); return abs.toExternalForm(); }"
      },
      {
        "txt": "return resolve(base, relUrl).toExternalForm(); } catch (MalformedURLException e) { return \"\"; } } public static StringBuilder stringBuilder() { StringBuilder sb = stringLocal.get(); if (sb.length() > MaxCachedBuilderSize) { sb = new StringBuilder(MaxCachedBuilderSize); stringLocal.set(sb);"
      },
      {
        "txt": "} else { sb.delete(0, sb.length()); } return sb; } private static final int MaxCachedBuilderSize = 8 * 1024; private static final ThreadLocal<StringBuilder> stringLocal = new ThreadLocal<StringBuilder>(){ @Override protected StringBuilder initialValue() { return new StringBuilder(MaxCachedBuilderSize);"
      },
      {
        "txt": "} };"
      }
    ]
  }
]
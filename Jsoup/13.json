[
  {
    "id": 1890,
    "file_path": "src/main/java/org/jsoup/nodes/Node.java",
    "start-bug-line": 107,
    "end-bug-line": 107,
    "bug": "",
    "fix": "if (attributeKey.toLowerCase().startsWith(\"abs:\")) { String key = attributeKey.substring(\"abs:\".length()); if (attributes.hasKey(key) && !absUrl(key).equals(\"\")) return true; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.parser.Parser; import org.jsoup.select.NodeTraversor; import org.jsoup.select.NodeVisitor; import java.net.MalformedURLException; import java.net.URL; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collections; import java.util.List; The base, abstract Node model. Elements, Documents, Comments etc are all Node instances. @author Jonathan Hedley, jonathan@hedley.net */ public abstract class Node implements Cloneable { Node parentNode; List<Node> childNodes; Attributes attributes; String baseUri; int siblingIndex;"
      },
      {
        "txt": "Create a new Node. @param baseUri base URI @param attributes attributes (not null, but may be empty) protected Node(String baseUri, Attributes attributes) { Validate.notNull(baseUri); Validate.notNull(attributes); childNodes = new ArrayList<Node>(4); this.baseUri = baseUri.trim(); this.attributes = attributes; }"
      },
      {
        "txt": "protected Node(String baseUri) { this(baseUri, new Attributes()); } protected Node() { childNodes = Collections.emptyList(); attributes = null; } Get the node name of this node. Use for debugging purposes and not logic switching (for that, use instanceof). @return node name public abstract String nodeName();"
      },
      {
        "txt": "public String attr(String attributeKey) { Validate.notNull(attributeKey); if (attributes.hasKey(attributeKey)) return attributes.get(attributeKey); else if (attributeKey.toLowerCase().startsWith(\"abs:\")) return absUrl(attributeKey.substring(\"abs:\".length())); else return \"\"; } public Attributes attributes() { return attributes;"
      },
      {
        "txt": "public Node attr(String attributeKey, String attributeValue) { attributes.put(attributeKey, attributeValue); return this; } public boolean hasAttr(String attributeKey) { Validate.notNull(attributeKey); <extra_id_0> } public Node removeAttr(String attributeKey) { Validate.notNull(attributeKey); attributes.remove(attributeKey); return this; }"
      },
      {
        "txt": "return this; } Get the base URI of this node. @return base URI public String baseUri() { return baseUri; } Update the base URI of this node. @param baseUri base URI to set public void setBaseUri(String baseUri) {"
      },
      {
        "txt": "Validate.notNull(baseUri); this.baseUri = baseUri; } public String absUrl(String attributeKey) { Validate.notEmpty(attributeKey); String relUrl = attr(attributeKey); if (!hasAttr(attributeKey)) { return \"\"; // nothing to make absolute with } else { URL base;"
      },
      {
        "txt": "try { try { base = new URL(baseUri); } catch (MalformedURLException e) { URL abs = new URL(relUrl); return abs.toExternalForm(); } if (relUrl.startsWith(\"?\")) relUrl = base.getPath() + relUrl; URL abs = new URL(base, relUrl);"
      },
      {
        "txt": "return abs.toExternalForm(); } catch (MalformedURLException e) { return \"\"; } } } Get a child node by index @param index index of child node @return the child node at this index. public Node childNode(int index) {"
      },
      {
        "txt": "return childNodes.get(index); } Get this node's children. Presented as an unmodifiable list: new children can not be added, but the child nodes themselves can be manipulated. @return list of children. If no children, returns an empty list. public List<Node> childNodes() { return Collections.unmodifiableList(childNodes); } protected Node[] childNodesAsArray() { return childNodes.toArray(new Node[childNodes().size()]);"
      },
      {
        "txt": "} Gets this node's parent node. @return parent node; or null if no parent. public Node parent() { return parentNode; } public Document ownerDocument() { if (this instanceof Document) return (Document) this; else if (parentNode == null)"
      },
      {
        "txt": "return null; else return parentNode.ownerDocument(); } public void remove() { Validate.notNull(parentNode); parentNode.removeChild(this); } public Node before(String html) { addSiblingHtml(siblingIndex(), html);"
      },
      {
        "txt": "return this; } public Node before(Node node) { Validate.notNull(node); Validate.notNull(parentNode); parentNode.addChildren(siblingIndex(), node); return this; } public Node after(String html) { addSiblingHtml(siblingIndex()+1, html);"
      },
      {
        "txt": "return this; } public Node after(Node node) { Validate.notNull(node); Validate.notNull(parentNode); parentNode.addChildren(siblingIndex()+1, node); return this; } private void addSiblingHtml(int index, String html) { Validate.notNull(html);"
      },
      {
        "txt": "Validate.notNull(parentNode); Element context = parent() instanceof Element ? (Element) parent() : null; List<Node> nodes = Parser.parseFragment(html, context, baseUri()); parentNode.addChildren(index, nodes.toArray(new Node[nodes.size()])); } Wrap the supplied HTML around this node. @param html HTML to wrap around this element, e.g. {@code <div class=\"head\"></div>}. Can be arbitrarily deep. @return this node, for chaining. public Node wrap(String html) { Validate.notEmpty(html);"
      },
      {
        "txt": "Element context = parent() instanceof Element ? (Element) parent() : null; List<Node> wrapChildren = Parser.parseFragment(html, context, baseUri()); Node wrapNode = wrapChildren.get(0); if (wrapNode == null || !(wrapNode instanceof Element)) // nothing to wrap with; noop return null; Element wrap = (Element) wrapNode; Element deepest = getDeepChild(wrap); parentNode.replaceChild(this, wrap); deepest.addChildren(this); if (wrapChildren.size() > 0) {"
      },
      {
        "txt": "for (int i = 0; i < wrapChildren.size(); i++) { Node remainder = wrapChildren.get(i); remainder.parentNode.removeChild(remainder); wrap.appendChild(remainder); } } return this; } private Element getDeepChild(Element el) { List<Element> children = el.children();"
      },
      {
        "txt": "if (children.size() > 0) return getDeepChild(children.get(0)); else return el; } public void replaceWith(Node in) { Validate.notNull(in); Validate.notNull(parentNode); parentNode.replaceChild(this, in); }"
      },
      {
        "txt": "protected void setParentNode(Node parentNode) { if (this.parentNode != null) this.parentNode.removeChild(this); this.parentNode = parentNode; } protected void replaceChild(Node out, Node in) { Validate.isTrue(out.parentNode == this); Validate.notNull(in); if (in.parentNode != null) in.parentNode.removeChild(in);"
      },
      {
        "txt": "Integer index = out.siblingIndex(); childNodes.set(index, in); in.parentNode = this; in.setSiblingIndex(index); out.parentNode = null; } protected void removeChild(Node out) { Validate.isTrue(out.parentNode == this); int index = out.siblingIndex(); childNodes.remove(index);"
      },
      {
        "txt": "reindexChildren(); out.parentNode = null; } protected void addChildren(Node... children) { for (Node child: children) { reparentChild(child); childNodes.add(child); child.setSiblingIndex(childNodes.size()-1); } }"
      },
      {
        "txt": "protected void addChildren(int index, Node... children) { Validate.noNullElements(children); for (int i = children.length - 1; i >= 0; i--) { Node in = children[i]; reparentChild(in); childNodes.add(index, in); } reindexChildren(); } private void reparentChild(Node child) {"
      },
      {
        "txt": "if (child.parentNode != null) child.parentNode.removeChild(child); child.setParentNode(this); } private void reindexChildren() { for (int i = 0; i < childNodes.size(); i++) { childNodes.get(i).setSiblingIndex(i); } } Retrieves this node's sibling nodes. Effectively, {@link #childNodes() node.parent.childNodes()}."
      },
      {
        "txt": "@return node siblings, including this node public List<Node> siblingNodes() { return parent().childNodes(); // TODO: should this strip out this node? i.e. not a sibling of self? } Get this node's next sibling. @return next sibling, or null if this is the last sibling public Node nextSibling() { if (parentNode == null) return null; // root List<Node> siblings = parentNode.childNodes;"
      },
      {
        "txt": "Integer index = siblingIndex(); Validate.notNull(index); if (siblings.size() > index+1) return siblings.get(index+1); else return null; } Get this node's previous sibling. @return the previous sibling, or null if this is the first sibling public Node previousSibling() {"
      },
      {
        "txt": "List<Node> siblings = parentNode.childNodes; Integer index = siblingIndex(); Validate.notNull(index); if (index > 0) return siblings.get(index-1); else return null; } public int siblingIndex() { return siblingIndex;"
      },
      {
        "txt": "} protected void setSiblingIndex(int siblingIndex) { this.siblingIndex = siblingIndex; } Get the outer HTML of this node. @return HTML public String outerHtml() { StringBuilder accum = new StringBuilder(32*1024); outerHtml(accum); return accum.toString();"
      },
      {
        "txt": "} protected void outerHtml(StringBuilder accum) { new NodeTraversor(new OuterHtmlVisitor(accum, getOutputSettings())).traverse(this); } private Document.OutputSettings getOutputSettings() { return ownerDocument() != null ? ownerDocument().outputSettings() : (new Document(\"\")).outputSettings(); } Get the outer HTML of this node. @param accum accumulator to place HTML into abstract void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out);"
      },
      {
        "txt": "abstract void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out); public String toString() { return outerHtml(); } protected void indent(StringBuilder accum, int depth, Document.OutputSettings out) { accum.append(\"\\n\").append(StringUtil.padding(depth * out.indentAmount())); } @Override public boolean equals(Object o) { if (this == o) return true;"
      },
      {
        "txt": "return false; } @Override public int hashCode() { int result = parentNode != null ? parentNode.hashCode() : 0; result = 31 * result + (attributes != null ? attributes.hashCode() : 0); return result; } @Override public Node clone() {"
      },
      {
        "txt": "return doClone(null); // splits for orphan } protected Node doClone(Node parent) { Node clone; try { clone = (Node) super.clone(); } catch (CloneNotSupportedException e) { throw new RuntimeException(e); } clone.parentNode = parent; // can be null, to create an orphan split"
      },
      {
        "txt": "clone.siblingIndex = parent == null ? 0 : siblingIndex; clone.attributes = attributes != null ? attributes.clone() : null; clone.baseUri = baseUri; clone.childNodes = new ArrayList<Node>(childNodes.size()); for (Node child: childNodes) clone.childNodes.add(child.doClone(clone)); // clone() creates orphans, doClone() keeps parent return clone; } private static class OuterHtmlVisitor implements NodeVisitor { private StringBuilder accum;"
      },
      {
        "txt": "private Document.OutputSettings out; OuterHtmlVisitor(StringBuilder accum, Document.OutputSettings out) { this.accum = accum; this.out = out; } public void head(Node node, int depth) { node.outerHtmlHead(accum, depth, out); } public void tail(Node node, int depth) { if (!node.nodeName().equals(\"#text\")) // saves a void hit."
      },
      {
        "txt": "node.outerHtmlTail(accum, depth, out); } }"
      }
    ]
  }
]
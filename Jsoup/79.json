[
  {
    "id": 2062,
    "file_path": "src/main/java/org/jsoup/nodes/LeafNode.java",
    "start-bug-line": 5,
    "end-bug-line": 5,
    "bug": "",
    "fix": "import java.util.Collections;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.Validate; <extra_id_0> abstract class LeafNode extends Node { Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set) protected final boolean hasAttributes() { return value instanceof Attributes; } @Override"
      },
      {
        "txt": "} @Override public final Attributes attributes() { ensureAttributes(); return (Attributes) value; } private void ensureAttributes() { if (!hasAttributes()) { Object coreValue = value; Attributes attributes = new Attributes();"
      },
      {
        "txt": "value = attributes; if (coreValue != null) attributes.put(nodeName(), (String) coreValue); } } String coreValue() { return attr(nodeName()); } void coreValue(String value) { attr(nodeName(), value);"
      },
      {
        "txt": "} @Override public String attr(String key) { Validate.notNull(key); if (!hasAttributes()) { return key.equals(nodeName()) ? (String) value : EmptyString; } return super.attr(key); } @Override"
      },
      {
        "txt": "public Node attr(String key, String value) { if (!hasAttributes() && key.equals(nodeName())) { this.value = value; } else { ensureAttributes(); super.attr(key, value); } return this; } @Override"
      },
      {
        "txt": "public boolean hasAttr(String key) { ensureAttributes(); return super.hasAttr(key); } @Override public Node removeAttr(String key) { ensureAttributes(); return super.removeAttr(key); } @Override"
      },
      {
        "txt": "public String absUrl(String key) { ensureAttributes(); return super.absUrl(key); } @Override public String baseUri() { return hasParent() ? parent().baseUri() : \"\"; } @Override protected void doSetBaseUri(String baseUri) {"
      },
      {
        "txt": "} @Override public int childNodeSize() { return 0; } @Override protected List<Node> ensureChildNodes() { throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\"); }"
      }
    ]
  },
  {
    "id": 2063,
    "file_path": "src/main/java/org/jsoup/nodes/LeafNode.java",
    "start-bug-line": 8,
    "end-bug-line": 8,
    "bug": "",
    "fix": "private static final List<Node> EmptyNodes = Collections.emptyList();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.Validate; import java.util.List; abstract class LeafNode extends Node { <extra_id_0> Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set) protected final boolean hasAttributes() { return value instanceof Attributes; } @Override public final Attributes attributes() {"
      },
      {
        "txt": "@Override public final Attributes attributes() { ensureAttributes(); return (Attributes) value; } private void ensureAttributes() { if (!hasAttributes()) { Object coreValue = value; Attributes attributes = new Attributes(); value = attributes;"
      },
      {
        "txt": "if (coreValue != null) attributes.put(nodeName(), (String) coreValue); } } String coreValue() { return attr(nodeName()); } void coreValue(String value) { attr(nodeName(), value); }"
      },
      {
        "txt": "@Override public String attr(String key) { Validate.notNull(key); if (!hasAttributes()) { return key.equals(nodeName()) ? (String) value : EmptyString; } return super.attr(key); } @Override public Node attr(String key, String value) {"
      },
      {
        "txt": "if (!hasAttributes() && key.equals(nodeName())) { this.value = value; } else { ensureAttributes(); super.attr(key, value); } return this; } @Override public boolean hasAttr(String key) {"
      },
      {
        "txt": "ensureAttributes(); return super.hasAttr(key); } @Override public Node removeAttr(String key) { ensureAttributes(); return super.removeAttr(key); } @Override public String absUrl(String key) {"
      },
      {
        "txt": "ensureAttributes(); return super.absUrl(key); } @Override public String baseUri() { return hasParent() ? parent().baseUri() : \"\"; } @Override protected void doSetBaseUri(String baseUri) { }"
      },
      {
        "txt": "@Override public int childNodeSize() { return 0; } @Override protected List<Node> ensureChildNodes() { throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\"); }"
      }
    ]
  },
  {
    "id": 2064,
    "file_path": "src/main/java/org/jsoup/nodes/LeafNode.java",
    "start-bug-line": 94,
    "end-bug-line": 94,
    "bug": "throw new UnsupportedOperationException(\"Leaf Nodes do not have child nodes.\");",
    "fix": "return EmptyNodes;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.Validate; import java.util.List; abstract class LeafNode extends Node { Object value; // either a string value, or an attribute map (in the rare case multiple attributes are set) protected final boolean hasAttributes() { return value instanceof Attributes;"
      },
      {
        "txt": "} @Override public final Attributes attributes() { ensureAttributes(); return (Attributes) value; } private void ensureAttributes() { if (!hasAttributes()) { Object coreValue = value; Attributes attributes = new Attributes();"
      },
      {
        "txt": "value = attributes; if (coreValue != null) attributes.put(nodeName(), (String) coreValue); } } String coreValue() { return attr(nodeName()); } void coreValue(String value) { attr(nodeName(), value);"
      },
      {
        "txt": "} @Override public String attr(String key) { Validate.notNull(key); if (!hasAttributes()) { return key.equals(nodeName()) ? (String) value : EmptyString; } return super.attr(key); } @Override"
      },
      {
        "txt": "public Node attr(String key, String value) { if (!hasAttributes() && key.equals(nodeName())) { this.value = value; } else { ensureAttributes(); super.attr(key, value); } return this; } @Override"
      },
      {
        "txt": "public boolean hasAttr(String key) { ensureAttributes(); return super.hasAttr(key); } @Override public Node removeAttr(String key) { ensureAttributes(); return super.removeAttr(key); } @Override"
      },
      {
        "txt": "public String absUrl(String key) { ensureAttributes(); return super.absUrl(key); } @Override public String baseUri() { return hasParent() ? parent().baseUri() : \"\"; } @Override protected void doSetBaseUri(String baseUri) {"
      },
      {
        "txt": "@Override public int childNodeSize() { return 0; } @Override protected List<Node> ensureChildNodes() { <extra_id_0> } }"
      }
    ]
  }
]
[
  {
    "id": 2055,
    "file_path": "src/main/java/org/jsoup/nodes/Attributes.java",
    "start-bug-line": 319,
    "end-bug-line": 320,
    "bug": "if (!(out.syntax() == Document.OutputSettings.Syntax.html && (val == null || val.equals(key) && Attribute.isBooleanAttribute(key)))) {",
    "fix": "if (!Attribute.shouldCollapseAttribute(key, val, out)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.SerializationException; import org.jsoup.helper.Validate; import java.io.IOException; import java.util.AbstractMap; import java.util.AbstractSet; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; import static org.jsoup.internal.Normalizer.lowerCase; public class Attributes implements Iterable<Attribute>, Cloneable { protected static final String dataPrefix = \"data-\"; private static final int InitialCapacity = 4; // todo - analyze Alexa 1MM sites, determine best setting private static final int GrowthFactor = 2; private static final String[] Empty = {};"
      },
      {
        "txt": "static final int NotFound = -1; private static final String EmptyString = \"\"; private int size = 0; // number of slots used (not capacity, which is keys.length String[] keys = Empty; String[] vals = Empty; private void checkCapacity(int minNewSize) { Validate.isTrue(minNewSize >= size); int curSize = keys.length; if (curSize >= minNewSize) return;"
      },
      {
        "txt": "int newSize = curSize >= InitialCapacity ? size * GrowthFactor : InitialCapacity; if (minNewSize > newSize) newSize = minNewSize; keys = copyOf(keys, newSize); vals = copyOf(vals, newSize); } private static String[] copyOf(String[] orig, int size) { final String[] copy = new String[size]; System.arraycopy(orig, 0, copy, 0, Math.min(orig.length, size));"
      },
      {
        "txt": "return copy; } int indexOfKey(String key) { Validate.notNull(key); for (int i = 0; i < size; i++) { if (key.equals(keys[i])) return i; } return NotFound; }"
      },
      {
        "txt": "private int indexOfKeyIgnoreCase(String key) { Validate.notNull(key); for (int i = 0; i < size; i++) { if (key.equalsIgnoreCase(keys[i])) return i; } return NotFound; } static String checkNotNull(String val) { return val == null ? EmptyString : val;"
      },
      {
        "txt": "} Get an attribute value by key. @param key the (case-sensitive) attribute key @return the attribute value if set; or empty string if not set (or a boolean attribute). @see #hasKey(String) public String get(String key) { int i = indexOfKey(key); return i == NotFound ? EmptyString : checkNotNull(vals[i]); } public String getIgnoreCase(String key) {"
      },
      {
        "txt": "int i = indexOfKeyIgnoreCase(key); return i == NotFound ? EmptyString : checkNotNull(vals[i]); } private void add(String key, String value) { checkCapacity(size + 1); keys[size] = key; vals[size] = value; size++; } public Attributes put(String key, String value) {"
      },
      {
        "txt": "int i = indexOfKey(key); if (i != NotFound) vals[i] = value; else add(key, value); return this; } void putIgnoreCase(String key, String value) { int i = indexOfKeyIgnoreCase(key); if (i != NotFound) {"
      },
      {
        "txt": "vals[i] = value; if (!keys[i].equals(key)) // case changed, update keys[i] = key; } else add(key, value); } public Attributes put(String key, boolean value) { if (value) putIgnoreCase(key, null);"
      },
      {
        "txt": "else remove(key); return this; } Set a new attribute, or replace an existing one by key. @param attribute attribute with case sensitive key @return these attributes, for chaining public Attributes put(Attribute attribute) { Validate.notNull(attribute); put(attribute.getKey(), attribute.getValue());"
      },
      {
        "txt": "attribute.parent = this; return this; } private void remove(int index) { Validate.isFalse(index >= size); int shifted = size - index - 1; if (shifted > 0) { System.arraycopy(keys, index + 1, keys, index, shifted); System.arraycopy(vals, index + 1, vals, index, shifted); }"
      },
      {
        "txt": "size--; keys[size] = null; // release hold vals[size] = null; } Remove an attribute by key. <b>Case sensitive.</b> @param key attribute key to remove public void remove(String key) { int i = indexOfKey(key); if (i != NotFound) remove(i);"
      },
      {
        "txt": "} Remove an attribute by key. <b>Case insensitive.</b> @param key attribute key to remove public void removeIgnoreCase(String key) { int i = indexOfKeyIgnoreCase(key); if (i != NotFound) remove(i); } Tests if these attributes contain an attribute with this key. @param key case-sensitive key to check for"
      },
      {
        "txt": "@return true if key exists, false otherwise public boolean hasKey(String key) { return indexOfKey(key) != NotFound; } Tests if these attributes contain an attribute with this key. @param key key to check for @return true if key exists, false otherwise public boolean hasKeyIgnoreCase(String key) { return indexOfKeyIgnoreCase(key) != NotFound; }"
      },
      {
        "txt": "Get the number of attributes in this set. @return size public int size() { return size; } Add all the attributes from the incoming set to this set. @param incoming attributes to add to these attributes. public void addAll(Attributes incoming) { if (incoming.size() == 0) return;"
      },
      {
        "txt": "checkCapacity(size + incoming.size); for (Attribute attr : incoming) { put(attr); } } public Iterator<Attribute> iterator() { return new Iterator<Attribute>() { int i = 0; @Override public boolean hasNext() {"
      },
      {
        "txt": "return i < size; } @Override public Attribute next() { final Attribute attr = new Attribute(keys[i], vals[i], Attributes.this); i++; return attr; } @Override public void remove() {"
      },
      {
        "txt": "Attributes.this.remove(--i); // next() advanced, so rewind } }; } Get the attributes as a List, for iteration. @return an view of the attributes as an unmodifialbe List. public List<Attribute> asList() { ArrayList<Attribute> list = new ArrayList<>(size); for (int i = 0; i < size; i++) { Attribute attr = vals[i] == null ?"
      },
      {
        "txt": "new BooleanAttribute(keys[i]) : // deprecated class, but maybe someone still wants it new Attribute(keys[i], vals[i], Attributes.this); list.add(attr); } return Collections.unmodifiableList(list); } public Map<String, String> dataset() { return new Dataset(this); } Get the HTML representation of these attributes."
      },
      {
        "txt": "@return HTML @throws SerializationException if the HTML representation of the attributes cannot be constructed. public String html() { StringBuilder accum = new StringBuilder(); try { html(accum, (new Document(\"\")).outputSettings()); // output settings a bit funky, but this html() seldom used } catch (IOException e) { // ought never happen throw new SerializationException(e); } return accum.toString();"
      },
      {
        "txt": "final void html(final Appendable accum, final Document.OutputSettings out) throws IOException { final int sz = size; for (int i = 0; i < sz; i++) { final String key = keys[i]; final String val = vals[i]; accum.append(' ').append(key); <extra_id_0> accum.append(\"=\\\"\"); Entities.escape(accum, val == null ? EmptyString : val, out, true, false, false); accum.append('\"'); } } }"
      },
      {
        "txt": "} } @Override public String toString() { return html(); } @Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false;"
      },
      {
        "txt": "Attributes that = (Attributes) o; if (size != that.size) return false; if (!Arrays.equals(keys, that.keys)) return false; return Arrays.equals(vals, that.vals); } @Override public int hashCode() { int result = size; result = 31 * result + Arrays.hashCode(keys); result = 31 * result + Arrays.hashCode(vals);"
      },
      {
        "txt": "return result; } @Override public Attributes clone() { Attributes clone; try { clone = (Attributes) super.clone(); } catch (CloneNotSupportedException e) { throw new RuntimeException(e); }"
      },
      {
        "txt": "clone.size = size; keys = copyOf(keys, size); vals = copyOf(vals, size); return clone; } public void normalize() { for (int i = 0; i < size; i++) { keys[i] = lowerCase(keys[i]); } }"
      },
      {
        "txt": "private static class Dataset extends AbstractMap<String, String> { private final Attributes attributes; private Dataset(Attributes attributes) { this.attributes = attributes; } @Override public Set<Entry<String, String>> entrySet() { return new EntrySet(); } @Override"
      },
      {
        "txt": "public String put(String key, String value) { String dataKey = dataKey(key); String oldValue = attributes.hasKey(dataKey) ? attributes.get(dataKey) : null; attributes.put(dataKey, value); return oldValue; } private class EntrySet extends AbstractSet<Map.Entry<String, String>> { @Override public Iterator<Map.Entry<String, String>> iterator() { return new DatasetIterator();"
      },
      {
        "txt": "} @Override public int size() { int count = 0; Iterator iter = new DatasetIterator(); while (iter.hasNext()) count++; return count; } }"
      },
      {
        "txt": "private class DatasetIterator implements Iterator<Map.Entry<String, String>> { private Iterator<Attribute> attrIter = attributes.iterator(); private Attribute attr; public boolean hasNext() { while (attrIter.hasNext()) { attr = attrIter.next(); if (attr.isDataAttribute()) return true; } return false; }"
      },
      {
        "txt": "public Entry<String, String> next() { return new Attribute(attr.getKey().substring(dataPrefix.length()), attr.getValue()); } public void remove() { attributes.remove(attr.getKey()); } } } private static String dataKey(String key) { return dataPrefix + key;"
      }
    ]
  }
]
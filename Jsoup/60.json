[
  {
    "id": 2009,
    "file_path": "src/main/java/org/jsoup/parser/TokenQueue.java",
    "start-bug-line": 289,
    "end-bug-line": 289,
    "bug": "",
    "fix": "if (depth > 0) {// ran out of queue before seeing enough ) Validate.fail(\"Did not find balanced maker at \" + out); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; public class TokenQueue { private String queue; private int pos = 0;"
      },
      {
        "txt": "private static final char ESC = '\\\\'; // escape char for chomp balanced. Create a new TokenQueue. @param data string of data to back queue. public TokenQueue(String data) { Validate.notNull(data); queue = data; } public boolean isEmpty() { return remainingLength() == 0; }"
      },
      {
        "txt": "private int remainingLength() { return queue.length() - pos; } public char peek() { return isEmpty() ? 0 : queue.charAt(pos); } Add a character to the start of the queue (will be the next character retrieved). @param c character to add public void addFirst(Character c) { addFirst(c.toString());"
      },
      {
        "txt": "} Add a string to the start of the queue. @param seq string to add. public void addFirst(String seq) { queue = seq + queue.substring(pos); pos = 0; } public boolean matches(String seq) { return queue.regionMatches(true, pos, seq, 0, seq.length()); }"
      },
      {
        "txt": "public boolean matchesCS(String seq) { return queue.startsWith(seq, pos); } Tests if the next characters match any of the sequences. Case insensitive. @param seq list of strings to case insensitively check for @return true of any matched, false if none did public boolean matchesAny(String... seq) { for (String s : seq) { if (matches(s)) return true;"
      },
      {
        "txt": "} return false; } public boolean matchesAny(char... seq) { if (isEmpty()) return false; for (char c: seq) { if (queue.charAt(pos) == c) return true; }"
      },
      {
        "txt": "return false; } public boolean matchesStartTag() { return (remainingLength() >= 2 && queue.charAt(pos) == '<' && Character.isLetter(queue.charAt(pos+1))); } public boolean matchChomp(String seq) { if (matches(seq)) { pos += seq.length(); return true; } else {"
      },
      {
        "txt": "return false; } } Tests if queue starts with a whitespace character. @return if starts with whitespace public boolean matchesWhitespace() { return !isEmpty() && StringUtil.isWhitespace(queue.charAt(pos)); } Test if the queue matches a word character (letter or digit). @return if matches a word character"
      },
      {
        "txt": "public boolean matchesWord() { return !isEmpty() && Character.isLetterOrDigit(queue.charAt(pos)); } public void advance() { if (!isEmpty()) pos++; } public char consume() { return queue.charAt(pos++); } <p>"
      },
      {
        "txt": "Case insensitive. public void consume(String seq) { if (!matches(seq)) throw new IllegalStateException(\"Queue did not match expected sequence\"); int len = seq.length(); if (len > remainingLength()) throw new IllegalStateException(\"Queue not long enough to consume sequence\"); pos += len; } public String consumeTo(String seq) {"
      },
      {
        "txt": "int offset = queue.indexOf(seq, pos); if (offset != -1) { String consumed = queue.substring(pos, offset); pos += consumed.length(); return consumed; } else { return remainder(); } } public String consumeToIgnoreCase(String seq) {"
      },
      {
        "txt": "int start = pos; String first = seq.substring(0, 1); boolean canScan = first.toLowerCase().equals(first.toUpperCase()); // if first is not cased, use index of while (!isEmpty()) { if (matches(seq)) break; if (canScan) { int skip = queue.indexOf(first, pos) - pos; if (skip == 0) // this char is the skip char, but not match, so force advance of pos pos++;"
      },
      {
        "txt": "else if (skip < 0) // no chance of finding, grab to end pos = queue.length(); else pos += skip; } else pos++; } return queue.substring(start, pos); }"
      },
      {
        "txt": "Consumes to the first sequence provided, or to the end of the queue. Leaves the terminator on the queue. @param seq any number of terminators to consume to. <b>Case insensitive.</b> @return consumed string public String consumeToAny(String... seq) { int start = pos; while (!isEmpty() && !matchesAny(seq)) { pos++; } return queue.substring(start, pos); }"
      },
      {
        "txt": "public String chompTo(String seq) { String data = consumeTo(seq); matchChomp(seq); return data; } public String chompToIgnoreCase(String seq) { String data = consumeToIgnoreCase(seq); // case insensitive scan matchChomp(seq); return data; }"
      },
      {
        "txt": "public String chompBalanced(char open, char close) { int start = -1; int end = -1; int depth = 0; char last = 0; boolean inQuote = false; do { if (isEmpty()) break; Character c = consume(); if (last == 0 || last != ESC) {"
      },
      {
        "txt": "if ((c.equals('\\'') || c.equals('\"')) && c != open) inQuote = !inQuote; if (inQuote) continue; if (c.equals(open)) { depth++; if (start == -1) start = pos; } else if (c.equals(close))"
      },
      {
        "txt": "} if (depth > 0 && last != 0) end = pos; // don't include the outer match pair in the return last = c; } while (depth > 0); final String out = (end >= 0) ? queue.substring(start, end) : \"\"; <extra_id_0> } public static String unescape(String in) { StringBuilder out = new StringBuilder(); char last = 0; for (char c : in.toCharArray()) { if (c == ESC) {"
      },
      {
        "txt": "for (char c : in.toCharArray()) { if (c == ESC) { if (last != 0 && last == ESC) out.append(c); } else out.append(c); last = c; } return out.toString();"
      },
      {
        "txt": "} public boolean consumeWhitespace() { boolean seen = false; while (matchesWhitespace()) { pos++; seen = true; } return seen; } public String consumeWord() {"
      },
      {
        "txt": "int start = pos; while (matchesWord()) pos++; return queue.substring(start, pos); } public String consumeTagName() { int start = pos; while (!isEmpty() && (matchesWord() || matchesAny(':', '_', '-'))) pos++; return queue.substring(start, pos);"
      },
      {
        "txt": "} public String consumeElementSelector() { int start = pos; while (!isEmpty() && (matchesWord() || matchesAny(\"*|\",\"|\", \"_\", \"-\"))) pos++; return queue.substring(start, pos); } Consume a CSS identifier (ID or class) off the queue (letter, digit, -, _) http://www.w3.org/TR/CSS2/syndata.html#value-def-identifier @return identifier"
      },
      {
        "txt": "public String consumeCssIdentifier() { int start = pos; while (!isEmpty() && (matchesWord() || matchesAny('-', '_'))) pos++; return queue.substring(start, pos); } Consume an attribute key off the queue (letter, digit, -, _, :\") @return attribute key public String consumeAttributeKey() { int start = pos;"
      },
      {
        "txt": "while (!isEmpty() && (matchesWord() || matchesAny('-', '_', ':'))) pos++; return queue.substring(start, pos); } Consume and return whatever is left on the queue. @return remained of queue. public String remainder() { final String remainder = queue.substring(pos, queue.length()); pos = queue.length(); return remainder;"
      },
      {
        "txt": "} @Override public String toString() { return queue.substring(pos); }"
      }
    ]
  },
  {
    "id": 2010,
    "file_path": "src/main/java/org/jsoup/select/QueryParser.java",
    "start-bug-line": 38,
    "end-bug-line": 38,
    "bug": "",
    "fix": "try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.select; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.List; import java.util.regex.Matcher; import java.util.regex.Pattern; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.parser.TokenQueue; public class QueryParser { private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"}; private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"}; private TokenQueue tq;"
      },
      {
        "txt": "private List<Evaluator> evals = new ArrayList<Evaluator>(); private QueryParser(String query) { this.query = query; this.tq = new TokenQueue(query); } public static Evaluator parse(String query) { <extra_id_0> return p.parse(); } Evaluator parse() { tq.consumeWhitespace(); if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements evals.add(new StructuralEvaluator.Root());"
      },
      {
        "txt": "if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements evals.add(new StructuralEvaluator.Root()); combinator(tq.consume()); } else { findElements(); } while (!tq.isEmpty()) { boolean seenWhite = tq.consumeWhitespace(); if (tq.matchesAny(combinators)) { combinator(tq.consume());"
      },
      {
        "txt": "} else if (seenWhite) { combinator(' '); } else { // E.class, E#id, E[attr] etc. AND findElements(); // take next el, #. etc off queue } } if (evals.size() == 1) return evals.get(0); return new CombiningEvaluator.And(evals); }"
      },
      {
        "txt": "private void combinator(char combinator) { tq.consumeWhitespace(); String subQuery = consumeSubQuery(); // support multi > childs Evaluator rootEval; // the new topmost evaluator Evaluator currentEval; // the evaluator the new eval will be combined to. could be root, or rightmost or. Evaluator newEval = parse(subQuery); // the evaluator to add into target evaluator boolean replaceRightMost = false; if (evals.size() == 1) { rootEval = currentEval = evals.get(0); if (rootEval instanceof CombiningEvaluator.Or && combinator != ',') {"
      },
      {
        "txt": "currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator(); replaceRightMost = true; } } else { rootEval = currentEval = new CombiningEvaluator.And(evals); } evals.clear(); if (combinator == '>') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval));"
      },
      {
        "txt": "else if (combinator == ' ') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval)); else if (combinator == '+') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval)); else if (combinator == '~') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval)); else if (combinator == ',') { // group or. CombiningEvaluator.Or or; if (currentEval instanceof CombiningEvaluator.Or) { or = (CombiningEvaluator.Or) currentEval;"
      },
      {
        "txt": "or.add(newEval); } else { or = new CombiningEvaluator.Or(); or.add(currentEval); or.add(newEval); } currentEval = or; } else throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator);"
      },
      {
        "txt": "if (replaceRightMost) ((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval); else rootEval = currentEval; evals.add(rootEval); } private String consumeSubQuery() { StringBuilder sq = new StringBuilder(); while (!tq.isEmpty()) { if (tq.matches(\"(\")) sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\");"
      },
      {
        "txt": "else if (tq.matches(\"[\")) sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\"); else if (tq.matchesAny(combinators)) break; else sq.append(tq.consume()); } return sq.toString(); } private void findElements() {"
      },
      {
        "txt": "if (tq.matchChomp(\"#\")) byId(); else if (tq.matchChomp(\".\")) byClass(); else if (tq.matchesWord() || tq.matches(\"*|\")) byTag(); else if (tq.matches(\"[\")) byAttribute(); else if (tq.matchChomp(\"*\")) allElements();"
      },
      {
        "txt": "else if (tq.matchChomp(\":lt(\")) indexLessThan(); else if (tq.matchChomp(\":gt(\")) indexGreaterThan(); else if (tq.matchChomp(\":eq(\")) indexEquals(); else if (tq.matches(\":has(\")) has(); else if (tq.matches(\":contains(\")) contains(false);"
      },
      {
        "txt": "else if (tq.matches(\":containsOwn(\")) contains(true); else if (tq.matches(\":containsData(\")) containsData(); else if (tq.matches(\":matches(\")) matches(false); else if (tq.matches(\":matchesOwn(\")) matches(true); else if (tq.matches(\":not(\")) not();"
      },
      {
        "txt": "else if (tq.matchChomp(\":nth-child(\")) cssNthChild(false, false); else if (tq.matchChomp(\":nth-last-child(\")) cssNthChild(true, false); else if (tq.matchChomp(\":nth-of-type(\")) cssNthChild(false, true); else if (tq.matchChomp(\":nth-last-of-type(\")) cssNthChild(true, true); else if (tq.matchChomp(\":first-child\")) evals.add(new Evaluator.IsFirstChild());"
      },
      {
        "txt": "else if (tq.matchChomp(\":last-child\")) evals.add(new Evaluator.IsLastChild()); else if (tq.matchChomp(\":first-of-type\")) evals.add(new Evaluator.IsFirstOfType()); else if (tq.matchChomp(\":last-of-type\")) evals.add(new Evaluator.IsLastOfType()); else if (tq.matchChomp(\":only-child\")) evals.add(new Evaluator.IsOnlyChild()); else if (tq.matchChomp(\":only-of-type\")) evals.add(new Evaluator.IsOnlyOfType());"
      },
      {
        "txt": "else if (tq.matchChomp(\":empty\")) evals.add(new Evaluator.IsEmpty()); else if (tq.matchChomp(\":root\")) evals.add(new Evaluator.IsRoot()); else // unhandled throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()); } private void byId() { String id = tq.consumeCssIdentifier(); Validate.notEmpty(id);"
      },
      {
        "txt": "evals.add(new Evaluator.Id(id)); } private void byClass() { String className = tq.consumeCssIdentifier(); Validate.notEmpty(className); evals.add(new Evaluator.Class(className.trim())); } private void byTag() { String tagName = tq.consumeElementSelector(); Validate.notEmpty(tagName);"
      },
      {
        "txt": "if (tagName.startsWith(\"*|\")) { evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase()))); } else { if (tagName.contains(\"|\")) tagName = tagName.replace(\"|\", \":\"); evals.add(new Evaluator.Tag(tagName.trim())); } } private void byAttribute() { TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue"
      },
      {
        "txt": "String key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val) Validate.notEmpty(key); cq.consumeWhitespace(); if (cq.isEmpty()) { if (key.startsWith(\"^\")) evals.add(new Evaluator.AttributeStarting(key.substring(1))); else evals.add(new Evaluator.Attribute(key)); } else { if (cq.matchChomp(\"=\"))"
      },
      {
        "txt": "evals.add(new Evaluator.AttributeWithValue(key, cq.remainder())); else if (cq.matchChomp(\"!=\")) evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder())); else if (cq.matchChomp(\"^=\")) evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder())); else if (cq.matchChomp(\"$=\")) evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder())); else if (cq.matchChomp(\"*=\")) evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder())); else if (cq.matchChomp(\"~=\"))"
      },
      {
        "txt": "evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder()))); else throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder()); } } private void allElements() { evals.add(new Evaluator.AllElements()); } private void indexLessThan() { evals.add(new Evaluator.IndexLessThan(consumeIndex()));"
      },
      {
        "txt": "} private void indexGreaterThan() { evals.add(new Evaluator.IndexGreaterThan(consumeIndex())); } private void indexEquals() { evals.add(new Evaluator.IndexEquals(consumeIndex())); } private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE); private static final Pattern NTH_B = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\"); private void cssNthChild(boolean backwards, boolean ofType) {"
      },
      {
        "txt": "String argS = tq.chompTo(\")\").trim().toLowerCase(); Matcher mAB = NTH_AB.matcher(argS); Matcher mB = NTH_B.matcher(argS); final int a, b; if (\"odd\".equals(argS)) { a = 2; b = 1; } else if (\"even\".equals(argS)) { a = 2; b = 0;"
      },
      {
        "txt": "} else if (mAB.matches()) { a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1; b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0; } else if (mB.matches()) { a = 0; b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\")); } else { throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS); } if (ofType)"
      },
      {
        "txt": "if (backwards) evals.add(new Evaluator.IsNthLastOfType(a, b)); else evals.add(new Evaluator.IsNthOfType(a, b)); else { if (backwards) evals.add(new Evaluator.IsNthLastChild(a, b)); else evals.add(new Evaluator.IsNthChild(a, b)); }"
      },
      {
        "txt": "} private int consumeIndex() { String indexS = tq.chompTo(\")\").trim(); Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\"); return Integer.parseInt(indexS); } private void has() { tq.consume(\":has\"); String subQuery = tq.chompBalanced('(', ')'); Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\");"
      },
      {
        "txt": "evals.add(new StructuralEvaluator.Has(parse(subQuery))); } private void contains(boolean own) { tq.consume(own ? \":containsOwn\" : \":contains\"); String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')')); Validate.notEmpty(searchText, \":contains(text) query must not be empty\"); if (own) evals.add(new Evaluator.ContainsOwnText(searchText)); else evals.add(new Evaluator.ContainsText(searchText));"
      },
      {
        "txt": "} private void containsData() { tq.consume(\":containsData\"); String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')')); Validate.notEmpty(searchText, \":containsData(text) query must not be empty\"); evals.add(new Evaluator.ContainsData(searchText)); } private void matches(boolean own) { tq.consume(own ? \":matchesOwn\" : \":matches\"); String regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped"
      },
      {
        "txt": "Validate.notEmpty(regex, \":matches(regex) query must not be empty\"); if (own) evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex))); else evals.add(new Evaluator.Matches(Pattern.compile(regex))); } private void not() { tq.consume(\":not\"); String subQuery = tq.chompBalanced('(', ')'); Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\");"
      },
      {
        "txt": "evals.add(new StructuralEvaluator.Not(parse(subQuery))); }"
      }
    ]
  },
  {
    "id": 2011,
    "file_path": "src/main/java/org/jsoup/select/QueryParser.java",
    "start-bug-line": 40,
    "end-bug-line": 40,
    "bug": "",
    "fix": "} catch (IllegalArgumentException e) { throw new Selector.SelectorParseException(e.getMessage()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.select; import java.util.ArrayList; import java.util.List; import java.util.regex.Matcher;"
      },
      {
        "txt": "import java.util.regex.Pattern; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.parser.TokenQueue; public class QueryParser { private final static String[] combinators = {\",\", \">\", \"+\", \"~\", \" \"}; private static final String[] AttributeEvals = new String[]{\"=\", \"!=\", \"^=\", \"$=\", \"*=\", \"~=\"}; private TokenQueue tq; private String query; private List<Evaluator> evals = new ArrayList<Evaluator>();"
      },
      {
        "txt": "this.query = query; this.tq = new TokenQueue(query); } public static Evaluator parse(String query) { QueryParser p = new QueryParser(query); return p.parse(); <extra_id_0> Evaluator parse() { tq.consumeWhitespace(); if (tq.matchesAny(combinators)) { // if starts with a combinator, use root as elements evals.add(new StructuralEvaluator.Root()); combinator(tq.consume()); } else {"
      },
      {
        "txt": "combinator(tq.consume()); } else { findElements(); } while (!tq.isEmpty()) { boolean seenWhite = tq.consumeWhitespace(); if (tq.matchesAny(combinators)) { combinator(tq.consume()); } else if (seenWhite) { combinator(' ');"
      },
      {
        "txt": "} else { // E.class, E#id, E[attr] etc. AND findElements(); // take next el, #. etc off queue } } if (evals.size() == 1) return evals.get(0); return new CombiningEvaluator.And(evals); } private void combinator(char combinator) { tq.consumeWhitespace();"
      },
      {
        "txt": "String subQuery = consumeSubQuery(); // support multi > childs Evaluator rootEval; // the new topmost evaluator Evaluator currentEval; // the evaluator the new eval will be combined to. could be root, or rightmost or. Evaluator newEval = parse(subQuery); // the evaluator to add into target evaluator boolean replaceRightMost = false; if (evals.size() == 1) { rootEval = currentEval = evals.get(0); if (rootEval instanceof CombiningEvaluator.Or && combinator != ',') { currentEval = ((CombiningEvaluator.Or) currentEval).rightMostEvaluator(); replaceRightMost = true;"
      },
      {
        "txt": "} } else { rootEval = currentEval = new CombiningEvaluator.And(evals); } evals.clear(); if (combinator == '>') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediateParent(currentEval)); else if (combinator == ' ') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.Parent(currentEval));"
      },
      {
        "txt": "else if (combinator == '+') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.ImmediatePreviousSibling(currentEval)); else if (combinator == '~') currentEval = new CombiningEvaluator.And(newEval, new StructuralEvaluator.PreviousSibling(currentEval)); else if (combinator == ',') { // group or. CombiningEvaluator.Or or; if (currentEval instanceof CombiningEvaluator.Or) { or = (CombiningEvaluator.Or) currentEval; or.add(newEval); } else {"
      },
      {
        "txt": "or = new CombiningEvaluator.Or(); or.add(currentEval); or.add(newEval); } currentEval = or; } else throw new Selector.SelectorParseException(\"Unknown combinator: \" + combinator); if (replaceRightMost) ((CombiningEvaluator.Or) rootEval).replaceRightMostEvaluator(currentEval);"
      },
      {
        "txt": "else rootEval = currentEval; evals.add(rootEval); } private String consumeSubQuery() { StringBuilder sq = new StringBuilder(); while (!tq.isEmpty()) { if (tq.matches(\"(\")) sq.append(\"(\").append(tq.chompBalanced('(', ')')).append(\")\"); else if (tq.matches(\"[\")) sq.append(\"[\").append(tq.chompBalanced('[', ']')).append(\"]\");"
      },
      {
        "txt": "else if (tq.matchesAny(combinators)) break; else sq.append(tq.consume()); } return sq.toString(); } private void findElements() { if (tq.matchChomp(\"#\")) byId();"
      },
      {
        "txt": "else if (tq.matchChomp(\".\")) byClass(); else if (tq.matchesWord() || tq.matches(\"*|\")) byTag(); else if (tq.matches(\"[\")) byAttribute(); else if (tq.matchChomp(\"*\")) allElements(); else if (tq.matchChomp(\":lt(\")) indexLessThan();"
      },
      {
        "txt": "else if (tq.matchChomp(\":gt(\")) indexGreaterThan(); else if (tq.matchChomp(\":eq(\")) indexEquals(); else if (tq.matches(\":has(\")) has(); else if (tq.matches(\":contains(\")) contains(false); else if (tq.matches(\":containsOwn(\")) contains(true);"
      },
      {
        "txt": "else if (tq.matches(\":containsData(\")) containsData(); else if (tq.matches(\":matches(\")) matches(false); else if (tq.matches(\":matchesOwn(\")) matches(true); else if (tq.matches(\":not(\")) not(); else if (tq.matchChomp(\":nth-child(\")) cssNthChild(false, false);"
      },
      {
        "txt": "else if (tq.matchChomp(\":nth-last-child(\")) cssNthChild(true, false); else if (tq.matchChomp(\":nth-of-type(\")) cssNthChild(false, true); else if (tq.matchChomp(\":nth-last-of-type(\")) cssNthChild(true, true); else if (tq.matchChomp(\":first-child\")) evals.add(new Evaluator.IsFirstChild()); else if (tq.matchChomp(\":last-child\")) evals.add(new Evaluator.IsLastChild());"
      },
      {
        "txt": "else if (tq.matchChomp(\":first-of-type\")) evals.add(new Evaluator.IsFirstOfType()); else if (tq.matchChomp(\":last-of-type\")) evals.add(new Evaluator.IsLastOfType()); else if (tq.matchChomp(\":only-child\")) evals.add(new Evaluator.IsOnlyChild()); else if (tq.matchChomp(\":only-of-type\")) evals.add(new Evaluator.IsOnlyOfType()); else if (tq.matchChomp(\":empty\")) evals.add(new Evaluator.IsEmpty());"
      },
      {
        "txt": "else if (tq.matchChomp(\":root\")) evals.add(new Evaluator.IsRoot()); else // unhandled throw new Selector.SelectorParseException(\"Could not parse query '%s': unexpected token at '%s'\", query, tq.remainder()); } private void byId() { String id = tq.consumeCssIdentifier(); Validate.notEmpty(id); evals.add(new Evaluator.Id(id)); }"
      },
      {
        "txt": "private void byClass() { String className = tq.consumeCssIdentifier(); Validate.notEmpty(className); evals.add(new Evaluator.Class(className.trim())); } private void byTag() { String tagName = tq.consumeElementSelector(); Validate.notEmpty(tagName); if (tagName.startsWith(\"*|\")) { evals.add(new CombiningEvaluator.Or(new Evaluator.Tag(tagName.trim().toLowerCase()), new Evaluator.TagEndsWith(tagName.replace(\"*|\", \":\").trim().toLowerCase())));"
      },
      {
        "txt": "} else { if (tagName.contains(\"|\")) tagName = tagName.replace(\"|\", \":\"); evals.add(new Evaluator.Tag(tagName.trim())); } } private void byAttribute() { TokenQueue cq = new TokenQueue(tq.chompBalanced('[', ']')); // content queue String key = cq.consumeToAny(AttributeEvals); // eq, not, start, end, contain, match, (no val) Validate.notEmpty(key);"
      },
      {
        "txt": "cq.consumeWhitespace(); if (cq.isEmpty()) { if (key.startsWith(\"^\")) evals.add(new Evaluator.AttributeStarting(key.substring(1))); else evals.add(new Evaluator.Attribute(key)); } else { if (cq.matchChomp(\"=\")) evals.add(new Evaluator.AttributeWithValue(key, cq.remainder())); else if (cq.matchChomp(\"!=\"))"
      },
      {
        "txt": "evals.add(new Evaluator.AttributeWithValueNot(key, cq.remainder())); else if (cq.matchChomp(\"^=\")) evals.add(new Evaluator.AttributeWithValueStarting(key, cq.remainder())); else if (cq.matchChomp(\"$=\")) evals.add(new Evaluator.AttributeWithValueEnding(key, cq.remainder())); else if (cq.matchChomp(\"*=\")) evals.add(new Evaluator.AttributeWithValueContaining(key, cq.remainder())); else if (cq.matchChomp(\"~=\")) evals.add(new Evaluator.AttributeWithValueMatching(key, Pattern.compile(cq.remainder()))); else"
      },
      {
        "txt": "throw new Selector.SelectorParseException(\"Could not parse attribute query '%s': unexpected token at '%s'\", query, cq.remainder()); } } private void allElements() { evals.add(new Evaluator.AllElements()); } private void indexLessThan() { evals.add(new Evaluator.IndexLessThan(consumeIndex())); } private void indexGreaterThan() {"
      },
      {
        "txt": "evals.add(new Evaluator.IndexGreaterThan(consumeIndex())); } private void indexEquals() { evals.add(new Evaluator.IndexEquals(consumeIndex())); } private static final Pattern NTH_AB = Pattern.compile(\"((\\\\+|-)?(\\\\d+)?)n(\\\\s*(\\\\+|-)?\\\\s*\\\\d+)?\", Pattern.CASE_INSENSITIVE); private static final Pattern NTH_B = Pattern.compile(\"(\\\\+|-)?(\\\\d+)\"); private void cssNthChild(boolean backwards, boolean ofType) { String argS = tq.chompTo(\")\").trim().toLowerCase(); Matcher mAB = NTH_AB.matcher(argS);"
      },
      {
        "txt": "Matcher mB = NTH_B.matcher(argS); final int a, b; if (\"odd\".equals(argS)) { a = 2; b = 1; } else if (\"even\".equals(argS)) { a = 2; b = 0; } else if (mAB.matches()) { a = mAB.group(3) != null ? Integer.parseInt(mAB.group(1).replaceFirst(\"^\\\\+\", \"\")) : 1;"
      },
      {
        "txt": "b = mAB.group(4) != null ? Integer.parseInt(mAB.group(4).replaceFirst(\"^\\\\+\", \"\")) : 0; } else if (mB.matches()) { a = 0; b = Integer.parseInt(mB.group().replaceFirst(\"^\\\\+\", \"\")); } else { throw new Selector.SelectorParseException(\"Could not parse nth-index '%s': unexpected format\", argS); } if (ofType) if (backwards) evals.add(new Evaluator.IsNthLastOfType(a, b));"
      },
      {
        "txt": "else evals.add(new Evaluator.IsNthOfType(a, b)); else { if (backwards) evals.add(new Evaluator.IsNthLastChild(a, b)); else evals.add(new Evaluator.IsNthChild(a, b)); } } private int consumeIndex() {"
      },
      {
        "txt": "String indexS = tq.chompTo(\")\").trim(); Validate.isTrue(StringUtil.isNumeric(indexS), \"Index must be numeric\"); return Integer.parseInt(indexS); } private void has() { tq.consume(\":has\"); String subQuery = tq.chompBalanced('(', ')'); Validate.notEmpty(subQuery, \":has(el) subselect must not be empty\"); evals.add(new StructuralEvaluator.Has(parse(subQuery))); }"
      },
      {
        "txt": "private void contains(boolean own) { tq.consume(own ? \":containsOwn\" : \":contains\"); String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')')); Validate.notEmpty(searchText, \":contains(text) query must not be empty\"); if (own) evals.add(new Evaluator.ContainsOwnText(searchText)); else evals.add(new Evaluator.ContainsText(searchText)); } private void containsData() {"
      },
      {
        "txt": "tq.consume(\":containsData\"); String searchText = TokenQueue.unescape(tq.chompBalanced('(', ')')); Validate.notEmpty(searchText, \":containsData(text) query must not be empty\"); evals.add(new Evaluator.ContainsData(searchText)); } private void matches(boolean own) { tq.consume(own ? \":matchesOwn\" : \":matches\"); String regex = tq.chompBalanced('(', ')'); // don't unescape, as regex bits will be escaped Validate.notEmpty(regex, \":matches(regex) query must not be empty\"); if (own)"
      },
      {
        "txt": "evals.add(new Evaluator.MatchesOwn(Pattern.compile(regex))); else evals.add(new Evaluator.Matches(Pattern.compile(regex))); } private void not() { tq.consume(\":not\"); String subQuery = tq.chompBalanced('(', ')'); Validate.notEmpty(subQuery, \":not(selector) subselect must not be empty\"); evals.add(new StructuralEvaluator.Not(parse(subQuery))); }"
      }
    ]
  }
]
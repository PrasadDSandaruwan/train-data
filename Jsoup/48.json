[
  {
    "id": 1971,
    "file_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
    "start-bug-line": 773,
    "end-bug-line": 773,
    "bug": "if (!values.isEmpty())",
    "fix": "if (values.size() == 1)",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import org.jsoup.Connection; import org.jsoup.HttpStatusException; import org.jsoup.UnsupportedMimeTypeException;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.parser.Parser; import org.jsoup.parser.TokenQueue; import javax.net.ssl.*; import java.io.*; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.URLEncoder; import java.nio.ByteBuffer;"
      },
      {
        "txt": "import java.nio.charset.Charset; import java.nio.charset.IllegalCharsetNameException; import java.security.KeyManagementException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import java.util.*; import java.util.regex.Pattern; import java.util.zip.GZIPInputStream; public class HttpConnection implements Connection { public static final String CONTENT_ENCODING = \"Content-Encoding\";"
      },
      {
        "txt": "private static final String CONTENT_TYPE = \"Content-Type\"; private static final String MULTIPART_FORM_DATA = \"multipart/form-data\"; private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\"; public static Connection connect(String url) { Connection con = new HttpConnection(); con.url(url); return con; } public static Connection connect(URL url) { Connection con = new HttpConnection();"
      },
      {
        "txt": "con.url(url); return con; } private static String encodeUrl(String url) { if(url == null) return null; return url.replaceAll(\" \", \"%20\"); } private static String encodeMimeName(String val) { if (val == null)"
      },
      {
        "txt": "return null; return val.replaceAll(\"\\\"\", \"%22\"); } private Connection.Request req; private Connection.Response res; private HttpConnection() { req = new Request(); res = new Response(); } public Connection url(URL url) {"
      },
      {
        "txt": "req.url(url); return this; } public Connection url(String url) { Validate.notEmpty(url, \"Must supply a valid URL\"); try { req.url(new URL(encodeUrl(url))); } catch (MalformedURLException e) { throw new IllegalArgumentException(\"Malformed URL: \" + url, e); }"
      },
      {
        "txt": "return this; } public Connection userAgent(String userAgent) { Validate.notNull(userAgent, \"User agent must not be null\"); req.header(\"User-Agent\", userAgent); return this; } public Connection timeout(int millis) { req.timeout(millis); return this;"
      },
      {
        "txt": "} public Connection maxBodySize(int bytes) { req.maxBodySize(bytes); return this; } public Connection followRedirects(boolean followRedirects) { req.followRedirects(followRedirects); return this; } public Connection referrer(String referrer) {"
      },
      {
        "txt": "Validate.notNull(referrer, \"Referrer must not be null\"); req.header(\"Referer\", referrer); return this; } public Connection method(Method method) { req.method(method); return this; } public Connection ignoreHttpErrors(boolean ignoreHttpErrors) { req.ignoreHttpErrors(ignoreHttpErrors);"
      },
      {
        "txt": "return this; } public Connection ignoreContentType(boolean ignoreContentType) { req.ignoreContentType(ignoreContentType); return this; } public Connection validateTLSCertificates(boolean value) { req.validateTLSCertificates(value); return this; }"
      },
      {
        "txt": "public Connection data(String key, String value) { req.data(KeyVal.create(key, value)); return this; } public Connection data(String key, String filename, InputStream inputStream) { req.data(KeyVal.create(key, filename, inputStream)); return this; } public Connection data(Map<String, String> data) { Validate.notNull(data, \"Data map must not be null\");"
      },
      {
        "txt": "for (Map.Entry<String, String> entry : data.entrySet()) { req.data(KeyVal.create(entry.getKey(), entry.getValue())); } return this; } public Connection data(String... keyvals) { Validate.notNull(keyvals, \"Data key value pairs must not be null\"); Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\"); for (int i = 0; i < keyvals.length; i += 2) { String key = keyvals[i];"
      },
      {
        "txt": "String value = keyvals[i+1]; Validate.notEmpty(key, \"Data key must not be empty\"); Validate.notNull(value, \"Data value must not be null\"); req.data(KeyVal.create(key, value)); } return this; } public Connection data(Collection<Connection.KeyVal> data) { Validate.notNull(data, \"Data collection must not be null\"); for (Connection.KeyVal entry: data) {"
      },
      {
        "txt": "req.data(entry); } return this; } public Connection header(String name, String value) { req.header(name, value); return this; } public Connection cookie(String name, String value) { req.cookie(name, value);"
      },
      {
        "txt": "return this; } public Connection cookies(Map<String, String> cookies) { Validate.notNull(cookies, \"Cookie map must not be null\"); for (Map.Entry<String, String> entry : cookies.entrySet()) { req.cookie(entry.getKey(), entry.getValue()); } return this; } public Connection parser(Parser parser) {"
      },
      {
        "txt": "req.parser(parser); return this; } public Document get() throws IOException { req.method(Method.GET); execute(); return res.parse(); } public Document post() throws IOException { req.method(Method.POST);"
      },
      {
        "txt": "execute(); return res.parse(); } public Connection.Response execute() throws IOException { res = Response.execute(req); return res; } public Connection.Request request() { return req; }"
      },
      {
        "txt": "public Connection request(Connection.Request request) { req = request; return this; } public Connection.Response response() { return res; } public Connection response(Connection.Response response) { res = response; return this;"
      },
      {
        "txt": "} public Connection postDataCharset(String charset) { req.postDataCharset(charset); return this; } @SuppressWarnings({\"unchecked\"}) private static abstract class Base<T extends Connection.Base> implements Connection.Base<T> { URL url; Method method; Map<String, String> headers;"
      },
      {
        "txt": "Map<String, String> cookies; private Base() { headers = new LinkedHashMap<String, String>(); cookies = new LinkedHashMap<String, String>(); } public URL url() { return url; } public T url(URL url) { Validate.notNull(url, \"URL must not be null\");"
      },
      {
        "txt": "this.url = url; return (T) this; } public Method method() { return method; } public T method(Method method) { Validate.notNull(method, \"Method must not be null\"); this.method = method; return (T) this;"
      },
      {
        "txt": "} public String header(String name) { Validate.notNull(name, \"Header name must not be null\"); return getHeaderCaseInsensitive(name); } public T header(String name, String value) { Validate.notEmpty(name, \"Header name must not be empty\"); Validate.notNull(value, \"Header value must not be null\"); removeHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\" headers.put(name, value);"
      },
      {
        "txt": "return (T) this; } public boolean hasHeader(String name) { Validate.notEmpty(name, \"Header name must not be empty\"); return getHeaderCaseInsensitive(name) != null; } public boolean hasHeaderWithValue(String name, String value) { return hasHeader(name) && header(name).equalsIgnoreCase(value); } public T removeHeader(String name) {"
      },
      {
        "txt": "Validate.notEmpty(name, \"Header name must not be empty\"); Map.Entry<String, String> entry = scanHeaders(name); // remove is case insensitive too if (entry != null) headers.remove(entry.getKey()); // ensures correct case return (T) this; } public Map<String, String> headers() { return headers; } private String getHeaderCaseInsensitive(String name) {"
      },
      {
        "txt": "Validate.notNull(name, \"Header name must not be null\"); String value = headers.get(name); if (value == null) value = headers.get(name.toLowerCase()); if (value == null) { Map.Entry<String, String> entry = scanHeaders(name); if (entry != null) value = entry.getValue(); } return value;"
      },
      {
        "txt": "} private Map.Entry<String, String> scanHeaders(String name) { String lc = name.toLowerCase(); for (Map.Entry<String, String> entry : headers.entrySet()) { if (entry.getKey().toLowerCase().equals(lc)) return entry; } return null; } public String cookie(String name) {"
      },
      {
        "txt": "Validate.notEmpty(name, \"Cookie name must not be empty\"); return cookies.get(name); } public T cookie(String name, String value) { Validate.notEmpty(name, \"Cookie name must not be empty\"); Validate.notNull(value, \"Cookie value must not be null\"); cookies.put(name, value); return (T) this; } public boolean hasCookie(String name) {"
      },
      {
        "txt": "Validate.notEmpty(name, \"Cookie name must not be empty\"); return cookies.containsKey(name); } public T removeCookie(String name) { Validate.notEmpty(name, \"Cookie name must not be empty\"); cookies.remove(name); return (T) this; } public Map<String, String> cookies() { return cookies;"
      },
      {
        "txt": "} } public static class Request extends HttpConnection.Base<Connection.Request> implements Connection.Request { private int timeoutMilliseconds; private int maxBodySizeBytes; private boolean followRedirects; private Collection<Connection.KeyVal> data; private boolean ignoreHttpErrors = false; private boolean ignoreContentType = false; private Parser parser;"
      },
      {
        "txt": "private boolean parserDefined = false; // called parser(...) vs initialized in ctor private boolean validateTSLCertificates = true; private String postDataCharset = DataUtil.defaultCharset; private Request() { timeoutMilliseconds = 3000; maxBodySizeBytes = 1024 * 1024; // 1MB followRedirects = true; data = new ArrayList<Connection.KeyVal>(); method = Method.GET; headers.put(\"Accept-Encoding\", \"gzip\");"
      },
      {
        "txt": "parser = Parser.htmlParser(); } public int timeout() { return timeoutMilliseconds; } public Request timeout(int millis) { Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\"); timeoutMilliseconds = millis; return this; }"
      },
      {
        "txt": "public int maxBodySize() { return maxBodySizeBytes; } public Connection.Request maxBodySize(int bytes) { Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\"); maxBodySizeBytes = bytes; return this; } public boolean followRedirects() { return followRedirects;"
      },
      {
        "txt": "} public Connection.Request followRedirects(boolean followRedirects) { this.followRedirects = followRedirects; return this; } public boolean ignoreHttpErrors() { return ignoreHttpErrors; } public boolean validateTLSCertificates() { return validateTSLCertificates;"
      },
      {
        "txt": "} public void validateTLSCertificates(boolean value) { validateTSLCertificates = value; } public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors) { this.ignoreHttpErrors = ignoreHttpErrors; return this; } public boolean ignoreContentType() { return ignoreContentType;"
      },
      {
        "txt": "} public Connection.Request ignoreContentType(boolean ignoreContentType) { this.ignoreContentType = ignoreContentType; return this; } public Request data(Connection.KeyVal keyval) { Validate.notNull(keyval, \"Key val must not be null\"); data.add(keyval); return this; }"
      },
      {
        "txt": "public Collection<Connection.KeyVal> data() { return data; } public Request parser(Parser parser) { this.parser = parser; parserDefined = true; return this; } public Parser parser() { return parser;"
      },
      {
        "txt": "} public Connection.Request postDataCharset(String charset) { Validate.notNull(charset, \"Charset must not be null\"); if (!Charset.isSupported(charset)) throw new IllegalCharsetNameException(charset); this.postDataCharset = charset; return this; } public String postDataCharset() { return postDataCharset; }"
      },
      {
        "txt": "} public static class Response extends HttpConnection.Base<Connection.Response> implements Connection.Response { private static final int MAX_REDIRECTS = 20; private static SSLSocketFactory sslSocketFactory; private static final String LOCATION = \"Location\"; private int statusCode; private String statusMessage; private ByteBuffer byteData; private String charset; private String contentType;"
      },
      {
        "txt": "private boolean executed = false; private int numRedirects = 0; private Connection.Request req; private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\"); Response() { super(); } private Response(Response previousResponse) throws IOException { super(); if (previousResponse != null) {"
      },
      {
        "txt": "numRedirects = previousResponse.numRedirects + 1; if (numRedirects >= MAX_REDIRECTS) throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url())); } } static Response execute(Connection.Request req) throws IOException { return execute(req, null); } static Response execute(Connection.Request req, Response previousResponse) throws IOException { Validate.notNull(req, \"Request must not be null\");"
      },
      {
        "txt": "String protocol = req.url().getProtocol(); if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) throw new MalformedURLException(\"Only http & https protocols supported\"); String mimeBoundary = null; if (!req.method().hasBody() && req.data().size() > 0) { serialiseRequestUrl(req); // appends query string } else if (req.method().hasBody()) { mimeBoundary = setOutputContentType(req); } HttpURLConnection conn = createConnection(req);"
      },
      {
        "txt": "Response res; try { conn.connect(); if (conn.getDoOutput()) writePost(req, conn.getOutputStream(), mimeBoundary); int status = conn.getResponseCode(); res = new Response(previousResponse); res.setupFromConnection(conn, previousResponse); res.req = req; if (res.hasHeader(LOCATION) && req.followRedirects()) {"
      },
      {
        "txt": "req.method(Method.GET); // always redirect with a get. any data param from original req are dropped. req.data().clear(); String location = res.header(LOCATION); if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php location = location.substring(6); req.url(StringUtil.resolve(req.url(), encodeUrl(location))); for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts) req.cookie(cookie.getKey(), cookie.getValue()); } return execute(req, res);"
      },
      {
        "txt": "} if ((status < 200 || status >= 400) && !req.ignoreHttpErrors()) throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString()); String contentType = res.contentType(); if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches() ) throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\","
      },
      {
        "txt": "contentType, req.url().toString()); if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) { if (req instanceof HttpConnection.Request && !((Request) req).parserDefined) { req.parser(Parser.xmlParser()); } } res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it if (conn.getContentLength() != 0) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body InputStream bodyStream = null; InputStream dataStream = null;"
      },
      {
        "txt": "try { dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream(); bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ? new BufferedInputStream(new GZIPInputStream(dataStream)) : new BufferedInputStream(dataStream); res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize()); } finally { if (bodyStream != null) bodyStream.close(); if (dataStream != null) dataStream.close(); }"
      },
      {
        "txt": "} else { res.byteData = DataUtil.emptyByteBuffer(); } } finally { conn.disconnect(); } res.executed = true; return res; } public int statusCode() {"
      },
      {
        "txt": "return statusCode; } public String statusMessage() { return statusMessage; } public String charset() { return charset; } public String contentType() { return contentType;"
      },
      {
        "txt": "} public Document parse() throws IOException { Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\"); Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm(), req.parser()); byteData.rewind(); charset = doc.outputSettings().charset().name(); // update charset from meta-equiv, possibly return doc; } public String body() { Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");"
      },
      {
        "txt": "String body; if (charset == null) body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString(); else body = Charset.forName(charset).decode(byteData).toString(); byteData.rewind(); return body; } public byte[] bodyAsBytes() { Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\");"
      },
      {
        "txt": "return byteData.array(); } private static HttpURLConnection createConnection(Connection.Request req) throws IOException { HttpURLConnection conn = (HttpURLConnection) req.url().openConnection(); conn.setRequestMethod(req.method().name()); conn.setInstanceFollowRedirects(false); // don't rely on native redirection support conn.setConnectTimeout(req.timeout()); conn.setReadTimeout(req.timeout()); if (conn instanceof HttpsURLConnection) { if (!req.validateTLSCertificates()) {"
      },
      {
        "txt": "initUnSecureTSL(); ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory); ((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier()); } } if (req.method().hasBody()) conn.setDoOutput(true); if (req.cookies().size() > 0) conn.addRequestProperty(\"Cookie\", getRequestCookieString(req)); for (Map.Entry<String, String> header : req.headers().entrySet()) {"
      },
      {
        "txt": "conn.addRequestProperty(header.getKey(), header.getValue()); } return conn; } private static HostnameVerifier getInsecureVerifier() { return new HostnameVerifier() { public boolean verify(String urlHostName, SSLSession session) { return true; } };"
      },
      {
        "txt": "} private static synchronized void initUnSecureTSL() throws IOException { if (sslSocketFactory == null) { final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() { public void checkClientTrusted(final X509Certificate[] chain, final String authType) { } public void checkServerTrusted(final X509Certificate[] chain, final String authType) { } public X509Certificate[] getAcceptedIssuers() { return null;"
      },
      {
        "txt": "} }}; final SSLContext sslContext; try { sslContext = SSLContext.getInstance(\"SSL\"); sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); sslSocketFactory = sslContext.getSocketFactory(); } catch (NoSuchAlgorithmException e) { throw new IOException(\"Can't create unsecure trust manager\"); } catch (KeyManagementException e) {"
      },
      {
        "txt": "throw new IOException(\"Can't create unsecure trust manager\"); } } } private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException { method = Method.valueOf(conn.getRequestMethod()); url = conn.getURL(); statusCode = conn.getResponseCode(); statusMessage = conn.getResponseMessage(); contentType = conn.getContentType();"
      },
      {
        "txt": "Map<String, List<String>> resHeaders = createHeaderMap(conn); processResponseHeaders(resHeaders); if (previousResponse != null) { for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet()) { if (!hasCookie(prevCookie.getKey())) cookie(prevCookie.getKey(), prevCookie.getValue()); } } } private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn) {"
      },
      {
        "txt": "final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<String, List<String>>(); int i = 0; while (true) { final String key = conn.getHeaderFieldKey(i); final String val = conn.getHeaderField(i); if (key == null && val == null) break; i++; if (key == null || val == null) continue; // skip http1.1 line"
      },
      {
        "txt": "if (headers.containsKey(key)) headers.get(key).add(val); else { final ArrayList<String> vals = new ArrayList<String>(); vals.add(val); headers.put(key, vals); } } return headers; }"
      },
      {
        "txt": "void processResponseHeaders(Map<String, List<String>> resHeaders) { for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) { String name = entry.getKey(); if (name == null) continue; // http/1.1 line List<String> values = entry.getValue(); if (name.equalsIgnoreCase(\"Set-Cookie\")) { for (String value : values) { if (value == null) continue;"
      },
      {
        "txt": "String cookieName = cd.chompTo(\"=\").trim(); String cookieVal = cd.consumeTo(\";\").trim(); if (cookieName.length() > 0) cookie(cookieName, cookieVal); } } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2 <extra_id_0> header(name, values.get(0)); } } } private static String setOutputContentType(final Connection.Request req) { boolean needsMulti = false;"
      },
      {
        "txt": "private static String setOutputContentType(final Connection.Request req) { boolean needsMulti = false; for (Connection.KeyVal keyVal : req.data()) { if (keyVal.hasInputStream()) { needsMulti = true; break; } } String bound = null; if (needsMulti) {"
      },
      {
        "txt": "bound = DataUtil.mimeBoundary(); req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound); } else { req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset()); } return bound; } private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException { final Collection<Connection.KeyVal> data = req.data(); final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, DataUtil.defaultCharset));"
      },
      {
        "txt": "if (bound != null) { for (Connection.KeyVal keyVal : data) { w.write(\"--\"); w.write(bound); w.write(\"\\r\\n\"); w.write(\"Content-Disposition: form-data; name=\\\"\"); w.write(encodeMimeName(keyVal.key())); // encodes \" to %22 w.write(\"\\\"\"); if (keyVal.hasInputStream()) { w.write(\"; filename=\\\"\");"
      },
      {
        "txt": "w.write(encodeMimeName(keyVal.value())); w.write(\"\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\"); w.flush(); // flush DataUtil.crossStreams(keyVal.inputStream(), outputStream); outputStream.flush(); } else { w.write(\"\\r\\n\\r\\n\"); w.write(keyVal.value()); } w.write(\"\\r\\n\");"
      },
      {
        "txt": "} w.write(\"--\"); w.write(bound); w.write(\"--\"); } else { boolean first = true; for (Connection.KeyVal keyVal : data) { if (!first) w.append('&'); else"
      },
      {
        "txt": "first = false; w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset())); w.write('='); w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset())); } } w.close(); } private static String getRequestCookieString(Connection.Request req) { StringBuilder sb = new StringBuilder();"
      },
      {
        "txt": "boolean first = true; for (Map.Entry<String, String> cookie : req.cookies().entrySet()) { if (!first) sb.append(\"; \"); else first = false; sb.append(cookie.getKey()).append('=').append(cookie.getValue()); } return sb.toString(); }"
      },
      {
        "txt": "private static void serialiseRequestUrl(Connection.Request req) throws IOException { URL in = req.url(); StringBuilder url = new StringBuilder(); boolean first = true; url .append(in.getProtocol()) .append(\"://\") .append(in.getAuthority()) // includes host, port .append(in.getPath()) .append(\"?\");"
      },
      {
        "txt": "if (in.getQuery() != null) { url.append(in.getQuery()); first = false; } for (Connection.KeyVal keyVal : req.data()) { if (!first) url.append('&'); else first = false; url"
      },
      {
        "txt": ".append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset)) .append('=') .append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset)); } req.url(new URL(url.toString())); req.data().clear(); // moved into url as get params } } public static class KeyVal implements Connection.KeyVal { private String key;"
      },
      {
        "txt": "private String value; private InputStream stream; public static KeyVal create(String key, String value) { return new KeyVal().key(key).value(value); } public static KeyVal create(String key, String filename, InputStream stream) { return new KeyVal().key(key).value(filename).inputStream(stream); } private KeyVal() {} public KeyVal key(String key) {"
      },
      {
        "txt": "Validate.notEmpty(key, \"Data key must not be empty\"); this.key = key; return this; } public String key() { return key; } public KeyVal value(String value) { Validate.notNull(value, \"Data value must not be null\"); this.value = value;"
      },
      {
        "txt": "return this; } public String value() { return value; } public KeyVal inputStream(InputStream inputStream) { Validate.notNull(value, \"Data input stream must not be null\"); this.stream = inputStream; return this; }"
      },
      {
        "txt": "public InputStream inputStream() { return stream; } public boolean hasInputStream() { return stream != null; } @Override public String toString() { return key + \"=\" + value; }"
      }
    ]
  },
  {
    "id": 1972,
    "file_path": "src/main/java/org/jsoup/helper/HttpConnection.java",
    "start-bug-line": 775,
    "end-bug-line": 775,
    "bug": "",
    "fix": "else if (values.size() > 1) { StringBuilder accum = new StringBuilder(); for (int i = 0; i < values.size(); i++) { final String val = values.get(i); if (i != 0) accum.append(\", \"); accum.append(val); } header(name, accum.toString()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.helper; import org.jsoup.Connection; import org.jsoup.HttpStatusException; import org.jsoup.UnsupportedMimeTypeException; import org.jsoup.nodes.Document; import org.jsoup.parser.Parser;"
      },
      {
        "txt": "import org.jsoup.parser.TokenQueue; import javax.net.ssl.*; import java.io.*; import java.net.HttpURLConnection; import java.net.MalformedURLException; import java.net.URL; import java.net.URLEncoder; import java.nio.ByteBuffer; import java.nio.charset.Charset; import java.nio.charset.IllegalCharsetNameException;"
      },
      {
        "txt": "import java.security.KeyManagementException; import java.security.NoSuchAlgorithmException; import java.security.cert.X509Certificate; import java.util.*; import java.util.regex.Pattern; import java.util.zip.GZIPInputStream; public class HttpConnection implements Connection { public static final String CONTENT_ENCODING = \"Content-Encoding\"; private static final String CONTENT_TYPE = \"Content-Type\"; private static final String MULTIPART_FORM_DATA = \"multipart/form-data\";"
      },
      {
        "txt": "private static final String FORM_URL_ENCODED = \"application/x-www-form-urlencoded\"; public static Connection connect(String url) { Connection con = new HttpConnection(); con.url(url); return con; } public static Connection connect(URL url) { Connection con = new HttpConnection(); con.url(url); return con;"
      },
      {
        "txt": "} private static String encodeUrl(String url) { if(url == null) return null; return url.replaceAll(\" \", \"%20\"); } private static String encodeMimeName(String val) { if (val == null) return null; return val.replaceAll(\"\\\"\", \"%22\");"
      },
      {
        "txt": "} private Connection.Request req; private Connection.Response res; private HttpConnection() { req = new Request(); res = new Response(); } public Connection url(URL url) { req.url(url); return this;"
      },
      {
        "txt": "} public Connection url(String url) { Validate.notEmpty(url, \"Must supply a valid URL\"); try { req.url(new URL(encodeUrl(url))); } catch (MalformedURLException e) { throw new IllegalArgumentException(\"Malformed URL: \" + url, e); } return this; }"
      },
      {
        "txt": "public Connection userAgent(String userAgent) { Validate.notNull(userAgent, \"User agent must not be null\"); req.header(\"User-Agent\", userAgent); return this; } public Connection timeout(int millis) { req.timeout(millis); return this; } public Connection maxBodySize(int bytes) {"
      },
      {
        "txt": "req.maxBodySize(bytes); return this; } public Connection followRedirects(boolean followRedirects) { req.followRedirects(followRedirects); return this; } public Connection referrer(String referrer) { Validate.notNull(referrer, \"Referrer must not be null\"); req.header(\"Referer\", referrer);"
      },
      {
        "txt": "return this; } public Connection method(Method method) { req.method(method); return this; } public Connection ignoreHttpErrors(boolean ignoreHttpErrors) { req.ignoreHttpErrors(ignoreHttpErrors); return this; }"
      },
      {
        "txt": "public Connection ignoreContentType(boolean ignoreContentType) { req.ignoreContentType(ignoreContentType); return this; } public Connection validateTLSCertificates(boolean value) { req.validateTLSCertificates(value); return this; } public Connection data(String key, String value) { req.data(KeyVal.create(key, value));"
      },
      {
        "txt": "return this; } public Connection data(String key, String filename, InputStream inputStream) { req.data(KeyVal.create(key, filename, inputStream)); return this; } public Connection data(Map<String, String> data) { Validate.notNull(data, \"Data map must not be null\"); for (Map.Entry<String, String> entry : data.entrySet()) { req.data(KeyVal.create(entry.getKey(), entry.getValue()));"
      },
      {
        "txt": "} return this; } public Connection data(String... keyvals) { Validate.notNull(keyvals, \"Data key value pairs must not be null\"); Validate.isTrue(keyvals.length %2 == 0, \"Must supply an even number of key value pairs\"); for (int i = 0; i < keyvals.length; i += 2) { String key = keyvals[i]; String value = keyvals[i+1]; Validate.notEmpty(key, \"Data key must not be empty\");"
      },
      {
        "txt": "Validate.notNull(value, \"Data value must not be null\"); req.data(KeyVal.create(key, value)); } return this; } public Connection data(Collection<Connection.KeyVal> data) { Validate.notNull(data, \"Data collection must not be null\"); for (Connection.KeyVal entry: data) { req.data(entry); }"
      },
      {
        "txt": "return this; } public Connection header(String name, String value) { req.header(name, value); return this; } public Connection cookie(String name, String value) { req.cookie(name, value); return this; }"
      },
      {
        "txt": "public Connection cookies(Map<String, String> cookies) { Validate.notNull(cookies, \"Cookie map must not be null\"); for (Map.Entry<String, String> entry : cookies.entrySet()) { req.cookie(entry.getKey(), entry.getValue()); } return this; } public Connection parser(Parser parser) { req.parser(parser); return this;"
      },
      {
        "txt": "} public Document get() throws IOException { req.method(Method.GET); execute(); return res.parse(); } public Document post() throws IOException { req.method(Method.POST); execute(); return res.parse();"
      },
      {
        "txt": "} public Connection.Response execute() throws IOException { res = Response.execute(req); return res; } public Connection.Request request() { return req; } public Connection request(Connection.Request request) { req = request;"
      },
      {
        "txt": "return this; } public Connection.Response response() { return res; } public Connection response(Connection.Response response) { res = response; return this; } public Connection postDataCharset(String charset) {"
      },
      {
        "txt": "req.postDataCharset(charset); return this; } @SuppressWarnings({\"unchecked\"}) private static abstract class Base<T extends Connection.Base> implements Connection.Base<T> { URL url; Method method; Map<String, String> headers; Map<String, String> cookies; private Base() {"
      },
      {
        "txt": "headers = new LinkedHashMap<String, String>(); cookies = new LinkedHashMap<String, String>(); } public URL url() { return url; } public T url(URL url) { Validate.notNull(url, \"URL must not be null\"); this.url = url; return (T) this;"
      },
      {
        "txt": "} public Method method() { return method; } public T method(Method method) { Validate.notNull(method, \"Method must not be null\"); this.method = method; return (T) this; } public String header(String name) {"
      },
      {
        "txt": "Validate.notNull(name, \"Header name must not be null\"); return getHeaderCaseInsensitive(name); } public T header(String name, String value) { Validate.notEmpty(name, \"Header name must not be empty\"); Validate.notNull(value, \"Header value must not be null\"); removeHeader(name); // ensures we don't get an \"accept-encoding\" and a \"Accept-Encoding\" headers.put(name, value); return (T) this; }"
      },
      {
        "txt": "public boolean hasHeader(String name) { Validate.notEmpty(name, \"Header name must not be empty\"); return getHeaderCaseInsensitive(name) != null; } public boolean hasHeaderWithValue(String name, String value) { return hasHeader(name) && header(name).equalsIgnoreCase(value); } public T removeHeader(String name) { Validate.notEmpty(name, \"Header name must not be empty\"); Map.Entry<String, String> entry = scanHeaders(name); // remove is case insensitive too"
      },
      {
        "txt": "if (entry != null) headers.remove(entry.getKey()); // ensures correct case return (T) this; } public Map<String, String> headers() { return headers; } private String getHeaderCaseInsensitive(String name) { Validate.notNull(name, \"Header name must not be null\"); String value = headers.get(name);"
      },
      {
        "txt": "if (value == null) value = headers.get(name.toLowerCase()); if (value == null) { Map.Entry<String, String> entry = scanHeaders(name); if (entry != null) value = entry.getValue(); } return value; } private Map.Entry<String, String> scanHeaders(String name) {"
      },
      {
        "txt": "String lc = name.toLowerCase(); for (Map.Entry<String, String> entry : headers.entrySet()) { if (entry.getKey().toLowerCase().equals(lc)) return entry; } return null; } public String cookie(String name) { Validate.notEmpty(name, \"Cookie name must not be empty\"); return cookies.get(name);"
      },
      {
        "txt": "} public T cookie(String name, String value) { Validate.notEmpty(name, \"Cookie name must not be empty\"); Validate.notNull(value, \"Cookie value must not be null\"); cookies.put(name, value); return (T) this; } public boolean hasCookie(String name) { Validate.notEmpty(name, \"Cookie name must not be empty\"); return cookies.containsKey(name);"
      },
      {
        "txt": "} public T removeCookie(String name) { Validate.notEmpty(name, \"Cookie name must not be empty\"); cookies.remove(name); return (T) this; } public Map<String, String> cookies() { return cookies; } }"
      },
      {
        "txt": "public static class Request extends HttpConnection.Base<Connection.Request> implements Connection.Request { private int timeoutMilliseconds; private int maxBodySizeBytes; private boolean followRedirects; private Collection<Connection.KeyVal> data; private boolean ignoreHttpErrors = false; private boolean ignoreContentType = false; private Parser parser; private boolean parserDefined = false; // called parser(...) vs initialized in ctor private boolean validateTSLCertificates = true;"
      },
      {
        "txt": "private String postDataCharset = DataUtil.defaultCharset; private Request() { timeoutMilliseconds = 3000; maxBodySizeBytes = 1024 * 1024; // 1MB followRedirects = true; data = new ArrayList<Connection.KeyVal>(); method = Method.GET; headers.put(\"Accept-Encoding\", \"gzip\"); parser = Parser.htmlParser(); }"
      },
      {
        "txt": "public int timeout() { return timeoutMilliseconds; } public Request timeout(int millis) { Validate.isTrue(millis >= 0, \"Timeout milliseconds must be 0 (infinite) or greater\"); timeoutMilliseconds = millis; return this; } public int maxBodySize() { return maxBodySizeBytes;"
      },
      {
        "txt": "} public Connection.Request maxBodySize(int bytes) { Validate.isTrue(bytes >= 0, \"maxSize must be 0 (unlimited) or larger\"); maxBodySizeBytes = bytes; return this; } public boolean followRedirects() { return followRedirects; } public Connection.Request followRedirects(boolean followRedirects) {"
      },
      {
        "txt": "this.followRedirects = followRedirects; return this; } public boolean ignoreHttpErrors() { return ignoreHttpErrors; } public boolean validateTLSCertificates() { return validateTSLCertificates; } public void validateTLSCertificates(boolean value) {"
      },
      {
        "txt": "validateTSLCertificates = value; } public Connection.Request ignoreHttpErrors(boolean ignoreHttpErrors) { this.ignoreHttpErrors = ignoreHttpErrors; return this; } public boolean ignoreContentType() { return ignoreContentType; } public Connection.Request ignoreContentType(boolean ignoreContentType) {"
      },
      {
        "txt": "this.ignoreContentType = ignoreContentType; return this; } public Request data(Connection.KeyVal keyval) { Validate.notNull(keyval, \"Key val must not be null\"); data.add(keyval); return this; } public Collection<Connection.KeyVal> data() { return data;"
      },
      {
        "txt": "} public Request parser(Parser parser) { this.parser = parser; parserDefined = true; return this; } public Parser parser() { return parser; } public Connection.Request postDataCharset(String charset) {"
      },
      {
        "txt": "Validate.notNull(charset, \"Charset must not be null\"); if (!Charset.isSupported(charset)) throw new IllegalCharsetNameException(charset); this.postDataCharset = charset; return this; } public String postDataCharset() { return postDataCharset; } } public static class Response extends HttpConnection.Base<Connection.Response> implements Connection.Response {"
      },
      {
        "txt": "private static final int MAX_REDIRECTS = 20; private static SSLSocketFactory sslSocketFactory; private static final String LOCATION = \"Location\"; private int statusCode; private String statusMessage; private ByteBuffer byteData; private String charset; private String contentType; private boolean executed = false; private int numRedirects = 0;"
      },
      {
        "txt": "private Connection.Request req; private static final Pattern xmlContentTypeRxp = Pattern.compile(\"(application|text)/\\\\w*\\\\+?xml.*\"); Response() { super(); } private Response(Response previousResponse) throws IOException { super(); if (previousResponse != null) { numRedirects = previousResponse.numRedirects + 1; if (numRedirects >= MAX_REDIRECTS)"
      },
      {
        "txt": "throw new IOException(String.format(\"Too many redirects occurred trying to load URL %s\", previousResponse.url())); } } static Response execute(Connection.Request req) throws IOException { return execute(req, null); } static Response execute(Connection.Request req, Response previousResponse) throws IOException { Validate.notNull(req, \"Request must not be null\"); String protocol = req.url().getProtocol(); if (!protocol.equals(\"http\") && !protocol.equals(\"https\"))"
      },
      {
        "txt": "throw new MalformedURLException(\"Only http & https protocols supported\"); String mimeBoundary = null; if (!req.method().hasBody() && req.data().size() > 0) { serialiseRequestUrl(req); // appends query string } else if (req.method().hasBody()) { mimeBoundary = setOutputContentType(req); } HttpURLConnection conn = createConnection(req); Response res; try {"
      },
      {
        "txt": "conn.connect(); if (conn.getDoOutput()) writePost(req, conn.getOutputStream(), mimeBoundary); int status = conn.getResponseCode(); res = new Response(previousResponse); res.setupFromConnection(conn, previousResponse); res.req = req; if (res.hasHeader(LOCATION) && req.followRedirects()) { req.method(Method.GET); // always redirect with a get. any data param from original req are dropped. req.data().clear();"
      },
      {
        "txt": "String location = res.header(LOCATION); if (location != null && location.startsWith(\"http:/\") && location.charAt(6) != '/') // fix broken Location: http:/temp/AAG_New/en/index.php location = location.substring(6); req.url(StringUtil.resolve(req.url(), encodeUrl(location))); for (Map.Entry<String, String> cookie : res.cookies.entrySet()) { // add response cookies to request (for e.g. login posts) req.cookie(cookie.getKey(), cookie.getValue()); } return execute(req, res); } if ((status < 200 || status >= 400) && !req.ignoreHttpErrors())"
      },
      {
        "txt": "throw new HttpStatusException(\"HTTP error fetching URL\", status, req.url().toString()); String contentType = res.contentType(); if (contentType != null && !req.ignoreContentType() && !contentType.startsWith(\"text/\") && !xmlContentTypeRxp.matcher(contentType).matches() ) throw new UnsupportedMimeTypeException(\"Unhandled content type. Must be text/*, application/xml, or application/xhtml+xml\", contentType, req.url().toString()); if (contentType != null && xmlContentTypeRxp.matcher(contentType).matches()) {"
      },
      {
        "txt": "if (req instanceof HttpConnection.Request && !((Request) req).parserDefined) { req.parser(Parser.xmlParser()); } } res.charset = DataUtil.getCharsetFromContentType(res.contentType); // may be null, readInputStream deals with it if (conn.getContentLength() != 0) { // -1 means unknown, chunked. sun throws an IO exception on 500 response with no content when trying to read body InputStream bodyStream = null; InputStream dataStream = null; try { dataStream = conn.getErrorStream() != null ? conn.getErrorStream() : conn.getInputStream();"
      },
      {
        "txt": "bodyStream = res.hasHeaderWithValue(CONTENT_ENCODING, \"gzip\") ? new BufferedInputStream(new GZIPInputStream(dataStream)) : new BufferedInputStream(dataStream); res.byteData = DataUtil.readToByteBuffer(bodyStream, req.maxBodySize()); } finally { if (bodyStream != null) bodyStream.close(); if (dataStream != null) dataStream.close(); } } else { res.byteData = DataUtil.emptyByteBuffer();"
      },
      {
        "txt": "} } finally { conn.disconnect(); } res.executed = true; return res; } public int statusCode() { return statusCode; }"
      },
      {
        "txt": "public String statusMessage() { return statusMessage; } public String charset() { return charset; } public String contentType() { return contentType; } public Document parse() throws IOException {"
      },
      {
        "txt": "Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before parsing response\"); Document doc = DataUtil.parseByteData(byteData, charset, url.toExternalForm(), req.parser()); byteData.rewind(); charset = doc.outputSettings().charset().name(); // update charset from meta-equiv, possibly return doc; } public String body() { Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\"); String body; if (charset == null)"
      },
      {
        "txt": "body = Charset.forName(DataUtil.defaultCharset).decode(byteData).toString(); else body = Charset.forName(charset).decode(byteData).toString(); byteData.rewind(); return body; } public byte[] bodyAsBytes() { Validate.isTrue(executed, \"Request must be executed (with .execute(), .get(), or .post() before getting response body\"); return byteData.array(); }"
      },
      {
        "txt": "private static HttpURLConnection createConnection(Connection.Request req) throws IOException { HttpURLConnection conn = (HttpURLConnection) req.url().openConnection(); conn.setRequestMethod(req.method().name()); conn.setInstanceFollowRedirects(false); // don't rely on native redirection support conn.setConnectTimeout(req.timeout()); conn.setReadTimeout(req.timeout()); if (conn instanceof HttpsURLConnection) { if (!req.validateTLSCertificates()) { initUnSecureTSL(); ((HttpsURLConnection)conn).setSSLSocketFactory(sslSocketFactory);"
      },
      {
        "txt": "((HttpsURLConnection)conn).setHostnameVerifier(getInsecureVerifier()); } } if (req.method().hasBody()) conn.setDoOutput(true); if (req.cookies().size() > 0) conn.addRequestProperty(\"Cookie\", getRequestCookieString(req)); for (Map.Entry<String, String> header : req.headers().entrySet()) { conn.addRequestProperty(header.getKey(), header.getValue()); }"
      },
      {
        "txt": "return conn; } private static HostnameVerifier getInsecureVerifier() { return new HostnameVerifier() { public boolean verify(String urlHostName, SSLSession session) { return true; } }; } private static synchronized void initUnSecureTSL() throws IOException {"
      },
      {
        "txt": "if (sslSocketFactory == null) { final TrustManager[] trustAllCerts = new TrustManager[]{new X509TrustManager() { public void checkClientTrusted(final X509Certificate[] chain, final String authType) { } public void checkServerTrusted(final X509Certificate[] chain, final String authType) { } public X509Certificate[] getAcceptedIssuers() { return null; } }};"
      },
      {
        "txt": "final SSLContext sslContext; try { sslContext = SSLContext.getInstance(\"SSL\"); sslContext.init(null, trustAllCerts, new java.security.SecureRandom()); sslSocketFactory = sslContext.getSocketFactory(); } catch (NoSuchAlgorithmException e) { throw new IOException(\"Can't create unsecure trust manager\"); } catch (KeyManagementException e) { throw new IOException(\"Can't create unsecure trust manager\"); }"
      },
      {
        "txt": "} } private void setupFromConnection(HttpURLConnection conn, Connection.Response previousResponse) throws IOException { method = Method.valueOf(conn.getRequestMethod()); url = conn.getURL(); statusCode = conn.getResponseCode(); statusMessage = conn.getResponseMessage(); contentType = conn.getContentType(); Map<String, List<String>> resHeaders = createHeaderMap(conn); processResponseHeaders(resHeaders);"
      },
      {
        "txt": "if (previousResponse != null) { for (Map.Entry<String, String> prevCookie : previousResponse.cookies().entrySet()) { if (!hasCookie(prevCookie.getKey())) cookie(prevCookie.getKey(), prevCookie.getValue()); } } } private static LinkedHashMap<String, List<String>> createHeaderMap(HttpURLConnection conn) { final LinkedHashMap<String, List<String>> headers = new LinkedHashMap<String, List<String>>(); int i = 0;"
      },
      {
        "txt": "while (true) { final String key = conn.getHeaderFieldKey(i); final String val = conn.getHeaderField(i); if (key == null && val == null) break; i++; if (key == null || val == null) continue; // skip http1.1 line if (headers.containsKey(key)) headers.get(key).add(val);"
      },
      {
        "txt": "else { final ArrayList<String> vals = new ArrayList<String>(); vals.add(val); headers.put(key, vals); } } return headers; } void processResponseHeaders(Map<String, List<String>> resHeaders) { for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {"
      },
      {
        "txt": "String name = entry.getKey(); if (name == null) continue; // http/1.1 line List<String> values = entry.getValue(); if (name.equalsIgnoreCase(\"Set-Cookie\")) { for (String value : values) { if (value == null) continue; TokenQueue cd = new TokenQueue(value); String cookieName = cd.chompTo(\"=\").trim();"
      },
      {
        "txt": "if (cookieName.length() > 0) cookie(cookieName, cookieVal); } } else { // combine same header names with comma: http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2 if (!values.isEmpty()) header(name, values.get(0)); <extra_id_0> } } private static String setOutputContentType(final Connection.Request req) { boolean needsMulti = false; for (Connection.KeyVal keyVal : req.data()) { if (keyVal.hasInputStream()) {"
      },
      {
        "txt": "for (Connection.KeyVal keyVal : req.data()) { if (keyVal.hasInputStream()) { needsMulti = true; break; } } String bound = null; if (needsMulti) { bound = DataUtil.mimeBoundary(); req.header(CONTENT_TYPE, MULTIPART_FORM_DATA + \"; boundary=\" + bound);"
      },
      {
        "txt": "} else { req.header(CONTENT_TYPE, FORM_URL_ENCODED + \"; charset=\" + req.postDataCharset()); } return bound; } private static void writePost(final Connection.Request req, final OutputStream outputStream, final String bound) throws IOException { final Collection<Connection.KeyVal> data = req.data(); final BufferedWriter w = new BufferedWriter(new OutputStreamWriter(outputStream, DataUtil.defaultCharset)); if (bound != null) { for (Connection.KeyVal keyVal : data) {"
      },
      {
        "txt": "w.write(\"--\"); w.write(bound); w.write(\"\\r\\n\"); w.write(\"Content-Disposition: form-data; name=\\\"\"); w.write(encodeMimeName(keyVal.key())); // encodes \" to %22 w.write(\"\\\"\"); if (keyVal.hasInputStream()) { w.write(\"; filename=\\\"\"); w.write(encodeMimeName(keyVal.value())); w.write(\"\\\"\\r\\nContent-Type: application/octet-stream\\r\\n\\r\\n\");"
      },
      {
        "txt": "w.flush(); // flush DataUtil.crossStreams(keyVal.inputStream(), outputStream); outputStream.flush(); } else { w.write(\"\\r\\n\\r\\n\"); w.write(keyVal.value()); } w.write(\"\\r\\n\"); } w.write(\"--\");"
      },
      {
        "txt": "w.write(bound); w.write(\"--\"); } else { boolean first = true; for (Connection.KeyVal keyVal : data) { if (!first) w.append('&'); else first = false; w.write(URLEncoder.encode(keyVal.key(), req.postDataCharset()));"
      },
      {
        "txt": "w.write('='); w.write(URLEncoder.encode(keyVal.value(), req.postDataCharset())); } } w.close(); } private static String getRequestCookieString(Connection.Request req) { StringBuilder sb = new StringBuilder(); boolean first = true; for (Map.Entry<String, String> cookie : req.cookies().entrySet()) {"
      },
      {
        "txt": "if (!first) sb.append(\"; \"); else first = false; sb.append(cookie.getKey()).append('=').append(cookie.getValue()); } return sb.toString(); } private static void serialiseRequestUrl(Connection.Request req) throws IOException { URL in = req.url();"
      },
      {
        "txt": "StringBuilder url = new StringBuilder(); boolean first = true; url .append(in.getProtocol()) .append(\"://\") .append(in.getAuthority()) // includes host, port .append(in.getPath()) .append(\"?\"); if (in.getQuery() != null) { url.append(in.getQuery());"
      },
      {
        "txt": "first = false; } for (Connection.KeyVal keyVal : req.data()) { if (!first) url.append('&'); else first = false; url .append(URLEncoder.encode(keyVal.key(), DataUtil.defaultCharset)) .append('=')"
      },
      {
        "txt": ".append(URLEncoder.encode(keyVal.value(), DataUtil.defaultCharset)); } req.url(new URL(url.toString())); req.data().clear(); // moved into url as get params } } public static class KeyVal implements Connection.KeyVal { private String key; private String value; private InputStream stream;"
      },
      {
        "txt": "public static KeyVal create(String key, String value) { return new KeyVal().key(key).value(value); } public static KeyVal create(String key, String filename, InputStream stream) { return new KeyVal().key(key).value(filename).inputStream(stream); } private KeyVal() {} public KeyVal key(String key) { Validate.notEmpty(key, \"Data key must not be empty\"); this.key = key;"
      },
      {
        "txt": "return this; } public String key() { return key; } public KeyVal value(String value) { Validate.notNull(value, \"Data value must not be null\"); this.value = value; return this; }"
      },
      {
        "txt": "public String value() { return value; } public KeyVal inputStream(InputStream inputStream) { Validate.notNull(value, \"Data input stream must not be null\"); this.stream = inputStream; return this; } public InputStream inputStream() { return stream;"
      },
      {
        "txt": "} public boolean hasInputStream() { return stream != null; } @Override public String toString() { return key + \"=\" + value; } }"
      }
    ]
  }
]
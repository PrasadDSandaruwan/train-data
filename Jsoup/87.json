[
  {
    "id": 2079,
    "file_path": "src/main/java/org/jsoup/nodes/Element.java",
    "start-bug-line": 140,
    "end-bug-line": 140,
    "bug": "",
    "fix": "public String normalName() { return tag.normalName(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.ChangeNotifyingArrayList; import org.jsoup.helper.Validate; import org.jsoup.internal.StringUtil; import org.jsoup.parser.ParseSettings; import org.jsoup.parser.Tag;"
      },
      {
        "txt": "import org.jsoup.select.Collector; import org.jsoup.select.Elements; import org.jsoup.select.Evaluator; import org.jsoup.select.NodeTraversor; import org.jsoup.select.NodeVisitor; import org.jsoup.select.QueryParser; import org.jsoup.select.Selector; import java.io.IOException; import java.lang.ref.WeakReference; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.LinkedHashSet; import java.util.List; import java.util.Map; import java.util.Set; import java.util.regex.Pattern; import java.util.regex.PatternSyntaxException; import static org.jsoup.internal.Normalizer.normalize;"
      },
      {
        "txt": "public class Element extends Node { private static final List<Node> EMPTY_NODES = Collections.emptyList(); private static final Pattern classSplit = Pattern.compile(\"\\\\s+\"); private Tag tag; private WeakReference<List<Element>> shadowChildrenRef; // points to child elements shadowed from node children List<Node> childNodes; private Attributes attributes; private String baseUri; public Element(String tag) { this(Tag.valueOf(tag), \"\", new Attributes());"
      },
      {
        "txt": "} public Element(Tag tag, String baseUri, Attributes attributes) { Validate.notNull(tag); Validate.notNull(baseUri); childNodes = EMPTY_NODES; this.baseUri = baseUri; this.attributes = attributes; this.tag = tag; } public Element(Tag tag, String baseUri) {"
      },
      {
        "txt": "this(tag, baseUri, null); } protected List<Node> ensureChildNodes() { if (childNodes == EMPTY_NODES) { childNodes = new NodeList(this, 4); } return childNodes; } @Override protected boolean hasAttributes() {"
      },
      {
        "txt": "return attributes != null; } @Override public Attributes attributes() { if (!hasAttributes()) attributes = new Attributes(); return attributes; } @Override public String baseUri() {"
      },
      {
        "txt": "return baseUri; } @Override protected void doSetBaseUri(String baseUri) { this.baseUri = baseUri; } @Override public int childNodeSize() { return childNodes.size(); }"
      },
      {
        "txt": "public String nodeName() { return tag.getName(); } public String tagName() { return tag.getName(); } <extra_id_0> public Element tagName(String tagName) { Validate.notEmpty(tagName, \"Tag name must not be empty.\"); tag = Tag.valueOf(tagName, NodeUtils.parser(this).settings()); // maintains the case option of the original parse return this; } public Tag tag() {"
      },
      {
        "txt": "} public Tag tag() { return tag; } public boolean isBlock() { return tag.isBlock(); } public String id() { return attributes().getIgnoreCase(\"id\"); }"
      },
      {
        "txt": "public Element attr(String attributeKey, String attributeValue) { super.attr(attributeKey, attributeValue); return this; } public Element attr(String attributeKey, boolean attributeValue) { attributes().put(attributeKey, attributeValue); return this; } public Map<String, String> dataset() { return attributes().dataset();"
      },
      {
        "txt": "} @Override public final Element parent() { return (Element) parentNode; } public Elements parents() { Elements parents = new Elements(); accumulateParents(this, parents); return parents; }"
      },
      {
        "txt": "private static void accumulateParents(Element el, Elements parents) { Element parent = el.parent(); if (parent != null && !parent.tagName().equals(\"#root\")) { parents.add(parent); accumulateParents(parent, parents); } } public Element child(int index) { return childElementsList().get(index); }"
      },
      {
        "txt": "public Elements children() { return new Elements(childElementsList()); } private List<Element> childElementsList() { List<Element> children; if (shadowChildrenRef == null || (children = shadowChildrenRef.get()) == null) { final int size = childNodes.size(); children = new ArrayList<>(size); for (int i = 0; i < size; i++) { final Node node = childNodes.get(i);"
      },
      {
        "txt": "if (node instanceof Element) children.add((Element) node); } shadowChildrenRef = new WeakReference<>(children); } return children; } @Override void nodelistChanged() { super.nodelistChanged();"
      },
      {
        "txt": "shadowChildrenRef = null; } public List<TextNode> textNodes() { List<TextNode> textNodes = new ArrayList<>(); for (Node node : childNodes) { if (node instanceof TextNode) textNodes.add((TextNode) node); } return Collections.unmodifiableList(textNodes); }"
      },
      {
        "txt": "public List<DataNode> dataNodes() { List<DataNode> dataNodes = new ArrayList<>(); for (Node node : childNodes) { if (node instanceof DataNode) dataNodes.add((DataNode) node); } return Collections.unmodifiableList(dataNodes); } public Elements select(String cssQuery) { return Selector.select(cssQuery, this);"
      },
      {
        "txt": "} public Element selectFirst(String cssQuery) { return Selector.selectFirst(cssQuery, this); } public boolean is(String cssQuery) { return is(QueryParser.parse(cssQuery)); } public boolean is(Evaluator evaluator) { return evaluator.matches((Element)this.root(), this); }"
      },
      {
        "txt": "public Element appendChild(Node child) { Validate.notNull(child); reparentChild(child); ensureChildNodes(); childNodes.add(child); child.setSiblingIndex(childNodes.size() - 1); return this; } public Element appendTo(Element parent) { Validate.notNull(parent);"
      },
      {
        "txt": "parent.appendChild(this); return this; } public Element prependChild(Node child) { Validate.notNull(child); addChildren(0, child); return this; } public Element insertChildren(int index, Collection<? extends Node> children) { Validate.notNull(children, \"Children collection to be inserted must not be null.\");"
      },
      {
        "txt": "int currentSize = childNodeSize(); if (index < 0) index += currentSize +1; // roll around Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\"); ArrayList<Node> nodes = new ArrayList<>(children); Node[] nodeArray = nodes.toArray(new Node[nodes.size()]); addChildren(index, nodeArray); return this; } public Element insertChildren(int index, Node... children) { Validate.notNull(children, \"Children collection to be inserted must not be null.\");"
      },
      {
        "txt": "int currentSize = childNodeSize(); if (index < 0) index += currentSize +1; // roll around Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\"); addChildren(index, children); return this; } public Element appendElement(String tagName) { Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri()); appendChild(child); return child;"
      },
      {
        "txt": "} public Element prependElement(String tagName) { Element child = new Element(Tag.valueOf(tagName, NodeUtils.parser(this).settings()), baseUri()); prependChild(child); return child; } public Element appendText(String text) { Validate.notNull(text); TextNode node = new TextNode(text); appendChild(node);"
      },
      {
        "txt": "return this; } public Element prependText(String text) { Validate.notNull(text); TextNode node = new TextNode(text); prependChild(node); return this; } public Element append(String html) { Validate.notNull(html);"
      },
      {
        "txt": "List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri()); addChildren(nodes.toArray(new Node[nodes.size()])); return this; } public Element prepend(String html) { Validate.notNull(html); List<Node> nodes = NodeUtils.parser(this).parseFragmentInput(html, this, baseUri()); addChildren(0, nodes.toArray(new Node[nodes.size()])); return this; }"
      },
      {
        "txt": "@Override public Element before(String html) { return (Element) super.before(html); } @Override public Element before(Node node) { return (Element) super.before(node); } @Override public Element after(String html) {"
      },
      {
        "txt": "return (Element) super.after(html); } @Override public Element after(Node node) { return (Element) super.after(node); } public Element empty() { childNodes.clear(); return this; }"
      },
      {
        "txt": "@Override public Element wrap(String html) { return (Element) super.wrap(html); } public String cssSelector() { if (id().length() > 0) return \"#\" + id(); String tagName = tagName().replace(':', '|'); StringBuilder selector = new StringBuilder(tagName); String classes = StringUtil.join(classNames(), \".\");"
      },
      {
        "txt": "if (classes.length() > 0) selector.append('.').append(classes); if (parent() == null || parent() instanceof Document) // don't add Document to selector, as will always have a html node return selector.toString(); selector.insert(0, \" > \"); if (parent().select(selector.toString()).size() > 1) selector.append(String.format( \":nth-child(%d)\", elementSiblingIndex() + 1)); return parent().cssSelector() + selector.toString(); }"
      },
      {
        "txt": "public Elements siblingElements() { if (parentNode == null) return new Elements(0); List<Element> elements = parent().childElementsList(); Elements siblings = new Elements(elements.size() - 1); for (Element el: elements) if (el != this) siblings.add(el); return siblings; }"
      },
      {
        "txt": "public Element nextElementSibling() { if (parentNode == null) return null; List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (siblings.size() > index+1) return siblings.get(index+1); else return null; }"
      },
      {
        "txt": "public Elements nextElementSiblings() { return nextElementSiblings(true); } public Element previousElementSibling() { if (parentNode == null) return null; List<Element> siblings = parent().childElementsList(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0) return siblings.get(index-1);"
      },
      {
        "txt": "else return null; } public Elements previousElementSiblings() { return nextElementSiblings(false); } private Elements nextElementSiblings(boolean next) { Elements els = new Elements(); if (parentNode == null) return els;"
      },
      {
        "txt": "els.add(this); return next ? els.nextAll() : els.prevAll(); } public Element firstElementSibling() { List<Element> siblings = parent().childElementsList(); return siblings.size() > 1 ? siblings.get(0) : null; } public int elementSiblingIndex() { if (parent() == null) return 0; return indexInList(this, parent().childElementsList());"
      },
      {
        "txt": "} public Element lastElementSibling() { List<Element> siblings = parent().childElementsList(); return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null; } private static <E extends Element> int indexInList(Element search, List<E> elements) { final int size = elements.size(); for (int i = 0; i < size; i++) { if (elements.get(i) == search) return i;"
      },
      {
        "txt": "} return 0; } public Elements getElementsByTag(String tagName) { Validate.notEmpty(tagName); tagName = normalize(tagName); return Collector.collect(new Evaluator.Tag(tagName), this); } public Element getElementById(String id) { Validate.notEmpty(id);"
      },
      {
        "txt": "Elements elements = Collector.collect(new Evaluator.Id(id), this); if (elements.size() > 0) return elements.get(0); else return null; } public Elements getElementsByClass(String className) { Validate.notEmpty(className); return Collector.collect(new Evaluator.Class(className), this); }"
      },
      {
        "txt": "public Elements getElementsByAttribute(String key) { Validate.notEmpty(key); key = key.trim(); return Collector.collect(new Evaluator.Attribute(key), this); } public Elements getElementsByAttributeStarting(String keyPrefix) { Validate.notEmpty(keyPrefix); keyPrefix = keyPrefix.trim(); return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this); }"
      },
      {
        "txt": "public Elements getElementsByAttributeValue(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValue(key, value), this); } public Elements getElementsByAttributeValueNot(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this); } public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) { return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this); } public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) {"
      },
      {
        "txt": "return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this); } public Elements getElementsByAttributeValueContaining(String key, String match) { return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); } public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) { return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this); } public Elements getElementsByAttributeValueMatching(String key, String regex) { Pattern pattern;"
      },
      {
        "txt": "try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsByAttributeValueMatching(key, pattern); } public Elements getElementsByIndexLessThan(int index) { return Collector.collect(new Evaluator.IndexLessThan(index), this); }"
      },
      {
        "txt": "public Elements getElementsByIndexGreaterThan(int index) { return Collector.collect(new Evaluator.IndexGreaterThan(index), this); } public Elements getElementsByIndexEquals(int index) { return Collector.collect(new Evaluator.IndexEquals(index), this); } public Elements getElementsContainingText(String searchText) { return Collector.collect(new Evaluator.ContainsText(searchText), this); } public Elements getElementsContainingOwnText(String searchText) {"
      },
      {
        "txt": "return Collector.collect(new Evaluator.ContainsOwnText(searchText), this); } public Elements getElementsMatchingText(Pattern pattern) { return Collector.collect(new Evaluator.Matches(pattern), this); } public Elements getElementsMatchingText(String regex) { Pattern pattern; try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsMatchingText(pattern); } public Elements getElementsMatchingOwnText(Pattern pattern) { return Collector.collect(new Evaluator.MatchesOwn(pattern), this); } public Elements getElementsMatchingOwnText(String regex) { Pattern pattern; try {"
      },
      {
        "txt": "pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsMatchingOwnText(pattern); } public Elements getAllElements() { return Collector.collect(new Evaluator.AllElements(), this); } public String text() {"
      },
      {
        "txt": "final StringBuilder accum = StringUtil.borrowBuilder(); NodeTraversor.traverse(new NodeVisitor() { public void head(Node node, int depth) { if (node instanceof TextNode) { TextNode textNode = (TextNode) node; appendNormalisedText(accum, textNode); } else if (node instanceof Element) { Element element = (Element) node; if (accum.length() > 0 && (element.isBlock() || element.tag.getName().equals(\"br\")) &&"
      },
      {
        "txt": "!TextNode.lastCharIsWhitespace(accum)) accum.append(' '); } } public void tail(Node node, int depth) { if (node instanceof Element) { Element element = (Element) node; if (element.isBlock() && (node.nextSibling() instanceof TextNode) && !TextNode.lastCharIsWhitespace(accum)) accum.append(' '); }"
      },
      {
        "txt": "} }, this); return StringUtil.releaseBuilder(accum).trim(); } public String wholeText() { final StringBuilder accum = StringUtil.borrowBuilder(); NodeTraversor.traverse(new NodeVisitor() { public void head(Node node, int depth) { if (node instanceof TextNode) { TextNode textNode = (TextNode) node;"
      },
      {
        "txt": "accum.append(textNode.getWholeText()); } } public void tail(Node node, int depth) { } }, this); return StringUtil.releaseBuilder(accum); } public String ownText() { StringBuilder sb = StringUtil.borrowBuilder();"
      },
      {
        "txt": "ownText(sb); return StringUtil.releaseBuilder(sb).trim(); } private void ownText(StringBuilder accum) { for (Node child : childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child; appendNormalisedText(accum, textNode); } else if (child instanceof Element) { appendWhitespaceIfBr((Element) child, accum);"
      },
      {
        "txt": "} } } private static void appendNormalisedText(StringBuilder accum, TextNode textNode) { String text = textNode.getWholeText(); if (preserveWhitespace(textNode.parentNode) || textNode instanceof CDataNode) accum.append(text); else StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum)); }"
      },
      {
        "txt": "private static void appendWhitespaceIfBr(Element element, StringBuilder accum) { if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum)) accum.append(\" \"); } static boolean preserveWhitespace(Node node) { if (node instanceof Element) { Element el = (Element) node; int i = 0; do { if (el.tag.preserveWhitespace())"
      },
      {
        "txt": "return true; el = el.parent(); i++; } while (i < 6 && el != null); } return false; } public Element text(String text) { Validate.notNull(text); empty();"
      },
      {
        "txt": "TextNode textNode = new TextNode(text); appendChild(textNode); return this; } Test if this element has any text content (that is not just whitespace). @return true if element has non-blank text content. public boolean hasText() { for (Node child: childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child;"
      },
      {
        "txt": "if (!textNode.isBlank()) return true; } else if (child instanceof Element) { Element el = (Element) child; if (el.hasText()) return true; } } return false; }"
      },
      {
        "txt": "public String data() { StringBuilder sb = StringUtil.borrowBuilder(); for (Node childNode : childNodes) { if (childNode instanceof DataNode) { DataNode data = (DataNode) childNode; sb.append(data.getWholeData()); } else if (childNode instanceof Comment) { Comment comment = (Comment) childNode; sb.append(comment.getData()); } else if (childNode instanceof Element) {"
      },
      {
        "txt": "Element element = (Element) childNode; String elementData = element.data(); sb.append(elementData); } else if (childNode instanceof CDataNode) { CDataNode cDataNode = (CDataNode) childNode; sb.append(cDataNode.getWholeText()); } } return StringUtil.releaseBuilder(sb); }"
      },
      {
        "txt": "public String className() { return attr(\"class\").trim(); } public Set<String> classNames() { String[] names = classSplit.split(className()); Set<String> classNames = new LinkedHashSet<>(Arrays.asList(names)); classNames.remove(\"\"); // if classNames() was empty, would include an empty class return classNames; } Set the element's {@code class} attribute to the supplied class names."
      },
      {
        "txt": "@param classNames set of classes @return this element, for chaining public Element classNames(Set<String> classNames) { Validate.notNull(classNames); if (classNames.isEmpty()) { attributes().remove(\"class\"); } else { attributes().put(\"class\", StringUtil.join(classNames, \" \")); } return this;"
      },
      {
        "txt": "} public boolean hasClass(String className) { final String classAttr = attributes().getIgnoreCase(\"class\"); final int len = classAttr.length(); final int wantLen = className.length(); if (len == 0 || len < wantLen) { return false; } if (len == wantLen) { return className.equalsIgnoreCase(classAttr);"
      },
      {
        "txt": "} boolean inClass = false; int start = 0; for (int i = 0; i < len; i++) { if (Character.isWhitespace(classAttr.charAt(i))) { if (inClass) { if (i - start == wantLen && classAttr.regionMatches(true, start, className, 0, wantLen)) { return true; } inClass = false;"
      },
      {
        "txt": "} } else { if (!inClass) { inClass = true; start = i; } } } if (inClass && len - start == wantLen) { return classAttr.regionMatches(true, start, className, 0, wantLen);"
      },
      {
        "txt": "} return false; } Add a class name to this element's {@code class} attribute. @param className class name to add @return this element public Element addClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.add(className);"
      },
      {
        "txt": "classNames(classes); return this; } Remove a class name from this element's {@code class} attribute. @param className class name to remove @return this element public Element removeClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.remove(className);"
      },
      {
        "txt": "classNames(classes); return this; } Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it. @param className class name to toggle @return this element public Element toggleClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); if (classes.contains(className))"
      },
      {
        "txt": "classes.remove(className); else classes.add(className); classNames(classes); return this; } public String val() { if (tagName().equals(\"textarea\")) return text(); else"
      },
      {
        "txt": "return attr(\"value\"); } public Element val(String value) { if (tagName().equals(\"textarea\")) text(value); else attr(\"value\", value); return this; } void outerHtmlHead(final Appendable accum, int depth, final Document.OutputSettings out) throws IOException {"
      },
      {
        "txt": "if (out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline())) { if (accum instanceof StringBuilder) { if (((StringBuilder) accum).length() > 0) indent(accum, depth, out); } else { indent(accum, depth, out); } } accum.append('<').append(tagName()); if (attributes != null) attributes.html(accum, out);"
      },
      {
        "txt": "if (childNodes.isEmpty() && tag.isSelfClosing()) { if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty()) accum.append('>'); else accum.append(\" />\"); // <img> in html, <img /> in xml } else accum.append('>'); } void outerHtmlTail(Appendable accum, int depth, Document.OutputSettings out) throws IOException {"
      },
      {
        "txt": "if (!(childNodes.isEmpty() && tag.isSelfClosing())) { if (out.prettyPrint() && (!childNodes.isEmpty() && ( tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode)))) ))) indent(accum, depth, out); accum.append(\"</\").append(tagName()).append('>'); } } public String html() { StringBuilder accum = StringUtil.borrowBuilder();"
      },
      {
        "txt": "html(accum); String html = StringUtil.releaseBuilder(accum); return NodeUtils.outputSettings(this).prettyPrint() ? html.trim() : html; } @Override public <T extends Appendable> T html(T appendable) { final int size = childNodes.size(); for (int i = 0; i < size; i++) childNodes.get(i).outerHtml(appendable); return appendable;"
      },
      {
        "txt": "} public Element html(String html) { empty(); append(html); return this; } @Override public Element clone() { return (Element) super.clone(); }"
      },
      {
        "txt": "@Override public Element shallowClone() { return new Element(tag, baseUri, attributes); } @Override protected Element doClone(Node parent) { Element clone = (Element) super.doClone(parent); clone.attributes = attributes != null ? attributes.clone() : null; clone.baseUri = baseUri; clone.childNodes = new NodeList(clone, childNodes.size());"
      },
      {
        "txt": "clone.childNodes.addAll(childNodes); // the children then get iterated and cloned in Node.clone return clone; } private static final class NodeList extends ChangeNotifyingArrayList<Node> { private final Element owner; NodeList(Element owner, int initialCapacity) { super(initialCapacity); this.owner = owner; } public void onContentsChanged() {"
      },
      {
        "txt": "owner.nodelistChanged(); } }"
      }
    ]
  },
  {
    "id": 2080,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 315,
    "end-bug-line": 315,
    "bug": "if (next.nodeName().equals(elName)) {",
    "fix": "if (next.normalName().equals(elName)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List;"
      },
      {
        "txt": "import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\","
      },
      {
        "txt": "\"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc;"
      },
      {
        "txt": "private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() {"
      },
      {
        "txt": "return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null;"
      },
      {
        "txt": "contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial;"
      },
      {
        "txt": "initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default"
      },
      {
        "txt": "root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break;"
      },
      {
        "txt": "} } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override"
      },
      {
        "txt": "protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state;"
      },
      {
        "txt": "} HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; }"
      },
      {
        "txt": "void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() {"
      },
      {
        "txt": "return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants"
      },
      {
        "txt": "} } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) {"
      },
      {
        "txt": "if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el;"
      },
      {
        "txt": "} Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); }"
      },
      {
        "txt": "Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output"
      },
      {
        "txt": "tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack)"
      },
      {
        "txt": "stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement();"
      },
      {
        "txt": "final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. }"
      },
      {
        "txt": "private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node);"
      },
      {
        "txt": "} } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() {"
      },
      {
        "txt": "return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true;"
      },
      {
        "txt": "} return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); <extra_id_0> return next; } } return null; } boolean removeFromStack(Element el) {"
      },
      {
        "txt": "} boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false;"
      },
      {
        "txt": "} void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); }"
      },
      {
        "txt": "void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))"
      },
      {
        "txt": "break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) {"
      },
      {
        "txt": "return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); }"
      },
      {
        "txt": "void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false;"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag"
      },
      {
        "txt": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody);"
      },
      {
        "txt": "break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag"
      },
      {
        "txt": "} else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);"
      },
      {
        "txt": "} private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false;"
      },
      {
        "txt": "if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null);"
      },
      {
        "txt": "} boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); }"
      },
      {
        "txt": "boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except"
      },
      {
        "txt": "return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement;"
      },
      {
        "txt": "} boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; }"
      },
      {
        "txt": "void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/>"
      },
      {
        "txt": "When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); }"
      },
      {
        "txt": "void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; }"
      },
      {
        "txt": "Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return;"
      },
      {
        "txt": "Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry"
      },
      {
        "txt": "if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes());"
      },
      {
        "txt": "formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break;"
      },
      {
        "txt": "} } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "} boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName))"
      },
      {
        "txt": "return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); }"
      },
      {
        "txt": "void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable);"
      },
      {
        "txt": "} else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); }"
      },
      {
        "txt": "@Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2081,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 337,
    "end-bug-line": 337,
    "bug": "if (next.nodeName().equals(elName))",
    "fix": "if (next.normalName().equals(elName))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List;"
      },
      {
        "txt": "import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\","
      },
      {
        "txt": "\"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc;"
      },
      {
        "txt": "private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() {"
      },
      {
        "txt": "return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null;"
      },
      {
        "txt": "contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial;"
      },
      {
        "txt": "initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default"
      },
      {
        "txt": "root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break;"
      },
      {
        "txt": "} } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override"
      },
      {
        "txt": "protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state;"
      },
      {
        "txt": "} HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; }"
      },
      {
        "txt": "void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() {"
      },
      {
        "txt": "return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants"
      },
      {
        "txt": "} } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) {"
      },
      {
        "txt": "if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el;"
      },
      {
        "txt": "} Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); }"
      },
      {
        "txt": "Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output"
      },
      {
        "txt": "tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack)"
      },
      {
        "txt": "stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement();"
      },
      {
        "txt": "final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. }"
      },
      {
        "txt": "private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node);"
      },
      {
        "txt": "} } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() {"
      },
      {
        "txt": "return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true;"
      },
      {
        "txt": "} } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; }"
      },
      {
        "txt": "} return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; }"
      },
      {
        "txt": "return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); <extra_id_0> break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); }"
      },
      {
        "txt": "void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))"
      },
      {
        "txt": "break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) {"
      },
      {
        "txt": "return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); }"
      },
      {
        "txt": "void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false;"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag"
      },
      {
        "txt": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody);"
      },
      {
        "txt": "break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag"
      },
      {
        "txt": "} else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);"
      },
      {
        "txt": "} private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false;"
      },
      {
        "txt": "if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null);"
      },
      {
        "txt": "} boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); }"
      },
      {
        "txt": "boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except"
      },
      {
        "txt": "return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement;"
      },
      {
        "txt": "} boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; }"
      },
      {
        "txt": "void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/>"
      },
      {
        "txt": "When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); }"
      },
      {
        "txt": "void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; }"
      },
      {
        "txt": "Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return;"
      },
      {
        "txt": "Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry"
      },
      {
        "txt": "if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes());"
      },
      {
        "txt": "formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break;"
      },
      {
        "txt": "} } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "} boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName))"
      },
      {
        "txt": "return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); }"
      },
      {
        "txt": "void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable);"
      },
      {
        "txt": "} else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); }"
      },
      {
        "txt": "@Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2082,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 347,
    "end-bug-line": 347,
    "bug": "if (inSorted(next.nodeName(), elNames))",
    "fix": "if (inSorted(next.normalName(), elNames))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode;"
      },
      {
        "txt": "import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader;"
      },
      {
        "txt": "import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state"
      },
      {
        "txt": "private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered"
      },
      {
        "txt": "private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false;"
      },
      {
        "txt": "headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; }"
      },
      {
        "txt": "List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName();"
      },
      {
        "txt": "if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data);"
      },
      {
        "txt": "else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) {"
      },
      {
        "txt": "formElement = (FormElement) parent; break; } } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes();"
      },
      {
        "txt": "} @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); }"
      },
      {
        "txt": "void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() {"
      },
      {
        "txt": "return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc;"
      },
      {
        "txt": "} String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href;"
      },
      {
        "txt": "baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));"
      },
      {
        "txt": "} Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));"
      },
      {
        "txt": "insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el);"
      },
      {
        "txt": "stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\");"
      },
      {
        "txt": "} else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el);"
      },
      {
        "txt": "insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) {"
      },
      {
        "txt": "final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data);"
      },
      {
        "txt": "el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) {"
      },
      {
        "txt": "if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element);"
      },
      {
        "txt": "} ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos);"
      },
      {
        "txt": "if (next == element) { return true; } } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) {"
      },
      {
        "txt": "return next; } } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos);"
      },
      {
        "txt": "return true; } } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName))"
      },
      {
        "txt": "} } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); <extra_id_0> break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() {"
      },
      {
        "txt": "clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1);"
      },
      {
        "txt": "stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); }"
      },
      {
        "txt": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody);"
      },
      {
        "txt": "break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break;"
      },
      {
        "txt": "} else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {"
      },
      {
        "txt": "specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true;"
      },
      {
        "txt": "if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); }"
      },
      {
        "txt": "boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName))"
      },
      {
        "txt": "return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; }"
      },
      {
        "txt": "Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() {"
      },
      {
        "txt": "return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters;"
      },
      {
        "txt": "} 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags))"
      },
      {
        "txt": "pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() {"
      },
      {
        "txt": "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) {"
      },
      {
        "txt": "int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break;"
      },
      {
        "txt": "} } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement();"
      },
      {
        "txt": "if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break;"
      },
      {
        "txt": "} entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4."
      },
      {
        "txt": "Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement();"
      },
      {
        "txt": "if (el == null) break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break;"
      },
      {
        "txt": "} } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker"
      },
      {
        "txt": "break; else if (next.nodeName().equals(nodeName)) return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() {"
      },
      {
        "txt": "formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true;"
      },
      {
        "txt": "} else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else"
      },
      {
        "txt": "fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2083,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 355,
    "end-bug-line": 355,
    "bug": "if (next.nodeName().equals(elName)) {",
    "fix": "if (next.normalName().equals(elName)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode;"
      },
      {
        "txt": "import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"};"
      },
      {
        "txt": "static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\","
      },
      {
        "txt": "\"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out"
      },
      {
        "txt": "private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser);"
      },
      {
        "txt": "state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true;"
      },
      {
        "txt": "fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) {"
      },
      {
        "txt": "if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\")))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents();"
      },
      {
        "txt": "contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } } } runParser(); if (context != null)"
      },
      {
        "txt": "return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) {"
      },
      {
        "txt": "currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; } void markInsertionMode() {"
      },
      {
        "txt": "originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk;"
      },
      {
        "txt": "} Document getDocument() { return doc; } String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return;"
      },
      {
        "txt": "String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing; }"
      },
      {
        "txt": "void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing"
      },
      {
        "txt": "return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el;"
      },
      {
        "txt": "} void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData());"
      },
      {
        "txt": "insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\"))"
      },
      {
        "txt": "node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node);"
      },
      {
        "txt": "else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1);"
      },
      {
        "txt": "} void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); }"
      },
      {
        "txt": "private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false; } Element getFromStack(String elName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos);"
      },
      {
        "txt": "break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); <extra_id_0> break; } else { stack.remove(pos); } } }"
      },
      {
        "txt": "} } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\");"
      },
      {
        "txt": "} private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } }"
      },
      {
        "txt": "Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; }"
      },
      {
        "txt": "void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out);"
      },
      {
        "txt": "Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement;"
      },
      {
        "txt": "} String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow);"
      },
      {
        "txt": "break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag"
      },
      {
        "txt": "} else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } }"
      },
      {
        "txt": "} private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) {"
      },
      {
        "txt": "final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; }"
      },
      {
        "txt": "boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; }"
      },
      {
        "txt": "void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) {"
      },
      {
        "txt": "this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>();"
      },
      {
        "txt": "} List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list."
      },
      {
        "txt": "void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName();"
      },
      {
        "txt": "return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else"
      },
      {
        "txt": "return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++;"
      },
      {
        "txt": "if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes());"
      },
      {
        "txt": "} void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) {"
      },
      {
        "txt": "if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry"
      },
      {
        "txt": "entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } }"
      },
      {
        "txt": "void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos);"
      },
      {
        "txt": "if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) {"
      },
      {
        "txt": "for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) {"
      },
      {
        "txt": "replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) {"
      },
      {
        "txt": "if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point."
      },
      {
        "txt": "lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state +"
      },
      {
        "txt": "\", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2084,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 378,
    "end-bug-line": 378,
    "bug": "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
    "fix": "if (StringUtil.in(next.normalName(), nodeNames) || next.normalName().equals(\"html\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};"
      },
      {
        "txt": "static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\","
      },
      {
        "txt": "\"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements"
      },
      {
        "txt": "private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) {"
      },
      {
        "txt": "super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag();"
      },
      {
        "txt": "framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null;"
      },
      {
        "txt": "if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData);"
      },
      {
        "txt": "else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode();"
      },
      {
        "txt": "Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } } } runParser();"
      },
      {
        "txt": "if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); }"
      },
      {
        "txt": "boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; }"
      },
      {
        "txt": "void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() {"
      },
      {
        "txt": "return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse"
      },
      {
        "txt": "return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing;"
      },
      {
        "txt": "} void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data"
      },
      {
        "txt": "tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el);"
      },
      {
        "txt": "return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el);"
      },
      {
        "txt": "if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; }"
      },
      {
        "txt": "FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) {"
      },
      {
        "txt": "Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data);"
      },
      {
        "txt": "else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts())"
      },
      {
        "txt": "insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size();"
      },
      {
        "txt": "return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el);"
      },
      {
        "txt": "} private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false; }"
      },
      {
        "txt": "Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; } boolean removeFromStack(Element el) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false; } void popStackToClose(String elName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break;"
      },
      {
        "txt": "} else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");"
      },
      {
        "txt": "void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); <extra_id_0> break; else stack.remove(pos); } } Element aboveOnStack(Element el) {"
      },
      {
        "txt": "} Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null;"
      },
      {
        "txt": "} void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) {"
      },
      {
        "txt": "int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true;"
      },
      {
        "txt": "node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup);"
      },
      {
        "txt": "break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break;"
      },
      {
        "txt": "} else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag }"
      },
      {
        "txt": "} } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0;"
      },
      {
        "txt": "for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false;"
      },
      {
        "txt": "} boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); }"
      },
      {
        "txt": "boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false;"
      },
      {
        "txt": "} void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; }"
      },
      {
        "txt": "void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() {"
      },
      {
        "txt": "pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the"
      },
      {
        "txt": "process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) {"
      },
      {
        "txt": "String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1);"
      },
      {
        "txt": "else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el))"
      },
      {
        "txt": "numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) &&"
      },
      {
        "txt": "a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false;"
      },
      {
        "txt": "while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) {"
      },
      {
        "txt": "if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; }"
      },
      {
        "txt": "} void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); }"
      },
      {
        "txt": "Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; } return null; }"
      },
      {
        "txt": "void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false;"
      },
      {
        "txt": "if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) {"
      },
      {
        "txt": "Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken +"
      },
      {
        "txt": "\", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2085,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 420,
    "end-bug-line": 420,
    "bug": "String name = node.nodeName();",
    "fix": "String name = node.normalName();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted;"
      },
      {
        "txt": "public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\","
      },
      {
        "txt": "\"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element"
      },
      {
        "txt": "private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault;"
      },
      {
        "txt": "} @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null;"
      },
      {
        "txt": "formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser);"
      },
      {
        "txt": "contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri);"
      },
      {
        "txt": "doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; }"
      },
      {
        "txt": "} } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) {"
      },
      {
        "txt": "currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; }"
      },
      {
        "txt": "HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) {"
      },
      {
        "txt": "this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri;"
      },
      {
        "txt": "} void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants }"
      },
      {
        "txt": "} boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; }"
      },
      {
        "txt": "Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing();"
      },
      {
        "txt": "} return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el);"
      },
      {
        "txt": "return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName();"
      },
      {
        "txt": "final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) {"
      },
      {
        "txt": "if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); }"
      },
      {
        "txt": "} Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack;"
      },
      {
        "txt": "} boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; }"
      },
      {
        "txt": "} return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } }"
      },
      {
        "txt": "return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } }"
      },
      {
        "txt": "return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } }"
      },
      {
        "txt": "void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\");"
      },
      {
        "txt": "} void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in);"
      },
      {
        "txt": "} void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } <extra_id_0> if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break;"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption);"
      },
      {
        "txt": "break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag"
      },
      {
        "txt": "} else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); }"
      },
      {
        "txt": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes))"
      },
      {
        "txt": "return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); }"
      },
      {
        "txt": "boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) {"
      },
      {
        "txt": "return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false;"
      },
      {
        "txt": "} Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; }"
      },
      {
        "txt": "boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) {"
      },
      {
        "txt": "this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a"
      },
      {
        "txt": "dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() {"
      },
      {
        "txt": "generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() {"
      },
      {
        "txt": "int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos);"
      },
      {
        "txt": "if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in);"
      },
      {
        "txt": "} private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last;"
      },
      {
        "txt": "int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack"
      },
      {
        "txt": "break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl);"
      },
      {
        "txt": "if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; }"
      },
      {
        "txt": "} void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } }"
      },
      {
        "txt": "boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next;"
      },
      {
        "txt": "} return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) {"
      },
      {
        "txt": "Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag"
      },
      {
        "txt": "fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override"
      },
      {
        "txt": "public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2086,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 476,
    "end-bug-line": 476,
    "bug": "final String elName = stack.get(pos).nodeName();",
    "fix": "final String elName = stack.get(pos).normalName();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List;"
      },
      {
        "txt": "import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\","
      },
      {
        "txt": "\"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc;"
      },
      {
        "txt": "private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() {"
      },
      {
        "txt": "return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null;"
      },
      {
        "txt": "contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial;"
      },
      {
        "txt": "initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default"
      },
      {
        "txt": "root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break;"
      },
      {
        "txt": "} } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override"
      },
      {
        "txt": "protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state;"
      },
      {
        "txt": "} HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; }"
      },
      {
        "txt": "void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() {"
      },
      {
        "txt": "return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants"
      },
      {
        "txt": "} } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) {"
      },
      {
        "txt": "if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el;"
      },
      {
        "txt": "} Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); }"
      },
      {
        "txt": "Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output"
      },
      {
        "txt": "tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack)"
      },
      {
        "txt": "stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement();"
      },
      {
        "txt": "final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. }"
      },
      {
        "txt": "private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node);"
      },
      {
        "txt": "} } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() {"
      },
      {
        "txt": "return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true;"
      },
      {
        "txt": "} } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; }"
      },
      {
        "txt": "} return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; }"
      },
      {
        "txt": "} return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; }"
      },
      {
        "txt": "} void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() {"
      },
      {
        "txt": "clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1);"
      },
      {
        "txt": "stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); }"
      },
      {
        "txt": "void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody);"
      },
      {
        "txt": "break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break;"
      },
      {
        "txt": "} else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) {"
      },
      {
        "txt": "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { <extra_id_0> if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false;"
      },
      {
        "txt": "if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null);"
      },
      {
        "txt": "} boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); }"
      },
      {
        "txt": "boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except"
      },
      {
        "txt": "return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement;"
      },
      {
        "txt": "} boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; }"
      },
      {
        "txt": "void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/>"
      },
      {
        "txt": "When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); }"
      },
      {
        "txt": "void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; }"
      },
      {
        "txt": "Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return;"
      },
      {
        "txt": "Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry"
      },
      {
        "txt": "if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes());"
      },
      {
        "txt": "formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break;"
      },
      {
        "txt": "} } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } }"
      },
      {
        "txt": "} boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName))"
      },
      {
        "txt": "return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); }"
      },
      {
        "txt": "void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable);"
      },
      {
        "txt": "} else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); }"
      },
      {
        "txt": "@Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2087,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 517,
    "end-bug-line": 517,
    "bug": "String elName = el.nodeName();",
    "fix": "String elName = el.normalName();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted;"
      },
      {
        "txt": "public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\","
      },
      {
        "txt": "\"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element"
      },
      {
        "txt": "private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault;"
      },
      {
        "txt": "} @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null;"
      },
      {
        "txt": "formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser);"
      },
      {
        "txt": "contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri);"
      },
      {
        "txt": "doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; }"
      },
      {
        "txt": "} } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) {"
      },
      {
        "txt": "currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; }"
      },
      {
        "txt": "HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) {"
      },
      {
        "txt": "this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri;"
      },
      {
        "txt": "} void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants }"
      },
      {
        "txt": "} boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; }"
      },
      {
        "txt": "Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing();"
      },
      {
        "txt": "} return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el);"
      },
      {
        "txt": "return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName();"
      },
      {
        "txt": "final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) {"
      },
      {
        "txt": "if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); }"
      },
      {
        "txt": "} Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack;"
      },
      {
        "txt": "} boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; }"
      },
      {
        "txt": "} return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } }"
      },
      {
        "txt": "return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } }"
      },
      {
        "txt": "return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } }"
      },
      {
        "txt": "void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\");"
      },
      {
        "txt": "} void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in);"
      },
      {
        "txt": "} void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() {"
      },
      {
        "txt": "boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect);"
      },
      {
        "txt": "break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break;"
      },
      {
        "txt": "} else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead);"
      },
      {
        "txt": "break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName;"
      },
      {
        "txt": "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes))"
      },
      {
        "txt": "return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton);"
      },
      {
        "txt": "boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); <extra_id_0> if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\");"
      },
      {
        "txt": "} Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; }"
      },
      {
        "txt": "boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) {"
      },
      {
        "txt": "this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a"
      },
      {
        "txt": "dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() {"
      },
      {
        "txt": "generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() {"
      },
      {
        "txt": "int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos);"
      },
      {
        "txt": "if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in);"
      },
      {
        "txt": "} private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last;"
      },
      {
        "txt": "int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack"
      },
      {
        "txt": "break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl);"
      },
      {
        "txt": "if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; }"
      },
      {
        "txt": "} void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } }"
      },
      {
        "txt": "boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next;"
      },
      {
        "txt": "} return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) {"
      },
      {
        "txt": "Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag"
      },
      {
        "txt": "fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override"
      },
      {
        "txt": "public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2088,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 569,
    "end-bug-line": 570,
    "bug": "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags))",
    "fix": "while ((excludeTag != null && !currentElement().normalName().equals(excludeTag)) && inSorted(currentElement().normalName(), TagSearchEndTags))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted;"
      },
      {
        "txt": "public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\","
      },
      {
        "txt": "\"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element"
      },
      {
        "txt": "private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault;"
      },
      {
        "txt": "} @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null;"
      },
      {
        "txt": "formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser);"
      },
      {
        "txt": "contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri);"
      },
      {
        "txt": "doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; }"
      },
      {
        "txt": "} } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) {"
      },
      {
        "txt": "currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; }"
      },
      {
        "txt": "HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) {"
      },
      {
        "txt": "this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri;"
      },
      {
        "txt": "} void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants }"
      },
      {
        "txt": "} boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; }"
      },
      {
        "txt": "Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing();"
      },
      {
        "txt": "} return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el);"
      },
      {
        "txt": "return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName();"
      },
      {
        "txt": "final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) {"
      },
      {
        "txt": "if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); }"
      },
      {
        "txt": "} Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack;"
      },
      {
        "txt": "} boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; }"
      },
      {
        "txt": "} return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } }"
      },
      {
        "txt": "return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } }"
      },
      {
        "txt": "return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } }"
      },
      {
        "txt": "void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\");"
      },
      {
        "txt": "} void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in);"
      },
      {
        "txt": "} void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() {"
      },
      {
        "txt": "boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect);"
      },
      {
        "txt": "break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break;"
      },
      {
        "txt": "} else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead);"
      },
      {
        "txt": "break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName;"
      },
      {
        "txt": "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes))"
      },
      {
        "txt": "return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton);"
      },
      {
        "txt": "} boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true;"
      },
      {
        "txt": "if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() {"
      },
      {
        "txt": "return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement;"
      },
      {
        "txt": "} void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; }"
      },
      {
        "txt": "When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { <extra_id_0> pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) {"
      },
      {
        "txt": "} boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size();"
      },
      {
        "txt": "if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker"
      },
      {
        "txt": "break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); }"
      },
      {
        "txt": "private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size();"
      },
      {
        "txt": "int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4"
      },
      {
        "txt": "} while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7"
      },
      {
        "txt": "break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } }"
      },
      {
        "txt": "void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) {"
      },
      {
        "txt": "return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; }"
      },
      {
        "txt": "return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent;"
      },
      {
        "txt": "Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0);"
      },
      {
        "txt": "} if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() {"
      },
      {
        "txt": "return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2089,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 581,
    "end-bug-line": 581,
    "bug": "String name = el.nodeName();",
    "fix": "String name = el.normalName();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment;"
      },
      {
        "txt": "import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\","
      },
      {
        "txt": "\"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state"
      },
      {
        "txt": "private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html"
      },
      {
        "txt": "ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null;"
      },
      {
        "txt": "formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) {"
      },
      {
        "txt": "state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent;"
      },
      {
        "txt": "break; } } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); }"
      },
      {
        "txt": "@Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) {"
      },
      {
        "txt": "this.state = state; } HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState;"
      },
      {
        "txt": "} void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; }"
      },
      {
        "txt": "String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true;"
      },
      {
        "txt": "doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); }"
      },
      {
        "txt": "Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el);"
      },
      {
        "txt": "return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el);"
      },
      {
        "txt": "} Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); }"
      },
      {
        "txt": "else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el);"
      },
      {
        "txt": "if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node;"
      },
      {
        "txt": "final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack."
      },
      {
        "txt": "} private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null)"
      },
      {
        "txt": "formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); }"
      },
      {
        "txt": "ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) {"
      },
      {
        "txt": "return true; } } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next;"
      },
      {
        "txt": "} } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true;"
      },
      {
        "txt": "} } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break;"
      },
      {
        "txt": "} } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } }"
      },
      {
        "txt": "void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } } }"
      },
      {
        "txt": "void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el);"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after);"
      },
      {
        "txt": "Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in);"
      },
      {
        "txt": "} void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName();"
      },
      {
        "txt": "if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable);"
      },
      {
        "txt": "break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag"
      },
      {
        "txt": "} else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null};"
      },
      {
        "txt": "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames))"
      },
      {
        "txt": "return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null);"
      },
      {
        "txt": "} boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); }"
      },
      {
        "txt": "boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName();"
      },
      {
        "txt": "if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement;"
      },
      {
        "txt": "} Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; }"
      },
      {
        "txt": "FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() {"
      },
      {
        "txt": "return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&"
      },
      {
        "txt": "pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { <extra_id_0> return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() {"
      },
      {
        "txt": "} Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0;"
      },
      {
        "txt": "for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; }"
      },
      {
        "txt": "} formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last))"
      },
      {
        "txt": "return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; }"
      },
      {
        "txt": "entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName());"
      },
      {
        "txt": "newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null)"
      },
      {
        "txt": "break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; }"
      },
      {
        "txt": "} } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break;"
      },
      {
        "txt": "else if (next.nodeName().equals(nodeName)) return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null);"
      },
      {
        "txt": "} void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else"
      },
      {
        "txt": "fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in);"
      },
      {
        "txt": "} @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2090,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 618,
    "end-bug-line": 618,
    "bug": "return a.nodeName().equals(b.nodeName()) &&",
    "fix": "return a.normalName().equals(b.normalName()) &&",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode;"
      },
      {
        "txt": "import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader;"
      },
      {
        "txt": "import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state"
      },
      {
        "txt": "private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered"
      },
      {
        "txt": "private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false;"
      },
      {
        "txt": "headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; }"
      },
      {
        "txt": "List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName();"
      },
      {
        "txt": "if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data);"
      },
      {
        "txt": "else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) {"
      },
      {
        "txt": "formElement = (FormElement) parent; break; } } } runParser(); if (context != null) return root.childNodes(); else return doc.childNodes();"
      },
      {
        "txt": "} @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); }"
      },
      {
        "txt": "void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() {"
      },
      {
        "txt": "return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc;"
      },
      {
        "txt": "} String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href;"
      },
      {
        "txt": "baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));"
      },
      {
        "txt": "} Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));"
      },
      {
        "txt": "insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el);"
      },
      {
        "txt": "stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\");"
      },
      {
        "txt": "} else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el);"
      },
      {
        "txt": "insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) {"
      },
      {
        "txt": "final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data);"
      },
      {
        "txt": "el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) {"
      },
      {
        "txt": "if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element);"
      },
      {
        "txt": "} ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos);"
      },
      {
        "txt": "if (next == element) { return true; } } return false; } Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) {"
      },
      {
        "txt": "return next; } } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos);"
      },
      {
        "txt": "return true; } } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName))"
      },
      {
        "txt": "break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; }"
      },
      {
        "txt": "} void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else { stack.remove(pos); } }"
      },
      {
        "txt": "} void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); }"
      },
      {
        "txt": "private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos); } } Element aboveOnStack(Element el) {"
      },
      {
        "txt": "assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } } return null; } void insertOnStackAfter(Element after, Element in) {"
      },
      {
        "txt": "int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1);"
      },
      {
        "txt": "queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; }"
      },
      {
        "txt": "String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break;"
      },
      {
        "txt": "} else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset);"
      },
      {
        "txt": "break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } } }"
      },
      {
        "txt": "private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName();"
      },
      {
        "txt": "if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false; } return false; } boolean inScope(String[] targetNames) {"
      },
      {
        "txt": "return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList);"
      },
      {
        "txt": "} boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos);"
      },
      {
        "txt": "String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) {"
      },
      {
        "txt": "this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts;"
      },
      {
        "txt": "} FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); }"
      },
      {
        "txt": "List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) {"
      },
      {
        "txt": "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial);"
      },
      {
        "txt": "} Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null;"
      },
      {
        "txt": "} void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) {"
      },
      {
        "txt": "break; } } formattingElements.add(in); } private boolean isSameFormattingElement(Element a, Element b) { <extra_id_0> a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return;"
      },
      {
        "txt": "if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break;"
      },
      {
        "txt": "} entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4 } while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4."
      },
      {
        "txt": "Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement();"
      },
      {
        "txt": "if (el == null) break; } } void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break;"
      },
      {
        "txt": "} } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker"
      },
      {
        "txt": "break; else if (next.nodeName().equals(nodeName)) return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() {"
      },
      {
        "txt": "formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true;"
      },
      {
        "txt": "} else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else"
      },
      {
        "txt": "fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2091,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 649,
    "end-bug-line": 649,
    "bug": "Element newEl = insertStartTag(entry.nodeName());",
    "fix": "Element newEl = insertStartTag(entry.normalName()); // todo: avoid fostering here?",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"};"
      },
      {
        "txt": "static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\","
      },
      {
        "txt": "\"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing"
      },
      {
        "txt": "private ArrayList<Element> formattingElements; // active (open) formatting elements private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override"
      },
      {
        "txt": "protected void initialiseParse(Reader input, String baseUri, Parser parser) { super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>();"
      },
      {
        "txt": "emptyEnd = new Token.EndTag(); framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true;"
      },
      {
        "txt": "Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root);"
      },
      {
        "txt": "resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } } }"
      },
      {
        "txt": "runParser(); if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this);"
      },
      {
        "txt": "} boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state;"
      },
      {
        "txt": "} void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; }"
      },
      {
        "txt": "boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) {"
      },
      {
        "txt": "if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() {"
      },
      {
        "txt": "return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el);"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);"
      },
      {
        "txt": "insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes);"
      },
      {
        "txt": "insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el;"
      },
      {
        "txt": "} FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el; }"
      },
      {
        "txt": "void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData())"
      },
      {
        "txt": "node = new CDataNode(data); else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node);"
      },
      {
        "txt": "else if (isFosterInserts()) insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() {"
      },
      {
        "txt": "int size = stack.size(); return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) {"
      },
      {
        "txt": "return isElementInQueue(stack, el); } private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false;"
      },
      {
        "txt": "} Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; }"
      },
      {
        "txt": "boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false; }"
      },
      {
        "txt": "void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) {"
      },
      {
        "txt": "break; } else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() {"
      },
      {
        "txt": "clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\"); } void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break;"
      },
      {
        "txt": "else stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1);"
      },
      {
        "txt": "} } return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) {"
      },
      {
        "txt": "replaceInQueue(stack, out, in); } private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption);"
      },
      {
        "txt": "break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag"
      },
      {
        "txt": "} else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); }"
      },
      {
        "txt": "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes))"
      },
      {
        "txt": "return false; } return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); }"
      },
      {
        "txt": "boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) {"
      },
      {
        "txt": "return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false;"
      },
      {
        "txt": "} Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; }"
      },
      {
        "txt": "boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) {"
      },
      {
        "txt": "this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a"
      },
      {
        "txt": "dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element, the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() {"
      },
      {
        "txt": "generateImpliedEndTags(null); } boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() {"
      },
      {
        "txt": "int size = formattingElements.size(); if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos);"
      },
      {
        "txt": "if (el == null) // marker break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in);"
      },
      {
        "txt": "} private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last;"
      },
      {
        "txt": "int size = formattingElements.size(); int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack"
      },
      {
        "txt": "} while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. <extra_id_0> newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7 break; } }"
      },
      {
        "txt": "} } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } } void removeFromActiveFormattingElements(Element el) {"
      },
      {
        "txt": "for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) { return isElementInQueue(formattingElements, el);"
      },
      {
        "txt": "} Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; } return null;"
      },
      {
        "txt": "} void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\");"
      },
      {
        "txt": "boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); }"
      },
      {
        "txt": "if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" +"
      },
      {
        "txt": "\"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2092,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 689,
    "end-bug-line": 689,
    "bug": "else if (next.nodeName().equals(nodeName))",
    "fix": "else if (next.normalName().equals(nodeName))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.CDataNode; import org.jsoup.nodes.Comment; import org.jsoup.nodes.DataNode; import org.jsoup.nodes.Document; import org.jsoup.nodes.Element; import org.jsoup.nodes.FormElement; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import org.jsoup.nodes.TextNode; import org.jsoup.select.Elements; import java.io.Reader; import java.io.StringReader; import java.util.ArrayList; import java.util.List; import static org.jsoup.internal.StringUtil.inSorted; public class HtmlTreeBuilder extends TreeBuilder { static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"marquee\", \"object\", \"table\", \"td\", \"th\"}; static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};"
      },
      {
        "txt": "static final String[] TagSearchButton = new String[]{\"button\"}; static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"optgroup\", \"option\", \"p\", \"rp\", \"rt\"}; static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\","
      },
      {
        "txt": "\"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; public static final int MaxScopeSearchDepth = 100; // prevents the parser bogging down in exceptionally broken pages private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state private boolean baseUriSetFromDoc; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements; // active (open) formatting elements"
      },
      {
        "txt": "private List<String> pendingTableCharacters; // chars in table to be shifted out private Token.EndTag emptyEnd; // reused empty end tag private boolean framesetOk; // if ok to go into frameset private boolean fosterInserts; // if next inserts should be fostered private boolean fragmentParsing; // if parsing a fragment of html ParseSettings defaultSettings() { return ParseSettings.htmlDefault; } @Override protected void initialiseParse(Reader input, String baseUri, Parser parser) {"
      },
      {
        "txt": "super.initialiseParse(input, baseUri, parser); state = HtmlTreeBuilderState.Initial; originalState = null; baseUriSetFromDoc = false; headElement = null; formElement = null; contextElement = null; formattingElements = new ArrayList<>(); pendingTableCharacters = new ArrayList<>(); emptyEnd = new Token.EndTag();"
      },
      {
        "txt": "framesetOk = true; fosterInserts = false; fragmentParsing = false; } List<Node> parseFragment(String inputFragment, Element context, String baseUri, Parser parser) { state = HtmlTreeBuilderState.Initial; initialiseParse(new StringReader(inputFragment), baseUri, parser); contextElement = context; fragmentParsing = true; Element root = null;"
      },
      {
        "txt": "if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\")) tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData);"
      },
      {
        "txt": "else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\", settings), baseUri); doc.appendChild(root); stack.add(root); resetInsertionMode();"
      },
      {
        "txt": "Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; } } } runParser();"
      },
      {
        "txt": "if (context != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) { currentToken = token; return this.state.process(token, this); }"
      },
      {
        "txt": "boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; } HtmlTreeBuilderState state() { return state; }"
      },
      {
        "txt": "void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) { this.framesetOk = framesetOk; } boolean framesetOk() {"
      },
      {
        "txt": "return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri; } void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse"
      },
      {
        "txt": "return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants } } boolean isFragmentParsing() { return fragmentParsing;"
      },
      {
        "txt": "} void error(HtmlTreeBuilderState state) { if (parser.getErrors().canAddError()) parser.getErrors().add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) { Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data"
      },
      {
        "txt": "tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes)); insert(el); return el; } Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName, settings), baseUri); insert(el);"
      },
      {
        "txt": "return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) { Tag tag = Tag.valueOf(startTag.name(), settings); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el);"
      },
      {
        "txt": "if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (!tag.isEmpty()) tokeniser.error(\"Tag cannot be self closing; not a void tag\"); } else // unknown tag, remember this is self closing for output tag.setSelfClosing(); } return el; }"
      },
      {
        "txt": "FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name(), settings); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el); return el; } void insert(Token.Comment commentToken) {"
      },
      {
        "txt": "Comment comment = new Comment(commentToken.getData()); insertNode(comment); } void insert(Token.Character characterToken) { final Node node; final Element el = currentElement(); final String tagName = el.tagName(); final String data = characterToken.getData(); if (characterToken.isCData()) node = new CDataNode(data);"
      },
      {
        "txt": "else if (tagName.equals(\"script\") || tagName.equals(\"style\")) node = new DataNode(data); else node = new TextNode(data); el.appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts())"
      },
      {
        "txt": "insertInFosterParent(node); else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size();"
      },
      {
        "txt": "return stack.remove(size-1); } void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el);"
      },
      {
        "txt": "} private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false; }"
      },
      {
        "txt": "Element getFromStack(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; } boolean removeFromStack(Element el) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false; } void popStackToClose(String elName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos);"
      },
      {
        "txt": "stack.remove(pos); if (inSorted(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break;"
      },
      {
        "txt": "} else { stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\", \"template\");"
      },
      {
        "txt": "} void clearStackToTableRowContext() { clearStackToContext(\"tr\", \"template\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else"
      },
      {
        "txt": "stack.remove(pos); } } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); }"
      },
      {
        "txt": "} return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in);"
      },
      {
        "txt": "} private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (pos == 0) { last = true; node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag } else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) { transition(HtmlTreeBuilderState.InCell);"
      },
      {
        "txt": "break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break;"
      },
      {
        "txt": "} else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag } else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) { transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody);"
      },
      {
        "txt": "break; // frag } } } private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) {"
      },
      {
        "txt": "final int bottom = stack.size() -1; final int top = bottom > MaxScopeSearchDepth ? bottom - MaxScopeSearchDepth : 0; for (int pos = bottom; pos >= top; pos--) { final String elName = stack.get(pos).nodeName(); if (inSorted(elName, targetNames)) return true; if (inSorted(elName, baseTypes)) return false; if (extraTypes != null && inSorted(elName, extraTypes)) return false;"
      },
      {
        "txt": "} return false; } boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) {"
      },
      {
        "txt": "return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) { return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null);"
      },
      {
        "txt": "} boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!inSorted(elName, TagSearchSelectScope)) // all elements except return false; }"
      },
      {
        "txt": "Validate.fail(\"Should not be reachable\"); return false; } void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() {"
      },
      {
        "txt": "return fosterInserts; } void setFosterInserts(boolean fosterInserts) { this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement;"
      },
      {
        "txt": "} void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<>(); } List<String> getPendingTableCharacters() { return pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,"
      },
      {
        "txt": "the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && inSorted(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null);"
      },
      {
        "txt": "} boolean isSpecial(Element el) { String name = el.nodeName(); return inSorted(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size();"
      },
      {
        "txt": "if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker"
      },
      {
        "txt": "break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); }"
      },
      {
        "txt": "private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size();"
      },
      {
        "txt": "int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4"
      },
      {
        "txt": "} while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7"
      },
      {
        "txt": "break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } }"
      },
      {
        "txt": "void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) {"
      },
      {
        "txt": "} Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; <extra_id_0> return next; } return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in);"
      },
      {
        "txt": "void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent; Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false;"
      },
      {
        "txt": "if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0); } if (isLastTableParent) {"
      },
      {
        "txt": "Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() { return \"TreeBuilder{\" + \"currentToken=\" + currentToken +"
      },
      {
        "txt": "\", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  },
  {
    "id": 2093,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 315,
    "end-bug-line": 315,
    "bug": "if (el.nodeName().equals(\"li\")) {",
    "fix": "if (el.normalName().equals(\"li\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks);"
      },
      {
        "txt": "tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head);"
      },
      {
        "txt": "tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } },"
      },
      {
        "txt": "InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this);"
      },
      {
        "txt": "Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; }"
      },
      {
        "txt": "case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); <extra_id_0> tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; }"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "} break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else"
      },
      {
        "txt": "return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t));"
      },
      {
        "txt": "} else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start);"
      },
      {
        "txt": "break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; }"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } }"
      },
      {
        "txt": "} else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
      },
      {
        "txt": "}; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; }"
      },
      {
        "txt": "private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};"
      },
      {
        "txt": "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2094,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 319,
    "end-bug-line": 319,
    "bug": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "fix": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype();"
      },
      {
        "txt": "DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token"
      },
      {
        "txt": "} return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t);"
      },
      {
        "txt": "} }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start);"
      },
      {
        "txt": "if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start);"
      },
      {
        "txt": "tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\");"
      },
      {
        "txt": "tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); }"
      },
      {
        "txt": "break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; }"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA);"
      },
      {
        "txt": "tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false);"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } <extra_id_0> break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) {"
      },
      {
        "txt": "for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "} else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||"
      },
      {
        "txt": "t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "}, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() &&"
      },
      {
        "txt": "StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope"
      },
      {
        "txt": "} }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect);"
      },
      {
        "txt": "} } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody);"
      },
      {
        "txt": "} } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break;"
      },
      {
        "txt": "case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true;"
      },
      {
        "txt": "} } else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) {"
      },
      {
        "txt": "if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag);"
      },
      {
        "txt": "} static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"};"
      },
      {
        "txt": "static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\","
      },
      {
        "txt": "\"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2095,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 339,
    "end-bug-line": 339,
    "bug": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {",
    "fix": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\"))) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml);"
      },
      {
        "txt": "return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead);"
      },
      {
        "txt": "return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {"
      },
      {
        "txt": "Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) {"
      },
      {
        "txt": "tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead);"
      },
      {
        "txt": "tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false);"
      },
      {
        "txt": "} break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false;"
      },
      {
        "txt": "} case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) {"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); <extra_id_0> return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default:"
      },
      {
        "txt": "if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "} } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break;"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\":"
      },
      {
        "txt": "if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else {"
      },
      {
        "txt": "return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start);"
      },
      {
        "txt": "break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return true; } } else { tb.error(this); return false; } return true; } }, AfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb);"
      },
      {
        "txt": "private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); }"
      },
      {
        "txt": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};"
      },
      {
        "txt": "static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\","
      },
      {
        "txt": "\"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2096,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 353,
    "end-bug-line": 353,
    "bug": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {",
    "fix": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).normalName().equals(\"body\"))) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState {"
      },
      {
        "txt": "Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());"
      },
      {
        "txt": "doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); <extra_id_0> return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null)"
      },
      {
        "txt": "Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName());"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ?"
      },
      {
        "txt": "startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs);"
      },
      {
        "txt": "tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) {"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this);"
      },
      {
        "txt": "tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size();"
      },
      {
        "txt": "for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } }"
      },
      {
        "txt": "if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node);"
      },
      {
        "txt": "if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) {"
      },
      {
        "txt": "} if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode);"
      },
      {
        "txt": "} else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod."
      },
      {
        "txt": "} furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm);"
      },
      {
        "txt": "} } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false;"
      },
      {
        "txt": "} else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break;"
      },
      {
        "txt": "} else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; } },"
      },
      {
        "txt": "Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters();"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\");"
      },
      {
        "txt": "return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false);"
      },
      {
        "txt": "} } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb);"
      },
      {
        "txt": "} boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody);"
      },
      {
        "txt": "} return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) {"
      },
      {
        "txt": "tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character));"
      },
      {
        "txt": "} tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\"))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) {"
      },
      {
        "txt": "tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody);"
      },
      {
        "txt": "} return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) {"
      },
      {
        "txt": "case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } },"
      },
      {
        "txt": "InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c);"
      },
      {
        "txt": "} break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF:"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } }"
      },
      {
        "txt": "}, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) {"
      },
      {
        "txt": "case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead);"
      },
      {
        "txt": "default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData();"
      },
      {
        "txt": "return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants {"
      },
      {
        "txt": "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};"
      },
      {
        "txt": "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2097,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 372,
    "end-bug-line": 372,
    "bug": "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {",
    "fix": "if (StringUtil.inSorted(tb.currentElement().normalName(), Constants.Headings)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml);"
      },
      {
        "txt": "return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead);"
      },
      {
        "txt": "return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {"
      },
      {
        "txt": "Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) {"
      },
      {
        "txt": "tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead);"
      },
      {
        "txt": "tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false);"
      },
      {
        "txt": "} break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false;"
      },
      {
        "txt": "} case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) {"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else {"
      },
      {
        "txt": "tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1);"
      },
      {
        "txt": "tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } <extra_id_0> tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default:"
      },
      {
        "txt": "if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "} } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break;"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\":"
      },
      {
        "txt": "if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else {"
      },
      {
        "txt": "return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start);"
      },
      {
        "txt": "break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return true; } } else { tb.error(this); return false; } return true; } }, AfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb);"
      },
      {
        "txt": "private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); }"
      },
      {
        "txt": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};"
      },
      {
        "txt": "static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\","
      },
      {
        "txt": "\"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2098,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 398,
    "end-bug-line": 399,
    "bug": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName());",
    "fix": "if (StringUtil.inSorted(el.normalName(), Constants.DdDt)) { tb.processEndTag(el.normalName());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); <extra_id_0> break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "} break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else"
      },
      {
        "txt": "return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t));"
      },
      {
        "txt": "} else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start);"
      },
      {
        "txt": "break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; }"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } }"
      },
      {
        "txt": "} else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
      },
      {
        "txt": "}; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; }"
      },
      {
        "txt": "private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};"
      },
      {
        "txt": "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2099,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 402,
    "end-bug-line": 402,
    "bug": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))",
    "fix": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.normalName(), Constants.InBodyStartLiBreakers))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml);"
      },
      {
        "txt": "return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead);"
      },
      {
        "txt": "return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {"
      },
      {
        "txt": "Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) {"
      },
      {
        "txt": "tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead);"
      },
      {
        "txt": "tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false);"
      },
      {
        "txt": "} break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false;"
      },
      {
        "txt": "} case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) {"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else {"
      },
      {
        "txt": "tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1);"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop();"
      },
      {
        "txt": "} tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false);"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } <extra_id_0> break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default:"
      },
      {
        "txt": "if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "} } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break;"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\":"
      },
      {
        "txt": "if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else {"
      },
      {
        "txt": "return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start);"
      },
      {
        "txt": "break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return true; } } else { tb.error(this); return false; } return true; } }, AfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb);"
      },
      {
        "txt": "private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); }"
      },
      {
        "txt": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};"
      },
      {
        "txt": "static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\","
      },
      {
        "txt": "\"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2100,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 531,
    "end-bug-line": 531,
    "bug": "if (tb.currentElement().nodeName().equals(\"option\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"option\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { <extra_id_0> tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null;"
      },
      {
        "txt": "Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) {"
      },
      {
        "txt": "furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock;"
      },
      {
        "txt": "Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());"
      },
      {
        "txt": "tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; }"
      },
      {
        "txt": "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri());"
      },
      {
        "txt": "adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag);"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); }"
      },
      {
        "txt": "} else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break;"
      },
      {
        "txt": "} return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } }"
      },
      {
        "txt": "} return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } },"
      },
      {
        "txt": "InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true;"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break;"
      },
      {
        "txt": "default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else"
      },
      {
        "txt": "return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t);"
      },
      {
        "txt": "return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2101,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 538,
    "end-bug-line": 538,
    "bug": "if (!tb.currentElement().nodeName().equals(\"ruby\")) {",
    "fix": "if (!tb.currentElement().normalName().equals(\"ruby\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") :"
      },
      {
        "txt": "\"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\");"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {"
      },
      {
        "txt": "tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) {"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\","
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};"
      },
      {
        "txt": "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};"
      },
      {
        "txt": "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2102,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 574,
    "end-bug-line": 574,
    "bug": "} else if (!tb.inScope(formatEl.nodeName())) {",
    "fix": "} else if (!tb.inScope(formatEl.normalName())) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; <extra_id_0> tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true;"
      },
      {
        "txt": "} else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; }"
      },
      {
        "txt": "Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break;"
      },
      {
        "txt": "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node;"
      },
      {
        "txt": "} if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); }"
      },
      {
        "txt": "Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); }"
      },
      {
        "txt": "} else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p>"
      },
      {
        "txt": "return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "} } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF:"
      },
      {
        "txt": "break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; }"
      },
      {
        "txt": "} } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; }"
      },
      {
        "txt": "}, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable"
      },
      {
        "txt": "} else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); }"
      },
      {
        "txt": "tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); }"
      },
      {
        "txt": "break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),"
      },
      {
        "txt": "\"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case"
      },
      {
        "txt": "else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case"
      },
      {
        "txt": "return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false;"
      },
      {
        "txt": "} }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\"))"
      },
      {
        "txt": "tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this);"
      },
      {
        "txt": "return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else"
      },
      {
        "txt": "return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break;"
      },
      {
        "txt": "case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) {"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } };"
      },
      {
        "txt": "private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) {"
      },
      {
        "txt": "return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      }
    ]
  },
  {
    "id": 2103,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 598,
    "end-bug-line": 598,
    "bug": "tb.popStackToClose(formatEl.nodeName());",
    "fix": "tb.popStackToClose(formatEl.normalName());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "} else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { <extra_id_0> tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());"
      },
      {
        "txt": "tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; }"
      },
      {
        "txt": "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri());"
      },
      {
        "txt": "adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag);"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); }"
      },
      {
        "txt": "} else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break;"
      },
      {
        "txt": "} return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } }"
      },
      {
        "txt": "} return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } },"
      },
      {
        "txt": "InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true;"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break;"
      },
      {
        "txt": "default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else"
      },
      {
        "txt": "return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t);"
      },
      {
        "txt": "return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2104,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 633,
    "end-bug-line": 633,
    "bug": "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {",
    "fix": "if (StringUtil.inSorted(commonAncestor.normalName(), Constants.InBodyEndTableFosters)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey());"
      },
      {
        "txt": "tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; }"
      },
      {
        "txt": "}, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) {"
      },
      {
        "txt": "Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; }"
      },
      {
        "txt": "}, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "} else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); }"
      },
      {
        "txt": "}, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: {"
      },
      {
        "txt": "tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset"
      },
      {
        "txt": "} else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {"
      },
      {
        "txt": "tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\");"
      },
      {
        "txt": "tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\");"
      },
      {
        "txt": "String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\");"
      },
      {
        "txt": "tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text);"
      },
      {
        "txt": "} else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else"
      },
      {
        "txt": "tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) {"
      },
      {
        "txt": "tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; }"
      },
      {
        "txt": "} if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node))"
      },
      {
        "txt": "node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement;"
      },
      {
        "txt": "} if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } <extra_id_0> if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. }"
      },
      {
        "txt": "furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement();"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); }"
      },
      {
        "txt": "} else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings);"
      },
      {
        "txt": "} } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name());"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else {"
      },
      {
        "txt": "if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; } }, Text {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup);"
      },
      {
        "txt": "} else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); }"
      },
      {
        "txt": "boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); }"
      },
      {
        "txt": "return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this);"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); }"
      },
      {
        "txt": "tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); }"
      },
      {
        "txt": "return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\":"
      },
      {
        "txt": "return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag"
      },
      {
        "txt": "return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\");"
      },
      {
        "txt": "if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); }"
      },
      {
        "txt": "break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false;"
      },
      {
        "txt": "} }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } },"
      },
      {
        "txt": "AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\":"
      },
      {
        "txt": "return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default:"
      },
      {
        "txt": "tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {"
      },
      {
        "txt": "tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } }, ForeignContent {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data);"
      },
      {
        "txt": "} return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};"
      },
      {
        "txt": "static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};"
      },
      {
        "txt": "static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2105,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 662,
    "end-bug-line": 662,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml);"
      },
      {
        "txt": "return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead);"
      },
      {
        "txt": "return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {"
      },
      {
        "txt": "Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) {"
      },
      {
        "txt": "tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead);"
      },
      {
        "txt": "tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false);"
      },
      {
        "txt": "} break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false;"
      },
      {
        "txt": "} case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) {"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else {"
      },
      {
        "txt": "tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1);"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop();"
      },
      {
        "txt": "} tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out"
      },
      {
        "txt": "} else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "} Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null)"
      },
      {
        "txt": "return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement();"
      },
      {
        "txt": "form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) {"
      },
      {
        "txt": "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null)"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this);"
      },
      {
        "txt": "Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true;"
      },
      {
        "txt": "} else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; }"
      },
      {
        "txt": "Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break;"
      },
      {
        "txt": "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node;"
      },
      {
        "txt": "} if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); }"
      },
      {
        "txt": "Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default:"
      },
      {
        "txt": "if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "} } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break;"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\":"
      },
      {
        "txt": "if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else {"
      },
      {
        "txt": "return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start);"
      },
      {
        "txt": "break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return true; } } else { tb.error(this); return false; } return true; } }, AfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb);"
      },
      {
        "txt": "private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); }"
      },
      {
        "txt": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};"
      },
      {
        "txt": "static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\","
      },
      {
        "txt": "\"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2106,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 675,
    "end-bug-line": 675,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token }"
      },
      {
        "txt": "return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); }"
      },
      {
        "txt": "}, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\"))"
      },
      {
        "txt": "tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString()));"
      },
      {
        "txt": "return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody);"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true);"
      },
      {
        "txt": "return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break;"
      },
      {
        "txt": "} case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA);"
      },
      {
        "txt": "} } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); <extra_id_0> tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\");"
      },
      {
        "txt": "return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }"
      },
      {
        "txt": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; }"
      },
      {
        "txt": "}, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else {"
      },
      {
        "txt": "tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing }"
      },
      {
        "txt": "return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) {"
      },
      {
        "txt": "if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else"
      },
      {
        "txt": "tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))"
      },
      {
        "txt": ") { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } },"
      },
      {
        "txt": "InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope }"
      },
      {
        "txt": "}, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag:"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\"))"
      },
      {
        "txt": "return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); }"
      },
      {
        "txt": "} }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); }"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\":"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; }"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) {"
      },
      {
        "txt": "String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2107,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 699,
    "end-bug-line": 699,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil;"
      },
      {
        "txt": "import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype);"
      },
      {
        "txt": "if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } },"
      },
      {
        "txt": "BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) {"
      },
      {
        "txt": "Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag:"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start);"
      },
      {
        "txt": "} else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } },"
      },
      {
        "txt": "AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else {"
      },
      {
        "txt": "anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } },"
      },
      {
        "txt": "InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment());"
      },
      {
        "txt": "break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) {"
      },
      {
        "txt": "if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) {"
      },
      {
        "txt": "tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute);"
      },
      {
        "txt": "} } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else {"
      },
      {
        "txt": "Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName());"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ?"
      },
      {
        "txt": "startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs);"
      },
      {
        "txt": "tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) {"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this);"
      },
      {
        "txt": "tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size();"
      },
      {
        "txt": "for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } }"
      },
      {
        "txt": "if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node);"
      },
      {
        "txt": "if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) {"
      },
      {
        "txt": "} if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode);"
      },
      {
        "txt": "} else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod."
      },
      {
        "txt": "} furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); }"
      },
      {
        "txt": "} else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) {"
      },
      {
        "txt": "tb.error(this); return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "} return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText);"
      },
      {
        "txt": "return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) {"
      },
      {
        "txt": "tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed;"
      },
      {
        "txt": "} }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters();"
      },
      {
        "txt": "} tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\");"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\");"
      },
      {
        "txt": "if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true;"
      },
      {
        "txt": "} }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody);"
      },
      {
        "txt": "case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName());"
      },
      {
        "txt": "return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false;"
      },
      {
        "txt": "} tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false;"
      },
      {
        "txt": "} closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody);"
      },
      {
        "txt": "} private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break;"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\"))"
      },
      {
        "txt": "return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) {"
      },
      {
        "txt": "case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name);"
      },
      {
        "txt": "tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; }"
      },
      {
        "txt": "}, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) {"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody);"
      },
      {
        "txt": "case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this);"
      },
      {
        "txt": "return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset);"
      },
      {
        "txt": "} } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); }"
      },
      {
        "txt": "return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag);"
      },
      {
        "txt": "} private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\","
      },
      {
        "txt": "\"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"};"
      },
      {
        "txt": "static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"};"
      },
      {
        "txt": "static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2108,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 711,
    "end-bug-line": 711,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") :"
      },
      {
        "txt": "\"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\");"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name"
      },
      {
        "txt": "} tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) {"
      },
      {
        "txt": "Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) {"
      },
      {
        "txt": "tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check"
      },
      {
        "txt": "tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { }"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. }"
      },
      {
        "txt": "furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement();"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); }"
      },
      {
        "txt": "if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); <extra_id_0> tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\","
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};"
      },
      {
        "txt": "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};"
      },
      {
        "txt": "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2109,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 721,
    "end-bug-line": 721,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") :"
      },
      {
        "txt": "\"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\");"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name"
      },
      {
        "txt": "} tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) {"
      },
      {
        "txt": "Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) {"
      },
      {
        "txt": "tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check"
      },
      {
        "txt": "tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { }"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. }"
      },
      {
        "txt": "furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement();"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); }"
      },
      {
        "txt": "} else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); <extra_id_0> tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\","
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};"
      },
      {
        "txt": "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};"
      },
      {
        "txt": "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2110,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 731,
    "end-bug-line": 731,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") :"
      },
      {
        "txt": "\"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\");"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name"
      },
      {
        "txt": "} tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) {"
      },
      {
        "txt": "Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) {"
      },
      {
        "txt": "tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check"
      },
      {
        "txt": "tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { }"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. }"
      },
      {
        "txt": "furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement();"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); }"
      },
      {
        "txt": "} else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); <extra_id_0> tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\","
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};"
      },
      {
        "txt": "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};"
      },
      {
        "txt": "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2111,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 745,
    "end-bug-line": 745,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "} else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break;"
      },
      {
        "txt": "} return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } }"
      },
      {
        "txt": "} return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } },"
      },
      {
        "txt": "InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true;"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break;"
      },
      {
        "txt": "default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else"
      },
      {
        "txt": "return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t);"
      },
      {
        "txt": "return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2112,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 768,
    "end-bug-line": 768,
    "bug": "String name = tb.settings.normalizeTag(t.asEndTag().name());",
    "fix": "String name = t.asEndTag().normalName; // case insensitive search - goal is to preserve output case, not for the parse to be case sensitive",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { <extra_id_0> ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; }"
      },
      {
        "txt": "} } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; }"
      },
      {
        "txt": "}, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable"
      },
      {
        "txt": "} else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); }"
      },
      {
        "txt": "tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); }"
      },
      {
        "txt": "break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),"
      },
      {
        "txt": "\"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case"
      },
      {
        "txt": "else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case"
      },
      {
        "txt": "return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false;"
      },
      {
        "txt": "} }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\"))"
      },
      {
        "txt": "tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this);"
      },
      {
        "txt": "return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else"
      },
      {
        "txt": "return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break;"
      },
      {
        "txt": "case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) {"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } };"
      },
      {
        "txt": "private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) {"
      },
      {
        "txt": "return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      }
    ]
  },
  {
    "id": 2113,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 772,
    "end-bug-line": 772,
    "bug": "if (node.nodeName().equals(name)) {",
    "fix": "if (node.normalName().equals(name)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token }"
      },
      {
        "txt": "return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); }"
      },
      {
        "txt": "}, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\"))"
      },
      {
        "txt": "tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString()));"
      },
      {
        "txt": "return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody);"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true);"
      },
      {
        "txt": "return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break;"
      },
      {
        "txt": "} case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA);"
      },
      {
        "txt": "} } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); <extra_id_0> tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else {"
      },
      {
        "txt": "break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; }"
      },
      {
        "txt": "}, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else {"
      },
      {
        "txt": "tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing }"
      },
      {
        "txt": "return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) {"
      },
      {
        "txt": "if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else"
      },
      {
        "txt": "tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))"
      },
      {
        "txt": ") { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } },"
      },
      {
        "txt": "InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope }"
      },
      {
        "txt": "}, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag:"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\"))"
      },
      {
        "txt": "return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); }"
      },
      {
        "txt": "} }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); }"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\":"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; }"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) {"
      },
      {
        "txt": "String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2114,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 774,
    "end-bug-line": 774,
    "bug": "if (!name.equals(tb.currentElement().nodeName()))",
    "fix": "if (!name.equals(tb.currentElement().normalName()))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey());"
      },
      {
        "txt": "tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; }"
      },
      {
        "txt": "}, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) {"
      },
      {
        "txt": "Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; }"
      },
      {
        "txt": "}, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "} else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); }"
      },
      {
        "txt": "}, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: {"
      },
      {
        "txt": "tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset"
      },
      {
        "txt": "} else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {"
      },
      {
        "txt": "tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\");"
      },
      {
        "txt": "tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\");"
      },
      {
        "txt": "String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\");"
      },
      {
        "txt": "tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text);"
      },
      {
        "txt": "} else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else"
      },
      {
        "txt": "tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) {"
      },
      {
        "txt": "tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; }"
      },
      {
        "txt": "} if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node))"
      },
      {
        "txt": "node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement;"
      },
      {
        "txt": "if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) {"
      },
      {
        "txt": "adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\");"
      },
      {
        "txt": "return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }"
      },
      {
        "txt": "String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); <extra_id_0> tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; } }, Text {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup);"
      },
      {
        "txt": "} else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); }"
      },
      {
        "txt": "boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); }"
      },
      {
        "txt": "return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this);"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); }"
      },
      {
        "txt": "tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); }"
      },
      {
        "txt": "return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\":"
      },
      {
        "txt": "return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag"
      },
      {
        "txt": "return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\");"
      },
      {
        "txt": "if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); }"
      },
      {
        "txt": "break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false;"
      },
      {
        "txt": "} }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } },"
      },
      {
        "txt": "AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\":"
      },
      {
        "txt": "return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default:"
      },
      {
        "txt": "tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {"
      },
      {
        "txt": "tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } }, ForeignContent {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data);"
      },
      {
        "txt": "} return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};"
      },
      {
        "txt": "static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"};"
      },
      {
        "txt": "static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2115,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 887,
    "end-bug-line": 887,
    "bug": "if (tb.currentElement().nodeName().equals(\"html\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"html\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState {"
      },
      {
        "txt": "Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());"
      },
      {
        "txt": "doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { <extra_id_0> tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "} boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody);"
      },
      {
        "txt": "} return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) {"
      },
      {
        "txt": "tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character));"
      },
      {
        "txt": "} tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\"))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) {"
      },
      {
        "txt": "tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody);"
      },
      {
        "txt": "} return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) {"
      },
      {
        "txt": "case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } },"
      },
      {
        "txt": "InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c);"
      },
      {
        "txt": "} break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF:"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } }"
      },
      {
        "txt": "}, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) {"
      },
      {
        "txt": "case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead);"
      },
      {
        "txt": "default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData();"
      },
      {
        "txt": "return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants {"
      },
      {
        "txt": "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};"
      },
      {
        "txt": "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2116,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 897,
    "end-bug-line": 897,
    "bug": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {",
    "fix": "if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token }"
      },
      {
        "txt": "return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); }"
      },
      {
        "txt": "}, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\"))"
      },
      {
        "txt": "tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString()));"
      },
      {
        "txt": "return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody);"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true);"
      },
      {
        "txt": "return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break;"
      },
      {
        "txt": "} case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA);"
      },
      {
        "txt": "} } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; <extra_id_0> tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); }"
      },
      {
        "txt": "processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) {"
      },
      {
        "txt": "if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else"
      },
      {
        "txt": "tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))"
      },
      {
        "txt": ") { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } },"
      },
      {
        "txt": "InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope }"
      },
      {
        "txt": "}, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag:"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\"))"
      },
      {
        "txt": "return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); }"
      },
      {
        "txt": "} }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); }"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\":"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; }"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) {"
      },
      {
        "txt": "String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2117,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 926,
    "end-bug-line": 926,
    "bug": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {",
    "fix": "if (StringUtil.in(tb.currentElement().normalName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); <extra_id_0> tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else"
      },
      {
        "txt": "return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t);"
      },
      {
        "txt": "return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2118,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 954,
    "end-bug-line": 954,
    "bug": "if (!tb.currentElement().nodeName().equals(\"caption\"))",
    "fix": "if (!tb.currentElement().normalName().equals(\"caption\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks);"
      },
      {
        "txt": "tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head);"
      },
      {
        "txt": "tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } },"
      },
      {
        "txt": "InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this);"
      },
      {
        "txt": "Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; }"
      },
      {
        "txt": "case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } }"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null)"
      },
      {
        "txt": "second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \";"
      },
      {
        "txt": "tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name }"
      },
      {
        "txt": "tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {"
      },
      {
        "txt": "for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si);"
      },
      {
        "txt": "if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName());"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node);"
      },
      {
        "txt": "continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null);"
      },
      {
        "txt": "if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) {"
      },
      {
        "txt": "if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); }"
      },
      {
        "txt": "} else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) {"
      },
      {
        "txt": "tb.error(this); return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "} return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText);"
      },
      {
        "txt": "return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) {"
      },
      {
        "txt": "tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed;"
      },
      {
        "txt": "} }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters();"
      },
      {
        "txt": "} tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else"
      },
      {
        "txt": "return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t));"
      },
      {
        "txt": "} else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start);"
      },
      {
        "txt": "break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; }"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } }"
      },
      {
        "txt": "} else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
      },
      {
        "txt": "}; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; }"
      },
      {
        "txt": "private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};"
      },
      {
        "txt": "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2119,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1007,
    "end-bug-line": 1007,
    "bug": "if (tb.currentElement().nodeName().equals(\"html\")) {",
    "fix": "if (tb.currentElement().normalName().equals(\"html\")) { // frag case",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element;"
      },
      {
        "txt": "import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml);"
      },
      {
        "txt": "return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead);"
      },
      {
        "txt": "return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) {"
      },
      {
        "txt": "Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) {"
      },
      {
        "txt": "tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead);"
      },
      {
        "txt": "tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false);"
      },
      {
        "txt": "} break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false;"
      },
      {
        "txt": "} case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) {"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey()))"
      },
      {
        "txt": "html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else {"
      },
      {
        "txt": "tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1);"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop();"
      },
      {
        "txt": "} tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out"
      },
      {
        "txt": "} else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "} Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null)"
      },
      {
        "txt": "return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement();"
      },
      {
        "txt": "form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) {"
      },
      {
        "txt": "if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null)"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this);"
      },
      {
        "txt": "Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true;"
      },
      {
        "txt": "} else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; }"
      },
      {
        "txt": "Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break;"
      },
      {
        "txt": "Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node;"
      },
      {
        "txt": "} if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); }"
      },
      {
        "txt": "Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); }"
      },
      {
        "txt": "} else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p>"
      },
      {
        "txt": "return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "} } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF:"
      },
      {
        "txt": "break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; }"
      },
      {
        "txt": "} } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; }"
      },
      {
        "txt": "}, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable"
      },
      {
        "txt": "} else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); }"
      },
      {
        "txt": "tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); }"
      },
      {
        "txt": "break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(),"
      },
      {
        "txt": "\"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break;"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { <extra_id_0> tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\":"
      },
      {
        "txt": "if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else {"
      },
      {
        "txt": "return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start);"
      },
      {
        "txt": "break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return true; } } else { tb.error(this); return false; } return true; } }, AfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb);"
      },
      {
        "txt": "private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); }"
      },
      {
        "txt": "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"};"
      },
      {
        "txt": "static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\","
      },
      {
        "txt": "\"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2120,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1018,
    "end-bug-line": 1018,
    "bug": "if (tb.currentElement().nodeName().equals(\"html\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"html\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype();"
      },
      {
        "txt": "DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token"
      },
      {
        "txt": "} return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t);"
      },
      {
        "txt": "} }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start);"
      },
      {
        "txt": "if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start);"
      },
      {
        "txt": "tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\");"
      },
      {
        "txt": "tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); }"
      },
      {
        "txt": "break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; }"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA);"
      },
      {
        "txt": "tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false);"
      },
      {
        "txt": "Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) {"
      },
      {
        "txt": "tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); }"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {"
      },
      {
        "txt": "tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg"
      },
      {
        "txt": "else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\"));"
      },
      {
        "txt": "} tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))"
      },
      {
        "txt": "inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state();"
      },
      {
        "txt": "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {"
      },
      {
        "txt": "if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null;"
      },
      {
        "txt": "Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) {"
      },
      {
        "txt": "furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock;"
      },
      {
        "txt": "Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());"
      },
      {
        "txt": "tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; }"
      },
      {
        "txt": "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri());"
      },
      {
        "txt": "adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag);"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); }"
      },
      {
        "txt": "} else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break;"
      },
      {
        "txt": "} return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } }"
      },
      {
        "txt": "} return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } },"
      },
      {
        "txt": "InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true;"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break;"
      },
      {
        "txt": "default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: <extra_id_0> return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "}, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() &&"
      },
      {
        "txt": "StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope"
      },
      {
        "txt": "} }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect);"
      },
      {
        "txt": "} } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody);"
      },
      {
        "txt": "} } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break;"
      },
      {
        "txt": "case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true;"
      },
      {
        "txt": "} } else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) {"
      },
      {
        "txt": "if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag);"
      },
      {
        "txt": "} static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"};"
      },
      {
        "txt": "static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\","
      },
      {
        "txt": "\"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2121,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1089,
    "end-bug-line": 1089,
    "bug": "tb.processEndTag(tb.currentElement().nodeName());",
    "fix": "tb.processEndTag(tb.currentElement().normalName()); // tbody, tfoot, thead",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "} break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); <extra_id_0> return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2122,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1173,
    "end-bug-line": 1173,
    "bug": "if (!tb.currentElement().nodeName().equals(name))",
    "fix": "if (!tb.currentElement().normalName().equals(name))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes;"
      },
      {
        "txt": "import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks);"
      },
      {
        "txt": "tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head);"
      },
      {
        "txt": "tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } },"
      },
      {
        "txt": "InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this);"
      },
      {
        "txt": "Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; }"
      },
      {
        "txt": "case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } }"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null)"
      },
      {
        "txt": "second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \";"
      },
      {
        "txt": "tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name }"
      },
      {
        "txt": "tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) {"
      },
      {
        "txt": "for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si);"
      },
      {
        "txt": "if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName());"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node);"
      },
      {
        "txt": "continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null);"
      },
      {
        "txt": "if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) {"
      },
      {
        "txt": "if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); }"
      },
      {
        "txt": "} else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) {"
      },
      {
        "txt": "tb.error(this); return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "} return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText);"
      },
      {
        "txt": "return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) {"
      },
      {
        "txt": "tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed;"
      },
      {
        "txt": "} }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters();"
      },
      {
        "txt": "} tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\");"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\");"
      },
      {
        "txt": "if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true;"
      },
      {
        "txt": "} }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody);"
      },
      {
        "txt": "case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break;"
      },
      {
        "txt": "case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName());"
      },
      {
        "txt": "return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false;"
      },
      {
        "txt": "} tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); <extra_id_0> tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t));"
      },
      {
        "txt": "} else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start);"
      },
      {
        "txt": "break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; }"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } }"
      },
      {
        "txt": "} else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; }"
      },
      {
        "txt": "}; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; }"
      },
      {
        "txt": "private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"};"
      },
      {
        "txt": "static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2123,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1240,
    "end-bug-line": 1240,
    "bug": "if (tb.currentElement().nodeName().equals(\"option\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"option\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token }"
      },
      {
        "txt": "return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); }"
      },
      {
        "txt": "}, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\"))"
      },
      {
        "txt": "tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString()));"
      },
      {
        "txt": "return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody);"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this);"
      },
      {
        "txt": "return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true);"
      },
      {
        "txt": "return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break;"
      },
      {
        "txt": "} case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA);"
      },
      {
        "txt": "} } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this);"
      },
      {
        "txt": "return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); }"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr);"
      },
      {
        "txt": "} inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) {"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell))"
      },
      {
        "txt": "tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) {"
      },
      {
        "txt": "tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null;"
      },
      {
        "txt": "boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el;"
      },
      {
        "txt": "break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock;"
      },
      {
        "txt": "for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement);"
      },
      {
        "txt": "tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes());"
      },
      {
        "txt": "Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\");"
      },
      {
        "txt": "if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; }"
      },
      {
        "txt": "return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName()))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } }"
      },
      {
        "txt": "return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption);"
      },
      {
        "txt": "} else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name,"
      },
      {
        "txt": "\"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default:"
      },
      {
        "txt": "if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "} } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break;"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb);"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true;"
      },
      {
        "txt": "} }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) {"
      },
      {
        "txt": "tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); }"
      },
      {
        "txt": "}, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else"
      },
      {
        "txt": "tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { <extra_id_0> tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\"))"
      },
      {
        "txt": "return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); }"
      },
      {
        "txt": "} }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); }"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\":"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; }"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) {"
      },
      {
        "txt": "String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2124,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1244,
    "end-bug-line": 1244,
    "bug": "if (tb.currentElement().nodeName().equals(\"option\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"option\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute;"
      },
      {
        "txt": "import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks())"
      },
      {
        "txt": "tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag());"
      },
      {
        "txt": "tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\");"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag();"
      },
      {
        "txt": "String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) {"
      },
      {
        "txt": "handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag();"
      },
      {
        "txt": "name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; }"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "}, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead);"
      },
      {
        "txt": "} else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) {"
      },
      {
        "txt": "tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break;"
      },
      {
        "txt": "} case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\");"
      },
      {
        "txt": "break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); }"
      },
      {
        "txt": "} } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1);"
      },
      {
        "txt": "if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null)"
      },
      {
        "txt": "return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") :"
      },
      {
        "txt": "\"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\");"
      },
      {
        "txt": "tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name"
      },
      {
        "txt": "} tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) {"
      },
      {
        "txt": "Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) {"
      },
      {
        "txt": "tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check"
      },
      {
        "txt": "tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { }"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else {"
      },
      {
        "txt": "if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. }"
      },
      {
        "txt": "furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement();"
      },
      {
        "txt": "tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); }"
      },
      {
        "txt": "} else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings);"
      },
      {
        "txt": "} } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name());"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else {"
      },
      {
        "txt": "if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; } }, Text {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop();"
      },
      {
        "txt": "tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup);"
      },
      {
        "txt": "} else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); }"
      },
      {
        "txt": "boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); }"
      },
      {
        "txt": "return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this);"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); }"
      },
      {
        "txt": "tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); }"
      },
      {
        "txt": "return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\":"
      },
      {
        "txt": "return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag"
      },
      {
        "txt": "return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\");"
      },
      {
        "txt": "if (processed) return tb.process(t); else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); }"
      },
      {
        "txt": "break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { <extra_id_0> tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); }"
      },
      {
        "txt": "} } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true;"
      },
      {
        "txt": "} }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false;"
      },
      {
        "txt": "} private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); }"
      },
      {
        "txt": "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\","
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"};"
      },
      {
        "txt": "static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"};"
      },
      {
        "txt": "static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2125,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1246,
    "end-bug-line": 1246,
    "bug": "else if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "fix": "else if (tb.currentElement().normalName().equals(\"optgroup\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); <extra_id_0> tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) {"
      },
      {
        "txt": "return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this);"
      },
      {
        "txt": "break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else"
      },
      {
        "txt": "return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break;"
      },
      {
        "txt": "case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) {"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } };"
      },
      {
        "txt": "private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) {"
      },
      {
        "txt": "return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      }
    ]
  },
  {
    "id": 2126,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1269,
    "end-bug-line": 1269,
    "bug": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).normalName().equals(\"optgroup\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node;"
      },
      {
        "txt": "import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype();"
      },
      {
        "txt": "DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token"
      },
      {
        "txt": "} return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t);"
      },
      {
        "txt": "} }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start);"
      },
      {
        "txt": "if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start);"
      },
      {
        "txt": "tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\");"
      },
      {
        "txt": "tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); }"
      },
      {
        "txt": "break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; }"
      },
      {
        "txt": "case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA);"
      },
      {
        "txt": "tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false);"
      },
      {
        "txt": "Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) {"
      },
      {
        "txt": "tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); }"
      },
      {
        "txt": "Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) {"
      },
      {
        "txt": "tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg"
      },
      {
        "txt": "else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\"));"
      },
      {
        "txt": "} tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs))"
      },
      {
        "txt": "inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state();"
      },
      {
        "txt": "if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) {"
      },
      {
        "txt": "if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null;"
      },
      {
        "txt": "Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) {"
      },
      {
        "txt": "furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock;"
      },
      {
        "txt": "Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri());"
      },
      {
        "txt": "tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; }"
      },
      {
        "txt": "if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri());"
      },
      {
        "txt": "adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) {"
      },
      {
        "txt": "boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag);"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); }"
      },
      {
        "txt": "} else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break;"
      },
      {
        "txt": "} return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } }"
      },
      {
        "txt": "} return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } },"
      },
      {
        "txt": "InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true;"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this);"
      },
      {
        "txt": "if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode();"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break;"
      },
      {
        "txt": "default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (("
      },
      {
        "txt": "t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else"
      },
      {
        "txt": "return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t);"
      },
      {
        "txt": "return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) {"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; }"
      },
      {
        "txt": "}, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": <extra_id_0> tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect);"
      },
      {
        "txt": "} } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody);"
      },
      {
        "txt": "} } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break;"
      },
      {
        "txt": "case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true;"
      },
      {
        "txt": "} } else { tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true;"
      },
      {
        "txt": "} }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) {"
      },
      {
        "txt": "if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag);"
      },
      {
        "txt": "} static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"};"
      },
      {
        "txt": "static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\","
      },
      {
        "txt": "\"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2127,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1271,
    "end-bug-line": 1271,
    "bug": "if (tb.currentElement().nodeName().equals(\"optgroup\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"optgroup\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState {"
      },
      {
        "txt": "Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());"
      },
      {
        "txt": "doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) {"
      },
      {
        "txt": "for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "} else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||"
      },
      {
        "txt": "t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "}, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() &&"
      },
      {
        "txt": "StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope"
      },
      {
        "txt": "} }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); <extra_id_0> tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF:"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } }"
      },
      {
        "txt": "}, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) {"
      },
      {
        "txt": "case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead);"
      },
      {
        "txt": "default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop();"
      },
      {
        "txt": "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData();"
      },
      {
        "txt": "return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants {"
      },
      {
        "txt": "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};"
      },
      {
        "txt": "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2128,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1277,
    "end-bug-line": 1277,
    "bug": "if (tb.currentElement().nodeName().equals(\"option\"))",
    "fix": "if (tb.currentElement().normalName().equals(\"option\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType;"
      },
      {
        "txt": "import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else {"
      },
      {
        "txt": "tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\");"
      },
      {
        "txt": "tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop();"
      },
      {
        "txt": "tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head);"
      },
      {
        "txt": "tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) {"
      },
      {
        "txt": "anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: {"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c);"
      },
      {
        "txt": "tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this);"
      },
      {
        "txt": "return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\");"
      },
      {
        "txt": "if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore"
      },
      {
        "txt": "} else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this);"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1)"
      },
      {
        "txt": "stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this);"
      },
      {
        "txt": "tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\"))"
      },
      {
        "txt": "tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) {"
      },
      {
        "txt": "if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) {"
      },
      {
        "txt": "Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes();"
      },
      {
        "txt": "for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name);"
      },
      {
        "txt": "if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl)"
      },
      {
        "txt": "tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1);"
      },
      {
        "txt": "seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true;"
      },
      {
        "txt": "} Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl)"
      },
      {
        "txt": "break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode);"
      },
      {
        "txt": "lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode);"
      },
      {
        "txt": "} Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl);"
      },
      {
        "txt": "tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody);"
      },
      {
        "txt": "} } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break;"
      },
      {
        "txt": "case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos);"
      },
      {
        "txt": "if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false;"
      },
      {
        "txt": "} } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true;"
      },
      {
        "txt": "} }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\");"
      },
      {
        "txt": "if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); }"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\");"
      },
      {
        "txt": "} tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo"
      },
      {
        "txt": "} else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed;"
      },
      {
        "txt": "if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; } },"
      },
      {
        "txt": "InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData());"
      },
      {
        "txt": "} break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody);"
      },
      {
        "txt": "tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; } },"
      },
      {
        "txt": "InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break;"
      },
      {
        "txt": "case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\"))"
      },
      {
        "txt": "return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\");"
      },
      {
        "txt": "if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\");"
      },
      {
        "txt": "return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) {"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else"
      },
      {
        "txt": "return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) {"
      },
      {
        "txt": "tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": <extra_id_0> tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data);"
      },
      {
        "txt": "} private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"};"
      },
      {
        "txt": "static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      },
      {
        "txt": "static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2129,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1296,
    "end-bug-line": 1296,
    "bug": "if (!tb.currentElement().nodeName().equals(\"html\"))",
    "fix": "if (!tb.currentElement().normalName().equals(\"html\"))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } break; case EOF: <extra_id_0> tb.error(this); break; default: return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else"
      },
      {
        "txt": "return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break;"
      },
      {
        "txt": "case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) {"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } };"
      },
      {
        "txt": "private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) {"
      },
      {
        "txt": "return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      }
    ]
  },
  {
    "id": 2130,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1383,
    "end-bug-line": 1383,
    "bug": "if (tb.currentElement().nodeName().equals(\"html\")) {",
    "fix": "if (tb.currentElement().normalName().equals(\"html\")) { // frag",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState {"
      },
      {
        "txt": "Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());"
      },
      {
        "txt": "doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) {"
      },
      {
        "txt": "for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "} else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||"
      },
      {
        "txt": "t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "}, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() &&"
      },
      {
        "txt": "StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope"
      },
      {
        "txt": "} }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect);"
      },
      {
        "txt": "} } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody);"
      },
      {
        "txt": "} } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break;"
      },
      {
        "txt": "return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { <extra_id_0> tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset);"
      },
      {
        "txt": "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else {"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData();"
      },
      {
        "txt": "return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants {"
      },
      {
        "txt": "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};"
      },
      {
        "txt": "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2131,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1388,
    "end-bug-line": 1388,
    "bug": "if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) {",
    "fix": "if (!tb.isFragmentParsing() && !tb.currentElement().normalName().equals(\"frameset\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document;"
      },
      {
        "txt": "import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier()); doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml);"
      },
      {
        "txt": "} else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) {"
      },
      {
        "txt": "return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t); }"
      },
      {
        "txt": "return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) {"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) {"
      },
      {
        "txt": "handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) {"
      },
      {
        "txt": "tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement();"
      },
      {
        "txt": "tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) {"
      },
      {
        "txt": "if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); } return true;"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; } case Doctype: {"
      },
      {
        "txt": "tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\");"
      },
      {
        "txt": "Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; }"
      },
      {
        "txt": "if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0);"
      },
      {
        "txt": "for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) {"
      },
      {
        "txt": "return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove();"
      },
      {
        "txt": "while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) {"
      },
      {
        "txt": "tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName();"
      },
      {
        "txt": "if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t);"
      },
      {
        "txt": "} private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; }"
      },
      {
        "txt": "closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); }"
      },
      {
        "txt": "private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) {"
      },
      {
        "txt": "case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break; case Comment:"
      },
      {
        "txt": "tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody);"
      },
      {
        "txt": "else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\":"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop();"
      },
      {
        "txt": "else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode();"
      },
      {
        "txt": "} break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } },"
      },
      {
        "txt": "InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\");"
      },
      {
        "txt": "return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody);"
      },
      {
        "txt": "return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\":"
      },
      {
        "txt": "tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); <extra_id_0> tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false; } return true; }"
      },
      {
        "txt": "}, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this);"
      },
      {
        "txt": "return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } };"
      },
      {
        "txt": "private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) {"
      },
      {
        "txt": "return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext);"
      },
      {
        "txt": "tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants { static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"};"
      },
      {
        "txt": "static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"};"
      }
    ]
  },
  {
    "id": 2132,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1393,
    "end-bug-line": 1393,
    "bug": "if (!tb.currentElement().nodeName().equals(\"html\")) {",
    "fix": "if (!tb.currentElement().normalName().equals(\"html\")) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.internal.StringUtil; import org.jsoup.nodes.Attribute; import org.jsoup.nodes.Attributes; import org.jsoup.nodes.Document; import org.jsoup.nodes.DocumentType; import org.jsoup.nodes.Element; import org.jsoup.nodes.Node; import java.util.ArrayList; enum HtmlTreeBuilderState {"
      },
      {
        "txt": "Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPublicIdentifier(), d.getSystemIdentifier());"
      },
      {
        "txt": "doctype.setPubSysKey(d.getPubSysKey()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.reader.matchConsume(\"\\n\"); // ignore LF if next token tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false;"
      },
      {
        "txt": "} if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i);"
      },
      {
        "txt": "if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag);"
      },
      {
        "txt": "tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\");"
      },
      {
        "txt": "tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); }"
      },
      {
        "txt": "inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false);"
      },
      {
        "txt": "handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable);"
      },
      {
        "txt": "else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this);"
      },
      {
        "txt": "tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false;"
      },
      {
        "txt": "ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break;"
      },
      {
        "txt": "} } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) {"
      },
      {
        "txt": "if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement);"
      },
      {
        "txt": "node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null)"
      },
      {
        "txt": "lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]);"
      },
      {
        "txt": "for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb);"
      },
      {
        "txt": "} else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); }"
      },
      {
        "txt": "} else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored)"
      },
      {
        "txt": "return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name);"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this);"
      },
      {
        "txt": "tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true;"
      },
      {
        "txt": "} boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = tb.settings.normalizeTag(t.asEndTag().name()); ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true;"
      },
      {
        "txt": "} }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState());"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead);"
      },
      {
        "txt": "} else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false;"
      },
      {
        "txt": "else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing"
      },
      {
        "txt": "} return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false);"
      },
      {
        "txt": "} else { processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character:"
      },
      {
        "txt": "Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) {"
      },
      {
        "txt": "for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); }"
      },
      {
        "txt": "} else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; }"
      },
      {
        "txt": "}, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") ||"
      },
      {
        "txt": "t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false; } else { tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; }"
      },
      {
        "txt": "}, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (name.equals(\"tr\")) {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else"
      },
      {
        "txt": "return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this);"
      },
      {
        "txt": "return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } },"
      },
      {
        "txt": "InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"template\")) { tb.insert(startTag); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag);"
      },
      {
        "txt": "tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName();"
      },
      {
        "txt": "if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable);"
      },
      {
        "txt": "} private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } }, InCell {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InCellNames)) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; }"
      },
      {
        "txt": "tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.inSorted(name, Constants.InCellBody)) { tb.error(this); return false; } else if (StringUtil.inSorted(name, Constants.InCellTable)) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() &&"
      },
      {
        "txt": "StringUtil.inSorted(t.asStartTag().normalName(), Constants.InCellCol)) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope"
      },
      {
        "txt": "} }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false;"
      },
      {
        "txt": "case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) {"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this);"
      },
      {
        "txt": "if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else"
      },
      {
        "txt": "tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\");"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect);"
      },
      {
        "txt": "} } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) {"
      },
      {
        "txt": "tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody);"
      },
      {
        "txt": "} } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break;"
      },
      {
        "txt": "case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { <extra_id_0> tb.error(this); return true; } } else { tb.error(this); return false;"
      },
      {
        "txt": "tb.error(this); return false; } return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; } return true; } }, AfterAfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData();"
      },
      {
        "txt": "return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { return StringUtil.isBlank(data); } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode();"
      },
      {
        "txt": "tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } static final class Constants {"
      },
      {
        "txt": "static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; static final String[] InBodyStartPreListing = new String[]{\"listing\", \"pre\"}; static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; static final String[] DdDt = new String[]{\"dd\", \"dt\"}; static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"};"
      },
      {
        "txt": "static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; static final String[] InBodyStartInputAttribs = new String[]{\"action\", \"name\", \"prompt\"}; static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellNames = new String[]{\"td\", \"th\"}; static final String[] InCellBody = new String[]{\"body\", \"caption\", \"col\", \"colgroup\", \"html\"}; static final String[] InCellTable = new String[]{ \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; static final String[] InCellCol = new String[]{\"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2133,
    "file_path": "src/main/java/org/jsoup/parser/Tag.java",
    "start-bug-line": 4,
    "end-bug-line": 4,
    "bug": "",
    "fix": "import org.jsoup.internal.Normalizer;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; <extra_id_0> import java.util.HashMap; import java.util.Map; public class Tag { private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags private String tagName; private boolean isBlock = true; // block or inline"
      },
      {
        "txt": "private String tagName; private boolean isBlock = true; // block or inline private boolean formatAsBlock = true; // should be formatted as a block private boolean canContainInline = true; // only pcdata if not private boolean empty = false; // can hold nothing; e.g. img private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty. private boolean preserveWhitespace = false; // for pre, textarea, script etc private boolean formList = false; // a control that appears in forms: input, textarea, output etc private boolean formSubmit = false; // a control that can be submitted in a form: input etc private Tag(String tagName) {"
      },
      {
        "txt": "this.tagName = tagName; } public String getName() { return tagName; } public static Tag valueOf(String tagName, ParseSettings settings) { Validate.notNull(tagName); Tag tag = tags.get(tagName); if (tag == null) { tagName = settings.normalizeTag(tagName);"
      },
      {
        "txt": "Validate.notEmpty(tagName); tag = tags.get(tagName); if (tag == null) { tag = new Tag(tagName); tag.isBlock = false; } } return tag; } public static Tag valueOf(String tagName) {"
      },
      {
        "txt": "return valueOf(tagName, ParseSettings.preserveCase); } public boolean isBlock() { return isBlock; } public boolean formatAsBlock() { return formatAsBlock; } public boolean canContainBlock() { return isBlock;"
      },
      {
        "txt": "} public boolean isInline() { return !isBlock; } public boolean isData() { return !canContainInline && !isEmpty(); } public boolean isEmpty() { return empty; }"
      },
      {
        "txt": "public boolean isSelfClosing() { return empty || selfClosing; } public boolean isKnownTag() { return tags.containsKey(tagName); } public static boolean isKnownTag(String tagName) { return tags.containsKey(tagName); } public boolean preserveWhitespace() {"
      },
      {
        "txt": "return preserveWhitespace; } public boolean isFormListed() { return formList; } public boolean isFormSubmittable() { return formSubmit; } Tag setSelfClosing() { selfClosing = true;"
      },
      {
        "txt": "return this; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Tag)) return false; Tag tag = (Tag) o; if (!tagName.equals(tag.tagName)) return false; if (canContainInline != tag.canContainInline) return false; if (empty != tag.empty) return false;"
      },
      {
        "txt": "if (formatAsBlock != tag.formatAsBlock) return false; if (isBlock != tag.isBlock) return false; if (preserveWhitespace != tag.preserveWhitespace) return false; if (selfClosing != tag.selfClosing) return false; if (formList != tag.formList) return false; return formSubmit == tag.formSubmit; } @Override public int hashCode() { int result = tagName.hashCode();"
      },
      {
        "txt": "result = 31 * result + (isBlock ? 1 : 0); result = 31 * result + (formatAsBlock ? 1 : 0); result = 31 * result + (canContainInline ? 1 : 0); result = 31 * result + (empty ? 1 : 0); result = 31 * result + (selfClosing ? 1 : 0); result = 31 * result + (preserveWhitespace ? 1 : 0); result = 31 * result + (formList ? 1 : 0); result = 31 * result + (formSubmit ? 1 : 0); return result; }"
      },
      {
        "txt": "@Override public String toString() { return tagName; } private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\", \"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\", \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\", \"template\", \"article\", \"main\","
      },
      {
        "txt": "\"svg\", \"math\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\", \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\", \"data\", \"bdi\", \"s\" };"
      },
      {
        "txt": "private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\", \"ins\", \"del\", \"s\" }; private static final String[] preserveWhitespaceTags = { \"pre\", \"plaintext\", \"title\", \"textarea\""
      },
      {
        "txt": "}; private static final String[] formListedTags = { \"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\" }; private static final String[] formSubmitTags = { \"input\", \"keygen\", \"object\", \"select\", \"textarea\" }; static { for (String tagName : blockTags) { Tag tag = new Tag(tagName);"
      },
      {
        "txt": "register(tag); } for (String tagName : inlineTags) { Tag tag = new Tag(tagName); tag.isBlock = false; tag.formatAsBlock = false; register(tag); } for (String tagName : emptyTags) { Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tag); tag.canContainInline = false; tag.empty = true; } for (String tagName : formatAsInlineTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formatAsBlock = false; } for (String tagName : preserveWhitespaceTags) {"
      },
      {
        "txt": "Tag tag = tags.get(tagName); Validate.notNull(tag); tag.preserveWhitespace = true; } for (String tagName : formListedTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formList = true; } for (String tagName : formSubmitTags) {"
      },
      {
        "txt": "Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formSubmit = true; } } private static void register(Tag tag) { tags.put(tag.tagName, tag); }"
      }
    ]
  },
  {
    "id": 2134,
    "file_path": "src/main/java/org/jsoup/parser/Tag.java",
    "start-bug-line": 17,
    "end-bug-line": 17,
    "bug": "",
    "fix": "private String normalName; // always the lower case version of this tag, regardless of case preservation mode",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.jsoup.helper.Validate; import java.util.HashMap; import java.util.Map; public class Tag { private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags private String tagName; <extra_id_0> private boolean formatAsBlock = true; // should be formatted as a block private boolean canContainInline = true; // only pcdata if not private boolean empty = false; // can hold nothing; e.g. img private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty. private boolean preserveWhitespace = false; // for pre, textarea, script etc private boolean formList = false; // a control that appears in forms: input, textarea, output etc"
      },
      {
        "txt": "private boolean preserveWhitespace = false; // for pre, textarea, script etc private boolean formList = false; // a control that appears in forms: input, textarea, output etc private boolean formSubmit = false; // a control that can be submitted in a form: input etc private Tag(String tagName) { this.tagName = tagName; } public String getName() { return tagName; } public static Tag valueOf(String tagName, ParseSettings settings) {"
      },
      {
        "txt": "Validate.notNull(tagName); Tag tag = tags.get(tagName); if (tag == null) { tagName = settings.normalizeTag(tagName); Validate.notEmpty(tagName); tag = tags.get(tagName); if (tag == null) { tag = new Tag(tagName); tag.isBlock = false; }"
      },
      {
        "txt": "} return tag; } public static Tag valueOf(String tagName) { return valueOf(tagName, ParseSettings.preserveCase); } public boolean isBlock() { return isBlock; } public boolean formatAsBlock() {"
      },
      {
        "txt": "return formatAsBlock; } public boolean canContainBlock() { return isBlock; } public boolean isInline() { return !isBlock; } public boolean isData() { return !canContainInline && !isEmpty();"
      },
      {
        "txt": "} public boolean isEmpty() { return empty; } public boolean isSelfClosing() { return empty || selfClosing; } public boolean isKnownTag() { return tags.containsKey(tagName); }"
      },
      {
        "txt": "public static boolean isKnownTag(String tagName) { return tags.containsKey(tagName); } public boolean preserveWhitespace() { return preserveWhitespace; } public boolean isFormListed() { return formList; } public boolean isFormSubmittable() {"
      },
      {
        "txt": "return formSubmit; } Tag setSelfClosing() { selfClosing = true; return this; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Tag)) return false;"
      },
      {
        "txt": "Tag tag = (Tag) o; if (!tagName.equals(tag.tagName)) return false; if (canContainInline != tag.canContainInline) return false; if (empty != tag.empty) return false; if (formatAsBlock != tag.formatAsBlock) return false; if (isBlock != tag.isBlock) return false; if (preserveWhitespace != tag.preserveWhitespace) return false; if (selfClosing != tag.selfClosing) return false; if (formList != tag.formList) return false; return formSubmit == tag.formSubmit;"
      },
      {
        "txt": "} @Override public int hashCode() { int result = tagName.hashCode(); result = 31 * result + (isBlock ? 1 : 0); result = 31 * result + (formatAsBlock ? 1 : 0); result = 31 * result + (canContainInline ? 1 : 0); result = 31 * result + (empty ? 1 : 0); result = 31 * result + (selfClosing ? 1 : 0); result = 31 * result + (preserveWhitespace ? 1 : 0);"
      },
      {
        "txt": "result = 31 * result + (formList ? 1 : 0); result = 31 * result + (formSubmit ? 1 : 0); return result; } @Override public String toString() { return tagName; } private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\","
      },
      {
        "txt": "\"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\", \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\", \"template\", \"article\", \"main\", \"svg\", \"math\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\","
      },
      {
        "txt": "\"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\", \"data\", \"bdi\", \"s\" }; private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\","
      },
      {
        "txt": "\"ins\", \"del\", \"s\" }; private static final String[] preserveWhitespaceTags = { \"pre\", \"plaintext\", \"title\", \"textarea\" }; private static final String[] formListedTags = { \"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\" }; private static final String[] formSubmitTags = { \"input\", \"keygen\", \"object\", \"select\", \"textarea\""
      },
      {
        "txt": "}; static { for (String tagName : blockTags) { Tag tag = new Tag(tagName); register(tag); } for (String tagName : inlineTags) { Tag tag = new Tag(tagName); tag.isBlock = false; tag.formatAsBlock = false;"
      },
      {
        "txt": "register(tag); } for (String tagName : emptyTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.canContainInline = false; tag.empty = true; } for (String tagName : formatAsInlineTags) { Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tag); tag.formatAsBlock = false; } for (String tagName : preserveWhitespaceTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.preserveWhitespace = true; } for (String tagName : formListedTags) { Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tag); tag.formList = true; } for (String tagName : formSubmitTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formSubmit = true; } } private static void register(Tag tag) {"
      },
      {
        "txt": "tags.put(tag.tagName, tag); }"
      }
    ]
  },
  {
    "id": 2135,
    "file_path": "src/main/java/org/jsoup/parser/Tag.java",
    "start-bug-line": 28,
    "end-bug-line": 28,
    "bug": "",
    "fix": "normalName = Normalizer.lowerCase(tagName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; import java.util.HashMap; import java.util.Map; public class Tag { private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags private String tagName; private boolean isBlock = true; // block or inline private boolean formatAsBlock = true; // should be formatted as a block private boolean canContainInline = true; // only pcdata if not"
      },
      {
        "txt": "private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty. private boolean preserveWhitespace = false; // for pre, textarea, script etc private boolean formList = false; // a control that appears in forms: input, textarea, output etc private boolean formSubmit = false; // a control that can be submitted in a form: input etc private Tag(String tagName) { this.tagName = tagName; <extra_id_0> public String getName() { return tagName; } public static Tag valueOf(String tagName, ParseSettings settings) { Validate.notNull(tagName); Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tagName); Tag tag = tags.get(tagName); if (tag == null) { tagName = settings.normalizeTag(tagName); Validate.notEmpty(tagName); tag = tags.get(tagName); if (tag == null) { tag = new Tag(tagName); tag.isBlock = false; }"
      },
      {
        "txt": "} return tag; } public static Tag valueOf(String tagName) { return valueOf(tagName, ParseSettings.preserveCase); } public boolean isBlock() { return isBlock; } public boolean formatAsBlock() {"
      },
      {
        "txt": "return formatAsBlock; } public boolean canContainBlock() { return isBlock; } public boolean isInline() { return !isBlock; } public boolean isData() { return !canContainInline && !isEmpty();"
      },
      {
        "txt": "} public boolean isEmpty() { return empty; } public boolean isSelfClosing() { return empty || selfClosing; } public boolean isKnownTag() { return tags.containsKey(tagName); }"
      },
      {
        "txt": "public static boolean isKnownTag(String tagName) { return tags.containsKey(tagName); } public boolean preserveWhitespace() { return preserveWhitespace; } public boolean isFormListed() { return formList; } public boolean isFormSubmittable() {"
      },
      {
        "txt": "return formSubmit; } Tag setSelfClosing() { selfClosing = true; return this; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Tag)) return false;"
      },
      {
        "txt": "Tag tag = (Tag) o; if (!tagName.equals(tag.tagName)) return false; if (canContainInline != tag.canContainInline) return false; if (empty != tag.empty) return false; if (formatAsBlock != tag.formatAsBlock) return false; if (isBlock != tag.isBlock) return false; if (preserveWhitespace != tag.preserveWhitespace) return false; if (selfClosing != tag.selfClosing) return false; if (formList != tag.formList) return false; return formSubmit == tag.formSubmit;"
      },
      {
        "txt": "} @Override public int hashCode() { int result = tagName.hashCode(); result = 31 * result + (isBlock ? 1 : 0); result = 31 * result + (formatAsBlock ? 1 : 0); result = 31 * result + (canContainInline ? 1 : 0); result = 31 * result + (empty ? 1 : 0); result = 31 * result + (selfClosing ? 1 : 0); result = 31 * result + (preserveWhitespace ? 1 : 0);"
      },
      {
        "txt": "result = 31 * result + (formList ? 1 : 0); result = 31 * result + (formSubmit ? 1 : 0); return result; } @Override public String toString() { return tagName; } private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\","
      },
      {
        "txt": "\"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\", \"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\", \"template\", \"article\", \"main\", \"svg\", \"math\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\","
      },
      {
        "txt": "\"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\", \"data\", \"bdi\", \"s\" }; private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\","
      },
      {
        "txt": "\"ins\", \"del\", \"s\" }; private static final String[] preserveWhitespaceTags = { \"pre\", \"plaintext\", \"title\", \"textarea\" }; private static final String[] formListedTags = { \"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\" }; private static final String[] formSubmitTags = { \"input\", \"keygen\", \"object\", \"select\", \"textarea\""
      },
      {
        "txt": "}; static { for (String tagName : blockTags) { Tag tag = new Tag(tagName); register(tag); } for (String tagName : inlineTags) { Tag tag = new Tag(tagName); tag.isBlock = false; tag.formatAsBlock = false;"
      },
      {
        "txt": "register(tag); } for (String tagName : emptyTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.canContainInline = false; tag.empty = true; } for (String tagName : formatAsInlineTags) { Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tag); tag.formatAsBlock = false; } for (String tagName : preserveWhitespaceTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.preserveWhitespace = true; } for (String tagName : formListedTags) { Tag tag = tags.get(tagName);"
      },
      {
        "txt": "Validate.notNull(tag); tag.formList = true; } for (String tagName : formSubmitTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formSubmit = true; } } private static void register(Tag tag) {"
      },
      {
        "txt": "tags.put(tag.tagName, tag); }"
      }
    ]
  },
  {
    "id": 2136,
    "file_path": "src/main/java/org/jsoup/parser/Tag.java",
    "start-bug-line": 43,
    "end-bug-line": 43,
    "bug": "",
    "fix": "public String normalName() { return normalName; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; import java.util.HashMap; import java.util.Map;"
      },
      {
        "txt": "public class Tag { private static final Map<String, Tag> tags = new HashMap<>(); // map of known tags private String tagName; private boolean isBlock = true; // block or inline private boolean formatAsBlock = true; // should be formatted as a block private boolean canContainInline = true; // only pcdata if not private boolean empty = false; // can hold nothing; e.g. img private boolean selfClosing = false; // can self close (<foo />). used for unknown tags that self close, without forcing them as empty. private boolean preserveWhitespace = false; // for pre, textarea, script etc private boolean formList = false; // a control that appears in forms: input, textarea, output etc"
      },
      {
        "txt": "private Tag(String tagName) { this.tagName = tagName; } public String getName() { return tagName; } <extra_id_0> public static Tag valueOf(String tagName, ParseSettings settings) { Validate.notNull(tagName); Tag tag = tags.get(tagName); if (tag == null) { tagName = settings.normalizeTag(tagName); Validate.notEmpty(tagName);"
      },
      {
        "txt": "tagName = settings.normalizeTag(tagName); Validate.notEmpty(tagName); tag = tags.get(tagName); if (tag == null) { tag = new Tag(tagName); tag.isBlock = false; } } return tag; }"
      },
      {
        "txt": "public static Tag valueOf(String tagName) { return valueOf(tagName, ParseSettings.preserveCase); } public boolean isBlock() { return isBlock; } public boolean formatAsBlock() { return formatAsBlock; } public boolean canContainBlock() {"
      },
      {
        "txt": "return isBlock; } public boolean isInline() { return !isBlock; } public boolean isData() { return !canContainInline && !isEmpty(); } public boolean isEmpty() { return empty;"
      },
      {
        "txt": "} public boolean isSelfClosing() { return empty || selfClosing; } public boolean isKnownTag() { return tags.containsKey(tagName); } public static boolean isKnownTag(String tagName) { return tags.containsKey(tagName); }"
      },
      {
        "txt": "public boolean preserveWhitespace() { return preserveWhitespace; } public boolean isFormListed() { return formList; } public boolean isFormSubmittable() { return formSubmit; } Tag setSelfClosing() {"
      },
      {
        "txt": "selfClosing = true; return this; } @Override public boolean equals(Object o) { if (this == o) return true; if (!(o instanceof Tag)) return false; Tag tag = (Tag) o; if (!tagName.equals(tag.tagName)) return false; if (canContainInline != tag.canContainInline) return false;"
      },
      {
        "txt": "if (empty != tag.empty) return false; if (formatAsBlock != tag.formatAsBlock) return false; if (isBlock != tag.isBlock) return false; if (preserveWhitespace != tag.preserveWhitespace) return false; if (selfClosing != tag.selfClosing) return false; if (formList != tag.formList) return false; return formSubmit == tag.formSubmit; } @Override public int hashCode() {"
      },
      {
        "txt": "int result = tagName.hashCode(); result = 31 * result + (isBlock ? 1 : 0); result = 31 * result + (formatAsBlock ? 1 : 0); result = 31 * result + (canContainInline ? 1 : 0); result = 31 * result + (empty ? 1 : 0); result = 31 * result + (selfClosing ? 1 : 0); result = 31 * result + (preserveWhitespace ? 1 : 0); result = 31 * result + (formList ? 1 : 0); result = 31 * result + (formSubmit ? 1 : 0); return result;"
      },
      {
        "txt": "} @Override public String toString() { return tagName; } private static final String[] blockTags = { \"html\", \"head\", \"body\", \"frameset\", \"script\", \"noscript\", \"style\", \"meta\", \"link\", \"title\", \"frame\", \"noframes\", \"section\", \"nav\", \"aside\", \"hgroup\", \"header\", \"footer\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"ul\", \"ol\", \"pre\", \"div\", \"blockquote\", \"hr\", \"address\", \"figure\", \"figcaption\", \"form\", \"fieldset\", \"ins\", \"del\", \"dl\", \"dt\", \"dd\", \"li\", \"table\", \"caption\", \"thead\", \"tfoot\", \"tbody\", \"colgroup\", \"col\", \"tr\", \"th\","
      },
      {
        "txt": "\"td\", \"video\", \"audio\", \"canvas\", \"details\", \"menu\", \"plaintext\", \"template\", \"article\", \"main\", \"svg\", \"math\" }; private static final String[] inlineTags = { \"object\", \"base\", \"font\", \"tt\", \"i\", \"b\", \"u\", \"big\", \"small\", \"em\", \"strong\", \"dfn\", \"code\", \"samp\", \"kbd\", \"var\", \"cite\", \"abbr\", \"time\", \"acronym\", \"mark\", \"ruby\", \"rt\", \"rp\", \"a\", \"img\", \"br\", \"wbr\", \"map\", \"q\", \"sub\", \"sup\", \"bdo\", \"iframe\", \"embed\", \"span\", \"input\", \"select\", \"textarea\", \"label\", \"button\", \"optgroup\", \"option\", \"legend\", \"datalist\", \"keygen\", \"output\", \"progress\", \"meter\", \"area\", \"param\", \"source\", \"track\", \"summary\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\", \"data\", \"bdi\", \"s\""
      },
      {
        "txt": "}; private static final String[] emptyTags = { \"meta\", \"link\", \"base\", \"frame\", \"img\", \"br\", \"wbr\", \"embed\", \"hr\", \"input\", \"keygen\", \"col\", \"command\", \"device\", \"area\", \"basefont\", \"bgsound\", \"menuitem\", \"param\", \"source\", \"track\" }; private static final String[] formatAsInlineTags = { \"title\", \"a\", \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"pre\", \"address\", \"li\", \"th\", \"td\", \"script\", \"style\", \"ins\", \"del\", \"s\" }; private static final String[] preserveWhitespaceTags = {"
      },
      {
        "txt": "\"pre\", \"plaintext\", \"title\", \"textarea\" }; private static final String[] formListedTags = { \"button\", \"fieldset\", \"input\", \"keygen\", \"object\", \"output\", \"select\", \"textarea\" }; private static final String[] formSubmitTags = { \"input\", \"keygen\", \"object\", \"select\", \"textarea\" }; static { for (String tagName : blockTags) {"
      },
      {
        "txt": "Tag tag = new Tag(tagName); register(tag); } for (String tagName : inlineTags) { Tag tag = new Tag(tagName); tag.isBlock = false; tag.formatAsBlock = false; register(tag); } for (String tagName : emptyTags) {"
      },
      {
        "txt": "Tag tag = tags.get(tagName); Validate.notNull(tag); tag.canContainInline = false; tag.empty = true; } for (String tagName : formatAsInlineTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formatAsBlock = false; }"
      },
      {
        "txt": "for (String tagName : preserveWhitespaceTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.preserveWhitespace = true; } for (String tagName : formListedTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formList = true; }"
      },
      {
        "txt": "for (String tagName : formSubmitTags) { Tag tag = tags.get(tagName); Validate.notNull(tag); tag.formSubmit = true; } } private static void register(Tag tag) { tags.put(tag.tagName, tag); }"
      }
    ]
  }
]
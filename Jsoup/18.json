[
  {
    "id": 1900,
    "file_path": "src/main/java/org/jsoup/parser/CharacterReader.java",
    "start-bug-line": 18,
    "end-bug-line": 18,
    "bug": "",
    "fix": "input = input.replaceAll(\"\\r\\n?\", \"\\n\"); // normalise carriage returns to newlines",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; CharacterReader cosumes tokens off a string. To replace the old TokenQueue. class CharacterReader {"
      },
      {
        "txt": "private final String input; private final int length; private int pos = 0; private int mark = 0; CharacterReader(String input) { Validate.notNull(input); <extra_id_0> this.input = input; this.length = input.length(); } int pos() { return pos; }"
      },
      {
        "txt": "return pos; } boolean isEmpty() { return pos >= length; } char current() { return isEmpty() ? EOF : input.charAt(pos); } char consume() { char val = isEmpty() ? EOF : input.charAt(pos);"
      },
      {
        "txt": "pos++; return val; } void unconsume() { pos--; } void advance() { pos++; } void mark() {"
      },
      {
        "txt": "mark = pos; } void rewindToMark() { pos = mark; } String consumeAsString() { return input.substring(pos, pos++); } String consumeTo(char c) { int offset = input.indexOf(c, pos);"
      },
      {
        "txt": "if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeTo(String seq) { int offset = input.indexOf(seq, pos);"
      },
      {
        "txt": "if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed; } else { return consumeToEnd(); } } String consumeToAny(char... seq) { int start = pos;"
      },
      {
        "txt": "OUTER: while (!isEmpty()) { char c = input.charAt(pos); for (char seek : seq) { if (seek == c) break OUTER; } pos++; } return pos > start ? input.substring(start, pos) : \"\"; }"
      },
      {
        "txt": "String consumeToEnd() { String data = input.substring(pos, input.length() - 1); pos = input.length(); return data; } String consumeLetterSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))"
      },
      {
        "txt": "pos++; else break; } return input.substring(start, pos); } String consumeHexSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos);"
      },
      {
        "txt": "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++; else break; } return input.substring(start, pos); } String consumeDigitSequence() { int start = pos; while (!isEmpty()) {"
      },
      {
        "txt": "char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; } return input.substring(start, pos); } boolean matches(char c) { return !isEmpty() && input.charAt(pos) == c;"
      },
      {
        "txt": "} boolean matches(String seq) { return input.startsWith(seq, pos); } boolean matchesIgnoreCase(String seq) { return input.regionMatches(true, pos, seq, 0, seq.length()); } boolean matchesAny(char... seq) { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); for (char seek : seq) { if (seek == c) return true; } return false; } boolean matchesLetter() { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); } boolean matchesDigit() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= '0' && c <= '9'); } boolean matchConsume(String seq) {"
      },
      {
        "txt": "if (matches(seq)) { pos += seq.length(); return true; } else { return false; } } boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { pos += seq.length();"
      },
      {
        "txt": "return true; } else { return false; } } boolean containsIgnoreCase(String seq) { String loScan = seq.toLowerCase(); String hiScan = seq.toUpperCase(); return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1); }"
      },
      {
        "txt": "@Override public String toString() { return input.substring(pos); }"
      }
    ]
  },
  {
    "id": 1901,
    "file_path": "src/main/java/org/jsoup/parser/CharacterReader.java",
    "start-bug-line": 99,
    "end-bug-line": 99,
    "bug": "String data = input.substring(pos, input.length() - 1);",
    "fix": "String data = input.substring(pos, input.length());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.Validate; CharacterReader cosumes tokens off a string. To replace the old TokenQueue. class CharacterReader { static final char EOF = (char) -1; private final String input; private final int length; private int pos = 0; private int mark = 0;"
      },
      {
        "txt": "CharacterReader(String input) { Validate.notNull(input); this.input = input; this.length = input.length(); } int pos() { return pos; } boolean isEmpty() { return pos >= length;"
      },
      {
        "txt": "} char current() { return isEmpty() ? EOF : input.charAt(pos); } char consume() { char val = isEmpty() ? EOF : input.charAt(pos); pos++; return val; } void unconsume() {"
      },
      {
        "txt": "pos--; } void advance() { pos++; } void mark() { mark = pos; } void rewindToMark() { pos = mark;"
      },
      {
        "txt": "} String consumeAsString() { return input.substring(pos, pos++); } String consumeTo(char c) { int offset = input.indexOf(c, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed;"
      },
      {
        "txt": "} else { return consumeToEnd(); } } String consumeTo(String seq) { int offset = input.indexOf(seq, pos); if (offset != -1) { String consumed = input.substring(pos, offset); pos += consumed.length(); return consumed;"
      },
      {
        "txt": "} else { return consumeToEnd(); } } String consumeToAny(char... seq) { int start = pos; OUTER: while (!isEmpty()) { char c = input.charAt(pos); for (char seek : seq) { if (seek == c)"
      },
      {
        "txt": "} pos++; } return pos > start ? input.substring(start, pos) : \"\"; } String consumeToEnd() { <extra_id_0> pos = input.length(); return data; } String consumeLetterSequence() { int start = pos; while (!isEmpty()) {"
      },
      {
        "txt": "int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z')) pos++; else break; } return input.substring(start, pos); }"
      },
      {
        "txt": "String consumeHexSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f')) pos++; else break; } return input.substring(start, pos);"
      },
      {
        "txt": "} String consumeDigitSequence() { int start = pos; while (!isEmpty()) { char c = input.charAt(pos); if (c >= '0' && c <= '9') pos++; else break; }"
      },
      {
        "txt": "return input.substring(start, pos); } boolean matches(char c) { return !isEmpty() && input.charAt(pos) == c; } boolean matches(String seq) { return input.startsWith(seq, pos); } boolean matchesIgnoreCase(String seq) { return input.regionMatches(true, pos, seq, 0, seq.length());"
      },
      {
        "txt": "} boolean matchesAny(char... seq) { if (isEmpty()) return false; char c = input.charAt(pos); for (char seek : seq) { if (seek == c) return true; } return false;"
      },
      {
        "txt": "} boolean matchesLetter() { if (isEmpty()) return false; char c = input.charAt(pos); return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'); } boolean matchesDigit() { if (isEmpty()) return false;"
      },
      {
        "txt": "char c = input.charAt(pos); return (c >= '0' && c <= '9'); } boolean matchConsume(String seq) { if (matches(seq)) { pos += seq.length(); return true; } else { return false; }"
      },
      {
        "txt": "} boolean matchConsumeIgnoreCase(String seq) { if (matchesIgnoreCase(seq)) { pos += seq.length(); return true; } else { return false; } } boolean containsIgnoreCase(String seq) {"
      },
      {
        "txt": "String loScan = seq.toLowerCase(); String hiScan = seq.toUpperCase(); return (input.indexOf(loScan, pos) > -1) || (input.indexOf(hiScan, pos) > -1); } @Override public String toString() { return input.substring(pos); }"
      }
    ]
  }
]
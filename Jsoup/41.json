[
  {
    "id": 1961,
    "file_path": "src/main/java/org/jsoup/nodes/Element.java",
    "start-bug-line": 1175,
    "end-bug-line": 1175,
    "bug": "return this == o;",
    "fix": "return tag.equals(element.tag);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.parser.Parser; import org.jsoup.parser.Tag; import org.jsoup.select.*; import java.util.*; import java.util.regex.Pattern;"
      },
      {
        "txt": "import java.util.regex.PatternSyntaxException; public class Element extends Node { private Tag tag; public Element(Tag tag, String baseUri, Attributes attributes) { super(baseUri, attributes); Validate.notNull(tag); this.tag = tag; } public Element(Tag tag, String baseUri) { this(tag, baseUri, new Attributes());"
      },
      {
        "txt": "} @Override public String nodeName() { return tag.getName(); } public String tagName() { return tag.getName(); } public Element tagName(String tagName) { Validate.notEmpty(tagName, \"Tag name must not be empty.\");"
      },
      {
        "txt": "tag = Tag.valueOf(tagName); return this; } public Tag tag() { return tag; } public boolean isBlock() { return tag.isBlock(); } public String id() {"
      },
      {
        "txt": "String id = attr(\"id\"); return id == null ? \"\" : id; } public Element attr(String attributeKey, String attributeValue) { super.attr(attributeKey, attributeValue); return this; } public Map<String, String> dataset() { return attributes.dataset(); }"
      },
      {
        "txt": "@Override public final Element parent() { return (Element) parentNode; } public Elements parents() { Elements parents = new Elements(); accumulateParents(this, parents); return parents; } private static void accumulateParents(Element el, Elements parents) {"
      },
      {
        "txt": "Element parent = el.parent(); if (parent != null && !parent.tagName().equals(\"#root\")) { parents.add(parent); accumulateParents(parent, parents); } } public Element child(int index) { return children().get(index); } public Elements children() {"
      },
      {
        "txt": "List<Element> elements = new ArrayList<Element>(childNodes.size()); for (Node node : childNodes) { if (node instanceof Element) elements.add((Element) node); } return new Elements(elements); } public List<TextNode> textNodes() { List<TextNode> textNodes = new ArrayList<TextNode>(); for (Node node : childNodes) {"
      },
      {
        "txt": "if (node instanceof TextNode) textNodes.add((TextNode) node); } return Collections.unmodifiableList(textNodes); } public List<DataNode> dataNodes() { List<DataNode> dataNodes = new ArrayList<DataNode>(); for (Node node : childNodes) { if (node instanceof DataNode) dataNodes.add((DataNode) node);"
      },
      {
        "txt": "} return Collections.unmodifiableList(dataNodes); } public Elements select(String cssQuery) { return Selector.select(cssQuery, this); } public Element appendChild(Node child) { Validate.notNull(child); reparentChild(child); childNodes.add(child);"
      },
      {
        "txt": "child.setSiblingIndex(childNodes.size() - 1); return this; } public Element prependChild(Node child) { Validate.notNull(child); addChildren(0, child); return this; } public Element insertChildren(int index, Collection<? extends Node> children) { Validate.notNull(children, \"Children collection to be inserted must not be null.\");"
      },
      {
        "txt": "int currentSize = childNodeSize(); if (index < 0) index += currentSize +1; // roll around Validate.isTrue(index >= 0 && index <= currentSize, \"Insert position out of bounds.\"); ArrayList<Node> nodes = new ArrayList<Node>(children); Node[] nodeArray = nodes.toArray(new Node[nodes.size()]); addChildren(index, nodeArray); return this; } public Element appendElement(String tagName) { Element child = new Element(Tag.valueOf(tagName), baseUri());"
      },
      {
        "txt": "appendChild(child); return child; } public Element prependElement(String tagName) { Element child = new Element(Tag.valueOf(tagName), baseUri()); prependChild(child); return child; } public Element appendText(String text) { TextNode node = new TextNode(text, baseUri());"
      },
      {
        "txt": "appendChild(node); return this; } public Element prependText(String text) { TextNode node = new TextNode(text, baseUri()); prependChild(node); return this; } public Element append(String html) { Validate.notNull(html);"
      },
      {
        "txt": "List<Node> nodes = Parser.parseFragment(html, this, baseUri()); addChildren(nodes.toArray(new Node[nodes.size()])); return this; } public Element prepend(String html) { Validate.notNull(html); List<Node> nodes = Parser.parseFragment(html, this, baseUri()); addChildren(0, nodes.toArray(new Node[nodes.size()])); return this; }"
      },
      {
        "txt": "@Override public Element before(String html) { return (Element) super.before(html); } @Override public Element before(Node node) { return (Element) super.before(node); } @Override public Element after(String html) {"
      },
      {
        "txt": "return (Element) super.after(html); } @Override public Element after(Node node) { return (Element) super.after(node); } public Element empty() { childNodes.clear(); return this; }"
      },
      {
        "txt": "@Override public Element wrap(String html) { return (Element) super.wrap(html); } public String cssSelector() { if (id().length() > 0) return \"#\" + id(); StringBuilder selector = new StringBuilder(tagName()); String classes = StringUtil.join(classNames(), \".\"); if (classes.length() > 0)"
      },
      {
        "txt": "selector.append('.').append(classes); if (parent() == null || parent() instanceof Document) // don't add Document to selector, as will always have a html node return selector.toString(); selector.insert(0, \" > \"); if (parent().select(selector.toString()).size() > 1) selector.append(String.format( \":nth-child(%d)\", elementSiblingIndex() + 1)); return parent().cssSelector() + selector.toString(); } public Elements siblingElements() {"
      },
      {
        "txt": "if (parentNode == null) return new Elements(0); List<Element> elements = parent().children(); Elements siblings = new Elements(elements.size() - 1); for (Element el: elements) if (el != this) siblings.add(el); return siblings; } public Element nextElementSibling() {"
      },
      {
        "txt": "if (parentNode == null) return null; List<Element> siblings = parent().children(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (siblings.size() > index+1) return siblings.get(index+1); else return null; } public Element previousElementSibling() {"
      },
      {
        "txt": "if (parentNode == null) return null; List<Element> siblings = parent().children(); Integer index = indexInList(this, siblings); Validate.notNull(index); if (index > 0) return siblings.get(index-1); else return null; } public Element firstElementSibling() {"
      },
      {
        "txt": "List<Element> siblings = parent().children(); return siblings.size() > 1 ? siblings.get(0) : null; } public Integer elementSiblingIndex() { if (parent() == null) return 0; return indexInList(this, parent().children()); } public Element lastElementSibling() { List<Element> siblings = parent().children(); return siblings.size() > 1 ? siblings.get(siblings.size() - 1) : null;"
      },
      {
        "txt": "} private static <E extends Element> Integer indexInList(Element search, List<E> elements) { Validate.notNull(search); Validate.notNull(elements); for (int i = 0; i < elements.size(); i++) { E element = elements.get(i); if (element.equals(search)) return i; } return null;"
      },
      {
        "txt": "} public Elements getElementsByTag(String tagName) { Validate.notEmpty(tagName); tagName = tagName.toLowerCase().trim(); return Collector.collect(new Evaluator.Tag(tagName), this); } public Element getElementById(String id) { Validate.notEmpty(id); Elements elements = Collector.collect(new Evaluator.Id(id), this); if (elements.size() > 0)"
      },
      {
        "txt": "return elements.get(0); else return null; } public Elements getElementsByClass(String className) { Validate.notEmpty(className); return Collector.collect(new Evaluator.Class(className), this); } public Elements getElementsByAttribute(String key) { Validate.notEmpty(key);"
      },
      {
        "txt": "key = key.trim().toLowerCase(); return Collector.collect(new Evaluator.Attribute(key), this); } public Elements getElementsByAttributeStarting(String keyPrefix) { Validate.notEmpty(keyPrefix); keyPrefix = keyPrefix.trim().toLowerCase(); return Collector.collect(new Evaluator.AttributeStarting(keyPrefix), this); } public Elements getElementsByAttributeValue(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValue(key, value), this);"
      },
      {
        "txt": "} public Elements getElementsByAttributeValueNot(String key, String value) { return Collector.collect(new Evaluator.AttributeWithValueNot(key, value), this); } public Elements getElementsByAttributeValueStarting(String key, String valuePrefix) { return Collector.collect(new Evaluator.AttributeWithValueStarting(key, valuePrefix), this); } public Elements getElementsByAttributeValueEnding(String key, String valueSuffix) { return Collector.collect(new Evaluator.AttributeWithValueEnding(key, valueSuffix), this); }"
      },
      {
        "txt": "public Elements getElementsByAttributeValueContaining(String key, String match) { return Collector.collect(new Evaluator.AttributeWithValueContaining(key, match), this); } public Elements getElementsByAttributeValueMatching(String key, Pattern pattern) { return Collector.collect(new Evaluator.AttributeWithValueMatching(key, pattern), this); } public Elements getElementsByAttributeValueMatching(String key, String regex) { Pattern pattern; try { pattern = Pattern.compile(regex);"
      },
      {
        "txt": "} catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsByAttributeValueMatching(key, pattern); } public Elements getElementsByIndexLessThan(int index) { return Collector.collect(new Evaluator.IndexLessThan(index), this); } public Elements getElementsByIndexGreaterThan(int index) { return Collector.collect(new Evaluator.IndexGreaterThan(index), this);"
      },
      {
        "txt": "} public Elements getElementsByIndexEquals(int index) { return Collector.collect(new Evaluator.IndexEquals(index), this); } public Elements getElementsContainingText(String searchText) { return Collector.collect(new Evaluator.ContainsText(searchText), this); } public Elements getElementsContainingOwnText(String searchText) { return Collector.collect(new Evaluator.ContainsOwnText(searchText), this); }"
      },
      {
        "txt": "public Elements getElementsMatchingText(Pattern pattern) { return Collector.collect(new Evaluator.Matches(pattern), this); } public Elements getElementsMatchingText(String regex) { Pattern pattern; try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) { throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); }"
      },
      {
        "txt": "return getElementsMatchingText(pattern); } public Elements getElementsMatchingOwnText(Pattern pattern) { return Collector.collect(new Evaluator.MatchesOwn(pattern), this); } public Elements getElementsMatchingOwnText(String regex) { Pattern pattern; try { pattern = Pattern.compile(regex); } catch (PatternSyntaxException e) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Pattern syntax error: \" + regex, e); } return getElementsMatchingOwnText(pattern); } public Elements getAllElements() { return Collector.collect(new Evaluator.AllElements(), this); } public String text() { final StringBuilder accum = new StringBuilder(); new NodeTraversor(new NodeVisitor() {"
      },
      {
        "txt": "public void head(Node node, int depth) { if (node instanceof TextNode) { TextNode textNode = (TextNode) node; appendNormalisedText(accum, textNode); } else if (node instanceof Element) { Element element = (Element) node; if (accum.length() > 0 && (element.isBlock() || element.tag.getName().equals(\"br\")) && !TextNode.lastCharIsWhitespace(accum)) accum.append(\" \");"
      },
      {
        "txt": "} } public void tail(Node node, int depth) { } }).traverse(this); return accum.toString().trim(); } public String ownText() { StringBuilder sb = new StringBuilder(); ownText(sb);"
      },
      {
        "txt": "return sb.toString().trim(); } private void ownText(StringBuilder accum) { for (Node child : childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child; appendNormalisedText(accum, textNode); } else if (child instanceof Element) { appendWhitespaceIfBr((Element) child, accum); }"
      },
      {
        "txt": "} } private static void appendNormalisedText(StringBuilder accum, TextNode textNode) { String text = textNode.getWholeText(); if (preserveWhitespace(textNode.parentNode)) accum.append(text); else StringUtil.appendNormalisedWhitespace(accum, text, TextNode.lastCharIsWhitespace(accum)); } private static void appendWhitespaceIfBr(Element element, StringBuilder accum) {"
      },
      {
        "txt": "if (element.tag.getName().equals(\"br\") && !TextNode.lastCharIsWhitespace(accum)) accum.append(\" \"); } static boolean preserveWhitespace(Node node) { if (node != null && node instanceof Element) { Element element = (Element) node; return element.tag.preserveWhitespace() || element.parent() != null && element.parent().tag.preserveWhitespace(); } return false;"
      },
      {
        "txt": "} public Element text(String text) { Validate.notNull(text); empty(); TextNode textNode = new TextNode(text, baseUri); appendChild(textNode); return this; } Test if this element has any text content (that is not just whitespace). @return true if element has non-blank text content."
      },
      {
        "txt": "public boolean hasText() { for (Node child: childNodes) { if (child instanceof TextNode) { TextNode textNode = (TextNode) child; if (!textNode.isBlank()) return true; } else if (child instanceof Element) { Element el = (Element) child; if (el.hasText()) return true;"
      },
      {
        "txt": "} } return false; } public String data() { StringBuilder sb = new StringBuilder(); for (Node childNode : childNodes) { if (childNode instanceof DataNode) { DataNode data = (DataNode) childNode; sb.append(data.getWholeData());"
      },
      {
        "txt": "} else if (childNode instanceof Element) { Element element = (Element) childNode; String elementData = element.data(); sb.append(elementData); } } return sb.toString(); } public String className() { return attr(\"class\").trim();"
      },
      {
        "txt": "} public Set<String> classNames() { String[] names = className().split(\"\\\\s+\"); Set<String> classNames = new LinkedHashSet<String>(Arrays.asList(names)); classNames.remove(\"\"); // if classNames() was empty, would include an empty class return classNames; } Set the element's {@code class} attribute to the supplied class names. @param classNames set of classes @return this element, for chaining"
      },
      {
        "txt": "public Element classNames(Set<String> classNames) { Validate.notNull(classNames); attributes.put(\"class\", StringUtil.join(classNames, \" \")); return this; } public boolean hasClass(String className) { Set<String> classNames = classNames(); for (String name : classNames) { if (className.equalsIgnoreCase(name)) return true;"
      },
      {
        "txt": "} return false; } Add a class name to this element's {@code class} attribute. @param className class name to add @return this element public Element addClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.add(className);"
      },
      {
        "txt": "classNames(classes); return this; } Remove a class name from this element's {@code class} attribute. @param className class name to remove @return this element public Element removeClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); classes.remove(className);"
      },
      {
        "txt": "classNames(classes); return this; } Toggle a class name on this element's {@code class} attribute: if present, remove it; otherwise add it. @param className class name to toggle @return this element public Element toggleClass(String className) { Validate.notNull(className); Set<String> classes = classNames(); if (classes.contains(className))"
      },
      {
        "txt": "classes.remove(className); else classes.add(className); classNames(classes); return this; } public String val() { if (tagName().equals(\"textarea\")) return text(); else"
      },
      {
        "txt": "return attr(\"value\"); } public Element val(String value) { if (tagName().equals(\"textarea\")) text(value); else attr(\"value\", value); return this; } void outerHtmlHead(StringBuilder accum, int depth, Document.OutputSettings out) {"
      },
      {
        "txt": "if (accum.length() > 0 && out.prettyPrint() && (tag.formatAsBlock() || (parent() != null && parent().tag().formatAsBlock()) || out.outline()) ) indent(accum, depth, out); accum .append(\"<\") .append(tagName()); attributes.html(accum, out); if (childNodes.isEmpty() && tag.isSelfClosing()) { if (out.syntax() == Document.OutputSettings.Syntax.html && tag.isEmpty()) accum.append('>'); else"
      },
      {
        "txt": "accum.append(\" />\"); // <img> in html, <img /> in xml } else accum.append(\">\"); } void outerHtmlTail(StringBuilder accum, int depth, Document.OutputSettings out) { if (!(childNodes.isEmpty() && tag.isSelfClosing())) { if (out.prettyPrint() && (!childNodes.isEmpty() && ( tag.formatAsBlock() || (out.outline() && (childNodes.size()>1 || (childNodes.size()==1 && !(childNodes.get(0) instanceof TextNode)))) )))"
      },
      {
        "txt": "indent(accum, depth, out); accum.append(\"</\").append(tagName()).append(\">\"); } } public String html() { StringBuilder accum = new StringBuilder(); html(accum); return getOutputSettings().prettyPrint() ? accum.toString().trim() : accum.toString(); } private void html(StringBuilder accum) {"
      },
      {
        "txt": "for (Node node : childNodes) node.outerHtml(accum); } public Element html(String html) { empty(); append(html); return this; } public String toString() { return outerHtml();"
      },
      {
        "txt": "@Override public boolean equals(Object o) { if (this == o) return true; if (o == null || getClass() != o.getClass()) return false; if (!super.equals(o)) return false; Element element = (Element) o; <extra_id_0> } @Override public int hashCode() { int result = super.hashCode(); result = 31 * result + (tag != null ? tag.hashCode() : 0); return result;"
      },
      {
        "txt": "result = 31 * result + (tag != null ? tag.hashCode() : 0); return result; } @Override public Element clone() { return (Element) super.clone(); }"
      }
    ]
  }
]
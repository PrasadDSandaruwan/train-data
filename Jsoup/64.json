[
  {
    "id": 2021,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1489,
    "end-bug-line": 1489,
    "bug": "tb.insert(startTag);",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.nodes.*; import java.util.ArrayList;"
      },
      {
        "txt": "enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType("
      },
      {
        "txt": "tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks); tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true;"
      },
      {
        "txt": "} }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } },"
      },
      {
        "txt": "BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head); tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.processStartTag(\"head\"); return tb.process(t); } return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this);"
      },
      {
        "txt": "return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el);"
      },
      {
        "txt": "} else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb); } else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) {"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else {"
      },
      {
        "txt": "tb.error(this); return false; } break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "tb.processEndTag(\"head\"); return tb.process(t); } }, InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true;"
      },
      {
        "txt": "} }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) { return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) {"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this); Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { anythingElse(t, tb); } } else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false;"
      },
      {
        "txt": "} } else { anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t);"
      },
      {
        "txt": "} }, InBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else { tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; }"
      },
      {
        "txt": "case Comment: { tb.insert(t.asComment()); break; } case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this); tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); }"
      },
      {
        "txt": "} tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a); } else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) {"
      },
      {
        "txt": "Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\");"
      },
      {
        "txt": "} tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this); Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) {"
      },
      {
        "txt": "if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } } } else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) {"
      },
      {
        "txt": "return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null) second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); }"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) {"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; }"
      },
      {
        "txt": "if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true); } else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) {"
      },
      {
        "txt": "tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "} else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\");"
      },
      {
        "txt": "tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el);"
      },
      {
        "txt": "} else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this); tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false); } else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag); if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) {"
      },
      {
        "txt": "tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false); } else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) {"
      },
      {
        "txt": "tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\"); if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\");"
      },
      {
        "txt": "String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt)); Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\");"
      },
      {
        "txt": "tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\"); } else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text);"
      },
      {
        "txt": "} else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb);"
      },
      {
        "txt": "} else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else"
      },
      {
        "txt": "tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) {"
      },
      {
        "txt": "tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag); } } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false; } else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) { Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false; } else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) { commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; }"
      },
      {
        "txt": "} if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl); return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node))"
      },
      {
        "txt": "node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue; } else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement;"
      },
      {
        "txt": "if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove(); node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove(); commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) {"
      },
      {
        "txt": "adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl); tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this);"
      },
      {
        "txt": "return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) {"
      },
      {
        "txt": "if (!tb.inListItemScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) {"
      },
      {
        "txt": "if (!tb.inScope(\"body\")) { tb.error(this); return false; } else { tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag);"
      },
      {
        "txt": "} else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) { tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) { return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\");"
      },
      {
        "txt": "return false; } else { return anyOtherEndTag(t, tb); } break; case EOF: break; } return true; }"
      },
      {
        "txt": "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = t.asEndTag().name(); // matches with case sensitivity if enabled ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name);"
      },
      {
        "txt": "break; } else { if (tb.isSpecial(node)) { tb.error(this); return false; } } } return true; }"
      },
      {
        "txt": "}, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); } return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t); } else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) { tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\"); return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this); boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) {"
      },
      {
        "txt": "if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag); } } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else {"
      },
      {
        "txt": "tb.insertForm(startTag, false); } } else { return anythingElse(t, tb); } return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing }"
      },
      {
        "txt": "return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else {"
      },
      {
        "txt": "processed = tb.process(t, InBody); } return processed; } }, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter();"
      },
      {
        "txt": "if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) {"
      },
      {
        "txt": "if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else"
      },
      {
        "txt": "tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); } tb.transition(tb.originalState()); return tb.process(t); } return true; } },"
      },
      {
        "txt": "InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags();"
      },
      {
        "txt": "if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker(); tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\"))"
      },
      {
        "txt": ") { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed) return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "return tb.process(t, InBody); } return true; } }, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true;"
      },
      {
        "txt": "} switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag();"
      },
      {
        "txt": "switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\": tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break;"
      },
      {
        "txt": "case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag case tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); }"
      },
      {
        "txt": "} else return anythingElse(t, tb); break; case EOF: if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } },"
      },
      {
        "txt": "InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag:"
      },
      {
        "txt": "Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable);"
      },
      {
        "txt": "} } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) { tb.error(this); return false; } else return anythingElse(t, tb); break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext();"
      },
      {
        "txt": "tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) {"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext(); tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; }"
      },
      {
        "txt": "tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) { return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; }"
      },
      {
        "txt": "tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t);"
      },
      {
        "txt": "else return false; } }, InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \"td\", \"th\")) {"
      },
      {
        "txt": "if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InRow); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) { tb.error(this); return false; } else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb);"
      },
      {
        "txt": "return tb.process(t); } else { return anythingElse(t, tb); } } else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false;"
      },
      {
        "txt": "} closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody);"
      },
      {
        "txt": "} private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\"); else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else { tb.insert(c); } break;"
      },
      {
        "txt": "case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\"))"
      },
      {
        "txt": "return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\"); } else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start);"
      },
      {
        "txt": "} else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) {"
      },
      {
        "txt": "case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name);"
      },
      {
        "txt": "tb.resetInsertionMode(); } break; default: return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this);"
      },
      {
        "txt": "break; default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; }"
      },
      {
        "txt": "}, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) {"
      },
      {
        "txt": "tb.processEndTag(\"select\"); return (tb.process(t)); } else return false; } else { return tb.process(t, InSelect); } } }, AfterBody {"
      },
      {
        "txt": "boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) { tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody);"
      },
      {
        "txt": "} else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false; } else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this);"
      },
      {
        "txt": "tb.transition(InBody); return tb.process(t); } return true; } }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter());"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody);"
      },
      {
        "txt": "case \"frameset\": tb.insert(start); break; case \"frame\": tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this);"
      },
      {
        "txt": "return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset);"
      },
      {
        "txt": "} } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) { tb.error(this); return true; } } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment());"
      },
      {
        "txt": "} else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); return false; } return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) {"
      },
      {
        "txt": "return tb.process(t, InHead); } else { tb.error(this); return false; } return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return true; } }; private static String nullString = String.valueOf('\\u0000'); abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); }"
      },
      {
        "txt": "return false; } private static boolean isWhitespace(String data) { for (int i = 0; i < data.length(); i++) { char c = data.charAt(i); if (!StringUtil.isWhitespace(c)) return false; } return true; }"
      },
      {
        "txt": "tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text); tb.insert(startTag); } private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { <extra_id_0> tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); } private static final class Constants { private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"};"
      },
      {
        "txt": "private static final class Constants { private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"}; private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; private static final String[] DdDt = new String[]{\"dd\", \"dt\"}; private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"};"
      },
      {
        "txt": "private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"}; private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"};"
      },
      {
        "txt": "private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; }"
      }
    ]
  },
  {
    "id": 2022,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilderState.java",
    "start-bug-line": 1493,
    "end-bug-line": 1493,
    "bug": "",
    "fix": "tb.insert(startTag);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.nodes.*; import java.util.ArrayList; enum HtmlTreeBuilderState { Initial { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) {"
      },
      {
        "txt": "return true; // ignore whitespace } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { Token.Doctype d = t.asDoctype(); DocumentType doctype = new DocumentType( tb.settings.normalizeTag(d.getName()), d.getPubSysKey(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri()); tb.getDocument().appendChild(doctype); if (d.isForceQuirks()) tb.getDocument().quirksMode(Document.QuirksMode.quirks);"
      },
      {
        "txt": "tb.transition(BeforeHtml); } else { tb.transition(BeforeHtml); return tb.process(t); // re-process token } return true; } }, BeforeHtml { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isDoctype()) { tb.error(this); return false; } else if (t.isComment()) { tb.insert(t.asComment()); } else if (isWhitespace(t)) { return true; // ignore whitespace } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { tb.insert(t.asStartTag()); tb.transition(BeforeHead);"
      },
      {
        "txt": "} else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { return anythingElse(t, tb); } else if (t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.insertStartTag(\"html\"); tb.transition(BeforeHead); return tb.process(t); } }, BeforeHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return true;"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return InBody.process(t, tb); // does not transition } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"head\")) { Element head = tb.insert(t.asStartTag()); tb.setHeadElement(head);"
      },
      {
        "txt": "tb.transition(InHead); } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().normalName(), \"head\", \"body\", \"html\", \"br\"))) { tb.processStartTag(\"head\"); return tb.process(t); } else if (t.isEndTag()) { tb.error(this); return false; } else { tb.processStartTag(\"head\"); return tb.process(t);"
      },
      {
        "txt": "} return true; } }, InHead { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; }"
      },
      {
        "txt": "switch (t.type) { case Comment: tb.insert(t.asComment()); break; case Doctype: tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName();"
      },
      {
        "txt": "if (name.equals(\"html\")) { return InBody.process(t, tb); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"command\", \"link\")) { Element el = tb.insertEmpty(start); if (name.equals(\"base\") && el.hasAttr(\"href\")) tb.maybeSetBaseUri(el); } else if (name.equals(\"meta\")) { Element meta = tb.insertEmpty(start); } else if (name.equals(\"title\")) { handleRcData(start, tb);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"noframes\", \"style\")) { handleRawtext(start, tb); } else if (name.equals(\"noscript\")) { tb.insert(start); tb.transition(InHeadNoscript); } else if (name.equals(\"script\")) { tb.tokeniser.transition(TokeniserState.ScriptData); tb.markInsertionMode(); tb.transition(Text); tb.insert(start);"
      },
      {
        "txt": "} else if (name.equals(\"head\")) { tb.error(this); return false; } else { return anythingElse(t, tb); } break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName();"
      },
      {
        "txt": "if (name.equals(\"head\")) { tb.pop(); tb.transition(AfterHead); } else if (StringUtil.in(name, \"body\", \"html\", \"br\")) { return anythingElse(t, tb); } else { tb.error(this); return false; } break;"
      },
      {
        "txt": "default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) { tb.processEndTag(\"head\"); return tb.process(t); } },"
      },
      {
        "txt": "InHeadNoscript { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"noscript\")) { tb.pop(); tb.transition(InHead); } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(),"
      },
      {
        "txt": "\"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"style\"))) { return tb.process(t, InHead); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"br\")) { return anythingElse(t, tb); } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"head\", \"noscript\")) || t.isEndTag()) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); tb.insert(new Token.Character().data(t.toString())); return true; } }, AfterHead { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (name.equals(\"body\")) { tb.insert(startTag); tb.framesetOk(false); tb.transition(InBody); } else if (name.equals(\"frameset\")) { tb.insert(startTag); tb.transition(InFrameset); } else if (StringUtil.in(name, \"base\", \"basefont\", \"bgsound\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\")) { tb.error(this);"
      },
      {
        "txt": "Element head = tb.getHeadElement(); tb.push(head); tb.process(t, InHead); tb.removeFromStack(head); } else if (name.equals(\"head\")) { tb.error(this); return false; } else { anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isEndTag()) { if (StringUtil.in(t.asEndTag().normalName(), \"body\", \"html\")) { anythingElse(t, tb); } else { tb.error(this); return false; } } else { anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.processStartTag(\"body\"); tb.framesetOk(true); return tb.process(t); } }, InBody { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "switch (t.type) { case Character: { Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else if (tb.framesetOk() && isWhitespace(c)) { // don't check if whitespace if frames already closed tb.reconstructFormattingElements(); tb.insert(c); } else {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(c); tb.framesetOk(false); } break; } case Comment: { tb.insert(t.asComment()); break; }"
      },
      {
        "txt": "case Doctype: { tb.error(this); return false; } case StartTag: Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"a\")) { if (tb.getActiveFormattingElement(\"a\") != null) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"a\"); Element remainingA = tb.getFromStack(\"a\"); if (remainingA != null) { tb.removeFromActiveFormattingElements(remainingA); tb.removeFromStack(remainingA); } } tb.reconstructFormattingElements(); Element a = tb.insert(startTag); tb.pushActiveFormattingElements(a);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.InBodyStartEmptyFormatters)) { tb.reconstructFormattingElements(); tb.insertEmpty(startTag); tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartPClosers)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"span\")) {"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"li\")) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (el.nodeName().equals(\"li\")) { tb.processEndTag(\"li\"); break;"
      },
      {
        "txt": "} if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers)) break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"html\")) { tb.error(this);"
      },
      {
        "txt": "Element html = tb.getStack().get(0); for (Attribute attribute : startTag.getAttributes()) { if (!html.hasAttr(attribute.getKey())) html.attributes().put(attribute); } } else if (StringUtil.inSorted(name, Constants.InBodyStartToHead)) { return tb.process(t, InHead); } else if (name.equals(\"body\")) { tb.error(this); ArrayList<Element> stack = tb.getStack();"
      },
      {
        "txt": "if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else { tb.framesetOk(false); Element body = stack.get(1); for (Attribute attribute : startTag.getAttributes()) { if (!body.hasAttr(attribute.getKey())) body.attributes().put(attribute); } }"
      },
      {
        "txt": "} else if (name.equals(\"frameset\")) { tb.error(this); ArrayList<Element> stack = tb.getStack(); if (stack.size() == 1 || (stack.size() > 2 && !stack.get(1).nodeName().equals(\"body\"))) { return false; // ignore } else if (!tb.framesetOk()) { return false; // ignore frameset } else { Element second = stack.get(1); if (second.parent() != null)"
      },
      {
        "txt": "second.remove(); while (stack.size() > 1) stack.remove(stack.size()-1); tb.insert(startTag); tb.transition(InFrameset); } } else if (StringUtil.inSorted(name, Constants.Headings)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "if (StringUtil.inSorted(tb.currentElement().nodeName(), Constants.Headings)) { tb.error(this); tb.pop(); } tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartPreListing)) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } else if (name.equals(\"form\")) { if (tb.getFormElement() != null) { tb.error(this); return false; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertForm(startTag, true);"
      },
      {
        "txt": "} else if (StringUtil.inSorted(name, Constants.DdDt)) { tb.framesetOk(false); ArrayList<Element> stack = tb.getStack(); for (int i = stack.size() - 1; i > 0; i--) { Element el = stack.get(i); if (StringUtil.inSorted(el.nodeName(), Constants.DdDt)) { tb.processEndTag(el.nodeName()); break; } if (tb.isSpecial(el) && !StringUtil.inSorted(el.nodeName(), Constants.InBodyStartLiBreakers))"
      },
      {
        "txt": "break; } if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); } else if (name.equals(\"plaintext\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.insert(startTag); tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out } else if (name.equals(\"button\")) { if (tb.inButtonScope(\"button\")) { tb.error(this); tb.processEndTag(\"button\"); tb.process(startTag); } else { tb.reconstructFormattingElements(); tb.insert(startTag);"
      },
      {
        "txt": "tb.framesetOk(false); } } else if (StringUtil.inSorted(name, Constants.Formatters)) { tb.reconstructFormattingElements(); Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (name.equals(\"nobr\")) { tb.reconstructFormattingElements(); if (tb.inScope(\"nobr\")) { tb.error(this);"
      },
      {
        "txt": "tb.processEndTag(\"nobr\"); tb.reconstructFormattingElements(); } Element el = tb.insert(startTag); tb.pushActiveFormattingElements(el); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { tb.reconstructFormattingElements(); tb.insert(startTag); tb.insertMarkerToFormattingElements(); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"table\")) { if (tb.getDocument().quirksMode() != Document.QuirksMode.quirks && tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insert(startTag); tb.framesetOk(false); tb.transition(InTable); } else if (name.equals(\"input\")) { tb.reconstructFormattingElements(); Element el = tb.insertEmpty(startTag);"
      },
      {
        "txt": "if (!el.attr(\"type\").equalsIgnoreCase(\"hidden\")) tb.framesetOk(false); } else if (StringUtil.inSorted(name, Constants.InBodyStartMedia)) { tb.insertEmpty(startTag); } else if (name.equals(\"hr\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); } tb.insertEmpty(startTag); tb.framesetOk(false);"
      },
      {
        "txt": "} else if (name.equals(\"image\")) { if (tb.getFromStack(\"svg\") == null) return tb.process(startTag.name(\"img\")); // change <image> to <img>, unless in svg else tb.insert(startTag); } else if (name.equals(\"isindex\")) { tb.error(this); if (tb.getFormElement() != null) return false; tb.processStartTag(\"form\");"
      },
      {
        "txt": "if (startTag.attributes.hasKey(\"action\")) { Element form = tb.getFormElement(); form.attr(\"action\", startTag.attributes.get(\"action\")); } tb.processStartTag(\"hr\"); tb.processStartTag(\"label\"); String prompt = startTag.attributes.hasKey(\"prompt\") ? startTag.attributes.get(\"prompt\") : \"This is a searchable index. Enter search keywords: \"; tb.process(new Token.Character().data(prompt));"
      },
      {
        "txt": "Attributes inputAttribs = new Attributes(); for (Attribute attr : startTag.attributes) { if (!StringUtil.inSorted(attr.getKey(), Constants.InBodyStartInputAttribs)) inputAttribs.put(attr); } inputAttribs.put(\"name\", \"isindex\"); tb.processStartTag(\"input\", inputAttribs); tb.processEndTag(\"label\"); tb.processStartTag(\"hr\"); tb.processEndTag(\"form\");"
      },
      {
        "txt": "} else if (name.equals(\"textarea\")) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.framesetOk(false); tb.transition(Text); } else if (name.equals(\"xmp\")) { if (tb.inButtonScope(\"p\")) { tb.processEndTag(\"p\"); }"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"iframe\")) { tb.framesetOk(false); handleRawtext(startTag, tb); } else if (name.equals(\"noembed\")) { handleRawtext(startTag, tb); } else if (name.equals(\"select\")) { tb.reconstructFormattingElements();"
      },
      {
        "txt": "tb.insert(startTag); tb.framesetOk(false); HtmlTreeBuilderState state = tb.state(); if (state.equals(InTable) || state.equals(InCaption) || state.equals(InTableBody) || state.equals(InRow) || state.equals(InCell)) tb.transition(InSelectInTable); else tb.transition(InSelect); } else if (StringUtil.inSorted(name, Constants.InBodyStartOptions)) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartRuby)) { if (tb.inScope(\"ruby\")) { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"ruby\")) { tb.error(this); tb.popStackToBefore(\"ruby\"); // i.e. close up to but not include name } tb.insert(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"math\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (name.equals(\"svg\")) { tb.reconstructFormattingElements(); tb.insert(startTag); } else if (StringUtil.inSorted(name, Constants.InBodyStartDrop)) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.reconstructFormattingElements(); tb.insert(startTag); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.inSorted(name, Constants.InBodyEndAdoptionFormatters)) { for (int i = 0; i < 8; i++) {"
      },
      {
        "txt": "Element formatEl = tb.getActiveFormattingElement(name); if (formatEl == null) return anyOtherEndTag(t, tb); else if (!tb.onStack(formatEl)) { tb.error(this); tb.removeFromActiveFormattingElements(formatEl); return true; } else if (!tb.inScope(formatEl.nodeName())) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (tb.currentElement() != formatEl) tb.error(this); Element furthestBlock = null; Element commonAncestor = null; boolean seenFormattingElement = false; ArrayList<Element> stack = tb.getStack(); final int stackSize = stack.size(); for (int si = 0; si < stackSize && si < 64; si++) { Element el = stack.get(si); if (el == formatEl) {"
      },
      {
        "txt": "commonAncestor = stack.get(si - 1); seenFormattingElement = true; } else if (seenFormattingElement && tb.isSpecial(el)) { furthestBlock = el; break; } } if (furthestBlock == null) { tb.popStackToClose(formatEl.nodeName()); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "return true; } Element node = furthestBlock; Element lastNode = furthestBlock; for (int j = 0; j < 3; j++) { if (tb.onStack(node)) node = tb.aboveOnStack(node); if (!tb.isInActiveFormattingElements(node)) { // note no bookmark check tb.removeFromStack(node); continue;"
      },
      {
        "txt": "} else if (node == formatEl) break; Element replacement = new Element(Tag.valueOf(node.nodeName(), ParseSettings.preserveCase), tb.getBaseUri()); tb.replaceActiveFormattingElement(node, replacement); tb.replaceOnStack(node, replacement); node = replacement; if (lastNode == furthestBlock) { } if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "node.appendChild(lastNode); lastNode = node; } if (StringUtil.inSorted(commonAncestor.nodeName(), Constants.InBodyEndTableFosters)) { if (lastNode.parent() != null) lastNode.remove(); tb.insertInFosterParent(lastNode); } else { if (lastNode.parent() != null) lastNode.remove();"
      },
      {
        "txt": "commonAncestor.appendChild(lastNode); } Element adopter = new Element(formatEl.tag(), tb.getBaseUri()); adopter.attributes().addAll(formatEl.attributes()); Node[] childNodes = furthestBlock.childNodes().toArray(new Node[furthestBlock.childNodeSize()]); for (Node childNode : childNodes) { adopter.appendChild(childNode); // append will reparent. thus the clone to avoid concurrent mod. } furthestBlock.appendChild(adopter); tb.removeFromActiveFormattingElements(formatEl);"
      },
      {
        "txt": "tb.removeFromStack(formatEl); tb.insertOnStackAfter(furthestBlock, adopter); } } else if (StringUtil.inSorted(name, Constants.InBodyEndClosers)) { if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name))"
      },
      {
        "txt": "tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"span\")) { return anyOtherEndTag(t, tb); } else if (name.equals(\"li\")) { if (!tb.inListItemScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (name.equals(\"body\")) { if (!tb.inScope(\"body\")) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.transition(AfterBody); } } else if (name.equals(\"html\")) { boolean notIgnored = tb.processEndTag(\"body\"); if (notIgnored) return tb.process(endTag); } else if (name.equals(\"form\")) { Element currentForm = tb.getFormElement(); tb.setFormElement(null); if (currentForm == null || !tb.inScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.removeFromStack(currentForm); } } else if (name.equals(\"p\")) { if (!tb.inButtonScope(name)) {"
      },
      {
        "txt": "tb.error(this); tb.processStartTag(name); // if no p to close, creates an empty <p></p> return tb.process(endTag); } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.DdDt)) {"
      },
      {
        "txt": "if (!tb.inScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); } } else if (StringUtil.inSorted(name, Constants.Headings)) {"
      },
      {
        "txt": "if (!tb.inScope(Constants.Headings)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(name); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(Constants.Headings); } } else if (name.equals(\"sarcasm\")) {"
      },
      {
        "txt": "return anyOtherEndTag(t, tb); } else if (StringUtil.inSorted(name, Constants.InBodyStartApplets)) { if (!tb.inScope(\"name\")) { if (!tb.inScope(name)) { tb.error(this); return false; } tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this);"
      },
      {
        "txt": "tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); } } else if (name.equals(\"br\")) { tb.error(this); tb.processStartTag(\"br\"); return false; } else { return anyOtherEndTag(t, tb); }"
      },
      {
        "txt": "break; case EOF: break; } return true; } boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb) { String name = t.asEndTag().name(); // matches with case sensitivity if enabled ArrayList<Element> stack = tb.getStack(); for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element node = stack.get(pos); if (node.nodeName().equals(name)) { tb.generateImpliedEndTags(name); if (!name.equals(tb.currentElement().nodeName())) tb.error(this); tb.popStackToClose(name); break; } else { if (tb.isSpecial(node)) { tb.error(this);"
      },
      {
        "txt": "return false; } } } return true; } }, Text { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) {"
      },
      {
        "txt": "tb.insert(t.asCharacter()); } else if (t.isEOF()) { tb.error(this); tb.pop(); tb.transition(tb.originalState()); return tb.process(t); } else if (t.isEndTag()) { tb.pop(); tb.transition(tb.originalState()); }"
      },
      {
        "txt": "return true; } }, InTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isCharacter()) { tb.newPendingTableCharacters(); tb.markInsertionMode(); tb.transition(InTableText); return tb.process(t);"
      },
      {
        "txt": "} else if (t.isComment()) { tb.insert(t.asComment()); return true; } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"caption\")) {"
      },
      {
        "txt": "tb.clearStackToTableContext(); tb.insertMarkerToFormattingElements(); tb.insert(startTag); tb.transition(InCaption); } else if (name.equals(\"colgroup\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InColumnGroup); } else if (name.equals(\"col\")) { tb.processStartTag(\"colgroup\");"
      },
      {
        "txt": "return tb.process(t); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { tb.clearStackToTableContext(); tb.insert(startTag); tb.transition(InTableBody); } else if (StringUtil.in(name, \"td\", \"th\", \"tr\")) { tb.processStartTag(\"tbody\"); return tb.process(t); } else if (name.equals(\"table\")) { tb.error(this);"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"table\"); if (processed) // only ignored if in fragment return tb.process(t); } else if (StringUtil.in(name, \"style\", \"script\")) { return tb.process(t, InHead); } else if (name.equals(\"input\")) { if (!startTag.attributes.get(\"type\").equalsIgnoreCase(\"hidden\")) { return anythingElse(t, tb); } else { tb.insertEmpty(startTag);"
      },
      {
        "txt": "} } else if (name.equals(\"form\")) { tb.error(this); if (tb.getFormElement() != null) return false; else { tb.insertForm(startTag, false); } } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} return true; // todo: check if should return processed http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-intable } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (name.equals(\"table\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.popStackToClose(\"table\"); } tb.resetInsertionMode(); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; // todo: as above todo } else if (t.isEOF()) { if (tb.currentElement().nodeName().equals(\"html\")) tb.error(this); return true; // stops parsing } return anythingElse(t, tb); } boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this);"
      },
      {
        "txt": "boolean processed; if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true); processed = tb.process(t, InBody); tb.setFosterInserts(false); } else { processed = tb.process(t, InBody); } return processed; }"
      },
      {
        "txt": "}, InTableText { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) { tb.error(this); return false; } else {"
      },
      {
        "txt": "tb.getPendingTableCharacters().add(c.getData()); } break; default: if (tb.getPendingTableCharacters().size() > 0) { for (String character : tb.getPendingTableCharacters()) { if (!isWhitespace(character)) { tb.error(this); if (StringUtil.in(tb.currentElement().nodeName(), \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { tb.setFosterInserts(true);"
      },
      {
        "txt": "tb.process(new Token.Character().data(character), InBody); tb.setFosterInserts(false); } else { tb.process(new Token.Character().data(character), InBody); } } else tb.insert(new Token.Character().data(character)); } tb.newPendingTableCharacters(); }"
      },
      {
        "txt": "tb.transition(tb.originalState()); return tb.process(t); } return true; } }, InCaption { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag() && t.asEndTag().normalName().equals(\"caption\")) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (!tb.inTableScope(name)) { tb.error(this); return false; } else { tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(\"caption\")) tb.error(this); tb.popStackToClose(\"caption\"); tb.clearFormattingElementsToLastMarker();"
      },
      {
        "txt": "tb.transition(InTable); } } else if (( t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\") || t.isEndTag() && t.asEndTag().normalName().equals(\"table\")) ) { tb.error(this); boolean processed = tb.processEndTag(\"caption\"); if (processed)"
      },
      {
        "txt": "return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"body\", \"col\", \"colgroup\", \"html\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { tb.error(this); return false; } else { return tb.process(t, InBody); } return true; }"
      },
      {
        "txt": "}, InColumnGroup { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); return true; } switch (t.type) { case Comment: tb.insert(t.asComment());"
      },
      {
        "txt": "break; case Doctype: tb.error(this); break; case StartTag: Token.StartTag startTag = t.asStartTag(); switch (startTag.normalName()) { case \"html\": return tb.process(t, InBody); case \"col\":"
      },
      {
        "txt": "tb.insertEmpty(startTag); break; default: return anythingElse(t, tb); } break; case EndTag: Token.EndTag endTag = t.asEndTag(); if (endTag.normalName.equals(\"colgroup\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag case"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); tb.transition(InTable); } } else return anythingElse(t, tb); break; case EOF:"
      },
      {
        "txt": "if (tb.currentElement().nodeName().equals(\"html\")) return true; // stop parsing; frag case else return anythingElse(t, tb); default: return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, TreeBuilder tb) {"
      },
      {
        "txt": "boolean processed = tb.processEndTag(\"colgroup\"); if (processed) // only ignored in frag case return tb.process(t); return true; } }, InTableBody { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case StartTag:"
      },
      {
        "txt": "Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (name.equals(\"tr\")) { tb.clearStackToTableBodyContext(); tb.insert(startTag); tb.transition(InRow); } else if (StringUtil.in(name, \"th\", \"td\")) { tb.error(this); tb.processStartTag(\"tr\"); return tb.process(startTag);"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\")) { return exitTableBody(t, tb); } else return anythingElse(t, tb); break; case EndTag: Token.EndTag endTag = t.asEndTag(); name = endTag.normalName(); if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.clearStackToTableBodyContext(); tb.pop(); tb.transition(InTable); } } else if (name.equals(\"table\")) { return exitTableBody(t, tb); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\", \"tr\")) {"
      },
      {
        "txt": "tb.error(this); return false; } else return anythingElse(t, tb); break; default: return anythingElse(t, tb); } return true; }"
      },
      {
        "txt": "private boolean exitTableBody(Token t, HtmlTreeBuilder tb) { if (!(tb.inTableScope(\"tbody\") || tb.inTableScope(\"thead\") || tb.inScope(\"tfoot\"))) { tb.error(this); return false; } tb.clearStackToTableBodyContext(); tb.processEndTag(tb.currentElement().nodeName()); // tbody, tfoot, thead return tb.process(t); } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } }, InRow { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag()) { Token.StartTag startTag = t.asStartTag(); String name = startTag.normalName(); if (StringUtil.in(name, \"th\", \"td\")) { tb.clearStackToTableRowContext();"
      },
      {
        "txt": "tb.insert(startTag); tb.transition(InCell); tb.insertMarkerToFormattingElements(); } else if (StringUtil.in(name, \"caption\", \"col\", \"colgroup\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { return handleMissingTr(t, tb); } else { return anythingElse(t, tb); } } else if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag();"
      },
      {
        "txt": "String name = endTag.normalName(); if (name.equals(\"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); // frag return false; } tb.clearStackToTableRowContext(); tb.pop(); // tr tb.transition(InTableBody); } else if (name.equals(\"table\")) {"
      },
      {
        "txt": "return handleMissingTr(t, tb); } else if (StringUtil.in(name, \"tbody\", \"tfoot\", \"thead\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } tb.processEndTag(\"tr\"); return tb.process(t); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\", \"td\", \"th\")) { tb.error(this);"
      },
      {
        "txt": "return false; } else { return anythingElse(t, tb); } } else { return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "return tb.process(t, InTable); } private boolean handleMissingTr(Token t, TreeBuilder tb) { boolean processed = tb.processEndTag(\"tr\"); if (processed) return tb.process(t); else return false; } },"
      },
      {
        "txt": "InCell { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isEndTag()) { Token.EndTag endTag = t.asEndTag(); String name = endTag.normalName(); if (StringUtil.in(name, \"td\", \"th\")) { if (!tb.inTableScope(name)) { tb.error(this); tb.transition(InRow); // might not be in scope if empty: <td /> and processing fake end tag return false;"
      },
      {
        "txt": "} tb.generateImpliedEndTags(); if (!tb.currentElement().nodeName().equals(name)) tb.error(this); tb.popStackToClose(name); tb.clearFormattingElementsToLastMarker(); tb.transition(InRow); } else if (StringUtil.in(name, \"body\", \"caption\", \"col\", \"colgroup\", \"html\")) { tb.error(this); return false;"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\")) { if (!tb.inTableScope(name)) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else { return anythingElse(t, tb); }"
      },
      {
        "txt": "} else if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"col\", \"colgroup\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\")) { if (!(tb.inTableScope(\"td\") || tb.inTableScope(\"th\"))) { tb.error(this); return false; } closeCell(tb); return tb.process(t); } else {"
      },
      {
        "txt": "return anythingElse(t, tb); } return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { return tb.process(t, InBody); } private void closeCell(HtmlTreeBuilder tb) { if (tb.inTableScope(\"td\")) tb.processEndTag(\"td\");"
      },
      {
        "txt": "else tb.processEndTag(\"th\"); // only here if th or td in scope } }, InSelect { boolean process(Token t, HtmlTreeBuilder tb) { switch (t.type) { case Character: Token.Character c = t.asCharacter(); if (c.getData().equals(nullString)) {"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.insert(c); } break; case Comment: tb.insert(t.asComment()); break; case Doctype:"
      },
      {
        "txt": "tb.error(this); return false; case StartTag: Token.StartTag start = t.asStartTag(); String name = start.normalName(); if (name.equals(\"html\")) return tb.process(start, InBody); else if (name.equals(\"option\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\");"
      },
      {
        "txt": "tb.insert(start); } else if (name.equals(\"optgroup\")) { if (tb.currentElement().nodeName().equals(\"option\")) tb.processEndTag(\"option\"); else if (tb.currentElement().nodeName().equals(\"optgroup\")) tb.processEndTag(\"optgroup\"); tb.insert(start); } else if (name.equals(\"select\")) { tb.error(this); return tb.processEndTag(\"select\");"
      },
      {
        "txt": "} else if (StringUtil.in(name, \"input\", \"keygen\", \"textarea\")) { tb.error(this); if (!tb.inSelectScope(\"select\")) return false; // frag tb.processEndTag(\"select\"); return tb.process(start); } else if (name.equals(\"script\")) { return tb.process(t, InHead); } else { return anythingElse(t, tb);"
      },
      {
        "txt": "} break; case EndTag: Token.EndTag end = t.asEndTag(); name = end.normalName(); switch (name) { case \"optgroup\": if (tb.currentElement().nodeName().equals(\"option\") && tb.aboveOnStack(tb.currentElement()) != null && tb.aboveOnStack(tb.currentElement()).nodeName().equals(\"optgroup\")) tb.processEndTag(\"option\"); if (tb.currentElement().nodeName().equals(\"optgroup\"))"
      },
      {
        "txt": "tb.pop(); else tb.error(this); break; case \"option\": if (tb.currentElement().nodeName().equals(\"option\")) tb.pop(); else tb.error(this); break;"
      },
      {
        "txt": "case \"select\": if (!tb.inSelectScope(name)) { tb.error(this); return false; } else { tb.popStackToClose(name); tb.resetInsertionMode(); } break; default:"
      },
      {
        "txt": "return anythingElse(t, tb); } break; case EOF: if (!tb.currentElement().nodeName().equals(\"html\")) tb.error(this); break; default: return anythingElse(t, tb); }"
      },
      {
        "txt": "return true; } private boolean anythingElse(Token t, HtmlTreeBuilder tb) { tb.error(this); return false; } }, InSelectInTable { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isStartTag() && StringUtil.in(t.asStartTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) {"
      },
      {
        "txt": "tb.error(this); tb.processEndTag(\"select\"); return tb.process(t); } else if (t.isEndTag() && StringUtil.in(t.asEndTag().normalName(), \"caption\", \"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\", \"td\", \"th\")) { tb.error(this); if (tb.inTableScope(t.asEndTag().normalName())) { tb.processEndTag(\"select\"); return (tb.process(t)); } else return false;"
      },
      {
        "txt": "} else { return tb.process(t, InSelect); } } }, AfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { return tb.process(t, InBody); } else if (t.isComment()) {"
      },
      {
        "txt": "tb.insert(t.asComment()); // into html node } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) { return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { if (tb.isFragmentParsing()) { tb.error(this); return false;"
      },
      {
        "txt": "} else { tb.transition(AfterAfterBody); } } else if (t.isEOF()) { } else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true;"
      },
      {
        "txt": "} }, InFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this);"
      },
      {
        "txt": "return false; } else if (t.isStartTag()) { Token.StartTag start = t.asStartTag(); switch (start.normalName()) { case \"html\": return tb.process(start, InBody); case \"frameset\": tb.insert(start); break; case \"frame\":"
      },
      {
        "txt": "tb.insertEmpty(start); break; case \"noframes\": return tb.process(start, InHead); default: tb.error(this); return false; } } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"frameset\")) { if (tb.currentElement().nodeName().equals(\"html\")) { // frag"
      },
      {
        "txt": "tb.error(this); return false; } else { tb.pop(); if (!tb.isFragmentParsing() && !tb.currentElement().nodeName().equals(\"frameset\")) { tb.transition(AfterFrameset); } } } else if (t.isEOF()) { if (!tb.currentElement().nodeName().equals(\"html\")) {"
      },
      {
        "txt": "tb.error(this); return true; } } else { tb.error(this); return false; } return true; } },"
      },
      {
        "txt": "AfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) { if (isWhitespace(t)) { tb.insert(t.asCharacter()); } else if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype()) { tb.error(this); return false; } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"html\")) {"
      },
      {
        "txt": "return tb.process(t, InBody); } else if (t.isEndTag() && t.asEndTag().normalName().equals(\"html\")) { tb.transition(AfterAfterFrameset); } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else if (t.isEOF()) { } else { tb.error(this); return false; }"
      },
      {
        "txt": "return true; } }, AfterAfterBody { boolean process(Token t, HtmlTreeBuilder tb) { if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) {"
      },
      {
        "txt": "} else { tb.error(this); tb.transition(InBody); return tb.process(t); } return true; } }, AfterAfterFrameset { boolean process(Token t, HtmlTreeBuilder tb) {"
      },
      {
        "txt": "if (t.isComment()) { tb.insert(t.asComment()); } else if (t.isDoctype() || isWhitespace(t) || (t.isStartTag() && t.asStartTag().normalName().equals(\"html\"))) { return tb.process(t, InBody); } else if (t.isEOF()) { } else if (t.isStartTag() && t.asStartTag().normalName().equals(\"noframes\")) { return tb.process(t, InHead); } else { tb.error(this); return false;"
      },
      {
        "txt": "} return true; } }, ForeignContent { boolean process(Token t, HtmlTreeBuilder tb) { return true; } }; private static String nullString = String.valueOf('\\u0000');"
      },
      {
        "txt": "abstract boolean process(Token t, HtmlTreeBuilder tb); private static boolean isWhitespace(Token t) { if (t.isCharacter()) { String data = t.asCharacter().getData(); return isWhitespace(data); } return false; } private static boolean isWhitespace(String data) { for (int i = 0; i < data.length(); i++) {"
      },
      {
        "txt": "char c = data.charAt(i); if (!StringUtil.isWhitespace(c)) return false; } return true; } private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.tokeniser.transition(TokeniserState.Rcdata); tb.markInsertionMode(); tb.transition(Text);"
      },
      {
        "txt": "} private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb) { tb.insert(startTag); tb.tokeniser.transition(TokeniserState.Rawtext); tb.markInsertionMode(); tb.transition(Text); <extra_id_0> private static final class Constants { private static final String[] InBodyStartToHead = new String[]{\"base\", \"basefont\", \"bgsound\", \"command\", \"link\", \"meta\", \"noframes\", \"script\", \"style\", \"title\"}; private static final String[] InBodyStartPClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"menu\", \"nav\", \"ol\", \"p\", \"section\", \"summary\", \"ul\"}; private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"};"
      },
      {
        "txt": "\"p\", \"section\", \"summary\", \"ul\"}; private static final String[] Headings = new String[]{\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"}; private static final String[] InBodyStartPreListing = new String[]{\"pre\", \"listing\"}; private static final String[] InBodyStartLiBreakers = new String[]{\"address\", \"div\", \"p\"}; private static final String[] DdDt = new String[]{\"dd\", \"dt\"}; private static final String[] Formatters = new String[]{\"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyStartApplets = new String[]{\"applet\", \"marquee\", \"object\"}; private static final String[] InBodyStartEmptyFormatters = new String[]{\"area\", \"br\", \"embed\", \"img\", \"keygen\", \"wbr\"}; private static final String[] InBodyStartMedia = new String[]{\"param\", \"source\", \"track\"}; private static final String[] InBodyStartInputAttribs = new String[]{\"name\", \"action\", \"prompt\"};"
      },
      {
        "txt": "private static final String[] InBodyStartOptions = new String[]{\"optgroup\", \"option\"}; private static final String[] InBodyStartRuby = new String[]{\"rp\", \"rt\"}; private static final String[] InBodyStartDrop = new String[]{\"caption\", \"col\", \"colgroup\", \"frame\", \"head\", \"tbody\", \"td\", \"tfoot\", \"th\", \"thead\", \"tr\"}; private static final String[] InBodyEndClosers = new String[]{\"address\", \"article\", \"aside\", \"blockquote\", \"button\", \"center\", \"details\", \"dir\", \"div\", \"dl\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"header\", \"hgroup\", \"listing\", \"menu\", \"nav\", \"ol\", \"pre\", \"section\", \"summary\", \"ul\"}; private static final String[] InBodyEndAdoptionFormatters = new String[]{\"a\", \"b\", \"big\", \"code\", \"em\", \"font\", \"i\", \"nobr\", \"s\", \"small\", \"strike\", \"strong\", \"tt\", \"u\"}; private static final String[] InBodyEndTableFosters = new String[]{\"table\", \"tbody\", \"tfoot\", \"thead\", \"tr\"}; }"
      }
    ]
  }
]
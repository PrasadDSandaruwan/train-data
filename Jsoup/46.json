[
  {
    "id": 1969,
    "file_path": "src/main/java/org/jsoup/nodes/Entities.java",
    "start-bug-line": 118,
    "end-bug-line": 118,
    "bug": "accum.append(c);",
    "fix": "accum.append(\"&#xa0;\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.nodes; import org.jsoup.helper.StringUtil; import org.jsoup.parser.Parser; import java.io.IOException; import java.io.InputStream; import java.nio.charset.CharsetEncoder; import java.util.*;"
      },
      {
        "txt": "public class Entities { public enum EscapeMode { xhtml(xhtmlByVal), base(baseByVal), extended(fullByVal); private Map<Character, String> map; EscapeMode(Map<Character, String> map) { this.map = map; } public Map<Character, String> getMap() {"
      },
      {
        "txt": "return map; } } private static final Map<String, Character> full; private static final Map<Character, String> xhtmlByVal; private static final Map<String, Character> base; private static final Map<Character, String> baseByVal; private static final Map<Character, String> fullByVal; private Entities() {} public static boolean isNamedEntity(String name) {"
      },
      {
        "txt": "return full.containsKey(name); } public static boolean isBaseNamedEntity(String name) { return base.containsKey(name); } public static Character getCharacterByName(String name) { return full.get(name); } static String escape(String string, Document.OutputSettings out) { StringBuilder accum = new StringBuilder(string.length() * 2);"
      },
      {
        "txt": "escape(accum, string, out, false, false, false); return accum.toString(); } static void escape(StringBuilder accum, String string, Document.OutputSettings out, boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite) { boolean lastWasWhite = false; boolean reachedNonWhite = false; final EscapeMode escapeMode = out.escapeMode(); final CharsetEncoder encoder = out.encoder(); final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());"
      },
      {
        "txt": "final Map<Character, String> map = escapeMode.getMap(); final int length = string.length(); int codePoint; for (int offset = 0; offset < length; offset += Character.charCount(codePoint)) { codePoint = string.codePointAt(offset); if (normaliseWhite) { if (StringUtil.isWhitespace(codePoint)) { if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue; accum.append(' ');"
      },
      {
        "txt": "lastWasWhite = true; continue; } else { lastWasWhite = false; reachedNonWhite = true; } } if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT) { final char c = (char) codePoint; switch (c) {"
      },
      {
        "txt": "accum.append(\"&amp;\"); break; case 0xA0: if (escapeMode != EscapeMode.xhtml) accum.append(\"&nbsp;\"); else <extra_id_0> break; case '<': if (!inAttribute) accum.append(\"&lt;\"); else accum.append(c);"
      },
      {
        "txt": "else accum.append(c); break; case '>': if (!inAttribute) accum.append(\"&gt;\"); else accum.append(c); break; case '\"':"
      },
      {
        "txt": "if (inAttribute) accum.append(\"&quot;\"); else accum.append(c); break; default: if (canEncode(coreCharset, c, encoder)) accum.append(c); else if (map.containsKey(c)) accum.append('&').append(map.get(c)).append(';');"
      },
      {
        "txt": "else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); } } else { final String c = new String(Character.toChars(codePoint)); if (encoder.canEncode(c)) // uses fallback encoder for simplicity accum.append(c); else accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';'); }"
      },
      {
        "txt": "} } static String unescape(String string) { return unescape(string, false); } static String unescape(String string, boolean strict) { return Parser.unescapeEntities(string, strict); } private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback) { switch (charset) {"
      },
      {
        "txt": "case ascii: return c < 0x80; case utf: return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above default: return fallback.canEncode(c); } } private enum CoreCharset { ascii, utf, fallback;"
      },
      {
        "txt": "private static CoreCharset byName(String name) { if (name.equals(\"US-ASCII\")) return ascii; if (name.startsWith(\"UTF-\")) // covers UTF-8, UTF-16, et al return utf; return fallback; } } private static final Object[][] xhtmlArray = { {\"quot\", 0x00022},"
      },
      {
        "txt": "{\"amp\", 0x00026}, {\"lt\", 0x0003C}, {\"gt\", 0x0003E} }; static { xhtmlByVal = new HashMap<Character, String>(); base = loadEntities(\"entities-base.properties\"); // most common / default baseByVal = toCharacterKey(base); full = loadEntities(\"entities-full.properties\"); // extended and overblown. fullByVal = toCharacterKey(full);"
      },
      {
        "txt": "for (Object[] entity : xhtmlArray) { Character c = Character.valueOf((char) ((Integer) entity[1]).intValue()); xhtmlByVal.put(c, ((String) entity[0])); } } private static Map<String, Character> loadEntities(String filename) { Properties properties = new Properties(); Map<String, Character> entities = new HashMap<String, Character>(); try { InputStream in = Entities.class.getResourceAsStream(filename);"
      },
      {
        "txt": "properties.load(in); in.close(); } catch (IOException e) { throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename); } for (Map.Entry entry: properties.entrySet()) { Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16)); String name = (String) entry.getKey(); entities.put(name, val); }"
      },
      {
        "txt": "return entities; } private static Map<Character, String> toCharacterKey(Map<String, Character> inMap) { Map<Character, String> outMap = new HashMap<Character, String>(); for (Map.Entry<String, Character> entry: inMap.entrySet()) { Character character = entry.getValue(); String name = entry.getKey(); if (outMap.containsKey(character)) { if (name.toLowerCase().equals(name)) outMap.put(character, name);"
      },
      {
        "txt": "} else { outMap.put(character, name); } } return outMap; }"
      }
    ]
  }
]
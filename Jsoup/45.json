[
  {
    "id": 1968,
    "file_path": "src/main/java/org/jsoup/parser/HtmlTreeBuilder.java",
    "start-bug-line": 394,
    "end-bug-line": 394,
    "bug": "} else if ((\"td\".equals(name) || \"td\".equals(name) && !last)) {",
    "fix": "} else if ((\"td\".equals(name) || \"th\".equals(name) && !last)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.jsoup.parser; import org.jsoup.helper.StringUtil; import org.jsoup.helper.Validate; import org.jsoup.nodes.*; import org.jsoup.select.Elements;"
      },
      {
        "txt": "import java.util.ArrayList; import java.util.List; public class HtmlTreeBuilder extends TreeBuilder { private static final String[] TagsScriptStyle = new String[]{\"script\", \"style\"}; public static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"}; private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"}; private static final String[] TagSearchButton = new String[]{\"button\"}; private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"}; private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"}; private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};"
      },
      {
        "txt": "private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\", \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\", \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\", \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\", \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"}; private HtmlTreeBuilderState state; // the current state private HtmlTreeBuilderState originalState; // original / marked state"
      },
      {
        "txt": "private boolean baseUriSetFromDoc = false; private Element headElement; // the current head element private FormElement formElement; // the current form element private Element contextElement; // fragment parse context -- could be null even if fragment parsing private ArrayList<Element> formattingElements = new ArrayList<Element>(); // active (open) formatting elements private List<String> pendingTableCharacters = new ArrayList<String>(); // chars in table to be shifted out private Token.EndTag emptyEnd = new Token.EndTag(); // reused empty end tag private boolean framesetOk = true; // if ok to go into frameset private boolean fosterInserts = false; // if next inserts should be fostered private boolean fragmentParsing = false; // if parsing a fragment of html"
      },
      {
        "txt": "HtmlTreeBuilder() {} @Override Document parse(String input, String baseUri, ParseErrorList errors) { state = HtmlTreeBuilderState.Initial; baseUriSetFromDoc = false; return super.parse(input, baseUri, errors); } List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors) { state = HtmlTreeBuilderState.Initial; initialiseParse(inputFragment, baseUri, errors);"
      },
      {
        "txt": "contextElement = context; fragmentParsing = true; Element root = null; if (context != null) { if (context.ownerDocument() != null) // quirks setup: doc.quirksMode(context.ownerDocument().quirksMode()); String contextTag = context.tagName(); if (StringUtil.in(contextTag, \"title\", \"textarea\")) tokeniser.transition(TokeniserState.Rcdata); else if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))"
      },
      {
        "txt": "tokeniser.transition(TokeniserState.Rawtext); else if (contextTag.equals(\"script\")) tokeniser.transition(TokeniserState.ScriptData); else if (contextTag.equals((\"noscript\"))) tokeniser.transition(TokeniserState.Data); // if scripting enabled, rawtext else if (contextTag.equals(\"plaintext\")) tokeniser.transition(TokeniserState.Data); else tokeniser.transition(TokeniserState.Data); // default root = new Element(Tag.valueOf(\"html\"), baseUri);"
      },
      {
        "txt": "doc.appendChild(root); stack.add(root); resetInsertionMode(); Elements contextChain = context.parents(); contextChain.add(0, context); for (Element parent: contextChain) { if (parent instanceof FormElement) { formElement = (FormElement) parent; break; }"
      },
      {
        "txt": "} } runParser(); if (context != null && root != null) return root.childNodes(); else return doc.childNodes(); } @Override protected boolean process(Token token) {"
      },
      {
        "txt": "currentToken = token; return this.state.process(token, this); } boolean process(Token token, HtmlTreeBuilderState state) { currentToken = token; return state.process(token, this); } void transition(HtmlTreeBuilderState state) { this.state = state; }"
      },
      {
        "txt": "HtmlTreeBuilderState state() { return state; } void markInsertionMode() { originalState = state; } HtmlTreeBuilderState originalState() { return originalState; } void framesetOk(boolean framesetOk) {"
      },
      {
        "txt": "this.framesetOk = framesetOk; } boolean framesetOk() { return framesetOk; } Document getDocument() { return doc; } String getBaseUri() { return baseUri;"
      },
      {
        "txt": "} void maybeSetBaseUri(Element base) { if (baseUriSetFromDoc) // only listen to the first <base href> in parse return; String href = base.absUrl(\"href\"); if (href.length() != 0) { // ignore <base target> etc baseUri = href; baseUriSetFromDoc = true; doc.setBaseUri(href); // set on the doc so doc.createElement(Tag) will get updated base, and to update all descendants }"
      },
      {
        "txt": "} boolean isFragmentParsing() { return fragmentParsing; } void error(HtmlTreeBuilderState state) { if (errors.canAddError()) errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state)); } Element insert(Token.StartTag startTag) { if (startTag.isSelfClosing()) {"
      },
      {
        "txt": "Element el = insertEmpty(startTag); stack.add(el); tokeniser.transition(TokeniserState.Data); // handles <script />, otherwise needs breakout steps from script data tokeniser.emit(emptyEnd.reset().name(el.tagName())); // ensure we get out of whatever state we are in. emitted for yielded processing return el; } Element el = new Element(Tag.valueOf(startTag.name()), baseUri, startTag.attributes); insert(el); return el; }"
      },
      {
        "txt": "Element insertStartTag(String startTagName) { Element el = new Element(Tag.valueOf(startTagName), baseUri); insert(el); return el; } void insert(Element el) { insertNode(el); stack.add(el); } Element insertEmpty(Token.StartTag startTag) {"
      },
      {
        "txt": "Tag tag = Tag.valueOf(startTag.name()); Element el = new Element(tag, baseUri, startTag.attributes); insertNode(el); if (startTag.isSelfClosing()) { if (tag.isKnownTag()) { if (tag.isSelfClosing()) tokeniser.acknowledgeSelfClosingFlag(); // if not acked, promulagates error } else { tag.setSelfClosing(); tokeniser.acknowledgeSelfClosingFlag(); // not an distinct error }"
      },
      {
        "txt": "} return el; } FormElement insertForm(Token.StartTag startTag, boolean onStack) { Tag tag = Tag.valueOf(startTag.name()); FormElement el = new FormElement(tag, baseUri, startTag.attributes); setFormElement(el); insertNode(el); if (onStack) stack.add(el);"
      },
      {
        "txt": "return el; } void insert(Token.Comment commentToken) { Comment comment = new Comment(commentToken.getData(), baseUri); insertNode(comment); } void insert(Token.Character characterToken) { Node node; String tagName = currentElement().tagName(); if (tagName.equals(\"script\") || tagName.equals(\"style\"))"
      },
      {
        "txt": "node = new DataNode(characterToken.getData(), baseUri); else node = new TextNode(characterToken.getData(), baseUri); currentElement().appendChild(node); // doesn't use insertNode, because we don't foster these; and will always have a stack. } private void insertNode(Node node) { if (stack.size() == 0) doc.appendChild(node); else if (isFosterInserts()) insertInFosterParent(node);"
      },
      {
        "txt": "else currentElement().appendChild(node); if (node instanceof Element && ((Element) node).tag().isFormListed()) { if (formElement != null) formElement.addElement((Element) node); } } Element pop() { int size = stack.size(); return stack.remove(size-1);"
      },
      {
        "txt": "} void push(Element element) { stack.add(element); } ArrayList<Element> getStack() { return stack; } boolean onStack(Element el) { return isElementInQueue(stack, el); }"
      },
      {
        "txt": "private boolean isElementInQueue(ArrayList<Element> queue, Element element) { for (int pos = queue.size() -1; pos >= 0; pos--) { Element next = queue.get(pos); if (next == element) { return true; } } return false; } Element getFromStack(String elName) {"
      },
      {
        "txt": "for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { return next; } } return null; } boolean removeFromStack(Element el) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); if (next == el) { stack.remove(pos); return true; } } return false; } void popStackToClose(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element next = stack.get(pos); stack.remove(pos); if (next.nodeName().equals(elName)) break; } } void popStackToClose(String... elNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); stack.remove(pos);"
      },
      {
        "txt": "if (StringUtil.in(next.nodeName(), elNames)) break; } } void popStackToBefore(String elName) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next.nodeName().equals(elName)) { break; } else {"
      },
      {
        "txt": "stack.remove(pos); } } } void clearStackToTableContext() { clearStackToContext(\"table\"); } void clearStackToTableBodyContext() { clearStackToContext(\"tbody\", \"tfoot\", \"thead\"); }"
      },
      {
        "txt": "void clearStackToTableRowContext() { clearStackToContext(\"tr\"); } private void clearStackToContext(String... nodeNames) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\")) break; else stack.remove(pos);"
      },
      {
        "txt": "} } Element aboveOnStack(Element el) { assert onStack(el); for (int pos = stack.size() -1; pos >= 0; pos--) { Element next = stack.get(pos); if (next == el) { return stack.get(pos-1); } }"
      },
      {
        "txt": "return null; } void insertOnStackAfter(Element after, Element in) { int i = stack.lastIndexOf(after); Validate.isTrue(i != -1); stack.add(i+1, in); } void replaceOnStack(Element out, Element in) { replaceInQueue(stack, out, in); }"
      },
      {
        "txt": "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in) { int i = queue.lastIndexOf(out); Validate.isTrue(i != -1); queue.set(i, in); } void resetInsertionMode() { boolean last = false; for (int pos = stack.size() -1; pos >= 0; pos--) { Element node = stack.get(pos); if (pos == 0) {"
      },
      {
        "txt": "node = contextElement; } String name = node.nodeName(); if (\"select\".equals(name)) { transition(HtmlTreeBuilderState.InSelect); break; // frag <extra_id_0> transition(HtmlTreeBuilderState.InCell); break; } else if (\"tr\".equals(name)) { transition(HtmlTreeBuilderState.InRow); break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) {"
      },
      {
        "txt": "break; } else if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name)) { transition(HtmlTreeBuilderState.InTableBody); break; } else if (\"caption\".equals(name)) { transition(HtmlTreeBuilderState.InCaption); break; } else if (\"colgroup\".equals(name)) { transition(HtmlTreeBuilderState.InColumnGroup); break; // frag"
      },
      {
        "txt": "} else if (\"table\".equals(name)) { transition(HtmlTreeBuilderState.InTable); break; } else if (\"head\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; // frag } else if (\"body\".equals(name)) { transition(HtmlTreeBuilderState.InBody); break; } else if (\"frameset\".equals(name)) {"
      },
      {
        "txt": "transition(HtmlTreeBuilderState.InFrameset); break; // frag } else if (\"html\".equals(name)) { transition(HtmlTreeBuilderState.BeforeHead); break; // frag } else if (last) { transition(HtmlTreeBuilderState.InBody); break; // frag } }"
      },
      {
        "txt": "} private String[] specificScopeTarget = {null}; private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes) { specificScopeTarget[0] = targetName; return inSpecificScope(specificScopeTarget, baseTypes, extraTypes); } private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes) { for (int pos = stack.size() -1; pos >= 0; pos--) { Element el = stack.get(pos); String elName = el.nodeName();"
      },
      {
        "txt": "if (StringUtil.in(elName, targetNames)) return true; if (StringUtil.in(elName, baseTypes)) return false; if (extraTypes != null && StringUtil.in(elName, extraTypes)) return false; } Validate.fail(\"Should not be reachable\"); return false; }"
      },
      {
        "txt": "boolean inScope(String[] targetNames) { return inSpecificScope(targetNames, TagsSearchInScope, null); } boolean inScope(String targetName) { return inScope(targetName, null); } boolean inScope(String targetName, String[] extras) { return inSpecificScope(targetName, TagsSearchInScope, extras); } boolean inListItemScope(String targetName) {"
      },
      {
        "txt": "return inScope(targetName, TagSearchList); } boolean inButtonScope(String targetName) { return inScope(targetName, TagSearchButton); } boolean inTableScope(String targetName) { return inSpecificScope(targetName, TagSearchTableScope, null); } boolean inSelectScope(String targetName) { for (int pos = stack.size() -1; pos >= 0; pos--) {"
      },
      {
        "txt": "Element el = stack.get(pos); String elName = el.nodeName(); if (elName.equals(targetName)) return true; if (!StringUtil.in(elName, TagSearchSelectScope)) // all elements except return false; } Validate.fail(\"Should not be reachable\"); return false; }"
      },
      {
        "txt": "void setHeadElement(Element headElement) { this.headElement = headElement; } Element getHeadElement() { return headElement; } boolean isFosterInserts() { return fosterInserts; } void setFosterInserts(boolean fosterInserts) {"
      },
      {
        "txt": "this.fosterInserts = fosterInserts; } FormElement getFormElement() { return formElement; } void setFormElement(FormElement formElement) { this.formElement = formElement; } void newPendingTableCharacters() { pendingTableCharacters = new ArrayList<String>();"
      },
      {
        "txt": "} List<String> getPendingTableCharacters() { return pendingTableCharacters; } void setPendingTableCharacters(List<String> pendingTableCharacters) { this.pendingTableCharacters = pendingTableCharacters; } 11.2.5.2 Closing elements that have implied end tags<p/> When the steps below require the UA to generate implied end tags, then, while the current node is a dd element, a dt element, an li element, an option element, an optgroup element, a p element, an rp element, or an rt element,"
      },
      {
        "txt": "the UA must pop the current node off the stack of open elements. @param excludeTag If a step requires the UA to generate implied end tags but lists an element to exclude from the process, then the UA must perform the above steps as if that element was not in the above list. void generateImpliedEndTags(String excludeTag) { while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) && StringUtil.in(currentElement().nodeName(), TagSearchEndTags)) pop(); } void generateImpliedEndTags() { generateImpliedEndTags(null);"
      },
      {
        "txt": "} boolean isSpecial(Element el) { String name = el.nodeName(); return StringUtil.in(name, TagSearchSpecial); } Element lastFormattingElement() { return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null; } Element removeLastFormattingElement() { int size = formattingElements.size();"
      },
      {
        "txt": "if (size > 0) return formattingElements.remove(size-1); else return null; } void pushActiveFormattingElements(Element in) { int numSeen = 0; for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element el = formattingElements.get(pos); if (el == null) // marker"
      },
      {
        "txt": "break; if (isSameFormattingElement(in, el)) numSeen++; if (numSeen == 3) { formattingElements.remove(pos); break; } } formattingElements.add(in); }"
      },
      {
        "txt": "private boolean isSameFormattingElement(Element a, Element b) { return a.nodeName().equals(b.nodeName()) && a.attributes().equals(b.attributes()); } void reconstructFormattingElements() { Element last = lastFormattingElement(); if (last == null || onStack(last)) return; Element entry = last; int size = formattingElements.size();"
      },
      {
        "txt": "int pos = size - 1; boolean skip = false; while (true) { if (pos == 0) { // step 4. if none before, skip to 8 skip = true; break; } entry = formattingElements.get(--pos); // step 5. one earlier than entry if (entry == null || onStack(entry)) // step 6 - neither marker nor on stack break; // jump to 8, else continue back to 4"
      },
      {
        "txt": "} while(true) { if (!skip) // step 7: on later than entry entry = formattingElements.get(++pos); Validate.notNull(entry); // should not occur, as we break at last element skip = false; // can only skip increment from 4. Element newEl = insertStartTag(entry.nodeName()); // todo: avoid fostering here? newEl.attributes().addAll(entry.attributes()); formattingElements.set(pos, newEl); if (pos == size-1) // if not last entry in list, jump to 7"
      },
      {
        "txt": "break; } } void clearFormattingElementsToLastMarker() { while (!formattingElements.isEmpty()) { Element el = removeLastFormattingElement(); if (el == null) break; } }"
      },
      {
        "txt": "void removeFromActiveFormattingElements(Element el) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == el) { formattingElements.remove(pos); break; } } } boolean isInActiveFormattingElements(Element el) {"
      },
      {
        "txt": "return isElementInQueue(formattingElements, el); } Element getActiveFormattingElement(String nodeName) { for (int pos = formattingElements.size() -1; pos >= 0; pos--) { Element next = formattingElements.get(pos); if (next == null) // scope marker break; else if (next.nodeName().equals(nodeName)) return next; }"
      },
      {
        "txt": "return null; } void replaceActiveFormattingElement(Element out, Element in) { replaceInQueue(formattingElements, out, in); } void insertMarkerToFormattingElements() { formattingElements.add(null); } void insertInFosterParent(Node in) { Element fosterParent;"
      },
      {
        "txt": "Element lastTable = getFromStack(\"table\"); boolean isLastTableParent = false; if (lastTable != null) { if (lastTable.parent() != null) { fosterParent = lastTable.parent(); isLastTableParent = true; } else fosterParent = aboveOnStack(lastTable); } else { // no table == frag fosterParent = stack.get(0);"
      },
      {
        "txt": "} if (isLastTableParent) { Validate.notNull(lastTable); // last table cannot be null by this point. lastTable.before(in); } else fosterParent.appendChild(in); } @Override public String toString() {"
      },
      {
        "txt": "return \"TreeBuilder{\" + \"currentToken=\" + currentToken + \", state=\" + state + \", currentElement=\" + currentElement() + '}'; }"
      }
    ]
  }
]
[
  {
    "id": 1131,
    "file_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
    "start-bug-line": 182,
    "end-bug-line": 182,
    "bug": "",
    "fix": "if (col < values.length) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import java.io.Serializable; import java.util.Arrays; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Map.Entry; public final class CSVRecord implements Serializable, Iterable<String> { private static final String[] EMPTY_STRING_ARRAY = new String[0];"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; private final String comment; private final Map<String, Integer> mapping; private final long recordNumber; private final String[] values; CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) { this.recordNumber = recordNumber; this.values = values != null ? values : EMPTY_STRING_ARRAY; this.mapping = mapping;"
      },
      {
        "txt": "this.comment = comment; } public String get(final Enum<?> e) { return get(e.toString()); } public String get(final int i) { return values[i]; } public String get(final String name) { if (mapping == null) {"
      },
      {
        "txt": "throw new IllegalStateException( \"No header mapping was specified, the record values can't be accessed by name\"); } final Integer index = mapping.get(name); if (index == null) { throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name, mapping.keySet())); } try { return values[index.intValue()];"
      },
      {
        "txt": "} catch (final ArrayIndexOutOfBoundsException e) { throw new IllegalArgumentException(String.format( \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index, Integer.valueOf(values.length))); } } public String getComment() { return comment; } public long getRecordNumber() {"
      },
      {
        "txt": "return recordNumber; } public boolean isConsistent() { return mapping == null ? true : mapping.size() == values.length; } public boolean isMapped(final String name) { return mapping != null ? mapping.containsKey(name) : false; } public boolean isSet(final String name) { return isMapped(name) && mapping.get(name).intValue() < values.length;"
      },
      {
        "txt": "public Iterator<String> iterator() { return toList().iterator(); } <M extends Map<String, String>> M putIn(final M map) { for (final Entry<String, Integer> entry : mapping.entrySet()) { final int col = entry.getValue().intValue(); <extra_id_0> } return map; } public int size() { return values.length; }"
      },
      {
        "txt": "return values.length; } private List<String> toList() { return Arrays.asList(values); } public Map<String, String> toMap() { return putIn(new HashMap<String, String>(values.length)); } @Override public String toString() {"
      },
      {
        "txt": "return Arrays.toString(values); } String[] values() { return values; }"
      }
    ]
  },
  {
    "id": 1132,
    "file_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
    "start-bug-line": 183,
    "end-bug-line": 183,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.util.Arrays; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Map.Entry; public final class CSVRecord implements Serializable, Iterable<String> { private static final String[] EMPTY_STRING_ARRAY = new String[0]; private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "private final String comment; private final Map<String, Integer> mapping; private final long recordNumber; private final String[] values; CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) { this.recordNumber = recordNumber; this.values = values != null ? values : EMPTY_STRING_ARRAY; this.mapping = mapping; this.comment = comment;"
      },
      {
        "txt": "} public String get(final Enum<?> e) { return get(e.toString()); } public String get(final int i) { return values[i]; } public String get(final String name) { if (mapping == null) { throw new IllegalStateException("
      },
      {
        "txt": "\"No header mapping was specified, the record values can't be accessed by name\"); } final Integer index = mapping.get(name); if (index == null) { throw new IllegalArgumentException(String.format(\"Mapping for %s not found, expected one of %s\", name, mapping.keySet())); } try { return values[index.intValue()]; } catch (final ArrayIndexOutOfBoundsException e) {"
      },
      {
        "txt": "throw new IllegalArgumentException(String.format( \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index, Integer.valueOf(values.length))); } } public String getComment() { return comment; } public long getRecordNumber() { return recordNumber;"
      },
      {
        "txt": "} public boolean isConsistent() { return mapping == null ? true : mapping.size() == values.length; } public boolean isMapped(final String name) { return mapping != null ? mapping.containsKey(name) : false; } public boolean isSet(final String name) { return isMapped(name) && mapping.get(name).intValue() < values.length; }"
      },
      {
        "txt": "return toList().iterator(); } <M extends Map<String, String>> M putIn(final M map) { for (final Entry<String, Integer> entry : mapping.entrySet()) { final int col = entry.getValue().intValue(); map.put(entry.getKey(), values[col]); <extra_id_0> return map; } public int size() { return values.length; } private List<String> toList() {"
      },
      {
        "txt": "} private List<String> toList() { return Arrays.asList(values); } public Map<String, String> toMap() { return putIn(new HashMap<String, String>(values.length)); } @Override public String toString() { return Arrays.toString(values);"
      },
      {
        "txt": "} String[] values() { return values; }"
      }
    ]
  }
]
[
  {
    "id": 1128,
    "file_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
    "start-bug-line": 288,
    "end-bug-line": 288,
    "bug": "return new LinkedHashMap<String, Integer>(this.headerMap);",
    "fix": "return this.headerMap == null ? null : new LinkedHashMap<String, Integer>(this.headerMap);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Token.Type.TOKEN; import java.io.Closeable; import java.io.File; import java.io.FileReader; import java.io.IOException; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringReader; import java.net.URL;"
      },
      {
        "txt": "import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.NoSuchElementException; public final class CSVParser implements Iterable<CSVRecord>, Closeable { public static CSVParser parse(File file, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\");"
      },
      {
        "txt": "Assertions.notNull(format, \"format\"); return new CSVParser(new FileReader(file), format); } public static CSVParser parse(String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } public static CSVParser parse(URL url, Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\");"
      },
      {
        "txt": "Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(url.openStream(), charset == null ? Charset.forName(\"UTF-8\") : charset), format); } private final CSVFormat format; private final Map<String, Integer> headerMap; private final Lexer lexer; private final List<String> record = new ArrayList<String>(); private long recordNumber;"
      },
      {
        "txt": "private final Token reusableToken = new Token(); public CSVParser(final Reader reader, final CSVFormat format) throws IOException { Assertions.notNull(reader, \"reader\"); Assertions.notNull(format, \"format\"); format.validate(); this.format = format; this.lexer = new Lexer(format, new ExtendedBufferedReader(reader)); this.headerMap = this.initializeHeader(); } private void addRecordValue() {"
      },
      {
        "txt": "final String input = this.reusableToken.content.toString(); final String nullString = this.format.getNullString(); if (nullString == null) { this.record.add(input); } else { this.record.add(input.equalsIgnoreCase(nullString) ? null : input); } } public void close() throws IOException { if (this.lexer != null) {"
      },
      {
        "txt": "} } public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber(); } public Map<String, Integer> getHeaderMap() { <extra_id_0> } public long getRecordNumber() { return this.recordNumber; } public List<CSVRecord> getRecords() throws IOException { final List<CSVRecord> records = new ArrayList<CSVRecord>();"
      },
      {
        "txt": "public List<CSVRecord> getRecords() throws IOException { final List<CSVRecord> records = new ArrayList<CSVRecord>(); CSVRecord rec; while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null;"
      },
      {
        "txt": "final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = new LinkedHashMap<String, Integer>(); String[] header = null; if (formatHeader.length == 0) { final CSVRecord record = this.nextRecord(); if (record != null) { header = record.values(); } } else {"
      },
      {
        "txt": "if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } header = formatHeader; } if (header != null) { for (int i = 0; i < header.length; i++) { hdrMap.put(header[i], Integer.valueOf(i)); } }"
      },
      {
        "txt": "} return hdrMap; } public boolean isClosed() { return this.lexer.isClosed(); } public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current; private CSVRecord getNextRecord() {"
      },
      {
        "txt": "try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new RuntimeException(e); } } public boolean hasNext() { if (CSVParser.this.isClosed()) { return false; }"
      },
      {
        "txt": "if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } public CSVRecord next() { if (CSVParser.this.isClosed()) { throw new NoSuchElementException(\"CSVParser has been closed\"); } CSVRecord next = this.current;"
      },
      {
        "txt": "this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); } } return next; } public void remove() {"
      },
      {
        "txt": "throw new UnsupportedOperationException(); } }; } CSVRecord nextRecord() throws IOException { CSVRecord result = null; this.record.clear(); StringBuilder sb = null; do { this.reusableToken.reset();"
      },
      {
        "txt": "this.lexer.nextToken(this.reusableToken); switch (this.reusableToken.type) { case TOKEN: this.addRecordValue(); break; case EORECORD: this.addRecordValue(); break; case EOF: if (this.reusableToken.isReady) {"
      },
      {
        "txt": "this.addRecordValue(); } break; case INVALID: throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\"); case COMMENT: // Ignored currently if (sb == null) { // first comment for this record sb = new StringBuilder(); } else { sb.append(Constants.LF);"
      },
      {
        "txt": "} sb.append(this.reusableToken.content); this.reusableToken.type = TOKEN; // Read another token break; } } while (this.reusableToken.type == TOKEN); if (!this.record.isEmpty()) { this.recordNumber++; final String comment = sb == null ? null : sb.toString(); result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,"
      },
      {
        "txt": "this.recordNumber); } return result; }"
      }
    ]
  }
]
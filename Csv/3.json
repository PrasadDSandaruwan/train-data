[
  {
    "id": 1125,
    "file_path": "src/main/java/org/apache/commons/csv/Lexer.java",
    "start-bug-line": 111,
    "end-bug-line": 111,
    "bug": "",
    "fix": "if (isDelimiter(c) || isEscape(c) || isQuoteChar(c) || isCommentStart(c)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Constants.BACKSPACE; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.END_OF_STREAM; import static org.apache.commons.csv.Constants.FF; import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.TAB; import static org.apache.commons.csv.Constants.UNDEFINED; import java.io.IOException; abstract class Lexer {"
      },
      {
        "txt": "private static final char DISABLED = '\\ufffe'; private final char delimiter; private final char escape; private final char quoteChar; private final char commmentStart; final boolean ignoreSurroundingSpaces; final boolean ignoreEmptyLines; final CSVFormat format; final ExtendedBufferedReader in; Lexer(final CSVFormat format, final ExtendedBufferedReader in) {"
      },
      {
        "txt": "this.format = format; this.in = in; this.delimiter = format.getDelimiter(); this.escape = mapNullToDisabled(format.getEscape()); this.quoteChar = mapNullToDisabled(format.getQuoteChar()); this.commmentStart = mapNullToDisabled(format.getCommentStart()); this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces(); this.ignoreEmptyLines = format.getIgnoreEmptyLines(); } private final char mapNullToDisabled(final Character c) {"
      },
      {
        "txt": "return c == null ? DISABLED : c.charValue(); } long getLineNumber() { return in.getLineNumber(); } int readEscape() throws IOException { final int c = in.read(); switch (c) { case 'r': return CR;"
      },
      {
        "txt": "case 'n': return LF; case 't': return TAB; case 'b': return BACKSPACE; case 'f': return FF; case CR: case LF:"
      },
      {
        "txt": "case TAB: // TODO is this correct? Do tabs need to be escaped? case BACKSPACE: // TODO is this correct? return c; case END_OF_STREAM: throw new IOException(\"EOF whilst processing escape sequence\"); default: <extra_id_0> } } void trimTrailingSpaces(final StringBuilder buffer) { int length = buffer.length(); while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { length = length - 1;"
      },
      {
        "txt": "while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { length = length - 1; } if (length != buffer.length()) { buffer.setLength(length); } } boolean readEndOfLine(int c) throws IOException { if (c == CR && in.lookAhead() == LF) { c = in.read();"
      },
      {
        "txt": "} return c == LF || c == CR; } abstract Token nextToken(Token reusableToken) throws IOException; boolean isWhitespace(final int c) { return c != format.getDelimiter() && Character.isWhitespace((char) c); } boolean isStartOfLine(final int c) { return c == LF || c == CR || c == UNDEFINED; }"
      },
      {
        "txt": "boolean isEndOfFile(final int c) { return c == END_OF_STREAM; } boolean isDelimiter(final int c) { return c == delimiter; } boolean isEscape(final int c) { return c == escape; } boolean isQuoteChar(final int c) {"
      },
      {
        "txt": "return c == quoteChar; } boolean isCommentStart(final int c) { return c == commmentStart; }"
      }
    ]
  },
  {
    "id": 1126,
    "file_path": "src/main/java/org/apache/commons/csv/Lexer.java",
    "start-bug-line": 112,
    "end-bug-line": 112,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.apache.commons.csv.Constants.BACKSPACE; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.END_OF_STREAM; import static org.apache.commons.csv.Constants.FF; import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.TAB; import static org.apache.commons.csv.Constants.UNDEFINED; import java.io.IOException; abstract class Lexer { private static final char DISABLED = '\\ufffe';"
      },
      {
        "txt": "private final char delimiter; private final char escape; private final char quoteChar; private final char commmentStart; final boolean ignoreSurroundingSpaces; final boolean ignoreEmptyLines; final CSVFormat format; final ExtendedBufferedReader in; Lexer(final CSVFormat format, final ExtendedBufferedReader in) { this.format = format;"
      },
      {
        "txt": "this.in = in; this.delimiter = format.getDelimiter(); this.escape = mapNullToDisabled(format.getEscape()); this.quoteChar = mapNullToDisabled(format.getQuoteChar()); this.commmentStart = mapNullToDisabled(format.getCommentStart()); this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces(); this.ignoreEmptyLines = format.getIgnoreEmptyLines(); } private final char mapNullToDisabled(final Character c) { return c == null ? DISABLED : c.charValue();"
      },
      {
        "txt": "} long getLineNumber() { return in.getLineNumber(); } int readEscape() throws IOException { final int c = in.read(); switch (c) { case 'r': return CR; case 'n':"
      },
      {
        "txt": "return LF; case 't': return TAB; case 'b': return BACKSPACE; case 'f': return FF; case CR: case LF: case FF: // TODO is this correct?"
      },
      {
        "txt": "case BACKSPACE: // TODO is this correct? return c; case END_OF_STREAM: throw new IOException(\"EOF whilst processing escape sequence\"); default: return c; <extra_id_0> } } void trimTrailingSpaces(final StringBuilder buffer) { int length = buffer.length(); while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { length = length - 1;"
      },
      {
        "txt": "while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { length = length - 1; } if (length != buffer.length()) { buffer.setLength(length); } } boolean readEndOfLine(int c) throws IOException { if (c == CR && in.lookAhead() == LF) { c = in.read();"
      },
      {
        "txt": "} return c == LF || c == CR; } abstract Token nextToken(Token reusableToken) throws IOException; boolean isWhitespace(final int c) { return c != format.getDelimiter() && Character.isWhitespace((char) c); } boolean isStartOfLine(final int c) { return c == LF || c == CR || c == UNDEFINED; }"
      },
      {
        "txt": "boolean isEndOfFile(final int c) { return c == END_OF_STREAM; } boolean isDelimiter(final int c) { return c == delimiter; } boolean isEscape(final int c) { return c == escape; } boolean isQuoteChar(final int c) {"
      },
      {
        "txt": "return c == quoteChar; } boolean isCommentStart(final int c) { return c == commmentStart; }"
      }
    ]
  },
  {
    "id": 1127,
    "file_path": "src/main/java/org/apache/commons/csv/Lexer.java",
    "start-bug-line": 113,
    "end-bug-line": 113,
    "bug": "",
    "fix": "return END_OF_STREAM;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.apache.commons.csv.Constants.BACKSPACE; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.END_OF_STREAM; import static org.apache.commons.csv.Constants.FF; import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.TAB; import static org.apache.commons.csv.Constants.UNDEFINED; import java.io.IOException; abstract class Lexer { private static final char DISABLED = '\\ufffe';"
      },
      {
        "txt": "private final char delimiter; private final char escape; private final char quoteChar; private final char commmentStart; final boolean ignoreSurroundingSpaces; final boolean ignoreEmptyLines; final CSVFormat format; final ExtendedBufferedReader in; Lexer(final CSVFormat format, final ExtendedBufferedReader in) { this.format = format;"
      },
      {
        "txt": "this.in = in; this.delimiter = format.getDelimiter(); this.escape = mapNullToDisabled(format.getEscape()); this.quoteChar = mapNullToDisabled(format.getQuoteChar()); this.commmentStart = mapNullToDisabled(format.getCommentStart()); this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces(); this.ignoreEmptyLines = format.getIgnoreEmptyLines(); } private final char mapNullToDisabled(final Character c) { return c == null ? DISABLED : c.charValue();"
      },
      {
        "txt": "} long getLineNumber() { return in.getLineNumber(); } int readEscape() throws IOException { final int c = in.read(); switch (c) { case 'r': return CR; case 'n':"
      },
      {
        "txt": "return LF; case 't': return TAB; case 'b': return BACKSPACE; case 'f': return FF; case CR: case LF: case FF: // TODO is this correct?"
      },
      {
        "txt": "case BACKSPACE: // TODO is this correct? return c; case END_OF_STREAM: throw new IOException(\"EOF whilst processing escape sequence\"); default: return c; <extra_id_0> } void trimTrailingSpaces(final StringBuilder buffer) { int length = buffer.length(); while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) { length = length - 1; }"
      },
      {
        "txt": "length = length - 1; } if (length != buffer.length()) { buffer.setLength(length); } } boolean readEndOfLine(int c) throws IOException { if (c == CR && in.lookAhead() == LF) { c = in.read(); }"
      },
      {
        "txt": "return c == LF || c == CR; } abstract Token nextToken(Token reusableToken) throws IOException; boolean isWhitespace(final int c) { return c != format.getDelimiter() && Character.isWhitespace((char) c); } boolean isStartOfLine(final int c) { return c == LF || c == CR || c == UNDEFINED; } boolean isEndOfFile(final int c) {"
      },
      {
        "txt": "return c == END_OF_STREAM; } boolean isDelimiter(final int c) { return c == delimiter; } boolean isEscape(final int c) { return c == escape; } boolean isQuoteChar(final int c) { return c == quoteChar;"
      },
      {
        "txt": "} boolean isCommentStart(final int c) { return c == commmentStart; }"
      }
    ]
  }
]
[
  {
    "id": 1122,
    "file_path": "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.java",
    "start-bug-line": 58,
    "end-bug-line": 58,
    "bug": "if (current == '\\n') {",
    "fix": "if (current == '\\r' || (current == '\\n' && lastChar != '\\r')) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import java.io.BufferedReader; import java.io.IOException; import java.io.Reader; class ExtendedBufferedReader extends BufferedReader { static final int END_OF_STREAM = -1; static final int UNDEFINED = -2; private int lastChar = UNDEFINED;"
      },
      {
        "txt": "ExtendedBufferedReader(Reader r) { super(r); } @Override public int read() throws IOException { int current = super.read(); <extra_id_0> lineCounter++; } lastChar = current; return lastChar; } int readAgain() {"
      },
      {
        "txt": "} int readAgain() { return lastChar; } @Override public int read(char[] buf, int offset, int length) throws IOException { if (length == 0) { return 0; } int len = super.read(buf, offset, length);"
      },
      {
        "txt": "if (len > 0) { for (int i = offset; i < offset + len; i++) { char ch = buf[i]; if (ch == '\\n') { if ('\\r' != (i > 0 ? buf[i-1]: lastChar)) { lineCounter++; } } else if (ch == '\\r') { lineCounter++; }"
      },
      {
        "txt": "} lastChar = buf[offset + len - 1]; } else if (len == -1) { lastChar = END_OF_STREAM; } return len; } @Override public String readLine() throws IOException { String line = super.readLine();"
      },
      {
        "txt": "if (line != null) { if (line.length() > 0) { lastChar = line.charAt(line.length() - 1); } lineCounter++; } else { lastChar = END_OF_STREAM; } return line; }"
      },
      {
        "txt": "int lookAhead() throws IOException { super.mark(1); int c = super.read(); super.reset(); return c; } int getLineNumber() { return lineCounter; }"
      }
    ]
  }
]
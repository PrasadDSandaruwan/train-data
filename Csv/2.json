[
  {
    "id": 1123,
    "file_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
    "start-bug-line": 85,
    "end-bug-line": 85,
    "bug": "",
    "fix": "try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.util.Arrays; import java.util.Iterator; import java.util.Map; public class CSVRecord implements Serializable, Iterable<String> { private static final long serialVersionUID = 1L; private static final String[] EMPTY_STRING_ARRAY = new String[0]; private final String[] values; private final Map<String, Integer> mapping; private final String comment;"
      },
      {
        "txt": "private final long recordNumber; CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) { this.recordNumber = recordNumber; this.values = values != null ? values : EMPTY_STRING_ARRAY; this.mapping = mapping; this.comment = comment; } public String get(final int i) { return values[i];"
      },
      {
        "txt": "public String get(final String name) { if (mapping == null) { throw new IllegalStateException( \"No header mapping was specified, the record values can't be accessed by name\"); } final Integer index = mapping.get(name); <extra_id_0> } public boolean isConsistent() { return mapping == null ? true : mapping.size() == values.length; } public boolean isMapped(final String name) { return mapping != null ? mapping.containsKey(name) : false;"
      },
      {
        "txt": "public boolean isMapped(final String name) { return mapping != null ? mapping.containsKey(name) : false; } public boolean isSet(final String name) { return isMapped(name) && mapping.get(name).intValue() < values.length; } public Iterator<String> iterator() { return Arrays.asList(values).iterator(); } String[] values() {"
      },
      {
        "txt": "return values; } public String getComment() { return comment; } public long getRecordNumber() { return recordNumber; } public int size() { return values.length;"
      },
      {
        "txt": "} @Override public String toString() { return Arrays.toString(values); }"
      }
    ]
  },
  {
    "id": 1124,
    "file_path": "src/main/java/org/apache/commons/csv/CSVRecord.java",
    "start-bug-line": 86,
    "end-bug-line": 86,
    "bug": "",
    "fix": "} catch (ArrayIndexOutOfBoundsException e) { throw new IllegalArgumentException( String.format( \"Index for header '%s' is %d but CSVRecord only has %d values!\", name, index.intValue(), values.length)); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Iterator; import java.util.Map; public class CSVRecord implements Serializable, Iterable<String> { private static final long serialVersionUID = 1L; private static final String[] EMPTY_STRING_ARRAY = new String[0]; private final String[] values; private final Map<String, Integer> mapping; private final String comment; private final long recordNumber;"
      },
      {
        "txt": "CSVRecord(final String[] values, final Map<String, Integer> mapping, final String comment, final long recordNumber) { this.recordNumber = recordNumber; this.values = values != null ? values : EMPTY_STRING_ARRAY; this.mapping = mapping; this.comment = comment; } public String get(final int i) { return values[i]; }"
      },
      {
        "txt": "if (mapping == null) { throw new IllegalStateException( \"No header mapping was specified, the record values can't be accessed by name\"); } final Integer index = mapping.get(name); return index != null ? values[index.intValue()] : null; <extra_id_0> public boolean isConsistent() { return mapping == null ? true : mapping.size() == values.length; } public boolean isMapped(final String name) { return mapping != null ? mapping.containsKey(name) : false; }"
      },
      {
        "txt": "return mapping != null ? mapping.containsKey(name) : false; } public boolean isSet(final String name) { return isMapped(name) && mapping.get(name).intValue() < values.length; } public Iterator<String> iterator() { return Arrays.asList(values).iterator(); } String[] values() { return values;"
      },
      {
        "txt": "} public String getComment() { return comment; } public long getRecordNumber() { return recordNumber; } public int size() { return values.length; }"
      },
      {
        "txt": "@Override public String toString() { return Arrays.toString(values); }"
      }
    ]
  }
]
[
  {
    "id": 1141,
    "file_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
    "start-bug-line": 319,
    "end-bug-line": 319,
    "bug": ".withQuote(null).withRecordSeparator(LF);",
    "fix": ".withQuote(null).withRecordSeparator(LF).withNullString(\"\\\\N\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Constants.BACKSLASH; import static org.apache.commons.csv.Constants.COMMA; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.CRLF; import static org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR; import static org.apache.commons.csv.Constants.LF;"
      },
      {
        "txt": "import static org.apache.commons.csv.Constants.TAB; import java.io.IOException; import java.io.Reader; import java.io.Serializable; import java.io.StringWriter; import java.sql.ResultSet; import java.sql.ResultSetMetaData; import java.sql.SQLException; import java.util.Arrays; import java.util.HashSet;"
      },
      {
        "txt": "import java.util.Set; public final class CSVFormat implements Serializable { public static enum Predefined { Default(CSVFormat.DEFAULT), Excel(CSVFormat.EXCEL), MySQL(CSVFormat.MYSQL), RFC4180(CSVFormat.RFC4180), TDF(CSVFormat.TDF); private final CSVFormat format; private Predefined(final CSVFormat format) {"
      },
      {
        "txt": "this.format = format; } public CSVFormat getFormat() { return format; } }; private static final long serialVersionUID = 1L; private final char delimiter; private final Character quoteCharacter; // null if quoting is disabled private final QuoteMode quoteMode;"
      },
      {
        "txt": "private final Character commentMarker; // null if commenting is disabled private final Character escapeCharacter; // null if escaping is disabled private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values? private final boolean allowMissingColumnNames; private final boolean ignoreEmptyLines; private final String recordSeparator; // for outputs private final String nullString; // the string to be used for null values private final String[] header; // array of header column names private final String[] headerComments; // array of header comment lines private final boolean skipHeaderRecord;"
      },
      {
        "txt": "public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, null, false, false, false); public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false); public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames(); public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces(); public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false) <extra_id_0> private static boolean isLineBreak(final char c) { return c == LF || c == CR; } private static boolean isLineBreak(final Character c) { return c != null && isLineBreak(c.charValue()); }"
      },
      {
        "txt": "return c != null && isLineBreak(c.charValue()); } public static CSVFormat newFormat(final char delimiter) { return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, null, false, false, false); } public static CSVFormat valueOf(final String format) { return CSVFormat.Predefined.valueOf(format).getFormat(); } private CSVFormat(final char delimiter, final Character quoteChar, final QuoteMode quoteMode, final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,"
      },
      {
        "txt": "final boolean ignoreEmptyLines, final String recordSeparator, final String nullString, final Object[] headerComments, final String[] header, final boolean skipHeaderRecord, final boolean allowMissingColumnNames, final boolean ignoreHeaderCase) { this.delimiter = delimiter; this.quoteCharacter = quoteChar; this.quoteMode = quoteMode; this.commentMarker = commentStart; this.escapeCharacter = escape; this.ignoreSurroundingSpaces = ignoreSurroundingSpaces; this.allowMissingColumnNames = allowMissingColumnNames;"
      },
      {
        "txt": "this.ignoreEmptyLines = ignoreEmptyLines; this.recordSeparator = recordSeparator; this.nullString = nullString; this.headerComments = toStringArray(headerComments); this.header = header == null ? null : header.clone(); this.skipHeaderRecord = skipHeaderRecord; this.ignoreHeaderCase = ignoreHeaderCase; validate(); } private String[] toStringArray(final Object[] values) {"
      },
      {
        "txt": "if (values == null) { return null; } final String[] strings = new String[values.length]; for (int i = 0; i < values.length; i++) { final Object value = values[i]; strings[i] = value == null ? null : value.toString(); } return strings; }"
      },
      {
        "txt": "@Override public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false;"
      },
      {
        "txt": "} final CSVFormat other = (CSVFormat) obj; if (delimiter != other.delimiter) { return false; } if (quoteMode != other.quoteMode) { return false; } if (quoteCharacter == null) { if (other.quoteCharacter != null) {"
      },
      {
        "txt": "return false; } } else if (!quoteCharacter.equals(other.quoteCharacter)) { return false; } if (commentMarker == null) { if (other.commentMarker != null) { return false; } } else if (!commentMarker.equals(other.commentMarker)) {"
      },
      {
        "txt": "return false; } if (escapeCharacter == null) { if (other.escapeCharacter != null) { return false; } } else if (!escapeCharacter.equals(other.escapeCharacter)) { return false; } if (nullString == null) {"
      },
      {
        "txt": "if (other.nullString != null) { return false; } } else if (!nullString.equals(other.nullString)) { return false; } if (!Arrays.equals(header, other.header)) { return false; } if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces) {"
      },
      {
        "txt": "return false; } if (ignoreEmptyLines != other.ignoreEmptyLines) { return false; } if (skipHeaderRecord != other.skipHeaderRecord) { return false; } if (recordSeparator == null) { if (other.recordSeparator != null) {"
      },
      {
        "txt": "return false; } } else if (!recordSeparator.equals(other.recordSeparator)) { return false; } return true; } public String format(final Object... values) { final StringWriter out = new StringWriter(); try {"
      },
      {
        "txt": "new CSVPrinter(out, this).printRecord(values); return out.toString().trim(); } catch (final IOException e) { throw new IllegalStateException(e); } } public Character getCommentMarker() { return commentMarker; } public char getDelimiter() {"
      },
      {
        "txt": "return delimiter; } public Character getEscapeCharacter() { return escapeCharacter; } public String[] getHeader() { return header != null ? header.clone() : null; } public String[] getHeaderComments() { return headerComments != null ? headerComments.clone() : null;"
      },
      {
        "txt": "} public boolean getAllowMissingColumnNames() { return allowMissingColumnNames; } public boolean getIgnoreEmptyLines() { return ignoreEmptyLines; } public boolean getIgnoreSurroundingSpaces() { return ignoreSurroundingSpaces; }"
      },
      {
        "txt": "public boolean getIgnoreHeaderCase() { return ignoreHeaderCase; } public String getNullString() { return nullString; } public Character getQuoteCharacter() { return quoteCharacter; } public QuoteMode getQuoteMode() {"
      },
      {
        "txt": "return quoteMode; } public String getRecordSeparator() { return recordSeparator; } public boolean getSkipHeaderRecord() { return skipHeaderRecord; } @Override public int hashCode() {"
      },
      {
        "txt": "final int prime = 31; int result = 1; result = prime * result + delimiter; result = prime * result + ((quoteMode == null) ? 0 : quoteMode.hashCode()); result = prime * result + ((quoteCharacter == null) ? 0 : quoteCharacter.hashCode()); result = prime * result + ((commentMarker == null) ? 0 : commentMarker.hashCode()); result = prime * result + ((escapeCharacter == null) ? 0 : escapeCharacter.hashCode()); result = prime * result + ((nullString == null) ? 0 : nullString.hashCode()); result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237); result = prime * result + (ignoreHeaderCase ? 1231 : 1237);"
      },
      {
        "txt": "result = prime * result + (ignoreEmptyLines ? 1231 : 1237); result = prime * result + (skipHeaderRecord ? 1231 : 1237); result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()); result = prime * result + Arrays.hashCode(header); return result; } public boolean isCommentMarkerSet() { return commentMarker != null; } public boolean isEscapeCharacterSet() {"
      },
      {
        "txt": "return escapeCharacter != null; } public boolean isNullStringSet() { return nullString != null; } public boolean isQuoteCharacterSet() { return quoteCharacter != null; } public CSVParser parse(final Reader in) throws IOException { return new CSVParser(in, this);"
      },
      {
        "txt": "} public CSVPrinter print(final Appendable out) throws IOException { return new CSVPrinter(out, this); } @Override public String toString() { final StringBuilder sb = new StringBuilder(); sb.append(\"Delimiter=<\").append(delimiter).append('>'); if (isEscapeCharacterSet()) { sb.append(' ');"
      },
      {
        "txt": "sb.append(\"Escape=<\").append(escapeCharacter).append('>'); } if (isQuoteCharacterSet()) { sb.append(' '); sb.append(\"QuoteChar=<\").append(quoteCharacter).append('>'); } if (isCommentMarkerSet()) { sb.append(' '); sb.append(\"CommentStart=<\").append(commentMarker).append('>'); }"
      },
      {
        "txt": "if (isNullStringSet()) { sb.append(' '); sb.append(\"NullString=<\").append(nullString).append('>'); } if (recordSeparator != null) { sb.append(' '); sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(\" EmptyLines:ignored\");"
      },
      {
        "txt": "} if (getIgnoreSurroundingSpaces()) { sb.append(\" SurroundingSpaces:ignored\"); } if (getIgnoreHeaderCase()) { sb.append(\" IgnoreHeaderCase:ignored\"); } sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord); if (headerComments != null) { sb.append(' ');"
      },
      {
        "txt": "sb.append(\"HeaderComments:\").append(Arrays.toString(headerComments)); } if (header != null) { sb.append(' '); sb.append(\"Header:\").append(Arrays.toString(header)); } return sb.toString(); } private void validate() throws IllegalArgumentException { if (isLineBreak(delimiter)) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); } if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) { throw new IllegalArgumentException(\"The quoteChar character and the delimiter cannot be the same ('\" + quoteCharacter + \"')\"); } if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) { throw new IllegalArgumentException(\"The escape character and the delimiter cannot be the same ('\" + escapeCharacter + \"')\"); }"
      },
      {
        "txt": "if (commentMarker != null && delimiter == commentMarker.charValue()) { throw new IllegalArgumentException(\"The comment start character and the delimiter cannot be the same ('\" + commentMarker + \"')\"); } if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) { throw new IllegalArgumentException(\"The comment start character and the quoteChar cannot be the same ('\" + commentMarker + \"')\"); } if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) { throw new IllegalArgumentException(\"The comment start and the escape character cannot be the same ('\" +"
      },
      {
        "txt": "commentMarker + \"')\"); } if (escapeCharacter == null && quoteMode == QuoteMode.NONE) { throw new IllegalArgumentException(\"No quotes mode set but no escape character is set\"); } if (header != null) { final Set<String> dupCheck = new HashSet<String>(); for (final String hdr : header) { if (!dupCheck.add(hdr)) { throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" +"
      },
      {
        "txt": "Arrays.toString(header)); } } } } public CSVFormat withCommentMarker(final char commentMarker) { return withCommentMarker(Character.valueOf(commentMarker)); } public CSVFormat withCommentMarker(final Character commentMarker) { if (isLineBreak(commentMarker)) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The comment start marker character cannot be a line break\"); } return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withDelimiter(final char delimiter) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); }"
      },
      {
        "txt": "return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withEscape(final char escape) { return withEscape(Character.valueOf(escape)); } public CSVFormat withEscape(final Character escape) { if (isLineBreak(escape)) { throw new IllegalArgumentException(\"The escape character cannot be a line break\");"
      },
      {
        "txt": "} return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withHeader(final String... header) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); }"
      },
      {
        "txt": "public CSVFormat withHeader(final ResultSet resultSet) throws SQLException { return withHeader(resultSet != null ? resultSet.getMetaData() : null); } public CSVFormat withHeader(final ResultSetMetaData metaData) throws SQLException { String[] labels = null; if (metaData != null) { final int columnCount = metaData.getColumnCount(); labels = new String[columnCount]; for (int i = 0; i < columnCount; i++) { labels[i] = metaData.getColumnLabel(i + 1);"
      },
      {
        "txt": "} } return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, labels, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withHeaderComments(final Object... headerComments) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase);"
      },
      {
        "txt": "} public CSVFormat withAllowMissingColumnNames() { return this.withAllowMissingColumnNames(true); } public CSVFormat withAllowMissingColumnNames(final boolean allowMissingColumnNames) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withIgnoreEmptyLines() {"
      },
      {
        "txt": "return this.withIgnoreEmptyLines(true); } public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withIgnoreSurroundingSpaces() { return this.withIgnoreSurroundingSpaces(true); }"
      },
      {
        "txt": "public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withIgnoreHeaderCase() { return this.withIgnoreHeaderCase(true); } public CSVFormat withIgnoreHeaderCase(final boolean ignoreHeaderCase) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,"
      },
      {
        "txt": "ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withNullString(final String nullString) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withQuote(final char quoteChar) { return withQuote(Character.valueOf(quoteChar));"
      },
      {
        "txt": "} public CSVFormat withQuote(final Character quoteChar) { if (isLineBreak(quoteChar)) { throw new IllegalArgumentException(\"The quoteChar cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withQuoteMode(final QuoteMode quoteModePolicy) {"
      },
      {
        "txt": "return new CSVFormat(delimiter, quoteCharacter, quoteModePolicy, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withRecordSeparator(final char recordSeparator) { return withRecordSeparator(String.valueOf(recordSeparator)); } public CSVFormat withRecordSeparator(final String recordSeparator) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header,"
      },
      {
        "txt": "skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); } public CSVFormat withSkipHeaderRecord() { return this.withSkipHeaderRecord(true); } public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) { return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, headerComments, header, skipHeaderRecord, allowMissingColumnNames, ignoreHeaderCase); }"
      }
    ]
  },
  {
    "id": 1142,
    "file_path": "src/main/java/org/apache/commons/csv/CSVPrinter.java",
    "start-bug-line": 139,
    "end-bug-line": 139,
    "bug": "if (format.isQuoteCharacterSet()) {",
    "fix": "if (object == null) { out.append(value); } else if (format.isQuoteCharacterSet()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Constants.COMMENT; import static org.apache.commons.csv.Constants.CR;"
      },
      {
        "txt": "import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.SP; import java.io.Closeable; import java.io.Flushable; import java.io.IOException; import java.sql.ResultSet; import java.sql.SQLException; public final class CSVPrinter implements Flushable, Closeable { private final Appendable out; private final CSVFormat format;"
      },
      {
        "txt": "private boolean newRecord = true; public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException { Assertions.notNull(out, \"out\"); Assertions.notNull(format, \"format\"); this.out = out; this.format = format; if (format.getHeaderComments() != null) { for (final String line : format.getHeaderComments()) { if (line != null) { this.printComment(line);"
      },
      {
        "txt": "} } } if (format.getHeader() != null && !format.getSkipHeaderRecord()) { this.printRecord((Object[]) format.getHeader()); } } @Override public void close() throws IOException { if (out instanceof Closeable) {"
      },
      {
        "txt": "((Closeable) out).close(); } } @Override public void flush() throws IOException { if (out instanceof Flushable) { ((Flushable) out).flush(); } } public Appendable getOut() {"
      },
      {
        "txt": "return this.out; } public void print(final Object value) throws IOException { String strValue; if (value == null) { final String nullString = format.getNullString(); strValue = nullString == null ? Constants.EMPTY : nullString; } else { strValue = value.toString(); }"
      },
      {
        "txt": "} private void print(final Object object, final CharSequence value, final int offset, final int len) throws IOException { if (!newRecord) { out.append(format.getDelimiter()); } <extra_id_0> printAndQuote(object, value, offset, len); } else if (format.isEscapeCharacterSet()) { printAndEscape(value, offset, len); } else { out.append(value, offset, offset + len); }"
      },
      {
        "txt": "out.append(value, offset, offset + len); } newRecord = false; } private void printAndEscape(final CharSequence value, final int offset, final int len) throws IOException { int start = offset; int pos = offset; final int end = offset + len; final char delim = format.getDelimiter(); final char escape = format.getEscapeCharacter().charValue();"
      },
      {
        "txt": "while (pos < end) { char c = value.charAt(pos); if (c == CR || c == LF || c == delim || c == escape) { if (pos > start) { out.append(value, start, pos); } if (c == LF) { c = 'n'; } else if (c == CR) { c = 'r';"
      },
      {
        "txt": "} out.append(escape); out.append(c); start = pos + 1; // start on the current char after this one } pos++; } if (pos > start) { out.append(value, start, pos); }"
      },
      {
        "txt": "} private void printAndQuote(final Object object, final CharSequence value, final int offset, final int len) throws IOException { boolean quote = false; int start = offset; int pos = offset; final int end = offset + len; final char delimChar = format.getDelimiter(); final char quoteChar = format.getQuoteCharacter().charValue(); QuoteMode quoteModePolicy = format.getQuoteMode();"
      },
      {
        "txt": "if (quoteModePolicy == null) { quoteModePolicy = QuoteMode.MINIMAL; } switch (quoteModePolicy) { case ALL: quote = true; break; case NON_NUMERIC: quote = !(object instanceof Number); break;"
      },
      {
        "txt": "case NONE: printAndEscape(value, offset, len); return; case MINIMAL: if (len <= 0) { if (newRecord) { quote = true; } } else { char c = value.charAt(pos);"
      },
      {
        "txt": "if (newRecord && (c < '0' || (c > '9' && c < 'A') || (c > 'Z' && c < 'a') || (c > 'z'))) { quote = true; } else if (c <= COMMENT) { quote = true; } else { while (pos < end) { c = value.charAt(pos); if (c == LF || c == CR || c == quoteChar || c == delimChar) { quote = true; break;"
      },
      {
        "txt": "} pos++; } if (!quote) { pos = end - 1; c = value.charAt(pos); if (c <= SP) { quote = true; } }"
      },
      {
        "txt": "} } if (!quote) { out.append(value, start, end); return; } break; default: throw new IllegalStateException(\"Unexpected Quote value: \" + quoteModePolicy); }"
      },
      {
        "txt": "if (!quote) { out.append(value, start, end); return; } out.append(quoteChar); while (pos < end) { final char c = value.charAt(pos); if (c == quoteChar) { out.append(value, start, pos + 1); start = pos;"
      },
      {
        "txt": "} pos++; } out.append(value, start, pos); out.append(quoteChar); } public void printComment(final String comment) throws IOException { if (!format.isCommentMarkerSet()) { return; }"
      },
      {
        "txt": "if (!newRecord) { println(); } out.append(format.getCommentMarker().charValue()); out.append(SP); for (int i = 0; i < comment.length(); i++) { final char c = comment.charAt(i); switch (c) { case CR: if (i + 1 < comment.length() && comment.charAt(i + 1) == LF) {"
      },
      {
        "txt": "i++; } case LF: println(); out.append(format.getCommentMarker().charValue()); out.append(SP); break; default: out.append(c); break;"
      },
      {
        "txt": "} } println(); } public void println() throws IOException { final String recordSeparator = format.getRecordSeparator(); if (recordSeparator != null) { out.append(recordSeparator); } newRecord = true;"
      },
      {
        "txt": "} public void printRecord(final Iterable<?> values) throws IOException { for (final Object value : values) { print(value); } println(); } public void printRecord(final Object... values) throws IOException { for (final Object value : values) { print(value);"
      },
      {
        "txt": "} println(); } public void printRecords(final Iterable<?> values) throws IOException { for (final Object value : values) { if (value instanceof Object[]) { this.printRecord((Object[]) value); } else if (value instanceof Iterable) { this.printRecord((Iterable<?>) value); } else {"
      },
      {
        "txt": "this.printRecord(value); } } } public void printRecords(final Object... values) throws IOException { for (final Object value : values) { if (value instanceof Object[]) { this.printRecord((Object[]) value); } else if (value instanceof Iterable) { this.printRecord((Iterable<?>) value);"
      },
      {
        "txt": "} else { this.printRecord(value); } } } public void printRecords(final ResultSet resultSet) throws SQLException, IOException { final int columnCount = resultSet.getMetaData().getColumnCount(); while (resultSet.next()) { for (int i = 1; i <= columnCount; i++) { print(resultSet.getObject(i));"
      },
      {
        "txt": "} println(); } }"
      }
    ]
  }
]
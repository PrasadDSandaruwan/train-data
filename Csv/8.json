[
  {
    "id": 1135,
    "file_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
    "start-bug-line": 316,
    "end-bug-line": 316,
    "bug": "",
    "fix": "Set<String> dupCheck = new HashSet<String>(); for(String hdr : header) { if (!dupCheck.add(hdr)) { throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header)); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Constants.BACKSLASH; import static org.apache.commons.csv.Constants.COMMA; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.CRLF;"
      },
      {
        "txt": "import static org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR; import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.TAB; import java.io.IOException; import java.io.Reader; import java.io.Serializable; import java.io.StringWriter; import java.util.Arrays; import java.util.HashSet; import java.util.Set;"
      },
      {
        "txt": "public final class CSVFormat implements Serializable { private static final long serialVersionUID = 1L; private final char delimiter; private final Character quoteChar; // null if quoting is disabled private final Quote quotePolicy; private final Character commentStart; // null if commenting is disabled private final Character escape; // null if escaping is disabled private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values? private final boolean ignoreEmptyLines; private final String recordSeparator; // for outputs"
      },
      {
        "txt": "private final String nullString; // the string to be used for null values private final String[] header; // array of header column names private final boolean skipHeaderRecord; public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, false); public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false); public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false); public static final CSVFormat TDF = DEFAULT .withDelimiter(TAB)"
      },
      {
        "txt": ".withIgnoreSurroundingSpaces(true); public static final CSVFormat MYSQL = DEFAULT .withDelimiter(TAB) .withEscape(BACKSLASH) .withIgnoreEmptyLines(false) .withQuoteChar(null) .withRecordSeparator(LF); private static boolean isLineBreak(final char c) { return c == LF || c == CR;"
      },
      {
        "txt": "} private static boolean isLineBreak(final Character c) { return c != null && isLineBreak(c.charValue()); } public static CSVFormat newFormat(final char delimiter) { return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false); } private CSVFormat(final char delimiter, final Character quoteChar, final Quote quotePolicy, final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces,"
      },
      {
        "txt": "final boolean ignoreEmptyLines, final String recordSeparator, final String nullString, final String[] header, final boolean skipHeaderRecord) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); } this.delimiter = delimiter; this.quoteChar = quoteChar; this.quotePolicy = quotePolicy; this.commentStart = commentStart; this.escape = escape;"
      },
      {
        "txt": "this.ignoreEmptyLines = ignoreEmptyLines; this.recordSeparator = recordSeparator; this.nullString = nullString; if (header == null) { this.header = null; } else { <extra_id_0> } this.skipHeaderRecord = skipHeaderRecord; } @Override public boolean equals(final Object obj) { if (this == obj) {"
      },
      {
        "txt": "public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null) { return false; } if (getClass() != obj.getClass()) { return false; }"
      },
      {
        "txt": "final CSVFormat other = (CSVFormat) obj; if (delimiter != other.delimiter) { return false; } if (quotePolicy != other.quotePolicy) { return false; } if (quoteChar == null) { if (other.quoteChar != null) { return false;"
      },
      {
        "txt": "} } else if (!quoteChar.equals(other.quoteChar)) { return false; } if (commentStart == null) { if (other.commentStart != null) { return false; } } else if (!commentStart.equals(other.commentStart)) { return false;"
      },
      {
        "txt": "} if (escape == null) { if (other.escape != null) { return false; } } else if (!escape.equals(other.escape)) { return false; } if (nullString == null) { if (other.nullString != null) {"
      },
      {
        "txt": "return false; } } else if (!nullString.equals(other.nullString)) { return false; } if (!Arrays.equals(header, other.header)) { return false; } if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces) { return false;"
      },
      {
        "txt": "} if (ignoreEmptyLines != other.ignoreEmptyLines) { return false; } if (skipHeaderRecord != other.skipHeaderRecord) { return false; } if (recordSeparator == null) { if (other.recordSeparator != null) { return false;"
      },
      {
        "txt": "} } else if (!recordSeparator.equals(other.recordSeparator)) { return false; } return true; } public String format(final Object... values) { final StringWriter out = new StringWriter(); try { new CSVPrinter(out, this).printRecord(values);"
      },
      {
        "txt": "return out.toString().trim(); } catch (final IOException e) { throw new IllegalStateException(e); } } public Character getCommentStart() { return commentStart; } public char getDelimiter() { return delimiter;"
      },
      {
        "txt": "} public Character getEscape() { return escape; } public String[] getHeader() { return header != null ? header.clone() : null; } public boolean getIgnoreEmptyLines() { return ignoreEmptyLines; }"
      },
      {
        "txt": "public boolean getIgnoreSurroundingSpaces() { return ignoreSurroundingSpaces; } public String getNullString() { return nullString; } public Character getQuoteChar() { return quoteChar; } public Quote getQuotePolicy() {"
      },
      {
        "txt": "return quotePolicy; } public String getRecordSeparator() { return recordSeparator; } public boolean getSkipHeaderRecord() { return skipHeaderRecord; } @Override public int hashCode()"
      },
      {
        "txt": "{ final int prime = 31; int result = 1; result = prime * result + delimiter; result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode()); result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode()); result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode()); result = prime * result + ((escape == null) ? 0 : escape.hashCode()); result = prime * result + ((nullString == null) ? 0 : nullString.hashCode()); result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);"
      },
      {
        "txt": "result = prime * result + (ignoreEmptyLines ? 1231 : 1237); result = prime * result + (skipHeaderRecord ? 1231 : 1237); result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()); result = prime * result + Arrays.hashCode(header); return result; } public boolean isCommentingEnabled() { return commentStart != null; } public boolean isEscaping() {"
      },
      {
        "txt": "return escape != null; } public boolean isNullHandling() { return nullString != null; } public boolean isQuoting() { return quoteChar != null; } public CSVParser parse(final Reader in) throws IOException { return new CSVParser(in, this);"
      },
      {
        "txt": "} @Override public String toString() { final StringBuilder sb = new StringBuilder(); sb.append(\"Delimiter=<\").append(delimiter).append('>'); if (isEscaping()) { sb.append(' '); sb.append(\"Escape=<\").append(escape).append('>'); } if (isQuoting()) {"
      },
      {
        "txt": "sb.append(' '); sb.append(\"QuoteChar=<\").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' '); sb.append(\"CommentStart=<\").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append(\"NullString=<\").append(nullString).append('>');"
      },
      {
        "txt": "} if(recordSeparator != null) { sb.append(' '); sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>'); } if (getIgnoreEmptyLines()) { sb.append(\" EmptyLines:ignored\"); } if (getIgnoreSurroundingSpaces()) { sb.append(\" SurroundingSpaces:ignored\");"
      },
      {
        "txt": "} sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append(\"Header:\").append(Arrays.toString(header)); } return sb.toString(); } void validate() throws IllegalStateException { if (quoteChar != null && delimiter == quoteChar.charValue()) {"
      },
      {
        "txt": "throw new IllegalStateException( \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException( \"The escape character and the delimiter cannot be the same ('\" + escape + \"')\"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");"
      },
      {
        "txt": "} if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\"); } if (escape != null && escape.equals(commentStart)) { throw new IllegalStateException( \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\"); } if (escape == null && quotePolicy == Quote.NONE) {"
      },
      {
        "txt": "throw new IllegalStateException(\"No quotes mode set but no escape character is set\"); } if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header)); } } }"
      },
      {
        "txt": "public CSVFormat withCommentStart(final char commentStart) { return withCommentStart(Character.valueOf(commentStart)); } public CSVFormat withCommentStart(final Character commentStart) { if (isLineBreak(commentStart)) { throw new IllegalArgumentException(\"The comment start character cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }"
      },
      {
        "txt": "public CSVFormat withDelimiter(final char delimiter) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withEscape(final char escape) { return withEscape(Character.valueOf(escape)); }"
      },
      {
        "txt": "public CSVFormat withEscape(final Character escape) { if (isLineBreak(escape)) { throw new IllegalArgumentException(\"The escape character cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withHeader(final String... header) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);"
      },
      {
        "txt": "} public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withNullString(final String nullString) {"
      },
      {
        "txt": "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withQuoteChar(final char quoteChar) { return withQuoteChar(Character.valueOf(quoteChar)); } public CSVFormat withQuoteChar(final Character quoteChar) { if (isLineBreak(quoteChar)) { throw new IllegalArgumentException(\"The quoteChar cannot be a line break\"); }"
      },
      {
        "txt": "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withQuotePolicy(final Quote quotePolicy) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withRecordSeparator(final char recordSeparator) { return withRecordSeparator(String.valueOf(recordSeparator)); }"
      },
      {
        "txt": "public CSVFormat withRecordSeparator(final String recordSeparator) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }"
      }
    ]
  },
  {
    "id": 1136,
    "file_path": "src/main/java/org/apache/commons/csv/CSVFormat.java",
    "start-bug-line": 665,
    "end-bug-line": 671,
    "bug": "if (header != null) { final Set<String> set = new HashSet<String>(header.length); set.addAll(Arrays.asList(header)); if (set.size() != header.length) { throw new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header)); } }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Constants.BACKSLASH;"
      },
      {
        "txt": "import static org.apache.commons.csv.Constants.COMMA; import static org.apache.commons.csv.Constants.CR; import static org.apache.commons.csv.Constants.CRLF; import static org.apache.commons.csv.Constants.DOUBLE_QUOTE_CHAR; import static org.apache.commons.csv.Constants.LF; import static org.apache.commons.csv.Constants.TAB; import java.io.IOException; import java.io.Reader; import java.io.Serializable; import java.io.StringWriter;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.HashSet; import java.util.Set; public final class CSVFormat implements Serializable { private static final long serialVersionUID = 1L; private final char delimiter; private final Character quoteChar; // null if quoting is disabled private final Quote quotePolicy; private final Character commentStart; // null if commenting is disabled private final Character escape; // null if escaping is disabled"
      },
      {
        "txt": "private final boolean ignoreSurroundingSpaces; // Should leading/trailing spaces be ignored around values? private final boolean ignoreEmptyLines; private final String recordSeparator; // for outputs private final String nullString; // the string to be used for null values private final String[] header; // array of header column names private final boolean skipHeaderRecord; public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF, null, null, false); public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false); public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);"
      },
      {
        "txt": "public static final CSVFormat TDF = DEFAULT .withDelimiter(TAB) .withIgnoreSurroundingSpaces(true); public static final CSVFormat MYSQL = DEFAULT .withDelimiter(TAB) .withEscape(BACKSLASH) .withIgnoreEmptyLines(false) .withQuoteChar(null)"
      },
      {
        "txt": ".withRecordSeparator(LF); private static boolean isLineBreak(final char c) { return c == LF || c == CR; } private static boolean isLineBreak(final Character c) { return c != null && isLineBreak(c.charValue()); } public static CSVFormat newFormat(final char delimiter) { return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false); }"
      },
      {
        "txt": "private CSVFormat(final char delimiter, final Character quoteChar, final Quote quotePolicy, final Character commentStart, final Character escape, final boolean ignoreSurroundingSpaces, final boolean ignoreEmptyLines, final String recordSeparator, final String nullString, final String[] header, final boolean skipHeaderRecord) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\"); } this.delimiter = delimiter; this.quoteChar = quoteChar;"
      },
      {
        "txt": "this.quotePolicy = quotePolicy; this.commentStart = commentStart; this.escape = escape; this.ignoreSurroundingSpaces = ignoreSurroundingSpaces; this.ignoreEmptyLines = ignoreEmptyLines; this.recordSeparator = recordSeparator; this.nullString = nullString; if (header == null) { this.header = null; } else {"
      },
      {
        "txt": "this.header = header.clone(); } this.skipHeaderRecord = skipHeaderRecord; } @Override public boolean equals(final Object obj) { if (this == obj) { return true; } if (obj == null) {"
      },
      {
        "txt": "return false; } if (getClass() != obj.getClass()) { return false; } final CSVFormat other = (CSVFormat) obj; if (delimiter != other.delimiter) { return false; } if (quotePolicy != other.quotePolicy) {"
      },
      {
        "txt": "return false; } if (quoteChar == null) { if (other.quoteChar != null) { return false; } } else if (!quoteChar.equals(other.quoteChar)) { return false; } if (commentStart == null) {"
      },
      {
        "txt": "if (other.commentStart != null) { return false; } } else if (!commentStart.equals(other.commentStart)) { return false; } if (escape == null) { if (other.escape != null) { return false; }"
      },
      {
        "txt": "} else if (!escape.equals(other.escape)) { return false; } if (nullString == null) { if (other.nullString != null) { return false; } } else if (!nullString.equals(other.nullString)) { return false; }"
      },
      {
        "txt": "if (!Arrays.equals(header, other.header)) { return false; } if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces) { return false; } if (ignoreEmptyLines != other.ignoreEmptyLines) { return false; } if (skipHeaderRecord != other.skipHeaderRecord) {"
      },
      {
        "txt": "return false; } if (recordSeparator == null) { if (other.recordSeparator != null) { return false; } } else if (!recordSeparator.equals(other.recordSeparator)) { return false; } return true;"
      },
      {
        "txt": "} public String format(final Object... values) { final StringWriter out = new StringWriter(); try { new CSVPrinter(out, this).printRecord(values); return out.toString().trim(); } catch (final IOException e) { throw new IllegalStateException(e); } }"
      },
      {
        "txt": "public Character getCommentStart() { return commentStart; } public char getDelimiter() { return delimiter; } public Character getEscape() { return escape; } public String[] getHeader() {"
      },
      {
        "txt": "return header != null ? header.clone() : null; } public boolean getIgnoreEmptyLines() { return ignoreEmptyLines; } public boolean getIgnoreSurroundingSpaces() { return ignoreSurroundingSpaces; } public String getNullString() { return nullString;"
      },
      {
        "txt": "} public Character getQuoteChar() { return quoteChar; } public Quote getQuotePolicy() { return quotePolicy; } public String getRecordSeparator() { return recordSeparator; }"
      },
      {
        "txt": "public boolean getSkipHeaderRecord() { return skipHeaderRecord; } @Override public int hashCode() { final int prime = 31; int result = 1; result = prime * result + delimiter; result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());"
      },
      {
        "txt": "result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode()); result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode()); result = prime * result + ((escape == null) ? 0 : escape.hashCode()); result = prime * result + ((nullString == null) ? 0 : nullString.hashCode()); result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237); result = prime * result + (ignoreEmptyLines ? 1231 : 1237); result = prime * result + (skipHeaderRecord ? 1231 : 1237); result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode()); result = prime * result + Arrays.hashCode(header); return result;"
      },
      {
        "txt": "} public boolean isCommentingEnabled() { return commentStart != null; } public boolean isEscaping() { return escape != null; } public boolean isNullHandling() { return nullString != null; }"
      },
      {
        "txt": "public boolean isQuoting() { return quoteChar != null; } public CSVParser parse(final Reader in) throws IOException { return new CSVParser(in, this); } @Override public String toString() { final StringBuilder sb = new StringBuilder(); sb.append(\"Delimiter=<\").append(delimiter).append('>');"
      },
      {
        "txt": "if (isEscaping()) { sb.append(' '); sb.append(\"Escape=<\").append(escape).append('>'); } if (isQuoting()) { sb.append(' '); sb.append(\"QuoteChar=<\").append(quoteChar).append('>'); } if (isCommentingEnabled()) { sb.append(' ');"
      },
      {
        "txt": "sb.append(\"CommentStart=<\").append(commentStart).append('>'); } if (isNullHandling()) { sb.append(' '); sb.append(\"NullString=<\").append(nullString).append('>'); } if(recordSeparator != null) { sb.append(' '); sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>'); }"
      },
      {
        "txt": "if (getIgnoreEmptyLines()) { sb.append(\" EmptyLines:ignored\"); } if (getIgnoreSurroundingSpaces()) { sb.append(\" SurroundingSpaces:ignored\"); } sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord); if (header != null) { sb.append(' '); sb.append(\"Header:\").append(Arrays.toString(header));"
      },
      {
        "txt": "} return sb.toString(); } void validate() throws IllegalStateException { if (quoteChar != null && delimiter == quoteChar.charValue()) { throw new IllegalStateException( \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\"); } if (escape != null && delimiter == escape.charValue()) { throw new IllegalStateException("
      },
      {
        "txt": "\"The escape character and the delimiter cannot be the same ('\" + escape + \"')\"); } if (commentStart != null && delimiter == commentStart.charValue()) { throw new IllegalStateException( \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\"); } if (quoteChar != null && quoteChar.equals(commentStart)) { throw new IllegalStateException( \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\"); }"
      },
      {
        "txt": "throw new IllegalStateException( \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\"); } if (escape == null && quotePolicy == Quote.NONE) { throw new IllegalStateException(\"No quotes mode set but no escape character is set\"); } <extra_id_0> } public CSVFormat withCommentStart(final char commentStart) { return withCommentStart(Character.valueOf(commentStart)); } public CSVFormat withCommentStart(final Character commentStart) { if (isLineBreak(commentStart)) {"
      },
      {
        "txt": "public CSVFormat withCommentStart(final Character commentStart) { if (isLineBreak(commentStart)) { throw new IllegalArgumentException(\"The comment start character cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withDelimiter(final char delimiter) { if (isLineBreak(delimiter)) { throw new IllegalArgumentException(\"The delimiter cannot be a line break\");"
      },
      {
        "txt": "} return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withEscape(final char escape) { return withEscape(Character.valueOf(escape)); } public CSVFormat withEscape(final Character escape) { if (isLineBreak(escape)) { throw new IllegalArgumentException(\"The escape character cannot be a line break\");"
      },
      {
        "txt": "} return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withHeader(final String... header) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withIgnoreEmptyLines(final boolean ignoreEmptyLines) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,"
      },
      {
        "txt": "ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withIgnoreSurroundingSpaces(final boolean ignoreSurroundingSpaces) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withNullString(final String nullString) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }"
      },
      {
        "txt": "public CSVFormat withQuoteChar(final char quoteChar) { return withQuoteChar(Character.valueOf(quoteChar)); } public CSVFormat withQuoteChar(final Character quoteChar) { if (isLineBreak(quoteChar)) { throw new IllegalArgumentException(\"The quoteChar cannot be a line break\"); } return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }"
      },
      {
        "txt": "public CSVFormat withQuotePolicy(final Quote quotePolicy) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); } public CSVFormat withRecordSeparator(final char recordSeparator) { return withRecordSeparator(String.valueOf(recordSeparator)); } public CSVFormat withRecordSeparator(final String recordSeparator) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);"
      },
      {
        "txt": "} public CSVFormat withSkipHeaderRecord(final boolean skipHeaderRecord) { return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape, ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord); }"
      }
    ]
  }
]
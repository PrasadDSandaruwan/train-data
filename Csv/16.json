[
  {
    "id": 1145,
    "file_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
    "start-bug-line": 289,
    "end-bug-line": 289,
    "bug": "",
    "fix": "private final CSVRecordIterator csvRecordIterator;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static org.apache.commons.csv.Token.Type.TOKEN; import java.io.Closeable; import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringReader; import java.net.URL;"
      },
      {
        "txt": "import java.nio.charset.Charset; import java.nio.file.Files; import java.nio.file.Path; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.NoSuchElementException;"
      },
      {
        "txt": "import java.util.TreeMap; public final class CSVParser implements Iterable<CSVRecord>, Closeable { @SuppressWarnings(\"resource\") public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format); } @SuppressWarnings(\"resource\") public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format)"
      },
      {
        "txt": "throws IOException { Assertions.notNull(inputStream, \"inputStream\"); Assertions.notNull(format, \"format\"); return parse(new InputStreamReader(inputStream, charset), format); } public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(path, \"path\"); Assertions.notNull(format, \"format\"); return parse(Files.newBufferedReader(path, charset), format); }"
      },
      {
        "txt": "public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException { return new CSVParser(reader, format); } public static CSVParser parse(final String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\");"
      },
      {
        "txt": "Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(url.openStream(), charset), format); } private final CSVFormat format; private final Map<String, Integer> headerMap; private final Lexer lexer; <extra_id_0> private final List<String> recordList = new ArrayList<>(); private long recordNumber; private final long characterOffset; private final Token reusableToken = new Token(); public CSVParser(final Reader reader, final CSVFormat format) throws IOException { this(reader, format, 0, 1);"
      },
      {
        "txt": "public CSVParser(final Reader reader, final CSVFormat format) throws IOException { this(reader, format, 0, 1); } @SuppressWarnings(\"resource\") public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber) throws IOException { Assertions.notNull(reader, \"reader\"); Assertions.notNull(format, \"format\"); this.format = format; this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));"
      },
      {
        "txt": "this.headerMap = this.initializeHeader(); this.characterOffset = characterOffset; this.recordNumber = recordNumber - 1; } private void addRecordValue(final boolean lastRecord) { final String input = this.reusableToken.content.toString(); final String inputClean = this.format.getTrim() ? input.trim() : input; if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) { return; }"
      },
      {
        "txt": "final String nullString = this.format.getNullString(); this.recordList.add(inputClean.equals(nullString) ? null : inputClean); } @Override public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } } public long getCurrentLineNumber() {"
      },
      {
        "txt": "return this.lexer.getCurrentLineNumber(); } public String getFirstEndOfLine() { return lexer.getFirstEol(); } public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap); } public long getRecordNumber() { return this.recordNumber;"
      },
      {
        "txt": "} public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } private Map<String, Integer> initializeHeader() throws IOException {"
      },
      {
        "txt": "Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = this.format.getIgnoreHeaderCase() ? new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) : new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) {"
      },
      {
        "txt": "headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) {"
      },
      {
        "txt": "final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header == null || header.trim().isEmpty(); if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } }"
      },
      {
        "txt": "} return hdrMap; } public boolean isClosed() { return this.lexer.isClosed(); } @Override public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current;"
      },
      {
        "txt": "private CSVRecord getNextRecord() { try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new IllegalStateException( e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e); } } @Override public boolean hasNext() {"
      },
      {
        "txt": "if (CSVParser.this.isClosed()) { return false; } if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } @Override public CSVRecord next() {"
      },
      {
        "txt": "if (CSVParser.this.isClosed()) { throw new NoSuchElementException(\"CSVParser has been closed\"); } CSVRecord next = this.current; this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); }"
      },
      {
        "txt": "} return next; } @Override public void remove() { throw new UnsupportedOperationException(); } }; } CSVRecord nextRecord() throws IOException {"
      },
      {
        "txt": "CSVRecord result = null; this.recordList.clear(); StringBuilder sb = null; final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset; do { this.reusableToken.reset(); this.lexer.nextToken(this.reusableToken); switch (this.reusableToken.type) { case TOKEN: this.addRecordValue(false);"
      },
      {
        "txt": "break; case EORECORD: this.addRecordValue(true); break; case EOF: if (this.reusableToken.isReady) { this.addRecordValue(true); } break; case INVALID:"
      },
      {
        "txt": "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\"); case COMMENT: // Ignored currently if (sb == null) { // first comment for this record sb = new StringBuilder(); } else { sb.append(Constants.LF); } sb.append(this.reusableToken.content); this.reusableToken.type = TOKEN; // Read another token break;"
      },
      {
        "txt": "default: throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type); } } while (this.reusableToken.type == TOKEN); if (!this.recordList.isEmpty()) { this.recordNumber++; final String comment = sb == null ? null : sb.toString(); result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment, this.recordNumber, startCharPosition); }"
      },
      {
        "txt": "return result; }"
      }
    ]
  },
  {
    "id": 1146,
    "file_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
    "start-bug-line": 357,
    "end-bug-line": 357,
    "bug": "",
    "fix": "this.csvRecordIterator = new CSVRecordIterator();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Token.Type.TOKEN; import java.io.Closeable; import java.io.File; import java.io.FileInputStream;"
      },
      {
        "txt": "import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringReader; import java.net.URL; import java.nio.charset.Charset; import java.nio.file.Files; import java.nio.file.Path; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.NoSuchElementException; import java.util.TreeMap; public final class CSVParser implements Iterable<CSVRecord>, Closeable { @SuppressWarnings(\"resource\") public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException {"
      },
      {
        "txt": "Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format); } @SuppressWarnings(\"resource\") public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(inputStream, \"inputStream\"); Assertions.notNull(format, \"format\"); return parse(new InputStreamReader(inputStream, charset), format);"
      },
      {
        "txt": "} public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(path, \"path\"); Assertions.notNull(format, \"format\"); return parse(Files.newBufferedReader(path, charset), format); } public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException { return new CSVParser(reader, format); } public static CSVParser parse(final String string, final CSVFormat format) throws IOException {"
      },
      {
        "txt": "Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\"); Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(url.openStream(), charset), format); }"
      },
      {
        "txt": "private final CSVFormat format; private final Map<String, Integer> headerMap; private final Lexer lexer; private final List<String> recordList = new ArrayList<>(); private long recordNumber; private final long characterOffset; private final Token reusableToken = new Token(); public CSVParser(final Reader reader, final CSVFormat format) throws IOException { this(reader, format, 0, 1); }"
      },
      {
        "txt": "public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber) throws IOException { Assertions.notNull(reader, \"reader\"); Assertions.notNull(format, \"format\"); this.format = format; this.lexer = new Lexer(format, new ExtendedBufferedReader(reader)); <extra_id_0> this.characterOffset = characterOffset; this.recordNumber = recordNumber - 1; } private void addRecordValue(final boolean lastRecord) { final String input = this.reusableToken.content.toString(); final String inputClean = this.format.getTrim() ? input.trim() : input;"
      },
      {
        "txt": "final String input = this.reusableToken.content.toString(); final String inputClean = this.format.getTrim() ? input.trim() : input; if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) { return; } final String nullString = this.format.getNullString(); this.recordList.add(inputClean.equals(nullString) ? null : inputClean); } @Override public void close() throws IOException {"
      },
      {
        "txt": "if (this.lexer != null) { this.lexer.close(); } } public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber(); } public String getFirstEndOfLine() { return lexer.getFirstEol(); }"
      },
      {
        "txt": "public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap); } public long getRecordNumber() { return this.recordNumber; } public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) {"
      },
      {
        "txt": "records.add(rec); } return records; } private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null; final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = this.format.getIgnoreHeaderCase() ? new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :"
      },
      {
        "txt": "new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values(); } } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord();"
      },
      {
        "txt": "} headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i]; final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header == null || header.trim().isEmpty(); if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +"
      },
      {
        "txt": "\"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } } return hdrMap; } public boolean isClosed() { return this.lexer.isClosed();"
      },
      {
        "txt": "} @Override public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current; private CSVRecord getNextRecord() { try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new IllegalStateException("
      },
      {
        "txt": "e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e); } } @Override public boolean hasNext() { if (CSVParser.this.isClosed()) { return false; } if (this.current == null) { this.current = this.getNextRecord();"
      },
      {
        "txt": "} return this.current != null; } @Override public CSVRecord next() { if (CSVParser.this.isClosed()) { throw new NoSuchElementException(\"CSVParser has been closed\"); } CSVRecord next = this.current; this.current = null;"
      },
      {
        "txt": "if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); } } return next; } @Override public void remove() {"
      },
      {
        "txt": "throw new UnsupportedOperationException(); } }; } CSVRecord nextRecord() throws IOException { CSVRecord result = null; this.recordList.clear(); StringBuilder sb = null; final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset; do {"
      },
      {
        "txt": "this.reusableToken.reset(); this.lexer.nextToken(this.reusableToken); switch (this.reusableToken.type) { case TOKEN: this.addRecordValue(false); break; case EORECORD: this.addRecordValue(true); break; case EOF:"
      },
      {
        "txt": "if (this.reusableToken.isReady) { this.addRecordValue(true); } break; case INVALID: throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\"); case COMMENT: // Ignored currently if (sb == null) { // first comment for this record sb = new StringBuilder(); } else {"
      },
      {
        "txt": "sb.append(Constants.LF); } sb.append(this.reusableToken.content); this.reusableToken.type = TOKEN; // Read another token break; default: throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type); } } while (this.reusableToken.type == TOKEN); if (!this.recordList.isEmpty()) {"
      },
      {
        "txt": "this.recordNumber++; final String comment = sb == null ? null : sb.toString(); result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment, this.recordNumber, startCharPosition); } return result; }"
      }
    ]
  },
  {
    "id": 1147,
    "file_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
    "start-bug-line": 523,
    "end-bug-line": 523,
    "bug": "return new Iterator<CSVRecord>() {",
    "fix": "return csvRecordIterator; }  class CSVRecordIterator implements Iterator<CSVRecord> {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Token.Type.TOKEN; import java.io.Closeable;"
      },
      {
        "txt": "import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringReader; import java.net.URL; import java.nio.charset.Charset; import java.nio.file.Files;"
      },
      {
        "txt": "import java.nio.file.Path; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.NoSuchElementException; import java.util.TreeMap; public final class CSVParser implements Iterable<CSVRecord>, Closeable {"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format); } @SuppressWarnings(\"resource\") public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(inputStream, \"inputStream\");"
      },
      {
        "txt": "Assertions.notNull(format, \"format\"); return parse(new InputStreamReader(inputStream, charset), format); } public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(path, \"path\"); Assertions.notNull(format, \"format\"); return parse(Files.newBufferedReader(path, charset), format); } public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException { return new CSVParser(reader, format);"
      },
      {
        "txt": "} public static CSVParser parse(final String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\"); Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\");"
      },
      {
        "txt": "return new CSVParser(new InputStreamReader(url.openStream(), charset), format); } private final CSVFormat format; private final Map<String, Integer> headerMap; private final Lexer lexer; private final List<String> recordList = new ArrayList<>(); private long recordNumber; private final long characterOffset; private final Token reusableToken = new Token(); public CSVParser(final Reader reader, final CSVFormat format) throws IOException {"
      },
      {
        "txt": "this(reader, format, 0, 1); } @SuppressWarnings(\"resource\") public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber) throws IOException { Assertions.notNull(reader, \"reader\"); Assertions.notNull(format, \"format\"); this.format = format; this.lexer = new Lexer(format, new ExtendedBufferedReader(reader)); this.headerMap = this.initializeHeader();"
      },
      {
        "txt": "this.characterOffset = characterOffset; this.recordNumber = recordNumber - 1; } private void addRecordValue(final boolean lastRecord) { final String input = this.reusableToken.content.toString(); final String inputClean = this.format.getTrim() ? input.trim() : input; if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) { return; } final String nullString = this.format.getNullString();"
      },
      {
        "txt": "this.recordList.add(inputClean.equals(nullString) ? null : inputClean); } @Override public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } } public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber();"
      },
      {
        "txt": "} public String getFirstEndOfLine() { return lexer.getFirstEol(); } public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap); } public long getRecordNumber() { return this.recordNumber; }"
      },
      {
        "txt": "public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null;"
      },
      {
        "txt": "final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = this.format.getIgnoreHeaderCase() ? new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) : new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values();"
      },
      {
        "txt": "} } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i];"
      },
      {
        "txt": "final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header == null || header.trim().isEmpty(); if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } }"
      },
      {
        "txt": "} public boolean isClosed() { return this.lexer.isClosed(); } @Override public Iterator<CSVRecord> iterator() { <extra_id_0> private CSVRecord current; private CSVRecord getNextRecord() { try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new IllegalStateException("
      },
      {
        "txt": "} catch (final IOException e) { throw new IllegalStateException( e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e); } } @Override public boolean hasNext() { if (CSVParser.this.isClosed()) { return false; }"
      },
      {
        "txt": "if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } @Override public CSVRecord next() { if (CSVParser.this.isClosed()) { throw new NoSuchElementException(\"CSVParser has been closed\"); }"
      },
      {
        "txt": "CSVRecord next = this.current; this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); } } return next; }"
      },
      {
        "txt": "@Override public void remove() { throw new UnsupportedOperationException(); } }; } CSVRecord nextRecord() throws IOException { CSVRecord result = null; this.recordList.clear(); StringBuilder sb = null;"
      },
      {
        "txt": "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset; do { this.reusableToken.reset(); this.lexer.nextToken(this.reusableToken); switch (this.reusableToken.type) { case TOKEN: this.addRecordValue(false); break; case EORECORD: this.addRecordValue(true);"
      },
      {
        "txt": "break; case EOF: if (this.reusableToken.isReady) { this.addRecordValue(true); } break; case INVALID: throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\"); case COMMENT: // Ignored currently if (sb == null) { // first comment for this record"
      },
      {
        "txt": "sb = new StringBuilder(); } else { sb.append(Constants.LF); } sb.append(this.reusableToken.content); this.reusableToken.type = TOKEN; // Read another token break; default: throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type); }"
      },
      {
        "txt": "} while (this.reusableToken.type == TOKEN); if (!this.recordList.isEmpty()) { this.recordNumber++; final String comment = sb == null ? null : sb.toString(); result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment, this.recordNumber, startCharPosition); } return result; }"
      }
    ]
  },
  {
    "id": 1148,
    "file_path": "src/main/java/org/apache/commons/csv/CSVParser.java",
    "start-bug-line": 571,
    "end-bug-line": 571,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.csv; import static org.apache.commons.csv.Token.Type.TOKEN; import java.io.Closeable;"
      },
      {
        "txt": "import java.io.File; import java.io.FileInputStream; import java.io.IOException; import java.io.InputStream; import java.io.InputStreamReader; import java.io.Reader; import java.io.StringReader; import java.net.URL; import java.nio.charset.Charset; import java.nio.file.Files;"
      },
      {
        "txt": "import java.nio.file.Path; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.NoSuchElementException; import java.util.TreeMap; public final class CSVParser implements Iterable<CSVRecord>, Closeable {"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") public static CSVParser parse(final File file, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(file, \"file\"); Assertions.notNull(format, \"format\"); return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format); } @SuppressWarnings(\"resource\") public static CSVParser parse(final InputStream inputStream, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(inputStream, \"inputStream\");"
      },
      {
        "txt": "Assertions.notNull(format, \"format\"); return parse(new InputStreamReader(inputStream, charset), format); } public static CSVParser parse(final Path path, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(path, \"path\"); Assertions.notNull(format, \"format\"); return parse(Files.newBufferedReader(path, charset), format); } public static CSVParser parse(final Reader reader, final CSVFormat format) throws IOException { return new CSVParser(reader, format);"
      },
      {
        "txt": "} public static CSVParser parse(final String string, final CSVFormat format) throws IOException { Assertions.notNull(string, \"string\"); Assertions.notNull(format, \"format\"); return new CSVParser(new StringReader(string), format); } public static CSVParser parse(final URL url, final Charset charset, final CSVFormat format) throws IOException { Assertions.notNull(url, \"url\"); Assertions.notNull(charset, \"charset\"); Assertions.notNull(format, \"format\");"
      },
      {
        "txt": "return new CSVParser(new InputStreamReader(url.openStream(), charset), format); } private final CSVFormat format; private final Map<String, Integer> headerMap; private final Lexer lexer; private final List<String> recordList = new ArrayList<>(); private long recordNumber; private final long characterOffset; private final Token reusableToken = new Token(); public CSVParser(final Reader reader, final CSVFormat format) throws IOException {"
      },
      {
        "txt": "this(reader, format, 0, 1); } @SuppressWarnings(\"resource\") public CSVParser(final Reader reader, final CSVFormat format, final long characterOffset, final long recordNumber) throws IOException { Assertions.notNull(reader, \"reader\"); Assertions.notNull(format, \"format\"); this.format = format; this.lexer = new Lexer(format, new ExtendedBufferedReader(reader)); this.headerMap = this.initializeHeader();"
      },
      {
        "txt": "this.characterOffset = characterOffset; this.recordNumber = recordNumber - 1; } private void addRecordValue(final boolean lastRecord) { final String input = this.reusableToken.content.toString(); final String inputClean = this.format.getTrim() ? input.trim() : input; if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter()) { return; } final String nullString = this.format.getNullString();"
      },
      {
        "txt": "this.recordList.add(inputClean.equals(nullString) ? null : inputClean); } @Override public void close() throws IOException { if (this.lexer != null) { this.lexer.close(); } } public long getCurrentLineNumber() { return this.lexer.getCurrentLineNumber();"
      },
      {
        "txt": "} public String getFirstEndOfLine() { return lexer.getFirstEol(); } public Map<String, Integer> getHeaderMap() { return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap); } public long getRecordNumber() { return this.recordNumber; }"
      },
      {
        "txt": "public List<CSVRecord> getRecords() throws IOException { CSVRecord rec; final List<CSVRecord> records = new ArrayList<>(); while ((rec = this.nextRecord()) != null) { records.add(rec); } return records; } private Map<String, Integer> initializeHeader() throws IOException { Map<String, Integer> hdrMap = null;"
      },
      {
        "txt": "final String[] formatHeader = this.format.getHeader(); if (formatHeader != null) { hdrMap = this.format.getIgnoreHeaderCase() ? new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) : new LinkedHashMap<String, Integer>(); String[] headerRecord = null; if (formatHeader.length == 0) { final CSVRecord nextRecord = this.nextRecord(); if (nextRecord != null) { headerRecord = nextRecord.values();"
      },
      {
        "txt": "} } else { if (this.format.getSkipHeaderRecord()) { this.nextRecord(); } headerRecord = formatHeader; } if (headerRecord != null) { for (int i = 0; i < headerRecord.length; i++) { final String header = headerRecord[i];"
      },
      {
        "txt": "final boolean containsHeader = hdrMap.containsKey(header); final boolean emptyHeader = header == null || header.trim().isEmpty(); if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames())) { throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header + \"\\\" in \" + Arrays.toString(headerRecord)); } hdrMap.put(header, Integer.valueOf(i)); } } }"
      },
      {
        "txt": "return hdrMap; } public boolean isClosed() { return this.lexer.isClosed(); } @Override public Iterator<CSVRecord> iterator() { return new Iterator<CSVRecord>() { private CSVRecord current; private CSVRecord getNextRecord() {"
      },
      {
        "txt": "try { return CSVParser.this.nextRecord(); } catch (final IOException e) { throw new IllegalStateException( e.getClass().getSimpleName() + \" reading next record: \" + e.toString(), e); } } @Override public boolean hasNext() { if (CSVParser.this.isClosed()) {"
      },
      {
        "txt": "return false; } if (this.current == null) { this.current = this.getNextRecord(); } return this.current != null; } @Override public CSVRecord next() { if (CSVParser.this.isClosed()) {"
      },
      {
        "txt": "throw new NoSuchElementException(\"CSVParser has been closed\"); } CSVRecord next = this.current; this.current = null; if (next == null) { next = this.getNextRecord(); if (next == null) { throw new NoSuchElementException(\"No more CSV records available\"); } }"
      },
      {
        "txt": "} @Override public void remove() { throw new UnsupportedOperationException(); } }; <extra_id_0> CSVRecord nextRecord() throws IOException { CSVRecord result = null; this.recordList.clear(); StringBuilder sb = null; final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset; do {"
      },
      {
        "txt": "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset; do { this.reusableToken.reset(); this.lexer.nextToken(this.reusableToken); switch (this.reusableToken.type) { case TOKEN: this.addRecordValue(false); break; case EORECORD: this.addRecordValue(true);"
      },
      {
        "txt": "break; case EOF: if (this.reusableToken.isReady) { this.addRecordValue(true); } break; case INVALID: throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\"); case COMMENT: // Ignored currently if (sb == null) { // first comment for this record"
      },
      {
        "txt": "sb = new StringBuilder(); } else { sb.append(Constants.LF); } sb.append(this.reusableToken.content); this.reusableToken.type = TOKEN; // Read another token break; default: throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type); }"
      },
      {
        "txt": "} while (this.reusableToken.type == TOKEN); if (!this.recordList.isEmpty()) { this.recordNumber++; final String comment = sb == null ? null : sb.toString(); result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment, this.recordNumber, startCharPosition); } return result; }"
      }
    ]
  }
]
[
  {
    "id": 1227,
    "file_path": "src/main/java/com/fasterxml/jackson/core/JsonPointer.java",
    "start-bug-line": 193,
    "end-bug-line": 193,
    "bug": "char c = str.charAt(i++);",
    "fix": "char c = str.charAt(i);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core; import com.fasterxml.jackson.core.io.NumberInput; public class JsonPointer { protected final static JsonPointer EMPTY = new JsonPointer(); protected final JsonPointer _nextSegment; protected final String _asString; protected final String _matchingPropertyName; protected final int _matchingElementIndex;"
      },
      {
        "txt": "protected JsonPointer() { _nextSegment = null; _matchingPropertyName = \"\"; _matchingElementIndex = -1; _asString = \"\"; } protected JsonPointer(String fullString, String segment, JsonPointer next) { _asString = fullString; _nextSegment = next; _matchingPropertyName = segment;"
      },
      {
        "txt": "_matchingElementIndex = _parseIndex(segment); } public static JsonPointer compile(String input) throws IllegalArgumentException { if ((input == null) || input.length() == 0) { return EMPTY; } if (input.charAt(0) != '/') { throw new IllegalArgumentException(\"Invalid input: JSON Pointer expression must start with '/': \"+\"\\\"\"+input+\"\\\"\"); }"
      },
      {
        "txt": "return _parseTail(input); } public static JsonPointer valueOf(String input) { return compile(input); } public static JsonPointer fromSegment(String... segments) { if (segments.length == 0) { return EMPTY; } JsonPointer prev = null; for (String segment : segments) {"
      },
      {
        "txt": "JsonPointer next = new JsonPointer() } } public boolean matches() { return _nextSegment == null; } public String getMatchingProperty() { return _matchingPropertyName; } public int getMatchingIndex() { return _matchingElementIndex; } public boolean mayMatchProperty() { return _matchingPropertyName != null; } public boolean mayMatchElement() { return _matchingElementIndex >= 0; } public JsonPointer matchProperty(String name) { if (_nextSegment == null || !_matchingPropertyName.equals(name)) {"
      },
      {
        "txt": "return null; } return _nextSegment; } public JsonPointer matchElement (int index) { if ((index != _matchingElementIndex) || (index < 0)) { return null; } return _nextSegment; }"
      },
      {
        "txt": "public JsonPointer tail() { return _nextSegment; } @Override public String toString() { return _asString; } @Override public int hashCode() { return _asString.hashCode(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (!(o instanceof JsonPointer)) return false; return _asString.equals(((JsonPointer) o)._asString);"
      },
      {
        "txt": "private final static int _parseIndex(String str) { final int len = str.length(); if (len == 0 || len > 10) { return -1; } for (int i = 0; i < len; ++i) { <extra_id_0> if (c > '9' || c < '0') { return -1; } } if (len == 10) { long l = NumberInput.parseLong(str);"
      },
      {
        "txt": "if (len == 10) { long l = NumberInput.parseLong(str); if (l > Integer.MAX_VALUE) { return -1; } } return NumberInput.parseInt(str); } protected static JsonPointer _parseTail(String input) { final int end = input.length();"
      },
      {
        "txt": "for (int i = 1; i < end; ) { char c = input.charAt(i); if (c == '/') { // common case, got a segment return new JsonPointer(input, input.substring(1, i), _parseTail(input.substring(i))); } ++i; if (c == '~' && i < end) { // possibly, quote return _parseQuotedTail(input, i); }"
      },
      {
        "txt": "} return new JsonPointer(input, input.substring(1), EMPTY); } protected static JsonPointer _parseQuotedTail(String input, int i) { final int end = input.length(); StringBuilder sb = new StringBuilder(Math.max(16, end)); if (i > 2) { sb.append(input, 1, i-1); } _appendEscape(sb, input.charAt(i++));"
      },
      {
        "txt": "while (i < end) { char c = input.charAt(i); if (c == '/') { // end is nigh! return new JsonPointer(input, sb.toString(), _parseTail(input.substring(i))); // need to push back slash } ++i; if (c == '~' && i < end) { _appendEscape(sb, input.charAt(i++)); continue;"
      },
      {
        "txt": "} sb.append(c); } return new JsonPointer(input, sb.toString(), EMPTY); } private static void _appendEscape(StringBuilder sb, char c) { if (c == '0') { c = '~'; } else if (c == '1') { c = '/';"
      },
      {
        "txt": "} else { sb.append('~'); } sb.append(c); }"
      }
    ]
  }
]
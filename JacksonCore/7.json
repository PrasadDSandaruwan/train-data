[
  {
    "id": 1229,
    "file_path": "src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java",
    "start-bug-line": 169,
    "end-bug-line": 169,
    "bug": "",
    "fix": "if (!_gotName) { return STATUS_EXPECT_NAME; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.json; import com.fasterxml.jackson.core.*; public class JsonWriteContext extends JsonStreamContext { public final static int STATUS_OK_AS_IS = 0; public final static int STATUS_OK_AFTER_COMMA = 1; public final static int STATUS_OK_AFTER_COLON = 2;"
      },
      {
        "txt": "public final static int STATUS_OK_AFTER_SPACE = 3; // in root context public final static int STATUS_EXPECT_VALUE = 4; public final static int STATUS_EXPECT_NAME = 5; protected final JsonWriteContext _parent; protected DupDetector _dups; protected JsonWriteContext _child = null; protected String _currentName; protected Object _currentValue; protected boolean _gotName; protected JsonWriteContext(int type, JsonWriteContext parent, DupDetector dups) {"
      },
      {
        "txt": "super(); _type = type; _parent = parent; _dups = dups; _index = -1; } protected JsonWriteContext reset(int type) { _type = type; _index = -1; _currentName = null;"
      },
      {
        "txt": "_gotName = false; _currentValue = null; if (_dups != null) { _dups.reset(); } return this; } public JsonWriteContext withDupDetector(DupDetector dups) { _dups = dups; return this; } @Override"
      },
      {
        "txt": "public Object getCurrentValue() { return _currentValue; } @Override public void setCurrentValue(Object v) { _currentValue = v; } @Deprecated public static JsonWriteContext createRootContext() { return createRootContext(null); } public static JsonWriteContext createRootContext(DupDetector dd) {"
      },
      {
        "txt": "return new JsonWriteContext(TYPE_ROOT, null, dd); } public JsonWriteContext createChildArrayContext() { JsonWriteContext ctxt = _child; if (ctxt == null) { _child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child()); return ctxt; } return ctxt.reset(TYPE_ARRAY); }"
      },
      {
        "txt": "public JsonWriteContext createChildObjectContext() { JsonWriteContext ctxt = _child; if (ctxt == null) { _child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child()); return ctxt; } return ctxt.reset(TYPE_OBJECT); } @Override public final JsonWriteContext getParent() { return _parent; } @Override public final String getCurrentName() { return _currentName; }"
      },
      {
        "txt": "public DupDetector getDupDetector() { return _dups; } public int writeFieldName(String name) throws JsonProcessingException { if (_gotName) { return JsonWriteContext.STATUS_EXPECT_VALUE; } _gotName = true; _currentName = name; if (_dups != null) { _checkDup(_dups, name); }"
      },
      {
        "txt": "} private final void _checkDup(DupDetector dd, String name) throws JsonProcessingException { if (dd.isDup(name)) { throw new JsonGenerationException(\"Duplicate field '\"+name+\"'\"); } } public int writeValue() { if (_type == TYPE_OBJECT) { <extra_id_0> ++_index; return STATUS_OK_AFTER_COLON; } if (_type == TYPE_ARRAY) { int ix = _index; ++_index;"
      },
      {
        "txt": "int ix = _index; ++_index; return (ix < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA; } ++_index; return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE; } protected void appendDesc(StringBuilder sb) { if (_type == TYPE_OBJECT) { sb.append('{');"
      },
      {
        "txt": "if (_currentName != null) { sb.append('\"'); sb.append(_currentName); sb.append('\"'); } else { sb.append('?'); } sb.append('}'); } else if (_type == TYPE_ARRAY) { sb.append('[');"
      },
      {
        "txt": "sb.append(getCurrentIndex()); sb.append(']'); } else { sb.append(\"/\"); } } @Override public String toString() { StringBuilder sb = new StringBuilder(64); appendDesc(sb); return sb.toString();"
      }
    ]
  }
]
[
  {
    "id": 1256,
    "file_path": "src/main/java/com/fasterxml/jackson/core/io/IOContext.java",
    "start-bug-line": 274,
    "end-bug-line": 274,
    "bug": "if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }",
    "fix": "if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.io; import com.fasterxml.jackson.core.JsonEncoding; import com.fasterxml.jackson.core.util.BufferRecycler; import com.fasterxml.jackson.core.util.TextBuffer; public class IOContext { protected final Object _sourceRef; protected JsonEncoding _encoding; protected final boolean _managedResource; protected final BufferRecycler _bufferRecycler;"
      },
      {
        "txt": "protected byte[] _readIOBuffer; protected byte[] _writeEncodingBuffer; protected byte[] _base64Buffer; protected char[] _tokenCBuffer; protected char[] _concatCBuffer; protected char[] _nameCopyBuffer; public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource) { _bufferRecycler = br; _sourceRef = sourceRef;"
      },
      {
        "txt": "_managedResource = managedResource; } public void setEncoding(JsonEncoding enc) { _encoding = enc; } public IOContext withEncoding(JsonEncoding enc) { _encoding = enc; return this; } public Object getSourceReference() { return _sourceRef; }"
      },
      {
        "txt": "public JsonEncoding getEncoding() { return _encoding; } public boolean isResourceManaged() { return _managedResource; } public TextBuffer constructTextBuffer() { return new TextBuffer(_bufferRecycler); } public byte[] allocReadIOBuffer() { _verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER)); } public byte[] allocReadIOBuffer(int minSize) {"
      },
      {
        "txt": "_verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, minSize)); } public byte[] allocWriteEncodingBuffer() { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER)); } public byte[] allocWriteEncodingBuffer(int minSize) { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, minSize));"
      },
      {
        "txt": "} public byte[] allocBase64Buffer() { _verifyAlloc(_base64Buffer); return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER)); } public char[] allocTokenBuffer() { _verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER)); } public char[] allocTokenBuffer(int minSize) {"
      },
      {
        "txt": "_verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize)); } public char[] allocConcatBuffer() { _verifyAlloc(_concatCBuffer); return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER)); } public char[] allocNameCopyBuffer(int minSize) { _verifyAlloc(_nameCopyBuffer); return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, minSize));"
      },
      {
        "txt": "} public void releaseReadIOBuffer(byte[] buf) { if (buf != null) { _verifyRelease(buf, _readIOBuffer); _readIOBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf); } } public void releaseWriteEncodingBuffer(byte[] buf) { if (buf != null) {"
      },
      {
        "txt": "_verifyRelease(buf, _writeEncodingBuffer); _writeEncodingBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, buf); } } public void releaseBase64Buffer(byte[] buf) { if (buf != null) { // sanity checks, release once-and-only-once, must be one owned _verifyRelease(buf, _base64Buffer); _base64Buffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, buf);"
      },
      {
        "txt": "} } public void releaseTokenBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _tokenCBuffer); _tokenCBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, buf); } } public void releaseConcatBuffer(char[] buf) {"
      },
      {
        "txt": "if (buf != null) { _verifyRelease(buf, _concatCBuffer); _concatCBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf); } } public void releaseNameCopyBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _nameCopyBuffer); _nameCopyBuffer = null;"
      },
      {
        "txt": "} } protected final void _verifyAlloc(Object buffer) { if (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); } } protected final void _verifyRelease(byte[] toRelease, byte[] src) { <extra_id_0> } protected final void _verifyRelease(char[] toRelease, char[] src) { if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); } } private IllegalArgumentException wrongBuf() { return new IllegalArgumentException(\"Trying to release buffer not owned by the context\");"
      },
      {
        "txt": "private IllegalArgumentException wrongBuf() { return new IllegalArgumentException(\"Trying to release buffer not owned by the context\"); }"
      }
    ]
  },
  {
    "id": 1257,
    "file_path": "src/main/java/com/fasterxml/jackson/core/io/IOContext.java",
    "start-bug-line": 279,
    "end-bug-line": 279,
    "bug": "if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }",
    "fix": "if ((toRelease != src) && (toRelease.length < src.length)) { throw wrongBuf(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.io; import com.fasterxml.jackson.core.JsonEncoding; import com.fasterxml.jackson.core.util.BufferRecycler;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.util.TextBuffer; public class IOContext { protected final Object _sourceRef; protected JsonEncoding _encoding; protected final boolean _managedResource; protected final BufferRecycler _bufferRecycler; protected byte[] _readIOBuffer; protected byte[] _writeEncodingBuffer; protected byte[] _base64Buffer;"
      },
      {
        "txt": "protected char[] _tokenCBuffer; protected char[] _concatCBuffer; protected char[] _nameCopyBuffer; public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource) { _bufferRecycler = br; _sourceRef = sourceRef; _managedResource = managedResource; } public void setEncoding(JsonEncoding enc) {"
      },
      {
        "txt": "_encoding = enc; } public IOContext withEncoding(JsonEncoding enc) { _encoding = enc; return this; } public Object getSourceReference() { return _sourceRef; } public JsonEncoding getEncoding() { return _encoding; } public boolean isResourceManaged() { return _managedResource; } public TextBuffer constructTextBuffer() {"
      },
      {
        "txt": "return new TextBuffer(_bufferRecycler); } public byte[] allocReadIOBuffer() { _verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER)); } public byte[] allocReadIOBuffer(int minSize) { _verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, minSize)); }"
      },
      {
        "txt": "public byte[] allocWriteEncodingBuffer() { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER)); } public byte[] allocWriteEncodingBuffer(int minSize) { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, minSize)); } public byte[] allocBase64Buffer() { _verifyAlloc(_base64Buffer);"
      },
      {
        "txt": "return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER)); } public char[] allocTokenBuffer() { _verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER)); } public char[] allocTokenBuffer(int minSize) { _verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize)); }"
      },
      {
        "txt": "public char[] allocConcatBuffer() { _verifyAlloc(_concatCBuffer); return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER)); } public char[] allocNameCopyBuffer(int minSize) { _verifyAlloc(_nameCopyBuffer); return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, minSize)); } public void releaseReadIOBuffer(byte[] buf) { if (buf != null) {"
      },
      {
        "txt": "_verifyRelease(buf, _readIOBuffer); _readIOBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf); } } public void releaseWriteEncodingBuffer(byte[] buf) { if (buf != null) { _verifyRelease(buf, _writeEncodingBuffer); _writeEncodingBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, buf);"
      },
      {
        "txt": "} } public void releaseBase64Buffer(byte[] buf) { if (buf != null) { // sanity checks, release once-and-only-once, must be one owned _verifyRelease(buf, _base64Buffer); _base64Buffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, buf); } } public void releaseTokenBuffer(char[] buf) {"
      },
      {
        "txt": "if (buf != null) { _verifyRelease(buf, _tokenCBuffer); _tokenCBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, buf); } } public void releaseConcatBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _concatCBuffer); _concatCBuffer = null;"
      },
      {
        "txt": "_bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf); } } public void releaseNameCopyBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _nameCopyBuffer); _nameCopyBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, buf); } }"
      },
      {
        "txt": "if (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); } } protected final void _verifyRelease(byte[] toRelease, byte[] src) { if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); } } protected final void _verifyRelease(char[] toRelease, char[] src) { <extra_id_0> } private IllegalArgumentException wrongBuf() { return new IllegalArgumentException(\"Trying to release buffer not owned by the context\"); } }"
      }
    ]
  },
  {
    "id": 1258,
    "file_path": "src/main/java/com/fasterxml/jackson/core/io/IOContext.java",
    "start-bug-line": 284,
    "end-bug-line": 284,
    "bug": "return new IllegalArgumentException(\"Trying to release buffer not owned by the context\");",
    "fix": "return new IllegalArgumentException(\"Trying to release buffer smaller than original\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.io; import com.fasterxml.jackson.core.JsonEncoding; import com.fasterxml.jackson.core.util.BufferRecycler; import com.fasterxml.jackson.core.util.TextBuffer; public class IOContext {"
      },
      {
        "txt": "protected final Object _sourceRef; protected JsonEncoding _encoding; protected final boolean _managedResource; protected final BufferRecycler _bufferRecycler; protected byte[] _readIOBuffer; protected byte[] _writeEncodingBuffer; protected byte[] _base64Buffer; protected char[] _tokenCBuffer; protected char[] _concatCBuffer; protected char[] _nameCopyBuffer;"
      },
      {
        "txt": "public IOContext(BufferRecycler br, Object sourceRef, boolean managedResource) { _bufferRecycler = br; _sourceRef = sourceRef; _managedResource = managedResource; } public void setEncoding(JsonEncoding enc) { _encoding = enc; } public IOContext withEncoding(JsonEncoding enc) {"
      },
      {
        "txt": "_encoding = enc; return this; } public Object getSourceReference() { return _sourceRef; } public JsonEncoding getEncoding() { return _encoding; } public boolean isResourceManaged() { return _managedResource; } public TextBuffer constructTextBuffer() { return new TextBuffer(_bufferRecycler); } public byte[] allocReadIOBuffer() {"
      },
      {
        "txt": "_verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER)); } public byte[] allocReadIOBuffer(int minSize) { _verifyAlloc(_readIOBuffer); return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, minSize)); } public byte[] allocWriteEncodingBuffer() { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER));"
      },
      {
        "txt": "} public byte[] allocWriteEncodingBuffer(int minSize) { _verifyAlloc(_writeEncodingBuffer); return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, minSize)); } public byte[] allocBase64Buffer() { _verifyAlloc(_base64Buffer); return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER)); } public char[] allocTokenBuffer() {"
      },
      {
        "txt": "_verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER)); } public char[] allocTokenBuffer(int minSize) { _verifyAlloc(_tokenCBuffer); return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize)); } public char[] allocConcatBuffer() { _verifyAlloc(_concatCBuffer); return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER));"
      },
      {
        "txt": "} public char[] allocNameCopyBuffer(int minSize) { _verifyAlloc(_nameCopyBuffer); return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, minSize)); } public void releaseReadIOBuffer(byte[] buf) { if (buf != null) { _verifyRelease(buf, _readIOBuffer); _readIOBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf);"
      },
      {
        "txt": "} } public void releaseWriteEncodingBuffer(byte[] buf) { if (buf != null) { _verifyRelease(buf, _writeEncodingBuffer); _writeEncodingBuffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, buf); } } public void releaseBase64Buffer(byte[] buf) {"
      },
      {
        "txt": "if (buf != null) { // sanity checks, release once-and-only-once, must be one owned _verifyRelease(buf, _base64Buffer); _base64Buffer = null; _bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, buf); } } public void releaseTokenBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _tokenCBuffer); _tokenCBuffer = null;"
      },
      {
        "txt": "_bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, buf); } } public void releaseConcatBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _concatCBuffer); _concatCBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf); } }"
      },
      {
        "txt": "public void releaseNameCopyBuffer(char[] buf) { if (buf != null) { _verifyRelease(buf, _nameCopyBuffer); _nameCopyBuffer = null; _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, buf); } } protected final void _verifyAlloc(Object buffer) { if (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); } }"
      },
      {
        "txt": "if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); } } protected final void _verifyRelease(char[] toRelease, char[] src) { if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); } } private IllegalArgumentException wrongBuf() { <extra_id_0> } }"
      }
    ]
  }
]
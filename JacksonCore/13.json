[
  {
    "id": 1255,
    "file_path": "src/main/java/com/fasterxml/jackson/core/json/JsonGeneratorImpl.java",
    "start-bug-line": 127,
    "end-bug-line": 127,
    "bug": "",
    "fix": "@Override public JsonGenerator disable(Feature f) { super.disable(f); if (f == Feature.QUOTE_FIELD_NAMES) { _cfgUnqNames = true; } return this; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.json; import java.io.IOException; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.CharTypes; import com.fasterxml.jackson.core.io.CharacterEscapes; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.util.DefaultPrettyPrinter; import com.fasterxml.jackson.core.util.VersionUtil;"
      },
      {
        "txt": "public abstract class JsonGeneratorImpl extends GeneratorBase { protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes(); final protected IOContext _ioContext; protected int[] _outputEscapes = sOutputEscapes; protected int _maximumNonEscapedChar; protected CharacterEscapes _characterEscapes; protected SerializableString _rootValueSeparator = DefaultPrettyPrinter.DEFAULT_ROOT_VALUE_SEPARATOR; protected boolean _cfgUnqNames;"
      },
      {
        "txt": "public JsonGeneratorImpl(IOContext ctxt, int features, ObjectCodec codec) { super(features, codec); _ioContext = ctxt; if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) { _maximumNonEscapedChar = 127; } _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features); } @Override"
      },
      {
        "txt": "super.enable(f); if (f == Feature.QUOTE_FIELD_NAMES) { _cfgUnqNames = false; } return this; } <extra_id_0> @Override protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures) { super._checkStdFeatureChanges(newFeatureFlags, changedFeatures); _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags); } @Override"
      },
      {
        "txt": "} @Override public JsonGenerator setHighestNonEscapedChar(int charCode) { _maximumNonEscapedChar = (charCode < 0) ? 0 : charCode; return this; } @Override public int getHighestEscapedChar() { return _maximumNonEscapedChar; }"
      },
      {
        "txt": "@Override public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { _characterEscapes = esc; if (esc == null) { // revert to standard escapes _outputEscapes = sOutputEscapes; } else { _outputEscapes = esc.getEscapeCodesForAscii(); } return this;"
      },
      {
        "txt": "} @Override public CharacterEscapes getCharacterEscapes() { return _characterEscapes; } @Override public JsonGenerator setRootValueSeparator(SerializableString sep) { _rootValueSeparator = sep; return this; }"
      },
      {
        "txt": "@Override public Version version() { return VersionUtil.versionFor(getClass()); } @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); }"
      }
    ]
  }
]
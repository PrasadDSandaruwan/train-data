[
  {
    "id": 1225,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java",
    "start-bug-line": 585,
    "end-bug-line": 585,
    "bug": "",
    "fix": "int newLen = len + (len >> 1);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.math.BigDecimal; import java.util.ArrayList; import java.util.Arrays; import com.fasterxml.jackson.core.io.NumberInput; public final class TextBuffer { final static char[] NO_CHARS = new char[0]; final static int MIN_SEGMENT_LEN = 1000;"
      },
      {
        "txt": "final static int MAX_SEGMENT_LEN = 0x40000; private final BufferRecycler _allocator; private char[] _inputBuffer; private int _inputStart; private int _inputLen; private ArrayList<char[]> _segments; private boolean _hasSegments = false; private int _segmentSize; private char[] _currentSegment; private int _currentSize;"
      },
      {
        "txt": "private String _resultString; private char[] _resultArray; public TextBuffer(BufferRecycler allocator) { _allocator = allocator; } public void releaseBuffers() { if (_allocator == null) { resetWithEmpty(); } else {"
      },
      {
        "txt": "if (_currentSegment != null) { resetWithEmpty(); char[] buf = _currentSegment; _currentSegment = null; _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf); } } } public void resetWithEmpty() {"
      },
      {
        "txt": "_inputStart = -1; // indicates shared buffer not used _currentSize = 0; _inputLen = 0; _inputBuffer = null; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments(); } }"
      },
      {
        "txt": "public void resetWithShared(char[] buf, int start, int len) { _resultString = null; _resultArray = null; _inputBuffer = buf; _inputStart = start; _inputLen = len; if (_hasSegments) { clearSegments(); }"
      },
      {
        "txt": "} public void resetWithCopy(char[] buf, int start, int len) { _inputBuffer = null; _inputStart = -1; // indicates shared buffer not used _inputLen = 0; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments();"
      },
      {
        "txt": "} else if (_currentSegment == null) { _currentSegment = buf(len); } _currentSize = _segmentSize = 0; append(buf, start, len); } public void resetWithString(String value) { _inputBuffer = null; _inputStart = -1;"
      },
      {
        "txt": "_inputLen = 0; _resultString = value; _resultArray = null; if (_hasSegments) { clearSegments(); } _currentSize = 0; } private char[] buf(int needed) {"
      },
      {
        "txt": "if (_allocator != null) { return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed); } return new char[Math.max(needed, MIN_SEGMENT_LEN)]; } private void clearSegments() { _hasSegments = false; _segments.clear(); _currentSize = _segmentSize = 0;"
      },
      {
        "txt": "} public int size() { if (_inputStart >= 0) { // shared copy from input buf return _inputLen; } if (_resultArray != null) { return _resultArray.length; } if (_resultString != null) { return _resultString.length();"
      },
      {
        "txt": "} return _segmentSize + _currentSize; } public int getTextOffset() { return (_inputStart >= 0) ? _inputStart : 0; } public boolean hasTextAsCharacters() { if (_inputStart >= 0 || _resultArray != null) return true; if (_resultString != null) return false;"
      },
      {
        "txt": "return true; } public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } if (!_hasSegments) return _currentSegment;"
      },
      {
        "txt": "return contentsAsArray(); } public String contentsAsString() { if (_resultString == null) { if (_resultArray != null) { _resultString = new String(_resultArray); } else { if (_inputStart >= 0) { if (_inputLen < 1) {"
      },
      {
        "txt": "return (_resultString = \"\"); } _resultString = new String(_inputBuffer, _inputStart, _inputLen); } else { // nope... need to copy int segLen = _segmentSize; int currLen = _currentSize; if (segLen == 0) { // yup _resultString = (currLen == 0) ? \"\" : new String(_currentSegment, 0, currLen); } else { // no, need to combine StringBuilder sb = new StringBuilder(segLen + currLen);"
      },
      {
        "txt": "if (_segments != null) { for (int i = 0, len = _segments.size(); i < len; ++i) { char[] curr = _segments.get(i); sb.append(curr, 0, curr.length); } } sb.append(_currentSegment, 0, _currentSize); _resultString = sb.toString(); } }"
      },
      {
        "txt": "} } return _resultString; } public char[] contentsAsArray() { char[] result = _resultArray; if (result == null) { _resultArray = result = resultArray(); } return result;"
      },
      {
        "txt": "} public BigDecimal contentsAsDecimal() throws NumberFormatException { if (_resultArray != null) { return NumberInput.parseBigDecimal(_resultArray); } if ((_inputStart >= 0) && (_inputBuffer != null)) { return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen); } if ((_segmentSize == 0) && (_currentSegment != null)) {"
      },
      {
        "txt": "return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize); } return NumberInput.parseBigDecimal(contentsAsArray()); } public double contentsAsDouble() throws NumberFormatException { return NumberInput.parseDouble(contentsAsString()); } public void ensureNotShared() { if (_inputStart >= 0) { unshare(16);"
      },
      {
        "txt": "} } public void append(char c) { if (_inputStart >= 0) { unshare(16); } _resultString = null; _resultArray = null; char[] curr = _currentSegment; if (_currentSize >= curr.length) {"
      },
      {
        "txt": "expand(1); curr = _currentSegment; } curr[_currentSize++] = c; } public void append(char[] c, int start, int len) { if (_inputStart >= 0) { unshare(len); }"
      },
      {
        "txt": "_resultString = null; _resultArray = null; char[] curr = _currentSegment; int max = curr.length - _currentSize; if (max >= len) { System.arraycopy(c, start, curr, _currentSize, len); _currentSize += len; return; } if (max > 0) {"
      },
      {
        "txt": "System.arraycopy(c, start, curr, _currentSize, max); start += max; len -= max; } do { expand(len); int amount = Math.min(_currentSegment.length, len); System.arraycopy(c, start, _currentSegment, 0, amount); _currentSize += amount; start += amount;"
      },
      {
        "txt": "len -= amount; } while (len > 0); } public void append(String str, int offset, int len) { if (_inputStart >= 0) { unshare(len); } _resultString = null; _resultArray = null;"
      },
      {
        "txt": "char[] curr = _currentSegment; int max = curr.length - _currentSize; if (max >= len) { str.getChars(offset, offset+len, curr, _currentSize); _currentSize += len; return; } if (max > 0) { str.getChars(offset, offset+max, curr, _currentSize); len -= max;"
      },
      {
        "txt": "offset += max; } do { expand(len); int amount = Math.min(_currentSegment.length, len); str.getChars(offset, offset+amount, _currentSegment, 0); _currentSize += amount; offset += amount; len -= amount; } while (len > 0);"
      },
      {
        "txt": "} public char[] getCurrentSegment() { if (_inputStart >= 0) { unshare(1); } else { char[] curr = _currentSegment; if (curr == null) { _currentSegment = buf(0); } else if (_currentSize >= curr.length) {"
      },
      {
        "txt": "expand(1); } } return _currentSegment; } public char[] emptyAndGetCurrentSegment() { _inputStart = -1; // indicates shared buffer not used _currentSize = 0; _inputLen = 0;"
      },
      {
        "txt": "_inputBuffer = null; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments(); } char[] curr = _currentSegment; if (curr == null) { _currentSegment = curr = buf(0); }"
      },
      {
        "txt": "return curr; } public int getCurrentSegmentSize() { return _currentSize; } public void setCurrentLength(int len) { _currentSize = len; } public char[] finishCurrentSegment() { if (_segments == null) { _segments = new ArrayList<char[]>(); } _hasSegments = true; _segments.add(_currentSegment);"
      },
      {
        "txt": "int oldLen = _currentSegment.length; _segmentSize += oldLen; _currentSize = 0; int newLen = oldLen + (oldLen >> 1); if (newLen < MIN_SEGMENT_LEN) { newLen = MIN_SEGMENT_LEN; } else if (newLen > MAX_SEGMENT_LEN) { newLen = MAX_SEGMENT_LEN; } char[] curr = carr(newLen);"
      },
      {
        "txt": "return curr; } public char[] expandCurrentSegment() { final char[] curr = _currentSegment; final int len = curr.length; <extra_id_0> int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1)); return (_currentSegment = Arrays.copyOf(curr, newLen)); } public char[] expandCurrentSegment(int minSize) { char[] curr = _currentSegment; if (curr.length >= minSize) return curr;"
      },
      {
        "txt": "char[] curr = _currentSegment; if (curr.length >= minSize) return curr; _currentSegment = curr = Arrays.copyOf(curr, minSize); return curr; } @Override public String toString() { return contentsAsString(); } private void unshare(int needExtra) { int sharedLen = _inputLen; _inputLen = 0;"
      },
      {
        "txt": "char[] inputBuf = _inputBuffer; _inputBuffer = null; int start = _inputStart; _inputStart = -1; int needed = sharedLen+needExtra; if (_currentSegment == null || needed > _currentSegment.length) { _currentSegment = buf(needed); } if (sharedLen > 0) { System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen);"
      },
      {
        "txt": "} _segmentSize = 0; _currentSize = sharedLen; } private void expand(int minNewSegmentSize) { if (_segments == null) { _segments = new ArrayList<char[]>(); } char[] curr = _currentSegment;"
      },
      {
        "txt": "_hasSegments = true; _segments.add(curr); _segmentSize += curr.length; _currentSize = 0; int oldLen = curr.length; int newLen = oldLen + (oldLen >> 1); if (newLen < MIN_SEGMENT_LEN) { newLen = MIN_SEGMENT_LEN; } else if (newLen > MAX_SEGMENT_LEN) { newLen = MAX_SEGMENT_LEN;"
      },
      {
        "txt": "} _currentSegment = carr(newLen); } private char[] resultArray() { if (_resultString != null) { // Can take a shortcut... return _resultString.toCharArray(); } if (_inputStart >= 0) { final int len = _inputLen;"
      },
      {
        "txt": "if (len < 1) { return NO_CHARS; } final int start = _inputStart; if (start == 0) { return Arrays.copyOf(_inputBuffer, len); } return Arrays.copyOfRange(_inputBuffer, start, start+len); } int size = size();"
      },
      {
        "txt": "if (size < 1) { return NO_CHARS; } int offset = 0; final char[] result = carr(size); if (_segments != null) { for (int i = 0, len = _segments.size(); i < len; ++i) { char[] curr = _segments.get(i); int currLen = curr.length; System.arraycopy(curr, 0, result, offset, currLen);"
      },
      {
        "txt": "offset += currLen; } } System.arraycopy(_currentSegment, 0, result, offset, _currentSize); return result; } private char[] carr(int len) { return new char[len]; }"
      }
    ]
  },
  {
    "id": 1226,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java",
    "start-bug-line": 586,
    "end-bug-line": 586,
    "bug": "int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));",
    "fix": "if (newLen > MAX_SEGMENT_LEN) { newLen = len + (len >> 2); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.math.BigDecimal; import java.util.ArrayList; import java.util.Arrays; import com.fasterxml.jackson.core.io.NumberInput; public final class TextBuffer { final static char[] NO_CHARS = new char[0]; final static int MIN_SEGMENT_LEN = 1000;"
      },
      {
        "txt": "final static int MAX_SEGMENT_LEN = 0x40000; private final BufferRecycler _allocator; private char[] _inputBuffer; private int _inputStart; private int _inputLen; private ArrayList<char[]> _segments; private boolean _hasSegments = false; private int _segmentSize; private char[] _currentSegment; private int _currentSize;"
      },
      {
        "txt": "private String _resultString; private char[] _resultArray; public TextBuffer(BufferRecycler allocator) { _allocator = allocator; } public void releaseBuffers() { if (_allocator == null) { resetWithEmpty(); } else {"
      },
      {
        "txt": "if (_currentSegment != null) { resetWithEmpty(); char[] buf = _currentSegment; _currentSegment = null; _allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf); } } } public void resetWithEmpty() {"
      },
      {
        "txt": "_inputStart = -1; // indicates shared buffer not used _currentSize = 0; _inputLen = 0; _inputBuffer = null; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments(); } }"
      },
      {
        "txt": "public void resetWithShared(char[] buf, int start, int len) { _resultString = null; _resultArray = null; _inputBuffer = buf; _inputStart = start; _inputLen = len; if (_hasSegments) { clearSegments(); }"
      },
      {
        "txt": "} public void resetWithCopy(char[] buf, int start, int len) { _inputBuffer = null; _inputStart = -1; // indicates shared buffer not used _inputLen = 0; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments();"
      },
      {
        "txt": "} else if (_currentSegment == null) { _currentSegment = buf(len); } _currentSize = _segmentSize = 0; append(buf, start, len); } public void resetWithString(String value) { _inputBuffer = null; _inputStart = -1;"
      },
      {
        "txt": "_inputLen = 0; _resultString = value; _resultArray = null; if (_hasSegments) { clearSegments(); } _currentSize = 0; } private char[] buf(int needed) {"
      },
      {
        "txt": "if (_allocator != null) { return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed); } return new char[Math.max(needed, MIN_SEGMENT_LEN)]; } private void clearSegments() { _hasSegments = false; _segments.clear(); _currentSize = _segmentSize = 0;"
      },
      {
        "txt": "} public int size() { if (_inputStart >= 0) { // shared copy from input buf return _inputLen; } if (_resultArray != null) { return _resultArray.length; } if (_resultString != null) { return _resultString.length();"
      },
      {
        "txt": "} return _segmentSize + _currentSize; } public int getTextOffset() { return (_inputStart >= 0) ? _inputStart : 0; } public boolean hasTextAsCharacters() { if (_inputStart >= 0 || _resultArray != null) return true; if (_resultString != null) return false;"
      },
      {
        "txt": "return true; } public char[] getTextBuffer() { if (_inputStart >= 0) return _inputBuffer; if (_resultArray != null) return _resultArray; if (_resultString != null) { return (_resultArray = _resultString.toCharArray()); } if (!_hasSegments) return _currentSegment;"
      },
      {
        "txt": "return contentsAsArray(); } public String contentsAsString() { if (_resultString == null) { if (_resultArray != null) { _resultString = new String(_resultArray); } else { if (_inputStart >= 0) { if (_inputLen < 1) {"
      },
      {
        "txt": "return (_resultString = \"\"); } _resultString = new String(_inputBuffer, _inputStart, _inputLen); } else { // nope... need to copy int segLen = _segmentSize; int currLen = _currentSize; if (segLen == 0) { // yup _resultString = (currLen == 0) ? \"\" : new String(_currentSegment, 0, currLen); } else { // no, need to combine StringBuilder sb = new StringBuilder(segLen + currLen);"
      },
      {
        "txt": "if (_segments != null) { for (int i = 0, len = _segments.size(); i < len; ++i) { char[] curr = _segments.get(i); sb.append(curr, 0, curr.length); } } sb.append(_currentSegment, 0, _currentSize); _resultString = sb.toString(); } }"
      },
      {
        "txt": "} } return _resultString; } public char[] contentsAsArray() { char[] result = _resultArray; if (result == null) { _resultArray = result = resultArray(); } return result;"
      },
      {
        "txt": "} public BigDecimal contentsAsDecimal() throws NumberFormatException { if (_resultArray != null) { return NumberInput.parseBigDecimal(_resultArray); } if ((_inputStart >= 0) && (_inputBuffer != null)) { return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen); } if ((_segmentSize == 0) && (_currentSegment != null)) {"
      },
      {
        "txt": "return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize); } return NumberInput.parseBigDecimal(contentsAsArray()); } public double contentsAsDouble() throws NumberFormatException { return NumberInput.parseDouble(contentsAsString()); } public void ensureNotShared() { if (_inputStart >= 0) { unshare(16);"
      },
      {
        "txt": "} } public void append(char c) { if (_inputStart >= 0) { unshare(16); } _resultString = null; _resultArray = null; char[] curr = _currentSegment; if (_currentSize >= curr.length) {"
      },
      {
        "txt": "expand(1); curr = _currentSegment; } curr[_currentSize++] = c; } public void append(char[] c, int start, int len) { if (_inputStart >= 0) { unshare(len); }"
      },
      {
        "txt": "_resultString = null; _resultArray = null; char[] curr = _currentSegment; int max = curr.length - _currentSize; if (max >= len) { System.arraycopy(c, start, curr, _currentSize, len); _currentSize += len; return; } if (max > 0) {"
      },
      {
        "txt": "System.arraycopy(c, start, curr, _currentSize, max); start += max; len -= max; } do { expand(len); int amount = Math.min(_currentSegment.length, len); System.arraycopy(c, start, _currentSegment, 0, amount); _currentSize += amount; start += amount;"
      },
      {
        "txt": "len -= amount; } while (len > 0); } public void append(String str, int offset, int len) { if (_inputStart >= 0) { unshare(len); } _resultString = null; _resultArray = null;"
      },
      {
        "txt": "char[] curr = _currentSegment; int max = curr.length - _currentSize; if (max >= len) { str.getChars(offset, offset+len, curr, _currentSize); _currentSize += len; return; } if (max > 0) { str.getChars(offset, offset+max, curr, _currentSize); len -= max;"
      },
      {
        "txt": "offset += max; } do { expand(len); int amount = Math.min(_currentSegment.length, len); str.getChars(offset, offset+amount, _currentSegment, 0); _currentSize += amount; offset += amount; len -= amount; } while (len > 0);"
      },
      {
        "txt": "} public char[] getCurrentSegment() { if (_inputStart >= 0) { unshare(1); } else { char[] curr = _currentSegment; if (curr == null) { _currentSegment = buf(0); } else if (_currentSize >= curr.length) {"
      },
      {
        "txt": "expand(1); } } return _currentSegment; } public char[] emptyAndGetCurrentSegment() { _inputStart = -1; // indicates shared buffer not used _currentSize = 0; _inputLen = 0;"
      },
      {
        "txt": "_inputBuffer = null; _resultString = null; _resultArray = null; if (_hasSegments) { clearSegments(); } char[] curr = _currentSegment; if (curr == null) { _currentSegment = curr = buf(0); }"
      },
      {
        "txt": "return curr; } public int getCurrentSegmentSize() { return _currentSize; } public void setCurrentLength(int len) { _currentSize = len; } public char[] finishCurrentSegment() { if (_segments == null) { _segments = new ArrayList<char[]>(); } _hasSegments = true; _segments.add(_currentSegment);"
      },
      {
        "txt": "int oldLen = _currentSegment.length; _segmentSize += oldLen; _currentSize = 0; int newLen = oldLen + (oldLen >> 1); if (newLen < MIN_SEGMENT_LEN) { newLen = MIN_SEGMENT_LEN; } else if (newLen > MAX_SEGMENT_LEN) { newLen = MAX_SEGMENT_LEN; } char[] curr = carr(newLen);"
      },
      {
        "txt": "return curr; } public char[] expandCurrentSegment() { final char[] curr = _currentSegment; final int len = curr.length; <extra_id_0> return (_currentSegment = Arrays.copyOf(curr, newLen)); } public char[] expandCurrentSegment(int minSize) { char[] curr = _currentSegment; if (curr.length >= minSize) return curr; _currentSegment = curr = Arrays.copyOf(curr, minSize);"
      },
      {
        "txt": "if (curr.length >= minSize) return curr; _currentSegment = curr = Arrays.copyOf(curr, minSize); return curr; } @Override public String toString() { return contentsAsString(); } private void unshare(int needExtra) { int sharedLen = _inputLen; _inputLen = 0; char[] inputBuf = _inputBuffer;"
      },
      {
        "txt": "_inputBuffer = null; int start = _inputStart; _inputStart = -1; int needed = sharedLen+needExtra; if (_currentSegment == null || needed > _currentSegment.length) { _currentSegment = buf(needed); } if (sharedLen > 0) { System.arraycopy(inputBuf, start, _currentSegment, 0, sharedLen); }"
      },
      {
        "txt": "_segmentSize = 0; _currentSize = sharedLen; } private void expand(int minNewSegmentSize) { if (_segments == null) { _segments = new ArrayList<char[]>(); } char[] curr = _currentSegment; _hasSegments = true;"
      },
      {
        "txt": "_segments.add(curr); _segmentSize += curr.length; _currentSize = 0; int oldLen = curr.length; int newLen = oldLen + (oldLen >> 1); if (newLen < MIN_SEGMENT_LEN) { newLen = MIN_SEGMENT_LEN; } else if (newLen > MAX_SEGMENT_LEN) { newLen = MAX_SEGMENT_LEN; }"
      },
      {
        "txt": "_currentSegment = carr(newLen); } private char[] resultArray() { if (_resultString != null) { // Can take a shortcut... return _resultString.toCharArray(); } if (_inputStart >= 0) { final int len = _inputLen; if (len < 1) {"
      },
      {
        "txt": "return NO_CHARS; } final int start = _inputStart; if (start == 0) { return Arrays.copyOf(_inputBuffer, len); } return Arrays.copyOfRange(_inputBuffer, start, start+len); } int size = size(); if (size < 1) {"
      },
      {
        "txt": "return NO_CHARS; } int offset = 0; final char[] result = carr(size); if (_segments != null) { for (int i = 0, len = _segments.size(); i < len; ++i) { char[] curr = _segments.get(i); int currLen = curr.length; System.arraycopy(curr, 0, result, offset, currLen); offset += currLen;"
      },
      {
        "txt": "} } System.arraycopy(_currentSegment, 0, result, offset, _currentSize); return result; } private char[] carr(int len) { return new char[len]; }"
      }
    ]
  }
]
[
  {
    "id": 1262,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 35,
    "end-bug-line": 35,
    "bug": "",
    "fix": "protected boolean _suppressNextToken;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.core.*; public class JsonParserSequence extends JsonParserDelegate { protected final JsonParser[] _parsers; protected int _nextParser; <extra_id_0> protected JsonParserSequence(JsonParser[] parsers) { super(parsers[0]); _parsers = parsers; _nextParser = 1; }"
      },
      {
        "txt": "_nextParser = 1; } public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) { if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>(); if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p);"
      },
      {
        "txt": "} else { p.add(first); } if (second instanceof JsonParserSequence) { ((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); } return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); }"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result) { for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) { JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else { result.add(p); }"
      },
      {
        "txt": "} } @Override public void close() throws IOException { do { delegate.close(); } while (switchToNext()); } @Override public JsonToken nextToken() throws IOException, JsonParseException { JsonToken t = delegate.nextToken();"
      },
      {
        "txt": "if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t; } return null; } public int containedParsersCount() { return _parsers.length; }"
      },
      {
        "txt": "protected boolean switchToNext() { if (_nextParser >= _parsers.length) { return false; } delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  },
  {
    "id": 1263,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 45,
    "end-bug-line": 45,
    "bug": "",
    "fix": "_suppressNextToken = delegate.hasCurrentToken();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "{ protected final JsonParser[] _parsers; protected int _nextParser; protected JsonParserSequence(JsonParser[] parsers) { super(parsers[0]); <extra_id_0> _nextParser = 1; } public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) { if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second });"
      },
      {
        "txt": "if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>(); if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p); } else { p.add(first); } if (second instanceof JsonParserSequence) {"
      },
      {
        "txt": "((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); } return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); } @SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result) { for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) {"
      },
      {
        "txt": "JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else { result.add(p); } } } @Override public void close() throws IOException {"
      },
      {
        "txt": "do { delegate.close(); } while (switchToNext()); } @Override public JsonToken nextToken() throws IOException, JsonParseException { JsonToken t = delegate.nextToken(); if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t;"
      },
      {
        "txt": "} return null; } public int containedParsersCount() { return _parsers.length; } protected boolean switchToNext() { if (_nextParser >= _parsers.length) { return false;"
      },
      {
        "txt": "} delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  },
  {
    "id": 1264,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 104,
    "end-bug-line": 104,
    "bug": "public JsonToken nextToken() throws IOException, JsonParseException",
    "fix": "public JsonToken nextToken() throws IOException",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.io.IOException;"
      },
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.core.*; public class JsonParserSequence extends JsonParserDelegate { protected final JsonParser[] _parsers; protected int _nextParser; protected JsonParserSequence(JsonParser[] parsers) { super(parsers[0]); _parsers = parsers;"
      },
      {
        "txt": "_nextParser = 1; } public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) { if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>(); if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p);"
      },
      {
        "txt": "} else { p.add(first); } if (second instanceof JsonParserSequence) { ((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); } return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); }"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result) { for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) { JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else { result.add(p); }"
      },
      {
        "txt": "} @Override public void close() throws IOException { do { delegate.close(); } while (switchToNext()); } @Override <extra_id_0> { JsonToken t = delegate.nextToken(); if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t;"
      },
      {
        "txt": "t = delegate.nextToken(); if (t != null) return t; } return null; } public int containedParsersCount() { return _parsers.length; } protected boolean switchToNext() {"
      },
      {
        "txt": "if (_nextParser >= _parsers.length) { return false; } delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  },
  {
    "id": 1265,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 106,
    "end-bug-line": 106,
    "bug": "",
    "fix": "if (delegate == null) { return null; } if (_suppressNextToken) { _suppressNextToken = false; return delegate.currentToken(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "public class JsonParserSequence extends JsonParserDelegate { protected final JsonParser[] _parsers; protected int _nextParser; protected JsonParserSequence(JsonParser[] parsers) { super(parsers[0]); _parsers = parsers; _nextParser = 1; }"
      },
      {
        "txt": "public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) { if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>(); if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p); } else { p.add(first);"
      },
      {
        "txt": "} if (second instanceof JsonParserSequence) { ((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); } return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); } @SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result)"
      },
      {
        "txt": "{ for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) { JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else { result.add(p); } } }"
      },
      {
        "txt": "public void close() throws IOException { do { delegate.close(); } while (switchToNext()); } @Override public JsonToken nextToken() throws IOException, JsonParseException { <extra_id_0> if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t; } return null;"
      },
      {
        "txt": "} return null; } public int containedParsersCount() { return _parsers.length; } protected boolean switchToNext() { if (_nextParser >= _parsers.length) { return false;"
      },
      {
        "txt": "} delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  },
  {
    "id": 1266,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 107,
    "end-bug-line": 110,
    "bug": "if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t;",
    "fix": "while ((t == null) && switchToNext()) { t = delegate.hasCurrentToken() ? delegate.currentToken() : delegate.nextToken();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; public class JsonParserSequence extends JsonParserDelegate"
      },
      {
        "txt": "{ protected final JsonParser[] _parsers; protected int _nextParser; protected JsonParserSequence(JsonParser[] parsers) { super(parsers[0]); _parsers = parsers; _nextParser = 1; } public static JsonParserSequence createFlattened(JsonParser first, JsonParser second)"
      },
      {
        "txt": "{ if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>(); if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p); } else { p.add(first); }"
      },
      {
        "txt": "if (second instanceof JsonParserSequence) { ((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); } return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); } @SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result) {"
      },
      {
        "txt": "for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) { JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else { result.add(p); } } } @Override"
      },
      {
        "txt": "do { delegate.close(); } while (switchToNext()); } @Override public JsonToken nextToken() throws IOException, JsonParseException { JsonToken t = delegate.nextToken(); <extra_id_0> } return null; } public int containedParsersCount() { return _parsers.length; }"
      },
      {
        "txt": "return _parsers.length; } protected boolean switchToNext() { if (_nextParser >= _parsers.length) { return false; } delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  },
  {
    "id": 1267,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java",
    "start-bug-line": 112,
    "end-bug-line": 112,
    "bug": "return null;",
    "fix": "return t;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core.util; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; public class JsonParserSequence extends JsonParserDelegate { protected final JsonParser[] _parsers; protected int _nextParser; protected JsonParserSequence(JsonParser[] parsers) {"
      },
      {
        "txt": "super(parsers[0]); _parsers = parsers; _nextParser = 1; } public static JsonParserSequence createFlattened(JsonParser first, JsonParser second) { if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) { return new JsonParserSequence(new JsonParser[] { first, second }); } ArrayList<JsonParser> p = new ArrayList<JsonParser>();"
      },
      {
        "txt": "if (first instanceof JsonParserSequence) { ((JsonParserSequence) first).addFlattenedActiveParsers(p); } else { p.add(first); } if (second instanceof JsonParserSequence) { ((JsonParserSequence) second).addFlattenedActiveParsers(p); } else { p.add(second); }"
      },
      {
        "txt": "return new JsonParserSequence(p.toArray(new JsonParser[p.size()])); } @SuppressWarnings(\"resource\") protected void addFlattenedActiveParsers(List<JsonParser> result) { for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) { JsonParser p = _parsers[i]; if (p instanceof JsonParserSequence) { ((JsonParserSequence) p).addFlattenedActiveParsers(result); } else {"
      },
      {
        "txt": "result.add(p); } } } @Override public void close() throws IOException { do { delegate.close(); } while (switchToNext()); } @Override public JsonToken nextToken() throws IOException, JsonParseException"
      },
      {
        "txt": "JsonToken t = delegate.nextToken(); if (t != null) return t; while (switchToNext()) { t = delegate.nextToken(); if (t != null) return t; } <extra_id_0> } public int containedParsersCount() { return _parsers.length; } protected boolean switchToNext() {"
      },
      {
        "txt": "protected boolean switchToNext() { if (_nextParser >= _parsers.length) { return false; } delegate = _parsers[_nextParser++]; return true; }"
      }
    ]
  }
]
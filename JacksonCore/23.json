[
  {
    "id": 1295,
    "file_path": "src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java",
    "start-bug-line": 255,
    "end-bug-line": 255,
    "bug": "",
    "fix": "if (getClass() != DefaultPrettyPrinter.class) { // since 2.10 throw new IllegalStateException(\"Failed `createInstance()`: \"+getClass().getName() +\" does not override method; it has to\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.io.SerializedString; @SuppressWarnings(\"serial\") public class DefaultPrettyPrinter implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>, java.io.Serializable { private static final long serialVersionUID = 1; public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(\" \");"
      },
      {
        "txt": "public interface Indenter { void writeIndentation(JsonGenerator g, int level) throws IOException; boolean isInline(); } protected Indenter _arrayIndenter = FixedSpaceIndenter.instance; protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE; protected final SerializableString _rootSeparator; protected boolean _spacesInObjectEntries = true; protected transient int _nesting;"
      },
      {
        "txt": "protected Separators _separators; protected String _objectFieldValueSeparatorWithSpaces; public DefaultPrettyPrinter() { this(DEFAULT_ROOT_VALUE_SEPARATOR); } public DefaultPrettyPrinter(String rootSeparator) { this((rootSeparator == null) ? null : new SerializedString(rootSeparator)); } public DefaultPrettyPrinter(SerializableString rootSeparator) { _rootSeparator = rootSeparator;"
      },
      {
        "txt": "withSeparators(DEFAULT_SEPARATORS); } public DefaultPrettyPrinter(DefaultPrettyPrinter base) { this(base, base._rootSeparator); } public DefaultPrettyPrinter(DefaultPrettyPrinter base, SerializableString rootSeparator) { _arrayIndenter = base._arrayIndenter; _objectIndenter = base._objectIndenter;"
      },
      {
        "txt": "_spacesInObjectEntries = base._spacesInObjectEntries; _nesting = base._nesting; _separators = base._separators; _objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces; _rootSeparator = rootSeparator; } public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator) { if (_rootSeparator == rootSeparator || (rootSeparator != null && rootSeparator.equals(_rootSeparator))) {"
      },
      {
        "txt": "return this; } return new DefaultPrettyPrinter(this, rootSeparator); } public DefaultPrettyPrinter withRootSeparator(String rootSeparator) { return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator)); } public void indentArraysWith(Indenter i) { _arrayIndenter = (i == null) ? NopIndenter.instance : i; }"
      },
      {
        "txt": "public void indentObjectsWith(Indenter i) { _objectIndenter = (i == null) ? NopIndenter.instance : i; } public DefaultPrettyPrinter withArrayIndenter(Indenter i) { if (i == null) { i = NopIndenter.instance; } if (_arrayIndenter == i) { return this; }"
      },
      {
        "txt": "DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this); pp._arrayIndenter = i; return pp; } public DefaultPrettyPrinter withObjectIndenter(Indenter i) { if (i == null) { i = NopIndenter.instance; } if (_objectIndenter == i) { return this;"
      },
      {
        "txt": "} DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this); pp._objectIndenter = i; return pp; } public DefaultPrettyPrinter withSpacesInObjectEntries() { return _withSpaces(true); } public DefaultPrettyPrinter withoutSpacesInObjectEntries() { return _withSpaces(false);"
      },
      {
        "txt": "} protected DefaultPrettyPrinter _withSpaces(boolean state) { if (_spacesInObjectEntries == state) { return this; } DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this); pp._spacesInObjectEntries = state; return pp; }"
      },
      {
        "txt": "_separators = separators; _objectFieldValueSeparatorWithSpaces = \" \" + separators.getObjectFieldValueSeparator() + \" \"; return this; } @Override public DefaultPrettyPrinter createInstance() { <extra_id_0> } @Override public void writeRootValueSeparator(JsonGenerator g) throws IOException { if (_rootSeparator != null) { g.writeRaw(_rootSeparator);"
      },
      {
        "txt": "if (_rootSeparator != null) { g.writeRaw(_rootSeparator); } } @Override public void writeStartObject(JsonGenerator g) throws IOException { g.writeRaw('{'); if (!_objectIndenter.isInline()) { ++_nesting;"
      },
      {
        "txt": "} } @Override public void beforeObjectEntries(JsonGenerator g) throws IOException { _objectIndenter.writeIndentation(g, _nesting); } @Override public void writeObjectFieldValueSeparator(JsonGenerator g) throws IOException {"
      },
      {
        "txt": "if (_spacesInObjectEntries) { g.writeRaw(_objectFieldValueSeparatorWithSpaces); } else { g.writeRaw(_separators.getObjectFieldValueSeparator()); } } @Override public void writeObjectEntrySeparator(JsonGenerator g) throws IOException { g.writeRaw(_separators.getObjectEntrySeparator());"
      },
      {
        "txt": "_objectIndenter.writeIndentation(g, _nesting); } @Override public void writeEndObject(JsonGenerator g, int nrOfEntries) throws IOException { if (!_objectIndenter.isInline()) { --_nesting; } if (nrOfEntries > 0) { _objectIndenter.writeIndentation(g, _nesting);"
      },
      {
        "txt": "} else { g.writeRaw(' '); } g.writeRaw('}'); } @Override public void writeStartArray(JsonGenerator g) throws IOException { if (!_arrayIndenter.isInline()) { ++_nesting;"
      },
      {
        "txt": "} g.writeRaw('['); } @Override public void beforeArrayValues(JsonGenerator g) throws IOException { _arrayIndenter.writeIndentation(g, _nesting); } @Override public void writeArrayValueSeparator(JsonGenerator g) throws IOException {"
      },
      {
        "txt": "g.writeRaw(_separators.getArrayValueSeparator()); _arrayIndenter.writeIndentation(g, _nesting); } @Override public void writeEndArray(JsonGenerator g, int nrOfValues) throws IOException { if (!_arrayIndenter.isInline()) { --_nesting; } if (nrOfValues > 0) {"
      },
      {
        "txt": "_arrayIndenter.writeIndentation(g, _nesting); } else { g.writeRaw(' '); } g.writeRaw(']'); } public static class NopIndenter implements Indenter, java.io.Serializable { public static final NopIndenter instance = new NopIndenter();"
      },
      {
        "txt": "@Override public void writeIndentation(JsonGenerator g, int level) throws IOException { } @Override public boolean isInline() { return true; } } public static class FixedSpaceIndenter extends NopIndenter { public static final FixedSpaceIndenter instance = new FixedSpaceIndenter(); @Override public void writeIndentation(JsonGenerator g, int level) throws IOException"
      },
      {
        "txt": "{ g.writeRaw(' '); } @Override public boolean isInline() { return true; } }"
      }
    ]
  }
]
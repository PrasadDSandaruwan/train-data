[
  {
    "id": 1282,
    "file_path": "src/main/java/com/fasterxml/jackson/core/JsonGenerator.java",
    "start-bug-line": 1330,
    "end-bug-line": 1330,
    "bug": "throw new JsonGenerationException(\"No native support for writing embedded objects\",",
    "fix": "if (object == null) { writeNull(); return; } if (object instanceof byte[]) { writeBinary((byte[]) object); return; } throw new JsonGenerationException(\"No native support for writing embedded objects of type \" +object.getClass().getName(),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.core; import static com.fasterxml.jackson.core.JsonTokenId.*; import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.concurrent.atomic.AtomicBoolean; import java.util.concurrent.atomic.AtomicInteger; import java.util.concurrent.atomic.AtomicLong; import com.fasterxml.jackson.core.JsonParser.NumberType;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.io.CharacterEscapes; import com.fasterxml.jackson.core.util.VersionUtil; public abstract class JsonGenerator implements Closeable, Flushable, Versioned { public enum Feature { AUTO_CLOSE_TARGET(true), AUTO_CLOSE_JSON_CONTENT(true), FLUSH_PASSED_TO_STREAM(true), QUOTE_FIELD_NAMES(true),"
      },
      {
        "txt": "QUOTE_NON_NUMERIC_NUMBERS(true), WRITE_NUMBERS_AS_STRINGS(false), WRITE_BIGDECIMAL_AS_PLAIN(false), ESCAPE_NON_ASCII(false), STRICT_DUPLICATE_DETECTION(false), IGNORE_UNKNOWN(false), ; private final boolean _defaultState; private final int _mask; public static int collectDefaults()"
      },
      {
        "txt": "{ int flags = 0; for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) {"
      },
      {
        "txt": "_defaultState = defaultState; _mask = (1 << ordinal()); } public boolean enabledByDefault() { return _defaultState; } public boolean enabledIn(int flags) { return (flags & _mask) != 0; } public int getMask() { return _mask; } } protected PrettyPrinter _cfgPrettyPrinter; protected JsonGenerator() { } public abstract JsonGenerator setCodec(ObjectCodec oc);"
      },
      {
        "txt": "public abstract ObjectCodec getCodec(); @Override public abstract Version version(); public abstract JsonGenerator enable(Feature f); public abstract JsonGenerator disable(Feature f); public final JsonGenerator configure(Feature f, boolean state) { if (state) enable(f); else disable(f); return this; } public abstract boolean isEnabled(Feature f);"
      },
      {
        "txt": "public abstract int getFeatureMask(); @Deprecated public abstract JsonGenerator setFeatureMask(int values); public JsonGenerator overrideStdFeatures(int values, int mask) { int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); return setFeatureMask(newState); } public int getFormatFeatures() { return 0;"
      },
      {
        "txt": "} public JsonGenerator overrideFormatFeatures(int values, int mask) { throw new IllegalArgumentException(\"No FormatFeatures defined for generator of type \"+getClass().getName()); int oldState = getFeatureMask(); int newState = (oldState & ~mask) | (values & mask); return setFeatureMask(newState); } public void setSchema(FormatSchema schema) { throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\" +schema.getSchemaType()+\"'\");"
      },
      {
        "txt": "} public FormatSchema getSchema() { return null; } public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; return this; } public PrettyPrinter getPrettyPrinter() { return _cfgPrettyPrinter; } public abstract JsonGenerator useDefaultPrettyPrinter();"
      },
      {
        "txt": "public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; } public int getHighestEscapedChar() { return 0; } public CharacterEscapes getCharacterEscapes() { return null; } public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { return this; } public JsonGenerator setRootValueSeparator(SerializableString sep) { throw new UnsupportedOperationException(); } public Object getOutputTarget() { return null; }"
      },
      {
        "txt": "public int getOutputBuffered() { return -1; } public Object getCurrentValue() { JsonStreamContext ctxt = getOutputContext(); return (ctxt == null) ? null : ctxt.getCurrentValue(); } public void setCurrentValue(Object v) { JsonStreamContext ctxt = getOutputContext(); if (ctxt != null) {"
      },
      {
        "txt": "ctxt.setCurrentValue(v); } } public boolean canUseSchema(FormatSchema schema) { return false; } public boolean canWriteObjectId() { return false; } public boolean canWriteTypeId() { return false; } public boolean canWriteBinaryNatively() { return false; } public boolean canOmitFields() { return true; } public boolean canWriteFormattedNumbers() { return false; } public abstract void writeStartArray() throws IOException;"
      },
      {
        "txt": "public void writeStartArray(int size) throws IOException { writeStartArray(); } public abstract void writeEndArray() throws IOException; public abstract void writeStartObject() throws IOException; public void writeStartObject(Object forValue) throws IOException { writeStartObject(); setCurrentValue(forValue); }"
      },
      {
        "txt": "public abstract void writeEndObject() throws IOException; public abstract void writeFieldName(String name) throws IOException; public abstract void writeFieldName(SerializableString name) throws IOException; public void writeFieldId(long id) throws IOException { writeFieldName(Long.toString(id)); } public void writeArray(int[] array, int offset, int length) throws IOException { if (array == null) { throw new IllegalArgumentException(\"null array\");"
      },
      {
        "txt": "} _verifyOffsets(array.length, offset, length); writeStartArray(); for (int i = offset, end = offset+length; i < end; ++i) { writeNumber(array[i]); } writeEndArray(); } public void writeArray(long[] array, int offset, int length) throws IOException {"
      },
      {
        "txt": "if (array == null) { throw new IllegalArgumentException(\"null array\"); } _verifyOffsets(array.length, offset, length); writeStartArray(); for (int i = offset, end = offset+length; i < end; ++i) { writeNumber(array[i]); } writeEndArray(); }"
      },
      {
        "txt": "public void writeArray(double[] array, int offset, int length) throws IOException { if (array == null) { throw new IllegalArgumentException(\"null array\"); } _verifyOffsets(array.length, offset, length); writeStartArray(); for (int i = offset, end = offset+length; i < end; ++i) { writeNumber(array[i]); }"
      },
      {
        "txt": "writeEndArray(); } public abstract void writeString(String text) throws IOException; public abstract void writeString(char[] text, int offset, int len) throws IOException; public abstract void writeString(SerializableString text) throws IOException; public abstract void writeRawUTF8String(byte[] text, int offset, int length) throws IOException; public abstract void writeUTF8String(byte[] text, int offset, int length) throws IOException; public abstract void writeRaw(String text) throws IOException;"
      },
      {
        "txt": "public abstract void writeRaw(String text, int offset, int len) throws IOException; public abstract void writeRaw(char[] text, int offset, int len) throws IOException; public abstract void writeRaw(char c) throws IOException; public void writeRaw(SerializableString raw) throws IOException { writeRaw(raw.getValue()); } public abstract void writeRawValue(String text) throws IOException; public abstract void writeRawValue(String text, int offset, int len) throws IOException; public abstract void writeRawValue(char[] text, int offset, int len) throws IOException; public void writeRawValue(SerializableString raw) throws IOException {"
      },
      {
        "txt": "writeRawValue(raw.getValue()); } public abstract void writeBinary(Base64Variant bv, byte[] data, int offset, int len) throws IOException; public void writeBinary(byte[] data, int offset, int len) throws IOException { writeBinary(Base64Variants.getDefaultVariant(), data, offset, len); } public void writeBinary(byte[] data) throws IOException { writeBinary(Base64Variants.getDefaultVariant(), data, 0, data.length); }"
      },
      {
        "txt": "public int writeBinary(InputStream data, int dataLength) throws IOException { return writeBinary(Base64Variants.getDefaultVariant(), data, dataLength); } public abstract int writeBinary(Base64Variant bv, InputStream data, int dataLength) throws IOException; public void writeNumber(short v) throws IOException { writeNumber((int) v); } public abstract void writeNumber(int v) throws IOException; public abstract void writeNumber(long v) throws IOException; public abstract void writeNumber(BigInteger v) throws IOException;"
      },
      {
        "txt": "public abstract void writeNumber(float v) throws IOException; public abstract void writeNumber(BigDecimal v) throws IOException; public abstract void writeNumber(String encodedValue) throws IOException; public abstract void writeBoolean(boolean state) throws IOException; public abstract void writeNull() throws IOException; public void writeEmbeddedObject(Object object) throws IOException { <extra_id_0> this); } public void writeObjectId(Object id) throws IOException { throw new JsonGenerationException(\"No native support for writing Object Ids\", this); } public void writeObjectRef(Object id) throws IOException {"
      },
      {
        "txt": "} public void writeObjectRef(Object id) throws IOException { throw new JsonGenerationException(\"No native support for writing Object Ids\", this); } public void writeTypeId(Object id) throws IOException { throw new JsonGenerationException(\"No native support for writing Type Ids\", this); } public Object writeTypeSuffix(JsonToken inclStyle, Object forValue, JsonToken valueShape, String typeId, String propertyName) throws IOException {"
      },
      {
        "txt": "if (inclStyle == JsonToken.FIELD_NAME) { // as-property if (typeId == null) { // should not include `null` type id in any form with this style writeStartObject(); } else if (valueShape == JsonToken.START_OBJECT) { if (canWriteTypeId()) { writeTypeId(typeId); writeStartObject(); } else { writeStartObject(); writeStringField(propertyName, typeId);"
      },
      {
        "txt": "} } else if (valueShape == JsonToken.START_ARRAY) { if (canWriteTypeId()) { writeTypeId(typeId); writeStartArray(); } else { writeStartArray(); writeString(typeId); } } else { // any scalar"
      },
      {
        "txt": "if (canWriteTypeId()) { writeTypeId(typeId); } } return JsonToken.END_OBJECT; } if (inclStyle == JsonToken.START_ARRAY) { // as-wrapper-array } else if (inclStyle == JsonToken.START_OBJECT) { // as-wrapper-object } else { throw new JsonGenerationException(\"Unrecognized inclusion style: \"+inclStyle, this);"
      },
      {
        "txt": "} } public abstract void writeObject(Object pojo) throws IOException; public abstract void writeTree(TreeNode rootNode) throws IOException; public void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public final void writeBooleanField(String fieldName, boolean value) throws IOException { writeFieldName(fieldName);"
      },
      {
        "txt": "writeBoolean(value); } public final void writeNullField(String fieldName) throws IOException { writeFieldName(fieldName); writeNull(); } public final void writeNumberField(String fieldName, int value) throws IOException { writeFieldName(fieldName); writeNumber(value); }"
      },
      {
        "txt": "public final void writeNumberField(String fieldName, long value) throws IOException { writeFieldName(fieldName); writeNumber(value); } public final void writeNumberField(String fieldName, double value) throws IOException { writeFieldName(fieldName); writeNumber(value); } public final void writeNumberField(String fieldName, float value) throws IOException { writeFieldName(fieldName);"
      },
      {
        "txt": "writeNumber(value); } public final void writeNumberField(String fieldName, BigDecimal value) throws IOException { writeFieldName(fieldName); writeNumber(value); } public final void writeBinaryField(String fieldName, byte[] data) throws IOException { writeFieldName(fieldName); writeBinary(data); }"
      },
      {
        "txt": "public final void writeArrayFieldStart(String fieldName) throws IOException { writeFieldName(fieldName); writeStartArray(); } public final void writeObjectFieldStart(String fieldName) throws IOException { writeFieldName(fieldName); writeStartObject(); } public final void writeObjectField(String fieldName, Object pojo) throws IOException { writeFieldName(fieldName);"
      },
      {
        "txt": "writeObject(pojo); } public void writeOmittedField(String fieldName) throws IOException { } public void copyCurrentEvent(JsonParser p) throws IOException { JsonToken t = p.currentToken(); if (t == null) { _reportError(\"No current event to copy\"); } switch (t.id()) {"
      },
      {
        "txt": "case ID_NOT_AVAILABLE: _reportError(\"No current event to copy\"); break; // never gets here case ID_START_OBJECT: writeStartObject(); break; case ID_END_OBJECT: writeEndObject(); break; case ID_START_ARRAY:"
      },
      {
        "txt": "writeStartArray(); break; case ID_END_ARRAY: writeEndArray(); break; case ID_FIELD_NAME: writeFieldName(p.getCurrentName()); break; case ID_STRING: if (p.hasTextCharacters()) {"
      },
      {
        "txt": "writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength()); } else { writeString(p.getText()); } break; case ID_NUMBER_INT: { NumberType n = p.getNumberType(); if (n == NumberType.INT) { writeNumber(p.getIntValue());"
      },
      {
        "txt": "} else if (n == NumberType.BIG_INTEGER) { writeNumber(p.getBigIntegerValue()); } else { writeNumber(p.getLongValue()); } break; } case ID_NUMBER_FLOAT: { NumberType n = p.getNumberType();"
      },
      {
        "txt": "if (n == NumberType.BIG_DECIMAL) { writeNumber(p.getDecimalValue()); } else if (n == NumberType.FLOAT) { writeNumber(p.getFloatValue()); } else { writeNumber(p.getDoubleValue()); } break; } case ID_TRUE:"
      },
      {
        "txt": "writeBoolean(true); break; case ID_FALSE: writeBoolean(false); break; case ID_NULL: writeNull(); break; case ID_EMBEDDED_OBJECT: writeObject(p.getEmbeddedObject());"
      },
      {
        "txt": "break; default: _throwInternal(); } } public void copyCurrentStructure(JsonParser p) throws IOException { JsonToken t = p.currentToken(); if (t == null) { _reportError(\"No current event to copy\");"
      },
      {
        "txt": "} int id = t.id(); if (id == ID_FIELD_NAME) { writeFieldName(p.getCurrentName()); t = p.nextToken(); id = t.id(); } switch (id) { case ID_START_OBJECT: writeStartObject();"
      },
      {
        "txt": "while (p.nextToken() != JsonToken.END_OBJECT) { copyCurrentStructure(p); } writeEndObject(); break; case ID_START_ARRAY: writeStartArray(); while (p.nextToken() != JsonToken.END_ARRAY) { copyCurrentStructure(p); }"
      },
      {
        "txt": "writeEndArray(); break; default: copyCurrentEvent(p); } } public abstract JsonStreamContext getOutputContext(); @Override public abstract void flush() throws IOException; public abstract boolean isClosed();"
      },
      {
        "txt": "@Override public abstract void close() throws IOException; protected void _reportError(String msg) throws JsonGenerationException { throw new JsonGenerationException(msg, this); } protected final void _throwInternal() { VersionUtil.throwInternal(); } protected void _reportUnsupportedOperation() { throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName()); } protected final void _verifyOffsets(int arrayLength, int offset, int length)"
      },
      {
        "txt": "{ if ((offset < 0) || (offset + length) > arrayLength) { throw new IllegalArgumentException(String.format( \"invalid argument(s) (offset=%d, length=%d) for input array of %d element\", offset, length, arrayLength)); } } protected void _writeSimpleObject(Object value) throws IOException { if (value == null) {"
      },
      {
        "txt": "writeNull(); return; } if (value instanceof String) { writeString((String) value); return; } if (value instanceof Number) { Number n = (Number) value; if (n instanceof Integer) {"
      },
      {
        "txt": "writeNumber(n.intValue()); return; } else if (n instanceof Long) { writeNumber(n.longValue()); return; } else if (n instanceof Double) { writeNumber(n.doubleValue()); return; } else if (n instanceof Float) { writeNumber(n.floatValue());"
      },
      {
        "txt": "return; } else if (n instanceof Short) { writeNumber(n.shortValue()); return; } else if (n instanceof Byte) { writeNumber(n.byteValue()); return; } else if (n instanceof BigInteger) { writeNumber((BigInteger) n); return;"
      },
      {
        "txt": "} else if (n instanceof BigDecimal) { writeNumber((BigDecimal) n); return; } else if (n instanceof AtomicInteger) { writeNumber(((AtomicInteger) n).get()); return; } else if (n instanceof AtomicLong) { writeNumber(((AtomicLong) n).get()); return; }"
      },
      {
        "txt": "} else if (value instanceof byte[]) { writeBinary((byte[]) value); return; } else if (value instanceof Boolean) { writeBoolean((Boolean) value); return; } else if (value instanceof AtomicBoolean) { writeBoolean(((AtomicBoolean) value).get()); return; }"
      },
      {
        "txt": "throw new IllegalStateException(\"No ObjectCodec defined for the generator, can only serialize simple wrapper types (type passed \" +value.getClass().getName()+\")\"); }"
      }
    ]
  }
]
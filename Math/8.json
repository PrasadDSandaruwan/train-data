[
  {
    "id": 2478,
    "file_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
    "start-bug-line": 181,
    "end-bug-line": 181,
    "bug": "public T[] sample(int sampleSize) throws NotStrictlyPositiveException {",
    "fix": "public Object[] sample(int sampleSize) throws NotStrictlyPositiveException {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.distribution; import java.util.ArrayList; import java.util.List; import org.apache.commons.math3.exception.MathArithmeticException; import org.apache.commons.math3.exception.MathIllegalArgumentException; import org.apache.commons.math3.exception.NotPositiveException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.random.RandomGenerator;"
      },
      {
        "txt": "import org.apache.commons.math3.random.Well19937c; import org.apache.commons.math3.util.MathArrays; import org.apache.commons.math3.util.Pair; public class DiscreteDistribution<T> { protected final RandomGenerator random; private final List<T> singletons; private final double[] probabilities; public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples);"
      },
      {
        "txt": "} public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size()); final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) {"
      },
      {
        "txt": "throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0); } public void reseedRandomGenerator(long seed) { random.setSeed(seed); } double probability(final T x) {"
      },
      {
        "txt": "double probability = 0; for (int i = 0; i < probabilities.length; i++) { if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) { probability += probabilities[i]; } } return probability; } public List<Pair<T, Double>> getSamples() {"
      },
      {
        "txt": "final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length); for (int i = 0; i < probabilities.length; i++) { samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i])); } return samples; } public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) {"
      },
      {
        "txt": "if (randomValue < sum) { return singletons.get(i); } } return singletons.get(singletons.size() - 1); } <extra_id_0> if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) {"
      },
      {
        "txt": "final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize); for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; }"
      }
    ]
  },
  {
    "id": 2479,
    "file_path": "src/main/java/org/apache/commons/math3/distribution/DiscreteDistribution.java",
    "start-bug-line": 187,
    "end-bug-line": 187,
    "bug": "final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);",
    "fix": "final Object[] out = new Object[sampleSize];",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.distribution; import java.util.ArrayList; import java.util.List; import org.apache.commons.math3.exception.MathArithmeticException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.MathIllegalArgumentException; import org.apache.commons.math3.exception.NotPositiveException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.random.RandomGenerator; import org.apache.commons.math3.random.Well19937c; import org.apache.commons.math3.util.MathArrays; import org.apache.commons.math3.util.Pair; public class DiscreteDistribution<T> { protected final RandomGenerator random;"
      },
      {
        "txt": "private final List<T> singletons; private final double[] probabilities; public DiscreteDistribution(final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { this(new Well19937c(), samples); } public DiscreteDistribution(final RandomGenerator rng, final List<Pair<T, Double>> samples) throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException { random = rng; singletons = new ArrayList<T>(samples.size());"
      },
      {
        "txt": "final double[] probs = new double[samples.size()]; for (int i = 0; i < samples.size(); i++) { final Pair<T, Double> sample = samples.get(i); singletons.add(sample.getKey()); if (sample.getValue() < 0) { throw new NotPositiveException(sample.getValue()); } probs[i] = sample.getValue(); } probabilities = MathArrays.normalizeArray(probs, 1.0);"
      },
      {
        "txt": "} public void reseedRandomGenerator(long seed) { random.setSeed(seed); } double probability(final T x) { double probability = 0; for (int i = 0; i < probabilities.length; i++) { if ((x == null && singletons.get(i) == null) || (x != null && x.equals(singletons.get(i)))) { probability += probabilities[i];"
      },
      {
        "txt": "} } return probability; } public List<Pair<T, Double>> getSamples() { final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length); for (int i = 0; i < probabilities.length; i++) { samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i])); } return samples;"
      },
      {
        "txt": "} public T sample() { final double randomValue = random.nextDouble(); double sum = 0; for (int i = 0; i < probabilities.length; i++) { sum += probabilities[i]; if (randomValue < sum) { return singletons.get(i); } }"
      },
      {
        "txt": "} public T[] sample(int sampleSize) throws NotStrictlyPositiveException { if (sampleSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } <extra_id_0> for (int i = 0; i < sampleSize; i++) { out[i] = sample(); } return out; } }"
      }
    ]
  }
]
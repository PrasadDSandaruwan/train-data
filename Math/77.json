[
  {
    "id": 2671,
    "file_path": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
    "start-bug-line": 721,
    "end-bug-line": 721,
    "bug": "max += Math.max(max, Math.abs(a));",
    "fix": "max = Math.max(max, Math.abs(a));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.linear; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Iterator; import org.apache.commons.math.MathRuntimeException; import org.apache.commons.math.util.MathUtils; public class ArrayRealVector extends AbstractRealVector implements Serializable { private static final String NON_FITTING_POSITION_AND_SIZE_MESSAGE = \"position {0} and size {1} don't fit to the size of the input array {2}\"; private static final long serialVersionUID = -1097961340710804027L; private static final RealVectorFormat DEFAULT_FORMAT = RealVectorFormat.getInstance();"
      },
      {
        "txt": "protected double data[]; public ArrayRealVector() { data = new double[0]; } public ArrayRealVector(int size) { data = new double[size]; } public ArrayRealVector(int size, double preset) { data = new double[size]; Arrays.fill(data, preset);"
      },
      {
        "txt": "} public ArrayRealVector(double[] d) { data = d.clone(); } public ArrayRealVector(double[] d, boolean copyArray) throws NullPointerException, IllegalArgumentException { if (d == null) { throw new NullPointerException(); } if (d.length == 0) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException(\"vector must have at least one element\"); } data = copyArray ? d.clone() : d; } public ArrayRealVector(double[] d, int pos, int size) { if (d.length < pos + size) { throw MathRuntimeException.createIllegalArgumentException( NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length); } data = new double[size];"
      },
      {
        "txt": "System.arraycopy(d, pos, data, 0, size); } public ArrayRealVector(Double[] d) { data = new double[d.length]; for (int i = 0; i < d.length; i++) { data[i] = d[i].doubleValue(); } } public ArrayRealVector(Double[] d, int pos, int size) { if (d.length < pos + size) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException( NON_FITTING_POSITION_AND_SIZE_MESSAGE, pos, size, d.length); } data = new double[size]; for (int i = pos; i < pos + size; i++) { data[i-pos] = d[i].doubleValue(); } } public ArrayRealVector(RealVector v) { data = new double[v.getDimension()];"
      },
      {
        "txt": "for (int i = 0; i < data.length; ++i) { data[i] = v.getEntry(i); } } public ArrayRealVector(ArrayRealVector v) { this(v, true); } public ArrayRealVector(ArrayRealVector v, boolean deep) { data = deep ? v.data.clone() : v.data; }"
      },
      {
        "txt": "public ArrayRealVector(ArrayRealVector v1, ArrayRealVector v2) { data = new double[v1.data.length + v2.data.length]; System.arraycopy(v1.data, 0, data, 0, v1.data.length); System.arraycopy(v2.data, 0, data, v1.data.length, v2.data.length); } public ArrayRealVector(ArrayRealVector v1, RealVector v2) { final int l1 = v1.data.length; final int l2 = v2.getDimension(); data = new double[l1 + l2]; System.arraycopy(v1.data, 0, data, 0, l1);"
      },
      {
        "txt": "for (int i = 0; i < l2; ++i) { data[l1 + i] = v2.getEntry(i); } } public ArrayRealVector(RealVector v1, ArrayRealVector v2) { final int l1 = v1.getDimension(); final int l2 = v2.data.length; data = new double[l1 + l2]; for (int i = 0; i < l1; ++i) { data[i] = v1.getEntry(i);"
      },
      {
        "txt": "} System.arraycopy(v2.data, 0, data, l1, l2); } public ArrayRealVector(ArrayRealVector v1, double[] v2) { final int l1 = v1.getDimension(); final int l2 = v2.length; data = new double[l1 + l2]; System.arraycopy(v1.data, 0, data, 0, l1); System.arraycopy(v2, 0, data, l1, l2); }"
      },
      {
        "txt": "public ArrayRealVector(double[] v1, ArrayRealVector v2) { final int l1 = v1.length; final int l2 = v2.getDimension(); data = new double[l1 + l2]; System.arraycopy(v1, 0, data, 0, l1); System.arraycopy(v2.data, 0, data, l1, l2); } public ArrayRealVector(double[] v1, double[] v2) { final int l1 = v1.length; final int l2 = v2.length;"
      },
      {
        "txt": "data = new double[l1 + l2]; System.arraycopy(v1, 0, data, 0, l1); System.arraycopy(v2, 0, data, l1, l2); } public AbstractRealVector copy() { return new ArrayRealVector(this, true); } public RealVector add(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) {"
      },
      {
        "txt": "return add((ArrayRealVector) v); } else { checkVectorDimensions(v); double[] out = data.clone(); Iterator<Entry> it = v.sparseIterator(); Entry e; while (it.hasNext() && (e = it.next()) != null) { out[e.getIndex()] += e.getValue(); } return new ArrayRealVector(out, false);"
      },
      {
        "txt": "} } public RealVector add(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] += v[i]; } return new ArrayRealVector(out, false);"
      },
      {
        "txt": "} public ArrayRealVector add(ArrayRealVector v) throws IllegalArgumentException { return (ArrayRealVector) add(v.data); } public RealVector subtract(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return subtract((ArrayRealVector) v); } else {"
      },
      {
        "txt": "checkVectorDimensions(v); double[] out = data.clone(); Iterator<Entry> it = v.sparseIterator(); Entry e; while(it.hasNext() && (e = it.next()) != null) { out[e.getIndex()] -= e.getValue(); } return new ArrayRealVector(out, false); } }"
      },
      {
        "txt": "public RealVector subtract(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] -= v[i]; } return new ArrayRealVector(out, false); } public ArrayRealVector subtract(ArrayRealVector v)"
      },
      {
        "txt": "throws IllegalArgumentException { return (ArrayRealVector) subtract(v.data); } public RealVector mapAddToSelf(double d) { for (int i = 0; i < data.length; i++) { data[i] = data[i] + d; } return this; } public RealVector mapSubtractToSelf(double d) {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = data[i] - d; } return this; } public RealVector mapMultiplyToSelf(double d) { for (int i = 0; i < data.length; i++) { data[i] = data[i] * d; } return this;"
      },
      {
        "txt": "} public RealVector mapDivideToSelf(double d) { for (int i = 0; i < data.length; i++) { data[i] = data[i] / d; } return this; } public RealVector mapPowToSelf(double d) { for (int i = 0; i < data.length; i++) { data[i] = Math.pow(data[i], d);"
      },
      {
        "txt": "} return this; } public RealVector mapExpToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.exp(data[i]); } return this; } public RealVector mapExpm1ToSelf() {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = Math.expm1(data[i]); } return this; } public RealVector mapLogToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.log(data[i]); } return this;"
      },
      {
        "txt": "} public RealVector mapLog10ToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.log10(data[i]); } return this; } public RealVector mapLog1pToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.log1p(data[i]);"
      },
      {
        "txt": "} return this; } public RealVector mapCoshToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.cosh(data[i]); } return this; } public RealVector mapSinhToSelf() {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = Math.sinh(data[i]); } return this; } public RealVector mapTanhToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.tanh(data[i]); } return this;"
      },
      {
        "txt": "} public RealVector mapCosToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.cos(data[i]); } return this; } public RealVector mapSinToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.sin(data[i]);"
      },
      {
        "txt": "} return this; } public RealVector mapTanToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.tan(data[i]); } return this; } public RealVector mapAcosToSelf() {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = Math.acos(data[i]); } return this; } public RealVector mapAsinToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.asin(data[i]); } return this;"
      },
      {
        "txt": "} public RealVector mapAtanToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.atan(data[i]); } return this; } public RealVector mapInvToSelf() { for (int i = 0; i < data.length; i++) { data[i] = 1.0 / data[i];"
      },
      {
        "txt": "} return this; } public RealVector mapAbsToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.abs(data[i]); } return this; } public RealVector mapSqrtToSelf() {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = Math.sqrt(data[i]); } return this; } public RealVector mapCbrtToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.cbrt(data[i]); } return this;"
      },
      {
        "txt": "} public RealVector mapCeilToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.ceil(data[i]); } return this; } public RealVector mapFloorToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.floor(data[i]);"
      },
      {
        "txt": "} return this; } public RealVector mapRintToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.rint(data[i]); } return this; } public RealVector mapSignumToSelf() {"
      },
      {
        "txt": "for (int i = 0; i < data.length; i++) { data[i] = Math.signum(data[i]); } return this; } public RealVector mapUlpToSelf() { for (int i = 0; i < data.length; i++) { data[i] = Math.ulp(data[i]); } return this;"
      },
      {
        "txt": "} public RealVector ebeMultiply(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return ebeMultiply((ArrayRealVector) v); } else { checkVectorDimensions(v); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] *= v.getEntry(i);"
      },
      {
        "txt": "} return new ArrayRealVector(out, false); } } public RealVector ebeMultiply(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] *= v[i];"
      },
      {
        "txt": "} return new ArrayRealVector(out, false); } public ArrayRealVector ebeMultiply(ArrayRealVector v) throws IllegalArgumentException { return (ArrayRealVector) ebeMultiply(v.data); } public RealVector ebeDivide(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) {"
      },
      {
        "txt": "return ebeDivide((ArrayRealVector) v); } else { checkVectorDimensions(v); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] /= v.getEntry(i); } return new ArrayRealVector(out, false); } }"
      },
      {
        "txt": "public RealVector ebeDivide(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double[] out = data.clone(); for (int i = 0; i < data.length; i++) { out[i] /= v[i]; } return new ArrayRealVector(out, false); } public ArrayRealVector ebeDivide(ArrayRealVector v)"
      },
      {
        "txt": "throws IllegalArgumentException { return (ArrayRealVector) ebeDivide(v.data); } public double[] getData() { return data.clone(); } public double[] getDataRef() { return data; } public double dotProduct(RealVector v)"
      },
      {
        "txt": "throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return dotProduct((ArrayRealVector) v); } else { checkVectorDimensions(v); double dot = 0; Iterator<Entry> it = v.sparseIterator(); Entry e; while(it.hasNext() && (e = it.next()) != null) { dot += data[e.getIndex()] * e.getValue();"
      },
      {
        "txt": "} return dot; } } public double dotProduct(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double dot = 0; for (int i = 0; i < data.length; i++) { dot += data[i] * v[i];"
      },
      {
        "txt": "} return dot; } public double dotProduct(ArrayRealVector v) throws IllegalArgumentException { return dotProduct(v.data); } @Override public double getNorm() { double sum = 0;"
      },
      {
        "txt": "for (double a : data) { sum += a * a; } return Math.sqrt(sum); } @Override public double getL1Norm() { double sum = 0; for (double a : data) { sum += Math.abs(a);"
      },
      {
        "txt": "return sum; } @Override public double getLInfNorm() { double max = 0; for (double a : data) { <extra_id_0> } return max; } public double getDistance(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) {"
      },
      {
        "txt": "throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return getDistance((ArrayRealVector) v); } else { checkVectorDimensions(v); double sum = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v.getEntry(i); sum += delta * delta; }"
      },
      {
        "txt": "return Math.sqrt(sum); } } public double getDistance(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double sum = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v[i]; sum += delta * delta;"
      },
      {
        "txt": "} return Math.sqrt(sum); } public double getDistance(ArrayRealVector v) throws IllegalArgumentException { return getDistance(v.data); } public double getL1Distance(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) {"
      },
      {
        "txt": "return getL1Distance((ArrayRealVector) v); } else { checkVectorDimensions(v); double sum = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v.getEntry(i); sum += Math.abs(delta); } return sum; }"
      },
      {
        "txt": "} public double getL1Distance(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double sum = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v[i]; sum += Math.abs(delta); } return sum;"
      },
      {
        "txt": "} public double getL1Distance(ArrayRealVector v) throws IllegalArgumentException { return getL1Distance(v.data); } public double getLInfDistance(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return getLInfDistance((ArrayRealVector) v); } else {"
      },
      {
        "txt": "checkVectorDimensions(v); double max = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v.getEntry(i); max = Math.max(max, Math.abs(delta)); } return max; } } public double getLInfDistance(double[] v)"
      },
      {
        "txt": "throws IllegalArgumentException { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < data.length; ++i) { final double delta = data[i] - v[i]; max = Math.max(max, Math.abs(delta)); } return max; } public double getLInfDistance(ArrayRealVector v)"
      },
      {
        "txt": "throws IllegalArgumentException { return getLInfDistance(v.data); } public RealVector unitVector() throws ArithmeticException { final double norm = getNorm(); if (norm == 0) { throw MathRuntimeException.createArithmeticException(\"zero norm\"); } return mapDivide(norm); }"
      },
      {
        "txt": "public void unitize() throws ArithmeticException { final double norm = getNorm(); if (norm == 0) { throw MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\"); } mapDivideToSelf(norm); } public RealVector projection(RealVector v) { return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); }"
      },
      {
        "txt": "public RealVector projection(double[] v) { return projection(new ArrayRealVector(v, false)); } public ArrayRealVector projection(ArrayRealVector v) { return (ArrayRealVector) v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } public RealMatrix outerProduct(RealVector v) throws IllegalArgumentException { if (v instanceof ArrayRealVector) { return outerProduct((ArrayRealVector) v);"
      },
      {
        "txt": "} else { checkVectorDimensions(v); final int m = data.length; final RealMatrix out = MatrixUtils.createRealMatrix(m, m); for (int i = 0; i < data.length; i++) { for (int j = 0; j < data.length; j++) { out.setEntry(i, j, data[i] * v.getEntry(j)); } } return out;"
      },
      {
        "txt": "} } public RealMatrix outerProduct(ArrayRealVector v) throws IllegalArgumentException { return outerProduct(v.data); } public RealMatrix outerProduct(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); final int m = data.length;"
      },
      {
        "txt": "final RealMatrix out = MatrixUtils.createRealMatrix(m, m); for (int i = 0; i < data.length; i++) { for (int j = 0; j < data.length; j++) { out.setEntry(i, j, data[i] * v[j]); } } return out; } public double getEntry(int index) throws MatrixIndexException { return data[index];"
      },
      {
        "txt": "} public int getDimension() { return data.length; } public RealVector append(RealVector v) { try { return new ArrayRealVector(this, (ArrayRealVector) v); } catch (ClassCastException cce) { return new ArrayRealVector(this, v); }"
      },
      {
        "txt": "} public ArrayRealVector append(ArrayRealVector v) { return new ArrayRealVector(this, v); } public RealVector append(double in) { final double[] out = new double[data.length + 1]; System.arraycopy(data, 0, out, 0, data.length); out[data.length] = in; return new ArrayRealVector(out, false); }"
      },
      {
        "txt": "public RealVector append(double[] in) { return new ArrayRealVector(this, in); } public RealVector getSubVector(int index, int n) { ArrayRealVector out = new ArrayRealVector(n); try { System.arraycopy(data, index, out.data, 0, n); } catch (IndexOutOfBoundsException e) { checkIndex(index); checkIndex(index + n - 1);"
      },
      {
        "txt": "} return out; } public void setEntry(int index, double value) { try { data[index] = value; } catch (IndexOutOfBoundsException e) { checkIndex(index); } }"
      },
      {
        "txt": "public void setSubVector(int index, RealVector v) { try { try { set(index, (ArrayRealVector) v); } catch (ClassCastException cce) { for (int i = index; i < index + v.getDimension(); ++i) { data[i] = v.getEntry(i-index); } } } catch (IndexOutOfBoundsException e) {"
      },
      {
        "txt": "checkIndex(index); checkIndex(index + v.getDimension() - 1); } } public void setSubVector(int index, double[] v) { try { System.arraycopy(v, 0, data, index, v.length); } catch (IndexOutOfBoundsException e) { checkIndex(index); checkIndex(index + v.length - 1);"
      },
      {
        "txt": "} } public void set(int index, ArrayRealVector v) throws MatrixIndexException { setSubVector(index, v.data); } public void set(double value) { Arrays.fill(data, value); } public double[] toArray(){"
      },
      {
        "txt": "return data.clone(); } @Override public String toString(){ return DEFAULT_FORMAT.format(this); } protected void checkVectorDimensions(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); }"
      },
      {
        "txt": "protected void checkVectorDimensions(int n) throws IllegalArgumentException { if (data.length != n) { throw MathRuntimeException.createIllegalArgumentException( \"vector length mismatch: got {0} but expected {1}\", data.length, n); } } public boolean isNaN() { for (double v : data) {"
      },
      {
        "txt": "if (Double.isNaN(v)) { return true; } } return false; } public boolean isInfinite() { if (isNaN()) { return false; }"
      },
      {
        "txt": "for (double v : data) { if (Double.isInfinite(v)) { return true; } } return false; } @Override public boolean equals(Object other) { if (this == other) {"
      },
      {
        "txt": "return true; } if (other == null || !(other instanceof RealVector)) { return false; } RealVector rhs = (RealVector) other; if (data.length != rhs.getDimension()) { return false; } if (rhs.isNaN()) {"
      },
      {
        "txt": "return this.isNaN(); } for (int i = 0; i < data.length; ++i) { if (data[i] != rhs.getEntry(i)) { return false; } } return true; } @Override"
      },
      {
        "txt": "public int hashCode() { if (isNaN()) { return 9; } return MathUtils.hash(data); }"
      }
    ]
  },
  {
    "id": 2672,
    "file_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
    "start-bug-line": 498,
    "end-bug-line": 506,
    "bug": "public double getLInfNorm() { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); max += iter.value(); } return max; }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.linear; import java.io.Serializable; import org.apache.commons.math.MathRuntimeException; import org.apache.commons.math.util.OpenIntToDoubleHashMap; import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator;"
      },
      {
        "txt": "public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable { public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12; private static final long serialVersionUID = 8772222695580707260L; private final OpenIntToDoubleHashMap entries; private final int virtualSize; private double epsilon; public OpenMapRealVector() { this(0, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension) {"
      },
      {
        "txt": "this(dimension, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; } protected OpenMapRealVector(OpenMapRealVector v, int resize) { virtualSize = v.getDimension() + resize; entries = new OpenIntToDoubleHashMap(v.entries);"
      },
      {
        "txt": "epsilon = v.epsilon; } public OpenMapRealVector(int dimension, int expectedSize) { this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); this.epsilon = epsilon; }"
      },
      {
        "txt": "public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) {"
      },
      {
        "txt": "entries.put(key, value); } } } public OpenMapRealVector(Double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(Double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0);"
      },
      {
        "txt": "this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key].doubleValue(); if (!isDefaultValue(value)) { entries.put(key, value); } } } public OpenMapRealVector(OpenMapRealVector v) { virtualSize = v.getDimension();"
      },
      {
        "txt": "entries = new OpenIntToDoubleHashMap(v.getEntries()); epsilon = v.epsilon; } public OpenMapRealVector(RealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(0.0); epsilon = DEFAULT_ZERO_TOLERANCE; for (int key = 0; key < virtualSize; key++) { double value = v.getEntry(key); if (!isDefaultValue(value)) {"
      },
      {
        "txt": "entries.put(key, value); } } } private OpenIntToDoubleHashMap getEntries() { return entries; } protected boolean isDefaultValue(double value) { return Math.abs(value) < epsilon; }"
      },
      {
        "txt": "public RealVector add(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return add((OpenMapRealVector) v); } else { return super.add(v); } } public OpenMapRealVector add(OpenMapRealVector v) throws IllegalArgumentException{ checkVectorDimensions(v.getDimension());"
      },
      {
        "txt": "boolean copyThis = entries.size() > v.entries.size(); OpenMapRealVector res = copyThis ? this.copy() : v.copy(); Iterator iter = copyThis ? v.entries.iterator() : entries.iterator(); OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries; while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (randomAccess.containsKey(key)) { res.setEntry(key, randomAccess.get(key) + iter.value()); } else {"
      },
      {
        "txt": "res.setEntry(key, iter.value()); } } return res; } public OpenMapRealVector append(OpenMapRealVector v) { OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); Iterator iter = v.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key() + virtualSize, iter.value()); } return res; } public OpenMapRealVector append(RealVector v) { if (v instanceof OpenMapRealVector) { return append((OpenMapRealVector) v); } return append(v.getData()); }"
      },
      {
        "txt": "public OpenMapRealVector append(double d) { OpenMapRealVector res = new OpenMapRealVector(this, 1); res.setEntry(virtualSize, d); return res; } public OpenMapRealVector append(double[] a) { OpenMapRealVector res = new OpenMapRealVector(this, a.length); for (int i = 0; i < a.length; i++) { res.setEntry(i + virtualSize, a[i]); }"
      },
      {
        "txt": "return res; } public OpenMapRealVector copy() { return new OpenMapRealVector(this); } public double dotProduct(OpenMapRealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); boolean thisIsSmaller = entries.size() < v.entries.size(); Iterator iter = thisIsSmaller ? entries.iterator() : v.entries.iterator(); OpenIntToDoubleHashMap larger = thisIsSmaller ? v.entries : entries;"
      },
      {
        "txt": "double d = 0; while(iter.hasNext()) { iter.advance(); d += iter.value() * larger.get(iter.key()); } return d; } public double dotProduct(RealVector v) throws IllegalArgumentException { if(v instanceof OpenMapRealVector) { return dotProduct((OpenMapRealVector)v);"
      },
      {
        "txt": "} else { return super.dotProduct(v); } } public OpenMapRealVector ebeDivide(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key())); } return res; } public OpenMapRealVector ebeDivide(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key(), iter.value() / v[iter.key()]); } return res; } public OpenMapRealVector ebeMultiply(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); } return res; } public OpenMapRealVector ebeMultiply(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; } public OpenMapRealVector getSubVector(int index, int n) throws MatrixIndexException { checkIndex(index); checkIndex(index + n - 1); OpenMapRealVector res = new OpenMapRealVector(n); int end = index + n; Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (key >= index && key < end) { res.setEntry(key - index, iter.value()); } } return res; } public double[] getData() {"
      },
      {
        "txt": "double[] res = new double[virtualSize]; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); res[iter.key()] = iter.value(); } return res; } public int getDimension() { return virtualSize;"
      },
      {
        "txt": "} public double getDistance(OpenMapRealVector v) throws IllegalArgumentException { Iterator iter = entries.iterator(); double res = 0; while (iter.hasNext()) { iter.advance(); int key = iter.key(); double delta; delta = iter.value() - v.getEntry(key); res += delta * delta;"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { final double value = iter.value(); res += value * value; } }"
      },
      {
        "txt": "return Math.sqrt(res); } public double getDistance(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getDistance((OpenMapRealVector) v); } return getDistance(v.getData()); } public double getDistance(double[] v) throws IllegalArgumentException {"
      },
      {
        "txt": "checkVectorDimensions(v.length); double res = 0; for (int i = 0; i < v.length; i++) { double delta = entries.get(i) - v[i]; res += delta * delta; } return Math.sqrt(res); } public double getEntry(int index) throws MatrixIndexException { checkIndex(index);"
      },
      {
        "txt": "return entries.get(index); } public double getL1Distance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = Math.abs(iter.value() - v.getEntry(iter.key())); max += delta; }"
      },
      {
        "txt": "iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { double delta = Math.abs(iter.value()); max += Math.abs(delta); } } return max;"
      },
      {
        "txt": "} public double getL1Distance(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getL1Distance((OpenMapRealVector) v); } return getL1Distance(v.getData()); } public double getL1Distance(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length);"
      },
      {
        "txt": "for (int i = 0; i < v.length; i++) { double delta = Math.abs(getEntry(i) - v[i]); max += delta; } return max; } <extra_id_0> private double getLInfDistance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = Math.abs(iter.value() - v.getEntry(iter.key()));"
      },
      {
        "txt": "iter.advance(); double delta = Math.abs(iter.value() - v.getEntry(iter.key())); if (delta > max) { max = delta; } } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key();"
      },
      {
        "txt": "if (!entries.containsKey(key)) { if (iter.value() > max) { max = iter.value(); } } } return max; } public double getLInfDistance(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension());"
      },
      {
        "txt": "if (v instanceof OpenMapRealVector) { return getLInfDistance((OpenMapRealVector) v); } return getLInfDistance(v.getData()); } public double getLInfDistance(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = Math.abs(getEntry(i) - v[i]);"
      },
      {
        "txt": "if (delta > max) { max = delta; } } return max; } public boolean isInfinite() { boolean infiniteFound = false; Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); final double value = iter.value(); if (Double.isNaN(value)) { return false; } if (Double.isInfinite(value)) { infiniteFound = true; } } return infiniteFound;"
      },
      {
        "txt": "} public boolean isNaN() { Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); if (Double.isNaN(iter.value())) { return true; } } return false;"
      },
      {
        "txt": "} public OpenMapRealVector mapAdd(double d) { return copy().mapAddToSelf(d); } public OpenMapRealVector mapAddToSelf(double d) { for (int i = 0; i < virtualSize; i++) { setEntry(i, getEntry(i) + d); } return this; }"
      },
      {
        "txt": "public RealMatrix outerProduct(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length); RealMatrix res = new OpenMapRealMatrix(virtualSize, virtualSize); Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); int row = iter.key(); double value = iter.value(); for (int col = 0; col < virtualSize; col++) { res.setEntry(row, col, value * v[col]);"
      },
      {
        "txt": "} } return res; } public RealVector projection(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } public OpenMapRealVector projection(double[] v) throws IllegalArgumentException { checkVectorDimensions(v.length);"
      },
      {
        "txt": "return (OpenMapRealVector) projection(new OpenMapRealVector(v)); } public void setEntry(int index, double value) throws MatrixIndexException { checkIndex(index); if (!isDefaultValue(value)) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); } }"
      },
      {
        "txt": "public void setSubVector(int index, RealVector v) throws MatrixIndexException { checkIndex(index); checkIndex(index + v.getDimension() - 1); setSubVector(index, v.getData()); } public void setSubVector(int index, double[] v) throws MatrixIndexException { checkIndex(index); checkIndex(index + v.length - 1); for (int i = 0; i < v.length; i++) { setEntry(i + index, v[i]);"
      },
      {
        "txt": "} } public void set(double value) { for (int i = 0; i < virtualSize; i++) { setEntry(i, value); } } public OpenMapRealVector subtract(OpenMapRealVector v) throws IllegalArgumentException{ checkVectorDimensions(v.getDimension()); OpenMapRealVector res = copy();"
      },
      {
        "txt": "Iterator iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (entries.containsKey(key)) { res.setEntry(key, entries.get(key) - iter.value()); } else { res.setEntry(key, -iter.value()); } }"
      },
      {
        "txt": "return res; } public OpenMapRealVector subtract(RealVector v) throws IllegalArgumentException { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return subtract((OpenMapRealVector) v); } return subtract(v.getData()); } public OpenMapRealVector subtract(double[] v) throws IllegalArgumentException {"
      },
      {
        "txt": "checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); for (int i = 0; i < v.length; i++) { if (entries.containsKey(i)) { res.setEntry(i, entries.get(i) - v[i]); } else { res.setEntry(i, -v[i]); } } return res;"
      },
      {
        "txt": "} public OpenMapRealVector unitVector() { OpenMapRealVector res = copy(); res.unitize(); return res; } public void unitize() { double norm = getNorm(); if (isDefaultValue(norm)) { throw MathRuntimeException.createArithmeticException(\"cannot normalize a zero norm vector\");"
      },
      {
        "txt": "} Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); entries.put(iter.key(), iter.value() / norm); } } public double[] toArray() { return getData(); }"
      },
      {
        "txt": "@Override public int hashCode() { final int prime = 31; int result = 1; long temp; temp = Double.doubleToLongBits(epsilon); result = prime * result + (int) (temp ^ (temp >>> 32)); result = prime * result + virtualSize; Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); temp = Double.doubleToLongBits(iter.value()); result = prime * result + (int) (temp ^ (temp >>32)); } return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true;"
      },
      {
        "txt": "} if (obj == null) { return false; } if (!(obj instanceof OpenMapRealVector)) { return false; } OpenMapRealVector other = (OpenMapRealVector) obj; if (virtualSize != other.virtualSize) { return false;"
      },
      {
        "txt": "} if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) { return false; } Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double test = other.getEntry(iter.key()); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) {"
      },
      {
        "txt": "return false; } } iter = other.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); double test = iter.value(); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { return false; }"
      },
      {
        "txt": "} return true; } public double getSparcity() { return (double)entries.size()/(double)getDimension(); } public java.util.Iterator<Entry> sparseIterator() { return new OpenMapSparseIterator(); } protected class OpenMapEntry extends Entry {"
      },
      {
        "txt": "private final Iterator iter; protected OpenMapEntry(Iterator iter) { this.iter = iter; } @Override public double getValue() { return iter.value(); } @Override public void setValue(double value) {"
      },
      {
        "txt": "entries.put(iter.key(), value); } @Override public int getIndex() { return iter.key(); } } protected class OpenMapSparseIterator implements java.util.Iterator<Entry> { private final Iterator iter; private final Entry current;"
      },
      {
        "txt": "protected OpenMapSparseIterator() { iter = entries.iterator(); current = new OpenMapEntry(iter); } public boolean hasNext() { return iter.hasNext(); } public Entry next() { iter.advance(); return current;"
      },
      {
        "txt": "} public void remove() { throw new UnsupportedOperationException(\"Not supported\"); } }"
      }
    ]
  }
]
[
  {
    "id": 2740,
    "file_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
    "start-bug-line": 109,
    "end-bug-line": 109,
    "bug": "",
    "fix": "try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.distribution; import java.io.Serializable; import org.apache.commons.math.MathException; import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.special.Erf; public class NormalDistributionImpl extends AbstractContinuousDistribution implements NormalDistribution, Serializable { private static final long serialVersionUID = 8589540077390120676L;"
      },
      {
        "txt": "private double mean = 0; private double standardDeviation = 1; public NormalDistributionImpl(double mean, double sd){ super(); setMean(mean); setStandardDeviation(sd); } public NormalDistributionImpl(){ this(0.0, 1.0); }"
      },
      {
        "txt": "public double getMean() { return mean; } public void setMean(double mean) { this.mean = mean; } public double getStandardDeviation() { return standardDeviation; } public void setStandardDeviation(double sd) {"
      },
      {
        "txt": "throw new IllegalArgumentException( \"Standard deviation must be positive.\"); } standardDeviation = sd; } public double cumulativeProbability(double x) throws MathException { <extra_id_0> (standardDeviation * Math.sqrt(2.0)))); } public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return Double.NEGATIVE_INFINITY;"
      },
      {
        "txt": "if (p == 0) { return Double.NEGATIVE_INFINITY; } if (p == 1) { return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } protected double getDomainLowerBound(double p) { double ret;"
      },
      {
        "txt": "if (p < .5) { ret = -Double.MAX_VALUE; } else { ret = getMean(); } return ret; } protected double getDomainUpperBound(double p) { double ret; if (p < .5) {"
      },
      {
        "txt": "ret = getMean(); } else { ret = Double.MAX_VALUE; } return ret; } protected double getInitialDomain(double p) { double ret; if (p < .5) { ret = getMean() - getStandardDeviation();"
      },
      {
        "txt": "} else if (p > .5) { ret = getMean() + getStandardDeviation(); } else { ret = getMean(); } return ret; }"
      }
    ]
  },
  {
    "id": 2741,
    "file_path": "src/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
    "start-bug-line": 111,
    "end-bug-line": 111,
    "bug": "",
    "fix": "} catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0.0d; } else if (x > (mean + 20 * standardDeviation)) { return 1.0d; } else { throw ex; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.distribution; import java.io.Serializable; import org.apache.commons.math.MathException; import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.special.Erf; public class NormalDistributionImpl extends AbstractContinuousDistribution implements NormalDistribution, Serializable { private static final long serialVersionUID = 8589540077390120676L; private double mean = 0; private double standardDeviation = 1;"
      },
      {
        "txt": "public NormalDistributionImpl(double mean, double sd){ super(); setMean(mean); setStandardDeviation(sd); } public NormalDistributionImpl(){ this(0.0, 1.0); } public double getMean() { return mean;"
      },
      {
        "txt": "} public void setMean(double mean) { this.mean = mean; } public double getStandardDeviation() { return standardDeviation; } public void setStandardDeviation(double sd) { if (sd <= 0.0) { throw new IllegalArgumentException("
      },
      {
        "txt": "} standardDeviation = sd; } public double cumulativeProbability(double x) throws MathException { return 0.5 * (1.0 + Erf.erf((x - mean) / (standardDeviation * Math.sqrt(2.0)))); <extra_id_0> public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return Double.NEGATIVE_INFINITY; } if (p == 1) {"
      },
      {
        "txt": "} if (p == 1) { return Double.POSITIVE_INFINITY; } return super.inverseCumulativeProbability(p); } protected double getDomainLowerBound(double p) { double ret; if (p < .5) { ret = -Double.MAX_VALUE;"
      },
      {
        "txt": "} else { ret = getMean(); } return ret; } protected double getDomainUpperBound(double p) { double ret; if (p < .5) { ret = getMean(); } else {"
      },
      {
        "txt": "ret = Double.MAX_VALUE; } return ret; } protected double getInitialDomain(double p) { double ret; if (p < .5) { ret = getMean() - getStandardDeviation(); } else if (p > .5) { ret = getMean() + getStandardDeviation();"
      },
      {
        "txt": "} else { ret = getMean(); } return ret; }"
      }
    ]
  }
]
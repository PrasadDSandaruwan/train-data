[
  {
    "id": 2682,
    "file_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java",
    "start-bug-line": 82,
    "end-bug-line": 82,
    "bug": "if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {",
    "fix": "if (MathUtils.compareTo(entry, 0, epsilon) > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.linear; import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.RealPointValuePair;"
      },
      {
        "txt": "import org.apache.commons.math.util.MathUtils; public class SimplexSolver extends AbstractLinearOptimizer { private static final double DEFAULT_EPSILON = 1.0e-6; protected final double epsilon; public SimplexSolver() { this(DEFAULT_EPSILON); } public SimplexSolver(final double epsilon) { this.epsilon = epsilon; }"
      },
      {
        "txt": "private Integer getPivotColumn(SimplexTableau tableau) { double minValue = 0; Integer minPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { minValue = tableau.getEntry(0, i); minPos = i; } } return minPos;"
      },
      {
        "txt": "private Integer getPivotRow(final int col, final SimplexTableau tableau) { double minRatio = Double.MAX_VALUE; Integer minRatioPos = null; for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); final double entry = tableau.getEntry(i, col); <extra_id_0> final double ratio = rhs / entry; if (ratio < minRatio) { minRatio = ratio; minRatioPos = i; } }"
      },
      {
        "txt": "} } } return minRatioPos; } protected void doIteration(final SimplexTableau tableau) throws OptimizationException { incrementIterationsCounter(); Integer pivotCol = getPivotColumn(tableau); Integer pivotRow = getPivotRow(pivotCol, tableau);"
      },
      {
        "txt": "if (pivotRow == null) { throw new UnboundedSolutionException(); } double pivotVal = tableau.getEntry(pivotRow, pivotCol); tableau.divideRow(pivotRow, pivotVal); for (int i = 0; i < tableau.getHeight(); i++) { if (i != pivotRow) { double multiplier = tableau.getEntry(i, pivotCol); tableau.subtractRow(i, pivotRow, multiplier); }"
      },
      {
        "txt": "} } private boolean isPhase1Solved(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() == 0) { return true; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false; }"
      },
      {
        "txt": "} return true; } public boolean isOptimal(final SimplexTableau tableau) { if (tableau.getNumArtificialVariables() > 0) { return false; } for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) { if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { return false;"
      },
      {
        "txt": "} } return true; } protected void solvePhase1(final SimplexTableau tableau) throws OptimizationException { if (tableau.getNumArtificialVariables() == 0) { return; } while (!isPhase1Solved(tableau)) {"
      },
      {
        "txt": "doIteration(tableau); } if (!MathUtils.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0, epsilon)) { throw new NoFeasibleSolutionException(); } } @Override public RealPointValuePair doOptimize() throws OptimizationException { final SimplexTableau tableau ="
      },
      {
        "txt": "new SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); solvePhase1(tableau); tableau.discardArtificialVariables(); while (!isOptimal(tableau)) { doIteration(tableau); } return tableau.getSolution(); }"
      }
    ]
  }
]
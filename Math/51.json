[
  {
    "id": 2585,
    "file_path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
    "start-bug-line": 185,
    "end-bug-line": 185,
    "bug": "",
    "fix": "case REGULA_FALSI: if (x == x1) { final double delta = FastMath.max(rtol * FastMath.abs(x1), atol);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis.solvers; import org.apache.commons.math.util.FastMath; import org.apache.commons.math.analysis.UnivariateRealFunction;"
      },
      {
        "txt": "import org.apache.commons.math.exception.MathInternalError; public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver implements BracketedUnivariateRealSolver<UnivariateRealFunction> { protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6; private AllowedSolution allowed; private final Method method; protected BaseSecantSolver(final double absoluteAccuracy, final Method method) { super(absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE;"
      },
      {
        "txt": "this.method = method; } protected BaseSecantSolver(final double relativeAccuracy, final double absoluteAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } protected BaseSecantSolver(final double relativeAccuracy,"
      },
      {
        "txt": "final double absoluteAccuracy, final double functionValueAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {"
      },
      {
        "txt": "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution); } public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) { this.allowed = allowedSolution; return super.solve(maxEval, f, min, max, startValue); } @Override public double solve(final int maxEval, final UnivariateRealFunction f,"
      },
      {
        "txt": "final double min, final double max, final double startValue) { return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE); } protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0;"
      },
      {
        "txt": "} if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) {"
      },
      {
        "txt": "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else {"
      },
      {
        "txt": "case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; <extra_id_0> default: } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) {"
      },
      {
        "txt": "f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break;"
      },
      {
        "txt": "case RIGHT_SIDE: if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break;"
      },
      {
        "txt": "case ABOVE_SIDE: if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),"
      },
      {
        "txt": "atol)) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0;"
      },
      {
        "txt": "case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } } protected enum Method { REGULA_FALSI,"
      },
      {
        "txt": "ILLINOIS, PEGASUS; }"
      }
    ]
  },
  {
    "id": 2586,
    "file_path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
    "start-bug-line": 187,
    "end-bug-line": 187,
    "bug": "",
    "fix": "x0 = 0.5 * (x0 + x1 - delta); f0 = computeObjectiveValue(x0); } break;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis.solvers; import org.apache.commons.math.util.FastMath; import org.apache.commons.math.analysis.UnivariateRealFunction;"
      },
      {
        "txt": "import org.apache.commons.math.exception.MathInternalError; public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver implements BracketedUnivariateRealSolver<UnivariateRealFunction> { protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6; private AllowedSolution allowed; private final Method method; protected BaseSecantSolver(final double absoluteAccuracy, final Method method) { super(absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE;"
      },
      {
        "txt": "this.method = method; } protected BaseSecantSolver(final double relativeAccuracy, final double absoluteAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } protected BaseSecantSolver(final double relativeAccuracy,"
      },
      {
        "txt": "final double absoluteAccuracy, final double functionValueAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) {"
      },
      {
        "txt": "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution); } public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) { this.allowed = allowedSolution; return super.solve(maxEval, f, min, max, startValue); } @Override public double solve(final int maxEval, final UnivariateRealFunction f,"
      },
      {
        "txt": "final double min, final double max, final double startValue) { return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE); } protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0;"
      },
      {
        "txt": "} if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) {"
      },
      {
        "txt": "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0)); final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else {"
      },
      {
        "txt": "case ILLINOIS: f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; <extra_id_0> } } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) {"
      },
      {
        "txt": "if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE:"
      },
      {
        "txt": "if (!inverted) { return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE:"
      },
      {
        "txt": "if (f1 >= 0) { return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) {"
      },
      {
        "txt": "switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE:"
      },
      {
        "txt": "return (f1 >= 0) ? x1 : x0; default: throw new MathInternalError(); } } } } protected enum Method { REGULA_FALSI, ILLINOIS,"
      },
      {
        "txt": "PEGASUS; }"
      }
    ]
  },
  {
    "id": 2587,
    "file_path": "src/main/java/org/apache/commons/math/analysis/solvers/BaseSecantSolver.java",
    "start-bug-line": 189,
    "end-bug-line": 189,
    "bug": "",
    "fix": "throw new MathInternalError();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis.solvers; import org.apache.commons.math.util.FastMath; import org.apache.commons.math.analysis.UnivariateRealFunction; import org.apache.commons.math.exception.MathInternalError;"
      },
      {
        "txt": "public abstract class BaseSecantSolver extends AbstractUnivariateRealSolver implements BracketedUnivariateRealSolver<UnivariateRealFunction> { protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6; private AllowedSolution allowed; private final Method method; protected BaseSecantSolver(final double absoluteAccuracy, final Method method) { super(absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method;"
      },
      {
        "txt": "} protected BaseSecantSolver(final double relativeAccuracy, final double absoluteAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } protected BaseSecantSolver(final double relativeAccuracy, final double absoluteAccuracy,"
      },
      {
        "txt": "final double functionValueAccuracy, final Method method) { super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy); this.allowed = AllowedSolution.ANY_SIDE; this.method = method; } public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final AllowedSolution allowedSolution) { return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);"
      },
      {
        "txt": "} public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue, final AllowedSolution allowedSolution) { this.allowed = allowedSolution; return super.solve(maxEval, f, min, max, startValue); } @Override public double solve(final int maxEval, final UnivariateRealFunction f, final double min, final double max, final double startValue) {"
      },
      {
        "txt": "return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE); } protected final double doSolve() { double x0 = getMin(); double x1 = getMax(); double f0 = computeObjectiveValue(x0); double f1 = computeObjectiveValue(x1); if (f0 == 0.0) { return x0; }"
      },
      {
        "txt": "if (f1 == 0.0) { return x1; } verifyBracketing(x0, x1); final double ftol = getFunctionValueAccuracy(); final double atol = getAbsoluteAccuracy(); final double rtol = getRelativeAccuracy(); boolean inverted = false; while (true) { final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));"
      },
      {
        "txt": "final double fx = computeObjectiveValue(x); if (fx == 0.0) { return x; } if (f1 * fx < 0) { x0 = x1; f0 = f1; inverted = !inverted; } else { switch (method) {"
      },
      {
        "txt": "f0 *= 0.5; break; case PEGASUS: f0 *= f1 / (f1 + fx); break; default: <extra_id_0> } x1 = x; f1 = fx; if (FastMath.abs(f1) <= ftol) { switch (allowed) { case ANY_SIDE:"
      },
      {
        "txt": "switch (allowed) { case ANY_SIDE: return x1; case LEFT_SIDE: if (inverted) { return x1; } break; case RIGHT_SIDE: if (!inverted) {"
      },
      {
        "txt": "return x1; } break; case BELOW_SIDE: if (f1 <= 0) { return x1; } break; case ABOVE_SIDE: if (f1 >= 0) {"
      },
      {
        "txt": "return x1; } break; default: throw new MathInternalError(); } } if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1), atol)) { switch (allowed) {"
      },
      {
        "txt": "case ANY_SIDE: return x1; case LEFT_SIDE: return inverted ? x1 : x0; case RIGHT_SIDE: return inverted ? x0 : x1; case BELOW_SIDE: return (f1 <= 0) ? x1 : x0; case ABOVE_SIDE: return (f1 >= 0) ? x1 : x0;"
      },
      {
        "txt": "default: throw new MathInternalError(); } } } } protected enum Method { REGULA_FALSI, ILLINOIS, PEGASUS;"
      }
    ]
  }
]
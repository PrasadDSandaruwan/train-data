[
  {
    "id": 2564,
    "file_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
    "start-bug-line": 410,
    "end-bug-line": 410,
    "bug": "",
    "fix": "if (basicRow != null && basicRow == 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.linear; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection;"
      },
      {
        "txt": "import java.util.HashSet; import java.util.List; import java.util.Set; import org.apache.commons.math.linear.Array2DRowRealMatrix; import org.apache.commons.math.linear.MatrixUtils; import org.apache.commons.math.linear.RealMatrix; import org.apache.commons.math.linear.RealVector; import org.apache.commons.math.optimization.GoalType; import org.apache.commons.math.optimization.RealPointValuePair; import org.apache.commons.math.util.Precision;"
      },
      {
        "txt": "class SimplexTableau implements Serializable { private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\"; private static final int DEFAULT_ULPS = 10; private static final long serialVersionUID = -1369660067587938365L; private final LinearObjectiveFunction f; private final List<LinearConstraint> constraints; private final boolean restrictToNonNegative; private final List<String> columnLabels = new ArrayList<String>(); private transient RealMatrix tableau; private final int numDecisionVariables;"
      },
      {
        "txt": "private final int numSlackVariables; private int numArtificialVariables; private final double epsilon; private final int maxUlps; SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) { this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS); }"
      },
      {
        "txt": "SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) { this.f = f; this.constraints = normalizeConstraints(constraints); this.restrictToNonNegative = restrictToNonNegative; this.epsilon = epsilon; this.maxUlps = maxUlps;"
      },
      {
        "txt": "this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1); this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ); this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ); this.tableau = createTableau(goalType == GoalType.MAXIMIZE); initializeColumnLabels(); } protected void initializeColumnLabels() {"
      },
      {
        "txt": "if (getNumObjectiveFunctions() == 2) { columnLabels.add(\"W\"); } columnLabels.add(\"Z\"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add(\"x\" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); }"
      },
      {
        "txt": "for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add(\"s\" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add(\"a\" + i); } columnLabels.add(\"RHS\"); } protected RealMatrix createTableau(final boolean maximize) { int width = numDecisionVariables + numSlackVariables +"
      },
      {
        "txt": "numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS int height = constraints.size() + getNumObjectiveFunctions(); Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width); if (getNumObjectiveFunctions() == 2) { matrix.setEntry(0, 0, -1); } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();"
      },
      {
        "txt": "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients)); } int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) {"
      },
      {
        "txt": "LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i; copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]); if (!restrictToNonNegative) { matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); } matrix.setEntry(row, width - 1, constraint.getValue()); if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1); // slack"
      },
      {
        "txt": "} else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess } if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } }"
      },
      {
        "txt": "return matrix; } public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) { List<LinearConstraint> normalized = new ArrayList<LinearConstraint>(); for (LinearConstraint constraint : originalConstraints) { normalized.add(normalize(constraint)); } return normalized; } private LinearConstraint normalize(final LinearConstraint constraint) {"
      },
      {
        "txt": "if (constraint.getValue() < 0) { return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } protected final int getNumObjectiveFunctions() { return this.numArtificialVariables > 0 ? 2 : 1;"
      },
      {
        "txt": "} private int getConstraintTypeCounts(final Relationship relationship) { int count = 0; for (final LinearConstraint constraint : constraints) { if (constraint.getRelationship() == relationship) { ++count; } } return count; }"
      },
      {
        "txt": "protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) {"
      },
      {
        "txt": "final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { return null; } } return row; } protected void dropPhase1Objective() {"
      },
      {
        "txt": "if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); }"
      },
      {
        "txt": "} for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0;"
      },
      {
        "txt": "for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix);"
      },
      {
        "txt": "this.numArtificialVariables = 0; } private void copyArray(final double[] src, final double[] dest) { System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); } boolean isOptimal() { for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) < 0) { return false;"
      },
      {
        "txt": "} } return true; } protected RealPointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()];"
      },
      {
        "txt": "int colIndex = columnLabels.indexOf(\"x\" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); <extra_id_0> if (basicRows.contains(basicRow)) { coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative); } else { basicRows.add(basicRow); coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -"
      },
      {
        "txt": "coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative); } } return new RealPointValuePair(coefficients, f.getValue(coefficients)); } protected void divideRow(final int dividendRow, final double divisor) { for (int j = 0; j < getWidth(); j++) { tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);"
      },
      {
        "txt": "} } protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow) .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple))); } protected final int getWidth() { return tableau.getColumnDimension(); }"
      },
      {
        "txt": "protected final int getHeight() { return tableau.getRowDimension(); } protected final double getEntry(final int row, final int column) { return tableau.getEntry(row, column); } protected final void setEntry(final int row, final int column, final double value) { tableau.setEntry(row, column, value); }"
      },
      {
        "txt": "protected final int getSlackVariableOffset() { return getNumObjectiveFunctions() + numDecisionVariables; } protected final int getArtificialVariableOffset() { return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables; } protected final int getRhsOffset() { return getWidth() - 1; } protected final int getNumDecisionVariables() {"
      },
      {
        "txt": "return numDecisionVariables; } protected final int getOriginalNumDecisionVariables() { return f.getCoefficients().getDimension(); } protected final int getNumSlackVariables() { return numSlackVariables; } protected final int getNumArtificialVariables() { return numArtificialVariables;"
      },
      {
        "txt": "} protected final double[][] getData() { return tableau.getData(); } @Override public boolean equals(Object other) { if (this == other) { return true; } if (other instanceof SimplexTableau) {"
      },
      {
        "txt": "SimplexTableau rhs = (SimplexTableau) other; return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau);"
      },
      {
        "txt": "} return false; } @Override public int hashCode() { return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^"
      },
      {
        "txt": "maxUlps ^ f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode(); } private void writeObject(ObjectOutputStream oos) throws IOException { oos.defaultWriteObject(); MatrixUtils.serializeRealMatrix(tableau, oos); }"
      },
      {
        "txt": "private void readObject(ObjectInputStream ois) throws ClassNotFoundException, IOException { ois.defaultReadObject(); MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois); }"
      }
    ]
  },
  {
    "id": 2565,
    "file_path": "src/main/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
    "start-bug-line": 413,
    "end-bug-line": 413,
    "bug": "if (basicRows.contains(basicRow)) {",
    "fix": "coefficients[i] = 0; } else if (basicRows.contains(basicRow)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.linear; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection;"
      },
      {
        "txt": "import java.util.HashSet; import java.util.List; import java.util.Set; import org.apache.commons.math.linear.Array2DRowRealMatrix; import org.apache.commons.math.linear.MatrixUtils; import org.apache.commons.math.linear.RealMatrix; import org.apache.commons.math.linear.RealVector; import org.apache.commons.math.optimization.GoalType; import org.apache.commons.math.optimization.RealPointValuePair; import org.apache.commons.math.util.Precision;"
      },
      {
        "txt": "class SimplexTableau implements Serializable { private static final String NEGATIVE_VAR_COLUMN_LABEL = \"x-\"; private static final int DEFAULT_ULPS = 10; private static final long serialVersionUID = -1369660067587938365L; private final LinearObjectiveFunction f; private final List<LinearConstraint> constraints; private final boolean restrictToNonNegative; private final List<String> columnLabels = new ArrayList<String>(); private transient RealMatrix tableau; private final int numDecisionVariables;"
      },
      {
        "txt": "private final int numSlackVariables; private int numArtificialVariables; private final double epsilon; private final int maxUlps; SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon) { this(f, constraints, goalType, restrictToNonNegative, epsilon, DEFAULT_ULPS); }"
      },
      {
        "txt": "SimplexTableau(final LinearObjectiveFunction f, final Collection<LinearConstraint> constraints, final GoalType goalType, final boolean restrictToNonNegative, final double epsilon, final int maxUlps) { this.f = f; this.constraints = normalizeConstraints(constraints); this.restrictToNonNegative = restrictToNonNegative; this.epsilon = epsilon; this.maxUlps = maxUlps;"
      },
      {
        "txt": "this.numDecisionVariables = f.getCoefficients().getDimension() + (restrictToNonNegative ? 0 : 1); this.numSlackVariables = getConstraintTypeCounts(Relationship.LEQ) + getConstraintTypeCounts(Relationship.GEQ); this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) + getConstraintTypeCounts(Relationship.GEQ); this.tableau = createTableau(goalType == GoalType.MAXIMIZE); initializeColumnLabels(); } protected void initializeColumnLabels() {"
      },
      {
        "txt": "if (getNumObjectiveFunctions() == 2) { columnLabels.add(\"W\"); } columnLabels.add(\"Z\"); for (int i = 0; i < getOriginalNumDecisionVariables(); i++) { columnLabels.add(\"x\" + i); } if (!restrictToNonNegative) { columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL); }"
      },
      {
        "txt": "for (int i = 0; i < getNumSlackVariables(); i++) { columnLabels.add(\"s\" + i); } for (int i = 0; i < getNumArtificialVariables(); i++) { columnLabels.add(\"a\" + i); } columnLabels.add(\"RHS\"); } protected RealMatrix createTableau(final boolean maximize) { int width = numDecisionVariables + numSlackVariables +"
      },
      {
        "txt": "numArtificialVariables + getNumObjectiveFunctions() + 1; // + 1 is for RHS int height = constraints.size() + getNumObjectiveFunctions(); Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(height, width); if (getNumObjectiveFunctions() == 2) { matrix.setEntry(0, 0, -1); } int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; matrix.setEntry(zIndex, zIndex, maximize ? 1 : -1); RealVector objectiveCoefficients = maximize ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();"
      },
      {
        "txt": "copyArray(objectiveCoefficients.toArray(), matrix.getDataRef()[zIndex]); matrix.setEntry(zIndex, width - 1, maximize ? f.getConstantTerm() : -1 * f.getConstantTerm()); if (!restrictToNonNegative) { matrix.setEntry(zIndex, getSlackVariableOffset() - 1, getInvertedCoefficientSum(objectiveCoefficients)); } int slackVar = 0; int artificialVar = 0; for (int i = 0; i < constraints.size(); i++) {"
      },
      {
        "txt": "LinearConstraint constraint = constraints.get(i); int row = getNumObjectiveFunctions() + i; copyArray(constraint.getCoefficients().toArray(), matrix.getDataRef()[row]); if (!restrictToNonNegative) { matrix.setEntry(row, getSlackVariableOffset() - 1, getInvertedCoefficientSum(constraint.getCoefficients())); } matrix.setEntry(row, width - 1, constraint.getValue()); if (constraint.getRelationship() == Relationship.LEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1); // slack"
      },
      {
        "txt": "} else if (constraint.getRelationship() == Relationship.GEQ) { matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess } if ((constraint.getRelationship() == Relationship.EQ) || (constraint.getRelationship() == Relationship.GEQ)) { matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1); matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1); matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row))); } }"
      },
      {
        "txt": "return matrix; } public List<LinearConstraint> normalizeConstraints(Collection<LinearConstraint> originalConstraints) { List<LinearConstraint> normalized = new ArrayList<LinearConstraint>(); for (LinearConstraint constraint : originalConstraints) { normalized.add(normalize(constraint)); } return normalized; } private LinearConstraint normalize(final LinearConstraint constraint) {"
      },
      {
        "txt": "if (constraint.getValue() < 0) { return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), -1 * constraint.getValue()); } return new LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue()); } protected final int getNumObjectiveFunctions() { return this.numArtificialVariables > 0 ? 2 : 1;"
      },
      {
        "txt": "} private int getConstraintTypeCounts(final Relationship relationship) { int count = 0; for (final LinearConstraint constraint : constraints) { if (constraint.getRelationship() == relationship) { ++count; } } return count; }"
      },
      {
        "txt": "protected static double getInvertedCoefficientSum(final RealVector coefficients) { double sum = 0; for (double coefficient : coefficients.toArray()) { sum -= coefficient; } return sum; } protected Integer getBasicRow(final int col) { Integer row = null; for (int i = 0; i < getHeight(); i++) {"
      },
      {
        "txt": "final double entry = getEntry(i, col); if (Precision.equals(entry, 1d, maxUlps) && (row == null)) { row = i; } else if (!Precision.equals(entry, 0d, maxUlps)) { return null; } } return row; } protected void dropPhase1Objective() {"
      },
      {
        "txt": "if (getNumObjectiveFunctions() == 1) { return; } List<Integer> columnsToDrop = new ArrayList<Integer>(); columnsToDrop.add(0); for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, maxUlps) > 0) { columnsToDrop.add(i); }"
      },
      {
        "txt": "} for (int i = 0; i < getNumArtificialVariables(); i++) { int col = i + getArtificialVariableOffset(); if (getBasicRow(col) == null) { columnsToDrop.add(col); } } double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()]; for (int i = 1; i < getHeight(); i++) { int col = 0;"
      },
      {
        "txt": "for (int j = 0; j < getWidth(); j++) { if (!columnsToDrop.contains(j)) { matrix[i - 1][col++] = tableau.getEntry(i, j); } } } for (int i = columnsToDrop.size() - 1; i >= 0; i--) { columnLabels.remove((int) columnsToDrop.get(i)); } this.tableau = new Array2DRowRealMatrix(matrix);"
      },
      {
        "txt": "this.numArtificialVariables = 0; } private void copyArray(final double[] src, final double[] dest) { System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length); } boolean isOptimal() { for (int i = getNumObjectiveFunctions(); i < getWidth() - 1; i++) { final double entry = tableau.getEntry(0, i); if (Precision.compareTo(entry, 0d, epsilon) < 0) { return false;"
      },
      {
        "txt": "} } return true; } protected RealPointValuePair getSolution() { int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL); Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null; double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); Set<Integer> basicRows = new HashSet<Integer>(); double[] coefficients = new double[getOriginalNumDecisionVariables()];"
      },
      {
        "txt": "int colIndex = columnLabels.indexOf(\"x\" + i); if (colIndex < 0) { coefficients[i] = 0; continue; } Integer basicRow = getBasicRow(colIndex); <extra_id_0> coefficients[i] = 0 - (restrictToNonNegative ? 0 : mostNegative); } else { basicRows.add(basicRow); coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);"
      },
      {
        "txt": "(basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative); } } return new RealPointValuePair(coefficients, f.getValue(coefficients)); } protected void divideRow(final int dividendRow, final double divisor) { for (int j = 0; j < getWidth(); j++) { tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor); }"
      },
      {
        "txt": "} protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { tableau.setRowVector(minuendRow, tableau.getRowVector(minuendRow) .subtract(tableau.getRowVector(subtrahendRow).mapMultiply(multiple))); } protected final int getWidth() { return tableau.getColumnDimension(); } protected final int getHeight() {"
      },
      {
        "txt": "return tableau.getRowDimension(); } protected final double getEntry(final int row, final int column) { return tableau.getEntry(row, column); } protected final void setEntry(final int row, final int column, final double value) { tableau.setEntry(row, column, value); } protected final int getSlackVariableOffset() {"
      },
      {
        "txt": "return getNumObjectiveFunctions() + numDecisionVariables; } protected final int getArtificialVariableOffset() { return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables; } protected final int getRhsOffset() { return getWidth() - 1; } protected final int getNumDecisionVariables() { return numDecisionVariables;"
      },
      {
        "txt": "} protected final int getOriginalNumDecisionVariables() { return f.getCoefficients().getDimension(); } protected final int getNumSlackVariables() { return numSlackVariables; } protected final int getNumArtificialVariables() { return numArtificialVariables; }"
      },
      {
        "txt": "protected final double[][] getData() { return tableau.getData(); } @Override public boolean equals(Object other) { if (this == other) { return true; } if (other instanceof SimplexTableau) { SimplexTableau rhs = (SimplexTableau) other;"
      },
      {
        "txt": "return (restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables) && (numSlackVariables == rhs.numSlackVariables) && (numArtificialVariables == rhs.numArtificialVariables) && (epsilon == rhs.epsilon) && (maxUlps == rhs.maxUlps) && f.equals(rhs.f) && constraints.equals(rhs.constraints) && tableau.equals(rhs.tableau); }"
      },
      {
        "txt": "return false; } @Override public int hashCode() { return Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables ^ numSlackVariables ^ numArtificialVariables ^ Double.valueOf(epsilon).hashCode() ^ maxUlps ^"
      },
      {
        "txt": "f.hashCode() ^ constraints.hashCode() ^ tableau.hashCode(); } private void writeObject(ObjectOutputStream oos) throws IOException { oos.defaultWriteObject(); MatrixUtils.serializeRealMatrix(tableau, oos); } private void readObject(ObjectInputStream ois)"
      },
      {
        "txt": "throws ClassNotFoundException, IOException { ois.defaultReadObject(); MatrixUtils.deserializeRealMatrix(this, \"tableau\", ois); }"
      }
    ]
  }
]
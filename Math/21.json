[
  {
    "id": 2513,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 69,
    "end-bug-line": 69,
    "bug": "int[] swap  = new int[order];",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition {"
      },
      {
        "txt": "private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; <extra_id_0> int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) {"
      },
      {
        "txt": "int r = 0; for (boolean loop = true; loop;) { swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii = index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } }"
      },
      {
        "txt": "if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; } int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }"
      },
      {
        "txt": "for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) { throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } } ++r; loop = false; } else { final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt;"
      },
      {
        "txt": "final double inverse = 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f;"
      },
      {
        "txt": "c[ij][ii] = f; } } loop = ++r < order; } } rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) {"
      },
      {
        "txt": "root.setEntry(index[i], j, b[i][j]); } } } public RealMatrix getRootMatrix() { return root; } public int getRank() { return rank; }"
      }
    ]
  },
  {
    "id": 2514,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 79,
    "end-bug-line": 79,
    "bug": "swap[r] = r;",
    "fix": "int swapR = r;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition { private final RealMatrix root; private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order];"
      },
      {
        "txt": "int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) { <extra_id_0> for (int i = r + 1; i < order; ++i) { int ii = index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; }"
      },
      {
        "txt": "swap[r] = i; } } if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; } int ir = index[r]; if (c[ir][ir] < small) {"
      },
      {
        "txt": "if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) { throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } } ++r; loop = false;"
      },
      {
        "txt": "} else { final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse = 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) {"
      },
      {
        "txt": "final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } } loop = ++r < order; } } rank = r;"
      },
      {
        "txt": "root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } public RealMatrix getRootMatrix() { return root; }"
      },
      {
        "txt": "public int getRank() { return rank; }"
      }
    ]
  },
  {
    "id": 2515,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 82,
    "end-bug-line": 84,
    "bug": "int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i;",
    "fix": "int isr = index[swapR]; if (c[ii][ii] > c[isr][isr]) { swapR = i;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition {"
      },
      {
        "txt": "private final RealMatrix root; private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap = new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) {"
      },
      {
        "txt": "} int r = 0; for (boolean loop = true; loop;) { swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii = index[i]; <extra_id_0> } } if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp;"
      },
      {
        "txt": "index[r] = index[swap[r]]; index[swap[r]] = tmp; } int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) {"
      },
      {
        "txt": "throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } } ++r; loop = false; } else { final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse = 1 / sqrt; for (int i = r + 1; i < order; ++i) {"
      },
      {
        "txt": "final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; }"
      },
      {
        "txt": "} loop = ++r < order; } } rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); }"
      },
      {
        "txt": "} } public RealMatrix getRootMatrix() { return root; } public int getRank() { return rank; }"
      }
    ]
  },
  {
    "id": 2516,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 90,
    "end-bug-line": 93,
    "bug": "if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp;",
    "fix": "if (swapR != r) { final int tmpIndex    = index[r]; index[r]              = index[swapR]; index[swapR]          = tmpIndex; final double[] tmpRow = b[r]; b[r]                  = b[swapR]; b[swapR]              = tmpRow;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition { private final RealMatrix root; private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension();"
      },
      {
        "txt": "final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap = new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) { swap[r] = r;"
      },
      {
        "txt": "int ii = index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } } <extra_id_0> } int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); }"
      },
      {
        "txt": "throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) { throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } } ++r; loop = false; } else {"
      },
      {
        "txt": "final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse = 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j];"
      },
      {
        "txt": "final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } } loop = ++r < order; } } rank = r; root = MatrixUtils.createRealMatrix(order, r);"
      },
      {
        "txt": "for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } public RealMatrix getRootMatrix() { return root; } public int getRank() {"
      },
      {
        "txt": "return rank; }"
      }
    ]
  },
  {
    "id": 2517,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 124,
    "end-bug-line": 124,
    "bug": "",
    "fix": "final double inverse2 = 1 / c[ir][ir];",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition { private final RealMatrix root; private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData();"
      },
      {
        "txt": "final double[][] b = new double[order][order]; int[] swap = new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) { index[i] = i; } int r = 0; for (boolean loop = true; loop;) { swap[r] = r; for (int i = r + 1; i < order; ++i) {"
      },
      {
        "txt": "int ii = index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i; } } if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp;"
      },
      {
        "txt": "} int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) { throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) { throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); }"
      },
      {
        "txt": "++r; loop = false; } else { final double sqrt = FastMath.sqrt(c[ir][ir]); b[r][r] = sqrt; final double inverse = 1 / sqrt; <extra_id_0> final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; c[ii][ii] -= e * e; for (int j = r + 1; j < i; ++j) { final int ij = index[j];"
      },
      {
        "txt": "for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; } } loop = ++r < order; } }"
      },
      {
        "txt": "rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) { root.setEntry(index[i], j, b[i][j]); } } } public RealMatrix getRootMatrix() { return root;"
      },
      {
        "txt": "} public int getRank() { return rank; }"
      }
    ]
  },
  {
    "id": 2518,
    "file_path": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
    "start-bug-line": 128,
    "end-bug-line": 128,
    "bug": "c[ii][ii] -= e * e;",
    "fix": "c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.linear; import org.apache.commons.math3.util.FastMath; public class RectangularCholeskyDecomposition {"
      },
      {
        "txt": "private final RealMatrix root; private int rank; public RectangularCholeskyDecomposition(RealMatrix matrix, double small) throws NonPositiveDefiniteMatrixException { final int order = matrix.getRowDimension(); final double[][] c = matrix.getData(); final double[][] b = new double[order][order]; int[] swap = new int[order]; int[] index = new int[order]; for (int i = 0; i < order; ++i) {"
      },
      {
        "txt": "index[i] = i; } int r = 0; for (boolean loop = true; loop;) { swap[r] = r; for (int i = r + 1; i < order; ++i) { int ii = index[i]; int isi = index[swap[i]]; if (c[ii][ii] > c[isi][isi]) { swap[r] = i;"
      },
      {
        "txt": "} } if (swap[r] != r) { int tmp = index[r]; index[r] = index[swap[r]]; index[swap[r]] = tmp; } int ir = index[r]; if (c[ir][ir] < small) { if (r == 0) {"
      },
      {
        "txt": "throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small); } for (int i = r; i < order; ++i) { if (c[index[i]][index[i]] < -small) { throw new NonPositiveDefiniteMatrixException(c[index[i]][index[i]], i, small); } } ++r; loop = false; } else {"
      },
      {
        "txt": "b[r][r] = sqrt; final double inverse = 1 / sqrt; for (int i = r + 1; i < order; ++i) { final int ii = index[i]; final double e = inverse * c[ii][ir]; b[i][r] = e; <extra_id_0> for (int j = r + 1; j < i; ++j) { final int ij = index[j]; final double f = c[ii][ij] - e * b[j][r]; c[ii][ij] = f; c[ij][ii] = f; }"
      },
      {
        "txt": "c[ij][ii] = f; } } loop = ++r < order; } } rank = r; root = MatrixUtils.createRealMatrix(order, r); for (int i = 0; i < order; ++i) { for (int j = 0; j < r; ++j) {"
      },
      {
        "txt": "root.setEntry(index[i], j, b[i][j]); } } } public RealMatrix getRootMatrix() { return root; } public int getRank() { return rank; }"
      }
    ]
  }
]
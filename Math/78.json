[
  {
    "id": 2673,
    "file_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
    "start-bug-line": 191,
    "end-bug-line": 191,
    "bug": "",
    "fix": "if (ga * gb > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.events; import org.apache.commons.math.ConvergenceException; import org.apache.commons.math.FunctionEvaluationException;"
      },
      {
        "txt": "import org.apache.commons.math.MathRuntimeException; import org.apache.commons.math.analysis.UnivariateRealFunction; import org.apache.commons.math.analysis.solvers.BrentSolver; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.sampling.StepInterpolator; public class EventState { private final EventHandler handler; private final double maxCheckInterval; private final double convergence; private final int maxIterationCount;"
      },
      {
        "txt": "private double t0; private double g0; private boolean g0Positive; private boolean pendingEvent; private double pendingEventTime; private double previousEventTime; private boolean forward; private boolean increasing; private int nextAction; public EventState(final EventHandler handler, final double maxCheckInterval,"
      },
      {
        "txt": "final double convergence, final int maxIterationCount) { this.handler = handler; this.maxCheckInterval = maxCheckInterval; this.convergence = Math.abs(convergence); this.maxIterationCount = maxIterationCount; t0 = Double.NaN; g0 = Double.NaN; g0Positive = true; pendingEvent = false; pendingEventTime = Double.NaN;"
      },
      {
        "txt": "previousEventTime = Double.NaN; increasing = true; nextAction = EventHandler.CONTINUE; } public EventHandler getEventHandler() { return handler; } public double getMaxCheckInterval() { return maxCheckInterval; }"
      },
      {
        "txt": "public double getConvergence() { return convergence; } public int getMaxIterationCount() { return maxIterationCount; } public void reinitializeBegin(final double tStart, final double[] yStart) throws EventException { t0 = tStart; g0 = handler.g(tStart, yStart);"
      },
      {
        "txt": "g0Positive = g0 >= 0; } public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException { try { forward = interpolator.isForward(); final double t1 = interpolator.getCurrentTime(); final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval)); final double h = (t1 - t0) / n; double ta = t0;"
      },
      {
        "txt": "double tb = t0 + (interpolator.isForward() ? convergence : -convergence); for (int i = 0; i < n; ++i) { tb += h; interpolator.setInterpolatedTime(tb); final double gb = handler.g(tb, interpolator.getInterpolatedState()); if (g0Positive ^ (gb >= 0)) { <extra_id_0> increasing = gb >= ga; final UnivariateRealFunction f = new UnivariateRealFunction() { public double value(final double t) throws FunctionEvaluationException { try { interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState());"
      },
      {
        "txt": "interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState()); } catch (DerivativeException e) { throw new FunctionEvaluationException(e, t); } catch (EventException e) { throw new FunctionEvaluationException(e, t); } } }; final BrentSolver solver = new BrentSolver();"
      },
      {
        "txt": "solver.setAbsoluteAccuracy(convergence); solver.setMaximalIterationCount(maxIterationCount); final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta); if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) { ta = tb; ga = gb; } else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) { pendingEventTime = root;"
      },
      {
        "txt": "if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) { return false; } pendingEvent = true; return true; } } else { ta = tb; ga = gb; }"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return false; } catch (FunctionEvaluationException e) { final Throwable cause = e.getCause(); if ((cause != null) && (cause instanceof DerivativeException)) { throw (DerivativeException) cause; } else if ((cause != null) && (cause instanceof EventException)) { throw (EventException) cause;"
      },
      {
        "txt": "} throw new EventException(e); } } public double getEventTime() { return pendingEventTime; } public void stepAccepted(final double t, final double[] y) throws EventException { t0 = t;"
      },
      {
        "txt": "g0 = handler.g(t, y); if (pendingEvent) { previousEventTime = t; g0Positive = increasing; nextAction = handler.eventOccurred(t, y, !(increasing ^ forward)); } else { g0Positive = g0 >= 0; nextAction = EventHandler.CONTINUE; } }"
      },
      {
        "txt": "public boolean stop() { return nextAction == EventHandler.STOP; } public boolean reset(final double t, final double[] y) throws EventException { if (! pendingEvent) { return false; } if (nextAction == EventHandler.RESET_STATE) { handler.resetState(t, y);"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return (nextAction == EventHandler.RESET_STATE) || (nextAction == EventHandler.RESET_DERIVATIVES); }"
      }
    ]
  },
  {
    "id": 2674,
    "file_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
    "start-bug-line": 198,
    "end-bug-line": 198,
    "bug": "",
    "fix": "final double epsilon = (forward ? 0.25 : -0.25) * convergence; for (int k = 0; (k < 4) && (ga * gb > 0); ++k) { ta += epsilon; interpolator.setInterpolatedTime(ta); ga = handler.g(ta, interpolator.getInterpolatedState()); } if (ga * gb > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.events; import org.apache.commons.math.ConvergenceException; import org.apache.commons.math.FunctionEvaluationException;"
      },
      {
        "txt": "import org.apache.commons.math.MathRuntimeException; import org.apache.commons.math.analysis.UnivariateRealFunction; import org.apache.commons.math.analysis.solvers.BrentSolver; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.sampling.StepInterpolator; public class EventState { private final EventHandler handler; private final double maxCheckInterval; private final double convergence; private final int maxIterationCount;"
      },
      {
        "txt": "private double t0; private double g0; private boolean g0Positive; private boolean pendingEvent; private double pendingEventTime; private double previousEventTime; private boolean forward; private boolean increasing; private int nextAction; public EventState(final EventHandler handler, final double maxCheckInterval,"
      },
      {
        "txt": "final double convergence, final int maxIterationCount) { this.handler = handler; this.maxCheckInterval = maxCheckInterval; this.convergence = Math.abs(convergence); this.maxIterationCount = maxIterationCount; t0 = Double.NaN; g0 = Double.NaN; g0Positive = true; pendingEvent = false; pendingEventTime = Double.NaN;"
      },
      {
        "txt": "previousEventTime = Double.NaN; increasing = true; nextAction = EventHandler.CONTINUE; } public EventHandler getEventHandler() { return handler; } public double getMaxCheckInterval() { return maxCheckInterval; }"
      },
      {
        "txt": "public double getConvergence() { return convergence; } public int getMaxIterationCount() { return maxIterationCount; } public void reinitializeBegin(final double tStart, final double[] yStart) throws EventException { t0 = tStart; g0 = handler.g(tStart, yStart);"
      },
      {
        "txt": "g0Positive = g0 >= 0; } public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException { try { forward = interpolator.isForward(); final double t1 = interpolator.getCurrentTime(); final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval)); final double h = (t1 - t0) / n; double ta = t0;"
      },
      {
        "txt": "double tb = t0 + (interpolator.isForward() ? convergence : -convergence); for (int i = 0; i < n; ++i) { tb += h; interpolator.setInterpolatedTime(tb); final double gb = handler.g(tb, interpolator.getInterpolatedState()); if (g0Positive ^ (gb >= 0)) { <extra_id_0> increasing = gb >= ga; final UnivariateRealFunction f = new UnivariateRealFunction() { public double value(final double t) throws FunctionEvaluationException { try { interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState());"
      },
      {
        "txt": "interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState()); } catch (DerivativeException e) { throw new FunctionEvaluationException(e, t); } catch (EventException e) { throw new FunctionEvaluationException(e, t); } } }; final BrentSolver solver = new BrentSolver();"
      },
      {
        "txt": "solver.setAbsoluteAccuracy(convergence); solver.setMaximalIterationCount(maxIterationCount); final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta); if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) { ta = tb; ga = gb; } else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) { pendingEventTime = root;"
      },
      {
        "txt": "if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) { return false; } pendingEvent = true; return true; } } else { ta = tb; ga = gb; }"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return false; } catch (FunctionEvaluationException e) { final Throwable cause = e.getCause(); if ((cause != null) && (cause instanceof DerivativeException)) { throw (DerivativeException) cause; } else if ((cause != null) && (cause instanceof EventException)) { throw (EventException) cause;"
      },
      {
        "txt": "} throw new EventException(e); } } public double getEventTime() { return pendingEventTime; } public void stepAccepted(final double t, final double[] y) throws EventException { t0 = t;"
      },
      {
        "txt": "g0 = handler.g(t, y); if (pendingEvent) { previousEventTime = t; g0Positive = increasing; nextAction = handler.eventOccurred(t, y, !(increasing ^ forward)); } else { g0Positive = g0 >= 0; nextAction = EventHandler.CONTINUE; } }"
      },
      {
        "txt": "public boolean stop() { return nextAction == EventHandler.STOP; } public boolean reset(final double t, final double[] y) throws EventException { if (! pendingEvent) { return false; } if (nextAction == EventHandler.RESET_STATE) { handler.resetState(t, y);"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return (nextAction == EventHandler.RESET_STATE) || (nextAction == EventHandler.RESET_DERIVATIVES); }"
      }
    ]
  },
  {
    "id": 2675,
    "file_path": "src/main/java/org/apache/commons/math/ode/events/EventState.java",
    "start-bug-line": 199,
    "end-bug-line": 199,
    "bug": "",
    "fix": "throw MathRuntimeException.createInternalError(null); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.events; import org.apache.commons.math.ConvergenceException; import org.apache.commons.math.FunctionEvaluationException;"
      },
      {
        "txt": "import org.apache.commons.math.MathRuntimeException; import org.apache.commons.math.analysis.UnivariateRealFunction; import org.apache.commons.math.analysis.solvers.BrentSolver; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.sampling.StepInterpolator; public class EventState { private final EventHandler handler; private final double maxCheckInterval; private final double convergence; private final int maxIterationCount;"
      },
      {
        "txt": "private double t0; private double g0; private boolean g0Positive; private boolean pendingEvent; private double pendingEventTime; private double previousEventTime; private boolean forward; private boolean increasing; private int nextAction; public EventState(final EventHandler handler, final double maxCheckInterval,"
      },
      {
        "txt": "final double convergence, final int maxIterationCount) { this.handler = handler; this.maxCheckInterval = maxCheckInterval; this.convergence = Math.abs(convergence); this.maxIterationCount = maxIterationCount; t0 = Double.NaN; g0 = Double.NaN; g0Positive = true; pendingEvent = false; pendingEventTime = Double.NaN;"
      },
      {
        "txt": "previousEventTime = Double.NaN; increasing = true; nextAction = EventHandler.CONTINUE; } public EventHandler getEventHandler() { return handler; } public double getMaxCheckInterval() { return maxCheckInterval; }"
      },
      {
        "txt": "public double getConvergence() { return convergence; } public int getMaxIterationCount() { return maxIterationCount; } public void reinitializeBegin(final double tStart, final double[] yStart) throws EventException { t0 = tStart; g0 = handler.g(tStart, yStart);"
      },
      {
        "txt": "g0Positive = g0 >= 0; } public boolean evaluateStep(final StepInterpolator interpolator) throws DerivativeException, EventException, ConvergenceException { try { forward = interpolator.isForward(); final double t1 = interpolator.getCurrentTime(); final int n = Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval)); final double h = (t1 - t0) / n; double ta = t0;"
      },
      {
        "txt": "double tb = t0 + (interpolator.isForward() ? convergence : -convergence); for (int i = 0; i < n; ++i) { tb += h; interpolator.setInterpolatedTime(tb); final double gb = handler.g(tb, interpolator.getInterpolatedState()); if (g0Positive ^ (gb >= 0)) { <extra_id_0> increasing = gb >= ga; final UnivariateRealFunction f = new UnivariateRealFunction() { public double value(final double t) throws FunctionEvaluationException { try { interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState());"
      },
      {
        "txt": "interpolator.setInterpolatedTime(t); return handler.g(t, interpolator.getInterpolatedState()); } catch (DerivativeException e) { throw new FunctionEvaluationException(e, t); } catch (EventException e) { throw new FunctionEvaluationException(e, t); } } }; final BrentSolver solver = new BrentSolver();"
      },
      {
        "txt": "solver.setAbsoluteAccuracy(convergence); solver.setMaximalIterationCount(maxIterationCount); final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta); if ((Math.abs(root - ta) <= convergence) && (Math.abs(root - previousEventTime) <= convergence)) { ta = tb; ga = gb; } else if (Double.isNaN(previousEventTime) || (Math.abs(previousEventTime - root) > convergence)) { pendingEventTime = root;"
      },
      {
        "txt": "if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) { return false; } pendingEvent = true; return true; } } else { ta = tb; ga = gb; }"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return false; } catch (FunctionEvaluationException e) { final Throwable cause = e.getCause(); if ((cause != null) && (cause instanceof DerivativeException)) { throw (DerivativeException) cause; } else if ((cause != null) && (cause instanceof EventException)) { throw (EventException) cause;"
      },
      {
        "txt": "} throw new EventException(e); } } public double getEventTime() { return pendingEventTime; } public void stepAccepted(final double t, final double[] y) throws EventException { t0 = t;"
      },
      {
        "txt": "g0 = handler.g(t, y); if (pendingEvent) { previousEventTime = t; g0Positive = increasing; nextAction = handler.eventOccurred(t, y, !(increasing ^ forward)); } else { g0Positive = g0 >= 0; nextAction = EventHandler.CONTINUE; } }"
      },
      {
        "txt": "public boolean stop() { return nextAction == EventHandler.STOP; } public boolean reset(final double t, final double[] y) throws EventException { if (! pendingEvent) { return false; } if (nextAction == EventHandler.RESET_STATE) { handler.resetState(t, y);"
      },
      {
        "txt": "} pendingEvent = false; pendingEventTime = Double.NaN; return (nextAction == EventHandler.RESET_STATE) || (nextAction == EventHandler.RESET_DERIVATIVES); }"
      }
    ]
  }
]
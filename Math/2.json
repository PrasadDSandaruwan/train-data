[
  {
    "id": 2451,
    "file_path": "src/main/java/org/apache/commons/math3/distribution/HypergeometricDistribution.java",
    "start-bug-line": 268,
    "end-bug-line": 268,
    "bug": "return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();",
    "fix": "return getSampleSize() * (getNumberOfSuccesses() / (double) getPopulationSize());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.distribution; import org.apache.commons.math3.exception.NotPositiveException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.exception.NumberIsTooLargeException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.random.RandomGenerator; import org.apache.commons.math3.random.Well19937c; public class HypergeometricDistribution extends AbstractIntegerDistribution { private static final long serialVersionUID = -436928820673516179L; private final int numberOfSuccesses; private final int populationSize;"
      },
      {
        "txt": "private final int sampleSize; private double numericalVariance = Double.NaN; private boolean numericalVarianceIsCalculated = false; public HypergeometricDistribution(int populationSize, int numberOfSuccesses, int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize); } public HypergeometricDistribution(RandomGenerator rng, int populationSize, int numberOfSuccesses,"
      },
      {
        "txt": "int sampleSize) throws NotPositiveException, NotStrictlyPositiveException, NumberIsTooLargeException { super(rng); if (populationSize <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE, populationSize); } if (numberOfSuccesses < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES, numberOfSuccesses);"
      },
      {
        "txt": "} if (sampleSize < 0) { throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES, sampleSize); } if (numberOfSuccesses > populationSize) { throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE, numberOfSuccesses, populationSize, true); } if (sampleSize > populationSize) {"
      },
      {
        "txt": "throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE, sampleSize, populationSize, true); } this.numberOfSuccesses = numberOfSuccesses; this.populationSize = populationSize; this.sampleSize = sampleSize; } public double cumulativeProbability(int x) { double ret; int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);"
      },
      {
        "txt": "if (x < domain[0]) { ret = 0.0; } else if (x >= domain[1]) { ret = 1.0; } else { ret = innerCumulativeProbability(domain[0], x, 1); } return ret; } private int[] getDomain(int n, int m, int k) {"
      },
      {
        "txt": "return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) }; } private int getLowerDomain(int n, int m, int k) { return FastMath.max(0, m - (n - k)); } public int getNumberOfSuccesses() { return numberOfSuccesses; } public int getPopulationSize() { return populationSize;"
      },
      {
        "txt": "} public int getSampleSize() { return sampleSize; } private int getUpperDomain(int m, int k) { return FastMath.min(k, m); } public double probability(int x) { double ret; int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);"
      },
      {
        "txt": "if (x < domain[0] || x > domain[1]) { ret = 0.0; } else { double p = (double) sampleSize / (double) populationSize; double q = (double) (populationSize - sampleSize) / (double) populationSize; double p1 = SaddlePointExpansion.logBinomialProbability(x, numberOfSuccesses, p, q); double p2 = SaddlePointExpansion.logBinomialProbability(sampleSize - x, populationSize - numberOfSuccesses, p, q);"
      },
      {
        "txt": "double p3 = SaddlePointExpansion.logBinomialProbability(sampleSize, populationSize, p, q); ret = FastMath.exp(p1 + p2 - p3); } return ret; } public double upperCumulativeProbability(int x) { double ret; final int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize); if (x <= domain[0]) {"
      },
      {
        "txt": "ret = 1.0; } else if (x > domain[1]) { ret = 0.0; } else { ret = innerCumulativeProbability(domain[1], x, -1); } return ret; } private double innerCumulativeProbability(int x0, int x1, int dx) { double ret = probability(x0);"
      },
      {
        "txt": "x0 += dx; ret += probability(x0); } return ret; } public double getNumericalMean() { <extra_id_0> } public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; }"
      },
      {
        "txt": "numericalVarianceIsCalculated = true; } return numericalVariance; } protected double calculateNumericalVariance() { final double N = getPopulationSize(); final double m = getNumberOfSuccesses(); final double n = getSampleSize(); return (n * m * (N - n) * (N - m)) / (N * N * (N - 1)); }"
      },
      {
        "txt": "public int getSupportLowerBound() { return FastMath.max(0, getSampleSize() + getNumberOfSuccesses() - getPopulationSize()); } public int getSupportUpperBound() { return FastMath.min(getNumberOfSuccesses(), getSampleSize()); } public boolean isSupportConnected() { return true; }"
      }
    ]
  }
]
[
  {
    "id": 2744,
    "file_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
    "start-bug-line": 165,
    "end-bug-line": 165,
    "bug": "",
    "fix": "if (num.intValue() < 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.fraction; import java.text.FieldPosition; import java.text.NumberFormat; import java.text.ParsePosition;"
      },
      {
        "txt": "import org.apache.commons.math.util.MathUtils; public class ProperFractionFormat extends FractionFormat { private static final long serialVersionUID = -6337346779577272307L; private NumberFormat wholeFormat; public ProperFractionFormat() { this(getDefaultNumberFormat()); } public ProperFractionFormat(NumberFormat format) { this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone()); }"
      },
      {
        "txt": "public ProperFractionFormat(NumberFormat wholeFormat, NumberFormat numeratorFormat, NumberFormat denominatorFormat) { super(numeratorFormat, denominatorFormat); setWholeFormat(wholeFormat); } public StringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos) { pos.setBeginIndex(0);"
      },
      {
        "txt": "pos.setEndIndex(0); int num = fraction.getNumerator(); int den = fraction.getDenominator(); int whole = num / den; num = num % den; if (whole != 0) { getWholeFormat().format(whole, toAppendTo, pos); toAppendTo.append(' '); num = Math.abs(num); }"
      },
      {
        "txt": "getNumeratorFormat().format(num, toAppendTo, pos); toAppendTo.append(\" / \"); getDenominatorFormat().format(den, toAppendTo, pos); return toAppendTo; } public NumberFormat getWholeFormat() { return wholeFormat; } public Fraction parse(String source, ParsePosition pos) {"
      },
      {
        "txt": "Fraction ret = super.parse(source, pos); if (ret != null) { return ret; } int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number whole = getWholeFormat().parse(source, pos); if (whole == null) { pos.setIndex(initialIndex); return null;"
      },
      {
        "txt": "parseAndIgnoreWhitespace(source, pos); Number num = getNumeratorFormat().parse(source, pos); if (num == null) { pos.setIndex(initialIndex); return null; } <extra_id_0> int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); switch (c) { case 0 : return new Fraction(num.intValue(), 1); case '/' :"
      },
      {
        "txt": "return new Fraction(num.intValue(), 1); case '/' : break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number den = getDenominatorFormat().parse(source, pos);"
      },
      {
        "txt": "if (den == null) { pos.setIndex(initialIndex); return null; } int w = whole.intValue(); int n = num.intValue(); int d = den.intValue(); return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d); } public void setWholeFormat(NumberFormat format) {"
      },
      {
        "txt": "if (format == null) { throw new IllegalArgumentException( \"whole format can not be null.\"); } this.wholeFormat = format; }"
      }
    ]
  },
  {
    "id": 2745,
    "file_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
    "start-bug-line": 166,
    "end-bug-line": 166,
    "bug": "",
    "fix": "pos.setIndex(initialIndex); return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.fraction; import java.text.FieldPosition; import java.text.NumberFormat; import java.text.ParsePosition;"
      },
      {
        "txt": "import org.apache.commons.math.util.MathUtils; public class ProperFractionFormat extends FractionFormat { private static final long serialVersionUID = -6337346779577272307L; private NumberFormat wholeFormat; public ProperFractionFormat() { this(getDefaultNumberFormat()); } public ProperFractionFormat(NumberFormat format) { this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone()); }"
      },
      {
        "txt": "public ProperFractionFormat(NumberFormat wholeFormat, NumberFormat numeratorFormat, NumberFormat denominatorFormat) { super(numeratorFormat, denominatorFormat); setWholeFormat(wholeFormat); } public StringBuffer format(Fraction fraction, StringBuffer toAppendTo, FieldPosition pos) { pos.setBeginIndex(0);"
      },
      {
        "txt": "pos.setEndIndex(0); int num = fraction.getNumerator(); int den = fraction.getDenominator(); int whole = num / den; num = num % den; if (whole != 0) { getWholeFormat().format(whole, toAppendTo, pos); toAppendTo.append(' '); num = Math.abs(num); }"
      },
      {
        "txt": "getNumeratorFormat().format(num, toAppendTo, pos); toAppendTo.append(\" / \"); getDenominatorFormat().format(den, toAppendTo, pos); return toAppendTo; } public NumberFormat getWholeFormat() { return wholeFormat; } public Fraction parse(String source, ParsePosition pos) {"
      },
      {
        "txt": "Fraction ret = super.parse(source, pos); if (ret != null) { return ret; } int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number whole = getWholeFormat().parse(source, pos); if (whole == null) { pos.setIndex(initialIndex); return null;"
      },
      {
        "txt": "parseAndIgnoreWhitespace(source, pos); Number num = getNumeratorFormat().parse(source, pos); if (num == null) { pos.setIndex(initialIndex); return null; } <extra_id_0> int startIndex = pos.getIndex(); char c = parseNextCharacter(source, pos); switch (c) { case 0 : return new Fraction(num.intValue(), 1); case '/' :"
      },
      {
        "txt": "return new Fraction(num.intValue(), 1); case '/' : break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number den = getDenominatorFormat().parse(source, pos);"
      },
      {
        "txt": "if (den == null) { pos.setIndex(initialIndex); return null; } int w = whole.intValue(); int n = num.intValue(); int d = den.intValue(); return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d); } public void setWholeFormat(NumberFormat format) {"
      },
      {
        "txt": "if (format == null) { throw new IllegalArgumentException( \"whole format can not be null.\"); } this.wholeFormat = format; }"
      }
    ]
  },
  {
    "id": 2746,
    "file_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
    "start-bug-line": 200,
    "end-bug-line": 200,
    "bug": "",
    "fix": "if (den.intValue() < 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.fraction; import java.text.FieldPosition;"
      },
      {
        "txt": "import java.text.NumberFormat; import java.text.ParsePosition; import org.apache.commons.math.util.MathUtils; public class ProperFractionFormat extends FractionFormat { private static final long serialVersionUID = -6337346779577272307L; private NumberFormat wholeFormat; public ProperFractionFormat() { this(getDefaultNumberFormat()); } public ProperFractionFormat(NumberFormat format) {"
      },
      {
        "txt": "this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone()); } public ProperFractionFormat(NumberFormat wholeFormat, NumberFormat numeratorFormat, NumberFormat denominatorFormat) { super(numeratorFormat, denominatorFormat); setWholeFormat(wholeFormat); } public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
      },
      {
        "txt": "FieldPosition pos) { pos.setBeginIndex(0); pos.setEndIndex(0); int num = fraction.getNumerator(); int den = fraction.getDenominator(); int whole = num / den; num = num % den; if (whole != 0) { getWholeFormat().format(whole, toAppendTo, pos); toAppendTo.append(' ');"
      },
      {
        "txt": "num = Math.abs(num); } getNumeratorFormat().format(num, toAppendTo, pos); toAppendTo.append(\" / \"); getDenominatorFormat().format(den, toAppendTo, pos); return toAppendTo; } public NumberFormat getWholeFormat() { return wholeFormat;"
      },
      {
        "txt": "} public Fraction parse(String source, ParsePosition pos) { Fraction ret = super.parse(source, pos); if (ret != null) { return ret; } int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number whole = getWholeFormat().parse(source, pos); if (whole == null) {"
      },
      {
        "txt": "pos.setIndex(initialIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number num = getNumeratorFormat().parse(source, pos); if (num == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex();"
      },
      {
        "txt": "char c = parseNextCharacter(source, pos); switch (c) { case 0 : return new Fraction(num.intValue(), 1); case '/' : break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null;"
      },
      {
        "txt": "parseAndIgnoreWhitespace(source, pos); Number den = getDenominatorFormat().parse(source, pos); if (den == null) { pos.setIndex(initialIndex); return null; } <extra_id_0> int w = whole.intValue(); int n = num.intValue(); int d = den.intValue(); return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d); } public void setWholeFormat(NumberFormat format) {"
      },
      {
        "txt": "} public void setWholeFormat(NumberFormat format) { if (format == null) { throw new IllegalArgumentException( \"whole format can not be null.\"); } this.wholeFormat = format; }"
      }
    ]
  },
  {
    "id": 2747,
    "file_path": "src/java/org/apache/commons/math/fraction/ProperFractionFormat.java",
    "start-bug-line": 201,
    "end-bug-line": 201,
    "bug": "",
    "fix": "pos.setIndex(initialIndex); return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.fraction; import java.text.FieldPosition;"
      },
      {
        "txt": "import java.text.NumberFormat; import java.text.ParsePosition; import org.apache.commons.math.util.MathUtils; public class ProperFractionFormat extends FractionFormat { private static final long serialVersionUID = -6337346779577272307L; private NumberFormat wholeFormat; public ProperFractionFormat() { this(getDefaultNumberFormat()); } public ProperFractionFormat(NumberFormat format) {"
      },
      {
        "txt": "this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone()); } public ProperFractionFormat(NumberFormat wholeFormat, NumberFormat numeratorFormat, NumberFormat denominatorFormat) { super(numeratorFormat, denominatorFormat); setWholeFormat(wholeFormat); } public StringBuffer format(Fraction fraction, StringBuffer toAppendTo,"
      },
      {
        "txt": "FieldPosition pos) { pos.setBeginIndex(0); pos.setEndIndex(0); int num = fraction.getNumerator(); int den = fraction.getDenominator(); int whole = num / den; num = num % den; if (whole != 0) { getWholeFormat().format(whole, toAppendTo, pos); toAppendTo.append(' ');"
      },
      {
        "txt": "num = Math.abs(num); } getNumeratorFormat().format(num, toAppendTo, pos); toAppendTo.append(\" / \"); getDenominatorFormat().format(den, toAppendTo, pos); return toAppendTo; } public NumberFormat getWholeFormat() { return wholeFormat;"
      },
      {
        "txt": "} public Fraction parse(String source, ParsePosition pos) { Fraction ret = super.parse(source, pos); if (ret != null) { return ret; } int initialIndex = pos.getIndex(); parseAndIgnoreWhitespace(source, pos); Number whole = getWholeFormat().parse(source, pos); if (whole == null) {"
      },
      {
        "txt": "pos.setIndex(initialIndex); return null; } parseAndIgnoreWhitespace(source, pos); Number num = getNumeratorFormat().parse(source, pos); if (num == null) { pos.setIndex(initialIndex); return null; } int startIndex = pos.getIndex();"
      },
      {
        "txt": "char c = parseNextCharacter(source, pos); switch (c) { case 0 : return new Fraction(num.intValue(), 1); case '/' : break; default : pos.setIndex(initialIndex); pos.setErrorIndex(startIndex); return null;"
      },
      {
        "txt": "parseAndIgnoreWhitespace(source, pos); Number den = getDenominatorFormat().parse(source, pos); if (den == null) { pos.setIndex(initialIndex); return null; } <extra_id_0> int w = whole.intValue(); int n = num.intValue(); int d = den.intValue(); return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d); } public void setWholeFormat(NumberFormat format) {"
      },
      {
        "txt": "} public void setWholeFormat(NumberFormat format) { if (format == null) { throw new IllegalArgumentException( \"whole format can not be null.\"); } this.wholeFormat = format; }"
      }
    ]
  }
]
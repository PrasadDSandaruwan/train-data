[
  {
    "id": 2519,
    "file_path": "src/main/java/org/apache/commons/math3/distribution/FDistribution.java",
    "start-bug-line": 275,
    "end-bug-line": 275,
    "bug": "return true;",
    "fix": "return false;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.distribution; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.special.Beta; import org.apache.commons.math3.util.FastMath;"
      },
      {
        "txt": "import org.apache.commons.math3.random.RandomGenerator; import org.apache.commons.math3.random.Well19937c; public class FDistribution extends AbstractRealDistribution { public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9; private static final long serialVersionUID = -8516354193418641566L; private final double numeratorDegreesOfFreedom; private final double denominatorDegreesOfFreedom; private final double solverAbsoluteAccuracy; private double numericalVariance = Double.NaN; private boolean numericalVarianceIsCalculated = false;"
      },
      {
        "txt": "public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom) throws NotStrictlyPositiveException { this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } public FDistribution(double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy) throws NotStrictlyPositiveException {"
      },
      {
        "txt": "this(new Well19937c(), numeratorDegreesOfFreedom, denominatorDegreesOfFreedom, inverseCumAccuracy); } public FDistribution(RandomGenerator rng, double numeratorDegreesOfFreedom, double denominatorDegreesOfFreedom, double inverseCumAccuracy) throws NotStrictlyPositiveException { super(rng); if (numeratorDegreesOfFreedom <= 0) {"
      },
      {
        "txt": "throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM, numeratorDegreesOfFreedom); } if (denominatorDegreesOfFreedom <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM, denominatorDegreesOfFreedom); } this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom; this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom; solverAbsoluteAccuracy = inverseCumAccuracy;"
      },
      {
        "txt": "} public double density(double x) { final double nhalf = numeratorDegreesOfFreedom / 2; final double mhalf = denominatorDegreesOfFreedom / 2; final double logx = FastMath.log(x); final double logn = FastMath.log(numeratorDegreesOfFreedom); final double logm = FastMath.log(denominatorDegreesOfFreedom); final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x + denominatorDegreesOfFreedom); return FastMath.exp(nhalf * logn + nhalf * logx - logx +"
      },
      {
        "txt": "mhalf * logm - nhalf * lognxm - mhalf * lognxm - Beta.logBeta(nhalf, mhalf)); } public double cumulativeProbability(double x) { double ret; if (x <= 0) { ret = 0; } else { double n = numeratorDegreesOfFreedom; double m = denominatorDegreesOfFreedom;"
      },
      {
        "txt": "ret = Beta.regularizedBeta((n * x) / (m + n * x), 0.5 * n, 0.5 * m); } return ret; } public double getNumeratorDegreesOfFreedom() { return numeratorDegreesOfFreedom; } public double getDenominatorDegreesOfFreedom() {"
      },
      {
        "txt": "return denominatorDegreesOfFreedom; } @Override protected double getSolverAbsoluteAccuracy() { return solverAbsoluteAccuracy; } public double getNumericalMean() { final double denominatorDF = getDenominatorDegreesOfFreedom(); if (denominatorDF > 2) { return denominatorDF / (denominatorDF - 2);"
      },
      {
        "txt": "} return Double.NaN; } public double getNumericalVariance() { if (!numericalVarianceIsCalculated) { numericalVariance = calculateNumericalVariance(); numericalVarianceIsCalculated = true; } return numericalVariance; }"
      },
      {
        "txt": "protected double calculateNumericalVariance() { final double denominatorDF = getDenominatorDegreesOfFreedom(); if (denominatorDF > 4) { final double numeratorDF = getNumeratorDegreesOfFreedom(); final double denomDFMinusTwo = denominatorDF - 2; return ( 2 * (denominatorDF * denominatorDF) * (numeratorDF + denominatorDF - 2) ) / ( (numeratorDF * (denomDFMinusTwo * denomDFMinusTwo) * (denominatorDF - 4)) ); } return Double.NaN; }"
      },
      {
        "txt": "return 0; } public double getSupportUpperBound() { return Double.POSITIVE_INFINITY; } public boolean isSupportLowerBoundInclusive() { <extra_id_0> } public boolean isSupportUpperBoundInclusive() { return false; } public boolean isSupportConnected() { return true;"
      },
      {
        "txt": "public boolean isSupportConnected() { return true; }"
      }
    ]
  },
  {
    "id": 2520,
    "file_path": "src/main/java/org/apache/commons/math3/distribution/UniformRealDistribution.java",
    "start-bug-line": 184,
    "end-bug-line": 184,
    "bug": "return false;",
    "fix": "return true;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.distribution; import org.apache.commons.math3.exception.NumberIsTooLargeException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.random.RandomGenerator; import org.apache.commons.math3.random.Well19937c; public class UniformRealDistribution extends AbstractRealDistribution {"
      },
      {
        "txt": "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9; private static final long serialVersionUID = 20120109L; private final double lower; private final double upper; private final double solverAbsoluteAccuracy; public UniformRealDistribution() { this(0, 1); } public UniformRealDistribution(double lower, double upper) throws NumberIsTooLargeException {"
      },
      {
        "txt": "this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } public UniformRealDistribution(double lower, double upper, double inverseCumAccuracy) throws NumberIsTooLargeException { this(new Well19937c(), lower, upper, inverseCumAccuracy); } public UniformRealDistribution(RandomGenerator rng, double lower, double upper, double inverseCumAccuracy)"
      },
      {
        "txt": "throws NumberIsTooLargeException { super(rng); if (lower >= upper) { throw new NumberIsTooLargeException( LocalizedFormats.LOWER_BOUND_NOT_BELOW_UPPER_BOUND, lower, upper, false); } this.lower = lower; this.upper = upper; solverAbsoluteAccuracy = inverseCumAccuracy;"
      },
      {
        "txt": "} public double density(double x) { if (x < lower || x > upper) { return 0.0; } return 1 / (upper - lower); } public double cumulativeProbability(double x) { if (x <= lower) { return 0;"
      },
      {
        "txt": "} if (x >= upper) { return 1; } return (x - lower) / (upper - lower); } @Override protected double getSolverAbsoluteAccuracy() { return solverAbsoluteAccuracy; }"
      },
      {
        "txt": "public double getNumericalMean() { return 0.5 * (lower + upper); } public double getNumericalVariance() { double ul = upper - lower; return ul * ul / 12; } public double getSupportLowerBound() { return lower; }"
      },
      {
        "txt": "return upper; } public boolean isSupportLowerBoundInclusive() { return true; } public boolean isSupportUpperBoundInclusive() { <extra_id_0> } public boolean isSupportConnected() { return true; } @Override public double sample() {"
      },
      {
        "txt": "@Override public double sample() { final double u = random.nextDouble(); return u * upper + (1 - u) * lower; }"
      }
    ]
  }
]
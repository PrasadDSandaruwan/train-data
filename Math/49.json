[
  {
    "id": 2580,
    "file_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
    "start-bug-line": 345,
    "end-bug-line": 345,
    "bug": "Iterator iter = res.entries.iterator();",
    "fix": "Iterator iter = entries.iterator();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import org.apache.commons.math.exception.MathArithmeticException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.util.OpenIntToDoubleHashMap; import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator; import org.apache.commons.math.util.FastMath; public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable { public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12; private static final long serialVersionUID = 8772222695580707260L;"
      },
      {
        "txt": "private final OpenIntToDoubleHashMap entries; private final int virtualSize; private final double epsilon; public OpenMapRealVector() { this(0, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension) { this(dimension, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, double epsilon) {"
      },
      {
        "txt": "virtualSize = dimension; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; } protected OpenMapRealVector(OpenMapRealVector v, int resize) { virtualSize = v.getDimension() + resize; entries = new OpenIntToDoubleHashMap(v.entries); epsilon = v.epsilon; } public OpenMapRealVector(int dimension, int expectedSize) {"
      },
      {
        "txt": "this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); this.epsilon = epsilon; } public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); }"
      },
      {
        "txt": "public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } }"
      },
      {
        "txt": "} public OpenMapRealVector(Double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(Double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key].doubleValue();"
      },
      {
        "txt": "if (!isDefaultValue(value)) { entries.put(key, value); } } } public OpenMapRealVector(OpenMapRealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(v.getEntries()); epsilon = v.epsilon; }"
      },
      {
        "txt": "public OpenMapRealVector(RealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(0.0); epsilon = DEFAULT_ZERO_TOLERANCE; for (int key = 0; key < virtualSize; key++) { double value = v.getEntry(key); if (!isDefaultValue(value)) { entries.put(key, value); } }"
      },
      {
        "txt": "} private OpenIntToDoubleHashMap getEntries() { return entries; } protected boolean isDefaultValue(double value) { return FastMath.abs(value) < epsilon; } @Override public RealVector add(RealVector v) { checkVectorDimensions(v.getDimension());"
      },
      {
        "txt": "if (v instanceof OpenMapRealVector) { return add((OpenMapRealVector) v); } else { return super.add(v); } } public OpenMapRealVector add(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean copyThis = entries.size() > v.entries.size(); OpenMapRealVector res = copyThis ? this.copy() : v.copy();"
      },
      {
        "txt": "Iterator iter = copyThis ? v.entries.iterator() : entries.iterator(); OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries; while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (randomAccess.containsKey(key)) { res.setEntry(key, randomAccess.get(key) + iter.value()); } else { res.setEntry(key, iter.value()); }"
      },
      {
        "txt": "} return res; } public OpenMapRealVector append(OpenMapRealVector v) { OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); Iterator iter = v.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key() + virtualSize, iter.value()); }"
      },
      {
        "txt": "return res; } public OpenMapRealVector append(RealVector v) { if (v instanceof OpenMapRealVector) { return append((OpenMapRealVector) v); } return append(v.getData()); } public OpenMapRealVector append(double d) { OpenMapRealVector res = new OpenMapRealVector(this, 1);"
      },
      {
        "txt": "res.setEntry(virtualSize, d); return res; } public OpenMapRealVector append(double[] a) { OpenMapRealVector res = new OpenMapRealVector(this, a.length); for (int i = 0; i < a.length; i++) { res.setEntry(i + virtualSize, a[i]); } return res; }"
      },
      {
        "txt": "@Override public OpenMapRealVector copy() { return new OpenMapRealVector(this); } public double dotProduct(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean thisIsSmaller = entries.size() < v.entries.size(); Iterator iter = thisIsSmaller ? entries.iterator() : v.entries.iterator(); OpenIntToDoubleHashMap larger = thisIsSmaller ? v.entries : entries; double d = 0;"
      },
      {
        "txt": "while(iter.hasNext()) { iter.advance(); d += iter.value() * larger.get(iter.key()); } return d; } @Override public double dotProduct(RealVector v) { if(v instanceof OpenMapRealVector) { return dotProduct((OpenMapRealVector)v);"
      },
      {
        "txt": "return super.dotProduct(v); } } public OpenMapRealVector ebeDivide(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); <extra_id_0> while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key())); } return res; }"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeDivide(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v[iter.key()]);"
      },
      {
        "txt": "} return res; } public OpenMapRealVector ebeMultiply(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));"
      },
      {
        "txt": "} return res; } @Override public OpenMapRealVector ebeMultiply(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "res.setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; } public OpenMapRealVector getSubVector(int index, int n) { checkIndex(index); checkIndex(index + n - 1); OpenMapRealVector res = new OpenMapRealVector(n); int end = index + n; Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (key >= index && key < end) { res.setEntry(key - index, iter.value()); } } return res; } @Override"
      },
      {
        "txt": "public double[] getData() { double[] res = new double[virtualSize]; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); res[iter.key()] = iter.value(); } return res; } public int getDimension() {"
      },
      {
        "txt": "return virtualSize; } public double getDistance(OpenMapRealVector v) { Iterator iter = entries.iterator(); double res = 0; while (iter.hasNext()) { iter.advance(); int key = iter.key(); double delta; delta = iter.value() - v.getEntry(key);"
      },
      {
        "txt": "res += delta * delta; } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { final double value = iter.value(); res += value * value; }"
      },
      {
        "txt": "} return FastMath.sqrt(res); } @Override public double getDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getDistance((OpenMapRealVector) v); } return getDistance(v.getData());"
      },
      {
        "txt": "} @Override public double getDistance(double[] v) { checkVectorDimensions(v.length); double res = 0; for (int i = 0; i < v.length; i++) { double delta = entries.get(i) - v[i]; res += delta * delta; } return FastMath.sqrt(res);"
      },
      {
        "txt": "} public double getEntry(int index) { checkIndex(index); return entries.get(index); } public double getL1Distance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); max += delta; } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { double delta = FastMath.abs(iter.value()); max += FastMath.abs(delta);"
      },
      {
        "txt": "} } return max; } @Override public double getL1Distance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getL1Distance((OpenMapRealVector) v); }"
      },
      {
        "txt": "return getL1Distance(v.getData()); } @Override public double getL1Distance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); max += delta; }"
      },
      {
        "txt": "return max; } private double getLInfDistance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); if (delta > max) { max = delta;"
      },
      {
        "txt": "} } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { if (iter.value() > max) { max = iter.value(); }"
      },
      {
        "txt": "} } return max; } @Override public double getLInfDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getLInfDistance((OpenMapRealVector) v); }"
      },
      {
        "txt": "return getLInfDistance(v.getData()); } @Override public double getLInfDistance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); if (delta > max) { max = delta;"
      },
      {
        "txt": "} } return max; } public boolean isInfinite() { boolean infiniteFound = false; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); final double value = iter.value();"
      },
      {
        "txt": "if (Double.isNaN(value)) { return false; } if (Double.isInfinite(value)) { infiniteFound = true; } } return infiniteFound; } public boolean isNaN() {"
      },
      {
        "txt": "Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); if (Double.isNaN(iter.value())) { return true; } } return false; } @Override"
      },
      {
        "txt": "public OpenMapRealVector mapAdd(double d) { return copy().mapAddToSelf(d); } @Override public OpenMapRealVector mapAddToSelf(double d) { for (int i = 0; i < virtualSize; i++) { setEntry(i, getEntry(i) + d); } return this; }"
      },
      {
        "txt": "@Override public RealMatrix outerProduct(double[] v) { final int n = v.length; RealMatrix res = new OpenMapRealMatrix(virtualSize, n); Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); int row = iter.key(); double value = iter.value(); for (int col = 0; col < n; col++) {"
      },
      {
        "txt": "res.setEntry(row, col, value * v[col]); } } return res; } public RealVector projection(RealVector v) { checkVectorDimensions(v.getDimension()); return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } @Override"
      },
      {
        "txt": "public OpenMapRealVector projection(double[] v) { checkVectorDimensions(v.length); return (OpenMapRealVector) projection(new OpenMapRealVector(v)); } public void setEntry(int index, double value) { checkIndex(index); if (!isDefaultValue(value)) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index);"
      },
      {
        "txt": "} } @Override public void setSubVector(int index, RealVector v) { checkIndex(index); checkIndex(index + v.getDimension() - 1); setSubVector(index, v.getData()); } @Override public void setSubVector(int index, double[] v) {"
      },
      {
        "txt": "checkIndex(index); checkIndex(index + v.length - 1); for (int i = 0; i < v.length; i++) { setEntry(i + index, v[i]); } } @Override public void set(double value) { for (int i = 0; i < virtualSize; i++) { setEntry(i, value);"
      },
      {
        "txt": "} } public OpenMapRealVector subtract(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = copy(); Iterator iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (entries.containsKey(key)) {"
      },
      {
        "txt": "res.setEntry(key, entries.get(key) - iter.value()); } else { res.setEntry(key, -iter.value()); } } return res; } @Override public OpenMapRealVector subtract(RealVector v) { checkVectorDimensions(v.getDimension());"
      },
      {
        "txt": "if (v instanceof OpenMapRealVector) { return subtract((OpenMapRealVector) v); } return subtract(v.getData()); } @Override public OpenMapRealVector subtract(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); for (int i = 0; i < v.length; i++) {"
      },
      {
        "txt": "if (entries.containsKey(i)) { res.setEntry(i, entries.get(i) - v[i]); } else { res.setEntry(i, -v[i]); } } return res; } @Override public OpenMapRealVector unitVector() {"
      },
      {
        "txt": "OpenMapRealVector res = copy(); res.unitize(); return res; } @Override public void unitize() { double norm = getNorm(); if (isDefaultValue(norm)) { throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); }"
      },
      {
        "txt": "Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); entries.put(iter.key(), iter.value() / norm); } } @Override public double[] toArray() { return getData(); }"
      },
      {
        "txt": "@Override public int hashCode() { final int prime = 31; int result = 1; long temp; temp = Double.doubleToLongBits(epsilon); result = prime * result + (int) (temp ^ (temp >>> 32)); result = prime * result + virtualSize; Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); temp = Double.doubleToLongBits(iter.value()); result = prime * result + (int) (temp ^ (temp >>32)); } return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true;"
      },
      {
        "txt": "} if (!(obj instanceof OpenMapRealVector)) { return false; } OpenMapRealVector other = (OpenMapRealVector) obj; if (virtualSize != other.virtualSize) { return false; } if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) {"
      },
      {
        "txt": "return false; } Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double test = other.getEntry(iter.key()); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) { return false; } }"
      },
      {
        "txt": "iter = other.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); double test = iter.value(); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { return false; } } return true; }"
      },
      {
        "txt": "public double getSparsity() { return (double)entries.size()/(double)getDimension(); } @Override public java.util.Iterator<Entry> sparseIterator() { return new OpenMapSparseIterator(); } protected class OpenMapEntry extends Entry { private final Iterator iter; protected OpenMapEntry(Iterator iter) {"
      },
      {
        "txt": "this.iter = iter; } @Override public double getValue() { return iter.value(); } @Override public void setValue(double value) { entries.put(iter.key(), value); }"
      },
      {
        "txt": "@Override public int getIndex() { return iter.key(); } } protected class OpenMapSparseIterator implements java.util.Iterator<Entry> { private final Iterator iter; private final Entry current; protected OpenMapSparseIterator() { iter = entries.iterator();"
      },
      {
        "txt": "current = new OpenMapEntry(iter); } public boolean hasNext() { return iter.hasNext(); } public Entry next() { iter.advance(); return current; } public void remove() {"
      },
      {
        "txt": "throw new UnsupportedOperationException(\"Not supported\"); } }"
      }
    ]
  },
  {
    "id": 2581,
    "file_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
    "start-bug-line": 358,
    "end-bug-line": 358,
    "bug": "Iterator iter = res.entries.iterator();",
    "fix": "Iterator iter = entries.iterator();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.linear; import java.io.Serializable;"
      },
      {
        "txt": "import org.apache.commons.math.exception.MathArithmeticException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.util.OpenIntToDoubleHashMap; import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator; import org.apache.commons.math.util.FastMath; public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable { public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12; private static final long serialVersionUID = 8772222695580707260L; private final OpenIntToDoubleHashMap entries;"
      },
      {
        "txt": "private final int virtualSize; private final double epsilon; public OpenMapRealVector() { this(0, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension) { this(dimension, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, double epsilon) { virtualSize = dimension;"
      },
      {
        "txt": "entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; } protected OpenMapRealVector(OpenMapRealVector v, int resize) { virtualSize = v.getDimension() + resize; entries = new OpenIntToDoubleHashMap(v.entries); epsilon = v.epsilon; } public OpenMapRealVector(int dimension, int expectedSize) { this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);"
      },
      {
        "txt": "} public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); this.epsilon = epsilon; } public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(double[] values, double epsilon) {"
      },
      {
        "txt": "virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } }"
      },
      {
        "txt": "public OpenMapRealVector(Double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(Double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key].doubleValue(); if (!isDefaultValue(value)) {"
      },
      {
        "txt": "entries.put(key, value); } } } public OpenMapRealVector(OpenMapRealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(v.getEntries()); epsilon = v.epsilon; } public OpenMapRealVector(RealVector v) {"
      },
      {
        "txt": "virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(0.0); epsilon = DEFAULT_ZERO_TOLERANCE; for (int key = 0; key < virtualSize; key++) { double value = v.getEntry(key); if (!isDefaultValue(value)) { entries.put(key, value); } } }"
      },
      {
        "txt": "private OpenIntToDoubleHashMap getEntries() { return entries; } protected boolean isDefaultValue(double value) { return FastMath.abs(value) < epsilon; } @Override public RealVector add(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) {"
      },
      {
        "txt": "return add((OpenMapRealVector) v); } else { return super.add(v); } } public OpenMapRealVector add(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean copyThis = entries.size() > v.entries.size(); OpenMapRealVector res = copyThis ? this.copy() : v.copy(); Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();"
      },
      {
        "txt": "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries; while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (randomAccess.containsKey(key)) { res.setEntry(key, randomAccess.get(key) + iter.value()); } else { res.setEntry(key, iter.value()); } }"
      },
      {
        "txt": "return res; } public OpenMapRealVector append(OpenMapRealVector v) { OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); Iterator iter = v.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key() + virtualSize, iter.value()); } return res;"
      },
      {
        "txt": "} public OpenMapRealVector append(RealVector v) { if (v instanceof OpenMapRealVector) { return append((OpenMapRealVector) v); } return append(v.getData()); } public OpenMapRealVector append(double d) { OpenMapRealVector res = new OpenMapRealVector(this, 1); res.setEntry(virtualSize, d);"
      },
      {
        "txt": "return res; } public OpenMapRealVector append(double[] a) { OpenMapRealVector res = new OpenMapRealVector(this, a.length); for (int i = 0; i < a.length; i++) { res.setEntry(i + virtualSize, a[i]); } return res; } @Override"
      },
      {
        "txt": "public OpenMapRealVector copy() { return new OpenMapRealVector(this); } public double dotProduct(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean thisIsSmaller = entries.size() < v.entries.size(); Iterator iter = thisIsSmaller ? entries.iterator() : v.entries.iterator(); OpenIntToDoubleHashMap larger = thisIsSmaller ? v.entries : entries; double d = 0; while(iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); d += iter.value() * larger.get(iter.key()); } return d; } @Override public double dotProduct(RealVector v) { if(v instanceof OpenMapRealVector) { return dotProduct((OpenMapRealVector)v); } else {"
      },
      {
        "txt": "return super.dotProduct(v); } } public OpenMapRealVector ebeDivide(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeDivide(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); <extra_id_0> while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v[iter.key()]); } return res; }"
      },
      {
        "txt": "return res; } public OpenMapRealVector ebeMultiply(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); }"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeMultiply(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v[iter.key()]);"
      },
      {
        "txt": "} return res; } public OpenMapRealVector getSubVector(int index, int n) { checkIndex(index); checkIndex(index + n - 1); OpenMapRealVector res = new OpenMapRealVector(n); int end = index + n; Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); int key = iter.key(); if (key >= index && key < end) { res.setEntry(key - index, iter.value()); } } return res; } @Override public double[] getData() {"
      },
      {
        "txt": "double[] res = new double[virtualSize]; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); res[iter.key()] = iter.value(); } return res; } public int getDimension() { return virtualSize;"
      },
      {
        "txt": "} public double getDistance(OpenMapRealVector v) { Iterator iter = entries.iterator(); double res = 0; while (iter.hasNext()) { iter.advance(); int key = iter.key(); double delta; delta = iter.value() - v.getEntry(key); res += delta * delta;"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { final double value = iter.value(); res += value * value; } }"
      },
      {
        "txt": "return FastMath.sqrt(res); } @Override public double getDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getDistance((OpenMapRealVector) v); } return getDistance(v.getData()); }"
      },
      {
        "txt": "@Override public double getDistance(double[] v) { checkVectorDimensions(v.length); double res = 0; for (int i = 0; i < v.length; i++) { double delta = entries.get(i) - v[i]; res += delta * delta; } return FastMath.sqrt(res); }"
      },
      {
        "txt": "public double getEntry(int index) { checkIndex(index); return entries.get(index); } public double getL1Distance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));"
      },
      {
        "txt": "max += delta; } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { double delta = FastMath.abs(iter.value()); max += FastMath.abs(delta); }"
      },
      {
        "txt": "} return max; } @Override public double getL1Distance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getL1Distance((OpenMapRealVector) v); } return getL1Distance(v.getData());"
      },
      {
        "txt": "} @Override public double getL1Distance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); max += delta; } return max;"
      },
      {
        "txt": "} private double getLInfDistance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); if (delta > max) { max = delta; }"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { if (iter.value() > max) { max = iter.value(); } }"
      },
      {
        "txt": "} return max; } @Override public double getLInfDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getLInfDistance((OpenMapRealVector) v); } return getLInfDistance(v.getData());"
      },
      {
        "txt": "} @Override public double getLInfDistance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); if (delta > max) { max = delta; }"
      },
      {
        "txt": "} return max; } public boolean isInfinite() { boolean infiniteFound = false; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); final double value = iter.value(); if (Double.isNaN(value)) {"
      },
      {
        "txt": "return false; } if (Double.isInfinite(value)) { infiniteFound = true; } } return infiniteFound; } public boolean isNaN() { Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); if (Double.isNaN(iter.value())) { return true; } } return false; } @Override public OpenMapRealVector mapAdd(double d) {"
      },
      {
        "txt": "return copy().mapAddToSelf(d); } @Override public OpenMapRealVector mapAddToSelf(double d) { for (int i = 0; i < virtualSize; i++) { setEntry(i, getEntry(i) + d); } return this; } @Override"
      },
      {
        "txt": "public RealMatrix outerProduct(double[] v) { final int n = v.length; RealMatrix res = new OpenMapRealMatrix(virtualSize, n); Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); int row = iter.key(); double value = iter.value(); for (int col = 0; col < n; col++) { res.setEntry(row, col, value * v[col]);"
      },
      {
        "txt": "} } return res; } public RealVector projection(RealVector v) { checkVectorDimensions(v.getDimension()); return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } @Override public OpenMapRealVector projection(double[] v) {"
      },
      {
        "txt": "checkVectorDimensions(v.length); return (OpenMapRealVector) projection(new OpenMapRealVector(v)); } public void setEntry(int index, double value) { checkIndex(index); if (!isDefaultValue(value)) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); }"
      },
      {
        "txt": "} @Override public void setSubVector(int index, RealVector v) { checkIndex(index); checkIndex(index + v.getDimension() - 1); setSubVector(index, v.getData()); } @Override public void setSubVector(int index, double[] v) { checkIndex(index);"
      },
      {
        "txt": "checkIndex(index + v.length - 1); for (int i = 0; i < v.length; i++) { setEntry(i + index, v[i]); } } @Override public void set(double value) { for (int i = 0; i < virtualSize; i++) { setEntry(i, value); }"
      },
      {
        "txt": "} public OpenMapRealVector subtract(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = copy(); Iterator iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (entries.containsKey(key)) { res.setEntry(key, entries.get(key) - iter.value());"
      },
      {
        "txt": "} else { res.setEntry(key, -iter.value()); } } return res; } @Override public OpenMapRealVector subtract(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) {"
      },
      {
        "txt": "return subtract((OpenMapRealVector) v); } return subtract(v.getData()); } @Override public OpenMapRealVector subtract(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); for (int i = 0; i < v.length; i++) { if (entries.containsKey(i)) {"
      },
      {
        "txt": "res.setEntry(i, entries.get(i) - v[i]); } else { res.setEntry(i, -v[i]); } } return res; } @Override public OpenMapRealVector unitVector() { OpenMapRealVector res = copy();"
      },
      {
        "txt": "res.unitize(); return res; } @Override public void unitize() { double norm = getNorm(); if (isDefaultValue(norm)) { throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); } Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); entries.put(iter.key(), iter.value() / norm); } } @Override public double[] toArray() { return getData(); } @Override"
      },
      {
        "txt": "public int hashCode() { final int prime = 31; int result = 1; long temp; temp = Double.doubleToLongBits(epsilon); result = prime * result + (int) (temp ^ (temp >>> 32)); result = prime * result + virtualSize; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "temp = Double.doubleToLongBits(iter.value()); result = prime * result + (int) (temp ^ (temp >>32)); } return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; }"
      },
      {
        "txt": "if (!(obj instanceof OpenMapRealVector)) { return false; } OpenMapRealVector other = (OpenMapRealVector) obj; if (virtualSize != other.virtualSize) { return false; } if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) { return false;"
      },
      {
        "txt": "} Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double test = other.getEntry(iter.key()); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) { return false; } } iter = other.getEntries().iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); double test = iter.value(); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { return false; } } return true; } public double getSparsity() {"
      },
      {
        "txt": "return (double)entries.size()/(double)getDimension(); } @Override public java.util.Iterator<Entry> sparseIterator() { return new OpenMapSparseIterator(); } protected class OpenMapEntry extends Entry { private final Iterator iter; protected OpenMapEntry(Iterator iter) { this.iter = iter;"
      },
      {
        "txt": "} @Override public double getValue() { return iter.value(); } @Override public void setValue(double value) { entries.put(iter.key(), value); } @Override"
      },
      {
        "txt": "public int getIndex() { return iter.key(); } } protected class OpenMapSparseIterator implements java.util.Iterator<Entry> { private final Iterator iter; private final Entry current; protected OpenMapSparseIterator() { iter = entries.iterator(); current = new OpenMapEntry(iter);"
      },
      {
        "txt": "} public boolean hasNext() { return iter.hasNext(); } public Entry next() { iter.advance(); return current; } public void remove() { throw new UnsupportedOperationException(\"Not supported\");"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 2582,
    "file_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
    "start-bug-line": 370,
    "end-bug-line": 370,
    "bug": "Iterator iter = res.entries.iterator();",
    "fix": "Iterator iter = entries.iterator();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.linear; import java.io.Serializable;"
      },
      {
        "txt": "import org.apache.commons.math.exception.MathArithmeticException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.util.OpenIntToDoubleHashMap; import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator; import org.apache.commons.math.util.FastMath; public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable { public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12; private static final long serialVersionUID = 8772222695580707260L; private final OpenIntToDoubleHashMap entries;"
      },
      {
        "txt": "private final int virtualSize; private final double epsilon; public OpenMapRealVector() { this(0, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension) { this(dimension, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, double epsilon) { virtualSize = dimension;"
      },
      {
        "txt": "entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; } protected OpenMapRealVector(OpenMapRealVector v, int resize) { virtualSize = v.getDimension() + resize; entries = new OpenIntToDoubleHashMap(v.entries); epsilon = v.epsilon; } public OpenMapRealVector(int dimension, int expectedSize) { this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);"
      },
      {
        "txt": "} public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); this.epsilon = epsilon; } public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(double[] values, double epsilon) {"
      },
      {
        "txt": "virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } }"
      },
      {
        "txt": "public OpenMapRealVector(Double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(Double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key].doubleValue(); if (!isDefaultValue(value)) {"
      },
      {
        "txt": "entries.put(key, value); } } } public OpenMapRealVector(OpenMapRealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(v.getEntries()); epsilon = v.epsilon; } public OpenMapRealVector(RealVector v) {"
      },
      {
        "txt": "virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(0.0); epsilon = DEFAULT_ZERO_TOLERANCE; for (int key = 0; key < virtualSize; key++) { double value = v.getEntry(key); if (!isDefaultValue(value)) { entries.put(key, value); } } }"
      },
      {
        "txt": "private OpenIntToDoubleHashMap getEntries() { return entries; } protected boolean isDefaultValue(double value) { return FastMath.abs(value) < epsilon; } @Override public RealVector add(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) {"
      },
      {
        "txt": "return add((OpenMapRealVector) v); } else { return super.add(v); } } public OpenMapRealVector add(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean copyThis = entries.size() > v.entries.size(); OpenMapRealVector res = copyThis ? this.copy() : v.copy(); Iterator iter = copyThis ? v.entries.iterator() : entries.iterator();"
      },
      {
        "txt": "OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries; while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (randomAccess.containsKey(key)) { res.setEntry(key, randomAccess.get(key) + iter.value()); } else { res.setEntry(key, iter.value()); } }"
      },
      {
        "txt": "return res; } public OpenMapRealVector append(OpenMapRealVector v) { OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); Iterator iter = v.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key() + virtualSize, iter.value()); } return res;"
      },
      {
        "txt": "} public OpenMapRealVector append(RealVector v) { if (v instanceof OpenMapRealVector) { return append((OpenMapRealVector) v); } return append(v.getData()); } public OpenMapRealVector append(double d) { OpenMapRealVector res = new OpenMapRealVector(this, 1); res.setEntry(virtualSize, d);"
      },
      {
        "txt": "return res; } public OpenMapRealVector append(double[] a) { OpenMapRealVector res = new OpenMapRealVector(this, a.length); for (int i = 0; i < a.length; i++) { res.setEntry(i + virtualSize, a[i]); } return res; } @Override"
      },
      {
        "txt": "public OpenMapRealVector copy() { return new OpenMapRealVector(this); } public double dotProduct(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean thisIsSmaller = entries.size() < v.entries.size(); Iterator iter = thisIsSmaller ? entries.iterator() : v.entries.iterator(); OpenIntToDoubleHashMap larger = thisIsSmaller ? v.entries : entries; double d = 0; while(iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); d += iter.value() * larger.get(iter.key()); } return d; } @Override public double dotProduct(RealVector v) { if(v instanceof OpenMapRealVector) { return dotProduct((OpenMapRealVector)v); } else {"
      },
      {
        "txt": "return super.dotProduct(v); } } public OpenMapRealVector ebeDivide(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));"
      },
      {
        "txt": "} return res; } @Override public OpenMapRealVector ebeDivide(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "} return res; } public OpenMapRealVector ebeMultiply(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); <extra_id_0> while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key())); } return res; }"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeMultiply(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v[iter.key()]);"
      },
      {
        "txt": "} return res; } public OpenMapRealVector getSubVector(int index, int n) { checkIndex(index); checkIndex(index + n - 1); OpenMapRealVector res = new OpenMapRealVector(n); int end = index + n; Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); int key = iter.key(); if (key >= index && key < end) { res.setEntry(key - index, iter.value()); } } return res; } @Override public double[] getData() {"
      },
      {
        "txt": "double[] res = new double[virtualSize]; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); res[iter.key()] = iter.value(); } return res; } public int getDimension() { return virtualSize;"
      },
      {
        "txt": "} public double getDistance(OpenMapRealVector v) { Iterator iter = entries.iterator(); double res = 0; while (iter.hasNext()) { iter.advance(); int key = iter.key(); double delta; delta = iter.value() - v.getEntry(key); res += delta * delta;"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { final double value = iter.value(); res += value * value; } }"
      },
      {
        "txt": "return FastMath.sqrt(res); } @Override public double getDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getDistance((OpenMapRealVector) v); } return getDistance(v.getData()); }"
      },
      {
        "txt": "@Override public double getDistance(double[] v) { checkVectorDimensions(v.length); double res = 0; for (int i = 0; i < v.length; i++) { double delta = entries.get(i) - v[i]; res += delta * delta; } return FastMath.sqrt(res); }"
      },
      {
        "txt": "public double getEntry(int index) { checkIndex(index); return entries.get(index); } public double getL1Distance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key()));"
      },
      {
        "txt": "max += delta; } iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { double delta = FastMath.abs(iter.value()); max += FastMath.abs(delta); }"
      },
      {
        "txt": "} return max; } @Override public double getL1Distance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getL1Distance((OpenMapRealVector) v); } return getL1Distance(v.getData());"
      },
      {
        "txt": "} @Override public double getL1Distance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); max += delta; } return max;"
      },
      {
        "txt": "} private double getLInfDistance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); if (delta > max) { max = delta; }"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { if (iter.value() > max) { max = iter.value(); } }"
      },
      {
        "txt": "} return max; } @Override public double getLInfDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getLInfDistance((OpenMapRealVector) v); } return getLInfDistance(v.getData());"
      },
      {
        "txt": "} @Override public double getLInfDistance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); if (delta > max) { max = delta; }"
      },
      {
        "txt": "} return max; } public boolean isInfinite() { boolean infiniteFound = false; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); final double value = iter.value(); if (Double.isNaN(value)) {"
      },
      {
        "txt": "return false; } if (Double.isInfinite(value)) { infiniteFound = true; } } return infiniteFound; } public boolean isNaN() { Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); if (Double.isNaN(iter.value())) { return true; } } return false; } @Override public OpenMapRealVector mapAdd(double d) {"
      },
      {
        "txt": "return copy().mapAddToSelf(d); } @Override public OpenMapRealVector mapAddToSelf(double d) { for (int i = 0; i < virtualSize; i++) { setEntry(i, getEntry(i) + d); } return this; } @Override"
      },
      {
        "txt": "public RealMatrix outerProduct(double[] v) { final int n = v.length; RealMatrix res = new OpenMapRealMatrix(virtualSize, n); Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); int row = iter.key(); double value = iter.value(); for (int col = 0; col < n; col++) { res.setEntry(row, col, value * v[col]);"
      },
      {
        "txt": "} } return res; } public RealVector projection(RealVector v) { checkVectorDimensions(v.getDimension()); return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } @Override public OpenMapRealVector projection(double[] v) {"
      },
      {
        "txt": "checkVectorDimensions(v.length); return (OpenMapRealVector) projection(new OpenMapRealVector(v)); } public void setEntry(int index, double value) { checkIndex(index); if (!isDefaultValue(value)) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); }"
      },
      {
        "txt": "} @Override public void setSubVector(int index, RealVector v) { checkIndex(index); checkIndex(index + v.getDimension() - 1); setSubVector(index, v.getData()); } @Override public void setSubVector(int index, double[] v) { checkIndex(index);"
      },
      {
        "txt": "checkIndex(index + v.length - 1); for (int i = 0; i < v.length; i++) { setEntry(i + index, v[i]); } } @Override public void set(double value) { for (int i = 0; i < virtualSize; i++) { setEntry(i, value); }"
      },
      {
        "txt": "} public OpenMapRealVector subtract(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = copy(); Iterator iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (entries.containsKey(key)) { res.setEntry(key, entries.get(key) - iter.value());"
      },
      {
        "txt": "} else { res.setEntry(key, -iter.value()); } } return res; } @Override public OpenMapRealVector subtract(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) {"
      },
      {
        "txt": "return subtract((OpenMapRealVector) v); } return subtract(v.getData()); } @Override public OpenMapRealVector subtract(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); for (int i = 0; i < v.length; i++) { if (entries.containsKey(i)) {"
      },
      {
        "txt": "res.setEntry(i, entries.get(i) - v[i]); } else { res.setEntry(i, -v[i]); } } return res; } @Override public OpenMapRealVector unitVector() { OpenMapRealVector res = copy();"
      },
      {
        "txt": "res.unitize(); return res; } @Override public void unitize() { double norm = getNorm(); if (isDefaultValue(norm)) { throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); } Iterator iter = entries.iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); entries.put(iter.key(), iter.value() / norm); } } @Override public double[] toArray() { return getData(); } @Override"
      },
      {
        "txt": "public int hashCode() { final int prime = 31; int result = 1; long temp; temp = Double.doubleToLongBits(epsilon); result = prime * result + (int) (temp ^ (temp >>> 32)); result = prime * result + virtualSize; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "temp = Double.doubleToLongBits(iter.value()); result = prime * result + (int) (temp ^ (temp >>32)); } return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; }"
      },
      {
        "txt": "if (!(obj instanceof OpenMapRealVector)) { return false; } OpenMapRealVector other = (OpenMapRealVector) obj; if (virtualSize != other.virtualSize) { return false; } if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) { return false;"
      },
      {
        "txt": "} Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double test = other.getEntry(iter.key()); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) { return false; } } iter = other.getEntries().iterator();"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); double test = iter.value(); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { return false; } } return true; } public double getSparsity() {"
      },
      {
        "txt": "return (double)entries.size()/(double)getDimension(); } @Override public java.util.Iterator<Entry> sparseIterator() { return new OpenMapSparseIterator(); } protected class OpenMapEntry extends Entry { private final Iterator iter; protected OpenMapEntry(Iterator iter) { this.iter = iter;"
      },
      {
        "txt": "} @Override public double getValue() { return iter.value(); } @Override public void setValue(double value) { entries.put(iter.key(), value); } @Override"
      },
      {
        "txt": "public int getIndex() { return iter.key(); } } protected class OpenMapSparseIterator implements java.util.Iterator<Entry> { private final Iterator iter; private final Entry current; protected OpenMapSparseIterator() { iter = entries.iterator(); current = new OpenMapEntry(iter);"
      },
      {
        "txt": "} public boolean hasNext() { return iter.hasNext(); } public Entry next() { iter.advance(); return current; } public void remove() { throw new UnsupportedOperationException(\"Not supported\");"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 2583,
    "file_path": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
    "start-bug-line": 383,
    "end-bug-line": 383,
    "bug": "Iterator iter = res.entries.iterator();",
    "fix": "Iterator iter = entries.iterator();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.linear; import java.io.Serializable; import org.apache.commons.math.exception.MathArithmeticException;"
      },
      {
        "txt": "import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.util.OpenIntToDoubleHashMap; import org.apache.commons.math.util.OpenIntToDoubleHashMap.Iterator; import org.apache.commons.math.util.FastMath; public class OpenMapRealVector extends AbstractRealVector implements SparseRealVector, Serializable { public static final double DEFAULT_ZERO_TOLERANCE = 1.0e-12; private static final long serialVersionUID = 8772222695580707260L; private final OpenIntToDoubleHashMap entries; private final int virtualSize;"
      },
      {
        "txt": "private final double epsilon; public OpenMapRealVector() { this(0, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension) { this(dimension, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(int dimension, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(0.0);"
      },
      {
        "txt": "this.epsilon = epsilon; } protected OpenMapRealVector(OpenMapRealVector v, int resize) { virtualSize = v.getDimension() + resize; entries = new OpenIntToDoubleHashMap(v.entries); epsilon = v.epsilon; } public OpenMapRealVector(int dimension, int expectedSize) { this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE); }"
      },
      {
        "txt": "public OpenMapRealVector(int dimension, int expectedSize, double epsilon) { virtualSize = dimension; entries = new OpenIntToDoubleHashMap(expectedSize, 0.0); this.epsilon = epsilon; } public OpenMapRealVector(double[] values) { this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(double[] values, double epsilon) { virtualSize = values.length;"
      },
      {
        "txt": "entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key]; if (!isDefaultValue(value)) { entries.put(key, value); } } } public OpenMapRealVector(Double[] values) {"
      },
      {
        "txt": "this(values, DEFAULT_ZERO_TOLERANCE); } public OpenMapRealVector(Double[] values, double epsilon) { virtualSize = values.length; entries = new OpenIntToDoubleHashMap(0.0); this.epsilon = epsilon; for (int key = 0; key < values.length; key++) { double value = values[key].doubleValue(); if (!isDefaultValue(value)) { entries.put(key, value);"
      },
      {
        "txt": "} } } public OpenMapRealVector(OpenMapRealVector v) { virtualSize = v.getDimension(); entries = new OpenIntToDoubleHashMap(v.getEntries()); epsilon = v.epsilon; } public OpenMapRealVector(RealVector v) { virtualSize = v.getDimension();"
      },
      {
        "txt": "entries = new OpenIntToDoubleHashMap(0.0); epsilon = DEFAULT_ZERO_TOLERANCE; for (int key = 0; key < virtualSize; key++) { double value = v.getEntry(key); if (!isDefaultValue(value)) { entries.put(key, value); } } } private OpenIntToDoubleHashMap getEntries() {"
      },
      {
        "txt": "return entries; } protected boolean isDefaultValue(double value) { return FastMath.abs(value) < epsilon; } @Override public RealVector add(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return add((OpenMapRealVector) v);"
      },
      {
        "txt": "} else { return super.add(v); } } public OpenMapRealVector add(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean copyThis = entries.size() > v.entries.size(); OpenMapRealVector res = copyThis ? this.copy() : v.copy(); Iterator iter = copyThis ? v.entries.iterator() : entries.iterator(); OpenIntToDoubleHashMap randomAccess = copyThis ? entries : v.entries;"
      },
      {
        "txt": "while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (randomAccess.containsKey(key)) { res.setEntry(key, randomAccess.get(key) + iter.value()); } else { res.setEntry(key, iter.value()); } } return res;"
      },
      {
        "txt": "} public OpenMapRealVector append(OpenMapRealVector v) { OpenMapRealVector res = new OpenMapRealVector(this, v.getDimension()); Iterator iter = v.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key() + virtualSize, iter.value()); } return res; }"
      },
      {
        "txt": "public OpenMapRealVector append(RealVector v) { if (v instanceof OpenMapRealVector) { return append((OpenMapRealVector) v); } return append(v.getData()); } public OpenMapRealVector append(double d) { OpenMapRealVector res = new OpenMapRealVector(this, 1); res.setEntry(virtualSize, d); return res;"
      },
      {
        "txt": "} public OpenMapRealVector append(double[] a) { OpenMapRealVector res = new OpenMapRealVector(this, a.length); for (int i = 0; i < a.length; i++) { res.setEntry(i + virtualSize, a[i]); } return res; } @Override public OpenMapRealVector copy() {"
      },
      {
        "txt": "return new OpenMapRealVector(this); } public double dotProduct(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); boolean thisIsSmaller = entries.size() < v.entries.size(); Iterator iter = thisIsSmaller ? entries.iterator() : v.entries.iterator(); OpenIntToDoubleHashMap larger = thisIsSmaller ? v.entries : entries; double d = 0; while(iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "d += iter.value() * larger.get(iter.key()); } return d; } @Override public double dotProduct(RealVector v) { if(v instanceof OpenMapRealVector) { return dotProduct((OpenMapRealVector)v); } else { return super.dotProduct(v);"
      },
      {
        "txt": "} } public OpenMapRealVector ebeDivide(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key())); }"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeDivide(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() / v[iter.key()]);"
      },
      {
        "txt": "} return res; } public OpenMapRealVector ebeMultiply(RealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = new OpenMapRealVector(this); Iterator iter = res.entries.iterator(); while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));"
      },
      {
        "txt": "return res; } @Override public OpenMapRealVector ebeMultiply(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); <extra_id_0> while (iter.hasNext()) { iter.advance(); res.setEntry(iter.key(), iter.value() * v[iter.key()]); } return res; }"
      },
      {
        "txt": "return res; } public OpenMapRealVector getSubVector(int index, int n) { checkIndex(index); checkIndex(index + n - 1); OpenMapRealVector res = new OpenMapRealVector(n); int end = index + n; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance();"
      },
      {
        "txt": "int key = iter.key(); if (key >= index && key < end) { res.setEntry(key - index, iter.value()); } } return res; } @Override public double[] getData() { double[] res = new double[virtualSize];"
      },
      {
        "txt": "Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); res[iter.key()] = iter.value(); } return res; } public int getDimension() { return virtualSize; }"
      },
      {
        "txt": "public double getDistance(OpenMapRealVector v) { Iterator iter = entries.iterator(); double res = 0; while (iter.hasNext()) { iter.advance(); int key = iter.key(); double delta; delta = iter.value() - v.getEntry(key); res += delta * delta; }"
      },
      {
        "txt": "iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { final double value = iter.value(); res += value * value; } } return FastMath.sqrt(res);"
      },
      {
        "txt": "} @Override public double getDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getDistance((OpenMapRealVector) v); } return getDistance(v.getData()); } @Override"
      },
      {
        "txt": "public double getDistance(double[] v) { checkVectorDimensions(v.length); double res = 0; for (int i = 0; i < v.length; i++) { double delta = entries.get(i) - v[i]; res += delta * delta; } return FastMath.sqrt(res); } public double getEntry(int index) {"
      },
      {
        "txt": "checkIndex(index); return entries.get(index); } public double getL1Distance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); max += delta;"
      },
      {
        "txt": "} iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { double delta = FastMath.abs(iter.value()); max += FastMath.abs(delta); } }"
      },
      {
        "txt": "return max; } @Override public double getL1Distance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getL1Distance((OpenMapRealVector) v); } return getL1Distance(v.getData()); }"
      },
      {
        "txt": "@Override public double getL1Distance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); max += delta; } return max; }"
      },
      {
        "txt": "private double getLInfDistance(OpenMapRealVector v) { double max = 0; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double delta = FastMath.abs(iter.value() - v.getEntry(iter.key())); if (delta > max) { max = delta; } }"
      },
      {
        "txt": "iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (!entries.containsKey(key)) { if (iter.value() > max) { max = iter.value(); } } }"
      },
      {
        "txt": "return max; } @Override public double getLInfDistance(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return getLInfDistance((OpenMapRealVector) v); } return getLInfDistance(v.getData()); }"
      },
      {
        "txt": "@Override public double getLInfDistance(double[] v) { checkVectorDimensions(v.length); double max = 0; for (int i = 0; i < v.length; i++) { double delta = FastMath.abs(getEntry(i) - v[i]); if (delta > max) { max = delta; } }"
      },
      {
        "txt": "return max; } public boolean isInfinite() { boolean infiniteFound = false; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); final double value = iter.value(); if (Double.isNaN(value)) { return false;"
      },
      {
        "txt": "} if (Double.isInfinite(value)) { infiniteFound = true; } } return infiniteFound; } public boolean isNaN() { Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); if (Double.isNaN(iter.value())) { return true; } } return false; } @Override public OpenMapRealVector mapAdd(double d) { return copy().mapAddToSelf(d);"
      },
      {
        "txt": "} @Override public OpenMapRealVector mapAddToSelf(double d) { for (int i = 0; i < virtualSize; i++) { setEntry(i, getEntry(i) + d); } return this; } @Override public RealMatrix outerProduct(double[] v) {"
      },
      {
        "txt": "final int n = v.length; RealMatrix res = new OpenMapRealMatrix(virtualSize, n); Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); int row = iter.key(); double value = iter.value(); for (int col = 0; col < n; col++) { res.setEntry(row, col, value * v[col]); }"
      },
      {
        "txt": "} return res; } public RealVector projection(RealVector v) { checkVectorDimensions(v.getDimension()); return v.mapMultiply(dotProduct(v) / v.dotProduct(v)); } @Override public OpenMapRealVector projection(double[] v) { checkVectorDimensions(v.length);"
      },
      {
        "txt": "return (OpenMapRealVector) projection(new OpenMapRealVector(v)); } public void setEntry(int index, double value) { checkIndex(index); if (!isDefaultValue(value)) { entries.put(index, value); } else if (entries.containsKey(index)) { entries.remove(index); } }"
      },
      {
        "txt": "@Override public void setSubVector(int index, RealVector v) { checkIndex(index); checkIndex(index + v.getDimension() - 1); setSubVector(index, v.getData()); } @Override public void setSubVector(int index, double[] v) { checkIndex(index); checkIndex(index + v.length - 1);"
      },
      {
        "txt": "for (int i = 0; i < v.length; i++) { setEntry(i + index, v[i]); } } @Override public void set(double value) { for (int i = 0; i < virtualSize; i++) { setEntry(i, value); } }"
      },
      {
        "txt": "public OpenMapRealVector subtract(OpenMapRealVector v) { checkVectorDimensions(v.getDimension()); OpenMapRealVector res = copy(); Iterator iter = v.getEntries().iterator(); while (iter.hasNext()) { iter.advance(); int key = iter.key(); if (entries.containsKey(key)) { res.setEntry(key, entries.get(key) - iter.value()); } else {"
      },
      {
        "txt": "res.setEntry(key, -iter.value()); } } return res; } @Override public OpenMapRealVector subtract(RealVector v) { checkVectorDimensions(v.getDimension()); if (v instanceof OpenMapRealVector) { return subtract((OpenMapRealVector) v);"
      },
      {
        "txt": "} return subtract(v.getData()); } @Override public OpenMapRealVector subtract(double[] v) { checkVectorDimensions(v.length); OpenMapRealVector res = new OpenMapRealVector(this); for (int i = 0; i < v.length; i++) { if (entries.containsKey(i)) { res.setEntry(i, entries.get(i) - v[i]);"
      },
      {
        "txt": "} else { res.setEntry(i, -v[i]); } } return res; } @Override public OpenMapRealVector unitVector() { OpenMapRealVector res = copy(); res.unitize();"
      },
      {
        "txt": "return res; } @Override public void unitize() { double norm = getNorm(); if (isDefaultValue(norm)) { throw new MathArithmeticException(LocalizedFormats.ZERO_NORM); } Iterator iter = entries.iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); entries.put(iter.key(), iter.value() / norm); } } @Override public double[] toArray() { return getData(); } @Override public int hashCode() {"
      },
      {
        "txt": "final int prime = 31; int result = 1; long temp; temp = Double.doubleToLongBits(epsilon); result = prime * result + (int) (temp ^ (temp >>> 32)); result = prime * result + virtualSize; Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); temp = Double.doubleToLongBits(iter.value());"
      },
      {
        "txt": "result = prime * result + (int) (temp ^ (temp >>32)); } return result; } @Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!(obj instanceof OpenMapRealVector)) {"
      },
      {
        "txt": "return false; } OpenMapRealVector other = (OpenMapRealVector) obj; if (virtualSize != other.virtualSize) { return false; } if (Double.doubleToLongBits(epsilon) != Double.doubleToLongBits(other.epsilon)) { return false; }"
      },
      {
        "txt": "Iterator iter = entries.iterator(); while (iter.hasNext()) { iter.advance(); double test = other.getEntry(iter.key()); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(iter.value())) { return false; } } iter = other.getEntries().iterator(); while (iter.hasNext()) {"
      },
      {
        "txt": "iter.advance(); double test = iter.value(); if (Double.doubleToLongBits(test) != Double.doubleToLongBits(getEntry(iter.key()))) { return false; } } return true; } public double getSparsity() { return (double)entries.size()/(double)getDimension();"
      },
      {
        "txt": "} @Override public java.util.Iterator<Entry> sparseIterator() { return new OpenMapSparseIterator(); } protected class OpenMapEntry extends Entry { private final Iterator iter; protected OpenMapEntry(Iterator iter) { this.iter = iter; }"
      },
      {
        "txt": "@Override public double getValue() { return iter.value(); } @Override public void setValue(double value) { entries.put(iter.key(), value); } @Override public int getIndex() {"
      },
      {
        "txt": "return iter.key(); } } protected class OpenMapSparseIterator implements java.util.Iterator<Entry> { private final Iterator iter; private final Entry current; protected OpenMapSparseIterator() { iter = entries.iterator(); current = new OpenMapEntry(iter); }"
      },
      {
        "txt": "public boolean hasNext() { return iter.hasNext(); } public Entry next() { iter.advance(); return current; } public void remove() { throw new UnsupportedOperationException(\"Not supported\"); }"
      }
    ]
  }
]
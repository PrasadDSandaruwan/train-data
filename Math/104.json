[
  {
    "id": 2742,
    "file_path": "src/java/org/apache/commons/math/special/Gamma.java",
    "start-bug-line": 37,
    "end-bug-line": 37,
    "bug": "private static final double DEFAULT_EPSILON = 10e-9;",
    "fix": "private static final double DEFAULT_EPSILON = 10e-15;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import org.apache.commons.math.MathException; import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.util.ContinuedFraction; public class Gamma implements Serializable { private static final long serialVersionUID = -6587513359895466954L; <extra_id_0> private static double[] lanczos = { 0.99999999999999709182, 57.156235665862923517, -59.597960355475491248, 14.136097974741747174,"
      },
      {
        "txt": "-59.597960355475491248, 14.136097974741747174, -0.49191381609762019978, .33994649984811888699e-4, .46523628927048575665e-4, -.98374475304879564677e-4, .15808870322491248884e-3, -.21026444172410488319e-3, .21743961811521264320e-3, -.16431810653676389022e-3,"
      },
      {
        "txt": ".84418223983852743293e-4, -.26190838401581408670e-4, .36899182659531622704e-5, }; private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI); private Gamma() { super(); } public static double logGamma(double x) { double ret;"
      },
      {
        "txt": "if (Double.isNaN(x) || (x <= 0.0)) { ret = Double.NaN; } else { double g = 607.0 / 128.0; double sum = 0.0; for (int i = lanczos.length - 1; i > 0; --i) { sum = sum + (lanczos[i] / (x + i)); } sum = sum + lanczos[0]; double tmp = x + g + .5;"
      },
      {
        "txt": "ret = ((x + .5) * Math.log(tmp)) - tmp + HALF_LOG_2_PI + Math.log(sum / x); } return ret; } public static double regularizedGammaP(double a, double x) throws MathException { return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE); }"
      },
      {
        "txt": "public static double regularizedGammaP(double a, double x, double epsilon, int maxIterations) throws MathException { double ret; if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) { ret = Double.NaN; } else if (x == 0.0) {"
      },
      {
        "txt": "ret = 0.0; } else if (a >= 1.0 && x > a) { ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations); } else { double n = 0.0; // current element index double an = 1.0 / a; // n-th element in the series double sum = an; // partial sum while (Math.abs(an) > epsilon && n < maxIterations) { n = n + 1.0; an = an * (x / (a + n));"
      },
      {
        "txt": "sum = sum + an; } if (n >= maxIterations) { throw new MaxIterationsExceededException(maxIterations); } else { ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum; } } return ret; }"
      },
      {
        "txt": "public static double regularizedGammaQ(double a, double x) throws MathException { return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE); } public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws MathException"
      },
      {
        "txt": "{ double ret; if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) { ret = Double.NaN; } else if (x == 0.0) { ret = 1.0; } else if (x < a || a < 1.0) { ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations); } else { ContinuedFraction cf = new ContinuedFraction() {"
      },
      {
        "txt": "private static final long serialVersionUID = 5378525034886164398L; protected double getA(int n, double x) { return ((2.0 * n) + 1.0) - a + x; } protected double getB(int n, double x) { return n * (a - n); } }; ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;"
      },
      {
        "txt": "} return ret; }"
      }
    ]
  }
]
[
  {
    "id": 2600,
    "file_path": "src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java",
    "start-bug-line": 175,
    "end-bug-line": 175,
    "bug": "int sum = 0;",
    "fix": "double sum = 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.stat.clustering; import java.util.ArrayList; import java.util.Collection;"
      },
      {
        "txt": "import java.util.List; import java.util.Random; import org.apache.commons.math.exception.ConvergenceException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.stat.descriptive.moment.Variance; public class KMeansPlusPlusClusterer<T extends Clusterable<T>> { public static enum EmptyClusterStrategy { LARGEST_VARIANCE, LARGEST_POINTS_NUMBER, FARTHEST_POINT,"
      },
      {
        "txt": "ERROR } private final Random random; private final EmptyClusterStrategy emptyStrategy; public KMeansPlusPlusClusterer(final Random random) { this(random, EmptyClusterStrategy.LARGEST_VARIANCE); } public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) { this.random = random; this.emptyStrategy = emptyStrategy;"
      },
      {
        "txt": "} public List<Cluster<T>> cluster(final Collection<T> points, final int k, final int maxIterations) { List<Cluster<T>> clusters = chooseInitialCenters(points, k, random); assignPointsToClusters(clusters, points); final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations; for (int count = 0; count < max; count++) { boolean clusteringChanged = false; List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>(); for (final Cluster<T> cluster : clusters) {"
      },
      {
        "txt": "final T newCenter; if (cluster.getPoints().isEmpty()) { switch (emptyStrategy) { case LARGEST_VARIANCE : newCenter = getPointFromLargestVarianceCluster(clusters); break; case LARGEST_POINTS_NUMBER : newCenter = getPointFromLargestNumberCluster(clusters); break; case FARTHEST_POINT :"
      },
      {
        "txt": "newCenter = getFarthestPoint(clusters); break; default : throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS); } clusteringChanged = true; } else { newCenter = cluster.getCenter().centroidOf(cluster.getPoints()); if (!newCenter.equals(cluster.getCenter())) { clusteringChanged = true;"
      },
      {
        "txt": "} } newClusters.add(new Cluster<T>(newCenter)); } if (!clusteringChanged) { return clusters; } assignPointsToClusters(newClusters, points); clusters = newClusters; }"
      },
      {
        "txt": "return clusters; } private static <T extends Clusterable<T>> void assignPointsToClusters(final Collection<Cluster<T>> clusters, final Collection<T> points) { for (final T p : points) { Cluster<T> cluster = getNearestCluster(clusters, p); cluster.addPoint(p); } } private static <T extends Clusterable<T>> List<Cluster<T>>"
      },
      {
        "txt": "final List<T> pointSet = new ArrayList<T>(points); final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>(); final T firstPoint = pointSet.remove(random.nextInt(pointSet.size())); resultSet.add(new Cluster<T>(firstPoint)); final double[] dx2 = new double[pointSet.size()]; while (resultSet.size() < k) { <extra_id_0> for (int i = 0; i < pointSet.size(); i++) { final T p = pointSet.get(i); final Cluster<T> nearest = getNearestCluster(resultSet, p); final double d = p.distanceFrom(nearest.getCenter()); sum += d * d; dx2[i] = sum;"
      },
      {
        "txt": "sum += d * d; dx2[i] = sum; } final double r = random.nextDouble() * sum; for (int i = 0 ; i < dx2.length; i++) { if (dx2[i] >= r) { final T p = pointSet.remove(i); resultSet.add(new Cluster<T>(p)); break; }"
      },
      {
        "txt": "} } return resultSet; } private T getPointFromLargestVarianceCluster(final Collection<Cluster<T>> clusters) { double maxVariance = Double.NEGATIVE_INFINITY; Cluster<T> selected = null; for (final Cluster<T> cluster : clusters) { if (!cluster.getPoints().isEmpty()) { final T center = cluster.getCenter();"
      },
      {
        "txt": "final Variance stat = new Variance(); for (final T point : cluster.getPoints()) { stat.increment(point.distanceFrom(center)); } final double variance = stat.getResult(); if (variance > maxVariance) { maxVariance = variance; selected = cluster; } }"
      },
      {
        "txt": "} if (selected == null) { throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS); } final List<T> selectedPoints = selected.getPoints(); return selectedPoints.remove(random.nextInt(selectedPoints.size())); } private T getPointFromLargestNumberCluster(final Collection<Cluster<T>> clusters) { int maxNumber = 0; Cluster<T> selected = null;"
      },
      {
        "txt": "for (final Cluster<T> cluster : clusters) { final int number = cluster.getPoints().size(); if (number > maxNumber) { maxNumber = number; selected = cluster; } } if (selected == null) { throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS); }"
      },
      {
        "txt": "final List<T> selectedPoints = selected.getPoints(); return selectedPoints.remove(random.nextInt(selectedPoints.size())); } private T getFarthestPoint(final Collection<Cluster<T>> clusters) { double maxDistance = Double.NEGATIVE_INFINITY; Cluster<T> selectedCluster = null; int selectedPoint = -1; for (final Cluster<T> cluster : clusters) { final T center = cluster.getCenter(); final List<T> points = cluster.getPoints();"
      },
      {
        "txt": "for (int i = 0; i < points.size(); ++i) { final double distance = points.get(i).distanceFrom(center); if (distance > maxDistance) { maxDistance = distance; selectedCluster = cluster; selectedPoint = i; } } } if (selectedCluster == null) {"
      },
      {
        "txt": "throw new ConvergenceException(LocalizedFormats.EMPTY_CLUSTER_IN_K_MEANS); } return selectedCluster.getPoints().remove(selectedPoint); } private static <T extends Clusterable<T>> Cluster<T> getNearestCluster(final Collection<Cluster<T>> clusters, final T point) { double minDistance = Double.MAX_VALUE; Cluster<T> minCluster = null; for (final Cluster<T> c : clusters) { final double distance = point.distanceFrom(c.getCenter());"
      },
      {
        "txt": "if (distance < minDistance) { minDistance = distance; minCluster = c; } } return minCluster; }"
      }
    ]
  }
]
[
  {
    "id": 2655,
    "file_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
    "start-bug-line": 245,
    "end-bug-line": 245,
    "bug": "final double[] scale;",
    "fix": "final double[] scale = new double[y0.length];",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.nonstiff; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.FirstOrderDifferentialEquations;"
      },
      {
        "txt": "import org.apache.commons.math.ode.IntegratorException; import org.apache.commons.math.ode.events.CombinedEventsManager; import org.apache.commons.math.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math.ode.sampling.DummyStepInterpolator; import org.apache.commons.math.ode.sampling.StepHandler; public abstract class EmbeddedRungeKuttaIntegrator extends AdaptiveStepsizeIntegrator { private final boolean fsal; private final double[] c; private final double[][] a;"
      },
      {
        "txt": "private final double[] b; private final RungeKuttaStepInterpolator prototype; private final double exp; private double safety; private double minReduction; private double maxGrowth; protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep,"
      },
      {
        "txt": "final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal = fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder(); setSafety(0.9);"
      },
      {
        "txt": "setMinReduction(0.2); setMaxGrowth(10.0); } protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);"
      },
      {
        "txt": "this.fsal = fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder(); setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); }"
      },
      {
        "txt": "public abstract int getOrder(); public double getSafety() { return safety; } public void setSafety(final double safety) { this.safety = safety; } @Override public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0,"
      },
      {
        "txt": "final double t, final double[] y) throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0; final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); }"
      },
      {
        "txt": "final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length]; AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); }"
      },
      {
        "txt": "interpolator.storeTime(t0); stepStart = t0; double hNew = 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false; while (!lastStep) {"
      },
      {
        "txt": "double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) { computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { <extra_id_0> if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { scale = vecAbsoluteTolerance; }"
      },
      {
        "txt": "scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew; for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j];"
      },
      {
        "txt": "for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } for (int j = 0; j < y0.length; ++j) { double sum = b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) {"
      },
      {
        "txt": "sum += b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) { interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) {"
      },
      {
        "txt": "loop = false; } else { hNew = dt; } } else { loop = false; } } else { final double factor = Math.min(maxGrowth,"
      },
      {
        "txt": "Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } } final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop(); interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) {"
      },
      {
        "txt": "handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) { System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) { computeDerivatives(stepStart, y, yDotK[0]); } if (! lastStep) {"
      },
      {
        "txt": "stepSize = filterStep(stepSize, forward, true); final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); final double scaledH = stepSize * factor; final double nextT = stepStart + scaledH; final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t); hNew = filterStep(scaledH, forward, nextIsLast); } }"
      },
      {
        "txt": "final double stopTime = stepStart; resetInternalState(); return stopTime; } public double getMinReduction() { return minReduction; } public void setMinReduction(final double minReduction) { this.minReduction = minReduction; }"
      },
      {
        "txt": "public double getMaxGrowth() { return maxGrowth; } public void setMaxGrowth(final double maxGrowth) { this.maxGrowth = maxGrowth; } protected abstract double estimateError(double[][] yDotK, double[] y0, double[] y1, double h);"
      }
    ]
  },
  {
    "id": 2656,
    "file_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
    "start-bug-line": 247,
    "end-bug-line": 248,
    "bug": "scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance);",
    "fix": "for (int i = 0; i < scale.length; ++i) { scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * Math.abs(y[i]); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.nonstiff; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.FirstOrderDifferentialEquations; import org.apache.commons.math.ode.IntegratorException; import org.apache.commons.math.ode.events.CombinedEventsManager;"
      },
      {
        "txt": "import org.apache.commons.math.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math.ode.sampling.DummyStepInterpolator; import org.apache.commons.math.ode.sampling.StepHandler; public abstract class EmbeddedRungeKuttaIntegrator extends AdaptiveStepsizeIntegrator { private final boolean fsal; private final double[] c; private final double[][] a; private final double[] b; private final RungeKuttaStepInterpolator prototype;"
      },
      {
        "txt": "private final double exp; private double safety; private double minReduction; private double maxGrowth; protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {"
      },
      {
        "txt": "super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal = fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder(); setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0);"
      },
      {
        "txt": "} protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance); this.fsal = fsal; this.c = c;"
      },
      {
        "txt": "this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder(); setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } public abstract int getOrder(); public double getSafety() {"
      },
      {
        "txt": "return safety; } public void setSafety(final double safety) { this.safety = safety; } @Override public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException {"
      },
      {
        "txt": "sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations(); final boolean forward = t > t0; final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length];"
      },
      {
        "txt": "AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy(); rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0); stepStart = t0;"
      },
      {
        "txt": "double hNew = 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) { handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false; while (!lastStep) { interpolator.shift(); double error = 0;"
      },
      {
        "txt": "if (firstTime || !fsal) { computeDerivatives(stepStart, y, yDotK[0]); } if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { <extra_id_0> } else { scale = vecAbsoluteTolerance; } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false;"
      },
      {
        "txt": "stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew; for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; }"
      },
      {
        "txt": "yTmp[j] = y[j] + stepSize * sum; } computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } for (int j = 0; j < y0.length; ++j) { double sum = b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum += b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum;"
      },
      {
        "txt": "} error = estimateError(yDotK, y, yTmp, stepSize); if (error <= 1.0) { interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) { loop = false; } else { hNew = dt;"
      },
      {
        "txt": "} } else { loop = false; } } else { final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); }"
      },
      {
        "txt": "} final double nextStep = stepStart + stepSize; System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop(); interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep;"
      },
      {
        "txt": "if (fsal) { System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length); } if (manager.reset(stepStart, y) && ! lastStep) { computeDerivatives(stepStart, y, yDotK[0]); } if (! lastStep) { stepSize = filterStep(stepSize, forward, true); final double factor = Math.min(maxGrowth, Math.max(minReduction,"
      },
      {
        "txt": "safety * Math.pow(error, exp))); final double scaledH = stepSize * factor; final double nextT = stepStart + scaledH; final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t); hNew = filterStep(scaledH, forward, nextIsLast); } } final double stopTime = stepStart; resetInternalState(); return stopTime;"
      },
      {
        "txt": "} public double getMinReduction() { return minReduction; } public void setMinReduction(final double minReduction) { this.minReduction = minReduction; } public double getMaxGrowth() { return maxGrowth; }"
      },
      {
        "txt": "public void setMaxGrowth(final double maxGrowth) { this.maxGrowth = maxGrowth; } protected abstract double estimateError(double[][] yDotK, double[] y0, double[] y1, double h);"
      }
    ]
  },
  {
    "id": 2657,
    "file_path": "src/main/java/org/apache/commons/math/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java",
    "start-bug-line": 250,
    "end-bug-line": 250,
    "bug": "scale = vecAbsoluteTolerance;",
    "fix": "for (int i = 0; i < scale.length; ++i) { scale[i] = vecAbsoluteTolerance[i] + vecRelativeTolerance[i] * Math.abs(y[i]); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.ode.nonstiff; import org.apache.commons.math.ode.DerivativeException; import org.apache.commons.math.ode.FirstOrderDifferentialEquations; import org.apache.commons.math.ode.IntegratorException; import org.apache.commons.math.ode.events.CombinedEventsManager; import org.apache.commons.math.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math.ode.sampling.DummyStepInterpolator; import org.apache.commons.math.ode.sampling.StepHandler;"
      },
      {
        "txt": "public abstract class EmbeddedRungeKuttaIntegrator extends AdaptiveStepsizeIntegrator { private final boolean fsal; private final double[] c; private final double[][] a; private final double[] b; private final RungeKuttaStepInterpolator prototype; private final double exp; private double safety; private double minReduction;"
      },
      {
        "txt": "private double maxGrowth; protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b, final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) { super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance); this.fsal = fsal; this.c = c;"
      },
      {
        "txt": "this.a = a; this.b = b; this.prototype = prototype; exp = -1.0 / getOrder(); setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } protected EmbeddedRungeKuttaIntegrator(final String name, final boolean fsal, final double[] c, final double[][] a, final double[] b,"
      },
      {
        "txt": "final RungeKuttaStepInterpolator prototype, final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) { super(name, minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance); this.fsal = fsal; this.c = c; this.a = a; this.b = b; this.prototype = prototype;"
      },
      {
        "txt": "exp = -1.0 / getOrder(); setSafety(0.9); setMinReduction(0.2); setMaxGrowth(10.0); } public abstract int getOrder(); public double getSafety() { return safety; } public void setSafety(final double safety) {"
      },
      {
        "txt": "this.safety = safety; } @Override public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DerivativeException, IntegratorException { sanityChecks(equations, t0, y0, t, y); setEquations(equations); resetEvaluations();"
      },
      {
        "txt": "final boolean forward = t > t0; final int stages = c.length + 1; if (y != y0) { System.arraycopy(y0, 0, y, 0, y0.length); } final double[][] yDotK = new double[stages][y0.length]; final double[] yTmp = new double[y0.length]; AbstractStepInterpolator interpolator; if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) { final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();"
      },
      {
        "txt": "rki.reinitialize(this, yTmp, yDotK, forward); interpolator = rki; } else { interpolator = new DummyStepInterpolator(yTmp, forward); } interpolator.storeTime(t0); stepStart = t0; double hNew = 0; boolean firstTime = true; for (StepHandler handler : stepHandlers) {"
      },
      {
        "txt": "handler.reset(); } CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager); boolean lastStep = false; while (!lastStep) { interpolator.shift(); double error = 0; for (boolean loop = true; loop;) { if (firstTime || !fsal) { computeDerivatives(stepStart, y, yDotK[0]);"
      },
      {
        "txt": "if (firstTime) { final double[] scale; if (vecAbsoluteTolerance == null) { scale = new double[y0.length]; java.util.Arrays.fill(scale, scalAbsoluteTolerance); } else { <extra_id_0> } hNew = initializeStep(equations, forward, getOrder(), scale, stepStart, y, yDotK[0], yTmp, yDotK[1]); firstTime = false; } stepSize = hNew;"
      },
      {
        "txt": "} stepSize = hNew; for (int k = 1; k < stages; ++k) { for (int j = 0; j < y0.length; ++j) { double sum = a[k-1][0] * yDotK[0][j]; for (int l = 1; l < k; ++l) { sum += a[k-1][l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; }"
      },
      {
        "txt": "computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]); } for (int j = 0; j < y0.length; ++j) { double sum = b[0] * yDotK[0][j]; for (int l = 1; l < stages; ++l) { sum += b[l] * yDotK[l][j]; } yTmp[j] = y[j] + stepSize * sum; } error = estimateError(yDotK, y, yTmp, stepSize);"
      },
      {
        "txt": "if (error <= 1.0) { interpolator.storeTime(stepStart + stepSize); if (manager.evaluateStep(interpolator)) { final double dt = manager.getEventTime() - stepStart; if (Math.abs(dt) <= Math.ulp(stepStart)) { loop = false; } else { hNew = dt; } } else {"
      },
      {
        "txt": "loop = false; } } else { final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); hNew = filterStep(stepSize * factor, forward, false); } } final double nextStep = stepStart + stepSize;"
      },
      {
        "txt": "System.arraycopy(yTmp, 0, y, 0, y0.length); manager.stepAccepted(nextStep, y); lastStep = manager.stop(); interpolator.storeTime(nextStep); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, lastStep); } stepStart = nextStep; if (fsal) { System.arraycopy(yDotK[stages - 1], 0, yDotK[0], 0, y0.length);"
      },
      {
        "txt": "} if (manager.reset(stepStart, y) && ! lastStep) { computeDerivatives(stepStart, y, yDotK[0]); } if (! lastStep) { stepSize = filterStep(stepSize, forward, true); final double factor = Math.min(maxGrowth, Math.max(minReduction, safety * Math.pow(error, exp))); final double scaledH = stepSize * factor;"
      },
      {
        "txt": "final double nextT = stepStart + scaledH; final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t); hNew = filterStep(scaledH, forward, nextIsLast); } } final double stopTime = stepStart; resetInternalState(); return stopTime; } public double getMinReduction() {"
      },
      {
        "txt": "return minReduction; } public void setMinReduction(final double minReduction) { this.minReduction = minReduction; } public double getMaxGrowth() { return maxGrowth; } public void setMaxGrowth(final double maxGrowth) { this.maxGrowth = maxGrowth;"
      },
      {
        "txt": "} protected abstract double estimateError(double[][] yDotK, double[] y0, double[] y1, double h);"
      }
    ]
  }
]
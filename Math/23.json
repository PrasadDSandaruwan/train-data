[
  {
    "id": 2521,
    "file_path": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
    "start-bug-line": 151,
    "end-bug-line": 151,
    "bug": "",
    "fix": "UnivariatePointValuePair best = current;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.optimization.univariate; import org.apache.commons.math3.util.Precision; import org.apache.commons.math3.util.FastMath;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.optimization.ConvergenceChecker; import org.apache.commons.math3.optimization.GoalType; public class BrentOptimizer extends BaseAbstractUnivariateOptimizer { private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); private final double relativeThreshold; private final double absoluteThreshold; public BrentOptimizer(double rel,"
      },
      {
        "txt": "double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel;"
      },
      {
        "txt": "absoluteThreshold = abs; } public BrentOptimizer(double rel, double abs) { this(rel, abs, null); } @Override protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin();"
      },
      {
        "txt": "final double mid = getStartValue(); final double hi = getMax(); final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; } else {"
      },
      {
        "txt": "a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) {"
      },
      {
        "txt": "} double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); <extra_id_0> int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);"
      },
      {
        "txt": "final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw);"
      },
      {
        "txt": "p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { p = -p; } else { q = -q; } r = e; e = d; if (p > q * (a - x) &&"
      },
      {
        "txt": "p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { d = p / q; u = x + d; if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; }"
      },
      {
        "txt": "} } else { if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; } } else {"
      },
      {
        "txt": "if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; } if (FastMath.abs(d) < tol1) { if (d >= 0) { u = x + tol1;"
      },
      {
        "txt": "} else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; }"
      },
      {
        "txt": "previous = current; current = new UnivariatePointValuePair(u, isMinim ? fu : -fu); if (checker != null) { if (checker.converged(iter, previous, current)) { return best(current, previous, isMinim); } } if (fu <= fx) { if (u < x) { b = x;"
      },
      {
        "txt": "} else { a = x; } v = w; fv = fw; w = x; fw = fx; x = u; fx = fu; } else {"
      },
      {
        "txt": "if (u < x) { a = u; } else { b = u; } if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw; w = u;"
      },
      {
        "txt": "fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } } else { // Default termination (Brent's criterion). return"
      },
      {
        "txt": "best(current, previous, isMinim); } ++iter; } } private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b, boolean isMinim) {"
      },
      {
        "txt": "if (a == null) { return b; } if (b == null) { return a; } if (isMinim) { return a.getValue() <= b.getValue() ? a : b; } else { return a.getValue() >= b.getValue() ? a : b;"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 2522,
    "file_path": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
    "start-bug-line": 234,
    "end-bug-line": 234,
    "bug": "",
    "fix": "best = best(best, best(current, previous, isMinim), isMinim);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.optimization.univariate; import org.apache.commons.math3.util.Precision; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.optimization.ConvergenceChecker; import org.apache.commons.math3.optimization.GoalType; public class BrentOptimizer extends BaseAbstractUnivariateOptimizer { private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));"
      },
      {
        "txt": "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); private final double relativeThreshold; private final double absoluteThreshold; public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); }"
      },
      {
        "txt": "if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } public BrentOptimizer(double rel, double abs) { this(rel, abs, null); }"
      },
      {
        "txt": "@Override protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax(); final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b;"
      },
      {
        "txt": "if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x;"
      },
      {
        "txt": "double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current"
      },
      {
        "txt": "= new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0;"
      },
      {
        "txt": "double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { p = -p; } else {"
      },
      {
        "txt": "q = -q; } r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { d = p / q; u = x + d; if (u - a < tol2 || b - u < tol2) {"
      },
      {
        "txt": "if (x <= m) { d = tol1; } else { d = -tol1; } } } else { if (x < m) { e = b - x; } else {"
      },
      {
        "txt": "e = a - x; } d = GOLDEN_SECTION * e; } } else { if (x < m) { e = b - x; } else { e = a - x; }"
      },
      {
        "txt": "d = GOLDEN_SECTION * e; } if (FastMath.abs(d) < tol1) { if (d >= 0) { u = x + tol1; } else { u = x - tol1; } } else { u = x + d;"
      },
      {
        "txt": "double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; } previous = current; current = new UnivariatePointValuePair(u, isMinim ? fu : -fu); <extra_id_0> if (checker != null) { if (checker.converged(iter, previous, current)) { return best(current, previous, isMinim); } } if (fu <= fx) {"
      },
      {
        "txt": "} if (fu <= fx) { if (u < x) { b = x; } else { a = x; } v = w; fv = fw; w = x;"
      },
      {
        "txt": "fw = fx; x = u; fx = fu; } else { if (u < x) { a = u; } else { b = u; } if (fu <= fw ||"
      },
      {
        "txt": "Precision.equals(w, x)) { v = w; fv = fw; w = u; fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu;"
      },
      {
        "txt": "} } } else { // Default termination (Brent's criterion). return best(current, previous, isMinim); } ++iter; }"
      },
      {
        "txt": "} private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b, boolean isMinim) { if (a == null) { return b; } if (b == null) { return a; }"
      },
      {
        "txt": "if (isMinim) { return a.getValue() <= b.getValue() ? a : b; } else { return a.getValue() >= b.getValue() ? a : b; } }"
      }
    ]
  },
  {
    "id": 2523,
    "file_path": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
    "start-bug-line": 237,
    "end-bug-line": 237,
    "bug": "return best(current, previous, isMinim);",
    "fix": "return best;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.apache.commons.math3.util.Precision; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.optimization.ConvergenceChecker; import org.apache.commons.math3.optimization.GoalType; public class BrentOptimizer extends BaseAbstractUnivariateOptimizer { private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); private final double relativeThreshold;"
      },
      {
        "txt": "private final double absoluteThreshold; public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs);"
      },
      {
        "txt": "} relativeThreshold = rel; absoluteThreshold = abs; } public BrentOptimizer(double rel, double abs) { this(rel, abs, null); } @Override protected UnivariatePointValuePair doOptimize() {"
      },
      {
        "txt": "final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax(); final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo;"
      },
      {
        "txt": "b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x; double d = 0; double e = 0;"
      },
      {
        "txt": "double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0;"
      },
      {
        "txt": "while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0;"
      },
      {
        "txt": "if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { p = -p; } else { q = -q; }"
      },
      {
        "txt": "r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { d = p / q; u = x + d; if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1;"
      },
      {
        "txt": "} else { d = -tol1; } } } else { if (x < m) { e = b - x; } else { e = a - x; }"
      },
      {
        "txt": "d = GOLDEN_SECTION * e; } } else { if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; }"
      },
      {
        "txt": "if (FastMath.abs(d) < tol1) { if (d >= 0) { u = x + tol1; } else { u = x - tol1; } } else { u = x + d; } double fu = computeObjectiveValue(u);"
      },
      {
        "txt": "fu = -fu; } previous = current; current = new UnivariatePointValuePair(u, isMinim ? fu : -fu); if (checker != null) { if (checker.converged(iter, previous, current)) { <extra_id_0> } } if (fu <= fx) { if (u < x) { b = x; } else {"
      },
      {
        "txt": "b = x; } else { a = x; } v = w; fv = fw; w = x; fw = fx; x = u; fx = fu;"
      },
      {
        "txt": "} else { if (u < x) { a = u; } else { b = u; } if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw;"
      },
      {
        "txt": "w = u; fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u; fv = fu; } } } else { // Default termination (Brent's criterion)."
      },
      {
        "txt": "return best(current, previous, isMinim); } ++iter; } } private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b,"
      },
      {
        "txt": "boolean isMinim) { if (a == null) { return b; } if (b == null) { return a; } if (isMinim) { return a.getValue() <= b.getValue() ? a : b; } else {"
      },
      {
        "txt": "return a.getValue() >= b.getValue() ? a : b; } }"
      }
    ]
  },
  {
    "id": 2524,
    "file_path": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
    "start-bug-line": 274,
    "end-bug-line": 274,
    "bug": "return",
    "fix": "return best(best,",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.optimization.univariate; import org.apache.commons.math3.util.Precision; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.optimization.ConvergenceChecker;"
      },
      {
        "txt": "import org.apache.commons.math3.optimization.GoalType; public class BrentOptimizer extends BaseAbstractUnivariateOptimizer { private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5)); private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); private final double relativeThreshold; private final double absoluteThreshold; public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker);"
      },
      {
        "txt": "if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); } if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } public BrentOptimizer(double rel,"
      },
      {
        "txt": "double abs) { this(rel, abs, null); } @Override protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax(); final ConvergenceChecker<UnivariatePointValuePair> checker"
      },
      {
        "txt": "= getConvergenceChecker(); double a; double b; if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; }"
      },
      {
        "txt": "double x = mid; double v = x; double w = x; double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx;"
      },
      {
        "txt": "double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current = new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);"
      },
      {
        "txt": "if (!stop) { double p = 0; double q = 0; double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r);"
      },
      {
        "txt": "if (q > 0) { p = -p; } else { q = -q; } r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) {"
      },
      {
        "txt": "d = p / q; u = x + d; if (u - a < tol2 || b - u < tol2) { if (x <= m) { d = tol1; } else { d = -tol1; } } } else {"
      },
      {
        "txt": "if (x < m) { e = b - x; } else { e = a - x; } d = GOLDEN_SECTION * e; } } else { if (x < m) { e = b - x;"
      },
      {
        "txt": "} else { e = a - x; } d = GOLDEN_SECTION * e; } if (FastMath.abs(d) < tol1) { if (d >= 0) { u = x + tol1; } else { u = x - tol1;"
      },
      {
        "txt": "} } else { u = x + d; } double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; } previous = current; current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);"
      },
      {
        "txt": "if (checker != null) { if (checker.converged(iter, previous, current)) { return best(current, previous, isMinim); } } if (fu <= fx) { if (u < x) { b = x; } else { a = x;"
      },
      {
        "txt": "} v = w; fv = fw; w = x; fw = fx; x = u; fx = fu; } else { if (u < x) { a = u;"
      },
      {
        "txt": "} else { b = u; } if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw; w = u; fw = fu; } else if (fu <= fv ||"
      },
      {
        "txt": "Precision.equals(v, w)) { v = u; fv = fu; } } } else { // Default termination (Brent's criterion). <extra_id_0> best(current, previous, isMinim); } ++iter; }"
      },
      {
        "txt": "++iter; } } private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b, boolean isMinim) { if (a == null) { return b; } if (b == null) {"
      },
      {
        "txt": "return a; } if (isMinim) { return a.getValue() <= b.getValue() ? a : b; } else { return a.getValue() >= b.getValue() ? a : b; } }"
      }
    ]
  },
  {
    "id": 2525,
    "file_path": "src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java",
    "start-bug-line": 277,
    "end-bug-line": 277,
    "bug": "",
    "fix": "isMinim),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.optimization.univariate; import org.apache.commons.math3.util.Precision; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.optimization.ConvergenceChecker; import org.apache.commons.math3.optimization.GoalType; public class BrentOptimizer extends BaseAbstractUnivariateOptimizer { private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));"
      },
      {
        "txt": "private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d); private final double relativeThreshold; private final double absoluteThreshold; public BrentOptimizer(double rel, double abs, ConvergenceChecker<UnivariatePointValuePair> checker) { super(checker); if (rel < MIN_RELATIVE_TOLERANCE) { throw new NumberIsTooSmallException(rel, MIN_RELATIVE_TOLERANCE, true); }"
      },
      {
        "txt": "if (abs <= 0) { throw new NotStrictlyPositiveException(abs); } relativeThreshold = rel; absoluteThreshold = abs; } public BrentOptimizer(double rel, double abs) { this(rel, abs, null); }"
      },
      {
        "txt": "@Override protected UnivariatePointValuePair doOptimize() { final boolean isMinim = getGoalType() == GoalType.MINIMIZE; final double lo = getMin(); final double mid = getStartValue(); final double hi = getMax(); final ConvergenceChecker<UnivariatePointValuePair> checker = getConvergenceChecker(); double a; double b;"
      },
      {
        "txt": "if (lo < hi) { a = lo; b = hi; } else { a = hi; b = lo; } double x = mid; double v = x; double w = x;"
      },
      {
        "txt": "double d = 0; double e = 0; double fx = computeObjectiveValue(x); if (!isMinim) { fx = -fx; } double fv = fx; double fw = fx; UnivariatePointValuePair previous = null; UnivariatePointValuePair current"
      },
      {
        "txt": "= new UnivariatePointValuePair(x, isMinim ? fx : -fx); int iter = 0; while (true) { final double m = 0.5 * (a + b); final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold; final double tol2 = 2 * tol1; final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a); if (!stop) { double p = 0; double q = 0;"
      },
      {
        "txt": "double r = 0; double u = 0; if (FastMath.abs(e) > tol1) { // Fit parabola. r = (x - w) * (fx - fv); q = (x - v) * (fx - fw); p = (x - v) * q - (x - w) * r; q = 2 * (q - r); if (q > 0) { p = -p; } else {"
      },
      {
        "txt": "q = -q; } r = e; e = d; if (p > q * (a - x) && p < q * (b - x) && FastMath.abs(p) < FastMath.abs(0.5 * q * r)) { d = p / q; u = x + d; if (u - a < tol2 || b - u < tol2) {"
      },
      {
        "txt": "if (x <= m) { d = tol1; } else { d = -tol1; } } } else { if (x < m) { e = b - x; } else {"
      },
      {
        "txt": "e = a - x; } d = GOLDEN_SECTION * e; } } else { if (x < m) { e = b - x; } else { e = a - x; }"
      },
      {
        "txt": "d = GOLDEN_SECTION * e; } if (FastMath.abs(d) < tol1) { if (d >= 0) { u = x + tol1; } else { u = x - tol1; } } else { u = x + d;"
      },
      {
        "txt": "} double fu = computeObjectiveValue(u); if (!isMinim) { fu = -fu; } previous = current; current = new UnivariatePointValuePair(u, isMinim ? fu : -fu); if (checker != null) { if (checker.converged(iter, previous, current)) { return best(current, previous, isMinim);"
      },
      {
        "txt": "} } if (fu <= fx) { if (u < x) { b = x; } else { a = x; } v = w; fv = fw;"
      },
      {
        "txt": "w = x; fw = fx; x = u; fx = fu; } else { if (u < x) { a = u; } else { b = u; }"
      },
      {
        "txt": "if (fu <= fw || Precision.equals(w, x)) { v = w; fv = fw; w = u; fw = fu; } else if (fu <= fv || Precision.equals(v, x) || Precision.equals(v, w)) { v = u;"
      },
      {
        "txt": "} } } else { // Default termination (Brent's criterion). return best(current, previous, <extra_id_0> } ++iter; } } private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b,"
      },
      {
        "txt": "private UnivariatePointValuePair best(UnivariatePointValuePair a, UnivariatePointValuePair b, boolean isMinim) { if (a == null) { return b; } if (b == null) { return a; } if (isMinim) {"
      },
      {
        "txt": "return a.getValue() <= b.getValue() ? a : b; } else { return a.getValue() >= b.getValue() ? a : b; } }"
      }
    ]
  }
]
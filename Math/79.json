[
  {
    "id": 2676,
    "file_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
    "start-bug-line": 1624,
    "end-bug-line": 1624,
    "bug": "int sum = 0;",
    "fix": "double sum = 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.util; import java.math.BigDecimal; import java.math.BigInteger; import java.util.Arrays; import org.apache.commons.math.MathRuntimeException; public final class MathUtils {"
      },
      {
        "txt": "public static final double EPSILON = 0x1.0p-53; public static final double SAFE_MIN = 0x1.0p-1022; public static final double TWO_PI = 2 * Math.PI; private static final byte NB = (byte)-1; private static final short NS = (short)-1; private static final byte PB = (byte)1; private static final short PS = (short)1; private static final byte ZB = (byte)0; private static final short ZS = (short)0; private static final int NAN_GAP = 4 * 1024 * 1024;"
      },
      {
        "txt": "private static final long SGN_MASK = 0x8000000000000000L; private static final long[] FACTORIALS = new long[] { 1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l }; private MathUtils() {"
      },
      {
        "txt": "super(); } public static int addAndCheck(int x, int y) { long s = (long)x + (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: add\"); } return (int)s; } public static long addAndCheck(long a, long b) {"
      },
      {
        "txt": "return addAndCheck(a, b, \"overflow: add\"); } private static long addAndCheck(long a, long b, String msg) { long ret; if (a > b) { ret = addAndCheck(b, a, msg); } else { if (a < 0) { if (b < 0) { if (Long.MIN_VALUE - b <= a) {"
      },
      {
        "txt": "ret = a + b; } else { throw new ArithmeticException(msg); } } else { ret = a + b; } } else { if (a <= Long.MAX_VALUE - b) { ret = a + b;"
      },
      {
        "txt": "} else { throw new ArithmeticException(msg); } } } return ret; } public static long binomialCoefficient(final int n, final int k) { checkBinomial(n, k); if ((n == k) || (k == 0)) {"
      },
      {
        "txt": "return 1; } if ((k == 1) || (k == n - 1)) { return n; } if (k > n / 2) return binomialCoefficient(n, n - k); long result = 1; if (n <= 61) { int i = n - k + 1;"
      },
      {
        "txt": "for (int j = 1; j <= k; j++) { result = result * i / j; i++; } } else if (n <= 66) { int i = n - k + 1; for (int j = 1; j <= k; j++) { final long d = gcd(i, j); result = (result / (j / d)) * (i / d); i++;"
      },
      {
        "txt": "} } else { int i = n - k + 1; for (int j = 1; j <= k; j++) { final long d = gcd(i, j); result = mulAndCheck(result / (j / d), i / d); i++; } } return result;"
      },
      {
        "txt": "} public static double binomialCoefficientDouble(final int n, final int k) { checkBinomial(n, k); if ((n == k) || (k == 0)) { return 1d; } if ((k == 1) || (k == n - 1)) { return n; } if (k > n/2) {"
      },
      {
        "txt": "return binomialCoefficientDouble(n, n - k); } if (n < 67) { return binomialCoefficient(n,k); } double result = 1d; for (int i = 1; i <= k; i++) { result *= (double)(n - k + i) / (double)i; } return Math.floor(result + 0.5);"
      },
      {
        "txt": "} public static double binomialCoefficientLog(final int n, final int k) { checkBinomial(n, k); if ((n == k) || (k == 0)) { return 0; } if ((k == 1) || (k == n - 1)) { return Math.log(n); } if (n < 67) {"
      },
      {
        "txt": "return Math.log(binomialCoefficient(n,k)); } if (n < 1030) { return Math.log(binomialCoefficientDouble(n, k)); } if (k > n / 2) { return binomialCoefficientLog(n, n - k); } double logSum = 0; for (int i = n - k + 1; i <= n; i++) {"
      },
      {
        "txt": "logSum += Math.log(i); } for (int i = 2; i <= k; i++) { logSum -= Math.log(i); } return logSum; } private static void checkBinomial(final int n, final int k) throws IllegalArgumentException { if (n < k) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException( \"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\", n, k); } if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k), got n = {0}\", n); } }"
      },
      {
        "txt": "public static int compareTo(double x, double y, double eps) { if (equals(x, y, eps)) { return 0; } else if (x < y) { return -1; } return 1; } public static double cosh(double x) { return (Math.exp(x) + Math.exp(-x)) / 2.0;"
      },
      {
        "txt": "} public static boolean equals(double x, double y) { return (Double.isNaN(x) && Double.isNaN(y)) || x == y; } public static boolean equals(double x, double y, double eps) { return equals(x, y) || (Math.abs(y - x) <= eps); } public static boolean equals(double x, double y, int maxUlps) { assert maxUlps > 0 && maxUlps < NAN_GAP; long xInt = Double.doubleToLongBits(x);"
      },
      {
        "txt": "long yInt = Double.doubleToLongBits(y); if (xInt < 0) { xInt = SGN_MASK - xInt; } if (yInt < 0) { yInt = SGN_MASK - yInt; } return Math.abs(xInt - yInt) <= maxUlps; } public static boolean equals(double[] x, double[] y) {"
      },
      {
        "txt": "if ((x == null) || (y == null)) { return !((x == null) ^ (y == null)); } if (x.length != y.length) { return false; } for (int i = 0; i < x.length; ++i) { if (!equals(x[i], y[i])) { return false; }"
      },
      {
        "txt": "} return true; } public static long factorial(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\", n); } if (n > 20) {"
      },
      {
        "txt": "throw new ArithmeticException( \"factorial value is too large to fit in a long\"); } return FACTORIALS[n]; } public static double factorialDouble(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\", n);"
      },
      {
        "txt": "} if (n < 21) { return factorial(n); } return Math.floor(Math.exp(factorialLog(n)) + 0.5); } public static double factorialLog(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\","
      },
      {
        "txt": "n); } if (n < 21) { return Math.log(factorial(n)); } double logSum = 0; for (int i = 2; i <= n; i++) { logSum += Math.log(i); } return logSum;"
      },
      {
        "txt": "} public static int gcd(final int p, final int q) { int u = p; int v = q; if ((u == 0) || (v == 0)) { if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", p, q); }"
      },
      {
        "txt": "return Math.abs(u) + Math.abs(v); } if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are"
      },
      {
        "txt": "u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", p, q); } int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;"
      },
      {
        "txt": "do { while ((t & 1) == 0) { // while t is even.. t /= 2; // cast out twos } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2;"
      },
      {
        "txt": "} while (t != 0); return -u * (1 << k); // gcd is u*2^k } public static int hash(double value) { return new Double(value).hashCode(); } public static int hash(double[] value) { return Arrays.hashCode(value); } public static byte indicator(final byte x) {"
      },
      {
        "txt": "return (x >= ZB) ? PB : NB; } public static double indicator(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x >= 0.0) ? 1.0 : -1.0; } public static float indicator(final float x) { if (Float.isNaN(x)) {"
      },
      {
        "txt": "return Float.NaN; } return (x >= 0.0F) ? 1.0F : -1.0F; } public static int indicator(final int x) { return (x >= 0) ? 1 : -1; } public static long indicator(final long x) { return (x >= 0L) ? 1L : -1L; }"
      },
      {
        "txt": "public static short indicator(final short x) { return (x >= ZS) ? PS : NS; } public static int lcm(int a, int b) { if (a==0 || b==0){ return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); if (lcm == Integer.MIN_VALUE){ throw new ArithmeticException(\"overflow: lcm is 2^31\");"
      },
      {
        "txt": "} return lcm; } public static double log(double base, double x) { return Math.log(x)/Math.log(base); } public static int mulAndCheck(int x, int y) { long m = ((long)x) * ((long)y); if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: mul\");"
      },
      {
        "txt": "} return (int)m; } public static long mulAndCheck(long a, long b) { long ret; String msg = \"overflow: multiply\"; if (a > b) { ret = mulAndCheck(b, a); } else { if (a < 0) {"
      },
      {
        "txt": "if (b < 0) { if (a >= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg); } } else if (b > 0) { if (Long.MIN_VALUE / b <= a) { ret = a * b; } else {"
      },
      {
        "txt": "throw new ArithmeticException(msg); } } else { ret = 0; } } else if (a > 0) { if (a <= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg);"
      },
      {
        "txt": "} } else { ret = 0; } } return ret; } public static double nextAfter(double d, double direction) { if (Double.isNaN(d) || Double.isInfinite(d)) { return d;"
      },
      {
        "txt": "} else if (d == 0) { return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE; } long bits = Double.doubleToLongBits(d); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) { if (mantissa == 0x000fffffffffffffL) { return Double.longBitsToDouble(sign |"
      },
      {
        "txt": "(exponent + 0x0010000000000000L)); } else { return Double.longBitsToDouble(sign | exponent | (mantissa + 1)); } } else { if (mantissa == 0L) { return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL);"
      },
      {
        "txt": "} else { return Double.longBitsToDouble(sign | exponent | (mantissa - 1)); } } } public static double scalb(final double d, final int scaleFactor) { if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) { return d; }"
      },
      {
        "txt": "final long bits = Double.doubleToLongBits(d); final long exponent = bits & 0x7ff0000000000000L; final long rest = bits & 0x800fffffffffffffL; final long newBits = rest | (exponent + (((long) scaleFactor) << 52)); return Double.longBitsToDouble(newBits); } public static double normalizeAngle(double a, double center) { return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI); } public static double[] normalizeArray(double[] values, double normalizedSum)"
      },
      {
        "txt": "throws ArithmeticException, IllegalArgumentException { if (Double.isInfinite(normalizedSum)) { throw MathRuntimeException.createIllegalArgumentException( \"Cannot normalize to an infinite value\"); } if (Double.isNaN(normalizedSum)) { throw MathRuntimeException.createIllegalArgumentException( \"Cannot normalize to NaN\"); } double sum = 0d;"
      },
      {
        "txt": "final int len = values.length; double[] out = new double[len]; for (int i = 0; i < len; i++) { if (Double.isInfinite(values[i])) { throw MathRuntimeException.createArithmeticException( \"Array contains an infinite element, {0} at index {1}\", values[i], i); } if (!Double.isNaN(values[i])) { sum += values[i]; }"
      },
      {
        "txt": "} if (sum == 0) { throw MathRuntimeException.createArithmeticException( \"Array sums to zero\"); } for (int i = 0; i < len; i++) { if (Double.isNaN(values[i])) { out[i] = Double.NaN; } else { out[i] = values[i] * normalizedSum / sum;"
      },
      {
        "txt": "} } return out; } public static double round(double x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static double round(double x, int scale, int roundingMethod) { try { return (new BigDecimal"
      },
      {
        "txt": "(Double.toString(x)) .setScale(scale, roundingMethod)) .doubleValue(); } catch (NumberFormatException ex) { if (Double.isInfinite(x)) { return x; } else { return Double.NaN; } }"
      },
      {
        "txt": "} public static float round(float x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static float round(float x, int scale, int roundingMethod) { float sign = indicator(x); float factor = (float)Math.pow(10.0f, scale) * sign; return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor; } private static double roundUnscaled(double unscaled, double sign,"
      },
      {
        "txt": "int roundingMethod) { switch (roundingMethod) { case BigDecimal.ROUND_CEILING : if (sign == -1) { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } else { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } break; case BigDecimal.ROUND_DOWN :"
      },
      {
        "txt": "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); break; case BigDecimal.ROUND_FLOOR : if (sign == -1) { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } else { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } break; case BigDecimal.ROUND_HALF_DOWN : {"
      },
      {
        "txt": "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) { unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_HALF_EVEN : {"
      },
      {
        "txt": "double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) { unscaled = Math.ceil(unscaled); } else if (fraction < 0.5) { unscaled = Math.floor(unscaled); } else { if (Math.floor(unscaled) / 2.0 == Math.floor(Math .floor(unscaled) / 2.0)) { // even unscaled = Math.floor(unscaled); } else { // odd"
      },
      {
        "txt": "unscaled = Math.ceil(unscaled); } } break; } case BigDecimal.ROUND_HALF_UP : { unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction >= 0.5) { unscaled = Math.ceil(unscaled);"
      },
      {
        "txt": "} else { unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_UNNECESSARY : if (unscaled != Math.floor(unscaled)) { throw new ArithmeticException(\"Inexact result from rounding\"); } break;"
      },
      {
        "txt": "case BigDecimal.ROUND_UP : unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); break; default : throw MathRuntimeException.createIllegalArgumentException( \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" + \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\", roundingMethod, \"ROUND_CEILING\", BigDecimal.ROUND_CEILING, \"ROUND_DOWN\", BigDecimal.ROUND_DOWN,"
      },
      {
        "txt": "\"ROUND_FLOOR\", BigDecimal.ROUND_FLOOR, \"ROUND_HALF_DOWN\", BigDecimal.ROUND_HALF_DOWN, \"ROUND_HALF_EVEN\", BigDecimal.ROUND_HALF_EVEN, \"ROUND_HALF_UP\", BigDecimal.ROUND_HALF_UP, \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY, \"ROUND_UP\", BigDecimal.ROUND_UP); } return unscaled; } public static byte sign(final byte x) {"
      },
      {
        "txt": "return (x == ZB) ? ZB : (x > ZB) ? PB : NB; } public static double sign(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0; } public static float sign(final float x) { if (Float.isNaN(x)) {"
      },
      {
        "txt": "return Float.NaN; } return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F; } public static int sign(final int x) { return (x == 0) ? 0 : (x > 0) ? 1 : -1; } public static long sign(final long x) { return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L; }"
      },
      {
        "txt": "public static short sign(final short x) { return (x == ZS) ? ZS : (x > ZS) ? PS : NS; } public static double sinh(double x) { return (Math.exp(x) - Math.exp(-x)) / 2.0; } public static int subAndCheck(int x, int y) { long s = (long)x - (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: subtract\");"
      },
      {
        "txt": "} return (int)s; } public static long subAndCheck(long a, long b) { long ret; String msg = \"overflow: subtract\"; if (b == Long.MIN_VALUE) { if (a < 0) { ret = a - b; } else {"
      },
      {
        "txt": "throw new ArithmeticException(msg); } } else { ret = addAndCheck(a, -b, msg); } return ret; } public static int pow(final int k, int e) throws IllegalArgumentException { if (e < 0) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } int result = 1; int k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; }"
      },
      {
        "txt": "k2p *= k2p; e = e >> 1; } return result; } public static int pow(final int k, long e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\","
      },
      {
        "txt": "k, e); } int result = 1; int k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1;"
      },
      {
        "txt": "} return result; } public static long pow(final long k, int e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); }"
      },
      {
        "txt": "long result = 1l; long k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1; } return result;"
      },
      {
        "txt": "} public static long pow(final long k, long e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } long result = 1l; long k2p = k;"
      },
      {
        "txt": "while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1; } return result; } public static BigInteger pow(final BigInteger k, int e)"
      },
      {
        "txt": "throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } return k.pow(e); } public static BigInteger pow(final BigInteger k, long e) throws IllegalArgumentException {"
      },
      {
        "txt": "if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } BigInteger result = BigInteger.ONE; BigInteger k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result = result.multiply(k2p);"
      },
      {
        "txt": "} k2p = k2p.multiply(k2p); e = e >> 1; } return result; } public static BigInteger pow(final BigInteger k, BigInteger e) throws IllegalArgumentException { if (e.compareTo(BigInteger.ZERO) < 0) { throw MathRuntimeException.createIllegalArgumentException("
      },
      {
        "txt": "\"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } BigInteger result = BigInteger.ONE; BigInteger k2p = k; while (!BigInteger.ZERO.equals(e)) { if (e.testBit(0)) { result = result.multiply(k2p); } k2p = k2p.multiply(k2p);"
      },
      {
        "txt": "e = e.shiftRight(1); } return result; } public static double distance1(double[] p1, double[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { sum += Math.abs(p1[i] - p2[i]); } return sum;"
      },
      {
        "txt": "} public static int distance1(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { sum += Math.abs(p1[i] - p2[i]); } return sum; } public static double distance(double[] p1, double[] p2) { double sum = 0;"
      },
      {
        "txt": "final double dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); } public static double distance(int[] p1, int[] p2) { <extra_id_0> for (int i = 0; i < p1.length; i++) { final int dp = p1[i] - p2[i]; sum += dp * dp; } return Math.sqrt(sum); }"
      },
      {
        "txt": "return Math.sqrt(sum); } public static double distanceInf(double[] p1, double[] p2) { double max = 0; for (int i = 0; i < p1.length; i++) { max = Math.max(max, Math.abs(p1[i] - p2[i])); } return max; } public static int distanceInf(int[] p1, int[] p2) {"
      },
      {
        "txt": "int max = 0; for (int i = 0; i < p1.length; i++) { max = Math.max(max, Math.abs(p1[i] - p2[i])); } return max; }"
      }
    ]
  },
  {
    "id": 2677,
    "file_path": "src/main/java/org/apache/commons/math/util/MathUtils.java",
    "start-bug-line": 1626,
    "end-bug-line": 1626,
    "bug": "final int dp = p1[i] - p2[i];",
    "fix": "final double dp = p1[i] - p2[i];",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.util; import java.math.BigDecimal; import java.math.BigInteger; import java.util.Arrays; import org.apache.commons.math.MathRuntimeException; public final class MathUtils { public static final double EPSILON = 0x1.0p-53; public static final double SAFE_MIN = 0x1.0p-1022;"
      },
      {
        "txt": "public static final double TWO_PI = 2 * Math.PI; private static final byte NB = (byte)-1; private static final short NS = (short)-1; private static final byte PB = (byte)1; private static final short PS = (short)1; private static final byte ZB = (byte)0; private static final short ZS = (short)0; private static final int NAN_GAP = 4 * 1024 * 1024; private static final long SGN_MASK = 0x8000000000000000L; private static final long[] FACTORIALS = new long[] {"
      },
      {
        "txt": "1l, 1l, 2l, 6l, 24l, 120l, 720l, 5040l, 40320l, 362880l, 3628800l, 39916800l, 479001600l, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l }; private MathUtils() { super(); }"
      },
      {
        "txt": "public static int addAndCheck(int x, int y) { long s = (long)x + (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: add\"); } return (int)s; } public static long addAndCheck(long a, long b) { return addAndCheck(a, b, \"overflow: add\"); }"
      },
      {
        "txt": "private static long addAndCheck(long a, long b, String msg) { long ret; if (a > b) { ret = addAndCheck(b, a, msg); } else { if (a < 0) { if (b < 0) { if (Long.MIN_VALUE - b <= a) { ret = a + b; } else {"
      },
      {
        "txt": "throw new ArithmeticException(msg); } } else { ret = a + b; } } else { if (a <= Long.MAX_VALUE - b) { ret = a + b; } else { throw new ArithmeticException(msg);"
      },
      {
        "txt": "} } } return ret; } public static long binomialCoefficient(final int n, final int k) { checkBinomial(n, k); if ((n == k) || (k == 0)) { return 1; }"
      },
      {
        "txt": "if ((k == 1) || (k == n - 1)) { return n; } if (k > n / 2) return binomialCoefficient(n, n - k); long result = 1; if (n <= 61) { int i = n - k + 1; for (int j = 1; j <= k; j++) { result = result * i / j;"
      },
      {
        "txt": "i++; } } else if (n <= 66) { int i = n - k + 1; for (int j = 1; j <= k; j++) { final long d = gcd(i, j); result = (result / (j / d)) * (i / d); i++; } } else {"
      },
      {
        "txt": "int i = n - k + 1; for (int j = 1; j <= k; j++) { final long d = gcd(i, j); result = mulAndCheck(result / (j / d), i / d); i++; } } return result; } public static double binomialCoefficientDouble(final int n, final int k) {"
      },
      {
        "txt": "checkBinomial(n, k); if ((n == k) || (k == 0)) { return 1d; } if ((k == 1) || (k == n - 1)) { return n; } if (k > n/2) { return binomialCoefficientDouble(n, n - k); }"
      },
      {
        "txt": "if (n < 67) { return binomialCoefficient(n,k); } double result = 1d; for (int i = 1; i <= k; i++) { result *= (double)(n - k + i) / (double)i; } return Math.floor(result + 0.5); } public static double binomialCoefficientLog(final int n, final int k) {"
      },
      {
        "txt": "checkBinomial(n, k); if ((n == k) || (k == 0)) { return 0; } if ((k == 1) || (k == n - 1)) { return Math.log(n); } if (n < 67) { return Math.log(binomialCoefficient(n,k)); }"
      },
      {
        "txt": "if (n < 1030) { return Math.log(binomialCoefficientDouble(n, k)); } if (k > n / 2) { return binomialCoefficientLog(n, n - k); } double logSum = 0; for (int i = n - k + 1; i <= n; i++) { logSum += Math.log(i); }"
      },
      {
        "txt": "for (int i = 2; i <= k; i++) { logSum -= Math.log(i); } return logSum; } private static void checkBinomial(final int n, final int k) throws IllegalArgumentException { if (n < k) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\","
      },
      {
        "txt": "n, k); } if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k), got n = {0}\", n); } } public static int compareTo(double x, double y, double eps) { if (equals(x, y, eps)) {"
      },
      {
        "txt": "return 0; } else if (x < y) { return -1; } return 1; } public static double cosh(double x) { return (Math.exp(x) + Math.exp(-x)) / 2.0; } public static boolean equals(double x, double y) {"
      },
      {
        "txt": "return (Double.isNaN(x) && Double.isNaN(y)) || x == y; } public static boolean equals(double x, double y, double eps) { return equals(x, y) || (Math.abs(y - x) <= eps); } public static boolean equals(double x, double y, int maxUlps) { assert maxUlps > 0 && maxUlps < NAN_GAP; long xInt = Double.doubleToLongBits(x); long yInt = Double.doubleToLongBits(y); if (xInt < 0) {"
      },
      {
        "txt": "xInt = SGN_MASK - xInt; } if (yInt < 0) { yInt = SGN_MASK - yInt; } return Math.abs(xInt - yInt) <= maxUlps; } public static boolean equals(double[] x, double[] y) { if ((x == null) || (y == null)) { return !((x == null) ^ (y == null));"
      },
      {
        "txt": "} if (x.length != y.length) { return false; } for (int i = 0; i < x.length; ++i) { if (!equals(x[i], y[i])) { return false; } } return true;"
      },
      {
        "txt": "} public static long factorial(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\", n); } if (n > 20) { throw new ArithmeticException( \"factorial value is too large to fit in a long\");"
      },
      {
        "txt": "} return FACTORIALS[n]; } public static double factorialDouble(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\", n); } if (n < 21) {"
      },
      {
        "txt": "return factorial(n); } return Math.floor(Math.exp(factorialLog(n)) + 0.5); } public static double factorialLog(final int n) { if (n < 0) { throw MathRuntimeException.createIllegalArgumentException( \"must have n >= 0 for n!, got n = {0}\", n); }"
      },
      {
        "txt": "if (n < 21) { return Math.log(factorial(n)); } double logSum = 0; for (int i = 2; i <= n; i++) { logSum += Math.log(i); } return logSum; } public static int gcd(final int p, final int q) {"
      },
      {
        "txt": "int u = p; int v = q; if ((u == 0) || (v == 0)) { if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", p, q); } return Math.abs(u) + Math.abs(v); }"
      },
      {
        "txt": "if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are u /= 2; v /= 2;"
      },
      {
        "txt": "k++; // cast out twos. } if (k == 31) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", p, q); } int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */; do { while ((t & 1) == 0) { // while t is even.."
      },
      {
        "txt": "t /= 2; // cast out twos } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0); return -u * (1 << k); // gcd is u*2^k"
      },
      {
        "txt": "} public static int hash(double value) { return new Double(value).hashCode(); } public static int hash(double[] value) { return Arrays.hashCode(value); } public static byte indicator(final byte x) { return (x >= ZB) ? PB : NB; }"
      },
      {
        "txt": "public static double indicator(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x >= 0.0) ? 1.0 : -1.0; } public static float indicator(final float x) { if (Float.isNaN(x)) { return Float.NaN; }"
      },
      {
        "txt": "return (x >= 0.0F) ? 1.0F : -1.0F; } public static int indicator(final int x) { return (x >= 0) ? 1 : -1; } public static long indicator(final long x) { return (x >= 0L) ? 1L : -1L; } public static short indicator(final short x) { return (x >= ZS) ? PS : NS;"
      },
      {
        "txt": "} public static int lcm(int a, int b) { if (a==0 || b==0){ return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); if (lcm == Integer.MIN_VALUE){ throw new ArithmeticException(\"overflow: lcm is 2^31\"); } return lcm;"
      },
      {
        "txt": "} public static double log(double base, double x) { return Math.log(x)/Math.log(base); } public static int mulAndCheck(int x, int y) { long m = ((long)x) * ((long)y); if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: mul\"); } return (int)m;"
      },
      {
        "txt": "} public static long mulAndCheck(long a, long b) { long ret; String msg = \"overflow: multiply\"; if (a > b) { ret = mulAndCheck(b, a); } else { if (a < 0) { if (b < 0) { if (a >= Long.MAX_VALUE / b) {"
      },
      {
        "txt": "ret = a * b; } else { throw new ArithmeticException(msg); } } else if (b > 0) { if (Long.MIN_VALUE / b <= a) { ret = a * b; } else { throw new ArithmeticException(msg); }"
      },
      {
        "txt": "} else { ret = 0; } } else if (a > 0) { if (a <= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg); } } else {"
      },
      {
        "txt": "ret = 0; } } return ret; } public static double nextAfter(double d, double direction) { if (Double.isNaN(d) || Double.isInfinite(d)) { return d; } else if (d == 0) { return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;"
      },
      {
        "txt": "} long bits = Double.doubleToLongBits(d); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) { if (mantissa == 0x000fffffffffffffL) { return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L)); } else {"
      },
      {
        "txt": "return Double.longBitsToDouble(sign | exponent | (mantissa + 1)); } } else { if (mantissa == 0L) { return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL); } else { return Double.longBitsToDouble(sign |"
      },
      {
        "txt": "exponent | (mantissa - 1)); } } } public static double scalb(final double d, final int scaleFactor) { if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) { return d; } final long bits = Double.doubleToLongBits(d); final long exponent = bits & 0x7ff0000000000000L;"
      },
      {
        "txt": "final long rest = bits & 0x800fffffffffffffL; final long newBits = rest | (exponent + (((long) scaleFactor) << 52)); return Double.longBitsToDouble(newBits); } public static double normalizeAngle(double a, double center) { return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI); } public static double[] normalizeArray(double[] values, double normalizedSum) throws ArithmeticException, IllegalArgumentException { if (Double.isInfinite(normalizedSum)) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException( \"Cannot normalize to an infinite value\"); } if (Double.isNaN(normalizedSum)) { throw MathRuntimeException.createIllegalArgumentException( \"Cannot normalize to NaN\"); } double sum = 0d; final int len = values.length; double[] out = new double[len];"
      },
      {
        "txt": "for (int i = 0; i < len; i++) { if (Double.isInfinite(values[i])) { throw MathRuntimeException.createArithmeticException( \"Array contains an infinite element, {0} at index {1}\", values[i], i); } if (!Double.isNaN(values[i])) { sum += values[i]; } } if (sum == 0) {"
      },
      {
        "txt": "throw MathRuntimeException.createArithmeticException( \"Array sums to zero\"); } for (int i = 0; i < len; i++) { if (Double.isNaN(values[i])) { out[i] = Double.NaN; } else { out[i] = values[i] * normalizedSum / sum; } }"
      },
      {
        "txt": "return out; } public static double round(double x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static double round(double x, int scale, int roundingMethod) { try { return (new BigDecimal (Double.toString(x)) .setScale(scale, roundingMethod))"
      },
      {
        "txt": ".doubleValue(); } catch (NumberFormatException ex) { if (Double.isInfinite(x)) { return x; } else { return Double.NaN; } } } public static float round(float x, int scale) {"
      },
      {
        "txt": "return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static float round(float x, int scale, int roundingMethod) { float sign = indicator(x); float factor = (float)Math.pow(10.0f, scale) * sign; return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor; } private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { switch (roundingMethod) {"
      },
      {
        "txt": "case BigDecimal.ROUND_CEILING : if (sign == -1) { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } else { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } break; case BigDecimal.ROUND_DOWN : unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); break;"
      },
      {
        "txt": "case BigDecimal.ROUND_FLOOR : if (sign == -1) { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } else { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } break; case BigDecimal.ROUND_HALF_DOWN : { unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled);"
      },
      {
        "txt": "if (fraction > 0.5) { unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_HALF_EVEN : { double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) {"
      },
      {
        "txt": "unscaled = Math.ceil(unscaled); } else if (fraction < 0.5) { unscaled = Math.floor(unscaled); } else { if (Math.floor(unscaled) / 2.0 == Math.floor(Math .floor(unscaled) / 2.0)) { // even unscaled = Math.floor(unscaled); } else { // odd unscaled = Math.ceil(unscaled); }"
      },
      {
        "txt": "} break; } case BigDecimal.ROUND_HALF_UP : { unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction >= 0.5) { unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled);"
      },
      {
        "txt": "} break; } case BigDecimal.ROUND_UNNECESSARY : if (unscaled != Math.floor(unscaled)) { throw new ArithmeticException(\"Inexact result from rounding\"); } break; case BigDecimal.ROUND_UP : unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));"
      },
      {
        "txt": "break; default : throw MathRuntimeException.createIllegalArgumentException( \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" + \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\", roundingMethod, \"ROUND_CEILING\", BigDecimal.ROUND_CEILING, \"ROUND_DOWN\", BigDecimal.ROUND_DOWN, \"ROUND_FLOOR\", BigDecimal.ROUND_FLOOR, \"ROUND_HALF_DOWN\", BigDecimal.ROUND_HALF_DOWN,"
      },
      {
        "txt": "\"ROUND_HALF_EVEN\", BigDecimal.ROUND_HALF_EVEN, \"ROUND_HALF_UP\", BigDecimal.ROUND_HALF_UP, \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY, \"ROUND_UP\", BigDecimal.ROUND_UP); } return unscaled; } public static byte sign(final byte x) { return (x == ZB) ? ZB : (x > ZB) ? PB : NB; }"
      },
      {
        "txt": "public static double sign(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0; } public static float sign(final float x) { if (Float.isNaN(x)) { return Float.NaN; }"
      },
      {
        "txt": "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F; } public static int sign(final int x) { return (x == 0) ? 0 : (x > 0) ? 1 : -1; } public static long sign(final long x) { return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L; } public static short sign(final short x) { return (x == ZS) ? ZS : (x > ZS) ? PS : NS;"
      },
      {
        "txt": "} public static double sinh(double x) { return (Math.exp(x) - Math.exp(-x)) / 2.0; } public static int subAndCheck(int x, int y) { long s = (long)x - (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: subtract\"); } return (int)s;"
      },
      {
        "txt": "} public static long subAndCheck(long a, long b) { long ret; String msg = \"overflow: subtract\"; if (b == Long.MIN_VALUE) { if (a < 0) { ret = a - b; } else { throw new ArithmeticException(msg); }"
      },
      {
        "txt": "} else { ret = addAndCheck(a, -b, msg); } return ret; } public static int pow(final int k, int e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\","
      },
      {
        "txt": "k, e); } int result = 1; int k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1;"
      },
      {
        "txt": "} return result; } public static int pow(final int k, long e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); }"
      },
      {
        "txt": "int result = 1; int k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1; } return result;"
      },
      {
        "txt": "} public static long pow(final long k, int e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } long result = 1l; long k2p = k;"
      },
      {
        "txt": "while (e != 0) { if ((e & 0x1) != 0) { result *= k2p; } k2p *= k2p; e = e >> 1; } return result; } public static long pow(final long k, long e)"
      },
      {
        "txt": "throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } long result = 1l; long k2p = k; while (e != 0) { if ((e & 0x1) != 0) {"
      },
      {
        "txt": "result *= k2p; } k2p *= k2p; e = e >> 1; } return result; } public static BigInteger pow(final BigInteger k, int e) throws IllegalArgumentException { if (e < 0) {"
      },
      {
        "txt": "throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } return k.pow(e); } public static BigInteger pow(final BigInteger k, long e) throws IllegalArgumentException { if (e < 0) { throw MathRuntimeException.createIllegalArgumentException("
      },
      {
        "txt": "\"cannot raise an integral value to a negative power ({0}^{1})\", k, e); } BigInteger result = BigInteger.ONE; BigInteger k2p = k; while (e != 0) { if ((e & 0x1) != 0) { result = result.multiply(k2p); } k2p = k2p.multiply(k2p);"
      },
      {
        "txt": "e = e >> 1; } return result; } public static BigInteger pow(final BigInteger k, BigInteger e) throws IllegalArgumentException { if (e.compareTo(BigInteger.ZERO) < 0) { throw MathRuntimeException.createIllegalArgumentException( \"cannot raise an integral value to a negative power ({0}^{1})\", k, e);"
      },
      {
        "txt": "} BigInteger result = BigInteger.ONE; BigInteger k2p = k; while (!BigInteger.ZERO.equals(e)) { if (e.testBit(0)) { result = result.multiply(k2p); } k2p = k2p.multiply(k2p); e = e.shiftRight(1); }"
      },
      {
        "txt": "return result; } public static double distance1(double[] p1, double[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { sum += Math.abs(p1[i] - p2[i]); } return sum; } public static int distance1(int[] p1, int[] p2) {"
      },
      {
        "txt": "int sum = 0; for (int i = 0; i < p1.length; i++) { sum += Math.abs(p1[i] - p2[i]); } return sum; } public static double distance(double[] p1, double[] p2) { double sum = 0; for (int i = 0; i < p1.length; i++) { final double dp = p1[i] - p2[i];"
      },
      {
        "txt": "} return Math.sqrt(sum); } public static double distance(int[] p1, int[] p2) { int sum = 0; for (int i = 0; i < p1.length; i++) { <extra_id_0> sum += dp * dp; } return Math.sqrt(sum); } public static double distanceInf(double[] p1, double[] p2) { double max = 0;"
      },
      {
        "txt": "public static double distanceInf(double[] p1, double[] p2) { double max = 0; for (int i = 0; i < p1.length; i++) { max = Math.max(max, Math.abs(p1[i] - p2[i])); } return max; } public static int distanceInf(int[] p1, int[] p2) { int max = 0; for (int i = 0; i < p1.length; i++) {"
      },
      {
        "txt": "max = Math.max(max, Math.abs(p1[i] - p2[i])); } return max; }"
      }
    ]
  }
]
[
  {
    "id": 2483,
    "file_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "",
    "fix": "import java.io.Serializable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.random; <extra_id_0> import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.util.FastMath; public abstract class BitsStreamGenerator implements RandomGenerator { private double nextGaussian; public BitsStreamGenerator() {"
      },
      {
        "txt": "private double nextGaussian; public BitsStreamGenerator() { nextGaussian = Double.NaN; } public abstract void setSeed(int seed); public abstract void setSeed(int[] seed); public abstract void setSeed(long seed); protected abstract int next(int bits); public boolean nextBoolean() { return next(1) != 0;"
      },
      {
        "txt": "} public void nextBytes(byte[] bytes) { int i = 0; final int iEnd = bytes.length - 3; while (i < iEnd) { final int random = next(32); bytes[i] = (byte) (random & 0xff); bytes[i + 1] = (byte) ((random >> 8) & 0xff); bytes[i + 2] = (byte) ((random >> 16) & 0xff); bytes[i + 3] = (byte) ((random >> 24) & 0xff);"
      },
      {
        "txt": "i += 4; } int random = next(32); while (i < bytes.length) { bytes[i++] = (byte) (random & 0xff); random = random >> 8; } } public double nextDouble() { final long high = ((long) next(26)) << 26;"
      },
      {
        "txt": "final int low = next(26); return (high | low) * 0x1.0p-52d; } public float nextFloat() { return next(23) * 0x1.0p-23f; } public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) { final double x = nextDouble();"
      },
      {
        "txt": "final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r = FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha); nextGaussian = r * FastMath.sin(alpha); } else { random = nextGaussian; nextGaussian = Double.NaN; } return random;"
      },
      {
        "txt": "} public int nextInt() { return next(32); } public int nextInt(int n) throws IllegalArgumentException { if (n > 0) { if ((n & -n) == n) { return (int) ((n * (long) next(31)) >> 31); } int bits;"
      },
      {
        "txt": "int val; do { bits = next(31); val = bits % n; } while (bits - val + (n - 1) < 0); return val; } throw new NotStrictlyPositiveException(n); } public long nextLong() {"
      },
      {
        "txt": "final long high = ((long) next(32)) << 32; final long low = ((long) next(32)) & 0xffffffffL; return high | low; } public void clear() { nextGaussian = Double.NaN; }"
      }
    ]
  },
  {
    "id": 2484,
    "file_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
    "start-bug-line": 29,
    "end-bug-line": 29,
    "bug": "implements RandomGenerator {",
    "fix": "implements RandomGenerator, Serializable {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.random; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.util.FastMath; public abstract class BitsStreamGenerator <extra_id_0> private double nextGaussian; public BitsStreamGenerator() { nextGaussian = Double.NaN; } public abstract void setSeed(int seed); public abstract void setSeed(int[] seed);"
      },
      {
        "txt": "public abstract void setSeed(int seed); public abstract void setSeed(int[] seed); public abstract void setSeed(long seed); protected abstract int next(int bits); public boolean nextBoolean() { return next(1) != 0; } public void nextBytes(byte[] bytes) { int i = 0; final int iEnd = bytes.length - 3;"
      },
      {
        "txt": "while (i < iEnd) { final int random = next(32); bytes[i] = (byte) (random & 0xff); bytes[i + 1] = (byte) ((random >> 8) & 0xff); bytes[i + 2] = (byte) ((random >> 16) & 0xff); bytes[i + 3] = (byte) ((random >> 24) & 0xff); i += 4; } int random = next(32); while (i < bytes.length) {"
      },
      {
        "txt": "bytes[i++] = (byte) (random & 0xff); random = random >> 8; } } public double nextDouble() { final long high = ((long) next(26)) << 26; final int low = next(26); return (high | low) * 0x1.0p-52d; } public float nextFloat() {"
      },
      {
        "txt": "return next(23) * 0x1.0p-23f; } public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) { final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r = FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha);"
      },
      {
        "txt": "nextGaussian = r * FastMath.sin(alpha); } else { random = nextGaussian; nextGaussian = Double.NaN; } return random; } public int nextInt() { return next(32); }"
      },
      {
        "txt": "public int nextInt(int n) throws IllegalArgumentException { if (n > 0) { if ((n & -n) == n) { return (int) ((n * (long) next(31)) >> 31); } int bits; int val; do { bits = next(31); val = bits % n;"
      },
      {
        "txt": "} while (bits - val + (n - 1) < 0); return val; } throw new NotStrictlyPositiveException(n); } public long nextLong() { final long high = ((long) next(32)) << 32; final long low = ((long) next(32)) & 0xffffffffL; return high | low; }"
      },
      {
        "txt": "public void clear() { nextGaussian = Double.NaN; }"
      }
    ]
  },
  {
    "id": 2485,
    "file_path": "src/main/java/org/apache/commons/math3/random/BitsStreamGenerator.java",
    "start-bug-line": 31,
    "end-bug-line": 31,
    "bug": "",
    "fix": "private static final long serialVersionUID = 20130104L;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.random; import org.apache.commons.math3.exception.NotStrictlyPositiveException; import org.apache.commons.math3.util.FastMath; public abstract class BitsStreamGenerator implements RandomGenerator { <extra_id_0> private double nextGaussian; public BitsStreamGenerator() { nextGaussian = Double.NaN; } public abstract void setSeed(int seed); public abstract void setSeed(int[] seed);"
      },
      {
        "txt": "public abstract void setSeed(int seed); public abstract void setSeed(int[] seed); public abstract void setSeed(long seed); protected abstract int next(int bits); public boolean nextBoolean() { return next(1) != 0; } public void nextBytes(byte[] bytes) { int i = 0; final int iEnd = bytes.length - 3;"
      },
      {
        "txt": "while (i < iEnd) { final int random = next(32); bytes[i] = (byte) (random & 0xff); bytes[i + 1] = (byte) ((random >> 8) & 0xff); bytes[i + 2] = (byte) ((random >> 16) & 0xff); bytes[i + 3] = (byte) ((random >> 24) & 0xff); i += 4; } int random = next(32); while (i < bytes.length) {"
      },
      {
        "txt": "bytes[i++] = (byte) (random & 0xff); random = random >> 8; } } public double nextDouble() { final long high = ((long) next(26)) << 26; final int low = next(26); return (high | low) * 0x1.0p-52d; } public float nextFloat() {"
      },
      {
        "txt": "return next(23) * 0x1.0p-23f; } public double nextGaussian() { final double random; if (Double.isNaN(nextGaussian)) { final double x = nextDouble(); final double y = nextDouble(); final double alpha = 2 * FastMath.PI * x; final double r = FastMath.sqrt(-2 * FastMath.log(y)); random = r * FastMath.cos(alpha);"
      },
      {
        "txt": "nextGaussian = r * FastMath.sin(alpha); } else { random = nextGaussian; nextGaussian = Double.NaN; } return random; } public int nextInt() { return next(32); }"
      },
      {
        "txt": "public int nextInt(int n) throws IllegalArgumentException { if (n > 0) { if ((n & -n) == n) { return (int) ((n * (long) next(31)) >> 31); } int bits; int val; do { bits = next(31); val = bits % n;"
      },
      {
        "txt": "} while (bits - val + (n - 1) < 0); return val; } throw new NotStrictlyPositiveException(n); } public long nextLong() { final long high = ((long) next(32)) << 32; final long low = ((long) next(32)) & 0xffffffffL; return high | low; }"
      },
      {
        "txt": "public void clear() { nextGaussian = Double.NaN; }"
      }
    ]
  }
]
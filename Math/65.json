[
  {
    "id": 2623,
    "file_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
    "start-bug-line": 240,
    "end-bug-line": 245,
    "bug": "double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i]; } return Math.sqrt(criterion / rows);",
    "fix": "return Math.sqrt(getChiSquare() / rows);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.general; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxEvaluationsExceededException;"
      },
      {
        "txt": "import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction; import org.apache.commons.math.analysis.MultivariateMatrixFunction; import org.apache.commons.math.exception.LocalizedFormats; import org.apache.commons.math.linear.InvalidMatrixException; import org.apache.commons.math.linear.LUDecompositionImpl; import org.apache.commons.math.linear.MatrixUtils; import org.apache.commons.math.linear.RealMatrix; import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.SimpleVectorialValueChecker;"
      },
      {
        "txt": "import org.apache.commons.math.optimization.VectorialConvergenceChecker; import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer; import org.apache.commons.math.optimization.VectorialPointValuePair; public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer { public static final int DEFAULT_MAX_ITERATIONS = 100; protected VectorialConvergenceChecker checker; protected double[][] jacobian; protected int cols; protected int rows; protected double[] targetValues;"
      },
      {
        "txt": "protected double[] residualsWeights; protected double[] point; protected double[] objective; protected double[] residuals; protected double cost; private int maxIterations; private int iterations; private int maxEvaluations; private int objectiveEvaluations; private int jacobianEvaluations;"
      },
      {
        "txt": "private DifferentiableMultivariateVectorialFunction function; private MultivariateMatrixFunction jF; protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } public void setMaxIterations(int maxIterations) { this.maxIterations = maxIterations; }"
      },
      {
        "txt": "public int getMaxIterations() { return maxIterations; } public int getIterations() { return iterations; } public void setMaxEvaluations(int maxEvaluations) { this.maxEvaluations = maxEvaluations; } public int getMaxEvaluations() {"
      },
      {
        "txt": "return maxEvaluations; } public int getEvaluations() { return objectiveEvaluations; } public int getJacobianEvaluations() { return jacobianEvaluations; } public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { this.checker = convergenceChecker;"
      },
      {
        "txt": "} public VectorialConvergenceChecker getConvergenceChecker() { return checker; } protected void incrementIterationsCounter() throws OptimizationException { if (++iterations > maxIterations) { throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } }"
      },
      {
        "txt": "protected void updateJacobian() throws FunctionEvaluationException { ++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]);"
      },
      {
        "txt": "for (int j = 0; j < cols; ++j) { ji[j] *= factor; } } } protected void updateResidualsAndCost() throws FunctionEvaluationException { if (++objectiveEvaluations > maxEvaluations) { throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point);"
      },
      {
        "txt": "} objective = function.value(point); if (objective.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, objective.length, rows); } cost = 0; int index = 0; for (int i = 0; i < rows; i++) { final double residual = targetValues[i] - objective[i];"
      },
      {
        "txt": "cost += residualsWeights[i] * residual * residual; index += cols; } cost = Math.sqrt(cost); } public double getRMS() { <extra_id_0> } public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i];"
      },
      {
        "txt": "final double residual = residuals[i]; chiSquare += residual * residual / residualsWeights[i]; } return chiSquare; } public double[][] getCovariances() throws FunctionEvaluationException, OptimizationException { updateJacobian(); double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) {"
      },
      {
        "txt": "for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum; jTj[j][i] = sum; } } try {"
      },
      {
        "txt": "RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); } } public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) {"
      },
      {
        "txt": "throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols)); double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; }"
      },
      {
        "txt": "return errors; } public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { if (target.length != weights.length) { throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length); }"
      },
      {
        "txt": "iterations = 0; objectiveEvaluations = 0; jacobianEvaluations = 0; function = f; jF = f.jacobian(); targetValues = target.clone(); residualsWeights = weights.clone(); this.point = startPoint.clone(); this.residuals = new double[target.length]; rows = target.length;"
      },
      {
        "txt": "cols = point.length; jacobian = new double[rows][cols]; cost = Double.POSITIVE_INFINITY; return doOptimize(); } protected abstract VectorialPointValuePair doOptimize() throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;"
      }
    ]
  },
  {
    "id": 2624,
    "file_path": "src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java",
    "start-bug-line": 258,
    "end-bug-line": 258,
    "bug": "chiSquare += residual * residual / residualsWeights[i];",
    "fix": "chiSquare += residual * residual * residualsWeights[i];",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.general; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxEvaluationsExceededException; import org.apache.commons.math.MaxIterationsExceededException;"
      },
      {
        "txt": "import org.apache.commons.math.analysis.DifferentiableMultivariateVectorialFunction; import org.apache.commons.math.analysis.MultivariateMatrixFunction; import org.apache.commons.math.exception.LocalizedFormats; import org.apache.commons.math.linear.InvalidMatrixException; import org.apache.commons.math.linear.LUDecompositionImpl; import org.apache.commons.math.linear.MatrixUtils; import org.apache.commons.math.linear.RealMatrix; import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.SimpleVectorialValueChecker; import org.apache.commons.math.optimization.VectorialConvergenceChecker;"
      },
      {
        "txt": "import org.apache.commons.math.optimization.DifferentiableMultivariateVectorialOptimizer; import org.apache.commons.math.optimization.VectorialPointValuePair; public abstract class AbstractLeastSquaresOptimizer implements DifferentiableMultivariateVectorialOptimizer { public static final int DEFAULT_MAX_ITERATIONS = 100; protected VectorialConvergenceChecker checker; protected double[][] jacobian; protected int cols; protected int rows; protected double[] targetValues; protected double[] residualsWeights;"
      },
      {
        "txt": "protected double[] point; protected double[] objective; protected double[] residuals; protected double cost; private int maxIterations; private int iterations; private int maxEvaluations; private int objectiveEvaluations; private int jacobianEvaluations; private DifferentiableMultivariateVectorialFunction function;"
      },
      {
        "txt": "private MultivariateMatrixFunction jF; protected AbstractLeastSquaresOptimizer() { setConvergenceChecker(new SimpleVectorialValueChecker()); setMaxIterations(DEFAULT_MAX_ITERATIONS); setMaxEvaluations(Integer.MAX_VALUE); } public void setMaxIterations(int maxIterations) { this.maxIterations = maxIterations; } public int getMaxIterations() {"
      },
      {
        "txt": "return maxIterations; } public int getIterations() { return iterations; } public void setMaxEvaluations(int maxEvaluations) { this.maxEvaluations = maxEvaluations; } public int getMaxEvaluations() { return maxEvaluations;"
      },
      {
        "txt": "} public int getEvaluations() { return objectiveEvaluations; } public int getJacobianEvaluations() { return jacobianEvaluations; } public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker) { this.checker = convergenceChecker; }"
      },
      {
        "txt": "public VectorialConvergenceChecker getConvergenceChecker() { return checker; } protected void incrementIterationsCounter() throws OptimizationException { if (++iterations > maxIterations) { throw new OptimizationException(new MaxIterationsExceededException(maxIterations)); } } protected void updateJacobian() throws FunctionEvaluationException {"
      },
      {
        "txt": "++jacobianEvaluations; jacobian = jF.value(point); if (jacobian.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, jacobian.length, rows); } for (int i = 0; i < rows; i++) { final double[] ji = jacobian[i]; final double factor = -Math.sqrt(residualsWeights[i]); for (int j = 0; j < cols; ++j) {"
      },
      {
        "txt": "ji[j] *= factor; } } } protected void updateResidualsAndCost() throws FunctionEvaluationException { if (++objectiveEvaluations > maxEvaluations) { throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations), point); }"
      },
      {
        "txt": "objective = function.value(point); if (objective.length != rows) { throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, objective.length, rows); } cost = 0; int index = 0; for (int i = 0; i < rows; i++) { final double residual = targetValues[i] - objective[i]; residuals[i] = residual;"
      },
      {
        "txt": "cost += residualsWeights[i] * residual * residual; index += cols; } cost = Math.sqrt(cost); } public double getRMS() { double criterion = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; criterion += residual * residual * residualsWeights[i];"
      },
      {
        "txt": "return Math.sqrt(criterion / rows); } public double getChiSquare() { double chiSquare = 0; for (int i = 0; i < rows; ++i) { final double residual = residuals[i]; <extra_id_0> } return chiSquare; } public double[][] getCovariances() throws FunctionEvaluationException, OptimizationException { updateJacobian();"
      },
      {
        "txt": "throws FunctionEvaluationException, OptimizationException { updateJacobian(); double[][] jTj = new double[cols][cols]; for (int i = 0; i < cols; ++i) { for (int j = i; j < cols; ++j) { double sum = 0; for (int k = 0; k < rows; ++k) { sum += jacobian[k][i] * jacobian[k][j]; } jTj[i][j] = sum;"
      },
      {
        "txt": "jTj[j][i] = sum; } } try { RealMatrix inverse = new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse(); return inverse.getData(); } catch (InvalidMatrixException ime) { throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM); }"
      },
      {
        "txt": "} public double[] guessParametersErrors() throws FunctionEvaluationException, OptimizationException { if (rows <= cols) { throw new OptimizationException( LocalizedFormats.NO_DEGREES_OF_FREEDOM, rows, cols); } double[] errors = new double[cols]; final double c = Math.sqrt(getChiSquare() / (rows - cols));"
      },
      {
        "txt": "double[][] covar = getCovariances(); for (int i = 0; i < errors.length; ++i) { errors[i] = Math.sqrt(covar[i][i]) * c; } return errors; } public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f, final double[] target, final double[] weights, final double[] startPoint) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException {"
      },
      {
        "txt": "if (target.length != weights.length) { throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE, target.length, weights.length); } iterations = 0; objectiveEvaluations = 0; jacobianEvaluations = 0; function = f; jF = f.jacobian(); targetValues = target.clone();"
      },
      {
        "txt": "residualsWeights = weights.clone(); this.point = startPoint.clone(); this.residuals = new double[target.length]; rows = target.length; cols = point.length; jacobian = new double[rows][cols]; cost = Double.POSITIVE_INFINITY; return doOptimize(); } protected abstract VectorialPointValuePair doOptimize()"
      }
    ]
  }
]
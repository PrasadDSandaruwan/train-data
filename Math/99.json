[
  {
    "id": 2731,
    "file_path": "src/java/org/apache/commons/math/util/MathUtils.java",
    "start-bug-line": 543,
    "end-bug-line": 543,
    "bug": "",
    "fix": "if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE)) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", new Object[] { p, q }); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.util; import java.math.BigDecimal; import java.util.Arrays; import org.apache.commons.math.MathException; import org.apache.commons.math.MathRuntimeException;"
      },
      {
        "txt": "public final class MathUtils { public static final double EPSILON = 0x1.0p-53; public static final double SAFE_MIN = 0x1.0p-1022; private static final byte NB = (byte)-1; private static final short NS = (short)-1; private static final byte PB = (byte)1; private static final short PS = (short)1; private static final byte ZB = (byte)0; private static final short ZS = (short)0; private static final double TWO_PI = 2 * Math.PI;"
      },
      {
        "txt": "private MathUtils() { super(); } public static int addAndCheck(int x, int y) { long s = (long)x + (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: add\"); } return (int)s; }"
      },
      {
        "txt": "public static long addAndCheck(long a, long b) { return addAndCheck(a, b, \"overflow: add\"); } private static long addAndCheck(long a, long b, String msg) { long ret; if (a > b) { ret = addAndCheck(b, a, msg); } else { if (a < 0) { if (b < 0) {"
      },
      {
        "txt": "if (Long.MIN_VALUE - b <= a) { ret = a + b; } else { throw new ArithmeticException(msg); } } else { ret = a + b; } } else { if (a <= Long.MAX_VALUE - b) {"
      },
      {
        "txt": "ret = a + b; } else { throw new ArithmeticException(msg); } } } return ret; } public static long binomialCoefficient(final int n, final int k) { if (n < k) {"
      },
      {
        "txt": "throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); } if (n < 0) { throw new IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\"); } if ((n == k) || (k == 0)) { return 1; }"
      },
      {
        "txt": "if ((k == 1) || (k == n - 1)) { return n; } if (k > n / 2) return binomialCoefficient(n, n - k); long result = 1; if (n <= 61) { for (int j = 1, i = n - k + 1; j <= k; i++, j++) { result = result * i / j; }"
      },
      {
        "txt": "} else if (n <= 66) { for (int j = 1, i = n - k + 1; j <= k; i++, j++) { long d = gcd(i, j); result = (result / (j / d)) * (i / d); } } else { for (int j = 1, i = n - k + 1; j <= k; i++, j++) { long d = gcd(i, j); result = mulAndCheck((result / (j / d)), (i / d)); }"
      },
      {
        "txt": "} return result; } public static double binomialCoefficientDouble(final int n, final int k) { if (n < k) { throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); } if (n < 0) { throw new IllegalArgumentException("
      },
      {
        "txt": "\"must have n >= 0 for binomial coefficient (n,k)\"); } if ((n == k) || (k == 0)) { return 1d; } if ((k == 1) || (k == n - 1)) { return n; } if (k > n/2) { return binomialCoefficientDouble(n, n - k);"
      },
      {
        "txt": "} if (n < 67) { return binomialCoefficient(n,k); } double result = 1d; for (int i = 1; i <= k; i++) { result *= (double)(n - k + i) / (double)i; } return Math.floor(result + 0.5); }"
      },
      {
        "txt": "public static double binomialCoefficientLog(final int n, final int k) { if (n < k) { throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); } if (n < 0) { throw new IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\"); } if ((n == k) || (k == 0)) {"
      },
      {
        "txt": "return 0; } if ((k == 1) || (k == n - 1)) { return Math.log((double) n); } if (n < 67) { return Math.log(binomialCoefficient(n,k)); } if (n < 1030) { return Math.log(binomialCoefficientDouble(n, k));"
      },
      {
        "txt": "} if (k > n / 2) { return binomialCoefficientLog(n, n - k); } double logSum = 0; for (int i = n - k + 1; i <= n; i++) { logSum += Math.log((double) i); } for (int i = 2; i <= k; i++) { logSum -= Math.log((double) i);"
      },
      {
        "txt": "} return logSum; } public static double cosh(double x) { return (Math.exp(x) + Math.exp(-x)) / 2.0; } public static boolean equals(double x, double y) { return ((Double.isNaN(x) && Double.isNaN(y)) || x == y); } public static boolean equals(double x, double y, double eps) {"
      },
      {
        "txt": "return x == y || (x < y && (x + eps) >= y) || (x > y && x <= (y + eps)); } public static boolean equals(double[] x, double[] y) { if ((x == null) || (y == null)) { return !((x == null) ^ (y == null)); } if (x.length != y.length) { return false; } for (int i = 0; i < x.length; ++i) {"
      },
      {
        "txt": "if (!equals(x[i], y[i])) { return false; } } return true; } private static final long[] factorials = new long[] {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l,"
      },
      {
        "txt": "2432902008176640000l}; public static long factorial(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n >= 0 for n!\"); } if (n > 20) { throw new ArithmeticException( \"factorial value is too large to fit in a long\"); } return factorials[n];"
      },
      {
        "txt": "} public static double factorialDouble(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n >= 0 for n!\"); } if (n < 21) { return factorial(n); } return Math.floor(Math.exp(factorialLog(n)) + 0.5); }"
      },
      {
        "txt": "public static double factorialLog(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n > 0 for n!\"); } if (n < 21) { return Math.log(factorial(n)); } double logSum = 0; for (int i = 2; i <= n; i++) { logSum += Math.log((double)i);"
      },
      {
        "txt": "return logSum; } public static int gcd(final int p, final int q) { int u = p; int v = q; if ((u == 0) || (v == 0)) { <extra_id_0> } if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v;"
      },
      {
        "txt": "if (v > 0) { v = -v; } // make v negative int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are u /= 2; v /= 2; k++; // cast out twos. } if (k == 31) {"
      },
      {
        "txt": "throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", new Object[] { p, q }); } int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */; do { while ((t & 1) == 0) { // while t is even.. t /= 2; // cast out twos } if (t > 0) {"
      },
      {
        "txt": "u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0); return -u * (1 << k); // gcd is u*2^k } public static int hash(double value) { return new Double(value).hashCode();"
      },
      {
        "txt": "} public static int hash(double[] value) { return Arrays.hashCode(value); } public static byte indicator(final byte x) { return (x >= ZB) ? PB : NB; } public static double indicator(final double x) { if (Double.isNaN(x)) { return Double.NaN;"
      },
      {
        "txt": "} return (x >= 0.0) ? 1.0 : -1.0; } public static float indicator(final float x) { if (Float.isNaN(x)) { return Float.NaN; } return (x >= 0.0F) ? 1.0F : -1.0F; } public static int indicator(final int x) {"
      },
      {
        "txt": "return (x >= 0) ? 1 : -1; } public static long indicator(final long x) { return (x >= 0L) ? 1L : -1L; } public static short indicator(final short x) { return (x >= ZS) ? PS : NS; } public static int lcm(int a, int b) { if (a==0 || b==0){"
      },
      {
        "txt": "return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); return lcm; } public static double log(double base, double x) { return Math.log(x)/Math.log(base); } public static int mulAndCheck(int x, int y) { long m = ((long)x) * ((long)y);"
      },
      {
        "txt": "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: mul\"); } return (int)m; } public static long mulAndCheck(long a, long b) { long ret; String msg = \"overflow: multiply\"; if (a > b) { ret = mulAndCheck(b, a);"
      },
      {
        "txt": "} else { if (a < 0) { if (b < 0) { if (a >= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg); } } else if (b > 0) { if (Long.MIN_VALUE / b <= a) {"
      },
      {
        "txt": "ret = a * b; } else { throw new ArithmeticException(msg); } } else { ret = 0; } } else if (a > 0) { if (a <= Long.MAX_VALUE / b) { ret = a * b;"
      },
      {
        "txt": "} else { throw new ArithmeticException(msg); } } else { ret = 0; } } return ret; } public static double nextAfter(double d, double direction) {"
      },
      {
        "txt": "if (Double.isNaN(d) || Double.isInfinite(d)) { return d; } else if (d == 0) { return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE; } long bits = Double.doubleToLongBits(d); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L; long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) {"
      },
      {
        "txt": "if (mantissa == 0x000fffffffffffffL) { return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L)); } else { return Double.longBitsToDouble(sign | exponent | (mantissa + 1)); } } else { if (mantissa == 0L) { return Double.longBitsToDouble(sign |"
      },
      {
        "txt": "(exponent - 0x0010000000000000L) | 0x000fffffffffffffL); } else { return Double.longBitsToDouble(sign | exponent | (mantissa - 1)); } } } public static double scalb(final double d, final int scaleFactor) { if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) {"
      },
      {
        "txt": "return d; } final long bits = Double.doubleToLongBits(d); final long exponent = bits & 0x7ff0000000000000L; final long rest = bits & 0x800fffffffffffffL; final long newBits = rest | (exponent + (((long) scaleFactor) << 52)); return Double.longBitsToDouble(newBits); } public static double normalizeAngle(double a, double center) { return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);"
      },
      {
        "txt": "} public static double round(double x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static double round(double x, int scale, int roundingMethod) { try { return (new BigDecimal (Double.toString(x)) .setScale(scale, roundingMethod)) .doubleValue();"
      },
      {
        "txt": "} catch (NumberFormatException ex) { if (Double.isInfinite(x)) { return x; } else { return Double.NaN; } } } public static float round(float x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP);"
      },
      {
        "txt": "} public static float round(float x, int scale, int roundingMethod) { float sign = indicator(x); float factor = (float)Math.pow(10.0f, scale) * sign; return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor; } private static double roundUnscaled(double unscaled, double sign, int roundingMethod) { switch (roundingMethod) { case BigDecimal.ROUND_CEILING :"
      },
      {
        "txt": "if (sign == -1) { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } else { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } break; case BigDecimal.ROUND_DOWN : unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); break; case BigDecimal.ROUND_FLOOR :"
      },
      {
        "txt": "if (sign == -1) { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } else { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } break; case BigDecimal.ROUND_HALF_DOWN : { unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) {"
      },
      {
        "txt": "unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_HALF_EVEN : { double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) { unscaled = Math.ceil(unscaled);"
      },
      {
        "txt": "} else if (fraction < 0.5) { unscaled = Math.floor(unscaled); } else { if (Math.floor(unscaled) / 2.0 == Math.floor(Math .floor(unscaled) / 2.0)) { // even unscaled = Math.floor(unscaled); } else { // odd unscaled = Math.ceil(unscaled); } }"
      },
      {
        "txt": "break; } case BigDecimal.ROUND_HALF_UP : { unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction >= 0.5) { unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled); }"
      },
      {
        "txt": "break; } case BigDecimal.ROUND_UNNECESSARY : if (unscaled != Math.floor(unscaled)) { throw new ArithmeticException(\"Inexact result from rounding\"); } break; case BigDecimal.ROUND_UP : unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); break;"
      },
      {
        "txt": "default : throw new IllegalArgumentException(\"Invalid rounding method.\"); } return unscaled; } public static byte sign(final byte x) { return (x == ZB) ? ZB : (x > ZB) ? PB : NB; } public static double sign(final double x) { if (Double.isNaN(x)) {"
      },
      {
        "txt": "return Double.NaN; } return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0; } public static float sign(final float x) { if (Float.isNaN(x)) { return Float.NaN; } return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F; }"
      },
      {
        "txt": "public static int sign(final int x) { return (x == 0) ? 0 : (x > 0) ? 1 : -1; } public static long sign(final long x) { return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L; } public static short sign(final short x) { return (x == ZS) ? ZS : (x > ZS) ? PS : NS; } public static double sinh(double x) {"
      },
      {
        "txt": "return (Math.exp(x) - Math.exp(-x)) / 2.0; } public static int subAndCheck(int x, int y) { long s = (long)x - (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: subtract\"); } return (int)s; } public static long subAndCheck(long a, long b) {"
      },
      {
        "txt": "long ret; String msg = \"overflow: subtract\"; if (b == Long.MIN_VALUE) { if (a < 0) { ret = a - b; } else { throw new ArithmeticException(msg); } } else { ret = addAndCheck(a, -b, msg);"
      },
      {
        "txt": "} return ret; }"
      }
    ]
  },
  {
    "id": 2732,
    "file_path": "src/java/org/apache/commons/math/util/MathUtils.java",
    "start-bug-line": 714,
    "end-bug-line": 714,
    "bug": "",
    "fix": "if (lcm == Integer.MIN_VALUE){ throw new ArithmeticException(\"overflow: lcm is 2^31\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.util; import java.math.BigDecimal; import java.util.Arrays;"
      },
      {
        "txt": "import org.apache.commons.math.MathException; import org.apache.commons.math.MathRuntimeException; public final class MathUtils { public static final double EPSILON = 0x1.0p-53; public static final double SAFE_MIN = 0x1.0p-1022; private static final byte NB = (byte)-1; private static final short NS = (short)-1; private static final byte PB = (byte)1; private static final short PS = (short)1; private static final byte ZB = (byte)0;"
      },
      {
        "txt": "private static final short ZS = (short)0; private static final double TWO_PI = 2 * Math.PI; private MathUtils() { super(); } public static int addAndCheck(int x, int y) { long s = (long)x + (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: add\"); }"
      },
      {
        "txt": "return (int)s; } public static long addAndCheck(long a, long b) { return addAndCheck(a, b, \"overflow: add\"); } private static long addAndCheck(long a, long b, String msg) { long ret; if (a > b) { ret = addAndCheck(b, a, msg); } else {"
      },
      {
        "txt": "if (a < 0) { if (b < 0) { if (Long.MIN_VALUE - b <= a) { ret = a + b; } else { throw new ArithmeticException(msg); } } else { ret = a + b; }"
      },
      {
        "txt": "} else { if (a <= Long.MAX_VALUE - b) { ret = a + b; } else { throw new ArithmeticException(msg); } } } return ret; }"
      },
      {
        "txt": "public static long binomialCoefficient(final int n, final int k) { if (n < k) { throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); } if (n < 0) { throw new IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\"); } if ((n == k) || (k == 0)) {"
      },
      {
        "txt": "return 1; } if ((k == 1) || (k == n - 1)) { return n; } if (k > n / 2) return binomialCoefficient(n, n - k); long result = 1; if (n <= 61) { for (int j = 1, i = n - k + 1; j <= k; i++, j++) {"
      },
      {
        "txt": "result = result * i / j; } } else if (n <= 66) { for (int j = 1, i = n - k + 1; j <= k; i++, j++) { long d = gcd(i, j); result = (result / (j / d)) * (i / d); } } else { for (int j = 1, i = n - k + 1; j <= k; i++, j++) { long d = gcd(i, j);"
      },
      {
        "txt": "result = mulAndCheck((result / (j / d)), (i / d)); } } return result; } public static double binomialCoefficientDouble(final int n, final int k) { if (n < k) { throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); }"
      },
      {
        "txt": "if (n < 0) { throw new IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\"); } if ((n == k) || (k == 0)) { return 1d; } if ((k == 1) || (k == n - 1)) { return n; }"
      },
      {
        "txt": "if (k > n/2) { return binomialCoefficientDouble(n, n - k); } if (n < 67) { return binomialCoefficient(n,k); } double result = 1d; for (int i = 1; i <= k; i++) { result *= (double)(n - k + i) / (double)i; }"
      },
      {
        "txt": "return Math.floor(result + 0.5); } public static double binomialCoefficientLog(final int n, final int k) { if (n < k) { throw new IllegalArgumentException( \"must have n >= k for binomial coefficient (n,k)\"); } if (n < 0) { throw new IllegalArgumentException( \"must have n >= 0 for binomial coefficient (n,k)\");"
      },
      {
        "txt": "} if ((n == k) || (k == 0)) { return 0; } if ((k == 1) || (k == n - 1)) { return Math.log((double) n); } if (n < 67) { return Math.log(binomialCoefficient(n,k)); }"
      },
      {
        "txt": "if (n < 1030) { return Math.log(binomialCoefficientDouble(n, k)); } if (k > n / 2) { return binomialCoefficientLog(n, n - k); } double logSum = 0; for (int i = n - k + 1; i <= n; i++) { logSum += Math.log((double) i); }"
      },
      {
        "txt": "for (int i = 2; i <= k; i++) { logSum -= Math.log((double) i); } return logSum; } public static double cosh(double x) { return (Math.exp(x) + Math.exp(-x)) / 2.0; } public static boolean equals(double x, double y) { return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);"
      },
      {
        "txt": "} public static boolean equals(double x, double y, double eps) { return x == y || (x < y && (x + eps) >= y) || (x > y && x <= (y + eps)); } public static boolean equals(double[] x, double[] y) { if ((x == null) || (y == null)) { return !((x == null) ^ (y == null)); } if (x.length != y.length) { return false;"
      },
      {
        "txt": "} for (int i = 0; i < x.length; ++i) { if (!equals(x[i], y[i])) { return false; } } return true; } private static final long[] factorials = new long[] {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,"
      },
      {
        "txt": "479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l, 355687428096000l, 6402373705728000l, 121645100408832000l, 2432902008176640000l}; public static long factorial(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n >= 0 for n!\"); } if (n > 20) { throw new ArithmeticException( \"factorial value is too large to fit in a long\");"
      },
      {
        "txt": "} return factorials[n]; } public static double factorialDouble(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n >= 0 for n!\"); } if (n < 21) { return factorial(n); }"
      },
      {
        "txt": "return Math.floor(Math.exp(factorialLog(n)) + 0.5); } public static double factorialLog(final int n) { if (n < 0) { throw new IllegalArgumentException(\"must have n > 0 for n!\"); } if (n < 21) { return Math.log(factorial(n)); } double logSum = 0;"
      },
      {
        "txt": "for (int i = 2; i <= n; i++) { logSum += Math.log((double)i); } return logSum; } public static int gcd(final int p, final int q) { int u = p; int v = q; if ((u == 0) || (v == 0)) { return (Math.abs(u) + Math.abs(v));"
      },
      {
        "txt": "} if (u > 0) { u = -u; } // make u negative if (v > 0) { v = -v; } // make v negative int k = 0; while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are u /= 2;"
      },
      {
        "txt": "v /= 2; k++; // cast out twos. } if (k == 31) { throw MathRuntimeException.createArithmeticException( \"overflow: gcd({0}, {1}) is 2^31\", new Object[] { p, q }); } int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */; do {"
      },
      {
        "txt": "while ((t & 1) == 0) { // while t is even.. t /= 2; // cast out twos } if (t > 0) { u = -t; } else { v = t; } t = (v - u) / 2; } while (t != 0);"
      },
      {
        "txt": "return -u * (1 << k); // gcd is u*2^k } public static int hash(double value) { return new Double(value).hashCode(); } public static int hash(double[] value) { return Arrays.hashCode(value); } public static byte indicator(final byte x) { return (x >= ZB) ? PB : NB;"
      },
      {
        "txt": "} public static double indicator(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x >= 0.0) ? 1.0 : -1.0; } public static float indicator(final float x) { if (Float.isNaN(x)) { return Float.NaN;"
      },
      {
        "txt": "} return (x >= 0.0F) ? 1.0F : -1.0F; } public static int indicator(final int x) { return (x >= 0) ? 1 : -1; } public static long indicator(final long x) { return (x >= 0L) ? 1L : -1L; } public static short indicator(final short x) {"
      },
      {
        "txt": "} public static int lcm(int a, int b) { if (a==0 || b==0){ return 0; } int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b)); <extra_id_0> } public static double log(double base, double x) { return Math.log(x)/Math.log(base); } public static int mulAndCheck(int x, int y) { long m = ((long)x) * ((long)y);"
      },
      {
        "txt": "public static int mulAndCheck(int x, int y) { long m = ((long)x) * ((long)y); if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: mul\"); } return (int)m; } public static long mulAndCheck(long a, long b) { long ret; String msg = \"overflow: multiply\";"
      },
      {
        "txt": "if (a > b) { ret = mulAndCheck(b, a); } else { if (a < 0) { if (b < 0) { if (a >= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg); }"
      },
      {
        "txt": "} else if (b > 0) { if (Long.MIN_VALUE / b <= a) { ret = a * b; } else { throw new ArithmeticException(msg); } } else { ret = 0; } } else if (a > 0) {"
      },
      {
        "txt": "if (a <= Long.MAX_VALUE / b) { ret = a * b; } else { throw new ArithmeticException(msg); } } else { ret = 0; } } return ret;"
      },
      {
        "txt": "} public static double nextAfter(double d, double direction) { if (Double.isNaN(d) || Double.isInfinite(d)) { return d; } else if (d == 0) { return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE; } long bits = Double.doubleToLongBits(d); long sign = bits & 0x8000000000000000L; long exponent = bits & 0x7ff0000000000000L;"
      },
      {
        "txt": "long mantissa = bits & 0x000fffffffffffffL; if (d * (direction - d) >= 0) { if (mantissa == 0x000fffffffffffffL) { return Double.longBitsToDouble(sign | (exponent + 0x0010000000000000L)); } else { return Double.longBitsToDouble(sign | exponent | (mantissa + 1)); } } else {"
      },
      {
        "txt": "if (mantissa == 0L) { return Double.longBitsToDouble(sign | (exponent - 0x0010000000000000L) | 0x000fffffffffffffL); } else { return Double.longBitsToDouble(sign | exponent | (mantissa - 1)); } } }"
      },
      {
        "txt": "public static double scalb(final double d, final int scaleFactor) { if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d)) { return d; } final long bits = Double.doubleToLongBits(d); final long exponent = bits & 0x7ff0000000000000L; final long rest = bits & 0x800fffffffffffffL; final long newBits = rest | (exponent + (((long) scaleFactor) << 52)); return Double.longBitsToDouble(newBits); }"
      },
      {
        "txt": "public static double normalizeAngle(double a, double center) { return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI); } public static double round(double x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static double round(double x, int scale, int roundingMethod) { try { return (new BigDecimal (Double.toString(x))"
      },
      {
        "txt": ".setScale(scale, roundingMethod)) .doubleValue(); } catch (NumberFormatException ex) { if (Double.isInfinite(x)) { return x; } else { return Double.NaN; } } }"
      },
      {
        "txt": "public static float round(float x, int scale) { return round(x, scale, BigDecimal.ROUND_HALF_UP); } public static float round(float x, int scale, int roundingMethod) { float sign = indicator(x); float factor = (float)Math.pow(10.0f, scale) * sign; return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor; } private static double roundUnscaled(double unscaled, double sign, int roundingMethod) {"
      },
      {
        "txt": "switch (roundingMethod) { case BigDecimal.ROUND_CEILING : if (sign == -1) { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } else { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } break; case BigDecimal.ROUND_DOWN : unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));"
      },
      {
        "txt": "break; case BigDecimal.ROUND_FLOOR : if (sign == -1) { unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); } else { unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY)); } break; case BigDecimal.ROUND_HALF_DOWN : { unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);"
      },
      {
        "txt": "double fraction = unscaled - Math.floor(unscaled); if (fraction > 0.5) { unscaled = Math.ceil(unscaled); } else { unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_HALF_EVEN : { double fraction = unscaled - Math.floor(unscaled);"
      },
      {
        "txt": "if (fraction > 0.5) { unscaled = Math.ceil(unscaled); } else if (fraction < 0.5) { unscaled = Math.floor(unscaled); } else { if (Math.floor(unscaled) / 2.0 == Math.floor(Math .floor(unscaled) / 2.0)) { // even unscaled = Math.floor(unscaled); } else { // odd unscaled = Math.ceil(unscaled);"
      },
      {
        "txt": "} } break; } case BigDecimal.ROUND_HALF_UP : { unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY); double fraction = unscaled - Math.floor(unscaled); if (fraction >= 0.5) { unscaled = Math.ceil(unscaled); } else {"
      },
      {
        "txt": "unscaled = Math.floor(unscaled); } break; } case BigDecimal.ROUND_UNNECESSARY : if (unscaled != Math.floor(unscaled)) { throw new ArithmeticException(\"Inexact result from rounding\"); } break; case BigDecimal.ROUND_UP :"
      },
      {
        "txt": "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY)); break; default : throw new IllegalArgumentException(\"Invalid rounding method.\"); } return unscaled; } public static byte sign(final byte x) { return (x == ZB) ? ZB : (x > ZB) ? PB : NB; }"
      },
      {
        "txt": "public static double sign(final double x) { if (Double.isNaN(x)) { return Double.NaN; } return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0; } public static float sign(final float x) { if (Float.isNaN(x)) { return Float.NaN; }"
      },
      {
        "txt": "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F; } public static int sign(final int x) { return (x == 0) ? 0 : (x > 0) ? 1 : -1; } public static long sign(final long x) { return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L; } public static short sign(final short x) { return (x == ZS) ? ZS : (x > ZS) ? PS : NS;"
      },
      {
        "txt": "} public static double sinh(double x) { return (Math.exp(x) - Math.exp(-x)) / 2.0; } public static int subAndCheck(int x, int y) { long s = (long)x - (long)y; if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) { throw new ArithmeticException(\"overflow: subtract\"); } return (int)s;"
      },
      {
        "txt": "} public static long subAndCheck(long a, long b) { long ret; String msg = \"overflow: subtract\"; if (b == Long.MIN_VALUE) { if (a < 0) { ret = a - b; } else { throw new ArithmeticException(msg); }"
      },
      {
        "txt": "} else { ret = addAndCheck(a, -b, msg); } return ret; }"
      }
    ]
  }
]
[
  {
    "id": 2603,
    "file_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
    "start-bug-line": 126,
    "end-bug-line": 126,
    "bug": "try {",
    "fix": "if (FastMath.abs(dev) > 40 * standardDeviation) { return dev < 0 ? 0.0d : 1.0d; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.distribution; import java.io.Serializable; import org.apache.commons.math.MathException; import org.apache.commons.math.exception.NotStrictlyPositiveException; import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.special.Erf;"
      },
      {
        "txt": "import org.apache.commons.math.util.FastMath; public class NormalDistributionImpl extends AbstractContinuousDistribution implements NormalDistribution, Serializable { public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9; private static final long serialVersionUID = 8589540077390120676L; private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI); private final double mean; private final double standardDeviation; private final double solverAbsoluteAccuracy; public NormalDistributionImpl(double mean, double sd){"
      },
      {
        "txt": "this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) { if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; }"
      },
      {
        "txt": "public NormalDistributionImpl(){ this(0, 1); } public double getMean() { return mean; } public double getStandardDeviation() { return standardDeviation; } @Override"
      },
      {
        "txt": "final double x0 = x - mean; final double x1 = x0 / standardDeviation; return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI); } public double cumulativeProbability(double x) throws MathException { final double dev = x - mean; <extra_id_0> return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0)))); } catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) {"
      },
      {
        "txt": "return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; } } } @Override protected double getSolverAbsoluteAccuracy() {"
      },
      {
        "txt": "return solverAbsoluteAccuracy; } @Override public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return Double.NEGATIVE_INFINITY; } if (p == 1) { return Double.POSITIVE_INFINITY;"
      },
      {
        "txt": "} return super.inverseCumulativeProbability(p); } @Override public double sample() throws MathException { return randomData.nextGaussian(mean, standardDeviation); } @Override protected double getDomainLowerBound(double p) { double ret;"
      },
      {
        "txt": "if (p < 0.5) { ret = -Double.MAX_VALUE; } else { ret = mean; } return ret; } @Override protected double getDomainUpperBound(double p) { double ret;"
      },
      {
        "txt": "if (p < 0.5) { ret = mean; } else { ret = Double.MAX_VALUE; } return ret; } @Override protected double getInitialDomain(double p) { double ret;"
      },
      {
        "txt": "if (p < 0.5) { ret = mean - standardDeviation; } else if (p > 0.5) { ret = mean + standardDeviation; } else { ret = mean; } return ret; }"
      }
    ]
  },
  {
    "id": 2604,
    "file_path": "src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java",
    "start-bug-line": 129,
    "end-bug-line": 137,
    "bug": "} catch (MaxIterationsExceededException ex) { if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38 return 0; } else if (x > (mean + 20 * standardDeviation)) { return 1; } else { throw ex; } }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.distribution; import java.io.Serializable; import org.apache.commons.math.MathException; import org.apache.commons.math.exception.NotStrictlyPositiveException; import org.apache.commons.math.MaxIterationsExceededException; import org.apache.commons.math.exception.util.LocalizedFormats; import org.apache.commons.math.special.Erf; import org.apache.commons.math.util.FastMath; public class NormalDistributionImpl extends AbstractContinuousDistribution implements NormalDistribution, Serializable {"
      },
      {
        "txt": "public static final double DEFAULT_INVERSE_ABSOLUTE_ACCURACY = 1e-9; private static final long serialVersionUID = 8589540077390120676L; private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI); private final double mean; private final double standardDeviation; private final double solverAbsoluteAccuracy; public NormalDistributionImpl(double mean, double sd){ this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY); } public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {"
      },
      {
        "txt": "if (sd <= 0) { throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd); } this.mean = mean; standardDeviation = sd; solverAbsoluteAccuracy = inverseCumAccuracy; } public NormalDistributionImpl(){ this(0, 1); }"
      },
      {
        "txt": "public double getMean() { return mean; } public double getStandardDeviation() { return standardDeviation; } @Override public double density(double x) { final double x0 = x - mean; final double x1 = x0 / standardDeviation;"
      },
      {
        "txt": "} public double cumulativeProbability(double x) throws MathException { final double dev = x - mean; try { return 0.5 * (1.0 + Erf.erf((dev) / (standardDeviation * FastMath.sqrt(2.0)))); <extra_id_0> } @Override protected double getSolverAbsoluteAccuracy() { return solverAbsoluteAccuracy; } @Override"
      },
      {
        "txt": "} @Override public double inverseCumulativeProbability(final double p) throws MathException { if (p == 0) { return Double.NEGATIVE_INFINITY; } if (p == 1) { return Double.POSITIVE_INFINITY; }"
      },
      {
        "txt": "return super.inverseCumulativeProbability(p); } @Override public double sample() throws MathException { return randomData.nextGaussian(mean, standardDeviation); } @Override protected double getDomainLowerBound(double p) { double ret; if (p < 0.5) {"
      },
      {
        "txt": "ret = -Double.MAX_VALUE; } else { ret = mean; } return ret; } @Override protected double getDomainUpperBound(double p) { double ret; if (p < 0.5) {"
      },
      {
        "txt": "ret = mean; } else { ret = Double.MAX_VALUE; } return ret; } @Override protected double getInitialDomain(double p) { double ret; if (p < 0.5) {"
      },
      {
        "txt": "ret = mean - standardDeviation; } else if (p > 0.5) { ret = mean + standardDeviation; } else { ret = mean; } return ret; }"
      }
    ]
  }
]
[
  {
    "id": 2540,
    "file_path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
    "start-bug-line": 134,
    "end-bug-line": 135,
    "bug": "double p0 = 1.0; double q1 = 1.0;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import org.apache.commons.math3.exception.ConvergenceException; import org.apache.commons.math3.exception.MaxCountExceededException; import org.apache.commons.math3.exception.util.LocalizedFormats; public abstract class ContinuedFraction { private static final double DEFAULT_EPSILON = 10e-9; protected ContinuedFraction() { super(); } protected abstract double getA(int n, double x); protected abstract double getB(int n, double x);"
      },
      {
        "txt": "public double evaluate(double x) { return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE); } public double evaluate(double x, double epsilon) { return evaluate(x, epsilon, Integer.MAX_VALUE); } public double evaluate(double x, int maxIterations) { return evaluate(x, DEFAULT_EPSILON, maxIterations); } public double evaluate(double x, double epsilon, int maxIterations) {"
      },
      {
        "txt": "double hPrev = getA(0, x); if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; <extra_id_0> double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0;"
      },
      {
        "txt": "final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) { // Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);"
      },
      {
        "txt": "} for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) { cN = hPrev / lastScaleFactor + (b / scaleFactor * p0); q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev); } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;"
      },
      {
        "txt": "} if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE,"
      },
      {
        "txt": "x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1;"
      },
      {
        "txt": "cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }"
      },
      {
        "txt": "return hN; }"
      }
    ]
  },
  {
    "id": 2541,
    "file_path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
    "start-bug-line": 143,
    "end-bug-line": 166,
    "bug": "double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) {  // Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) { cN = hPrev / lastScaleFactor + (b / scaleFactor * p0); q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev); } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } }",
    "fix": "double dN = a + b * dPrev; if (Precision.equals(dN, 0.0, small)) { dN = small; } double cN = a + b / cPrev; if (Precision.equals(cN, 0.0, small)) { cN = small;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.util; import org.apache.commons.math3.exception.ConvergenceException; import org.apache.commons.math3.exception.MaxCountExceededException; import org.apache.commons.math3.exception.util.LocalizedFormats; public abstract class ContinuedFraction { private static final double DEFAULT_EPSILON = 10e-9; protected ContinuedFraction() { super();"
      },
      {
        "txt": "} protected abstract double getA(int n, double x); protected abstract double getB(int n, double x); public double evaluate(double x) { return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE); } public double evaluate(double x, double epsilon) { return evaluate(x, epsilon, Integer.MAX_VALUE); } public double evaluate(double x, int maxIterations) {"
      },
      {
        "txt": "return evaluate(x, DEFAULT_EPSILON, maxIterations); } public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x); if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0;"
      },
      {
        "txt": "double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); <extra_id_0> } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);"
      },
      {
        "txt": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; }"
      },
      {
        "txt": "dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x);"
      },
      {
        "txt": "} return hN; }"
      }
    ]
  },
  {
    "id": 2542,
    "file_path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
    "start-bug-line": 169,
    "end-bug-line": 170,
    "bug": "final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN;",
    "fix": "dN = 1 / dN; final double deltaN = cN * dN; hN = hPrev * deltaN;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.util; import org.apache.commons.math3.exception.ConvergenceException; import org.apache.commons.math3.exception.MaxCountExceededException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.util.LocalizedFormats; public abstract class ContinuedFraction { private static final double DEFAULT_EPSILON = 10e-9; protected ContinuedFraction() { super(); } protected abstract double getA(int n, double x); protected abstract double getB(int n, double x); public double evaluate(double x) { return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);"
      },
      {
        "txt": "} public double evaluate(double x, double epsilon) { return evaluate(x, epsilon, Integer.MAX_VALUE); } public double evaluate(double x, int maxIterations) { return evaluate(x, DEFAULT_EPSILON, maxIterations); } public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x);"
      },
      {
        "txt": "if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; } int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) {"
      },
      {
        "txt": "final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0; double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) { // Can't scale"
      },
      {
        "txt": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) { lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) { cN = hPrev / lastScaleFactor + (b / scaleFactor * p0); q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev); } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;"
      },
      {
        "txt": "} if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) { break; } } } <extra_id_0> if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,"
      },
      {
        "txt": "if (Double.isNaN(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } dPrev = q1; cPrev = cN / q2; p0 = hPrev;"
      },
      {
        "txt": "hPrev = cN; q1 = q2; n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); } return hN; }"
      }
    ]
  },
  {
    "id": 2543,
    "file_path": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
    "start-bug-line": 185,
    "end-bug-line": 189,
    "bug": "dPrev = q1; cPrev = cN / q2; p0 = hPrev; hPrev = cN; q1 = q2;",
    "fix": "dPrev = dN; cPrev = cN; hPrev = hN;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.util; import org.apache.commons.math3.exception.ConvergenceException; import org.apache.commons.math3.exception.MaxCountExceededException; import org.apache.commons.math3.exception.util.LocalizedFormats; public abstract class ContinuedFraction { private static final double DEFAULT_EPSILON = 10e-9;"
      },
      {
        "txt": "protected ContinuedFraction() { super(); } protected abstract double getA(int n, double x); protected abstract double getB(int n, double x); public double evaluate(double x) { return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE); } public double evaluate(double x, double epsilon) { return evaluate(x, epsilon, Integer.MAX_VALUE);"
      },
      {
        "txt": "} public double evaluate(double x, int maxIterations) { return evaluate(x, DEFAULT_EPSILON, maxIterations); } public double evaluate(double x, double epsilon, int maxIterations) { final double small = 1e-50; double hPrev = getA(0, x); if (Precision.equals(hPrev, 0.0, small)) { hPrev = small; }"
      },
      {
        "txt": "int n = 1; double dPrev = 0.0; double p0 = 1.0; double q1 = 1.0; double cPrev = hPrev; double hN = hPrev; while (n < maxIterations) { final double a = getA(n, x); final double b = getB(n, x); double cN = a * hPrev + b * p0;"
      },
      {
        "txt": "double q2 = a * q1 + b * dPrev; if (Double.isInfinite(cN) || Double.isInfinite(q2)) { double scaleFactor = 1d; double lastScaleFactor = 1d; final int maxPower = 5; final double scale = FastMath.max(a,b); if (scale <= 0) { // Can't scale throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); } for (int i = 0; i < maxPower; i++) {"
      },
      {
        "txt": "lastScaleFactor = scaleFactor; scaleFactor *= scale; if (a != 0.0 && a > b) { cN = hPrev / lastScaleFactor + (b / scaleFactor * p0); q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev); } else if (b != 0) { cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor; q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor; } if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {"
      },
      {
        "txt": "break; } } } final double deltaN = cN / q2 / cPrev; hN = cPrev * deltaN; if (Double.isInfinite(hN)) { throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x); }"
      },
      {
        "txt": "throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE, x); } if (FastMath.abs(deltaN - 1.0) < epsilon) { break; } <extra_id_0> n++; } if (n >= maxIterations) { throw new MaxCountExceededException(LocalizedFormats.NON_CONVERGENT_CONTINUED_FRACTION, maxIterations, x); }"
      },
      {
        "txt": "maxIterations, x); } return hN; }"
      }
    ]
  }
]
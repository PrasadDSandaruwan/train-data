[
  {
    "id": 2724,
    "file_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
    "start-bug-line": 138,
    "end-bug-line": 138,
    "bug": "if (sign >= 0) {",
    "fix": "if (sign > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxIterationsExceededException; public class BrentSolver extends UnivariateRealSolverImpl { private static final long serialVersionUID = -2136672307739067002L; public BrentSolver(UnivariateRealFunction f) { super(f, 100, 1E-6); } public double solve(double min, double max, double initial)"
      },
      {
        "txt": "throws MaxIterationsExceededException, FunctionEvaluationException { if (((initial - min) * (max -initial)) < 0) { throw new IllegalArgumentException(\"Initial guess is not in search\" + \" interval.\" + \" Initial: \" + initial + \" Endpoints: [\" + min + \",\" + max + \"]\"); } double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result;"
      },
      {
        "txt": "} double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max);"
      },
      {
        "txt": "if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(initial, yInitial, max, yMax, initial, yInitial); } return solve(min, yMin, max, yMax, initial, yInitial); } public double solve(double min, double max) throws MaxIterationsExceededException,"
      },
      {
        "txt": "clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max); double sign = yMin * yMax; <extra_id_0> throw new IllegalArgumentException (\"Function values at endpoints do not have different signs.\" + \" Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + yMin + \",\" + yMax + \"]\"); } else { ret = solve(min, yMin, max, yMax, min, yMin);"
      },
      {
        "txt": "} else { ret = solve(min, yMin, max, yMax, min, yMin); } return ret; } private double solve(double x0, double y0, double x1, double y1, double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0;"
      },
      {
        "txt": "double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) { x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0;"
      },
      {
        "txt": "} if (Math.abs(y1) <= functionValueAccuracy) { setResult(x1, i); return result; } double dx = (x2 - x1); double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i);"
      },
      {
        "txt": "return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;"
      },
      {
        "txt": "if (x0 == x2) { p = dx * r3; p1 = 1.0 - r3; } else { double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) {"
      },
      {
        "txt": "p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) { delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta;"
      },
      {
        "txt": "delta = p / p1; } } x0 = x1; y0 = y1; if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) {"
      },
      {
        "txt": "x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++;"
      },
      {
        "txt": "} throw new MaxIterationsExceededException(maximalIterationCount); }"
      }
    ]
  },
  {
    "id": 2725,
    "file_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
    "start-bug-line": 140,
    "end-bug-line": 140,
    "bug": "",
    "fix": "if (Math.abs(yMin) <= functionValueAccuracy) { setResult(min, 0); ret = min; } else if (Math.abs(yMax) <= functionValueAccuracy) { setResult(max, 0); ret = max; } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxIterationsExceededException; public class BrentSolver extends UnivariateRealSolverImpl { private static final long serialVersionUID = -2136672307739067002L; public BrentSolver(UnivariateRealFunction f) { super(f, 100, 1E-6); } public double solve(double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException {"
      },
      {
        "txt": "if (((initial - min) * (max -initial)) < 0) { throw new IllegalArgumentException(\"Initial guess is not in search\" + \" interval.\" + \" Initial: \" + initial + \" Endpoints: [\" + min + \",\" + max + \"]\"); } double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; }"
      },
      {
        "txt": "double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) { return solve(min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) {"
      },
      {
        "txt": "setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(initial, yInitial, max, yMax, initial, yInitial); } return solve(min, yMin, max, yMax, initial, yInitial); } public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException {"
      },
      {
        "txt": "verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max); double sign = yMin * yMax; if (sign >= 0) { <extra_id_0> throw new IllegalArgumentException (\"Function values at endpoints do not have different signs.\" + \" Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + yMin + \",\" + yMax + \"]\"); } else { ret = solve(min, yMin, max, yMax, min, yMin);"
      },
      {
        "txt": "} else { ret = solve(min, yMin, max, yMax, min, yMin); } return ret; } private double solve(double x0, double y0, double x1, double y1, double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0;"
      },
      {
        "txt": "double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) { x0 = x1; x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0;"
      },
      {
        "txt": "} if (Math.abs(y1) <= functionValueAccuracy) { setResult(x1, i); return result; } double dx = (x2 - x1); double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i);"
      },
      {
        "txt": "return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { delta = 0.5 * dx; oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1;"
      },
      {
        "txt": "if (x0 == x2) { p = dx * r3; p1 = 1.0 - r3; } else { double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) {"
      },
      {
        "txt": "p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) { delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta;"
      },
      {
        "txt": "delta = p / p1; } } x0 = x1; y0 = y1; if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) {"
      },
      {
        "txt": "x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0; oldDelta = delta; } i++;"
      },
      {
        "txt": "} throw new MaxIterationsExceededException(maximalIterationCount); }"
      }
    ]
  },
  {
    "id": 2726,
    "file_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
    "start-bug-line": 145,
    "end-bug-line": 145,
    "bug": "} else {",
    "fix": "} } else if (sign < 0){",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxIterationsExceededException; public class BrentSolver extends UnivariateRealSolverImpl {"
      },
      {
        "txt": "private static final long serialVersionUID = -2136672307739067002L; public BrentSolver(UnivariateRealFunction f) { super(f, 100, 1E-6); } public double solve(double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { if (((initial - min) * (max -initial)) < 0) { throw new IllegalArgumentException(\"Initial guess is not in search\" + \" interval.\" + \" Initial: \" + initial + \" Endpoints: [\" + min + \",\" + max + \"]\");"
      },
      {
        "txt": "} double yInitial = f.value(initial); if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result;"
      },
      {
        "txt": "} if (yInitial * yMin < 0) { return solve(min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) {"
      },
      {
        "txt": "return solve(initial, yInitial, max, yMax, initial, yInitial); } return solve(min, yMin, max, yMax, initial, yInitial); } public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min);"
      },
      {
        "txt": "double sign = yMin * yMax; if (sign >= 0) { throw new IllegalArgumentException (\"Function values at endpoints do not have different signs.\" + \" Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + yMin + \",\" + yMax + \"]\"); <extra_id_0> ret = solve(min, yMin, max, yMax, min, yMin); } return ret; } private double solve(double x0, double y0, double x1, double y1,"
      },
      {
        "txt": "private double solve(double x0, double y0, double x1, double y1, double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) { x0 = x1;"
      },
      {
        "txt": "x1 = x2; x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) { setResult(x1, i); return result; }"
      },
      {
        "txt": "double dx = (x2 - x1); double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { delta = 0.5 * dx;"
      },
      {
        "txt": "oldDelta = delta; } else { double r3 = y1 / y0; double p; double p1; if (x0 == x2) { p = dx * r3; p1 = 1.0 - r3; } else { double r1 = y0 / y2;"
      },
      {
        "txt": "double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||"
      },
      {
        "txt": "p >= Math.abs(0.5 * oldDelta * p1)) { delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } } x0 = x1; y0 = y1;"
      },
      {
        "txt": "if (Math.abs(delta) > tolerance) { x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0;"
      },
      {
        "txt": "y2 = y0; delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); }"
      }
    ]
  },
  {
    "id": 2727,
    "file_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
    "start-bug-line": 148,
    "end-bug-line": 148,
    "bug": "",
    "fix": "} else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxIterationsExceededException; public class BrentSolver extends UnivariateRealSolverImpl { private static final long serialVersionUID = -2136672307739067002L; public BrentSolver(UnivariateRealFunction f) {"
      },
      {
        "txt": "super(f, 100, 1E-6); } public double solve(double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { if (((initial - min) * (max -initial)) < 0) { throw new IllegalArgumentException(\"Initial guess is not in search\" + \" interval.\" + \" Initial: \" + initial + \" Endpoints: [\" + min + \",\" + max + \"]\"); } double yInitial = f.value(initial);"
      },
      {
        "txt": "if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) {"
      },
      {
        "txt": "return solve(min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(initial, yInitial, max, yMax, initial, yInitial); }"
      },
      {
        "txt": "return solve(min, yMin, max, yMax, initial, yInitial); } public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max); double sign = yMin * yMax;"
      },
      {
        "txt": "throw new IllegalArgumentException (\"Function values at endpoints do not have different signs.\" + \" Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + yMin + \",\" + yMax + \"]\"); } else { ret = solve(min, yMin, max, yMax, min, yMin); <extra_id_0> } return ret; } private double solve(double x0, double y0, double x1, double y1, double x2, double y2)"
      },
      {
        "txt": "double x1, double y1, double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) { x0 = x1; x1 = x2;"
      },
      {
        "txt": "x2 = x0; y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) { setResult(x1, i); return result; } double dx = (x2 - x1);"
      },
      {
        "txt": "double tolerance = Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { delta = 0.5 * dx; oldDelta = delta;"
      },
      {
        "txt": "} else { double r3 = y1 / y0; double p; double p1; if (x0 == x2) { p = dx * r3; p1 = 1.0 - r3; } else { double r1 = y0 / y2; double r2 = y1 / y2;"
      },
      {
        "txt": "p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0)); p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) {"
      },
      {
        "txt": "delta = 0.5 * dx; oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } } x0 = x1; y0 = y1; if (Math.abs(delta) > tolerance) {"
      },
      {
        "txt": "x1 = x1 + delta; } else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0;"
      },
      {
        "txt": "delta = x1 - x0; oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); }"
      }
    ]
  },
  {
    "id": 2728,
    "file_path": "src/java/org/apache/commons/math/analysis/BrentSolver.java",
    "start-bug-line": 149,
    "end-bug-line": 149,
    "bug": "",
    "fix": "if (yMin == 0.0) { ret = min; } else { ret = max; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.analysis; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.MaxIterationsExceededException; public class BrentSolver extends UnivariateRealSolverImpl { private static final long serialVersionUID = -2136672307739067002L; public BrentSolver(UnivariateRealFunction f) {"
      },
      {
        "txt": "super(f, 100, 1E-6); } public double solve(double min, double max, double initial) throws MaxIterationsExceededException, FunctionEvaluationException { if (((initial - min) * (max -initial)) < 0) { throw new IllegalArgumentException(\"Initial guess is not in search\" + \" interval.\" + \" Initial: \" + initial + \" Endpoints: [\" + min + \",\" + max + \"]\"); } double yInitial = f.value(initial);"
      },
      {
        "txt": "if (Math.abs(yInitial) <= functionValueAccuracy) { setResult(initial, 0); return result; } double yMin = f.value(min); if (Math.abs(yMin) <= functionValueAccuracy) { setResult(yMin, 0); return result; } if (yInitial * yMin < 0) {"
      },
      {
        "txt": "return solve(min, yMin, initial, yInitial, min, yMin); } double yMax = f.value(max); if (Math.abs(yMax) <= functionValueAccuracy) { setResult(yMax, 0); return result; } if (yInitial * yMax < 0) { return solve(initial, yInitial, max, yMax, initial, yInitial); }"
      },
      {
        "txt": "return solve(min, yMin, max, yMax, initial, yInitial); } public double solve(double min, double max) throws MaxIterationsExceededException, FunctionEvaluationException { clearResult(); verifyInterval(min, max); double ret = Double.NaN; double yMin = f.value(min); double yMax = f.value(max); double sign = yMin * yMax;"
      },
      {
        "txt": "throw new IllegalArgumentException (\"Function values at endpoints do not have different signs.\" + \" Endpoints: [\" + min + \",\" + max + \"]\" + \" Values: [\" + yMin + \",\" + yMax + \"]\"); } else { ret = solve(min, yMin, max, yMax, min, yMin); <extra_id_0> return ret; } private double solve(double x0, double y0, double x1, double y1, double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException {"
      },
      {
        "txt": "double x2, double y2) throws MaxIterationsExceededException, FunctionEvaluationException { double delta = x1 - x0; double oldDelta = delta; int i = 0; while (i < maximalIterationCount) { if (Math.abs(y2) < Math.abs(y1)) { x0 = x1; x1 = x2; x2 = x0;"
      },
      {
        "txt": "y0 = y1; y1 = y2; y2 = y0; } if (Math.abs(y1) <= functionValueAccuracy) { setResult(x1, i); return result; } double dx = (x2 - x1); double tolerance ="
      },
      {
        "txt": "Math.max(relativeAccuracy * Math.abs(x1), absoluteAccuracy); if (Math.abs(dx) <= tolerance) { setResult(x1, i); return result; } if ((Math.abs(oldDelta) < tolerance) || (Math.abs(y0) <= Math.abs(y1))) { delta = 0.5 * dx; oldDelta = delta; } else {"
      },
      {
        "txt": "double r3 = y1 / y0; double p; double p1; if (x0 == x2) { p = dx * r3; p1 = 1.0 - r3; } else { double r1 = y0 / y2; double r2 = y1 / y2; p = r3 * (dx * r1 * (r1 - r2) - (x1 - x0) * (r2 - 1.0));"
      },
      {
        "txt": "p1 = (r1 - 1.0) * (r2 - 1.0) * (r3 - 1.0); } if (p > 0.0) { p1 = -p1; } else { p = -p; } if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) || p >= Math.abs(0.5 * oldDelta * p1)) { delta = 0.5 * dx;"
      },
      {
        "txt": "oldDelta = delta; } else { oldDelta = delta; delta = p / p1; } } x0 = x1; y0 = y1; if (Math.abs(delta) > tolerance) { x1 = x1 + delta;"
      },
      {
        "txt": "} else if (dx > 0.0) { x1 = x1 + 0.5 * tolerance; } else if (dx <= 0.0) { x1 = x1 - 0.5 * tolerance; } y1 = f.value(x1); if ((y1 > 0) == (y2 > 0)) { x2 = x0; y2 = y0; delta = x1 - x0;"
      },
      {
        "txt": "oldDelta = delta; } i++; } throw new MaxIterationsExceededException(maximalIterationCount); }"
      }
    ]
  }
]
[
  {
    "id": 2449,
    "file_path": "src/main/java/org/apache/commons/math3/fraction/BigFraction.java",
    "start-bug-line": 306,
    "end-bug-line": 306,
    "bug": "",
    "fix": "if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { break; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.fraction; import java.io.Serializable; import java.math.BigDecimal; import java.math.BigInteger; import org.apache.commons.math3.FieldElement; import org.apache.commons.math3.exception.MathArithmeticException; import org.apache.commons.math3.exception.MathIllegalArgumentException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.NullArgumentException; import org.apache.commons.math3.exception.ZeroException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.util.ArithmeticUtils; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.util.MathUtils; public class BigFraction extends Number implements FieldElement<BigFraction>, Comparable<BigFraction>, Serializable { public static final BigFraction TWO = new BigFraction(2);"
      },
      {
        "txt": "public static final BigFraction ONE = new BigFraction(1); public static final BigFraction ZERO = new BigFraction(0); public static final BigFraction MINUS_ONE = new BigFraction(-1); public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5); public static final BigFraction ONE_FIFTH = new BigFraction(1, 5); public static final BigFraction ONE_HALF = new BigFraction(1, 2); public static final BigFraction ONE_QUARTER = new BigFraction(1, 4); public static final BigFraction ONE_THIRD = new BigFraction(1, 3); public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5); public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);"
      },
      {
        "txt": "public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5); public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4); public static final BigFraction TWO_THIRDS = new BigFraction(2, 3); private static final long serialVersionUID = -5630213147331578515L; private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100); private final BigInteger numerator; private final BigInteger denominator; public BigFraction(final BigInteger num) { this(num, BigInteger.ONE); }"
      },
      {
        "txt": "public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {"
      },
      {
        "txt": "final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { num = num.divide(gcd); den = den.divide(gcd); } if (BigInteger.ZERO.compareTo(den) > 0) { num = num.negate(); den = den.negate(); } numerator = num;"
      },
      {
        "txt": "denominator = den; } } public BigFraction(final double value) throws MathIllegalArgumentException { if (Double.isNaN(value)) { throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION); } if (Double.isInfinite(value)) { throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION); }"
      },
      {
        "txt": "final long bits = Double.doubleToLongBits(value); final long sign = bits & 0x8000000000000000L; final long exponent = bits & 0x7ff0000000000000L; long m = bits & 0x000fffffffffffffL; if (exponent != 0) { m |= 0x0010000000000000L; } if (sign != 0) { m = -m; }"
      },
      {
        "txt": "int k = ((int) (exponent >> 52)) - 1075; while (((m & 0x001ffffffffffffeL) != 0) && ((m & 0x1) == 0)) { m = m >> 1; ++k; } if (k < 0) { numerator = BigInteger.valueOf(m); denominator = BigInteger.ZERO.flipBit(-k); } else { numerator = BigInteger.valueOf(m).multiply(BigInteger.ZERO.flipBit(k));"
      },
      {
        "txt": "denominator = BigInteger.ONE; } } public BigFraction(final double value, final double epsilon, final int maxIterations) throws FractionConversionException { this(value, epsilon, Integer.MAX_VALUE, maxIterations); } private BigFraction(final double value, final double epsilon, final int maxDenominator, int maxIterations)"
      },
      {
        "txt": "throws FractionConversionException { long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long) FastMath.floor(r0); if (a0 > overflow) { throw new FractionConversionException(value, a0, 1l); } if (FastMath.abs(a0 - value) < epsilon) { numerator = BigInteger.valueOf(a0); denominator = BigInteger.ONE;"
      },
      {
        "txt": "return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false;"
      },
      {
        "txt": "++n; final double r1 = 1.0 / (r0 - a0); final long a1 = (long) FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((p2 > overflow) || (q2 > overflow)) { <extra_id_0> } final double convergent = (double) p2 / (double) q2; if ((n < maxIterations) && (FastMath.abs(convergent - value) > epsilon) && (q2 < maxDenominator)) { p0 = p1;"
      },
      {
        "txt": "(q2 < maxDenominator)) { p0 = p1; p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; }"
      },
      {
        "txt": "} while (!stop); if (n >= maxIterations) { throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { numerator = BigInteger.valueOf(p2); denominator = BigInteger.valueOf(q2); } else { numerator = BigInteger.valueOf(p1); denominator = BigInteger.valueOf(q1);"
      },
      {
        "txt": "} } public BigFraction(final double value, final int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); } public BigFraction(final int num) { this(BigInteger.valueOf(num), BigInteger.ONE); } public BigFraction(final int num, final int den) {"
      },
      {
        "txt": "this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } public BigFraction(final long num) { this(BigInteger.valueOf(num), BigInteger.ONE); } public BigFraction(final long num, final long den) { this(BigInteger.valueOf(num), BigInteger.valueOf(den)); } public static BigFraction getReducedFraction(final int numerator, final int denominator) {"
      },
      {
        "txt": "if (numerator == 0) { return ZERO; // normalize zero. } return new BigFraction(numerator, denominator); } public BigFraction abs() { return (BigInteger.ZERO.compareTo(numerator) <= 0) ? this : negate(); } public BigFraction add(final BigInteger bg) throws NullArgumentException { MathUtils.checkNotNull(bg);"
      },
      {
        "txt": "return new BigFraction(numerator.add(denominator.multiply(bg)), denominator); } public BigFraction add(final int i) { return add(BigInteger.valueOf(i)); } public BigFraction add(final long l) { return add(BigInteger.valueOf(l)); } public BigFraction add(final BigFraction fraction) { if (fraction == null) {"
      },
      {
        "txt": "throw new NullArgumentException(LocalizedFormats.FRACTION); } if (ZERO.equals(fraction)) { return this; } BigInteger num = null; BigInteger den = null; if (denominator.equals(fraction.denominator)) { num = numerator.add(fraction.numerator); den = denominator;"
      },
      {
        "txt": "} else { num = (numerator.multiply(fraction.denominator)).add((fraction.numerator).multiply(denominator)); den = denominator.multiply(fraction.denominator); } return new BigFraction(num, den); } public BigDecimal bigDecimalValue() { return new BigDecimal(numerator).divide(new BigDecimal(denominator)); } public BigDecimal bigDecimalValue(final int roundingMode) {"
      },
      {
        "txt": "return new BigDecimal(numerator).divide(new BigDecimal(denominator), roundingMode); } public BigDecimal bigDecimalValue(final int scale, final int roundingMode) { return new BigDecimal(numerator).divide(new BigDecimal(denominator), scale, roundingMode); } public int compareTo(final BigFraction object) { BigInteger nOd = numerator.multiply(object.denominator); BigInteger dOn = denominator.multiply(object.numerator); return nOd.compareTo(dOn); }"
      },
      {
        "txt": "public BigFraction divide(final BigInteger bg) { if (bg == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (BigInteger.ZERO.equals(bg)) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR); } return new BigFraction(numerator, denominator.multiply(bg)); } public BigFraction divide(final int i) {"
      },
      {
        "txt": "return divide(BigInteger.valueOf(i)); } public BigFraction divide(final long l) { return divide(BigInteger.valueOf(l)); } public BigFraction divide(final BigFraction fraction) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (BigInteger.ZERO.equals(fraction.numerator)) {"
      },
      {
        "txt": "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR); } return multiply(fraction.reciprocal()); } @Override public double doubleValue() { double result = numerator.doubleValue() / denominator.doubleValue(); if (Double.isNaN(result)) { int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Double.MAX_VALUE);"
      },
      {
        "txt": "result = numerator.shiftRight(shift).doubleValue() / denominator.shiftRight(shift).doubleValue(); } return result; } @Override public boolean equals(final Object other) { boolean ret = false; if (this == other) { ret = true;"
      },
      {
        "txt": "} else if (other instanceof BigFraction) { BigFraction rhs = ((BigFraction) other).reduce(); BigFraction thisOne = this.reduce(); ret = thisOne.numerator.equals(rhs.numerator) && thisOne.denominator.equals(rhs.denominator); } return ret; } @Override public float floatValue() { float result = numerator.floatValue() / denominator.floatValue();"
      },
      {
        "txt": "if (Double.isNaN(result)) { int shift = Math.max(numerator.bitLength(), denominator.bitLength()) - FastMath.getExponent(Float.MAX_VALUE); result = numerator.shiftRight(shift).floatValue() / denominator.shiftRight(shift).floatValue(); } return result; } public BigInteger getDenominator() { return denominator;"
      },
      {
        "txt": "} public int getDenominatorAsInt() { return denominator.intValue(); } public long getDenominatorAsLong() { return denominator.longValue(); } public BigInteger getNumerator() { return numerator; }"
      },
      {
        "txt": "public int getNumeratorAsInt() { return numerator.intValue(); } public long getNumeratorAsLong() { return numerator.longValue(); } @Override public int hashCode() { return 37 * (37 * 17 + numerator.hashCode()) + denominator.hashCode(); }"
      },
      {
        "txt": "@Override public int intValue() { return numerator.divide(denominator).intValue(); } @Override public long longValue() { return numerator.divide(denominator).longValue(); } public BigFraction multiply(final BigInteger bg) { if (bg == null) {"
      },
      {
        "txt": "throw new NullArgumentException(); } return new BigFraction(bg.multiply(numerator), denominator); } public BigFraction multiply(final int i) { return multiply(BigInteger.valueOf(i)); } public BigFraction multiply(final long l) { return multiply(BigInteger.valueOf(l)); }"
      },
      {
        "txt": "public BigFraction multiply(final BigFraction fraction) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (numerator.equals(BigInteger.ZERO) || fraction.numerator.equals(BigInteger.ZERO)) { return ZERO; } return new BigFraction(numerator.multiply(fraction.numerator), denominator.multiply(fraction.denominator));"
      },
      {
        "txt": "} public BigFraction negate() { return new BigFraction(numerator.negate(), denominator); } public double percentageValue() { return multiply(ONE_HUNDRED).doubleValue(); } public BigFraction pow(final int exponent) { if (exponent < 0) { return new BigFraction(denominator.pow(-exponent), numerator.pow(-exponent));"
      },
      {
        "txt": "} return new BigFraction(numerator.pow(exponent), denominator.pow(exponent)); } public BigFraction pow(final long exponent) { if (exponent < 0) { return new BigFraction(ArithmeticUtils.pow(denominator, -exponent), ArithmeticUtils.pow(numerator, -exponent)); } return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent));"
      },
      {
        "txt": "} public BigFraction pow(final BigInteger exponent) { if (exponent.compareTo(BigInteger.ZERO) < 0) { final BigInteger eNeg = exponent.negate(); return new BigFraction(ArithmeticUtils.pow(denominator, eNeg), ArithmeticUtils.pow(numerator, eNeg)); } return new BigFraction(ArithmeticUtils.pow(numerator, exponent), ArithmeticUtils.pow(denominator, exponent)); }"
      },
      {
        "txt": "public double pow(final double exponent) { return FastMath.pow(numerator.doubleValue(), exponent) / FastMath.pow(denominator.doubleValue(), exponent); } public BigFraction reciprocal() { return new BigFraction(denominator, numerator); } public BigFraction reduce() { final BigInteger gcd = numerator.gcd(denominator); return new BigFraction(numerator.divide(gcd), denominator.divide(gcd));"
      },
      {
        "txt": "} public BigFraction subtract(final BigInteger bg) { if (bg == null) { throw new NullArgumentException(); } return new BigFraction(numerator.subtract(denominator.multiply(bg)), denominator); } public BigFraction subtract(final int i) { return subtract(BigInteger.valueOf(i)); }"
      },
      {
        "txt": "public BigFraction subtract(final long l) { return subtract(BigInteger.valueOf(l)); } public BigFraction subtract(final BigFraction fraction) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (ZERO.equals(fraction)) { return this; }"
      },
      {
        "txt": "BigInteger num = null; BigInteger den = null; if (denominator.equals(fraction.denominator)) { num = numerator.subtract(fraction.numerator); den = denominator; } else { num = (numerator.multiply(fraction.denominator)).subtract((fraction.numerator).multiply(denominator)); den = denominator.multiply(fraction.denominator); } return new BigFraction(num, den);"
      },
      {
        "txt": "} @Override public String toString() { String str = null; if (BigInteger.ONE.equals(denominator)) { str = numerator.toString(); } else if (BigInteger.ZERO.equals(numerator)) { str = \"0\"; } else { str = numerator + \" / \" + denominator;"
      },
      {
        "txt": "} return str; } public BigFractionField getField() { return BigFractionField.getInstance(); }"
      }
    ]
  },
  {
    "id": 2450,
    "file_path": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
    "start-bug-line": 215,
    "end-bug-line": 215,
    "bug": "",
    "fix": "if (epsilon == 0.0 && FastMath.abs(q1) < maxDenominator) { break; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.fraction; import java.io.Serializable; import java.math.BigInteger; import org.apache.commons.math3.FieldElement; import org.apache.commons.math3.exception.util.LocalizedFormats;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.MathArithmeticException; import org.apache.commons.math3.exception.NullArgumentException; import org.apache.commons.math3.util.ArithmeticUtils; import org.apache.commons.math3.util.FastMath; public class Fraction extends Number implements FieldElement<Fraction>, Comparable<Fraction>, Serializable { public static final Fraction TWO = new Fraction(2, 1); public static final Fraction ONE = new Fraction(1, 1); public static final Fraction ZERO = new Fraction(0, 1);"
      },
      {
        "txt": "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5); public static final Fraction ONE_FIFTH = new Fraction(1, 5); public static final Fraction ONE_HALF = new Fraction(1, 2); public static final Fraction ONE_QUARTER = new Fraction(1, 4); public static final Fraction ONE_THIRD = new Fraction(1, 3); public static final Fraction THREE_FIFTHS = new Fraction(3, 5); public static final Fraction THREE_QUARTERS = new Fraction(3, 4); public static final Fraction TWO_FIFTHS = new Fraction(2, 5); public static final Fraction TWO_QUARTERS = new Fraction(2, 4); public static final Fraction TWO_THIRDS = new Fraction(2, 3);"
      },
      {
        "txt": "public static final Fraction MINUS_ONE = new Fraction(-1, 1); private static final long serialVersionUID = 3698073679419233275L; private static final double DEFAULT_EPSILON = 1e-5; private final int denominator; private final int numerator; public Fraction(double value) throws FractionConversionException { this(value, DEFAULT_EPSILON, 100); } public Fraction(double value, double epsilon, int maxIterations) throws FractionConversionException"
      },
      {
        "txt": "{ this(value, epsilon, Integer.MAX_VALUE, maxIterations); } public Fraction(double value, int maxDenominator) throws FractionConversionException { this(value, 0, maxDenominator, 100); } private Fraction(double value, double epsilon, int maxDenominator, int maxIterations) throws FractionConversionException"
      },
      {
        "txt": "{ long overflow = Integer.MAX_VALUE; double r0 = value; long a0 = (long)FastMath.floor(r0); if (FastMath.abs(a0) > overflow) { throw new FractionConversionException(value, a0, 1l); } if (FastMath.abs(a0 - value) < epsilon) { this.numerator = (int) a0; this.denominator = 1;"
      },
      {
        "txt": "return; } long p0 = 1; long q0 = 0; long p1 = a0; long q1 = 1; long p2 = 0; long q2 = 1; int n = 0; boolean stop = false;"
      },
      {
        "txt": "++n; double r1 = 1.0 / (r0 - a0); long a1 = (long)FastMath.floor(r1); p2 = (a1 * p1) + p0; q2 = (a1 * q1) + q0; if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) { <extra_id_0> } double convergent = (double)p2 / (double)q2; if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) { p0 = p1; p1 = p2; q0 = q1;"
      },
      {
        "txt": "p1 = p2; q0 = q1; q1 = q2; a0 = a1; r0 = r1; } else { stop = true; } } while (!stop); if (n >= maxIterations) {"
      },
      {
        "txt": "throw new FractionConversionException(value, maxIterations); } if (q2 < maxDenominator) { this.numerator = (int) p2; this.denominator = (int) q2; } else { this.numerator = (int) p1; this.denominator = (int) q1; } }"
      },
      {
        "txt": "public Fraction(int num) { this(num, 1); } public Fraction(int num, int den) { if (den == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, num, den); } if (den < 0) { if (num == Integer.MIN_VALUE ||"
      },
      {
        "txt": "den == Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, num, den); } num = -num; den = -den; } final int d = ArithmeticUtils.gcd(num, den); if (d > 1) { num /= d;"
      },
      {
        "txt": "den /= d; } if (den < 0) { num = -num; den = -den; } this.numerator = num; this.denominator = den; } public Fraction abs() {"
      },
      {
        "txt": "Fraction ret; if (numerator >= 0) { ret = this; } else { ret = negate(); } return ret; } public int compareTo(Fraction object) { long nOd = ((long) numerator) * object.denominator;"
      },
      {
        "txt": "long dOn = ((long) denominator) * object.numerator; return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0); } @Override public double doubleValue() { return (double)numerator / (double)denominator; } @Override public boolean equals(Object other) { if (this == other) {"
      },
      {
        "txt": "return true; } if (other instanceof Fraction) { Fraction rhs = (Fraction)other; return (numerator == rhs.numerator) && (denominator == rhs.denominator); } return false; } @Override"
      },
      {
        "txt": "public float floatValue() { return (float)doubleValue(); } public int getDenominator() { return denominator; } public int getNumerator() { return numerator; } @Override"
      },
      {
        "txt": "public int hashCode() { return 37 * (37 * 17 + numerator) + denominator; } @Override public int intValue() { return (int)doubleValue(); } @Override public long longValue() { return (long)doubleValue();"
      },
      {
        "txt": "} public Fraction negate() { if (numerator==Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator); } return new Fraction(-numerator, denominator); } public Fraction reciprocal() { return new Fraction(denominator, numerator); }"
      },
      {
        "txt": "public Fraction add(Fraction fraction) { return addSub(fraction, true /* add */); } public Fraction add(final int i) { return new Fraction(numerator + i * denominator, denominator); } public Fraction subtract(Fraction fraction) { return addSub(fraction, false /* subtract */); } public Fraction subtract(final int i) {"
      },
      {
        "txt": "return new Fraction(numerator - i * denominator, denominator); } private Fraction addSub(Fraction fraction, boolean isAdd) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (numerator == 0) { return isAdd ? fraction : fraction.negate(); } if (fraction.numerator == 0) {"
      },
      {
        "txt": "return this; } int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator); if (d1==1) { int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator); int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator); return new Fraction (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) : ArithmeticUtils.subAndCheck(uvp, upv), ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));"
      },
      {
        "txt": "} BigInteger uvp = BigInteger.valueOf(numerator) .multiply(BigInteger.valueOf(fraction.denominator/d1)); BigInteger upv = BigInteger.valueOf(fraction.numerator) .multiply(BigInteger.valueOf(denominator/d1)); BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv); int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue(); int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1); BigInteger w = t.divide(BigInteger.valueOf(d2)); if (w.bitLength() > 31) {"
      },
      {
        "txt": "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY, w); } return new Fraction (w.intValue(), ArithmeticUtils.mulAndCheck(denominator/d1, fraction.denominator/d2)); } public Fraction multiply(Fraction fraction) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION);"
      },
      {
        "txt": "} if (numerator == 0 || fraction.numerator == 0) { return ZERO; } int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator); int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator); return getReducedFraction (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2), ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1)); }"
      },
      {
        "txt": "public Fraction multiply(final int i) { return new Fraction(numerator * i, denominator); } public Fraction divide(Fraction fraction) { if (fraction == null) { throw new NullArgumentException(LocalizedFormats.FRACTION); } if (fraction.numerator == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY, fraction.numerator, fraction.denominator);"
      },
      {
        "txt": "} return multiply(fraction.reciprocal()); } public Fraction divide(final int i) { return new Fraction(numerator, denominator * i); } public double percentageValue() { return 100 * doubleValue(); } public static Fraction getReducedFraction(int numerator, int denominator) {"
      },
      {
        "txt": "if (denominator == 0) { throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION, numerator, denominator); } if (numerator==0) { return ZERO; // normalize zero. } if (denominator==Integer.MIN_VALUE && (numerator&1)==0) { numerator/=2; denominator/=2; }"
      },
      {
        "txt": "if (denominator < 0) { if (numerator==Integer.MIN_VALUE || denominator==Integer.MIN_VALUE) { throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator); } numerator = -numerator; denominator = -denominator; } int gcd = ArithmeticUtils.gcd(numerator, denominator);"
      },
      {
        "txt": "numerator /= gcd; denominator /= gcd; return new Fraction(numerator, denominator); } @Override public String toString() { String str = null; if (denominator == 1) { str = Integer.toString(numerator); } else if (numerator == 0) {"
      },
      {
        "txt": "str = \"0\"; } else { str = numerator + \" / \" + denominator; } return str; } public FractionField getField() { return FractionField.getInstance(); }"
      }
    ]
  }
]
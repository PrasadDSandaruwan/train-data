[
  {
    "id": 2474,
    "file_path": "src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
    "start-bug-line": 346,
    "end-bug-line": 347,
    "bug": "currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop();",
    "fix": "for (final EventState state : eventsStates) { state.stepAccepted(eventT, eventY); isLastStep = isLastStep || state.stop(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.ode; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator;"
      },
      {
        "txt": "import java.util.List; import java.util.SortedSet; import java.util.TreeSet; import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver; import org.apache.commons.math3.analysis.solvers.UnivariateSolver; import org.apache.commons.math3.exception.DimensionMismatchException; import org.apache.commons.math3.exception.MaxCountExceededException; import org.apache.commons.math3.exception.NoBracketingException; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.util.LocalizedFormats;"
      },
      {
        "txt": "import org.apache.commons.math3.ode.events.EventHandler; import org.apache.commons.math3.ode.events.EventState; import org.apache.commons.math3.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math3.ode.sampling.StepHandler; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.util.Incrementor; import org.apache.commons.math3.util.Precision; public abstract class AbstractIntegrator implements FirstOrderIntegrator { protected Collection<StepHandler> stepHandlers; protected double stepStart;"
      },
      {
        "txt": "protected double stepSize; protected boolean isLastStep; protected boolean resetOccurred; private Collection<EventState> eventsStates; private boolean statesInitialized; private final String name; private Incrementor evaluations; private transient ExpandableStatefulODE expandable; public AbstractIntegrator(final String name) { this.name = name;"
      },
      {
        "txt": "stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize = Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); evaluations.resetCount(); } protected AbstractIntegrator() {"
      },
      {
        "txt": "this(null); } public String getName() { return name; } public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler); } public Collection<StepHandler> getStepHandlers() { return Collections.unmodifiableCollection(stepHandlers);"
      },
      {
        "txt": "} public void clearStepHandlers() { stepHandlers.clear(); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount,"
      },
      {
        "txt": "new BracketingNthOrderBrentSolver(convergence, 5)); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); }"
      },
      {
        "txt": "public Collection<EventHandler> getEventHandlers() { final List<EventHandler> list = new ArrayList<EventHandler>(); for (EventState state : eventsStates) { list.add(state.getEventHandler()); } return Collections.unmodifiableCollection(list); } public void clearEventHandlers() { eventsStates.clear(); }"
      },
      {
        "txt": "public double getCurrentStepStart() { return stepStart; } public double getCurrentSignedStepsize() { return stepSize; } public void setMaxEvaluations(int maxEvaluations) { evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); } public int getMaxEvaluations() {"
      },
      {
        "txt": "return evaluations.getMaximalCount(); } public int getEvaluations() { return evaluations.getCount(); } protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); }"
      },
      {
        "txt": "for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations; } public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y)"
      },
      {
        "txt": "throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); } final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0);"
      },
      {
        "txt": "expandableODE.setPrimaryState(y0); integrate(expandableODE, t); System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } public abstract void integrate(ExpandableStatefulODE equations, double t) throws NumberIsTooSmallException, DimensionMismatchException, MaxCountExceededException, NoBracketingException; public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException, DimensionMismatchException {"
      },
      {
        "txt": "evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); } protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; } protected double acceptStep(final AbstractStepInterpolator interpolator, final double[] y, final double[] yDot, final double tEnd) throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime();"
      },
      {
        "txt": "final double currentT = interpolator.getGlobalCurrentTime(); if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; } final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { public int compare(EventState es0, EventState es1) {"
      },
      {
        "txt": "return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) { final Iterator<EventState> iterator = occuringEvents.iterator();"
      },
      {
        "txt": "iterator.remove(); final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone(); <extra_id_0> for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) { System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) {"
      },
      {
        "txt": "System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) { System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot);"
      },
      {
        "txt": "resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); if (currentEvent.evaluateStep(interpolator)) {"
      },
      {
        "txt": "occuringEvents.add(currentEvent); } } interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1);"
      },
      {
        "txt": "for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; } protected void sanityChecks(final ExpandableStatefulODE equations, final double t) throws NumberIsTooSmallException, DimensionMismatchException { final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()), FastMath.abs(t))); final double dt = FastMath.abs(equations.getTime() - t);"
      },
      {
        "txt": "if (dt <= threshold) { throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false); } }"
      }
    ]
  },
  {
    "id": 2475,
    "file_path": "src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
    "start-bug-line": 357,
    "end-bug-line": 359,
    "bug": "for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.ode; import java.util.ArrayList; import java.util.Collection;"
      },
      {
        "txt": "import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; import java.util.SortedSet; import java.util.TreeSet; import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver; import org.apache.commons.math3.analysis.solvers.UnivariateSolver; import org.apache.commons.math3.exception.DimensionMismatchException; import org.apache.commons.math3.exception.MaxCountExceededException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.NoBracketingException; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.ode.events.EventHandler; import org.apache.commons.math3.ode.events.EventState; import org.apache.commons.math3.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math3.ode.sampling.StepHandler; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.util.Incrementor; import org.apache.commons.math3.util.Precision;"
      },
      {
        "txt": "public abstract class AbstractIntegrator implements FirstOrderIntegrator { protected Collection<StepHandler> stepHandlers; protected double stepStart; protected double stepSize; protected boolean isLastStep; protected boolean resetOccurred; private Collection<EventState> eventsStates; private boolean statesInitialized; private final String name; private Incrementor evaluations;"
      },
      {
        "txt": "private transient ExpandableStatefulODE expandable; public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize = Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1);"
      },
      {
        "txt": "evaluations.resetCount(); } protected AbstractIntegrator() { this(null); } public String getName() { return name; } public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler);"
      },
      {
        "txt": "} public Collection<StepHandler> getStepHandlers() { return Collections.unmodifiableCollection(stepHandlers); } public void clearStepHandlers() { stepHandlers.clear(); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence,"
      },
      {
        "txt": "final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) {"
      },
      {
        "txt": "eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); } public Collection<EventHandler> getEventHandlers() { final List<EventHandler> list = new ArrayList<EventHandler>(); for (EventState state : eventsStates) { list.add(state.getEventHandler()); } return Collections.unmodifiableCollection(list); }"
      },
      {
        "txt": "public void clearEventHandlers() { eventsStates.clear(); } public double getCurrentStepStart() { return stepStart; } public double getCurrentSignedStepsize() { return stepSize; } public void setMaxEvaluations(int maxEvaluations) {"
      },
      {
        "txt": "evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); } public int getMaxEvaluations() { return evaluations.getMaximalCount(); } public int getEvaluations() { return evaluations.getCount(); } protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount();"
      },
      {
        "txt": "for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations;"
      },
      {
        "txt": "} public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension());"
      },
      {
        "txt": "} final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0); integrate(expandableODE, t); System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } public abstract void integrate(ExpandableStatefulODE equations, double t) throws NumberIsTooSmallException, DimensionMismatchException,"
      },
      {
        "txt": "MaxCountExceededException, NoBracketingException; public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException, DimensionMismatchException { evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); } protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; } protected double acceptStep(final AbstractStepInterpolator interpolator,"
      },
      {
        "txt": "final double[] y, final double[] yDot, final double tEnd) throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }"
      },
      {
        "txt": "final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { occuringEvents.add(state); }"
      },
      {
        "txt": "} while (!occuringEvents.isEmpty()) { final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove(); final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();"
      },
      {
        "txt": "isLastStep = currentEvent.stop(); for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) { System.arraycopy(eventY, 0, y, 0, y.length); <extra_id_0> return eventT; } boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) { System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot);"
      },
      {
        "txt": "System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } previousT = eventT; interpolator.setSoftPreviousTime(eventT);"
      },
      {
        "txt": "interpolator.setSoftCurrentTime(currentT); if (currentEvent.evaluateStep(interpolator)) { occuringEvents.add(currentEvent); } } interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop();"
      },
      {
        "txt": "} isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; } protected void sanityChecks(final ExpandableStatefulODE equations, final double t) throws NumberIsTooSmallException, DimensionMismatchException { final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),"
      },
      {
        "txt": "FastMath.abs(t))); final double dt = FastMath.abs(equations.getTime() - t); if (dt <= threshold) { throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false); } }"
      }
    ]
  },
  {
    "id": 2476,
    "file_path": "src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
    "start-bug-line": 363,
    "end-bug-line": 363,
    "bug": "boolean needReset = currentEvent.reset(eventT, eventY);",
    "fix": "boolean needReset = false; for (final EventState state : eventsStates) { needReset =  needReset || state.reset(eventT, eventY); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.ode; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; import java.util.SortedSet;"
      },
      {
        "txt": "import java.util.TreeSet; import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver; import org.apache.commons.math3.analysis.solvers.UnivariateSolver; import org.apache.commons.math3.exception.DimensionMismatchException; import org.apache.commons.math3.exception.MaxCountExceededException; import org.apache.commons.math3.exception.NoBracketingException; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.ode.events.EventHandler; import org.apache.commons.math3.ode.events.EventState;"
      },
      {
        "txt": "import org.apache.commons.math3.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math3.ode.sampling.StepHandler; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.util.Incrementor; import org.apache.commons.math3.util.Precision; public abstract class AbstractIntegrator implements FirstOrderIntegrator { protected Collection<StepHandler> stepHandlers; protected double stepStart; protected double stepSize; protected boolean isLastStep;"
      },
      {
        "txt": "protected boolean resetOccurred; private Collection<EventState> eventsStates; private boolean statesInitialized; private final String name; private Incrementor evaluations; private transient ExpandableStatefulODE expandable; public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN;"
      },
      {
        "txt": "stepSize = Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1); evaluations.resetCount(); } protected AbstractIntegrator() { this(null); }"
      },
      {
        "txt": "public String getName() { return name; } public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler); } public Collection<StepHandler> getStepHandlers() { return Collections.unmodifiableCollection(stepHandlers); } public void clearStepHandlers() {"
      },
      {
        "txt": "stepHandlers.clear(); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); }"
      },
      {
        "txt": "public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) { eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); } public Collection<EventHandler> getEventHandlers() { final List<EventHandler> list = new ArrayList<EventHandler>();"
      },
      {
        "txt": "for (EventState state : eventsStates) { list.add(state.getEventHandler()); } return Collections.unmodifiableCollection(list); } public void clearEventHandlers() { eventsStates.clear(); } public double getCurrentStepStart() { return stepStart;"
      },
      {
        "txt": "} public double getCurrentSignedStepsize() { return stepSize; } public void setMaxEvaluations(int maxEvaluations) { evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); } public int getMaxEvaluations() { return evaluations.getMaximalCount(); }"
      },
      {
        "txt": "public int getEvaluations() { return evaluations.getCount(); } protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount(); for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t);"
      },
      {
        "txt": "} setStateInitialized(false); } protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations; } public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException {"
      },
      {
        "txt": "if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension()); } final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0); integrate(expandableODE, t);"
      },
      {
        "txt": "System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } public abstract void integrate(ExpandableStatefulODE equations, double t) throws NumberIsTooSmallException, DimensionMismatchException, MaxCountExceededException, NoBracketingException; public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException, DimensionMismatchException { evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot);"
      },
      {
        "txt": "} protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; } protected double acceptStep(final AbstractStepInterpolator interpolator, final double[] y, final double[] yDot, final double tEnd) throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); if (! statesInitialized) {"
      },
      {
        "txt": "for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; } final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); }"
      },
      {
        "txt": "}); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { occuringEvents.add(state); } } while (!occuringEvents.isEmpty()) { final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove();"
      },
      {
        "txt": "final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone(); currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); }"
      },
      {
        "txt": "System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } <extra_id_0> if (needReset) { System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY);"
      },
      {
        "txt": "for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); } return eventT; } previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); if (currentEvent.evaluateStep(interpolator)) { occuringEvents.add(currentEvent);"
      },
      {
        "txt": "} } interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop(); } isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1); for (StepHandler handler : stepHandlers) {"
      },
      {
        "txt": "handler.handleStep(interpolator, isLastStep); } return currentT; } protected void sanityChecks(final ExpandableStatefulODE equations, final double t) throws NumberIsTooSmallException, DimensionMismatchException { final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()), FastMath.abs(t))); final double dt = FastMath.abs(equations.getTime() - t); if (dt <= threshold) {"
      },
      {
        "txt": "throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false); } }"
      }
    ]
  },
  {
    "id": 2477,
    "file_path": "src/main/java/org/apache/commons/math3/ode/AbstractIntegrator.java",
    "start-bug-line": 370,
    "end-bug-line": 372,
    "bug": "for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math3.ode; import java.util.ArrayList; import java.util.Collection;"
      },
      {
        "txt": "import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; import java.util.SortedSet; import java.util.TreeSet; import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver; import org.apache.commons.math3.analysis.solvers.UnivariateSolver; import org.apache.commons.math3.exception.DimensionMismatchException; import org.apache.commons.math3.exception.MaxCountExceededException;"
      },
      {
        "txt": "import org.apache.commons.math3.exception.NoBracketingException; import org.apache.commons.math3.exception.NumberIsTooSmallException; import org.apache.commons.math3.exception.util.LocalizedFormats; import org.apache.commons.math3.ode.events.EventHandler; import org.apache.commons.math3.ode.events.EventState; import org.apache.commons.math3.ode.sampling.AbstractStepInterpolator; import org.apache.commons.math3.ode.sampling.StepHandler; import org.apache.commons.math3.util.FastMath; import org.apache.commons.math3.util.Incrementor; import org.apache.commons.math3.util.Precision;"
      },
      {
        "txt": "public abstract class AbstractIntegrator implements FirstOrderIntegrator { protected Collection<StepHandler> stepHandlers; protected double stepStart; protected double stepSize; protected boolean isLastStep; protected boolean resetOccurred; private Collection<EventState> eventsStates; private boolean statesInitialized; private final String name; private Incrementor evaluations;"
      },
      {
        "txt": "private transient ExpandableStatefulODE expandable; public AbstractIntegrator(final String name) { this.name = name; stepHandlers = new ArrayList<StepHandler>(); stepStart = Double.NaN; stepSize = Double.NaN; eventsStates = new ArrayList<EventState>(); statesInitialized = false; evaluations = new Incrementor(); setMaxEvaluations(-1);"
      },
      {
        "txt": "evaluations.resetCount(); } protected AbstractIntegrator() { this(null); } public String getName() { return name; } public void addStepHandler(final StepHandler handler) { stepHandlers.add(handler);"
      },
      {
        "txt": "} public Collection<StepHandler> getStepHandlers() { return Collections.unmodifiableCollection(stepHandlers); } public void clearStepHandlers() { stepHandlers.clear(); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence,"
      },
      {
        "txt": "final int maxIterationCount) { addEventHandler(handler, maxCheckInterval, convergence, maxIterationCount, new BracketingNthOrderBrentSolver(convergence, 5)); } public void addEventHandler(final EventHandler handler, final double maxCheckInterval, final double convergence, final int maxIterationCount, final UnivariateSolver solver) {"
      },
      {
        "txt": "eventsStates.add(new EventState(handler, maxCheckInterval, convergence, maxIterationCount, solver)); } public Collection<EventHandler> getEventHandlers() { final List<EventHandler> list = new ArrayList<EventHandler>(); for (EventState state : eventsStates) { list.add(state.getEventHandler()); } return Collections.unmodifiableCollection(list); }"
      },
      {
        "txt": "public void clearEventHandlers() { eventsStates.clear(); } public double getCurrentStepStart() { return stepStart; } public double getCurrentSignedStepsize() { return stepSize; } public void setMaxEvaluations(int maxEvaluations) {"
      },
      {
        "txt": "evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations); } public int getMaxEvaluations() { return evaluations.getMaximalCount(); } public int getEvaluations() { return evaluations.getCount(); } protected void initIntegration(final double t0, final double[] y0, final double t) { evaluations.resetCount();"
      },
      {
        "txt": "for (final EventState state : eventsStates) { state.getEventHandler().init(t0, y0, t); } for (StepHandler handler : stepHandlers) { handler.init(t0, y0, t); } setStateInitialized(false); } protected void setEquations(final ExpandableStatefulODE equations) { this.expandable = equations;"
      },
      {
        "txt": "} public double integrate(final FirstOrderDifferentialEquations equations, final double t0, final double[] y0, final double t, final double[] y) throws DimensionMismatchException, NumberIsTooSmallException, MaxCountExceededException, NoBracketingException { if (y0.length != equations.getDimension()) { throw new DimensionMismatchException(y0.length, equations.getDimension()); } if (y.length != equations.getDimension()) { throw new DimensionMismatchException(y.length, equations.getDimension());"
      },
      {
        "txt": "} final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations); expandableODE.setTime(t0); expandableODE.setPrimaryState(y0); integrate(expandableODE, t); System.arraycopy(expandableODE.getPrimaryState(), 0, y, 0, y.length); return expandableODE.getTime(); } public abstract void integrate(ExpandableStatefulODE equations, double t) throws NumberIsTooSmallException, DimensionMismatchException,"
      },
      {
        "txt": "MaxCountExceededException, NoBracketingException; public void computeDerivatives(final double t, final double[] y, final double[] yDot) throws MaxCountExceededException, DimensionMismatchException { evaluations.incrementCount(); expandable.computeDerivatives(t, y, yDot); } protected void setStateInitialized(final boolean stateInitialized) { this.statesInitialized = stateInitialized; } protected double acceptStep(final AbstractStepInterpolator interpolator,"
      },
      {
        "txt": "final double[] y, final double[] yDot, final double tEnd) throws MaxCountExceededException, DimensionMismatchException, NoBracketingException { double previousT = interpolator.getGlobalPreviousTime(); final double currentT = interpolator.getGlobalCurrentTime(); if (! statesInitialized) { for (EventState state : eventsStates) { state.reinitializeBegin(interpolator); } statesInitialized = true; }"
      },
      {
        "txt": "final int orderingSign = interpolator.isForward() ? +1 : -1; SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() { public int compare(EventState es0, EventState es1) { return orderingSign * Double.compare(es0.getEventTime(), es1.getEventTime()); } }); for (final EventState state : eventsStates) { if (state.evaluateStep(interpolator)) { occuringEvents.add(state); }"
      },
      {
        "txt": "} while (!occuringEvents.isEmpty()) { final Iterator<EventState> iterator = occuringEvents.iterator(); final EventState currentEvent = iterator.next(); iterator.remove(); final double eventT = currentEvent.getEventTime(); interpolator.setSoftPreviousTime(previousT); interpolator.setSoftCurrentTime(eventT); interpolator.setInterpolatedTime(eventT); final double[] eventY = interpolator.getInterpolatedState().clone();"
      },
      {
        "txt": "currentEvent.stepAccepted(eventT, eventY); isLastStep = currentEvent.stop(); for (final StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } if (isLastStep) { System.arraycopy(eventY, 0, y, 0, y.length); for (final EventState remaining : occuringEvents) { remaining.stepAccepted(eventT, eventY); }"
      },
      {
        "txt": "} boolean needReset = currentEvent.reset(eventT, eventY); if (needReset) { System.arraycopy(eventY, 0, y, 0, y.length); computeDerivatives(eventT, y, yDot); resetOccurred = true; <extra_id_0> return eventT; } previousT = eventT; interpolator.setSoftPreviousTime(eventT); interpolator.setSoftCurrentTime(currentT); if (currentEvent.evaluateStep(interpolator)) {"
      },
      {
        "txt": "interpolator.setSoftCurrentTime(currentT); if (currentEvent.evaluateStep(interpolator)) { occuringEvents.add(currentEvent); } } interpolator.setInterpolatedTime(currentT); final double[] currentY = interpolator.getInterpolatedState(); for (final EventState state : eventsStates) { state.stepAccepted(currentT, currentY); isLastStep = isLastStep || state.stop();"
      },
      {
        "txt": "} isLastStep = isLastStep || Precision.equals(currentT, tEnd, 1); for (StepHandler handler : stepHandlers) { handler.handleStep(interpolator, isLastStep); } return currentT; } protected void sanityChecks(final ExpandableStatefulODE equations, final double t) throws NumberIsTooSmallException, DimensionMismatchException { final double threshold = 1000 * FastMath.ulp(FastMath.max(FastMath.abs(equations.getTime()),"
      },
      {
        "txt": "FastMath.abs(t))); final double dt = FastMath.abs(equations.getTime() - t); if (dt <= threshold) { throw new NumberIsTooSmallException(LocalizedFormats.TOO_SMALL_INTEGRATION_INTERVAL, dt, threshold, false); } }"
      }
    ]
  }
]
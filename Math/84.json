[
  {
    "id": 2686,
    "file_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
    "start-bug-line": 64,
    "end-bug-line": 64,
    "bug": "",
    "fix": "final RealConvergenceChecker checker = getConvergenceChecker();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.direct; import java.util.Comparator; import org.apache.commons.math.FunctionEvaluationException;"
      },
      {
        "txt": "import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.RealConvergenceChecker; import org.apache.commons.math.optimization.RealPointValuePair; public class MultiDirectional extends DirectSearchOptimizer { private final double khi; private final double gamma; public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; }"
      },
      {
        "txt": "this.khi = khi; this.gamma = gamma; } @Override protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { <extra_id_0> incrementIterationsCounter(); final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0]; final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) { final RealPointValuePair[] reflectedSimplex = simplex;"
      },
      {
        "txt": "if (comparator.compare(reflected, best) < 0) { final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator); if (comparator.compare(reflected, expanded) <= 0) { simplex = reflectedSimplex; } return; } final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) {"
      },
      {
        "txt": "return; } } } private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length;"
      },
      {
        "txt": "simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal = original[i].getPointRef(); final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); }"
      },
      {
        "txt": "evaluateSimplex(comparator); return simplex[0]; }"
      }
    ]
  },
  {
    "id": 2687,
    "file_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
    "start-bug-line": 92,
    "end-bug-line": 92,
    "bug": "",
    "fix": "return; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.direct; import java.util.Comparator; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.RealConvergenceChecker; import org.apache.commons.math.optimization.RealPointValuePair; public class MultiDirectional extends DirectSearchOptimizer { private final double khi;"
      },
      {
        "txt": "private final double gamma; public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; } public MultiDirectional(final double khi, final double gamma) { this.khi = khi; this.gamma = gamma; } @Override"
      },
      {
        "txt": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter(); final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0]; final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) { final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
      },
      {
        "txt": "simplex = reflectedSimplex; } return; } final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) { <extra_id_0> return; } } } private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff,"
      },
      {
        "txt": "private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length; simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal = original[i].getPointRef();"
      },
      {
        "txt": "final double[] xTransformed = new double[n]; for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); } evaluateSimplex(comparator); return simplex[0]; }"
      }
    ]
  },
  {
    "id": 2688,
    "file_path": "src/main/java/org/apache/commons/math/optimization/direct/MultiDirectional.java",
    "start-bug-line": 94,
    "end-bug-line": 94,
    "bug": "",
    "fix": "final int iter = getIterations(); boolean converged = true; for (int i = 0; i < simplex.length; ++i) { converged &= checker.converged(iter, original[i], simplex[i]); } if (converged) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.math.optimization.direct; import java.util.Comparator; import org.apache.commons.math.FunctionEvaluationException; import org.apache.commons.math.optimization.OptimizationException; import org.apache.commons.math.optimization.RealConvergenceChecker; import org.apache.commons.math.optimization.RealPointValuePair; public class MultiDirectional extends DirectSearchOptimizer { private final double khi;"
      },
      {
        "txt": "private final double gamma; public MultiDirectional() { this.khi = 2.0; this.gamma = 0.5; } public MultiDirectional(final double khi, final double gamma) { this.khi = khi; this.gamma = gamma; } @Override"
      },
      {
        "txt": "protected void iterateSimplex(final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException, IllegalArgumentException { while (true) { incrementIterationsCounter(); final RealPointValuePair[] original = simplex; final RealPointValuePair best = original[0]; final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator); if (comparator.compare(reflected, best) < 0) { final RealPointValuePair[] reflectedSimplex = simplex; final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);"
      },
      {
        "txt": "simplex = reflectedSimplex; } return; } final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator); if (comparator.compare(contracted, best) < 0) { <extra_id_0> } } } private RealPointValuePair evaluateNewSimplex(final RealPointValuePair[] original, final double coeff, final Comparator<RealPointValuePair> comparator)"
      },
      {
        "txt": "final double coeff, final Comparator<RealPointValuePair> comparator) throws FunctionEvaluationException, OptimizationException { final double[] xSmallest = original[0].getPointRef(); final int n = xSmallest.length; simplex = new RealPointValuePair[n + 1]; simplex[0] = original[0]; for (int i = 1; i <= n; ++i) { final double[] xOriginal = original[i].getPointRef(); final double[] xTransformed = new double[n];"
      },
      {
        "txt": "for (int j = 0; j < n; ++j) { xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]); } simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false); } evaluateSimplex(comparator); return simplex[0]; }"
      }
    ]
  }
]
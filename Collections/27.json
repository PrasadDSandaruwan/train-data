[
  {
    "id": 980,
    "file_path": "src/main/java/org/apache/commons/collections4/map/MultiValueMap.java",
    "start-bug-line": 568,
    "end-bug-line": 568,
    "bug": "",
    "fix": "private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException { is.defaultReadObject(); // ensure that the de-serialized class is a Collection, COLLECTIONS-580 if (clazz != null && !Collection.class.isAssignableFrom(clazz)) { throw new UnsupportedOperationException(); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.collections4.map; import java.io.IOException; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.Serializable; import java.util.AbstractCollection; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.Map; import java.util.Set; import org.apache.commons.collections4.CollectionUtils; import org.apache.commons.collections4.Factory; import org.apache.commons.collections4.FunctorException; import org.apache.commons.collections4.MultiMap; import org.apache.commons.collections4.Transformer;"
      },
      {
        "txt": "import org.apache.commons.collections4.iterators.EmptyIterator; import org.apache.commons.collections4.iterators.IteratorChain; import org.apache.commons.collections4.iterators.LazyIteratorChain; import org.apache.commons.collections4.iterators.TransformIterator; @Deprecated public class MultiValueMap<K, V> extends AbstractMapDecorator<K, Object> implements MultiMap<K, V>, Serializable { private static final long serialVersionUID = -2214159910087182007L; private final Factory<? extends Collection<V>> collectionFactory; private transient Collection<V> valuesView; @SuppressWarnings({ \"unchecked\", \"rawtypes\" })"
      },
      {
        "txt": "public static <K, V> MultiValueMap<K, V> multiValueMap(final Map<K, ? super Collection<V>> map) { return MultiValueMap.<K, V, ArrayList> multiValueMap((Map<K, ? super Collection>) map, ArrayList.class); } public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Class<C> collectionClass) { return new MultiValueMap<K, V>(map, new ReflectionFactory<C>(collectionClass)); } public static <K, V, C extends Collection<V>> MultiValueMap<K, V> multiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory) { return new MultiValueMap<K, V>(map, collectionFactory);"
      },
      {
        "txt": "} @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public MultiValueMap() { this(new HashMap<K, V>(), new ReflectionFactory(ArrayList.class)); } @SuppressWarnings(\"unchecked\") protected <C extends Collection<V>> MultiValueMap(final Map<K, ? super C> map, final Factory<C> collectionFactory) { super((Map<K, Object>) map); if (collectionFactory == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The factory must not be null\"); } this.collectionFactory = collectionFactory; } private void writeObject(final ObjectOutputStream out) throws IOException { out.defaultWriteObject(); out.writeObject(map); } @SuppressWarnings(\"unchecked\") // (1) should only fail if input stream is incorrect private void readObject(final ObjectInputStream in) throws IOException, ClassNotFoundException {"
      },
      {
        "txt": "in.defaultReadObject(); map = (Map<K, Object>) in.readObject(); // (1) } @Override public void clear() { decorated().clear(); } @Override public boolean removeMapping(final Object key, final Object value) { final Collection<V> valuesForKey = getCollection(key);"
      },
      {
        "txt": "if (valuesForKey == null) { return false; } final boolean removed = valuesForKey.remove(value); if (removed == false) { return false; } if (valuesForKey.isEmpty()) { remove(key); }"
      },
      {
        "txt": "return true; } @Override @SuppressWarnings(\"unchecked\") public boolean containsValue(final Object value) { final Set<Map.Entry<K, Object>> pairs = decorated().entrySet(); if (pairs != null) { for (final Map.Entry<K, Object> entry : pairs) { if (((Collection<V>) entry.getValue()).contains(value)) { return true;"
      },
      {
        "txt": "} } } return false; } @Override @SuppressWarnings(\"unchecked\") public Object put(final K key, final Object value) { boolean result = false; Collection<V> coll = getCollection(key);"
      },
      {
        "txt": "if (coll == null) { coll = createCollection(1); // might produce a non-empty collection coll.add((V) value); if (coll.size() > 0) { decorated().put(key, coll); result = true; // map definitely changed } } else { result = coll.add((V) value); }"
      },
      {
        "txt": "return result ? value : null; } @Override @SuppressWarnings(\"unchecked\") public void putAll(final Map<? extends K, ?> map) { if (map instanceof MultiMap) { for (final Map.Entry<? extends K, Object> entry : ((MultiMap<? extends K, V>) map).entrySet()) { putAll(entry.getKey(), (Collection<V>) entry.getValue()); } } else {"
      },
      {
        "txt": "for (final Map.Entry<? extends K, ?> entry : map.entrySet()) { put(entry.getKey(), entry.getValue()); } } } @Override public Set<Entry<K, Object>> entrySet() { return super.entrySet(); } @Override"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public Collection<Object> values() { final Collection<V> vs = valuesView; return (Collection<Object>) (vs != null ? vs : (valuesView = new Values())); } public boolean containsValue(final Object key, final Object value) { final Collection<V> coll = getCollection(key); if (coll == null) { return false; }"
      },
      {
        "txt": "return coll.contains(value); } @SuppressWarnings(\"unchecked\") public Collection<V> getCollection(final Object key) { return (Collection<V>) decorated().get(key); } public int size(final Object key) { final Collection<V> coll = getCollection(key); if (coll == null) { return 0;"
      },
      {
        "txt": "} return coll.size(); } public boolean putAll(final K key, final Collection<V> values) { if (values == null || values.size() == 0) { return false; } boolean result = false; Collection<V> coll = getCollection(key); if (coll == null) {"
      },
      {
        "txt": "coll = createCollection(values.size()); // might produce a non-empty collection coll.addAll(values); if (coll.size() > 0) { decorated().put(key, coll); result = true; // map definitely changed } } else { result = coll.addAll(values); } return result;"
      },
      {
        "txt": "} public Iterator<V> iterator(final Object key) { if (!containsKey(key)) { return EmptyIterator.<V>emptyIterator(); } return new ValuesIterator(key); } public Iterator<Entry<K, V>> iterator() { final Collection<K> allKeys = new ArrayList<K>(keySet()); final Iterator<K> keyIterator = allKeys.iterator();"
      },
      {
        "txt": "return new LazyIteratorChain<Entry<K, V>>() { @Override protected Iterator<? extends Entry<K, V>> nextIterator(int count) { if ( ! keyIterator.hasNext() ) { return null; } final K key = keyIterator.next(); final Transformer<V, Entry<K, V>> transformer = new Transformer<V, Entry<K, V>>() { @Override public Entry<K, V> transform(final V input) {"
      },
      {
        "txt": "return new Entry<K, V>() { @Override public K getKey() { return key; } @Override public V getValue() { return input; } @Override"
      },
      {
        "txt": "public V setValue(V value) { throw new UnsupportedOperationException(); } }; } }; return new TransformIterator<V, Entry<K, V>>(new ValuesIterator(key), transformer); } }; }"
      },
      {
        "txt": "public int totalSize() { int total = 0; for (final Object v : decorated().values()) { total += CollectionUtils.size(v); } return total; } protected Collection<V> createCollection(final int size) { return collectionFactory.create(); }"
      },
      {
        "txt": "private class Values extends AbstractCollection<V> { @Override public Iterator<V> iterator() { final IteratorChain<V> chain = new IteratorChain<V>(); for (final K k : keySet()) { chain.addIterator(new ValuesIterator(k)); } return chain; } @Override"
      },
      {
        "txt": "public int size() { return totalSize(); } @Override public void clear() { MultiValueMap.this.clear(); } } private class ValuesIterator implements Iterator<V> { private final Object key;"
      },
      {
        "txt": "private final Collection<V> values; private final Iterator<V> iterator; public ValuesIterator(final Object key) { this.key = key; this.values = getCollection(key); this.iterator = values.iterator(); } @Override public void remove() { iterator.remove();"
      },
      {
        "txt": "if (values.isEmpty()) { MultiValueMap.this.remove(key); } } @Override public boolean hasNext() { return iterator.hasNext(); } @Override public V next() {"
      },
      {
        "txt": "return iterator.next(); } } private static class ReflectionFactory<T extends Collection<?>> implements Factory<T>, Serializable { private static final long serialVersionUID = 2986114157496788874L; private final Class<T> clazz; public ReflectionFactory(final Class<T> clazz) { this.clazz = clazz; } @Override"
      },
      {
        "txt": "try { return clazz.newInstance(); } catch (final Exception ex) { throw new FunctorException(\"Cannot instantiate class: \" + clazz, ex); } } <extra_id_0> }"
      }
    ]
  }
]
[
  {
    "id": 979,
    "file_path": "src/main/java/org/apache/commons/collections4/keyvalue/MultiKey.java",
    "start-bug-line": 277,
    "end-bug-line": 277,
    "bug": "private Object readResolve() {",
    "fix": "protected Object readResolve() {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.collections4.keyvalue; import java.io.Serializable; import java.util.Arrays; public class MultiKey<K> implements Serializable { private static final long serialVersionUID = 4465448607415788805L; private final K[] keys; private transient int hashCode; @SuppressWarnings(\"unchecked\") public MultiKey(final K key1, final K key2) {"
      },
      {
        "txt": "this((K[]) new Object[] { key1, key2 }, false); } @SuppressWarnings(\"unchecked\") public MultiKey(final K key1, final K key2, final K key3) { this((K[]) new Object[] {key1, key2, key3}, false); } @SuppressWarnings(\"unchecked\") public MultiKey(final K key1, final K key2, final K key3, final K key4) { this((K[]) new Object[] {key1, key2, key3, key4}, false); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public MultiKey(final K key1, final K key2, final K key3, final K key4, final K key5) { this((K[]) new Object[] {key1, key2, key3, key4, key5}, false); } public MultiKey(final K[] keys) { this(keys, true); } public MultiKey(final K[] keys, final boolean makeClone) { super(); if (keys == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The array of keys must not be null\"); } if (makeClone) { this.keys = keys.clone(); } else { this.keys = keys; } calculateHashCode(keys); } public K[] getKeys() {"
      },
      {
        "txt": "return keys.clone(); } public K getKey(final int index) { return keys[index]; } public int size() { return keys.length; } @Override public boolean equals(final Object other) {"
      },
      {
        "txt": "if (other == this) { return true; } if (other instanceof MultiKey) { final MultiKey<?> otherMulti = (MultiKey<?>) other; return Arrays.equals(keys, otherMulti.keys); } return false; } @Override"
      },
      {
        "txt": "public int hashCode() { return hashCode; } @Override public String toString() { return \"MultiKey\" + Arrays.toString(keys); } private void calculateHashCode(final Object[] keys) { int total = 0;"
      },
      {
        "txt": "if (key != null) { total ^= key.hashCode(); } } hashCode = total; } <extra_id_0> calculateHashCode(keys); return this; } }"
      }
    ]
  }
]
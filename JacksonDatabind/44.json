[
  {
    "id": 1513,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 132,
    "end-bug-line": 132,
    "bug": "",
    "fix": "if (!_class.isAssignableFrom(subclass)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase { private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) { super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) {"
      },
      {
        "txt": "super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); }"
      },
      {
        "txt": "public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); } @Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); }"
      },
      {
        "txt": "if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) { throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false); }"
      },
      {
        "txt": "@Deprecated protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) { return this; } <extra_id_0> throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "} @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; }"
      },
      {
        "txt": "return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this;"
      },
      {
        "txt": "} return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); }"
      },
      {
        "txt": "sb.append(t.toCanonical()); } sb.append('>'); } return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) {"
      },
      {
        "txt": "return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) {"
      },
      {
        "txt": "sb = containedType(i).getGenericSignature(sb); } sb.append('>'); } sb.append(';'); return sb; } private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) {"
      },
      {
        "txt": "return null; } if (superClass == Object.class) { return TypeFactory.unknownType(); } JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); } @Override"
      },
      {
        "txt": "public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true;"
      },
      {
        "txt": "if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false; TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  },
  {
    "id": 1514,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 138,
    "end-bug-line": 138,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) {"
      },
      {
        "txt": "super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); }"
      },
      {
        "txt": "@Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false); } @Override @Deprecated protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return this; } throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); <extra_id_0> } @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override"
      },
      {
        "txt": "} @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) {"
      },
      {
        "txt": "sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); } sb.append(t.toCanonical()); } sb.append('>'); }"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb)"
      },
      {
        "txt": "{ _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { sb = containedType(i).getGenericSignature(sb); } sb.append('>'); }"
      },
      {
        "txt": "sb.append(';'); return sb; } private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) { return null; } if (superClass == Object.class) { return TypeFactory.unknownType();"
      },
      {
        "txt": "} JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']');"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false;"
      },
      {
        "txt": "TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  },
  {
    "id": 1515,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 139,
    "end-bug-line": 139,
    "bug": "",
    "fix": "Class<?> next = subclass.getSuperclass(); if (next == _class) { // straight up parent class? Great. return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); } if ((next != null) && _class.isAssignableFrom(next)) { JavaType superb = _narrow(next); return new SimpleType(subclass, _bindings, superb, null, _valueHandler, _typeHandler, _asStatic); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) {"
      },
      {
        "txt": "super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); }"
      },
      {
        "txt": "@Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false); } @Override @Deprecated protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return this; } throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); <extra_id_0> } @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override"
      },
      {
        "txt": "} @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) {"
      },
      {
        "txt": "sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); } sb.append(t.toCanonical()); } sb.append('>'); }"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb)"
      },
      {
        "txt": "{ _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { sb = containedType(i).getGenericSignature(sb); } sb.append('>'); }"
      },
      {
        "txt": "sb.append(';'); return sb; } private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) { return null; } if (superClass == Object.class) { return TypeFactory.unknownType();"
      },
      {
        "txt": "} JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']');"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false;"
      },
      {
        "txt": "TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  },
  {
    "id": 1516,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 140,
    "end-bug-line": 140,
    "bug": "",
    "fix": "Class<?>[] nextI = subclass.getInterfaces(); for (Class<?> iface : nextI) { if (iface == _class) { // directly implemented return new SimpleType(subclass, _bindings, null, new JavaType[] { this }, _valueHandler, _typeHandler, _asStatic); } if (_class.isAssignableFrom(iface)) { // indirect, so recurse JavaType superb = _narrow(iface); return new SimpleType(subclass, _bindings, null, new JavaType[] { superb }, _valueHandler, _typeHandler, _asStatic); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) {"
      },
      {
        "txt": "super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); }"
      },
      {
        "txt": "@Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false); } @Override @Deprecated protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return this; } throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); <extra_id_0> } @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override"
      },
      {
        "txt": "} @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) {"
      },
      {
        "txt": "sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); } sb.append(t.toCanonical()); } sb.append('>'); }"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb)"
      },
      {
        "txt": "{ _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { sb = containedType(i).getGenericSignature(sb); } sb.append('>'); }"
      },
      {
        "txt": "sb.append(';'); return sb; } private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) { return null; } if (superClass == Object.class) { return TypeFactory.unknownType();"
      },
      {
        "txt": "} JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']');"
      },
      {
        "txt": "return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false;"
      },
      {
        "txt": "TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  },
  {
    "id": 1517,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 141,
    "end-bug-line": 141,
    "bug": "",
    "fix": "throw new IllegalArgumentException(\"Internal error: Can not resolve sub-type for Class \"+subclass.getName()+\" to \" +_class.getName());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) {"
      },
      {
        "txt": "super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); }"
      },
      {
        "txt": "@Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false); } @Override @Deprecated protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return this; } throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic); <extra_id_0> @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override public SimpleType withTypeHandler(Object h) {"
      },
      {
        "txt": "@Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\");"
      },
      {
        "txt": "} @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override public SimpleType withContentValueHandler(Object h) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {"
      },
      {
        "txt": "return null; } @Override protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) { sb.append('<');"
      },
      {
        "txt": "for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); } sb.append(t.toCanonical()); } sb.append('>'); } return sb.toString();"
      },
      {
        "txt": "} @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb) {"
      },
      {
        "txt": "_classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { sb = containedType(i).getGenericSignature(sb); } sb.append('>'); } sb.append(';');"
      },
      {
        "txt": "return sb; } private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) { return null; } if (superClass == Object.class) { return TypeFactory.unknownType(); }"
      },
      {
        "txt": "JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString();"
      },
      {
        "txt": "} @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false; TypeBindings b1 = _bindings;"
      },
      {
        "txt": "TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  }
]
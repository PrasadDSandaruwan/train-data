[
  {
    "id": 1445,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "start-bug-line": 1757,
    "end-bug-line": 1757,
    "bug": "type = (T) type.narrowBy(subclass);",
    "fix": "type = (T) ctxt.getTypeFactory().constructSpecializedType(type, subclass);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.lang.reflect.Method; import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.AtomicReference;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.core.JsonLocation; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.deser.impl.CreatorCollector; import com.fasterxml.jackson.databind.deser.std.*; import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.NamedType;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.*; @SuppressWarnings(\"serial\") public abstract class BasicDeserializerFactory extends DeserializerFactory implements java.io.Serializable { private final static Class<?> CLASS_OBJECT = Object.class;"
      },
      {
        "txt": "private final static Class<?> CLASS_STRING = String.class; private final static Class<?> CLASS_CHAR_BUFFER = CharSequence.class; private final static Class<?> CLASS_ITERABLE = Iterable.class; private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class; protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\"); @SuppressWarnings(\"rawtypes\") final static HashMap<String, Class<? extends Map>> _mapFallbacks = new HashMap<String, Class<? extends Map>>(); static { _mapFallbacks.put(Map.class.getName(), LinkedHashMap.class);"
      },
      {
        "txt": "_mapFallbacks.put(ConcurrentMap.class.getName(), ConcurrentHashMap.class); _mapFallbacks.put(SortedMap.class.getName(), TreeMap.class); _mapFallbacks.put(java.util.NavigableMap.class.getName(), TreeMap.class); _mapFallbacks.put(java.util.concurrent.ConcurrentNavigableMap.class.getName(), java.util.concurrent.ConcurrentSkipListMap.class); } @SuppressWarnings(\"rawtypes\") final static HashMap<String, Class<? extends Collection>> _collectionFallbacks = new HashMap<String, Class<? extends Collection>>(); static {"
      },
      {
        "txt": "_collectionFallbacks.put(Collection.class.getName(), ArrayList.class); _collectionFallbacks.put(List.class.getName(), ArrayList.class); _collectionFallbacks.put(Set.class.getName(), HashSet.class); _collectionFallbacks.put(SortedSet.class.getName(), TreeSet.class); _collectionFallbacks.put(Queue.class.getName(), LinkedList.class); _collectionFallbacks.put(\"java.util.Deque\", LinkedList.class); _collectionFallbacks.put(\"java.util.NavigableSet\", TreeSet.class); } protected final DeserializerFactoryConfig _factoryConfig; protected BasicDeserializerFactory(DeserializerFactoryConfig config) {"
      },
      {
        "txt": "_factoryConfig = config; } public DeserializerFactoryConfig getFactoryConfig() { return _factoryConfig; } protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config); @Override public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) { return withConfig(_factoryConfig.withAdditionalDeserializers(additional)); }"
      },
      {
        "txt": "@Override public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) { return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional)); } @Override public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) { return withConfig(_factoryConfig.withDeserializerModifier(modifier)); } @Override public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) {"
      },
      {
        "txt": "return withConfig(_factoryConfig.withAbstractTypeResolver(resolver)); } @Override public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) { return withConfig(_factoryConfig.withValueInstantiators(instantiators)); } @Override public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException { while (true) {"
      },
      {
        "txt": "JavaType next = _mapAbstractType2(config, type); if (next == null) { return type; } Class<?> prevCls = type.getRawClass(); Class<?> nextCls = next.getRawClass(); if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls)) { throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\"); } type = next;"
      },
      {
        "txt": "} } private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type) throws JsonMappingException { Class<?> currClass = type.getRawClass(); if (_factoryConfig.hasAbstractTypeResolvers()) { for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = resolver.findTypeMapping(config, type); if (concrete != null && concrete.getRawClass() != currClass) {"
      },
      {
        "txt": "return concrete; } } } return null; } @Override public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException"
      },
      {
        "txt": "{ final DeserializationConfig config = ctxt.getConfig(); ValueInstantiator instantiator = null; AnnotatedClass ac = beanDesc.getClassInfo(); Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac); if (instDef != null) { instantiator = _valueInstantiatorInstance(config, ac, instDef); } if (instantiator == null) { instantiator = _findStdValueInstantiator(config, beanDesc);"
      },
      {
        "txt": "if (instantiator == null) { instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc); } } if (_factoryConfig.hasValueInstantiators()) { for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) { instantiator = insts.findValueInstantiator(config, beanDesc, instantiator); if (instantiator == null) { throw new JsonMappingException(\"Broken registered ValueInstantiators (of type \" +insts.getClass().getName()+\"): returned null ValueInstantiator\");"
      },
      {
        "txt": "} } } if (instantiator.getIncompleteParameter() != null) { final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter(); final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner(); throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex()+\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\"); } return instantiator; }"
      },
      {
        "txt": "private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { if (beanDesc.getBeanClass() == JsonLocation.class) { return new JsonLocationInstantiator(); } return null; } protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanDescription beanDesc) throws JsonMappingException { boolean fixAccess = ctxt.canOverrideAccessModifiers(); CreatorCollector creators = new CreatorCollector(beanDesc, fixAccess); AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); final DeserializationConfig config = ctxt.getConfig(); VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker(); vchecker = intr.findAutoDetectVisibility(beanDesc.getClassInfo(), vchecker); Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt,"
      },
      {
        "txt": "beanDesc); _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs); if (beanDesc.getType().isConcrete()) { _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs); } return creators.constructValueInstantiator(config); } protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException {"
      },
      {
        "txt": "Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap(); for (BeanPropertyDefinition propDef : beanDesc.findProperties()) { Iterator<AnnotatedParameter> it = propDef.getConstructorParameters(); while (it.hasNext()) { AnnotatedParameter param = it.next(); AnnotatedWithParams owner = param.getOwner(); BeanPropertyDefinition[] defs = result.get(owner); final int index = param.getIndex(); if (defs == null) { if (result.isEmpty()) { // since emptyMap is immutable need to create a 'real' one"
      },
      {
        "txt": "result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>(); } defs = new BeanPropertyDefinition[owner.getParameterCount()]; result.put(owner, defs); } else { if (defs[index] != null) { throw new IllegalStateException(\"Conflict: parameter #\"+index+\" of \"+owner +\" bound to more than one property; \"+defs[index]+\" vs \"+propDef); } }"
      },
      {
        "txt": "defs[index] = propDef; } } return result; } public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config, Annotated annotated, Object instDef) throws JsonMappingException { if (instDef == null) {"
      },
      {
        "txt": "return null; } ValueInstantiator inst; if (instDef instanceof ValueInstantiator) { return (ValueInstantiator) instDef; } if (!(instDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \" +instDef.getClass().getName() +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\");"
      },
      {
        "txt": "} Class<?> instClass = (Class<?>)instDef; if (ClassUtil.isBogusClass(instClass)) { return null; } if (!ValueInstantiator.class.isAssignableFrom(instClass)) { throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName() +\"; expected Class<ValueInstantiator>\"); } HandlerInstantiator hi = config.getHandlerInstantiator();"
      },
      {
        "txt": "if (hi != null) { inst = hi.valueInstantiatorInstance(config, annotated, instClass); if (inst != null) { return inst; } } return (ValueInstantiator) ClassUtil.createInstance(instClass, config.canOverrideAccessModifiers()); } protected void _addDeserializerConstructors"
      },
      {
        "txt": "(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams) throws JsonMappingException { AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor(); if (defaultCtor != null) { if (!creators.hasDefaultCreator() || intr.hasCreatorAnnotation(defaultCtor)) { creators.setDefaultCreator(defaultCtor); }"
      },
      {
        "txt": "} List<AnnotatedConstructor> implicitCtors = null; for (AnnotatedConstructor ctor : beanDesc.getConstructors()) { final boolean isCreator = intr.hasCreatorAnnotation(ctor); BeanPropertyDefinition[] propDefs = creatorParams.get(ctor); final int argCount = ctor.getParameterCount(); if (argCount == 1) { BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0]; boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, argDef); if (useProps) {"
      },
      {
        "txt": "SettableBeanProperty[] properties = new SettableBeanProperty[1]; PropertyName name = (argDef == null) ? null : argDef.getFullName(); AnnotatedParameter arg = ctor.getParameter(0); properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, arg, intr.findInjectableValueId(arg)); creators.addPropertyCreator(ctor, isCreator, properties); } else { ctor, isCreator, vchecker.isCreatorVisible(ctor)); if (argDef != null) {"
      },
      {
        "txt": "((POJOPropertyBuilder) argDef).removeConstructors(); } } continue; } AnnotatedParameter nonAnnotatedParam = null; SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; int explicitNameCount = 0; int implicitWithCreatorCount = 0; int injectCount = 0;"
      },
      {
        "txt": "for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = ctor.getParameter(i); BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i]; Object injectId = intr.findInjectableValueId(param); final PropertyName name = (propDef == null) ? null : propDef.getFullName(); if (propDef != null && propDef.isExplicitlyNamed()) { ++explicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; }"
      },
      {
        "txt": "if (injectId != null) { ++injectCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param); if (unwrapper != null) { properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null); ++explicitNameCount; continue;"
      },
      {
        "txt": "} if (isCreator && (name != null && !name.isEmpty())) { ++implicitWithCreatorCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } if (nonAnnotatedParam == null) { nonAnnotatedParam = param; } }"
      },
      {
        "txt": "final int namedCount = explicitNameCount + implicitWithCreatorCount; if (isCreator || (explicitNameCount > 0) || (injectCount > 0)) { if ((namedCount + injectCount) == argCount) { creators.addPropertyCreator(ctor, isCreator, properties); continue; } if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) { creators.addDelegatingCreator(ctor, isCreator, properties); continue; }"
      },
      {
        "txt": "PropertyName impl = _findImplicitParamName(nonAnnotatedParam, intr); if (impl == null || impl.isEmpty()) { int ix = nonAnnotatedParam.getIndex(); if ((ix == 0) && ClassUtil.isNonStaticInnerClass(ctor.getDeclaringClass())) { throw new IllegalArgumentException(\"Non-static inner classes like \" +ctor.getDeclaringClass().getName()+\" can not use @JsonCreator for constructors\"); } throw new IllegalArgumentException(\"Argument #\"+ix +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\"); }"
      },
      {
        "txt": "} if (!creators.hasDefaultCreator()) { if (implicitCtors == null) { implicitCtors = new LinkedList<AnnotatedConstructor>(); } implicitCtors.add(ctor); } } if ((implicitCtors != null) && !creators.hasDelegatingCreator() && !creators.hasPropertyBasedCreator()) {"
      },
      {
        "txt": "_checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr, creators, implicitCtors); } } protected void _checkImplicitlyNamedConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, List<AnnotatedConstructor> implicitCtors) throws JsonMappingException { AnnotatedConstructor found = null;"
      },
      {
        "txt": "SettableBeanProperty[] foundProps = null; main_loop: for (AnnotatedConstructor ctor : implicitCtors) { if (!vchecker.isCreatorVisible(ctor)) { continue; } final int argCount = ctor.getParameterCount(); SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = ctor.getParameter(i);"
      },
      {
        "txt": "final PropertyName name = _findParamName(param, intr); if (name == null || name.isEmpty()) { continue main_loop; } properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(), param, /*injectId*/ null); } if (found != null) { // only one allowed found = null; break;"
      },
      {
        "txt": "} found = ctor; foundProps = properties; } if (found != null) { creators.addPropertyCreator(found, /*isCreator*/ false, foundProps); BasicBeanDescription bbd = (BasicBeanDescription) beanDesc; for (SettableBeanProperty prop : foundProps) { PropertyName pn = prop.getFullName(); if (!bbd.hasProperty(pn)) {"
      },
      {
        "txt": "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct( ctxt.getConfig(), prop.getMember(), pn); bbd.addProperty(newDef); } } } } protected boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr, AnnotatedWithParams creator, BeanPropertyDefinition propDef) {"
      },
      {
        "txt": "JsonCreator.Mode mode = intr.findCreatorBinding(creator); if (mode == JsonCreator.Mode.PROPERTIES) { return true; } if (mode == JsonCreator.Mode.DELEGATING) { return false; } if (((propDef != null) && propDef.isExplicitlyNamed()) || (intr.findInjectableValueId(creator.getParameter(0)) != null)) { return true;"
      },
      {
        "txt": "} if (propDef != null) { String implName = propDef.getName(); if (implName != null && !implName.isEmpty()) { if (propDef.couldSerialize()) { return true; } } } return false;"
      },
      {
        "txt": "} protected boolean _handleSingleArgumentConstructor(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, AnnotatedConstructor ctor, boolean isCreator, boolean isVisible) throws JsonMappingException { Class<?> type = ctor.getRawParameterType(0); if (type == String.class || type == CharSequence.class) { if (isCreator || isVisible) {"
      },
      {
        "txt": "creators.addStringCreator(ctor, isCreator); } return true; } if (type == int.class || type == Integer.class) { if (isCreator || isVisible) { creators.addIntCreator(ctor, isCreator); } return true; }"
      },
      {
        "txt": "if (type == long.class || type == Long.class) { if (isCreator || isVisible) { creators.addLongCreator(ctor, isCreator); } return true; } if (type == double.class || type == Double.class) { if (isCreator || isVisible) { creators.addDoubleCreator(ctor, isCreator); }"
      },
      {
        "txt": "return true; } if (type == boolean.class || type == Boolean.class) { if (isCreator || isVisible) { creators.addBooleanCreator(ctor, isCreator); } return true; } if (isCreator) { creators.addDelegatingCreator(ctor, isCreator, null);"
      },
      {
        "txt": "return true; } return false; } protected void _addDeserializerFactoryMethods (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams) throws JsonMappingException {"
      },
      {
        "txt": "final DeserializationConfig config = ctxt.getConfig(); for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) { final boolean isCreator = intr.hasCreatorAnnotation(factory); final int argCount = factory.getParameterCount(); if (argCount == 0) { if (isCreator) { creators.setDefaultCreator(factory); } continue; }"
      },
      {
        "txt": "final BeanPropertyDefinition[] propDefs = creatorParams.get(factory); if (argCount == 1) { BeanPropertyDefinition argDef = (propDefs == null) ? null : propDefs[0]; boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef); if (!useProps) { // not property based but delegating factory, isCreator); continue; } } else { if (!isCreator) {"
      },
      {
        "txt": "continue; } } AnnotatedParameter nonAnnotatedParam = null; SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; int implicitNameCount = 0; int explicitNameCount = 0; int injectCount = 0; for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = factory.getParameter(i);"
      },
      {
        "txt": "BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i]; Object injectId = intr.findInjectableValueId(param); final PropertyName name = (propDef == null) ? null : propDef.getFullName(); if (propDef != null && propDef.isExplicitlyNamed()) { ++explicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } if (injectId != null) { ++injectCount;"
      },
      {
        "txt": "properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param); if (unwrapper != null) { properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null); ++implicitNameCount; continue; } if (isCreator) {"
      },
      {
        "txt": "if (name != null && !name.isEmpty()) { ++implicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } } PropertyName name2 = _findExplicitParamName(param, intr); if (name2 != null && !name2.isEmpty()) { continue main_loop; }"
      },
      {
        "txt": "if (nonAnnotatedParam == null) { nonAnnotatedParam = param; } } final int namedCount = explicitNameCount + implicitNameCount; if (isCreator || explicitNameCount > 0 || injectCount > 0) { if ((namedCount + injectCount) == argCount) { creators.addPropertyCreator(factory, isCreator, properties); } else if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) { creators.addDelegatingCreator(factory, isCreator, properties);"
      },
      {
        "txt": "} else { // otherwise, epic fail throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex() +\" of factory method \"+factory+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\"); } } } } protected boolean _handleSingleArgumentFactory(DeserializationConfig config, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators,"
      },
      {
        "txt": "AnnotatedMethod factory, boolean isCreator) throws JsonMappingException { Class<?> type = factory.getRawParameterType(0); if (type == String.class || type == CharSequence.class) { if (isCreator || vchecker.isCreatorVisible(factory)) { creators.addStringCreator(factory, isCreator); } return true; }"
      },
      {
        "txt": "if (type == int.class || type == Integer.class) { if (isCreator || vchecker.isCreatorVisible(factory)) { creators.addIntCreator(factory, isCreator); } return true; } if (type == long.class || type == Long.class) { if (isCreator || vchecker.isCreatorVisible(factory)) { creators.addLongCreator(factory, isCreator); }"
      },
      {
        "txt": "return true; } if (type == double.class || type == Double.class) { if (isCreator || vchecker.isCreatorVisible(factory)) { creators.addDoubleCreator(factory, isCreator); } return true; } if (type == boolean.class || type == Boolean.class) { if (isCreator || vchecker.isCreatorVisible(factory)) {"
      },
      {
        "txt": "creators.addBooleanCreator(factory, isCreator); } return true; } if (isCreator) { creators.addDelegatingCreator(factory, isCreator, null); return true; } return false; }"
      },
      {
        "txt": "protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt, BeanDescription beanDesc, PropertyName name, int index, AnnotatedParameter param, Object injectableValueId) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); PropertyMetadata metadata; {"
      },
      {
        "txt": "if (intr == null) { metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL; } else { Boolean b = intr.hasRequiredMarker(param); boolean req = (b != null && b.booleanValue()); String desc = intr.findPropertyDescription(param); Integer idx = intr.findPropertyIndex(param); String def = intr.findPropertyDefaultValue(param); metadata = PropertyMetadata.construct(req, desc, idx, def); }"
      },
      {
        "txt": "} JavaType t0 = config.getTypeFactory().constructType(param.getParameterType(), beanDesc.bindingsForBeanType()); BeanProperty.Std property = new BeanProperty.Std(name, t0, intr.findWrapperName(param), beanDesc.getClassAnnotations(), param, metadata); JavaType type = resolveType(ctxt, beanDesc, t0, param); if (type != t0) { property = property.withType(type); } JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param);"
      },
      {
        "txt": "type = modifyTypeByAnnotation(ctxt, param, type); TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler(); if (typeDeser == null) { typeDeser = findTypeDeserializer(config, type); } SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(), typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId, metadata); if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type);"
      },
      {
        "txt": "prop = prop.withValueDeserializer(deser); } return prop; } protected PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr) { if (param != null && intr != null) { PropertyName name = intr.findNameForDeserialization(param); if (name != null) { return name;"
      },
      {
        "txt": "} String str = intr.findImplicitPropertyName(param); if (str != null && !str.isEmpty()) { return PropertyName.construct(str); } } return null; } protected PropertyName _findImplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr) {"
      },
      {
        "txt": "String str = intr.findImplicitPropertyName(param); if (str != null && !str.isEmpty()) { return PropertyName.construct(str); } return null; } @Deprecated // in 2.6, remove from 2.7 protected PropertyName _findExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr) { if (param != null && intr != null) {"
      },
      {
        "txt": "return intr.findNameForDeserialization(param); } return null; } @Deprecated // in 2.6, remove from 2.7 protected boolean _hasExplicitParamName(AnnotatedParameter param, AnnotationIntrospector intr) { if (param != null && intr != null) { PropertyName n = intr.findNameForDeserialization(param); return (n != null) && n.hasSimpleName();"
      },
      {
        "txt": "} return false; } @Override public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JavaType elemType = type.getContentType();"
      },
      {
        "txt": "JsonDeserializer<Object> contentDeser = elemType.getValueHandler(); TypeDeserializer elemTypeDeser = elemType.getTypeHandler(); if (elemTypeDeser == null) { elemTypeDeser = findTypeDeserializer(config, elemType); } JsonDeserializer<?> deser = _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser); if (deser == null) { if (contentDeser == null) { Class<?> raw = elemType.getRawClass();"
      },
      {
        "txt": "if (elemType.isPrimitive()) { return PrimitiveArrayDeserializers.forType(raw); } else if (raw == String.class) { return StringArrayDeserializer.instance; } } deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {"
      },
      {
        "txt": "deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser); } } return deser; } @Override public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt, CollectionType type, BeanDescription beanDesc) throws JsonMappingException {"
      },
      {
        "txt": "JavaType contentType = type.getContentType(); JsonDeserializer<Object> contentDeser = contentType.getValueHandler(); final DeserializationConfig config = ctxt.getConfig(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type, config, beanDesc, contentTypeDeser, contentDeser); if (deser == null) {"
      },
      {
        "txt": "Class<?> collectionClass = type.getRawClass(); if (contentDeser == null) { // not defined by annotation if (EnumSet.class.isAssignableFrom(collectionClass)) { deser = new EnumSetDeserializer(contentType, null); } } } if (deser == null) { if (type.isInterface() || type.isAbstract()) { CollectionType implType = _mapAbstractCollectionType(type, config);"
      },
      {
        "txt": "if (implType == null) { if (type.getTypeHandler() == null) { throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Collection type \"+type); } deser = AbstractDeserializer.constructForNonPOJO(beanDesc); } else { type = implType; beanDesc = config.introspectForCreation(type); } }"
      },
      {
        "txt": "if (deser == null) { ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc); if (!inst.canCreateUsingDefault()) { if (type.getRawClass() == ArrayBlockingQueue.class) { return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst, null); } } if (contentType.getRawClass() == String.class) { deser = new StringCollectionDeserializer(type, contentDeser, inst); } else {"
      },
      {
        "txt": "deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst); } } } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser); } } return deser;"
      },
      {
        "txt": "} protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config) { Class<?> collectionClass = type.getRawClass(); collectionClass = _collectionFallbacks.get(collectionClass.getName()); if (collectionClass == null) { return null; } return (CollectionType) config.constructSpecializedType(type, collectionClass); }"
      },
      {
        "txt": "@Override public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt, CollectionLikeType type, final BeanDescription beanDesc) throws JsonMappingException { JavaType contentType = type.getContentType(); JsonDeserializer<Object> contentDeser = contentType.getValueHandler(); final DeserializationConfig config = ctxt.getConfig(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) {"
      },
      {
        "txt": "contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc, contentTypeDeser, contentDeser); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser); } }"
      },
      {
        "txt": "} return deser; } @Override public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt, MapType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JavaType keyType = type.getKeyType();"
      },
      {
        "txt": "JavaType contentType = type.getContentType(); @SuppressWarnings(\"unchecked\") JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler(); KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc, keyDes, contentTypeDeser, contentDeser);"
      },
      {
        "txt": "if (deser == null) { Class<?> mapClass = type.getRawClass(); if (EnumMap.class.isAssignableFrom(mapClass)) { Class<?> kt = keyType.getRawClass(); if (kt == null || !kt.isEnum()) { throw new IllegalArgumentException(\"Can not construct EnumMap; generic (key) type not available\"); } deser = new EnumMapDeserializer(type, null, contentDeser, contentTypeDeser); } if (deser == null) {"
      },
      {
        "txt": "if (type.isInterface() || type.isAbstract()) { @SuppressWarnings(\"rawtypes\") Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName()); if (fallback != null) { mapClass = fallback; type = (MapType) config.constructSpecializedType(type, mapClass); beanDesc = config.introspectForCreation(type); } else { if (type.getTypeHandler() == null) { throw new IllegalArgumentException(\"Can not find a deserializer for non-concrete Map type \"+type);"
      },
      {
        "txt": "} deser = AbstractDeserializer.constructForNonPOJO(beanDesc); } } if (deser == null) { ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc); MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser); AnnotationIntrospector ai = config.getAnnotationIntrospector(); md.setIgnorableProperties(ai.findPropertiesToIgnore(beanDesc.getClassInfo(), false)); deser = md;"
      },
      {
        "txt": "} } } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyMapDeserializer(config, type, beanDesc, deser); } } return deser; }"
      },
      {
        "txt": "@Override public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt, MapLikeType type, final BeanDescription beanDesc) throws JsonMappingException { JavaType keyType = type.getKeyType(); JavaType contentType = type.getContentType(); final DeserializationConfig config = ctxt.getConfig(); @SuppressWarnings(\"unchecked\") JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler();"
      },
      {
        "txt": "KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler(); if (keyDes == null) { keyDes = p.findKeyDeserializer(config, keyType, property); } TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config, beanDesc, keyDes, contentTypeDeser, contentDeser);"
      },
      {
        "txt": "if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser); } } } return deser; } @Override"
      },
      {
        "txt": "public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); final Class<?> enumClass = type.getRawClass(); JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc); if (deser == null) { for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) { if (ctxt.getAnnotationIntrospector().hasCreatorAnnotation(factory)) {"
      },
      {
        "txt": "int argCount = factory.getParameterCount(); if (argCount == 1) { Class<?> returnType = factory.getRawReturnType(); if (returnType.isAssignableFrom(enumClass)) { deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory); break; } } throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \" +enumClass.getName()+\")\");"
      },
      {
        "txt": "} } if (deser == null) { deser = new EnumDeserializer(constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod())); } } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser); }"
      },
      {
        "txt": "} return deser; } @Override public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config, JavaType nodeType, BeanDescription beanDesc) throws JsonMappingException { @SuppressWarnings(\"unchecked\") Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass();"
      },
      {
        "txt": "JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config, beanDesc); if (custom != null) { return custom; } return JsonNodeDeserializer.getDeserializer(nodeClass); } @Override public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType)"
      },
      {
        "txt": "throws JsonMappingException { BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass()); AnnotatedClass ac = bean.getClassInfo(); AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType); Collection<NamedType> subtypes = null; if (b == null) { b = config.getDefaultTyper(baseType); if (b == null) {"
      },
      {
        "txt": "return null; } } else { subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac); } if ((b.getDefaultImpl() == null) && baseType.isAbstract()) { JavaType defaultType = mapAbstractType(config, baseType); if (defaultType != null && defaultType.getRawClass() != baseType.getRawClass()) { b = b.defaultImpl(defaultType.getRawClass()); }"
      },
      {
        "txt": "} return b.buildTypeDeserializer(config, baseType, subtypes); } protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc); } @Override"
      },
      {
        "txt": "public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); KeyDeserializer deser = null; if (_factoryConfig.hasKeyDeserializers()) { BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass()); for (KeyDeserializers d : _factoryConfig.keyDeserializers()) { deser = d.findKeyDeserializer(type, config, beanDesc);"
      },
      {
        "txt": "if (deser != null) { break; } } } if (deser == null) { if (type.isEnumType()) { return _createEnumKeyDeserializer(ctxt, type); } deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type);"
      },
      {
        "txt": "} if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyKeyDeserializer(config, type, deser); } } } return deser; }"
      },
      {
        "txt": "private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); BeanDescription beanDesc = config.introspect(type); JsonDeserializer<?> des = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); if (des != null) { return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, des); }"
      },
      {
        "txt": "Class<?> enumClass = type.getRawClass(); JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc); if (custom != null) { return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom); } EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueMethod()); for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) { if (config.getAnnotationIntrospector().hasCreatorAnnotation(factory)) { int argCount = factory.getParameterCount(); if (argCount == 1) {"
      },
      {
        "txt": "Class<?> returnType = factory.getRawReturnType(); if (returnType.isAssignableFrom(enumClass)) { if (factory.getGenericParameterType(0) != String.class) { throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\"); } if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(factory.getMember()); } return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory); }"
      },
      {
        "txt": "} throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \" +enumClass.getName()+\")\"); } } return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes); } public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config, JavaType baseType, AnnotatedMember annotated) throws JsonMappingException"
      },
      {
        "txt": "{ AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType); if (b == null) { return findTypeDeserializer(config, baseType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId( config, annotated, baseType); return b.buildTypeDeserializer(config, baseType, subtypes); }"
      },
      {
        "txt": "public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config, JavaType containerType, AnnotatedMember propertyEntity) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType); JavaType contentType = containerType.getContentType(); if (b == null) { return findTypeDeserializer(config, contentType); }"
      },
      {
        "txt": "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId( config, propertyEntity, contentType); return b.buildTypeDeserializer(config, contentType, subtypes); } public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { Class<?> rawType = type.getRawClass(); if (rawType == CLASS_OBJECT) {"
      },
      {
        "txt": "DeserializationConfig config = ctxt.getConfig(); JavaType lt, mt; if (_factoryConfig.hasAbstractTypeResolvers()) { lt = _findRemappedType(config, List.class); mt = _findRemappedType(config, Map.class); } else { lt = mt = null; } return new UntypedObjectDeserializer(lt, mt); }"
      },
      {
        "txt": "if (rawType == CLASS_STRING || rawType == CLASS_CHAR_BUFFER) { return StringDeserializer.instance; } if (type.isReferenceType()) { JavaType referencedType = type.getReferencedType(); if (AtomicReference.class.isAssignableFrom(rawType)) { TypeDeserializer vts = findTypeDeserializer(ctxt.getConfig(), referencedType); BeanDescription refdDesc = ctxt.getConfig().introspectClassAnnotations(referencedType); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, refdDesc.getClassInfo()); return new AtomicReferenceDeserializer(referencedType, vts, deser);"
      },
      {
        "txt": "} } if (rawType == CLASS_ITERABLE) { TypeFactory tf = ctxt.getTypeFactory(); JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE); JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0]; CollectionType ct = tf.constructCollectionType(Collection.class, elemType); return createCollectionDeserializer(ctxt, ct, beanDesc); } if (rawType == CLASS_MAP_ENTRY) {"
      },
      {
        "txt": "JavaType kt = type.containedType(0); if (kt == null) { kt = TypeFactory.unknownType(); } JavaType vt = type.containedType(1); if (vt == null) { vt = TypeFactory.unknownType(); } TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler(); if (vts == null) {"
      },
      {
        "txt": "vts = findTypeDeserializer(ctxt.getConfig(), vt); } JsonDeserializer<Object> valueDeser = vt.getValueHandler(); KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler(); return new MapEntryDeserializer(type, keyDes, valueDeser, vts); } String clsName = rawType.getName(); if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) { JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName); if (deser == null) {"
      },
      {
        "txt": "deser = DateDeserializers.find(rawType, clsName); } if (deser != null) { return deser; } } if (rawType == TokenBuffer.class) { return new TokenBufferDeserializer(); } JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc);"
      },
      {
        "txt": "if (deser != null) { return deser; } return JdkDeserializers.find(rawType, clsName); } protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException { JavaType type = mapAbstractType(config, config.constructType(rawType)); return (type == null || type.hasRawClass(rawType)) ? null : type; } protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type,"
      },
      {
        "txt": "DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findArrayDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; }"
      },
      {
        "txt": "} return null; } @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc);"
      },
      {
        "txt": "if (deser != null) { return (JsonDeserializer<Object>) deser; } } return null; } protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException"
      },
      {
        "txt": "{ for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; } } return null; }"
      },
      {
        "txt": "protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser;"
      },
      {
        "txt": "} } return null; } protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc);"
      },
      {
        "txt": "if (deser != null) { return deser; } } return null; } protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)"
      },
      {
        "txt": "throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, keyDeserializer, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; } } return null;"
      },
      {
        "txt": "} protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, keyDeserializer, elementTypeDeserializer, elementDeserializer);"
      },
      {
        "txt": "if (deser != null) { return deser; } } return null; } protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException {"
      },
      {
        "txt": "for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc); if (deser != null) { return deser; } } return null; } protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann)"
      },
      {
        "txt": "throws JsonMappingException { Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann); if (deserDef == null) { return null; } return ctxt.deserializerInstance(ann, deserDef); } @SuppressWarnings({ \"unchecked\" }) protected <T extends JavaType> T modifyTypeByAnnotation(DeserializationContext ctxt,"
      },
      {
        "txt": "throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); Class<?> subclass = intr.findDeserializationType(a, type); if (subclass != null) { try { <extra_id_0> } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow type \"+type+\" with concrete-type annotation (value \"+subclass.getName()+\"), method '\"+a.getName()+\"': \"+iae.getMessage(), null, iae); } } if (type.isContainerType()) { Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType());"
      },
      {
        "txt": "if (type.isContainerType()) { Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType()); if (keyClass != null) { if (!(type instanceof MapLikeType)) { throw new JsonMappingException(\"Illegal key-type annotation: type \"+type+\" is not a Map(-like) type\"); } try { type = (T) ((MapLikeType) type).narrowKey(keyClass); } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow key type \"+type+\" with key-type annotation (\"+keyClass.getName()+\"): \"+iae.getMessage(), null, iae);"
      },
      {
        "txt": "} } JavaType keyType = type.getKeyType(); if (keyType != null && keyType.getValueHandler() == null) { Object kdDef = intr.findKeyDeserializer(a); KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef); if (kd != null) { type = (T) ((MapLikeType) type).withKeyValueHandler(kd); keyType = type.getKeyType(); // just in case it's used below }"
      },
      {
        "txt": "} Class<?> cc = intr.findDeserializationContentType(a, type.getContentType()); if (cc != null) { try { type = (T) type.narrowContentsBy(cc); } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow content type \"+type+\" with content-type annotation (\"+cc.getName()+\"): \"+iae.getMessage(), null, iae); } } JavaType contentType = type.getContentType();"
      },
      {
        "txt": "if (contentType.getValueHandler() == null) { // as with above, avoid resetting (which would trigger exception) Object cdDef = intr.findContentDeserializer(a); JsonDeserializer<?> cd = ctxt.deserializerInstance(a, cdDef); if (cd != null) { type = (T) type.withContentValueHandler(cd); } } } return type; }"
      },
      {
        "txt": "protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException { if (type.isContainerType()) { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); JavaType keyType = type.getKeyType(); if (keyType != null) { Object kdDef = intr.findKeyDeserializer(member); KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef);"
      },
      {
        "txt": "if (kd != null) { type = ((MapLikeType) type).withKeyValueHandler(kd); keyType = type.getKeyType(); // just in case it's used below } } Object cdDef = intr.findContentDeserializer(member); JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef); if (cd != null) { type = type.withContentValueHandler(cd); }"
      },
      {
        "txt": "if (member instanceof AnnotatedMember) { TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer( ctxt.getConfig(), type, (AnnotatedMember) member); if (contentTypeDeser != null) { type = type.withContentTypeHandler(contentTypeDeser); } } } TypeDeserializer valueTypeDeser; if (member instanceof AnnotatedMember) { // JAXB allows per-property annotations"
      },
      {
        "txt": "valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member); } else { // classes just have Jackson annotations valueTypeDeser = findTypeDeserializer(ctxt.getConfig(), type); } if (valueTypeDeser != null) { type = type.withTypeHandler(valueTypeDeser); } return type; }"
      },
      {
        "txt": "protected EnumResolver constructEnumResolver(Class<?> enumClass, DeserializationConfig config, AnnotatedMethod jsonValueMethod) { if (jsonValueMethod != null) { Method accessor = jsonValueMethod.getAnnotated(); if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(accessor); } return EnumResolver.constructUnsafeUsingMethod(enumClass, accessor); }"
      },
      {
        "txt": "if (config.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING)) { return EnumResolver.constructUnsafeUsingToString(enumClass); } return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector()); } protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType) { if (enumType == null) { return null; }"
      },
      {
        "txt": "BeanDescription beanDesc = config.introspect(enumType); return beanDesc.findJsonValueMethod(); }"
      }
    ]
  },
  {
    "id": 1446,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "start-bug-line": 477,
    "end-bug-line": 477,
    "bug": "type = type.narrowBy(subclass);",
    "fix": "type = ctxt.getTypeFactory().constructSpecializedType(type, subclass);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.HashMap; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.Converter; public final class DeserializerCache implements java.io.Serializable // since 2.1 -- needs to be careful tho { private static final long serialVersionUID = 1L; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _cachedDeserializers = new ConcurrentHashMap<JavaType, JsonDeserializer<Object>>(64, 0.75f, 4); final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers = new HashMap<JavaType, JsonDeserializer<Object>>(8); public DeserializerCache() { }"
      },
      {
        "txt": "Object writeReplace() { _incompleteDeserializers.clear(); return this; } public int cachedDeserializersCount() { return _cachedDeserializers.size(); } public void flushCachedDeserializers() { _cachedDeserializers.clear(); }"
      },
      {
        "txt": "public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType) throws JsonMappingException { JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType); if (deser == null) { deser = _createAndCacheValueDeserializer(ctxt, factory, propertyType); if (deser == null) { deser = _handleUnknownValueDeserializer(propertyType); }"
      },
      {
        "txt": "} return deser; } public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { KeyDeserializer kd = factory.createKeyDeserializer(ctxt, type); if (kd == null) { // if none found, need to use a placeholder that'll fail return _handleUnknownKeyDeserializer(type);"
      },
      {
        "txt": "} if (kd instanceof ResolvableDeserializer) { ((ResolvableDeserializer) kd).resolve(ctxt); } return kd; } public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {"
      },
      {
        "txt": "JsonDeserializer<Object> deser = _findCachedDeserializer(type); if (deser == null) { deser = _createAndCacheValueDeserializer(ctxt, factory, type); } return (deser != null); } protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type) { if (type == null) { throw new IllegalArgumentException(\"Null JavaType passed\");"
      },
      {
        "txt": "} if (_hasCustomValueHandler(type)) { return null; } return _cachedDeserializers.get(type); } protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException {"
      },
      {
        "txt": "synchronized (_incompleteDeserializers) { JsonDeserializer<Object> deser = _findCachedDeserializer(type); if (deser != null) { return deser; } int count = _incompleteDeserializers.size(); if (count > 0) { deser = _incompleteDeserializers.get(type); if (deser != null) { return deser;"
      },
      {
        "txt": "} } try { return _createAndCache2(ctxt, factory, type); } finally { if (count == 0 && _incompleteDeserializers.size() > 0) { _incompleteDeserializers.clear(); } } }"
      },
      {
        "txt": "} protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { JsonDeserializer<Object> deser; try { deser = _createDeserializer(ctxt, factory, type); } catch (IllegalArgumentException iae) { throw new JsonMappingException(iae.getMessage(), null, iae);"
      },
      {
        "txt": "} if (deser == null) { return null; } boolean isResolvable = (deser instanceof ResolvableDeserializer); boolean addToCache = !_hasCustomValueHandler(type) && deser.isCachable(); if (isResolvable) { _incompleteDeserializers.put(type, deser); ((ResolvableDeserializer)deser).resolve(ctxt); _incompleteDeserializers.remove(type);"
      },
      {
        "txt": "} if (addToCache) { _cachedDeserializers.put(type, deser); } return deser; } @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ final DeserializationConfig config = ctxt.getConfig(); if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) { type = factory.mapAbstractType(config, type); } BeanDescription beanDesc = config.introspect(type); JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); if (deser != null) { return deser;"
      },
      {
        "txt": "} JavaType newType = modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type); if (newType != type) { type = newType; beanDesc = config.introspect(newType); } Class<?> builder = beanDesc.findPOJOBuilder(); if (builder != null) { return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer( ctxt, type, beanDesc, builder);"
      },
      {
        "txt": "} Converter<Object,Object> conv = beanDesc.findDeserializationConverter(); if (conv == null) { // nope, just construct in normal way return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc); } JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); if (!delegateType.hasRawClass(type.getRawClass())) { beanDesc = config.introspect(delegateType); } return new StdDelegatingDeserializer<Object>(conv, delegateType,"
      },
      {
        "txt": "_createDeserializer2(ctxt, factory, delegateType, beanDesc)); } protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); if (type.isEnumType()) { return factory.createEnumDeserializer(ctxt, type, beanDesc); }"
      },
      {
        "txt": "if (type.isContainerType()) { if (type.isArrayType()) { return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc); } if (type.isMapLikeType()) { MapLikeType mlt = (MapLikeType) type; if (mlt.isTrueMapType()) { return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc); } return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc);"
      },
      {
        "txt": "} if (type.isCollectionLikeType()) { JsonFormat.Value format = beanDesc.findExpectedFormat(null); if (format == null || format.getShape() != JsonFormat.Shape.OBJECT) { CollectionLikeType clt = (CollectionLikeType) type; if (clt.isTrueCollectionType()) { return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc); } return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc); }"
      },
      {
        "txt": "} } if (JsonNode.class.isAssignableFrom(type.getRawClass())) { return factory.createTreeDeserializer(config, type, beanDesc); } return factory.createBeanDeserializer(ctxt, type, beanDesc); } protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException"
      },
      {
        "txt": "{ Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann); if (deserDef == null) { return null; } JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef); return findConvertingDeserializer(ctxt, ann, deser); } protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, Annotated a, JsonDeserializer<Object> deser)"
      },
      {
        "txt": "throws JsonMappingException { Converter<Object,Object> conv = findConverter(ctxt, a); if (conv == null) { return deser; } JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser); } protected Converter<Object,Object> findConverter(DeserializationContext ctxt,"
      },
      {
        "txt": "Annotated a) throws JsonMappingException { Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a); if (convDef == null) { return null; } return ctxt.converterInstance(a, convDef); } private JavaType modifyTypeByAnnotation(DeserializationContext ctxt,"
      },
      {
        "txt": "throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); Class<?> subclass = intr.findDeserializationType(a, type); if (subclass != null) { try { <extra_id_0> } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow type \"+type+\" with concrete-type annotation (value \"+subclass.getName()+\"), method '\"+a.getName()+\"': \"+iae.getMessage(), null, iae); } } if (type.isContainerType()) { Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType());"
      },
      {
        "txt": "if (type.isContainerType()) { Class<?> keyClass = intr.findDeserializationKeyType(a, type.getKeyType()); if (keyClass != null) { if (!(type instanceof MapLikeType)) { throw new JsonMappingException(\"Illegal key-type annotation: type \"+type+\" is not a Map(-like) type\"); } try { type = ((MapLikeType) type).narrowKey(keyClass); } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow key type \"+type+\" with key-type annotation (\"+keyClass.getName()+\"): \"+iae.getMessage(), null, iae);"
      },
      {
        "txt": "} } JavaType keyType = type.getKeyType(); if (keyType != null && keyType.getValueHandler() == null) { Object kdDef = intr.findKeyDeserializer(a); if (kdDef != null) { KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef); if (kd != null) { type = ((MapLikeType) type).withKeyValueHandler(kd); keyType = type.getKeyType(); // just in case it's used below"
      },
      {
        "txt": "} } } Class<?> cc = intr.findDeserializationContentType(a, type.getContentType()); if (cc != null) { try { type = type.narrowContentsBy(cc); } catch (IllegalArgumentException iae) { throw new JsonMappingException(\"Failed to narrow content type \"+type+\" with content-type annotation (\"+cc.getName()+\"): \"+iae.getMessage(), null, iae); }"
      },
      {
        "txt": "} JavaType contentType = type.getContentType(); if (contentType.getValueHandler() == null) { // as with above, avoid resetting (which would trigger exception) Object cdDef = intr.findContentDeserializer(a); if (cdDef != null) { JsonDeserializer<?> cd = null; if (cdDef instanceof JsonDeserializer<?>) { cdDef = (JsonDeserializer<?>) cdDef; } else { Class<?> cdClass = _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class);"
      },
      {
        "txt": "if (cdClass != null) { cd = ctxt.deserializerInstance(a, cdClass); } } if (cd != null) { type = type.withContentValueHandler(cd); } } } }"
      },
      {
        "txt": "return type; } private boolean _hasCustomValueHandler(JavaType t) { if (t.isContainerType()) { JavaType ct = t.getContentType(); if (ct != null) { return (ct.getValueHandler() != null) || (ct.getTypeHandler() != null); } } return false;"
      },
      {
        "txt": "} private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) { if (src == null) { return null; } if (!(src instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\"); } Class<?> cls = (Class<?>) src;"
      },
      {
        "txt": "if (cls == noneClass || ClassUtil.isBogusClass(cls)) { return null; } return cls; } protected JsonDeserializer<Object> _handleUnknownValueDeserializer(JavaType type) throws JsonMappingException { Class<?> rawClass = type.getRawClass(); if (!ClassUtil.isConcrete(rawClass)) {"
      },
      {
        "txt": "throw new JsonMappingException(\"Can not find a Value deserializer for abstract type \"+type); } throw new JsonMappingException(\"Can not find a Value deserializer for type \"+type); } protected KeyDeserializer _handleUnknownKeyDeserializer(JavaType type) throws JsonMappingException { throw new JsonMappingException(\"Can not find a (Map) Key deserializer for type \"+type); }"
      }
    ]
  },
  {
    "id": 1447,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "start-bug-line": 177,
    "end-bug-line": 177,
    "bug": "type = _baseType.narrowBy(type.getRawClass());",
    "fix": "type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.Map; import java.util.concurrent.ConcurrentHashMap;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class TypeDeserializerBase extends TypeDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1; protected final TypeIdResolver _idResolver; protected final JavaType _baseType; protected final BeanProperty _property; protected final JavaType _defaultImpl;"
      },
      {
        "txt": "protected final String _typePropertyName; protected final boolean _typeIdVisible; protected final Map<String,JsonDeserializer<Object>> _deserializers; protected JsonDeserializer<Object> _defaultImplDeserializer; protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, Class<?> defaultImpl) { _baseType = baseType; _idResolver = idRes; _typePropertyName = typePropertyName;"
      },
      {
        "txt": "_typeIdVisible = typeIdVisible; _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 4); if (defaultImpl == null) { _defaultImpl = null; } else { _defaultImpl = baseType.forcedNarrowBy(defaultImpl); } _property = null; } protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property)"
      },
      {
        "txt": "{ _baseType = src._baseType; _idResolver = src._idResolver; _typePropertyName = src._typePropertyName; _typeIdVisible = src._typeIdVisible; _deserializers = src._deserializers; _defaultImpl = src._defaultImpl; _defaultImplDeserializer = src._defaultImplDeserializer; _property = property; }"
      },
      {
        "txt": "@Override public abstract TypeDeserializer forProperty(BeanProperty prop); @Override public abstract JsonTypeInfo.As getTypeInclusion(); public String baseTypeName() { return _baseType.getRawClass().getName(); } @Override public final String getPropertyName() { return _typePropertyName; } @Override public TypeIdResolver getTypeIdResolver() { return _idResolver; } @Override"
      },
      {
        "txt": "public Class<?> getDefaultImpl() { return (_defaultImpl == null) ? null : _defaultImpl.getRawClass(); } @Override public String toString() { StringBuilder sb = new StringBuilder(); sb.append('[').append(getClass().getName()); sb.append(\"; base-type:\").append(_baseType); sb.append(\"; id-resolver: \").append(_idResolver);"
      },
      {
        "txt": "sb.append(']'); return sb.toString(); } protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) {"
      },
      {
        "txt": "if (deser == null) { deser = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { <extra_id_0> } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser;"
      },
      {
        "txt": "} return deser; } protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException { if (_defaultImpl == null) { if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return NullifyingDeserializer.instance; } return null;"
      },
      {
        "txt": "} Class<?> raw = _defaultImpl.getRawClass(); if (ClassUtil.isBogusClass(raw)) { return NullifyingDeserializer.instance; } synchronized (_defaultImpl) { if (_defaultImplDeserializer == null) { _defaultImplDeserializer = ctxt.findContextualValueDeserializer( _defaultImpl, _property); }"
      },
      {
        "txt": "return _defaultImplDeserializer; } } @Deprecated protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException { return _deserializeWithNativeTypeId(jp, ctxt, jp.getTypeId()); } protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {"
      },
      {
        "txt": "JsonDeserializer<Object> deser; if (typeId == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { throw ctxt.mappingException(\"No (native) type id found when one was expected for polymorphic type handling\"); } } else { String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId); deser = _findDeserializer(ctxt, typeIdStr); }"
      },
      {
        "txt": "return deser.deserialize(jp, ctxt); } protected JsonDeserializer<Object> _handleUnknownTypeId(DeserializationContext ctxt, String typeId, TypeIdResolver idResolver, JavaType baseType) throws IOException { String extraDesc; if (idResolver instanceof TypeIdResolverBase) { extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds(); if (extraDesc == null) {"
      },
      {
        "txt": "extraDesc = \"known type ids are not statically known\"; } else { extraDesc = \"known type ids = \" + extraDesc; } } else { extraDesc = null; } throw ctxt.unknownTypeException(_baseType, typeId, extraDesc); }"
      }
    ]
  },
  {
    "id": 1448,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/module/SimpleAbstractTypeResolver.java",
    "start-bug-line": 80,
    "end-bug-line": 80,
    "bug": "return type.narrowBy(dst);",
    "fix": "return config.getTypeFactory().constructSpecializedType(type, dst);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.module; import java.lang.reflect.Modifier; import java.util.*; import com.fasterxml.jackson.databind.AbstractTypeResolver; import com.fasterxml.jackson.databind.DeserializationConfig; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.type.ClassKey; public class SimpleAbstractTypeResolver extends AbstractTypeResolver implements java.io.Serializable"
      },
      {
        "txt": "{ private static final long serialVersionUID = 8635483102371490919L; protected final HashMap<ClassKey,Class<?>> _mappings = new HashMap<ClassKey,Class<?>>(); public <T> SimpleAbstractTypeResolver addMapping(Class<T> superType, Class<? extends T> subType) { if (superType == subType) { throw new IllegalArgumentException(\"Can not add mapping from class to itself\"); } if (!superType.isAssignableFrom(subType)) { throw new IllegalArgumentException(\"Can not add mapping from class \"+superType.getName()"
      },
      {
        "txt": "+\" to \"+subType.getName()+\", as latter is not a subtype of former\"); } if (!Modifier.isAbstract(superType.getModifiers())) { throw new IllegalArgumentException(\"Can not add mapping from class \"+superType.getName() +\" since it is not abstract\"); } _mappings.put(new ClassKey(superType), subType); return this; } @Override"
      },
      {
        "txt": "{ Class<?> src = type.getRawClass(); Class<?> dst = _mappings.get(new ClassKey(src)); if (dst == null) { return null; } <extra_id_0> } @Override public JavaType resolveAbstractType(DeserializationConfig config, JavaType type) { return null; }"
      },
      {
        "txt": "return null; }"
      }
    ]
  }
]
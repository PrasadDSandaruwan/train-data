[
  {
    "id": 1608,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "start-bug-line": 152,
    "end-bug-line": 152,
    "bug": "",
    "fix": "Object defaultBean;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.util.*; public class PropertyBuilder { private final static Object NO_DEFAULT_MARKER = Boolean.FALSE; final protected SerializationConfig _config; final protected BeanDescription _beanDesc;"
      },
      {
        "txt": "final protected AnnotationIntrospector _annotationIntrospector; protected Object _defaultBean; final protected JsonInclude.Value _defaultInclusion; final protected boolean _useRealPropertyDefaults; public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc) { _config = config; _beanDesc = beanDesc; JsonInclude.Value inclPerType = JsonInclude.Value.merge( beanDesc.findPropertyInclusion(JsonInclude.Value.empty()),"
      },
      {
        "txt": "config.getDefaultPropertyInclusion(beanDesc.getBeanClass(), JsonInclude.Value.empty())); _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(), inclPerType); _useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT; _annotationIntrospector = _config.getAnnotationIntrospector(); } public Annotations getClassAnnotations() { return _beanDesc.getClassAnnotations(); }"
      },
      {
        "txt": "@SuppressWarnings(\"deprecation\") protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException { JavaType serializationType; try { serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);"
      },
      {
        "txt": "} catch (JsonMappingException e) { return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage()); } if (contentTypeSer != null) { if (serializationType == null) { serializationType = declaredType; } JavaType ct = serializationType.getContentType(); if (ct == null) { prov.reportBadPropertyDefinition(_beanDesc, propDef,"
      },
      {
        "txt": "\"serialization type \"+serializationType+\" has no content\"); } serializationType = serializationType.withContentTypeHandler(contentTypeSer); ct = serializationType.getContentType(); } Object valueToSuppress = null; boolean suppressNulls = false; JavaType actualType = (serializationType == null) ? declaredType : serializationType; JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion);"
      },
      {
        "txt": "JsonInclude.Include inclusion = inclV.getValueInclusion(); if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but... inclusion = JsonInclude.Include.ALWAYS; } switch (inclusion) { case NON_DEFAULT: <extra_id_0> if (_useRealPropertyDefaults) { if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) { am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType); } else {"
      },
      {
        "txt": "valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType); } else { valueToSuppress = getDefaultValue(actualType); suppressNulls = true; } if (valueToSuppress == null) { suppressNulls = true; } else { if (valueToSuppress.getClass().isArray()) { valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress);"
      },
      {
        "txt": "} } break; case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals suppressNulls = true; if (actualType.isReferenceType()) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; case NON_EMPTY:"
      },
      {
        "txt": "suppressNulls = true; valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; break; case NON_NULL: suppressNulls = true; case ALWAYS: // default default: if (actualType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;"
      },
      {
        "txt": "} break; } BeanPropertyWriter bpw = new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress); Object serDef = _annotationIntrospector.findNullSerializer(am); if (serDef != null) { bpw.assignNullSerializer(prov.serializerInstance(am, serDef)); }"
      },
      {
        "txt": "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am); if (unwrapper != null) { bpw = bpw.unwrappingWriter(unwrapper); } return bpw; } protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType) throws JsonMappingException { JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);"
      },
      {
        "txt": "if (secondary != declaredType) { Class<?> serClass = secondary.getRawClass(); Class<?> rawDeclared = declaredType.getRawClass(); if (serClass.isAssignableFrom(rawDeclared)) { ; // fine as is } else { if (!rawDeclared.isAssignableFrom(serClass)) { throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName()); } }"
      },
      {
        "txt": "useStaticTyping = true; declaredType = secondary; } JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a); if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) { useStaticTyping = (typing == JsonSerialize.Typing.STATIC); } if (useStaticTyping) { return declaredType.withStaticTyping(); }"
      },
      {
        "txt": "return null; } protected Object getDefaultBean() { Object def = _defaultBean; if (def == null) { def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers()); if (def == null) { Class<?> cls = _beanDesc.getClassInfo().getAnnotated(); throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\");"
      },
      {
        "txt": "def = NO_DEFAULT_MARKER; } _defaultBean = def; } return (def == NO_DEFAULT_MARKER) ? null : _defaultBean; } @Deprecated // since 2.8.5 protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type) {"
      },
      {
        "txt": "Object defaultBean = getDefaultBean(); if (defaultBean == null) { return getDefaultValue(type); } try { return member.getValue(defaultBean); } catch (Exception e) { return _throwWrapped(e, name, defaultBean); } }"
      },
      {
        "txt": "protected Object getDefaultValue(JavaType type) { Class<?> cls = type.getRawClass(); Class<?> prim = ClassUtil.primitiveType(cls); if (prim != null) { return ClassUtil.defaultValue(prim); } if (type.isContainerType() || type.isReferenceType()) { return JsonInclude.Include.NON_EMPTY; }"
      },
      {
        "txt": "if (cls == String.class) { return \"\"; } return null; } protected Object _throwWrapped(Exception e, String propName, Object defaultBean) { Throwable t = e; while (t.getCause() != null) { t = t.getCause();"
      },
      {
        "txt": "} if (t instanceof Error) throw (Error) t; if (t instanceof RuntimeException) throw (RuntimeException) t; throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\"); }"
      }
    ]
  },
  {
    "id": 1609,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "start-bug-line": 157,
    "end-bug-line": 157,
    "bug": "if (_useRealPropertyDefaults) {",
    "fix": "if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.util.*; public class PropertyBuilder { private final static Object NO_DEFAULT_MARKER = Boolean.FALSE; final protected SerializationConfig _config; final protected BeanDescription _beanDesc;"
      },
      {
        "txt": "final protected AnnotationIntrospector _annotationIntrospector; protected Object _defaultBean; final protected JsonInclude.Value _defaultInclusion; final protected boolean _useRealPropertyDefaults; public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc) { _config = config; _beanDesc = beanDesc; JsonInclude.Value inclPerType = JsonInclude.Value.merge( beanDesc.findPropertyInclusion(JsonInclude.Value.empty()),"
      },
      {
        "txt": "config.getDefaultPropertyInclusion(beanDesc.getBeanClass(), JsonInclude.Value.empty())); _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(), inclPerType); _useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT; _annotationIntrospector = _config.getAnnotationIntrospector(); } public Annotations getClassAnnotations() { return _beanDesc.getClassAnnotations(); }"
      },
      {
        "txt": "@SuppressWarnings(\"deprecation\") protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException { JavaType serializationType; try { serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType);"
      },
      {
        "txt": "} catch (JsonMappingException e) { return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage()); } if (contentTypeSer != null) { if (serializationType == null) { serializationType = declaredType; } JavaType ct = serializationType.getContentType(); if (ct == null) { prov.reportBadPropertyDefinition(_beanDesc, propDef,"
      },
      {
        "txt": "\"serialization type \"+serializationType+\" has no content\"); } serializationType = serializationType.withContentTypeHandler(contentTypeSer); ct = serializationType.getContentType(); } Object valueToSuppress = null; boolean suppressNulls = false; JavaType actualType = (serializationType == null) ? declaredType : serializationType; JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion);"
      },
      {
        "txt": "JsonInclude.Include inclusion = inclV.getValueInclusion(); if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but... inclusion = JsonInclude.Include.ALWAYS; } switch (inclusion) { case NON_DEFAULT: <extra_id_0> if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) { am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType); } else { valueToSuppress = getDefaultValue(actualType);"
      },
      {
        "txt": "} else { valueToSuppress = getDefaultValue(actualType); suppressNulls = true; } if (valueToSuppress == null) { suppressNulls = true; } else { if (valueToSuppress.getClass().isArray()) { valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress); }"
      },
      {
        "txt": "} break; case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals suppressNulls = true; if (actualType.isReferenceType()) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; case NON_EMPTY: suppressNulls = true;"
      },
      {
        "txt": "valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; break; case NON_NULL: suppressNulls = true; case ALWAYS: // default default: if (actualType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; }"
      },
      {
        "txt": "break; } BeanPropertyWriter bpw = new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress); Object serDef = _annotationIntrospector.findNullSerializer(am); if (serDef != null) { bpw.assignNullSerializer(prov.serializerInstance(am, serDef)); } NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am);"
      },
      {
        "txt": "if (unwrapper != null) { bpw = bpw.unwrappingWriter(unwrapper); } return bpw; } protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType) throws JsonMappingException { JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType); if (secondary != declaredType) {"
      },
      {
        "txt": "Class<?> serClass = secondary.getRawClass(); Class<?> rawDeclared = declaredType.getRawClass(); if (serClass.isAssignableFrom(rawDeclared)) { ; // fine as is } else { if (!rawDeclared.isAssignableFrom(serClass)) { throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName()); } } useStaticTyping = true;"
      },
      {
        "txt": "declaredType = secondary; } JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a); if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) { useStaticTyping = (typing == JsonSerialize.Typing.STATIC); } if (useStaticTyping) { return declaredType.withStaticTyping(); } return null;"
      },
      {
        "txt": "} protected Object getDefaultBean() { Object def = _defaultBean; if (def == null) { def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers()); if (def == null) { Class<?> cls = _beanDesc.getClassInfo().getAnnotated(); throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\"); def = NO_DEFAULT_MARKER;"
      },
      {
        "txt": "} _defaultBean = def; } return (def == NO_DEFAULT_MARKER) ? null : _defaultBean; } @Deprecated // since 2.8.5 protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type) { Object defaultBean = getDefaultBean();"
      },
      {
        "txt": "if (defaultBean == null) { return getDefaultValue(type); } try { return member.getValue(defaultBean); } catch (Exception e) { return _throwWrapped(e, name, defaultBean); } } protected Object getDefaultValue(JavaType type)"
      },
      {
        "txt": "{ Class<?> cls = type.getRawClass(); Class<?> prim = ClassUtil.primitiveType(cls); if (prim != null) { return ClassUtil.defaultValue(prim); } if (type.isContainerType() || type.isReferenceType()) { return JsonInclude.Include.NON_EMPTY; } if (cls == String.class) {"
      },
      {
        "txt": "return \"\"; } return null; } protected Object _throwWrapped(Exception e, String propName, Object defaultBean) { Throwable t = e; while (t.getCause() != null) { t = t.getCause(); }"
      },
      {
        "txt": "if (t instanceof Error) throw (Error) t; if (t instanceof RuntimeException) throw (RuntimeException) t; throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\"); }"
      }
    ]
  },
  {
    "id": 1610,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "start-bug-line": 162,
    "end-bug-line": 162,
    "bug": "valueToSuppress = getPropertyDefaultValue(propDef.getName(), am, actualType);",
    "fix": "try { valueToSuppress = am.getValue(defaultBean); } catch (Exception e) { _throwWrapped(e, propDef.getName(), defaultBean); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.*; public class PropertyBuilder { private final static Object NO_DEFAULT_MARKER = Boolean.FALSE; final protected SerializationConfig _config; final protected BeanDescription _beanDesc; final protected AnnotationIntrospector _annotationIntrospector; protected Object _defaultBean; final protected JsonInclude.Value _defaultInclusion; final protected boolean _useRealPropertyDefaults;"
      },
      {
        "txt": "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc) { _config = config; _beanDesc = beanDesc; JsonInclude.Value inclPerType = JsonInclude.Value.merge( beanDesc.findPropertyInclusion(JsonInclude.Value.empty()), config.getDefaultPropertyInclusion(beanDesc.getBeanClass(), JsonInclude.Value.empty())); _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(), inclPerType);"
      },
      {
        "txt": "_useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT; _annotationIntrospector = _config.getAnnotationIntrospector(); } public Annotations getClassAnnotations() { return _beanDesc.getClassAnnotations(); } @SuppressWarnings(\"deprecation\") protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer,"
      },
      {
        "txt": "AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException { JavaType serializationType; try { serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType); } catch (JsonMappingException e) { return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage()); } if (contentTypeSer != null) {"
      },
      {
        "txt": "if (serializationType == null) { serializationType = declaredType; } JavaType ct = serializationType.getContentType(); if (ct == null) { prov.reportBadPropertyDefinition(_beanDesc, propDef, \"serialization type \"+serializationType+\" has no content\"); } serializationType = serializationType.withContentTypeHandler(contentTypeSer); ct = serializationType.getContentType();"
      },
      {
        "txt": "} Object valueToSuppress = null; boolean suppressNulls = false; JavaType actualType = (serializationType == null) ? declaredType : serializationType; JsonInclude.Value inclV = _config.getDefaultPropertyInclusion(actualType.getRawClass(), _defaultInclusion); inclV = inclV.withOverrides(propDef.findInclusion()); JsonInclude.Include inclusion = inclV.getValueInclusion(); if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but... inclusion = JsonInclude.Include.ALWAYS;"
      },
      {
        "txt": "switch (inclusion) { case NON_DEFAULT: if (_useRealPropertyDefaults) { if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) { am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } <extra_id_0> } else { valueToSuppress = getDefaultValue(actualType); suppressNulls = true; } if (valueToSuppress == null) { suppressNulls = true;"
      },
      {
        "txt": "if (valueToSuppress == null) { suppressNulls = true; } else { if (valueToSuppress.getClass().isArray()) { valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress); } } break; case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals suppressNulls = true;"
      },
      {
        "txt": "if (actualType.isReferenceType()) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; case NON_EMPTY: suppressNulls = true; valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; break; case NON_NULL: suppressNulls = true;"
      },
      {
        "txt": "case ALWAYS: // default default: if (actualType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; } BeanPropertyWriter bpw = new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType,"
      },
      {
        "txt": "ser, typeSer, serializationType, suppressNulls, valueToSuppress); Object serDef = _annotationIntrospector.findNullSerializer(am); if (serDef != null) { bpw.assignNullSerializer(prov.serializerInstance(am, serDef)); } NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am); if (unwrapper != null) { bpw = bpw.unwrappingWriter(unwrapper); } return bpw;"
      },
      {
        "txt": "} protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType) throws JsonMappingException { JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType); if (secondary != declaredType) { Class<?> serClass = secondary.getRawClass(); Class<?> rawDeclared = declaredType.getRawClass(); if (serClass.isAssignableFrom(rawDeclared)) { ; // fine as is"
      },
      {
        "txt": "} else { if (!rawDeclared.isAssignableFrom(serClass)) { throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName()); } } useStaticTyping = true; declaredType = secondary; } JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a); if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) {"
      },
      {
        "txt": "useStaticTyping = (typing == JsonSerialize.Typing.STATIC); } if (useStaticTyping) { return declaredType.withStaticTyping(); } return null; } protected Object getDefaultBean() { Object def = _defaultBean;"
      },
      {
        "txt": "if (def == null) { def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers()); if (def == null) { Class<?> cls = _beanDesc.getClassInfo().getAnnotated(); throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; can not instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\"); def = NO_DEFAULT_MARKER; } _defaultBean = def; } return (def == NO_DEFAULT_MARKER) ? null : _defaultBean;"
      },
      {
        "txt": "} @Deprecated // since 2.8.5 protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type) { Object defaultBean = getDefaultBean(); if (defaultBean == null) { return getDefaultValue(type); } try {"
      },
      {
        "txt": "return member.getValue(defaultBean); } catch (Exception e) { return _throwWrapped(e, name, defaultBean); } } protected Object getDefaultValue(JavaType type) { Class<?> cls = type.getRawClass(); Class<?> prim = ClassUtil.primitiveType(cls); if (prim != null) {"
      },
      {
        "txt": "return ClassUtil.defaultValue(prim); } if (type.isContainerType() || type.isReferenceType()) { return JsonInclude.Include.NON_EMPTY; } if (cls == String.class) { return \"\"; } return null; }"
      },
      {
        "txt": "protected Object _throwWrapped(Exception e, String propName, Object defaultBean) { Throwable t = e; while (t.getCause() != null) { t = t.getCause(); } if (t instanceof Error) throw (Error) t; if (t instanceof RuntimeException) throw (RuntimeException) t; throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\"); }"
      }
    ]
  }
]
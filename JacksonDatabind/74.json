[
  {
    "id": 1661,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/AsPropertyTypeDeserializer.java",
    "start-bug-line": 156,
    "end-bug-line": 156,
    "bug": "",
    "fix": "} else if (p.getCurrentToken() == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) { return null; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import com.fasterxml.jackson.annotation.JsonTypeInfo.As; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.util.JsonParserSequence; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeIdResolver; import com.fasterxml.jackson.databind.util.TokenBuffer; public class AsPropertyTypeDeserializer extends AsArrayTypeDeserializer { private static final long serialVersionUID = 1L; protected final As _inclusion; public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl) { this(bt, idRes, typePropertyName, typeIdVisible, defaultImpl, As.PROPERTY);"
      },
      {
        "txt": "} public AsPropertyTypeDeserializer(JavaType bt, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl, As inclusion) { super(bt, idRes, typePropertyName, typeIdVisible, defaultImpl); _inclusion = inclusion; } public AsPropertyTypeDeserializer(AsPropertyTypeDeserializer src, BeanProperty property) { super(src, property);"
      },
      {
        "txt": "_inclusion = src._inclusion; } @Override public TypeDeserializer forProperty(BeanProperty prop) { return (prop == _property) ? this : new AsPropertyTypeDeserializer(this, prop); } @Override public As getTypeInclusion() { return _inclusion; } @Override @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "public Object deserializeTypedFromObject(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.canReadTypeId()) { Object typeId = p.getTypeId(); if (typeId != null) { return _deserializeWithNativeTypeId(p, ctxt, typeId); } } JsonToken t = p.getCurrentToken(); if (t == JsonToken.START_OBJECT) {"
      },
      {
        "txt": "t = p.nextToken(); } else if (/*t == JsonToken.START_ARRAY ||*/ t != JsonToken.FIELD_NAME) { return _deserializeTypedUsingDefaultImpl(p, ctxt, null); } TokenBuffer tb = null; for (; t == JsonToken.FIELD_NAME; t = p.nextToken()) { String name = p.getCurrentName(); p.nextToken(); // to point to the value if (name.equals(_typePropertyName)) { // gotcha! return _deserializeTypedForId(p, ctxt, tb);"
      },
      {
        "txt": "} if (tb == null) { tb = new TokenBuffer(p, ctxt); } tb.writeFieldName(name); tb.copyCurrentStructure(p); } return _deserializeTypedUsingDefaultImpl(p, ctxt, tb); } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "protected Object _deserializeTypedForId(JsonParser p, DeserializationContext ctxt, TokenBuffer tb) throws IOException { String typeId = p.getText(); JsonDeserializer<Object> deser = _findDeserializer(ctxt, typeId); if (_typeIdVisible) { // need to merge id back in JSON input? if (tb == null) { tb = new TokenBuffer(p, ctxt); } tb.writeFieldName(p.getCurrentName()); tb.writeString(typeId);"
      },
      {
        "txt": "} if (tb != null) { // need to put back skipped properties? p.clearCurrentToken(); p = JsonParserSequence.createFlattened(false, tb.asParser(p), p); } p.nextToken(); // to skip past String value return deser.deserialize(p, ctxt); } @SuppressWarnings(\"resource\") protected Object _deserializeTypedUsingDefaultImpl(JsonParser p, DeserializationContext ctxt,"
      },
      {
        "txt": "TokenBuffer tb) throws IOException { JsonDeserializer<Object> deser = _findDefaultImplDeserializer(ctxt); if (deser != null) { if (tb != null) { tb.writeEndObject(); p = tb.asParser(p); p.nextToken(); } return deser.deserialize(p, ctxt);"
      },
      {
        "txt": "Object result = TypeDeserializer.deserializeIfNatural(p, ctxt, _baseType); if (result != null) { return result; } if (p.getCurrentToken() == JsonToken.START_ARRAY) { return super.deserializeTypedFromAny(p, ctxt); <extra_id_0> ctxt.reportWrongTokenException(p, JsonToken.FIELD_NAME, \"missing property '\"+_typePropertyName+\"' that is to contain type id (for class \"+baseTypeName()+\")\"); return null; } @Override public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException {"
      },
      {
        "txt": "@Override public Object deserializeTypedFromAny(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.getCurrentToken() == JsonToken.START_ARRAY) { return super.deserializeTypedFromArray(p, ctxt); } return deserializeTypedFromObject(p, ctxt); }"
      }
    ]
  }
]
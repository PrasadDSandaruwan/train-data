[
  {
    "id": 1519,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java",
    "start-bug-line": 156,
    "end-bug-line": 156,
    "bug": "sb.append(';');",
    "fix": "sb.append(\">;\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public class ReferenceType extends SimpleType { private static final long serialVersionUID = 1L; protected final JavaType _referencedType; protected ReferenceType(Class<?> cls, JavaType refType, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, refType.hashCode(),"
      },
      {
        "txt": "valueHandler, typeHandler, asStatic); _referencedType = refType; } public static ReferenceType construct(Class<?> cls, JavaType refType, Object valueHandler, Object typeHandler) { return new ReferenceType(cls, refType, null, null, false); } @Override public ReferenceType withTypeHandler(Object h)"
      },
      {
        "txt": "{ if (h == _typeHandler) { return this; } return new ReferenceType(_class, _referencedType, _valueHandler, h, _asStatic); } @Override public ReferenceType withContentTypeHandler(Object h) { if (h == _referencedType.<Object>getTypeHandler()) {"
      },
      {
        "txt": "return this; } return new ReferenceType(_class, _referencedType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public ReferenceType withValueHandler(Object h) { if (h == _valueHandler) { return this; }"
      },
      {
        "txt": "return new ReferenceType(_class, _referencedType, h, _typeHandler,_asStatic); } @Override public ReferenceType withContentValueHandler(Object h) { if (h == _referencedType.<Object>getValueHandler()) { return this; } return new ReferenceType(_class, _referencedType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); }"
      },
      {
        "txt": "@Override public ReferenceType withStaticTyping() { if (_asStatic) { return this; } return new ReferenceType(_class, _referencedType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override protected String buildCanonicalName()"
      },
      {
        "txt": "{ StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); sb.append('<'); sb.append(_referencedType.toCanonical()); return sb.toString(); } @Override protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return new ReferenceType(subclass, _referencedType, _valueHandler, _typeHandler, _asStatic); } @Override public JavaType getReferencedType() { return _referencedType; } @Override public boolean isReferenceType() { return true;"
      },
      {
        "txt": "} @Override public int containedTypeCount() { return 1; } @Override public JavaType containedType(int index) { return (index == 0) ? _referencedType : null; } @Override"
      },
      {
        "txt": "public String containedTypeName(int index) { return (index == 0) ? \"T\" : null; } @Override public Class<?> getParameterSource() { return _class; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true);"
      },
      {
        "txt": "@Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<'); sb = _referencedType.getGenericSignature(sb); <extra_id_0> return sb; } @Override public String toString() { return new StringBuilder(40)"
      },
      {
        "txt": "{ return new StringBuilder(40) .append(\"[reference type, class \") .append(buildCanonicalName()) .append('<') .append(_referencedType) .append('>') .append(']') .toString(); }"
      },
      {
        "txt": "@Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; ReferenceType other = (ReferenceType) o; if (other._class != _class) return false; return _referencedType.equals(other._referencedType); }"
      }
    ]
  }
]
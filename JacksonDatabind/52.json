[
  {
    "id": 1540,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerBase.java",
    "start-bug-line": 612,
    "end-bug-line": 612,
    "bug": "_externalTypeIdHandler = extTypes.build();",
    "fix": "_externalTypeIdHandler = extTypes.build(_beanProperties);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.io.IOException; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.util.*; import com.fasterxml.jackson.annotation.JsonFormat;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdGenerators; import com.fasterxml.jackson.annotation.ObjectIdResolver; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.JsonParser.NumberType; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.impl.*; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.std.StdDeserializer; import com.fasterxml.jackson.databind.exc.IgnoredPropertyException; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.type.ClassKey; import com.fasterxml.jackson.databind.util.*; public abstract class BeanDeserializerBase extends StdDeserializer<Object> implements ContextualDeserializer, ResolvableDeserializer, java.io.Serializable // since 2.1"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1; protected final static PropertyName TEMP_PROPERTY_NAME = new PropertyName(\"#temporary-name\"); final private transient Annotations _classAnnotations; final protected JavaType _beanType; final protected JsonFormat.Shape _serializationShape; protected final ValueInstantiator _valueInstantiator; protected JsonDeserializer<Object> _delegateDeserializer; protected JsonDeserializer<Object> _arrayDelegateDeserializer; protected PropertyBasedCreator _propertyBasedCreator;"
      },
      {
        "txt": "protected boolean _nonStandardCreation; protected boolean _vanillaProcessing; final protected BeanPropertyMap _beanProperties; final protected ValueInjector[] _injectables; protected SettableAnyProperty _anySetter; final protected Set<String> _ignorableProps; final protected boolean _ignoreAllUnknown; final protected boolean _needViewProcesing; final protected Map<String, SettableBeanProperty> _backRefs; protected transient HashMap<ClassKey, JsonDeserializer<Object>> _subDeserializers;"
      },
      {
        "txt": "protected UnwrappedPropertyHandler _unwrappedPropertyHandler; protected ExternalTypeHandler _externalTypeIdHandler; protected final ObjectIdReader _objectIdReader; protected BeanDeserializerBase(BeanDeserializerBuilder builder, BeanDescription beanDesc, BeanPropertyMap properties, Map<String, SettableBeanProperty> backRefs, Set<String> ignorableProps, boolean ignoreAllUnknown, boolean hasViews) { super(beanDesc.getType());"
      },
      {
        "txt": "AnnotatedClass ac = beanDesc.getClassInfo(); _classAnnotations = ac.getAnnotations(); _beanType = beanDesc.getType(); _valueInstantiator = builder.getValueInstantiator(); _beanProperties = properties; _backRefs = backRefs; _ignorableProps = ignorableProps; _ignoreAllUnknown = ignoreAllUnknown; _anySetter = builder.getAnySetter(); List<ValueInjector> injectables = builder.getInjectables();"
      },
      {
        "txt": "_injectables = (injectables == null || injectables.isEmpty()) ? null : injectables.toArray(new ValueInjector[injectables.size()]); _objectIdReader = builder.getObjectIdReader(); _nonStandardCreation = (_unwrappedPropertyHandler != null) || _valueInstantiator.canCreateUsingDelegate() || _valueInstantiator.canCreateFromObjectWith() || !_valueInstantiator.canCreateUsingDefault() ; JsonFormat.Value format = beanDesc.findExpectedFormat(null); _serializationShape = (format == null) ? null : format.getShape();"
      },
      {
        "txt": "_needViewProcesing = hasViews; _vanillaProcessing = !_nonStandardCreation && (_injectables == null) && !_needViewProcesing && (_objectIdReader == null) ; } protected BeanDeserializerBase(BeanDeserializerBase src) { this(src, src._ignoreAllUnknown); }"
      },
      {
        "txt": "protected BeanDeserializerBase(BeanDeserializerBase src, boolean ignoreAllUnknown) { super(src._beanType); _classAnnotations = src._classAnnotations; _beanType = src._beanType; _valueInstantiator = src._valueInstantiator; _delegateDeserializer = src._delegateDeserializer; _propertyBasedCreator = src._propertyBasedCreator; _beanProperties = src._beanProperties; _backRefs = src._backRefs;"
      },
      {
        "txt": "_ignorableProps = src._ignorableProps; _ignoreAllUnknown = ignoreAllUnknown; _anySetter = src._anySetter; _injectables = src._injectables; _objectIdReader = src._objectIdReader; _nonStandardCreation = src._nonStandardCreation; _unwrappedPropertyHandler = src._unwrappedPropertyHandler; _needViewProcesing = src._needViewProcesing; _serializationShape = src._serializationShape; _vanillaProcessing = src._vanillaProcessing;"
      },
      {
        "txt": "} protected BeanDeserializerBase(BeanDeserializerBase src, NameTransformer unwrapper) { super(src._beanType); _classAnnotations = src._classAnnotations; _beanType = src._beanType; _valueInstantiator = src._valueInstantiator; _delegateDeserializer = src._delegateDeserializer; _propertyBasedCreator = src._propertyBasedCreator; _backRefs = src._backRefs;"
      },
      {
        "txt": "_ignorableProps = src._ignorableProps; _ignoreAllUnknown = (unwrapper != null) || src._ignoreAllUnknown; _anySetter = src._anySetter; _injectables = src._injectables; _objectIdReader = src._objectIdReader; _nonStandardCreation = src._nonStandardCreation; UnwrappedPropertyHandler uph = src._unwrappedPropertyHandler; if (unwrapper != null) { if (uph != null) { // got handler, delegate uph = uph.renameAll(unwrapper);"
      },
      {
        "txt": "} _beanProperties = src._beanProperties.renameAll(unwrapper); } else { _beanProperties = src._beanProperties; } _unwrappedPropertyHandler = uph; _needViewProcesing = src._needViewProcesing; _serializationShape = src._serializationShape; _vanillaProcessing = false; }"
      },
      {
        "txt": "public BeanDeserializerBase(BeanDeserializerBase src, ObjectIdReader oir) { super(src._beanType); _classAnnotations = src._classAnnotations; _beanType = src._beanType; _valueInstantiator = src._valueInstantiator; _delegateDeserializer = src._delegateDeserializer; _propertyBasedCreator = src._propertyBasedCreator; _backRefs = src._backRefs; _ignorableProps = src._ignorableProps;"
      },
      {
        "txt": "_ignoreAllUnknown = src._ignoreAllUnknown; _anySetter = src._anySetter; _injectables = src._injectables; _nonStandardCreation = src._nonStandardCreation; _unwrappedPropertyHandler = src._unwrappedPropertyHandler; _needViewProcesing = src._needViewProcesing; _serializationShape = src._serializationShape; _objectIdReader = oir; if (oir == null) { _beanProperties = src._beanProperties;"
      },
      {
        "txt": "_vanillaProcessing = src._vanillaProcessing; } else { ObjectIdValueProperty idProp = new ObjectIdValueProperty(oir, PropertyMetadata.STD_REQUIRED); _beanProperties = src._beanProperties.withProperty(idProp); _vanillaProcessing = false; } } public BeanDeserializerBase(BeanDeserializerBase src, Set<String> ignorableProps) { super(src._beanType);"
      },
      {
        "txt": "_classAnnotations = src._classAnnotations; _beanType = src._beanType; _valueInstantiator = src._valueInstantiator; _delegateDeserializer = src._delegateDeserializer; _propertyBasedCreator = src._propertyBasedCreator; _backRefs = src._backRefs; _ignorableProps = ignorableProps; _ignoreAllUnknown = src._ignoreAllUnknown; _anySetter = src._anySetter; _injectables = src._injectables;"
      },
      {
        "txt": "_nonStandardCreation = src._nonStandardCreation; _unwrappedPropertyHandler = src._unwrappedPropertyHandler; _needViewProcesing = src._needViewProcesing; _serializationShape = src._serializationShape; _vanillaProcessing = src._vanillaProcessing; _objectIdReader = src._objectIdReader; _beanProperties = src._beanProperties.withoutProperties(ignorableProps); } protected BeanDeserializerBase(BeanDeserializerBase src, BeanPropertyMap beanProps) {"
      },
      {
        "txt": "super(src._beanType); _classAnnotations = src._classAnnotations; _beanType = src._beanType; _valueInstantiator = src._valueInstantiator; _delegateDeserializer = src._delegateDeserializer; _propertyBasedCreator = src._propertyBasedCreator; _beanProperties = beanProps; _backRefs = src._backRefs; _ignorableProps = src._ignorableProps; _ignoreAllUnknown = src._ignoreAllUnknown;"
      },
      {
        "txt": "_anySetter = src._anySetter; _injectables = src._injectables; _objectIdReader = src._objectIdReader; _nonStandardCreation = src._nonStandardCreation; _unwrappedPropertyHandler = src._unwrappedPropertyHandler; _needViewProcesing = src._needViewProcesing; _serializationShape = src._serializationShape; _vanillaProcessing = src._vanillaProcessing; } @Override"
      },
      {
        "txt": "public abstract JsonDeserializer<Object> unwrappingDeserializer(NameTransformer unwrapper); public abstract BeanDeserializerBase withObjectIdReader(ObjectIdReader oir); public abstract BeanDeserializerBase withIgnorableProperties(Set<String> ignorableProps); public BeanDeserializerBase withBeanProperties(BeanPropertyMap props) { throw new UnsupportedOperationException(\"Class \"+getClass().getName() +\" does not override `withBeanProperties()`, needs to\"); } protected abstract BeanDeserializerBase asArrayDeserializer(); @Override public void resolve(DeserializationContext ctxt)"
      },
      {
        "txt": "throws JsonMappingException { ExternalTypeHandler.Builder extTypes = null; SettableBeanProperty[] creatorProps; if (_valueInstantiator.canCreateFromObjectWith()) { creatorProps = _valueInstantiator.getFromObjectArguments(ctxt.getConfig()); for (SettableBeanProperty prop : creatorProps) { if (prop.hasValueTypeDeserializer()) { TypeDeserializer typeDeser = prop.getValueTypeDeserializer(); if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {"
      },
      {
        "txt": "if (extTypes == null) { extTypes = new ExternalTypeHandler.Builder(); } extTypes.addExternal(prop, typeDeser); } } } } else { creatorProps = null; }"
      },
      {
        "txt": "UnwrappedPropertyHandler unwrapped = null; for (SettableBeanProperty origProp : _beanProperties) { SettableBeanProperty prop = origProp; if (!prop.hasValueDeserializer()) { JsonDeserializer<?> deser = findConvertingDeserializer(ctxt, prop); if (deser == null) { deser = findDeserializer(ctxt, prop.getType(), prop); } prop = prop.withValueDeserializer(deser); } else { // may need contextual version"
      },
      {
        "txt": "JsonDeserializer<Object> deser = prop.getValueDeserializer(); JsonDeserializer<?> cd = ctxt.handlePrimaryContextualization(deser, prop, prop.getType()); if (cd != deser) { prop = prop.withValueDeserializer(cd); } } prop = _resolveManagedReferenceProperty(ctxt, prop); if (!(prop instanceof ManagedReferenceProperty)) { prop = _resolvedObjectIdProperty(ctxt, prop);"
      },
      {
        "txt": "} SettableBeanProperty u = _resolveUnwrappedProperty(ctxt, prop); if (u != null) { prop = u; if (unwrapped == null) { unwrapped = new UnwrappedPropertyHandler(); } unwrapped.addProperty(prop); _beanProperties.remove(prop); continue;"
      },
      {
        "txt": "} prop = _resolveInnerClassValuedProperty(ctxt, prop); if (prop != origProp) { _beanProperties.replace(prop); if (creatorProps != null) { for (int i = 0, len = creatorProps.length; i < len; ++i) { if (creatorProps[i] == origProp) { creatorProps[i] = prop; break; }"
      },
      {
        "txt": "if (creatorProps[i].getName().equals(prop.getName())) { creatorProps[i] = prop; break; } } } } if (prop.hasValueTypeDeserializer()) { TypeDeserializer typeDeser = prop.getValueTypeDeserializer(); if (typeDeser.getTypeInclusion() == JsonTypeInfo.As.EXTERNAL_PROPERTY) {"
      },
      {
        "txt": "if (extTypes == null) { extTypes = new ExternalTypeHandler.Builder(); } extTypes.addExternal(prop, typeDeser); _beanProperties.remove(prop); continue; } } } if (_anySetter != null && !_anySetter.hasValueDeserializer()) {"
      },
      {
        "txt": "_anySetter = _anySetter.withValueDeserializer(findDeserializer(ctxt, _anySetter.getType(), _anySetter.getProperty())); } if (_valueInstantiator.canCreateUsingDelegate()) { JavaType delegateType = _valueInstantiator.getDelegateType(ctxt.getConfig()); if (delegateType == null) { throw new IllegalArgumentException(\"Invalid delegate-creator definition for \"+_beanType +\": value instantiator (\"+_valueInstantiator.getClass().getName() +\") returned true for 'canCreateUsingDelegate()', but null for 'getDelegateType()'\"); }"
      },
      {
        "txt": "_delegateDeserializer = _findDelegateDeserializer(ctxt, delegateType, _valueInstantiator.getDelegateCreator()); } if (_valueInstantiator.canCreateUsingArrayDelegate()) { JavaType delegateType = _valueInstantiator.getArrayDelegateType(ctxt.getConfig()); if (delegateType == null) { throw new IllegalArgumentException(\"Invalid array-delegate-creator definition for \"+_beanType +\": value instantiator (\"+_valueInstantiator.getClass().getName() +\") returned true for 'canCreateUsingArrayDelegate()', but null for 'getArrayDelegateType()'\"); }"
      },
      {
        "txt": "_valueInstantiator.getArrayDelegateCreator()); } if (creatorProps != null) { _propertyBasedCreator = PropertyBasedCreator.construct(ctxt, _valueInstantiator, creatorProps); } if (extTypes != null) { <extra_id_0> _nonStandardCreation = true; } _unwrappedPropertyHandler = unwrapped; if (unwrapped != null) { // we consider this non-standard, to offline handling _nonStandardCreation = true; }"
      },
      {
        "txt": "_nonStandardCreation = true; } _vanillaProcessing = _vanillaProcessing && !_nonStandardCreation; } private JsonDeserializer<Object> _findDelegateDeserializer(DeserializationContext ctxt, JavaType delegateType, AnnotatedWithParams delegateCreator) throws JsonMappingException { BeanProperty.Std property = new BeanProperty.Std(TEMP_PROPERTY_NAME, delegateType, null, _classAnnotations, delegateCreator, PropertyMetadata.STD_OPTIONAL); TypeDeserializer td = delegateType.getTypeHandler();"
      },
      {
        "txt": "if (td == null) { td = ctxt.getConfig().findTypeDeserializer(delegateType); } JsonDeserializer<Object> dd = findDeserializer(ctxt, delegateType, property); if (td != null) { td = td.forProperty(property); return new TypeWrappedDeserializer(td, dd); } return dd; }"
      },
      {
        "txt": "protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException { final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr != null) { Object convDef = intr.findDeserializationConverter(prop.getMember()); if (convDef != null) { Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef); JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());"
      },
      {
        "txt": "JsonDeserializer<?> ser = ctxt.findContextualValueDeserializer(delegateType, prop); return new StdDelegatingDeserializer<Object>(conv, delegateType, ser); } } return null; } @Override public JsonDeserializer<?> createContextual(DeserializationContext ctxt, BeanProperty property) throws JsonMappingException {"
      },
      {
        "txt": "ObjectIdReader oir = _objectIdReader; final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); final AnnotatedMember accessor = (property == null || intr == null) ? null : property.getMember(); if (accessor != null && intr != null) { ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor); if (objectIdInfo != null) { // some code duplication here as well (from BeanDeserializerFactory) objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo); Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType idType;"
      },
      {
        "txt": "SettableBeanProperty idProp; ObjectIdGenerator<?> idGen; ObjectIdResolver resolver = ctxt.objectIdResolverInstance(accessor, objectIdInfo); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { PropertyName propName = objectIdInfo.getPropertyName(); idProp = findProperty(propName); if (idProp == null) { throw new IllegalArgumentException(\"Invalid Object Id definition for \" +handledType().getName()+\": can not find property with name '\"+propName+\"'\"); }"
      },
      {
        "txt": "idType = idProp.getType(); idGen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); } else { // other types need to be simpler JavaType type = ctxt.constructType(implClass); idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; idProp = null; idGen = ctxt.objectIdGeneratorInstance(accessor, objectIdInfo); } JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); oir = ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(),"
      },
      {
        "txt": "idGen, deser, idProp, resolver); } } BeanDeserializerBase contextual = this; if (oir != null && oir != _objectIdReader) { contextual = contextual.withObjectIdReader(oir); } if (accessor != null) { JsonIgnoreProperties.Value ignorals = intr.findPropertyIgnorals(accessor); if (ignorals != null) {"
      },
      {
        "txt": "Set<String> ignored = ignorals.findIgnoredForDeserialization(); if (!ignored.isEmpty()) { Set<String> prev = contextual._ignorableProps; if ((prev != null) && !prev.isEmpty()) { ignored = new HashSet<String>(ignored); ignored.addAll(prev); } contextual = contextual.withIgnorableProperties(ignored); } }"
      },
      {
        "txt": "} JsonFormat.Value format = findFormatOverrides(ctxt, property, handledType()); JsonFormat.Shape shape = null; if (format != null) { if (format.hasShape()) { shape = format.getShape(); } Boolean B = format.getFeature(JsonFormat.Feature.ACCEPT_CASE_INSENSITIVE_PROPERTIES); if (B != null) { BeanPropertyMap propsOrig = _beanProperties;"
      },
      {
        "txt": "BeanPropertyMap props = propsOrig.withCaseInsensitivity(B.booleanValue()); if (props != propsOrig) { contextual = contextual.withBeanProperties(props); } } } if (shape == null) { shape = _serializationShape; } if (shape == JsonFormat.Shape.ARRAY) {"
      },
      {
        "txt": "contextual = contextual.asArrayDeserializer(); } return contextual; } protected SettableBeanProperty _resolveManagedReferenceProperty(DeserializationContext ctxt, SettableBeanProperty prop) { String refName = prop.getManagedReferenceName(); if (refName == null) { return prop;"
      },
      {
        "txt": "} JsonDeserializer<?> valueDeser = prop.getValueDeserializer(); SettableBeanProperty backProp = valueDeser.findBackReference(refName); if (backProp == null) { throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': no back reference property found from type \" +prop.getType()); } JavaType referredType = _beanType; JavaType backRefType = backProp.getType(); boolean isContainer = prop.getType().isContainerType();"
      },
      {
        "txt": "if (!backRefType.getRawClass().isAssignableFrom(referredType.getRawClass())) { throw new IllegalArgumentException(\"Can not handle managed/back reference '\"+refName+\"': back reference type (\" +backRefType.getRawClass().getName()+\") not compatible with managed type (\" +referredType.getRawClass().getName()+\")\"); } return new ManagedReferenceProperty(prop, refName, backProp, _classAnnotations, isContainer); } protected SettableBeanProperty _resolvedObjectIdProperty(DeserializationContext ctxt, SettableBeanProperty prop) throws JsonMappingException"
      },
      {
        "txt": "{ ObjectIdInfo objectIdInfo = prop.getObjectIdInfo(); JsonDeserializer<Object> valueDeser = prop.getValueDeserializer(); ObjectIdReader objectIdReader = valueDeser.getObjectIdReader(); if (objectIdInfo == null && objectIdReader == null) { return prop; } return new ObjectIdReferenceProperty(prop, objectIdInfo); } protected SettableBeanProperty _resolveUnwrappedProperty(DeserializationContext ctxt,"
      },
      {
        "txt": "SettableBeanProperty prop) { AnnotatedMember am = prop.getMember(); if (am != null) { NameTransformer unwrapper = ctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(am); if (unwrapper != null) { JsonDeserializer<Object> orig = prop.getValueDeserializer(); JsonDeserializer<Object> unwrapping = orig.unwrappingDeserializer(unwrapper); if (unwrapping != orig && unwrapping != null) { return prop.withValueDeserializer(unwrapping);"
      },
      {
        "txt": "} } } return null; } protected SettableBeanProperty _resolveInnerClassValuedProperty(DeserializationContext ctxt, SettableBeanProperty prop) { JsonDeserializer<Object> deser = prop.getValueDeserializer(); if (deser instanceof BeanDeserializerBase) {"
      },
      {
        "txt": "BeanDeserializerBase bd = (BeanDeserializerBase) deser; ValueInstantiator vi = bd.getValueInstantiator(); if (!vi.canCreateUsingDefault()) { // no default constructor Class<?> valueClass = prop.getType().getRawClass(); Class<?> enclosing = ClassUtil.getOuterClass(valueClass); if (enclosing != null && enclosing == _beanType.getRawClass()) { for (Constructor<?> ctor : valueClass.getConstructors()) { Class<?>[] paramTypes = ctor.getParameterTypes(); if (paramTypes.length == 1 && paramTypes[0] == enclosing) { if (ctxt.canOverrideAccessModifiers()) {"
      },
      {
        "txt": "ClassUtil.checkAndFixAccess(ctor, ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } return new InnerClassProperty(prop, ctor); } } } } } return prop; }"
      },
      {
        "txt": "@Override public boolean isCachable() { return true; } @Override public Class<?> handledType() { return _beanType.getRawClass(); } @Override public ObjectIdReader getObjectIdReader() { return _objectIdReader; }"
      },
      {
        "txt": "public boolean hasProperty(String propertyName) { return _beanProperties.find(propertyName) != null; } public boolean hasViews() { return _needViewProcesing; } public int getPropertyCount() { return _beanProperties.size(); } @Override"
      },
      {
        "txt": "public Collection<Object> getKnownPropertyNames() { ArrayList<Object> names = new ArrayList<Object>(); for (SettableBeanProperty prop : _beanProperties) { names.add(prop.getName()); } return names; } @Deprecated public final Class<?> getBeanClass() { return _beanType.getRawClass(); } @Override"
      },
      {
        "txt": "public JavaType getValueType() { return _beanType; } public Iterator<SettableBeanProperty> properties() { if (_beanProperties == null) { throw new IllegalStateException(\"Can only call after BeanDeserializer has been resolved\"); } return _beanProperties.iterator(); } public Iterator<SettableBeanProperty> creatorProperties() {"
      },
      {
        "txt": "if (_propertyBasedCreator == null) { return Collections.<SettableBeanProperty>emptyList().iterator(); } return _propertyBasedCreator.properties().iterator(); } public SettableBeanProperty findProperty(PropertyName propertyName) { return findProperty(propertyName.getSimpleName()); } public SettableBeanProperty findProperty(String propertyName)"
      },
      {
        "txt": "{ SettableBeanProperty prop = (_beanProperties == null) ? null : _beanProperties.find(propertyName); if (prop == null && _propertyBasedCreator != null) { prop = _propertyBasedCreator.findCreatorProperty(propertyName); } return prop; } public SettableBeanProperty findProperty(int propertyIndex) {"
      },
      {
        "txt": "SettableBeanProperty prop = (_beanProperties == null) ? null : _beanProperties.find(propertyIndex); if (prop == null && _propertyBasedCreator != null) { prop = _propertyBasedCreator.findCreatorProperty(propertyIndex); } return prop; } @Override public SettableBeanProperty findBackReference(String logicalName) {"
      },
      {
        "txt": "if (_backRefs == null) { return null; } return _backRefs.get(logicalName); } public ValueInstantiator getValueInstantiator() { return _valueInstantiator; } public void replaceProperty(SettableBeanProperty original, SettableBeanProperty replacement)"
      },
      {
        "txt": "{ _beanProperties.replace(replacement); } public abstract Object deserializeFromObject(JsonParser p, DeserializationContext ctxt) throws IOException; @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException {"
      },
      {
        "txt": "if (_objectIdReader != null) { if (p.canReadObjectId()) { Object id = p.getObjectId(); if (id != null) { Object ob = typeDeserializer.deserializeTypedFromObject(p, ctxt); return _handleTypedObjectId(p, ctxt, ob, id); } } JsonToken t = p.getCurrentToken(); if (t != null) {"
      },
      {
        "txt": "if (t.isScalarValue()) { return deserializeFromObjectId(p, ctxt); } if (t == JsonToken.START_OBJECT) { t = p.nextToken(); } if ((t == JsonToken.FIELD_NAME) && _objectIdReader.maySerializeAsObject() && _objectIdReader.isValidReferencePropertyName(p.getCurrentName(), p)) { return deserializeFromObjectId(p, ctxt); }"
      },
      {
        "txt": "} } return typeDeserializer.deserializeTypedFromObject(p, ctxt); } protected Object _handleTypedObjectId(JsonParser p, DeserializationContext ctxt, Object pojo, Object rawId) throws IOException { JsonDeserializer<Object> idDeser = _objectIdReader.getDeserializer(); final Object id;"
      },
      {
        "txt": "if (idDeser.handledType() == rawId.getClass()) { id = rawId; } else { id = _convertObjectId(p, ctxt, rawId, idDeser); } ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(pojo); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(pojo, id);"
      },
      {
        "txt": "} return pojo; } @SuppressWarnings(\"resource\") // TokenBuffers don't need close, nor parser thereof protected Object _convertObjectId(JsonParser p, DeserializationContext ctxt, Object rawId, JsonDeserializer<Object> idDeser) throws IOException { TokenBuffer buf = new TokenBuffer(p, ctxt); if (rawId instanceof String) { buf.writeString((String) rawId);"
      },
      {
        "txt": "} else if (rawId instanceof Long) { buf.writeNumber(((Long) rawId).longValue()); } else if (rawId instanceof Integer) { buf.writeNumber(((Integer) rawId).intValue()); } else { buf.writeObject(rawId); } JsonParser bufParser = buf.asParser(); bufParser.nextToken(); return idDeser.deserialize(bufParser, ctxt);"
      },
      {
        "txt": "} protected Object deserializeWithObjectId(JsonParser p, DeserializationContext ctxt) throws IOException { return deserializeFromObject(p, ctxt); } protected Object deserializeFromObjectId(JsonParser p, DeserializationContext ctxt) throws IOException { Object id = _objectIdReader.readObjectReference(p, ctxt); ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); Object pojo = roid.resolve(); if (pojo == null) { // not yet; should wait..."
      },
      {
        "txt": "throw new UnresolvedForwardReference(p, \"Could not resolve Object Id [\"+id+\"] (for \"+_beanType+\").\", p.getCurrentLocation(), roid); } return pojo; } protected Object deserializeFromObjectUsingNonDefault(JsonParser p, DeserializationContext ctxt) throws IOException { if (_delegateDeserializer != null) {"
      },
      {
        "txt": "return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); } if (_propertyBasedCreator != null) { return _deserializeUsingPropertyBased(p, ctxt); } if (_beanType.isAbstract()) { return ctxt.handleMissingInstantiator(handledType(), p, \"abstract type (need to add/enable type information?)\"); }"
      },
      {
        "txt": "return ctxt.handleMissingInstantiator(_beanType.getRawClass(), p, \"no suitable constructor found, can not deserialize from Object value (missing default constructor or creator, or perhaps need to add/enable type information?)\"); } protected abstract Object _deserializeUsingPropertyBased(final JsonParser p, final DeserializationContext ctxt) throws IOException, JsonProcessingException; @SuppressWarnings(\"incomplete-switch\") public Object deserializeFromNumber(JsonParser p, DeserializationContext ctxt) throws IOException { if (_objectIdReader != null) {"
      },
      {
        "txt": "return deserializeFromObjectId(p, ctxt); } switch (p.getNumberType()) { case INT: if (_delegateDeserializer != null) { if (!_valueInstantiator.canCreateFromInt()) { Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean);"
      },
      {
        "txt": "} return bean; } } return _valueInstantiator.createFromInt(ctxt, p.getIntValue()); case LONG: if (_delegateDeserializer != null) { if (!_valueInstantiator.canCreateFromInt()) { Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt));"
      },
      {
        "txt": "if (_injectables != null) { injectValues(ctxt, bean); } return bean; } } return _valueInstantiator.createFromLong(ctxt, p.getLongValue()); } if (_delegateDeserializer != null) { Object bean = _valueInstantiator.createUsingDelegate(ctxt,"
      },
      {
        "txt": "_delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean); } return bean; } return ctxt.handleMissingInstantiator(handledType(), p, \"no suitable creator method found to deserialize from Number value (%s)\", p.getNumberValue()); }"
      },
      {
        "txt": "public Object deserializeFromString(JsonParser p, DeserializationContext ctxt) throws IOException { if (_objectIdReader != null) { return deserializeFromObjectId(p, ctxt); } if (_delegateDeserializer != null) { if (!_valueInstantiator.canCreateFromString()) { Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean);"
      },
      {
        "txt": "} return bean; } } return _valueInstantiator.createFromString(ctxt, p.getText()); } public Object deserializeFromDouble(JsonParser p, DeserializationContext ctxt) throws IOException { NumberType t = p.getNumberType(); if ((t == NumberType.DOUBLE) || (t == NumberType.FLOAT)) {"
      },
      {
        "txt": "if (_delegateDeserializer != null) { if (!_valueInstantiator.canCreateFromDouble()) { Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean); } return bean; } } return _valueInstantiator.createFromDouble(ctxt, p.getDoubleValue());"
      },
      {
        "txt": "} if (_delegateDeserializer != null) { return _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); } return ctxt.handleMissingInstantiator(handledType(), p, \"no suitable creator method found to deserialize from Number value (%s)\", p.getNumberValue()); } public Object deserializeFromBoolean(JsonParser p, DeserializationContext ctxt) throws IOException {"
      },
      {
        "txt": "if (_delegateDeserializer != null) { if (!_valueInstantiator.canCreateFromBoolean()) { Object bean = _valueInstantiator.createUsingDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean); } return bean; } } boolean value = (p.getCurrentToken() == JsonToken.VALUE_TRUE);"
      },
      {
        "txt": "return _valueInstantiator.createFromBoolean(ctxt, value); } public Object deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException { if (_arrayDelegateDeserializer != null) { try { Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _arrayDelegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean); }"
      },
      {
        "txt": "return bean; } catch (Exception e) { return wrapInstantiationProblem(e, ctxt); } } if (_delegateDeserializer != null) { try { Object bean = _valueInstantiator.createUsingArrayDelegate(ctxt, _delegateDeserializer.deserialize(p, ctxt)); if (_injectables != null) { injectValues(ctxt, bean);"
      },
      {
        "txt": "} return bean; } catch (Exception e) { wrapInstantiationProblem(e, ctxt); return null; } } if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { JsonToken t = p.nextToken(); if (t == JsonToken.END_ARRAY && ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {"
      },
      {
        "txt": "return null; } final Object value = deserialize(p, ctxt); if (p.nextToken() != JsonToken.END_ARRAY) { handleMissingEndArrayForSingle(p, ctxt); } return value; } if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) { JsonToken t = p.nextToken();"
      },
      {
        "txt": "if (t == JsonToken.END_ARRAY) { return null; } return ctxt.handleUnexpectedToken(handledType(), JsonToken.START_ARRAY, p, null); } return ctxt.handleUnexpectedToken(handledType(), p); } public Object deserializeFromEmbedded(JsonParser p, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ if (_objectIdReader != null) { return deserializeFromObjectId(p, ctxt); } return p.getEmbeddedObject(); } protected void injectValues(DeserializationContext ctxt, Object bean) throws IOException { for (ValueInjector injector : _injectables) {"
      },
      {
        "txt": "injector.inject(ctxt, bean); } } @SuppressWarnings(\"resource\") protected Object handleUnknownProperties(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException { unknownTokens.writeEndObject(); JsonParser bufferParser = unknownTokens.asParser();"
      },
      {
        "txt": "while (bufferParser.nextToken() != JsonToken.END_OBJECT) { String propName = bufferParser.getCurrentName(); bufferParser.nextToken(); handleUnknownProperty(bufferParser, ctxt, bean, propName); } return bean; } protected void handleUnknownVanilla(JsonParser p, DeserializationContext ctxt, Object bean, String propName) throws IOException"
      },
      {
        "txt": "{ if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, bean, propName); } else if (_anySetter != null) { try { _anySetter.deserializeAndSet(p, ctxt, bean, propName); } catch (Exception e) { wrapAndThrow(e, bean, propName, ctxt); } } else {"
      },
      {
        "txt": "handleUnknownProperty(p, ctxt, bean, propName); } } @Override protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException { if (_ignoreAllUnknown) { p.skipChildren();"
      },
      {
        "txt": "return; } if (_ignorableProps != null && _ignorableProps.contains(propName)) { handleIgnoredProperty(p, ctxt, beanOrClass, propName); } super.handleUnknownProperty(p, ctxt, beanOrClass, propName); } protected void handleIgnoredProperty(JsonParser p, DeserializationContext ctxt, Object beanOrClass, String propName) throws IOException"
      },
      {
        "txt": "{ if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES)) { throw IgnoredPropertyException.from(p, beanOrClass, propName, getKnownPropertyNames()); } p.skipChildren(); } @SuppressWarnings(\"resource\") protected Object handlePolymorphic(JsonParser p, DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException"
      },
      {
        "txt": "{ JsonDeserializer<Object> subDeser = _findSubclassDeserializer(ctxt, bean, unknownTokens); if (subDeser != null) { if (unknownTokens != null) { unknownTokens.writeEndObject(); JsonParser p2 = unknownTokens.asParser(); p2.nextToken(); // to get to first data field bean = subDeser.deserialize(p2, ctxt, bean); } if (p != null) {"
      },
      {
        "txt": "bean = subDeser.deserialize(p, ctxt, bean); } return bean; } if (unknownTokens != null) { bean = handleUnknownProperties(ctxt, bean, unknownTokens); } if (p != null) { bean = deserialize(p, ctxt, bean); }"
      },
      {
        "txt": "return bean; } protected JsonDeserializer<Object> _findSubclassDeserializer(DeserializationContext ctxt, Object bean, TokenBuffer unknownTokens) throws IOException { JsonDeserializer<Object> subDeser; synchronized (this) { subDeser = (_subDeserializers == null) ? null : _subDeserializers.get(new ClassKey(bean.getClass())); }"
      },
      {
        "txt": "if (subDeser != null) { return subDeser; } JavaType type = ctxt.constructType(bean.getClass()); subDeser = ctxt.findRootValueDeserializer(type); if (subDeser != null) { synchronized (this) { if (_subDeserializers == null) { _subDeserializers = new HashMap<ClassKey,JsonDeserializer<Object>>();; }"
      },
      {
        "txt": "_subDeserializers.put(new ClassKey(bean.getClass()), subDeser); } } return subDeser; } public void wrapAndThrow(Throwable t, Object bean, String fieldName, DeserializationContext ctxt) throws IOException { throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, fieldName); }"
      },
      {
        "txt": "@Deprecated // since 2.4, not used by core Jackson; only relevant for arrays/Collections public void wrapAndThrow(Throwable t, Object bean, int index, DeserializationContext ctxt) throws IOException { throw JsonMappingException.wrapWithPath(throwOrReturnThrowable(t, ctxt), bean, index); } private Throwable throwOrReturnThrowable(Throwable t, DeserializationContext ctxt) throws IOException { while (t instanceof InvocationTargetException && t.getCause() != null) { t = t.getCause(); }"
      },
      {
        "txt": "if (t instanceof Error) { throw (Error) t; } boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS); if (t instanceof IOException) { if (!wrap || !(t instanceof JsonProcessingException)) { throw (IOException) t; } } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions if (t instanceof RuntimeException) {"
      },
      {
        "txt": "throw (RuntimeException) t; } } return t; } protected Object wrapInstantiationProblem(Throwable t, DeserializationContext ctxt) throws IOException { while (t instanceof InvocationTargetException && t.getCause() != null) { t = t.getCause();"
      },
      {
        "txt": "} if (t instanceof Error) { throw (Error) t; } boolean wrap = (ctxt == null) || ctxt.isEnabled(DeserializationFeature.WRAP_EXCEPTIONS); if (t instanceof IOException) { throw (IOException) t; } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions if (t instanceof RuntimeException) { throw (RuntimeException) t;"
      },
      {
        "txt": "} } return ctxt.handleInstantiationProblem(_beanType.getRawClass(), null, t); }"
      }
    ]
  },
  {
    "id": 1541,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
    "start-bug-line": 310,
    "end-bug-line": 310,
    "bug": "",
    "fix": "public ExternalTypeHandler build(BeanPropertyMap otherProps) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.TokenBuffer; public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)"
      },
      {
        "txt": "{ _properties = properties; _nameToPropertyIndex = nameToPropertyIndex; _typeIds = typeIds; _tokens = tokens; } protected ExternalTypeHandler(ExternalTypeHandler h) { _properties = h._properties; _nameToPropertyIndex = h._nameToPropertyIndex;"
      },
      {
        "txt": "int len = _properties.length; _typeIds = new String[len]; _tokens = new TokenBuffer[len]; } public ExternalTypeHandler start() { return new ExternalTypeHandler(this); } public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException"
      },
      {
        "txt": "{ Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; if (!prop.hasTypePropertyName(propName)) { return false; }"
      },
      {
        "txt": "String typeId = p.getText(); boolean canDeserialize = (bean != null) && (_tokens[index] != null); if (canDeserialize) { _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; } else { _typeIds[index] = typeId; } return true; }"
      },
      {
        "txt": "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException { Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; boolean canDeserialize;"
      },
      {
        "txt": "if (prop.hasTypePropertyName(propName)) { _typeIds[index] = p.getText(); p.skipChildren(); canDeserialize = (bean != null) && (_tokens[index] != null); } else { @SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.copyCurrentStructure(p); _tokens[index] = tokens; canDeserialize = (bean != null) && (_typeIds[index] != null);"
      },
      {
        "txt": "} if (canDeserialize) { String typeId = _typeIds[index]; _typeIds[index] = null; _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; } return true; } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException { for (int i = 0, len = _properties.length; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { TokenBuffer tokens = _tokens[i]; if (tokens == null) { continue; }"
      },
      {
        "txt": "JsonToken t = tokens.firstToken(); if (t != null && t.isScalarValue()) { JsonParser buffered = tokens.asParser(p); buffered.nextToken(); SettableBeanProperty extProp = _properties[i].getProperty(); Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); if (result != null) { extProp.set(bean, result); continue; }"
      },
      {
        "txt": "if (!_properties[i].hasDefaultType()) { ctxt.reportMappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } else { typeId = _properties[i].getDefaultTypeId(); } } } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty(); ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\","
      },
      {
        "txt": "prop.getName(), _properties[i].getTypePropertyName()); } _deserializeAndSet(p, ctxt, bean, i, typeId); } return bean; } public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {"
      },
      {
        "txt": "final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) {"
      },
      {
        "txt": "ctxt.reportMappingException(\"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); }"
      },
      {
        "txt": "values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { buffer.assignParameter(typeProp, typeId); } } }"
      },
      {
        "txt": "Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { return null; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray();"
      },
      {
        "txt": "merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); return _properties[index].getProperty().deserialize(mp, ctxt); } @SuppressWarnings(\"resource\") protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException"
      },
      {
        "txt": "{ JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { _properties[index].getProperty().set(bean, null); return; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray(); merged.writeString(typeId);"
      },
      {
        "txt": "merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean); } public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>();"
      },
      {
        "txt": "{ Integer index = _properties.size(); _properties.add(new ExtTypedProperty(property, typeDeser)); _nameToPropertyIndex.put(property.getName(), index); _nameToPropertyIndex.put(typeDeser.getPropertyName(), index); } <extra_id_0> @Deprecated // since 2.8; may be removed as early as 2.9 public ExternalTypeHandler build() { return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null); } }"
      },
      {
        "txt": "} } private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {"
      },
      {
        "txt": "_property = property; _typeDeserializer = typeDeser; _typePropertyName = typeDeser.getPropertyName(); } public void linkTypeProperty(SettableBeanProperty p) { _typeProperty = p; } public boolean hasTypePropertyName(String n) { return n.equals(_typePropertyName); }"
      },
      {
        "txt": "public boolean hasDefaultType() { return _typeDeserializer.getDefaultImpl() != null; } public String getDefaultTypeId() { Class<?> defaultType = _typeDeserializer.getDefaultImpl(); if (defaultType == null) { return null; } return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); }"
      },
      {
        "txt": "public String getTypePropertyName() { return _typePropertyName; } public SettableBeanProperty getProperty() { return _property; } public SettableBeanProperty getTypeProperty() { return _typeProperty; } }"
      }
    ]
  },
  {
    "id": 1542,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
    "start-bug-line": 311,
    "end-bug-line": 311,
    "bug": "",
    "fix": "final int len = _properties.size(); ExtTypedProperty[] extProps = new ExtTypedProperty[len]; for (int i = 0; i < len; ++i) { ExtTypedProperty extProp = _properties.get(i); String typePropId = extProp.getTypePropertyName(); SettableBeanProperty typeProp = otherProps.find(typePropId); if (typeProp != null) { extProp.linkTypeProperty(typeProp); } extProps[i] = extProp; } return new ExternalTypeHandler(extProps, _nameToPropertyIndex, null, null); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.TokenBuffer; public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens)"
      },
      {
        "txt": "{ _properties = properties; _nameToPropertyIndex = nameToPropertyIndex; _typeIds = typeIds; _tokens = tokens; } protected ExternalTypeHandler(ExternalTypeHandler h) { _properties = h._properties; _nameToPropertyIndex = h._nameToPropertyIndex;"
      },
      {
        "txt": "int len = _properties.length; _typeIds = new String[len]; _tokens = new TokenBuffer[len]; } public ExternalTypeHandler start() { return new ExternalTypeHandler(this); } public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException"
      },
      {
        "txt": "{ Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; if (!prop.hasTypePropertyName(propName)) { return false; }"
      },
      {
        "txt": "String typeId = p.getText(); boolean canDeserialize = (bean != null) && (_tokens[index] != null); if (canDeserialize) { _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; } else { _typeIds[index] = typeId; } return true; }"
      },
      {
        "txt": "public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException { Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; boolean canDeserialize;"
      },
      {
        "txt": "if (prop.hasTypePropertyName(propName)) { _typeIds[index] = p.getText(); p.skipChildren(); canDeserialize = (bean != null) && (_tokens[index] != null); } else { @SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.copyCurrentStructure(p); _tokens[index] = tokens; canDeserialize = (bean != null) && (_typeIds[index] != null);"
      },
      {
        "txt": "} if (canDeserialize) { String typeId = _typeIds[index]; _typeIds[index] = null; _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; } return true; } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException { for (int i = 0, len = _properties.length; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { TokenBuffer tokens = _tokens[i]; if (tokens == null) { continue; }"
      },
      {
        "txt": "JsonToken t = tokens.firstToken(); if (t != null && t.isScalarValue()) { JsonParser buffered = tokens.asParser(p); buffered.nextToken(); SettableBeanProperty extProp = _properties[i].getProperty(); Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); if (result != null) { extProp.set(bean, result); continue; }"
      },
      {
        "txt": "if (!_properties[i].hasDefaultType()) { ctxt.reportMappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } else { typeId = _properties[i].getDefaultTypeId(); } } } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty(); ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\","
      },
      {
        "txt": "prop.getName(), _properties[i].getTypePropertyName()); } _deserializeAndSet(p, ctxt, bean, i, typeId); } return bean; } public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException {"
      },
      {
        "txt": "final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) {"
      },
      {
        "txt": "ctxt.reportMappingException(\"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportMappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); }"
      },
      {
        "txt": "values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { buffer.assignParameter(typeProp, typeId); } } }"
      },
      {
        "txt": "Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { return null; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray();"
      },
      {
        "txt": "merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); return _properties[index].getProperty().deserialize(mp, ctxt); } @SuppressWarnings(\"resource\") protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException"
      },
      {
        "txt": "{ JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { _properties[index].getProperty().set(bean, null); return; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray(); merged.writeString(typeId);"
      },
      {
        "txt": "merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean); } public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>();"
      },
      {
        "txt": "{ Integer index = _properties.size(); _properties.add(new ExtTypedProperty(property, typeDeser)); _nameToPropertyIndex.put(property.getName(), index); _nameToPropertyIndex.put(typeDeser.getPropertyName(), index); } <extra_id_0> @Deprecated // since 2.8; may be removed as early as 2.9 public ExternalTypeHandler build() { return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null); } }"
      },
      {
        "txt": "} } private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) {"
      },
      {
        "txt": "_property = property; _typeDeserializer = typeDeser; _typePropertyName = typeDeser.getPropertyName(); } public void linkTypeProperty(SettableBeanProperty p) { _typeProperty = p; } public boolean hasTypePropertyName(String n) { return n.equals(_typePropertyName); }"
      },
      {
        "txt": "public boolean hasDefaultType() { return _typeDeserializer.getDefaultImpl() != null; } public String getDefaultTypeId() { Class<?> defaultType = _typeDeserializer.getDefaultImpl(); if (defaultType == null) { return null; } return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); }"
      },
      {
        "txt": "public String getTypePropertyName() { return _typePropertyName; } public SettableBeanProperty getProperty() { return _property; } public SettableBeanProperty getTypeProperty() { return _typeProperty; } }"
      }
    ]
  }
]
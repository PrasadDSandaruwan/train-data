[
  {
    "id": 1304,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
    "start-bug-line": 592,
    "end-bug-line": 592,
    "bug": "",
    "fix": "return;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.lang.annotation.Annotation; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.lang.reflect.Type; import java.util.HashMap;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.io.SerializedString; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap; import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.NameTransformer; public class BeanPropertyWriter implements BeanProperty { public final static Object MARKER_FOR_EMPTY = new Object(); protected final AnnotatedMember _member; protected final Annotations _contextAnnotations; protected final JavaType _declaredType; protected final Method _accessorMethod;"
      },
      {
        "txt": "protected final Field _field; protected HashMap<Object,Object> _internalSettings; protected final SerializedString _name; protected final PropertyName _wrapperName; protected final JavaType _cfgSerializationType; protected JsonSerializer<Object> _serializer; protected JsonSerializer<Object> _nullSerializer; protected PropertySerializerMap _dynamicSerializers; protected final boolean _suppressNulls; protected final Object _suppressableValue;"
      },
      {
        "txt": "protected final Class<?>[] _includeInViews; protected TypeSerializer _typeSerializer; protected JavaType _nonTrivialBaseType; protected final boolean _isRequired; @SuppressWarnings(\"unchecked\") public BeanPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue)"
      },
      {
        "txt": "{ _member = member; _contextAnnotations = contextAnnotations; _name = new SerializedString(propDef.getName()); _wrapperName = propDef.getWrapperName(); _declaredType = declaredType; _serializer = (JsonSerializer<Object>) ser; _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyMap() : null; _typeSerializer = typeSer; _cfgSerializationType = serType;"
      },
      {
        "txt": "_isRequired = propDef.isRequired(); if (member instanceof AnnotatedField) { _accessorMethod = null; _field = (Field) member.getMember(); } else if (member instanceof AnnotatedMethod) { _accessorMethod = (Method) member.getMember(); _field = null; } else { throw new IllegalArgumentException(\"Can not pass member of type \"+member.getClass().getName()); }"
      },
      {
        "txt": "_suppressNulls = suppressNulls; _suppressableValue = suppressableValue; _includeInViews = propDef.findViews(); _nullSerializer = null; } protected BeanPropertyWriter(BeanPropertyWriter base) { this(base, base._name); } protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) {"
      },
      {
        "txt": "_name = name; _wrapperName = base._wrapperName; _member = base._member; _contextAnnotations = base._contextAnnotations; _declaredType = base._declaredType; _accessorMethod = base._accessorMethod; _field = base._field; _serializer = base._serializer; _nullSerializer = base._nullSerializer; if (base._internalSettings != null) {"
      },
      {
        "txt": "_internalSettings = new HashMap<Object,Object>(base._internalSettings); } _cfgSerializationType = base._cfgSerializationType; _dynamicSerializers = base._dynamicSerializers; _suppressNulls = base._suppressNulls; _suppressableValue = base._suppressableValue; _includeInViews = base._includeInViews; _typeSerializer = base._typeSerializer; _nonTrivialBaseType = base._nonTrivialBaseType; _isRequired = base._isRequired;"
      },
      {
        "txt": "} public BeanPropertyWriter rename(NameTransformer transformer) { String newName = transformer.transform(_name.getValue()); if (newName.equals(_name.toString())) { return this; } return new BeanPropertyWriter(this, new SerializedString(newName)); } public void assignSerializer(JsonSerializer<Object> ser) {"
      },
      {
        "txt": "if (_serializer != null && _serializer != ser) { throw new IllegalStateException(\"Can not override serializer\"); } _serializer = ser; } public void assignNullSerializer(JsonSerializer<Object> nullSer) { if (_nullSerializer != null && _nullSerializer != nullSer) { throw new IllegalStateException(\"Can not override null serializer\"); }"
      },
      {
        "txt": "_nullSerializer = nullSer; } public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) { return new UnwrappingBeanPropertyWriter(this, unwrapper); } public void setNonTrivialBaseType(JavaType t) { _nonTrivialBaseType = t; } @Override public String getName() {"
      },
      {
        "txt": "return _name.getValue(); } @Override public JavaType getType() { return _declaredType; } @Override public PropertyName getWrapperName() { return _wrapperName; }"
      },
      {
        "txt": "@Override public boolean isRequired() { return _isRequired; } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return _member.getAnnotation(acls); } @Override public <A extends Annotation> A getContextAnnotation(Class<A> acls) {"
      },
      {
        "txt": "return _contextAnnotations.get(acls); } @Override public AnnotatedMember getMember() { return _member; } @Override public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor) throws JsonMappingException {"
      },
      {
        "txt": "if (objectVisitor != null) { if (isRequired()) { objectVisitor.property(this); } else { objectVisitor.optionalProperty(this); } } } public Object getInternalSetting(Object key) {"
      },
      {
        "txt": "if (_internalSettings == null) { return null; } return _internalSettings.get(key); } public Object setInternalSetting(Object key, Object value) { if (_internalSettings == null) { _internalSettings = new HashMap<Object,Object>(); }"
      },
      {
        "txt": "return _internalSettings.put(key, value); } public Object removeInternalSetting(Object key) { Object removed = null; if (_internalSettings != null) { removed = _internalSettings.remove(key); if (_internalSettings.size() == 0) { _internalSettings = null; }"
      },
      {
        "txt": "} return removed; } public SerializedString getSerializedName() { return _name; } public boolean hasSerializer() { return _serializer != null; } public boolean hasNullSerializer() { return _nullSerializer != null; } public boolean willSuppressNulls() { return _suppressNulls; } public JsonSerializer<Object> getSerializer() { return _serializer; }"
      },
      {
        "txt": "public JavaType getSerializationType() { return _cfgSerializationType; } public Class<?> getRawSerializationType() { return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass(); } public Class<?> getPropertyType() { if (_accessorMethod != null) { return _accessorMethod.getReturnType();"
      },
      {
        "txt": "} return _field.getType(); } public Type getGenericPropertyType() { if (_accessorMethod != null) { return _accessorMethod.getGenericReturnType(); } return _field.getGenericType(); }"
      },
      {
        "txt": "public Class<?>[] getViews() { return _includeInViews; } @Deprecated protected boolean isRequired(AnnotationIntrospector intr) { return _isRequired; } @SuppressWarnings(\"deprecation\") public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException { JavaType propType = getSerializationType();"
      },
      {
        "txt": "Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass(); JsonNode schemaNode; JsonSerializer<Object> ser = getSerializer(); if (ser == null) { // nope Class<?> serType = getRawSerializationType(); if (serType == null) { serType = getPropertyType(); } ser = provider.findValueSerializer(serType, this); }"
      },
      {
        "txt": "boolean isOptional = !isRequired(); if (ser instanceof SchemaAware) { schemaNode = ((SchemaAware) ser).getSchema(provider, hint, isOptional) ; } else { schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); } propertiesNode.put(getName(), schemaNode); } public void serializeAsField(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception"
      },
      {
        "txt": "{ Object value = get(bean); if (value == null) { if (_nullSerializer != null) { jgen.writeFieldName(_name); _nullSerializer.serialize(null, jgen, prov); } return; } JsonSerializer<Object> ser = _serializer;"
      },
      {
        "txt": "if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap map = _dynamicSerializers; ser = map.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(map, cls, prov); } } if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) {"
      },
      {
        "txt": "if (ser.isEmpty(value)) { return; } } else if (_suppressableValue.equals(value)) { return; } } if (value == bean) { _handleSelfReference(bean, ser); }"
      },
      {
        "txt": "jgen.writeFieldName(_name); if (_typeSerializer == null) { ser.serialize(value, jgen, prov); } else { ser.serializeWithType(value, jgen, prov, _typeSerializer); } } public void serializeAsColumn(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception {"
      },
      {
        "txt": "if (value == null) { // nulls need specialized handling if (_nullSerializer != null) { _nullSerializer.serialize(null, jgen, prov); } else { // can NOT suppress entries in tabular output jgen.writeNull(); } <extra_id_0> JsonSerializer<Object> ser = _serializer; if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap map = _dynamicSerializers; ser = map.serializerFor(cls); if (ser == null) {"
      },
      {
        "txt": "ser = map.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(map, cls, prov); } } if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) { if (ser.isEmpty(value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, jgen, prov); return;"
      },
      {
        "txt": "} } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, jgen, prov); return; } } if (value == bean) { _handleSelfReference(bean, ser); } if (_typeSerializer == null) {"
      },
      {
        "txt": "ser.serialize(value, jgen, prov); } else { ser.serializeWithType(value, jgen, prov, _typeSerializer); } } public void serializeAsPlaceholder(Object bean, JsonGenerator jgen, SerializerProvider prov) throws Exception { if (_nullSerializer != null) { _nullSerializer.serialize(null, jgen, prov);"
      },
      {
        "txt": "} else { jgen.writeNull(); } } protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { PropertySerializerMap.SerializerAndMapResult result; if (_nonTrivialBaseType != null) { JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);"
      },
      {
        "txt": "result = map.findAndAddSerializer(t, provider, this); } else { result = map.findAndAddSerializer(type, provider, this); } if (map != result.map) { _dynamicSerializers = result.map; } return result.serializer; } public final Object get(Object bean) throws Exception"
      },
      {
        "txt": "{ if (_accessorMethod != null) { return _accessorMethod.invoke(bean); } return _field.get(bean); } protected void _handleSelfReference(Object bean, JsonSerializer<?> ser) throws JsonMappingException { if (ser.usesObjectId()) {"
      },
      {
        "txt": "return; } throw new JsonMappingException(\"Direct self-reference leading to cycle\"); } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"property '\").append(getName()).append(\"' (\"); if (_accessorMethod != null) {"
      },
      {
        "txt": "sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName()); } else { sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName()); } if (_serializer == null) { sb.append(\", no static serializer\"); } else { sb.append(\", static serializer of type \"+_serializer.getClass().getName()); } sb.append(')');"
      },
      {
        "txt": "return sb.toString(); }"
      }
    ]
  }
]
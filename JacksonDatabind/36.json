[
  {
    "id": 1491,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 250,
    "end-bug-line": 250,
    "bug": "",
    "fix": "@Override // since 2.7 public void setLenient(boolean enabled) { Boolean newValue = enabled; if (_lenient != newValue) { _lenient = newValue;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException;"
      },
      {
        "txt": "import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";"
      },
      {
        "txt": "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"; protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static {"
      },
      {
        "txt": "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\"); // since 2.7 } private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale;"
      },
      {
        "txt": "protected Boolean _lenient; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601; protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.7 public StdDateFormat(TimeZone tz, Locale loc) {"
      },
      {
        "txt": "_timezone = tz; _locale = loc; } protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient) { _timezone = tz; _locale = loc; _lenient = lenient; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE;"
      },
      {
        "txt": "} public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; } if ((tz == _timezone) || tz.equals(_timezone)) { return this; } return new StdDateFormat(tz, _locale, _lenient); }"
      },
      {
        "txt": "public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc, _lenient); } @Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale, _lenient); }"
      },
      {
        "txt": "@Deprecated public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null); } public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc, null);"
      },
      {
        "txt": "} @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override // since 2.6 public TimeZone getTimeZone() { return _timezone; } @Override"
      },
      {
        "txt": "{ if (!tz.equals(_timezone)) { _clearFormats(); _timezone = tz; } } <extra_id_0> @Override // since 2.7 public boolean isLenient() { if (_lenient == null) { return true; } return _lenient.booleanValue();"
      },
      {
        "txt": "} return _lenient.booleanValue(); } @Override public Date parse(String dateStr) throws ParseException { dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date dt; if (looksLikeISO8601(dateStr)) { // also includes \"plain\""
      },
      {
        "txt": "dt = parseAsISO8601(dateStr, pos, true); } else { int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } }"
      },
      {
        "txt": "} if ((i < 0) && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))) { dt = new Date(Long.parseLong(dateStr)); } else { dt = parseAsRFC1123(dateStr, pos); } } if (dt != null) { return dt;"
      },
      {
        "txt": "} StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) { sb.append(\"\\\", \\\"\"); } else { sb.append('\"'); } sb.append(f); }"
      },
      {
        "txt": "sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex()); } @Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" try {"
      },
      {
        "txt": "return parseAsISO8601(dateStr, pos, false); } catch (ParseException e) { // will NOT be thrown due to false but is declared... return null; } } int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') {"
      },
      {
        "txt": "break; } } } if (i < 0) { // all digits if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); } } return parseAsRFC1123(dateStr, pos);"
      },
      {
        "txt": "} @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient); } return _formatISO8601.format(date, toAppendTo, fieldPosition);"
      },
      {
        "txt": "} @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\"; return str;"
      },
      {
        "txt": "} protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true; }"
      },
      {
        "txt": "return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors) throws ParseException { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; String formatStr; if (len <= 10 && Character.isDigit(c)) {"
      },
      {
        "txt": "df = _formatPlain; formatStr = DATE_FORMAT_STR_PLAIN; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient); } } else if (c == 'Z') { df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) {"
      },
      {
        "txt": "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) {"
      },
      {
        "txt": "c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString(); } else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\"; } len = dateStr.length(); int timeLen = len - dateStr.lastIndexOf('T') - 6;"
      },
      {
        "txt": "if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss int offset = len - 5; // insertion offset, before tz-offset StringBuilder sb = new StringBuilder(dateStr); switch (timeLen) { case 11: sb.insert(offset, '0'); break; case 10: sb.insert(offset, \"00\"); break; case 9: // is this legal? (just second fraction marker) sb.insert(offset, \"000\"); break;"
      },
      {
        "txt": "case 8: sb.insert(offset, \".000\"); break; case 7: // not legal to have single-digit second break; case 6: // probably not legal, but let's allow sb.insert(offset, \"00.000\"); case 5: // is legal to omit seconds sb.insert(offset, \":00.000\"); } dateStr = sb.toString();"
      },
      {
        "txt": "} df = _formatISO8601; formatStr = DATE_FORMAT_STR_ISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1;"
      },
      {
        "txt": "if (timeLen < 12) { // missing, or partial switch (timeLen) { case 11: sb.append('0'); case 10: sb.append('0'); case 9: sb.append('0'); break; default: sb.append(\".000\"); } }"
      },
      {
        "txt": "sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } } }"
      },
      {
        "txt": "Date dt = df.parse(dateStr, pos); if (dt == null) { throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), pos.getErrorIndex()); } return dt; } protected Date parseAsRFC1123(String dateStr, ParsePosition pos)"
      },
      {
        "txt": "{ if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length();"
      },
      {
        "txt": "if (len >= 6) { char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; }"
      },
      {
        "txt": "private final static DateFormat _cloneFormat(DateFormat df, String format, TimeZone tz, Locale loc, Boolean lenient) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz);"
      },
      {
        "txt": "} } return df; } protected void _clearFormats() { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; }"
      }
    ]
  },
  {
    "id": 1492,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 251,
    "end-bug-line": 251,
    "bug": "",
    "fix": "_clearFormats(); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException;"
      },
      {
        "txt": "import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";"
      },
      {
        "txt": "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"; protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static {"
      },
      {
        "txt": "DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\"); // since 2.7 } private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale;"
      },
      {
        "txt": "protected Boolean _lenient; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601; protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.7 public StdDateFormat(TimeZone tz, Locale loc) {"
      },
      {
        "txt": "_timezone = tz; _locale = loc; } protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient) { _timezone = tz; _locale = loc; _lenient = lenient; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE;"
      },
      {
        "txt": "} public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; } if ((tz == _timezone) || tz.equals(_timezone)) { return this; } return new StdDateFormat(tz, _locale, _lenient); }"
      },
      {
        "txt": "public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc, _lenient); } @Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale, _lenient); }"
      },
      {
        "txt": "@Deprecated public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null); } public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc, null);"
      },
      {
        "txt": "} @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override // since 2.6 public TimeZone getTimeZone() { return _timezone; } @Override"
      },
      {
        "txt": "{ if (!tz.equals(_timezone)) { _clearFormats(); _timezone = tz; } } <extra_id_0> @Override // since 2.7 public boolean isLenient() { if (_lenient == null) { return true; } return _lenient.booleanValue();"
      },
      {
        "txt": "} return _lenient.booleanValue(); } @Override public Date parse(String dateStr) throws ParseException { dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date dt; if (looksLikeISO8601(dateStr)) { // also includes \"plain\""
      },
      {
        "txt": "dt = parseAsISO8601(dateStr, pos, true); } else { int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } }"
      },
      {
        "txt": "} if ((i < 0) && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))) { dt = new Date(Long.parseLong(dateStr)); } else { dt = parseAsRFC1123(dateStr, pos); } } if (dt != null) { return dt;"
      },
      {
        "txt": "} StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) { sb.append(\"\\\", \\\"\"); } else { sb.append('\"'); } sb.append(f); }"
      },
      {
        "txt": "sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex()); } @Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" try {"
      },
      {
        "txt": "return parseAsISO8601(dateStr, pos, false); } catch (ParseException e) { // will NOT be thrown due to false but is declared... return null; } } int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') {"
      },
      {
        "txt": "break; } } } if (i < 0) { // all digits if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); } } return parseAsRFC1123(dateStr, pos);"
      },
      {
        "txt": "} @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient); } return _formatISO8601.format(date, toAppendTo, fieldPosition);"
      },
      {
        "txt": "} @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\"; return str;"
      },
      {
        "txt": "} protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true; }"
      },
      {
        "txt": "return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors) throws ParseException { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; String formatStr; if (len <= 10 && Character.isDigit(c)) {"
      },
      {
        "txt": "df = _formatPlain; formatStr = DATE_FORMAT_STR_PLAIN; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient); } } else if (c == 'Z') { df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) {"
      },
      {
        "txt": "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) {"
      },
      {
        "txt": "c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString(); } else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\"; } len = dateStr.length(); int timeLen = len - dateStr.lastIndexOf('T') - 6;"
      },
      {
        "txt": "if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss int offset = len - 5; // insertion offset, before tz-offset StringBuilder sb = new StringBuilder(dateStr); switch (timeLen) { case 11: sb.insert(offset, '0'); break; case 10: sb.insert(offset, \"00\"); break; case 9: // is this legal? (just second fraction marker) sb.insert(offset, \"000\"); break;"
      },
      {
        "txt": "case 8: sb.insert(offset, \".000\"); break; case 7: // not legal to have single-digit second break; case 6: // probably not legal, but let's allow sb.insert(offset, \"00.000\"); case 5: // is legal to omit seconds sb.insert(offset, \":00.000\"); } dateStr = sb.toString();"
      },
      {
        "txt": "} df = _formatISO8601; formatStr = DATE_FORMAT_STR_ISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr, _timezone, _locale, _lenient); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1;"
      },
      {
        "txt": "if (timeLen < 12) { // missing, or partial switch (timeLen) { case 11: sb.append('0'); case 10: sb.append('0'); case 9: sb.append('0'); break; default: sb.append(\".000\"); } }"
      },
      {
        "txt": "sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } } }"
      },
      {
        "txt": "Date dt = df.parse(dateStr, pos); if (dt == null) { throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient), pos.getErrorIndex()); } return dt; } protected Date parseAsRFC1123(String dateStr, ParsePosition pos)"
      },
      {
        "txt": "{ if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length();"
      },
      {
        "txt": "if (len >= 6) { char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; }"
      },
      {
        "txt": "private final static DateFormat _cloneFormat(DateFormat df, String format, TimeZone tz, Locale loc, Boolean lenient) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz);"
      },
      {
        "txt": "} } return df; } protected void _clearFormats() { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; }"
      }
    ]
  },
  {
    "id": 1493,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 557,
    "end-bug-line": 557,
    "bug": "",
    "fix": "if (lenient != null) { df.setLenient(lenient.booleanValue()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat"
      },
      {
        "txt": "extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"; protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"; protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123,"
      },
      {
        "txt": "DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static { DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"UTC\"); // since 2.7 } private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z;"
      },
      {
        "txt": "protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "} public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale; protected Boolean _lenient; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601; protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() {"
      },
      {
        "txt": "_locale = DEFAULT_LOCALE; } @Deprecated // since 2.7 public StdDateFormat(TimeZone tz, Locale loc) { _timezone = tz; _locale = loc; } protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient) { _timezone = tz; _locale = loc;"
      },
      {
        "txt": "_lenient = lenient; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE; } public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; } if ((tz == _timezone) || tz.equals(_timezone)) {"
      },
      {
        "txt": "return this; } return new StdDateFormat(tz, _locale, _lenient); } public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc, _lenient); }"
      },
      {
        "txt": "@Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale, _lenient); } @Deprecated public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);"
      },
      {
        "txt": "} public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc, null); } @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override // since 2.6"
      },
      {
        "txt": "public TimeZone getTimeZone() { return _timezone; } @Override public void setTimeZone(TimeZone tz) { if (!tz.equals(_timezone)) { _clearFormats(); _timezone = tz; }"
      },
      {
        "txt": "} @Override // since 2.7 public boolean isLenient() { if (_lenient == null) { return true; } return _lenient.booleanValue(); } @Override public Date parse(String dateStr) throws ParseException"
      },
      {
        "txt": "{ dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date dt; if (looksLikeISO8601(dateStr)) { // also includes \"plain\" dt = parseAsISO8601(dateStr, pos, true); } else { int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i);"
      },
      {
        "txt": "if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } } } if ((i < 0) && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))) { dt = new Date(Long.parseLong(dateStr)); } else {"
      },
      {
        "txt": "dt = parseAsRFC1123(dateStr, pos); } } if (dt != null) { return dt; } StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) { sb.append(\"\\\", \\\"\");"
      },
      {
        "txt": "} else { sb.append('\"'); } sb.append(f); } sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex()); }"
      },
      {
        "txt": "@Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" try { return parseAsISO8601(dateStr, pos, false); } catch (ParseException e) { // will NOT be thrown due to false but is declared... return null; } }"
      },
      {
        "txt": "int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } } } if (i < 0) { // all digits"
      },
      {
        "txt": "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); } } return parseAsRFC1123(dateStr, pos); } @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {"
      },
      {
        "txt": "if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale, _lenient); } return _formatISO8601.format(date, toAppendTo, fieldPosition); } @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone;"
      },
      {
        "txt": "if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\"; return str; } protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0))"
      },
      {
        "txt": "&& Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true; } return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors) throws ParseException {"
      },
      {
        "txt": "int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; String formatStr; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain; formatStr = DATE_FORMAT_STR_PLAIN; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr, _timezone, _locale, _lenient);"
      },
      {
        "txt": "} } else if (c == 'Z') { df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr);"
      },
      {
        "txt": "sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString();"
      },
      {
        "txt": "} else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\"; } len = dateStr.length(); int timeLen = len - dateStr.lastIndexOf('T') - 6; if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss int offset = len - 5; // insertion offset, before tz-offset StringBuilder sb = new StringBuilder(dateStr); switch (timeLen) { case 11:"
      },
      {
        "txt": "sb.insert(offset, '0'); break; case 10: sb.insert(offset, \"00\"); break; case 9: // is this legal? (just second fraction marker) sb.insert(offset, \"000\"); break; case 8: sb.insert(offset, \".000\"); break; case 7: // not legal to have single-digit second break; case 6: // probably not legal, but let's allow"
      },
      {
        "txt": "sb.insert(offset, \"00.000\"); case 5: // is legal to omit seconds sb.insert(offset, \":00.000\"); } dateStr = sb.toString(); } df = _formatISO8601; formatStr = DATE_FORMAT_STR_ISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,"
      },
      {
        "txt": "_timezone, _locale, _lenient); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1; if (timeLen < 12) { // missing, or partial switch (timeLen) { case 11: sb.append('0'); case 10: sb.append('0'); case 9: sb.append('0');"
      },
      {
        "txt": "break; default: sb.append(\".000\"); } } sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; formatStr = DATE_FORMAT_STR_ISO8601_Z; if (df == null) {"
      },
      {
        "txt": "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr, _timezone, _locale, _lenient); } } } Date dt = df.parse(dateStr, pos); if (dt == null) { throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\", dateStr, formatStr, _lenient),"
      },
      {
        "txt": "pos.getErrorIndex()); } return dt; } protected Date parseAsRFC1123(String dateStr, ParsePosition pos) { if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale, _lenient); }"
      },
      {
        "txt": "return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length(); if (len >= 6) { char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true;"
      },
      {
        "txt": "c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; } private final static DateFormat _cloneFormat(DateFormat df, String format, TimeZone tz, Locale loc, Boolean lenient) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc);"
      },
      {
        "txt": "} else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz); } } <extra_id_0> } protected void _clearFormats() { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null;"
      },
      {
        "txt": "_formatISO8601_z = null; _formatPlain = null; }"
      }
    ]
  }
]
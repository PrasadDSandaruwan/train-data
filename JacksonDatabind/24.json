[
  {
    "id": 1443,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "start-bug-line": 234,
    "end-bug-line": 234,
    "bug": "TimeZone tz = (df == null) ? _timeZone : df.getTimeZone();",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.cfg; import java.text.DateFormat; import java.util.Locale; import java.util.TimeZone;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.core.Base64Variant; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair; import com.fasterxml.jackson.databind.introspect.ClassIntrospector; import com.fasterxml.jackson.databind.introspect.VisibilityChecker; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.StdDateFormat;"
      },
      {
        "txt": "public final class BaseSettings implements java.io.Serializable { private static final long serialVersionUID = 1L; protected final ClassIntrospector _classIntrospector; protected final AnnotationIntrospector _annotationIntrospector; protected final VisibilityChecker<?> _visibilityChecker; protected final PropertyNamingStrategy _propertyNamingStrategy; protected final TypeFactory _typeFactory; protected final TypeResolverBuilder<?> _typeResolverBuilder;"
      },
      {
        "txt": "protected final DateFormat _dateFormat; protected final HandlerInstantiator _handlerInstantiator; protected final Locale _locale; protected final TimeZone _timeZone; protected final Base64Variant _defaultBase64; public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai, VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf, TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi, Locale locale, TimeZone tz, Base64Variant defaultBase64) {"
      },
      {
        "txt": "_classIntrospector = ci; _annotationIntrospector = ai; _visibilityChecker = vc; _propertyNamingStrategy = pns; _typeFactory = tf; _typeResolverBuilder = typer; _dateFormat = dateFormat; _handlerInstantiator = hi; _locale = locale; _timeZone = tz;"
      },
      {
        "txt": "_defaultBase64 = defaultBase64; } public BaseSettings withClassIntrospector(ClassIntrospector ci) { if (_classIntrospector == ci) { return this; } return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); }"
      },
      {
        "txt": "public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) { if (_annotationIntrospector == ai) { return this; } return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) { return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector));"
      },
      {
        "txt": "} public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) { return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai)); } public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) { if (_visibilityChecker == vc) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,"
      },
      {
        "txt": "_timeZone, _defaultBase64); } public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) { return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker.withVisibility(forMethod, visibility), _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) {"
      },
      {
        "txt": "if (_propertyNamingStrategy == pns) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withTypeFactory(TypeFactory tf) { if (_typeFactory == tf) { return this;"
      },
      {
        "txt": "} return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) { if (_typeResolverBuilder == typer) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,"
      },
      {
        "txt": "_timeZone, _defaultBase64); } public BaseSettings withDateFormat(DateFormat df) { if (_dateFormat == df) { return this; } <extra_id_0> return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, tz, _defaultBase64); } public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) { if (_handlerInstantiator == hi) {"
      },
      {
        "txt": "public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) { if (_handlerInstantiator == hi) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, hi, _locale, _timeZone, _defaultBase64); } public BaseSettings with(Locale l) { if (_locale == l) {"
      },
      {
        "txt": "return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, l, _timeZone, _defaultBase64); } public BaseSettings with(TimeZone tz) { if (tz == null) { throw new IllegalArgumentException();"
      },
      {
        "txt": "} DateFormat df = _dateFormat; if (df instanceof StdDateFormat) { df = ((StdDateFormat) df).withTimeZone(tz); } else { df = (DateFormat) df.clone(); df.setTimeZone(tz); } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,"
      },
      {
        "txt": "_typeResolverBuilder, df, _handlerInstantiator, _locale, tz, _defaultBase64); } public BaseSettings with(Base64Variant base64) { if (base64 == _defaultBase64) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,"
      },
      {
        "txt": "_timeZone, base64); } public ClassIntrospector getClassIntrospector() { return _classIntrospector; } public AnnotationIntrospector getAnnotationIntrospector() { return _annotationIntrospector; } public VisibilityChecker<?> getVisibilityChecker() { return _visibilityChecker;"
      },
      {
        "txt": "} public PropertyNamingStrategy getPropertyNamingStrategy() { return _propertyNamingStrategy; } public TypeFactory getTypeFactory() { return _typeFactory; } public TypeResolverBuilder<?> getTypeResolverBuilder() { return _typeResolverBuilder; }"
      },
      {
        "txt": "public DateFormat getDateFormat() { return _dateFormat; } public HandlerInstantiator getHandlerInstantiator() { return _handlerInstantiator; } public Locale getLocale() { return _locale; } public TimeZone getTimeZone() {"
      },
      {
        "txt": "return _timeZone; } public Base64Variant getBase64Variant() { return _defaultBase64; }"
      }
    ]
  },
  {
    "id": 1444,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/cfg/BaseSettings.java",
    "start-bug-line": 237,
    "end-bug-line": 237,
    "bug": "tz, _defaultBase64);",
    "fix": "_timeZone, _defaultBase64);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.cfg; import java.text.DateFormat; import java.util.Locale; import java.util.TimeZone; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.annotation.PropertyAccessor; import com.fasterxml.jackson.core.Base64Variant;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotationIntrospectorPair; import com.fasterxml.jackson.databind.introspect.ClassIntrospector; import com.fasterxml.jackson.databind.introspect.VisibilityChecker; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.StdDateFormat; public final class BaseSettings implements java.io.Serializable {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; protected final ClassIntrospector _classIntrospector; protected final AnnotationIntrospector _annotationIntrospector; protected final VisibilityChecker<?> _visibilityChecker; protected final PropertyNamingStrategy _propertyNamingStrategy; protected final TypeFactory _typeFactory; protected final TypeResolverBuilder<?> _typeResolverBuilder; protected final DateFormat _dateFormat; protected final HandlerInstantiator _handlerInstantiator; protected final Locale _locale;"
      },
      {
        "txt": "protected final TimeZone _timeZone; protected final Base64Variant _defaultBase64; public BaseSettings(ClassIntrospector ci, AnnotationIntrospector ai, VisibilityChecker<?> vc, PropertyNamingStrategy pns, TypeFactory tf, TypeResolverBuilder<?> typer, DateFormat dateFormat, HandlerInstantiator hi, Locale locale, TimeZone tz, Base64Variant defaultBase64) { _classIntrospector = ci; _annotationIntrospector = ai; _visibilityChecker = vc;"
      },
      {
        "txt": "_propertyNamingStrategy = pns; _typeFactory = tf; _typeResolverBuilder = typer; _dateFormat = dateFormat; _handlerInstantiator = hi; _locale = locale; _timeZone = tz; _defaultBase64 = defaultBase64; } public BaseSettings withClassIntrospector(ClassIntrospector ci) {"
      },
      {
        "txt": "if (_classIntrospector == ci) { return this; } return new BaseSettings(ci, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withAnnotationIntrospector(AnnotationIntrospector ai) { if (_annotationIntrospector == ai) { return this;"
      },
      {
        "txt": "} return new BaseSettings(_classIntrospector, ai, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withInsertedAnnotationIntrospector(AnnotationIntrospector ai) { return withAnnotationIntrospector(AnnotationIntrospectorPair.create(ai, _annotationIntrospector)); } public BaseSettings withAppendedAnnotationIntrospector(AnnotationIntrospector ai) { return withAnnotationIntrospector(AnnotationIntrospectorPair.create(_annotationIntrospector, ai));"
      },
      {
        "txt": "} public BaseSettings withVisibilityChecker(VisibilityChecker<?> vc) { if (_visibilityChecker == vc) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, vc, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) {"
      },
      {
        "txt": "return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker.withVisibility(forMethod, visibility), _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withPropertyNamingStrategy(PropertyNamingStrategy pns) { if (_propertyNamingStrategy == pns) { return this; }"
      },
      {
        "txt": "return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, pns, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); } public BaseSettings withTypeFactory(TypeFactory tf) { if (_typeFactory == tf) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, tf, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale,"
      },
      {
        "txt": "_timeZone, _defaultBase64); } public BaseSettings withTypeResolverBuilder(TypeResolverBuilder<?> typer) { if (_typeResolverBuilder == typer) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, typer, _dateFormat, _handlerInstantiator, _locale, _timeZone, _defaultBase64); }"
      },
      {
        "txt": "if (_dateFormat == df) { return this; } TimeZone tz = (df == null) ? _timeZone : df.getTimeZone(); return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, <extra_id_0> } public BaseSettings withHandlerInstantiator(HandlerInstantiator hi) { if (_handlerInstantiator == hi) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,"
      },
      {
        "txt": "} return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, hi, _locale, _timeZone, _defaultBase64); } public BaseSettings with(Locale l) { if (_locale == l) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory,"
      },
      {
        "txt": "_typeResolverBuilder, _dateFormat, _handlerInstantiator, l, _timeZone, _defaultBase64); } public BaseSettings with(TimeZone tz) { if (tz == null) { throw new IllegalArgumentException(); } DateFormat df = _dateFormat; if (df instanceof StdDateFormat) {"
      },
      {
        "txt": "df = ((StdDateFormat) df).withTimeZone(tz); } else { df = (DateFormat) df.clone(); df.setTimeZone(tz); } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, df, _handlerInstantiator, _locale, tz, _defaultBase64); }"
      },
      {
        "txt": "public BaseSettings with(Base64Variant base64) { if (base64 == _defaultBase64) { return this; } return new BaseSettings(_classIntrospector, _annotationIntrospector, _visibilityChecker, _propertyNamingStrategy, _typeFactory, _typeResolverBuilder, _dateFormat, _handlerInstantiator, _locale, _timeZone, base64); } public ClassIntrospector getClassIntrospector() {"
      },
      {
        "txt": "return _classIntrospector; } public AnnotationIntrospector getAnnotationIntrospector() { return _annotationIntrospector; } public VisibilityChecker<?> getVisibilityChecker() { return _visibilityChecker; } public PropertyNamingStrategy getPropertyNamingStrategy() { return _propertyNamingStrategy;"
      },
      {
        "txt": "} public TypeFactory getTypeFactory() { return _typeFactory; } public TypeResolverBuilder<?> getTypeResolverBuilder() { return _typeResolverBuilder; } public DateFormat getDateFormat() { return _dateFormat; }"
      },
      {
        "txt": "public HandlerInstantiator getHandlerInstantiator() { return _handlerInstantiator; } public Locale getLocale() { return _locale; } public TimeZone getTimeZone() { return _timeZone; } public Base64Variant getBase64Variant() {"
      },
      {
        "txt": "return _defaultBase64; }"
      }
    ]
  }
]
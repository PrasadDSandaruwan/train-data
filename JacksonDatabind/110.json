[
  {
    "id": 1806,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
    "start-bug-line": 47,
    "end-bug-line": 47,
    "bug": "",
    "fix": "private final static Class<?> CLASS_UNMODIFIABLE_LIST_ALIAS;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.util.*; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.Converter; public abstract class JavaUtilCollectionsDeserializers { private final static int TYPE_SINGLETON_SET = 1; private final static int TYPE_SINGLETON_LIST = 2; private final static int TYPE_SINGLETON_MAP = 3; private final static int TYPE_UNMODIFIABLE_SET = 4; private final static int TYPE_UNMODIFIABLE_LIST = 5; private final static int TYPE_UNMODIFIABLE_MAP = 6;"
      },
      {
        "txt": "private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass(); private final static Class<?> CLASS_SINGLETON_SET; private final static Class<?> CLASS_SINGLETON_LIST; private final static Class<?> CLASS_SINGLETON_MAP; private final static Class<?> CLASS_UNMODIFIABLE_SET; private final static Class<?> CLASS_UNMODIFIABLE_LIST; <extra_id_0> static { Set<?> set = Collections.singleton(Boolean.TRUE); CLASS_SINGLETON_SET = set.getClass(); CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass(); List<?> list = Collections.singletonList(Boolean.TRUE); CLASS_SINGLETON_LIST = list.getClass();"
      },
      {
        "txt": "List<?> list = Collections.singletonList(Boolean.TRUE); CLASS_SINGLETON_LIST = list.getClass(); CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass(); Map<?,?> map = Collections.singletonMap(\"a\", \"b\"); CLASS_SINGLETON_MAP = map.getClass(); CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass(); } public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ JavaUtilCollectionsConverter conv; if (type.hasRawClass(CLASS_AS_ARRAYS_LIST)) { conv = converter(TYPE_AS_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_LIST)) { conv = converter(TYPE_SINGLETON_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_SET)) { conv = converter(TYPE_SINGLETON_SET, type, Set.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) { conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class);"
      },
      {
        "txt": "} else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) { conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class); } else { return null; } return new StdDelegatingDeserializer<Object>(conv); } public static JsonDeserializer<?> findForMap(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ JavaUtilCollectionsConverter conv; if (type.hasRawClass(CLASS_SINGLETON_MAP)) { conv = converter(TYPE_SINGLETON_MAP, type, Map.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) { conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class); } else { return null; } return new StdDelegatingDeserializer<Object>(conv);"
      },
      {
        "txt": "} static JavaUtilCollectionsConverter converter(int kind, JavaType concreteType, Class<?> rawSuper) { return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper)); } private static class JavaUtilCollectionsConverter implements Converter<Object,Object> { private final JavaType _inputType; private final int _kind;"
      },
      {
        "txt": "private JavaUtilCollectionsConverter(int kind, JavaType inputType) { _inputType = inputType; _kind = kind; } @Override public Object convert(Object value) { if (value == null) { // is this legal to get? return null; } switch (_kind) {"
      },
      {
        "txt": "case TYPE_SINGLETON_SET: { Set<?> set = (Set<?>) value; _checkSingleton(set.size()); return Collections.singleton(set.iterator().next()); } case TYPE_SINGLETON_LIST: { List<?> list = (List<?>) value; _checkSingleton(list.size());"
      },
      {
        "txt": "return Collections.singletonList(list.get(0)); } case TYPE_SINGLETON_MAP: { Map<?,?> map = (Map<?,?>) value; _checkSingleton(map.size()); Map.Entry<?,?> entry = map.entrySet().iterator().next(); return Collections.singletonMap(entry.getKey(), entry.getValue()); } case TYPE_UNMODIFIABLE_SET:"
      },
      {
        "txt": "return Collections.unmodifiableSet((Set<?>) value); case TYPE_UNMODIFIABLE_LIST: return Collections.unmodifiableList((List<?>) value); case TYPE_UNMODIFIABLE_MAP: return Collections.unmodifiableMap((Map<?,?>) value); case TYPE_AS_LIST: default: return value; } }"
      },
      {
        "txt": "@Override public JavaType getInputType(TypeFactory typeFactory) { return _inputType; } @Override public JavaType getOutputType(TypeFactory typeFactory) { return _inputType; } private void _checkSingleton(int size) { if (size != 1) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not deserialize Singleton container from \"+size+\" entries\"); } } }"
      }
    ]
  },
  {
    "id": 1807,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
    "start-bug-line": 58,
    "end-bug-line": 58,
    "bug": "",
    "fix": "CLASS_UNMODIFIABLE_LIST_ALIAS = Collections.unmodifiableList(new LinkedList<Object>()).getClass();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.util.*; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.Converter; public abstract class JavaUtilCollectionsDeserializers { private final static int TYPE_SINGLETON_SET = 1; private final static int TYPE_SINGLETON_LIST = 2; private final static int TYPE_SINGLETON_MAP = 3; private final static int TYPE_UNMODIFIABLE_SET = 4;"
      },
      {
        "txt": "private final static int TYPE_UNMODIFIABLE_LIST = 5; private final static int TYPE_UNMODIFIABLE_MAP = 6; public final static int TYPE_AS_LIST = 7; private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass(); private final static Class<?> CLASS_SINGLETON_SET; private final static Class<?> CLASS_SINGLETON_LIST; private final static Class<?> CLASS_SINGLETON_MAP; private final static Class<?> CLASS_UNMODIFIABLE_SET; private final static Class<?> CLASS_UNMODIFIABLE_LIST; private final static Class<?> CLASS_UNMODIFIABLE_MAP;"
      },
      {
        "txt": "Set<?> set = Collections.singleton(Boolean.TRUE); CLASS_SINGLETON_SET = set.getClass(); CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass(); List<?> list = Collections.singletonList(Boolean.TRUE); CLASS_SINGLETON_LIST = list.getClass(); CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass(); <extra_id_0> Map<?,?> map = Collections.singletonMap(\"a\", \"b\"); CLASS_SINGLETON_MAP = map.getClass(); CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass(); } public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt, JavaType type)"
      },
      {
        "txt": "public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt, JavaType type) throws JsonMappingException { JavaUtilCollectionsConverter conv; if (type.hasRawClass(CLASS_AS_ARRAYS_LIST)) { conv = converter(TYPE_AS_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_LIST)) { conv = converter(TYPE_SINGLETON_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_SET)) {"
      },
      {
        "txt": "conv = converter(TYPE_SINGLETON_SET, type, Set.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) { conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) { conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class); } else { return null; } return new StdDelegatingDeserializer<Object>(conv); }"
      },
      {
        "txt": "public static JsonDeserializer<?> findForMap(DeserializationContext ctxt, JavaType type) throws JsonMappingException { JavaUtilCollectionsConverter conv; if (type.hasRawClass(CLASS_SINGLETON_MAP)) { conv = converter(TYPE_SINGLETON_MAP, type, Map.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) { conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class); } else {"
      },
      {
        "txt": "return null; } return new StdDelegatingDeserializer<Object>(conv); } static JavaUtilCollectionsConverter converter(int kind, JavaType concreteType, Class<?> rawSuper) { return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper)); } private static class JavaUtilCollectionsConverter implements Converter<Object,Object>"
      },
      {
        "txt": "{ private final JavaType _inputType; private final int _kind; private JavaUtilCollectionsConverter(int kind, JavaType inputType) { _inputType = inputType; _kind = kind; } @Override public Object convert(Object value) { if (value == null) { // is this legal to get?"
      },
      {
        "txt": "return null; } switch (_kind) { case TYPE_SINGLETON_SET: { Set<?> set = (Set<?>) value; _checkSingleton(set.size()); return Collections.singleton(set.iterator().next()); } case TYPE_SINGLETON_LIST:"
      },
      {
        "txt": "{ List<?> list = (List<?>) value; _checkSingleton(list.size()); return Collections.singletonList(list.get(0)); } case TYPE_SINGLETON_MAP: { Map<?,?> map = (Map<?,?>) value; _checkSingleton(map.size()); Map.Entry<?,?> entry = map.entrySet().iterator().next();"
      },
      {
        "txt": "return Collections.singletonMap(entry.getKey(), entry.getValue()); } case TYPE_UNMODIFIABLE_SET: return Collections.unmodifiableSet((Set<?>) value); case TYPE_UNMODIFIABLE_LIST: return Collections.unmodifiableList((List<?>) value); case TYPE_UNMODIFIABLE_MAP: return Collections.unmodifiableMap((Map<?,?>) value); case TYPE_AS_LIST: default:"
      },
      {
        "txt": "return value; } } @Override public JavaType getInputType(TypeFactory typeFactory) { return _inputType; } @Override public JavaType getOutputType(TypeFactory typeFactory) { return _inputType;"
      },
      {
        "txt": "} private void _checkSingleton(int size) { if (size != 1) { throw new IllegalArgumentException(\"Can not deserialize Singleton container from \"+size+\" entries\"); } } }"
      }
    ]
  },
  {
    "id": 1808,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/JavaUtilCollectionsDeserializers.java",
    "start-bug-line": 78,
    "end-bug-line": 78,
    "bug": "} else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST)) {",
    "fix": "} else if (type.hasRawClass(CLASS_UNMODIFIABLE_LIST) || type.hasRawClass(CLASS_UNMODIFIABLE_LIST_ALIAS)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.util.*; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.Converter; public abstract class JavaUtilCollectionsDeserializers"
      },
      {
        "txt": "{ private final static int TYPE_SINGLETON_SET = 1; private final static int TYPE_SINGLETON_LIST = 2; private final static int TYPE_SINGLETON_MAP = 3; private final static int TYPE_UNMODIFIABLE_SET = 4; private final static int TYPE_UNMODIFIABLE_LIST = 5; private final static int TYPE_UNMODIFIABLE_MAP = 6; public final static int TYPE_AS_LIST = 7; private final static Class<?> CLASS_AS_ARRAYS_LIST = Arrays.asList(null, null).getClass(); private final static Class<?> CLASS_SINGLETON_SET;"
      },
      {
        "txt": "private final static Class<?> CLASS_SINGLETON_LIST; private final static Class<?> CLASS_SINGLETON_MAP; private final static Class<?> CLASS_UNMODIFIABLE_SET; private final static Class<?> CLASS_UNMODIFIABLE_LIST; private final static Class<?> CLASS_UNMODIFIABLE_MAP; static { Set<?> set = Collections.singleton(Boolean.TRUE); CLASS_SINGLETON_SET = set.getClass(); CLASS_UNMODIFIABLE_SET = Collections.unmodifiableSet(set).getClass(); List<?> list = Collections.singletonList(Boolean.TRUE);"
      },
      {
        "txt": "CLASS_SINGLETON_LIST = list.getClass(); CLASS_UNMODIFIABLE_LIST = Collections.unmodifiableList(list).getClass(); Map<?,?> map = Collections.singletonMap(\"a\", \"b\"); CLASS_SINGLETON_MAP = map.getClass(); CLASS_UNMODIFIABLE_MAP = Collections.unmodifiableMap(map).getClass(); } public static JsonDeserializer<?> findForCollection(DeserializationContext ctxt, JavaType type) throws JsonMappingException {"
      },
      {
        "txt": "if (type.hasRawClass(CLASS_AS_ARRAYS_LIST)) { conv = converter(TYPE_AS_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_LIST)) { conv = converter(TYPE_SINGLETON_LIST, type, List.class); } else if (type.hasRawClass(CLASS_SINGLETON_SET)) { conv = converter(TYPE_SINGLETON_SET, type, Set.class); <extra_id_0> conv = converter(TYPE_UNMODIFIABLE_LIST, type, List.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_SET)) { conv = converter(TYPE_UNMODIFIABLE_SET, type, Set.class); } else { return null; }"
      },
      {
        "txt": "return null; } return new StdDelegatingDeserializer<Object>(conv); } public static JsonDeserializer<?> findForMap(DeserializationContext ctxt, JavaType type) throws JsonMappingException { JavaUtilCollectionsConverter conv; if (type.hasRawClass(CLASS_SINGLETON_MAP)) {"
      },
      {
        "txt": "conv = converter(TYPE_SINGLETON_MAP, type, Map.class); } else if (type.hasRawClass(CLASS_UNMODIFIABLE_MAP)) { conv = converter(TYPE_UNMODIFIABLE_MAP, type, Map.class); } else { return null; } return new StdDelegatingDeserializer<Object>(conv); } static JavaUtilCollectionsConverter converter(int kind, JavaType concreteType, Class<?> rawSuper)"
      },
      {
        "txt": "{ return new JavaUtilCollectionsConverter(kind, concreteType.findSuperType(rawSuper)); } private static class JavaUtilCollectionsConverter implements Converter<Object,Object> { private final JavaType _inputType; private final int _kind; private JavaUtilCollectionsConverter(int kind, JavaType inputType) { _inputType = inputType; _kind = kind;"
      },
      {
        "txt": "} @Override public Object convert(Object value) { if (value == null) { // is this legal to get? return null; } switch (_kind) { case TYPE_SINGLETON_SET: { Set<?> set = (Set<?>) value;"
      },
      {
        "txt": "_checkSingleton(set.size()); return Collections.singleton(set.iterator().next()); } case TYPE_SINGLETON_LIST: { List<?> list = (List<?>) value; _checkSingleton(list.size()); return Collections.singletonList(list.get(0)); } case TYPE_SINGLETON_MAP:"
      },
      {
        "txt": "{ Map<?,?> map = (Map<?,?>) value; _checkSingleton(map.size()); Map.Entry<?,?> entry = map.entrySet().iterator().next(); return Collections.singletonMap(entry.getKey(), entry.getValue()); } case TYPE_UNMODIFIABLE_SET: return Collections.unmodifiableSet((Set<?>) value); case TYPE_UNMODIFIABLE_LIST: return Collections.unmodifiableList((List<?>) value);"
      },
      {
        "txt": "case TYPE_UNMODIFIABLE_MAP: return Collections.unmodifiableMap((Map<?,?>) value); case TYPE_AS_LIST: default: return value; } } @Override public JavaType getInputType(TypeFactory typeFactory) { return _inputType;"
      },
      {
        "txt": "} @Override public JavaType getOutputType(TypeFactory typeFactory) { return _inputType; } private void _checkSingleton(int size) { if (size != 1) { throw new IllegalArgumentException(\"Can not deserialize Singleton container from \"+size+\" entries\"); } }"
      }
    ]
  }
]
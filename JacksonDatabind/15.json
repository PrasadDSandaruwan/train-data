[
  {
    "id": 1357,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/JavaType.java",
    "start-bug-line": 302,
    "end-bug-line": 302,
    "bug": "",
    "fix": "public final boolean isJavaLangObject() { return _class == Object.class; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.lang.reflect.Modifier;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.databind.type.TypeFactory; public abstract class JavaType extends ResolvedType implements java.io.Serializable, // 2.1 java.lang.reflect.Type // 2.2 { private static final long serialVersionUID = 1; protected final Class<?> _class; protected final int _hash;"
      },
      {
        "txt": "protected final Object _valueHandler; protected final Object _typeHandler; protected final boolean _asStatic; protected JavaType(Class<?> raw, int additionalHash, Object valueHandler, Object typeHandler, boolean asStatic) { _class = raw; _hash = raw.getName().hashCode() + additionalHash; _valueHandler = valueHandler; _typeHandler = typeHandler;"
      },
      {
        "txt": "_asStatic = asStatic; } public abstract JavaType withTypeHandler(Object h); public abstract JavaType withContentTypeHandler(Object h); public abstract JavaType withValueHandler(Object h); public abstract JavaType withContentValueHandler(Object h); public abstract JavaType withStaticTyping(); public JavaType narrowBy(Class<?> subclass) { if (subclass == _class) { return this; }"
      },
      {
        "txt": "_assertSubclass(subclass, _class); JavaType result = _narrow(subclass); if (_valueHandler != result.<Object>getValueHandler()) { result = result.withValueHandler(_valueHandler); } if (_typeHandler != result.<Object>getTypeHandler()) { result = result.withTypeHandler(_typeHandler); } return result; }"
      },
      {
        "txt": "public JavaType forcedNarrowBy(Class<?> subclass) { if (subclass == _class) { // can still optimize for simple case return this; } JavaType result = _narrow(subclass); if (_valueHandler != result.<Object>getValueHandler()) { result = result.withValueHandler(_valueHandler); } if (_typeHandler != result.<Object>getTypeHandler()) {"
      },
      {
        "txt": "result = result.withTypeHandler(_typeHandler); } return result; } public JavaType widenBy(Class<?> superclass) { if (superclass == _class) { return this; } _assertSubclass(_class, superclass); return _widen(superclass); } protected abstract JavaType _narrow(Class<?> subclass);"
      },
      {
        "txt": "protected JavaType _widen(Class<?> superclass) { return _narrow(superclass); } public abstract JavaType narrowContentsBy(Class<?> contentClass); public abstract JavaType widenContentsBy(Class<?> contentClass); @Override public final Class<?> getRawClass() { return _class; } @Override public final boolean hasRawClass(Class<?> clz) { return _class == clz; } @Override public boolean isAbstract() { return Modifier.isAbstract(_class.getModifiers());"
      },
      {
        "txt": "} @Override public boolean isConcrete() { int mod = _class.getModifiers(); if ((mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0) { return true; } return _class.isPrimitive(); } @Override"
      },
      {
        "txt": "public boolean isThrowable() { return Throwable.class.isAssignableFrom(_class); } @Override public boolean isArrayType() { return false; } @Override public final boolean isEnumType() { return _class.isEnum(); } @Override public final boolean isInterface() { return _class.isInterface(); } @Override public final boolean isPrimitive() { return _class.isPrimitive(); } @Override"
      },
      {
        "txt": "@Override public abstract boolean isContainerType(); @Override public boolean isCollectionLikeType() { return false; } @Override public boolean isMapLikeType() { return false; } <extra_id_0> public final boolean useStaticType() { return _asStatic; } @Override public boolean hasGenericTypes() { return containedTypeCount() > 0; } @Override public JavaType getKeyType() { return null; } @Override"
      },
      {
        "txt": "public JavaType getKeyType() { return null; } @Override public JavaType getContentType() { return null; } @Override public int containedTypeCount() { return 0; } @Override public JavaType containedType(int index) { return null; } @Override public String containedTypeName(int index) { return null; } @Override"
      },
      {
        "txt": "public abstract Class<?> getParameterSource(); public JavaType containedTypeOrUnknown(int index) { JavaType t = containedType(index); return (t == null) ? TypeFactory.unknownType() : t; } @SuppressWarnings(\"unchecked\") public <T> T getValueHandler() { return (T) _valueHandler; } @SuppressWarnings(\"unchecked\") public <T> T getTypeHandler() { return (T) _typeHandler; } public String getGenericSignature() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(40); getGenericSignature(sb); return sb.toString(); } public abstract StringBuilder getGenericSignature(StringBuilder sb); public String getErasedSignature() { StringBuilder sb = new StringBuilder(40); getErasedSignature(sb); return sb.toString(); }"
      },
      {
        "txt": "public abstract StringBuilder getErasedSignature(StringBuilder sb); protected void _assertSubclass(Class<?> subclass, Class<?> superClass) { if (!_class.isAssignableFrom(subclass)) { throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" is not assignable to \"+_class.getName()); } } @Override public abstract String toString(); @Override public abstract boolean equals(Object o);"
      },
      {
        "txt": "@Override public final int hashCode() { return _hash; }"
      }
    ]
  },
  {
    "id": 1358,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "start-bug-line": 163,
    "end-bug-line": 163,
    "bug": "if (ser == null) {",
    "fix": "if (ser == null && !delegateType.isJavaLangObject()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.*; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdGenerators; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.NamedType; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.jsontype.TypeSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter; import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter; import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator; import com.fasterxml.jackson.databind.ser.std.MapSerializer; import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.ArrayBuilders; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public class BeanSerializerFactory"
      },
      {
        "txt": "extends BasicSerializerFactory implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1; public final static BeanSerializerFactory instance = new BeanSerializerFactory(null); protected BeanSerializerFactory(SerializerFactoryConfig config) { super(config); } @Override"
      },
      {
        "txt": "public SerializerFactory withConfig(SerializerFactoryConfig config) { if (_factoryConfig == config) { return this; } if (getClass() != BeanSerializerFactory.class) { throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with \" +\"additional serializer definitions\"); }"
      },
      {
        "txt": "return new BeanSerializerFactory(config); } @Override protected Iterable<Serializers> customSerializers() { return _factoryConfig.serializers(); } @Override @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType)"
      },
      {
        "txt": "throws JsonMappingException { final SerializationConfig config = prov.getConfig(); BeanDescription beanDesc = config.introspect(origType); JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo()); if (ser != null) { return (JsonSerializer<Object>) ser; } boolean staticTyping; JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType);"
      },
      {
        "txt": "if (type == origType) { // no changes, won't force static typing staticTyping = false; } else { // changes; assume static typing; plus, need to re-introspect if class differs staticTyping = true; if (!type.hasRawClass(origType.getRawClass())) { beanDesc = config.introspect(type); } } Converter<Object,Object> conv = beanDesc.findSerializationConverter(); if (conv == null) { // no, simple"
      },
      {
        "txt": "} JavaType delegateType = conv.getOutputType(prov.getTypeFactory()); if (!delegateType.hasRawClass(type.getRawClass())) { beanDesc = config.introspect(delegateType); ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo()); } <extra_id_0> ser = _createSerializer2(prov, delegateType, beanDesc, true); } return new StdDelegatingSerializer(conv, delegateType, ser); } protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping)"
      },
      {
        "txt": "protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc); if (ser != null) { return ser; } final SerializationConfig config = prov.getConfig(); if (type.isContainerType()) {"
      },
      {
        "txt": "if (!staticTyping) { staticTyping = usesStaticTyping(config, beanDesc, null); if (property == null) { JavaType t = origType.getContentType(); if (t != null && !t.hasRawClass(Object.class)) { staticTyping = true; } } } ser = buildContainerSerializer(prov, type, beanDesc, staticTyping);"
      },
      {
        "txt": "if (ser != null) { return ser; } } else { for (Serializers serializers : customSerializers()) { ser = serializers.findSerializer(config, type, beanDesc); if (ser != null) { break; } }"
      },
      {
        "txt": "} if (ser == null) { ser = findSerializerByLookup(type, config, beanDesc, staticTyping); if (ser == null) { ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping); if (ser == null) { ser = findBeanSerializer(prov, type, beanDesc); if (ser == null) { ser = findSerializerByAddonType(config, type, beanDesc, staticTyping); if (ser == null) {"
      },
      {
        "txt": "ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); } } } } } if (ser != null) { if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { ser = mod.modifySerializer(config, beanDesc, ser);"
      },
      {
        "txt": "} } } return ser; } public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException { if (!isPotentialBeanType(type.getRawClass())) { if (!type.isEnumType()) {"
      },
      {
        "txt": "return null; } } return constructBeanSerializer(prov, beanDesc); } public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector();"
      },
      {
        "txt": "TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, accessor, baseType); if (b == null) { return createTypeSerializer(config, baseType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes( accessor, config, ai, baseType); return b.buildTypeSerializer(config, baseType, subtypes); } public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor)"
      },
      {
        "txt": "throws JsonMappingException { JavaType contentType = containerType.getContentType(); AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, accessor, containerType); if (b == null) { return createTypeSerializer(config, contentType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, contentType);"
      },
      {
        "txt": "return b.buildTypeSerializer(config, contentType, subtypes); } @SuppressWarnings(\"unchecked\") protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc) throws JsonMappingException { if (beanDesc.getBeanClass() == Object.class) { return prov.getUnknownTypeSerializer(Object.class); }"
      },
      {
        "txt": "final SerializationConfig config = prov.getConfig(); BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc); builder.setConfig(config); List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder); if (props == null) { props = new ArrayList<BeanPropertyWriter>(); } prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) {"
      },
      {
        "txt": "props = mod.changeProperties(config, beanDesc, props); } } props = filterBeanProperties(config, beanDesc, props); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { props = mod.orderProperties(config, beanDesc, props); } } builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props));"
      },
      {
        "txt": "builder.setProperties(props); builder.setFilterId(findFilterId(config, beanDesc)); AnnotatedMember anyGetter = beanDesc.findAnyGetter(); if (anyGetter != null) { if (config.canOverrideAccessModifiers()) { anyGetter.fixAccess(); } JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType()); boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING); JavaType valueType = type.getContentType();"
      },
      {
        "txt": "TypeSerializer typeSer = createTypeSerializer(config, valueType); JsonSerializer<?> anySer = findSerializerFromAnnotation(prov, anyGetter); if (anySer == null) { anySer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping, typeSer, null, null, /*filterId*/ null); } PropertyName name = new PropertyName(anyGetter.getName()); BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL); builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer));"
      },
      {
        "txt": "} processViews(config, builder); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build(); if (ser == null) { if (beanDesc.hasKnownClassAnnotations()) {"
      },
      {
        "txt": "return builder.createDummy(); } } return ser; } protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException { ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();"
      },
      {
        "txt": "if (objectIdInfo == null) { return null; } ObjectIdGenerator<?> gen; Class<?> implClass = objectIdInfo.getGeneratorType(); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work String propName = objectIdInfo.getPropertyName().getSimpleName(); BeanPropertyWriter idProp = null; for (int i = 0, len = props.size() ;; ++i) { if (i == len) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName() +\": can not find property with name '\"+propName+\"'\"); } BeanPropertyWriter prop = props.get(i); if (propName.equals(prop.getName())) { idProp = prop; if (i > 0) { props.remove(i); props.add(0, idProp); }"
      },
      {
        "txt": "break; } } JavaType idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp); return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId()); } JavaType type = prov.constructType(implClass); JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);"
      },
      {
        "txt": "return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId()); } protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews) { return FilteredBeanPropertyWriter.constructViewBased(writer, inViews); } protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc)"
      },
      {
        "txt": "{ return new PropertyBuilder(config, beanDesc); } protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) { return new BeanSerializerBuilder(beanDesc); } protected boolean isPotentialBeanType(Class<?> type) { return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type); }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException { List<BeanPropertyDefinition> properties = beanDesc.findProperties(); final SerializationConfig config = prov.getConfig(); removeIgnorableTypes(config, beanDesc, properties); if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) { removeSetterlessGetters(config, beanDesc, properties); }"
      },
      {
        "txt": "if (properties.isEmpty()) { return null; } boolean staticTyping = usesStaticTyping(config, beanDesc, null); PropertyBuilder pb = constructPropertyBuilder(config, beanDesc); ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size()); TypeBindings typeBind = beanDesc.bindingsForBeanType(); for (BeanPropertyDefinition property : properties) { final AnnotatedMember accessor = property.getAccessor(); if (property.isTypeId()) {"
      },
      {
        "txt": "if (accessor != null) { // only add if we can access... but otherwise? if (config.canOverrideAccessModifiers()) { accessor.fixAccess(); } builder.setTypeId(accessor); } continue; } AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType(); if (refType != null && refType.isBackReference()) {"
      },
      {
        "txt": "continue; } if (accessor instanceof AnnotatedMethod) { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor)); } else { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor)); } } return result; }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); AnnotatedClass ac = beanDesc.getClassInfo(); String[] ignored = intr.findPropertiesToIgnore(ac); if (ignored != null && ignored.length > 0) { HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored); Iterator<BeanPropertyWriter> it = props.iterator(); while (it.hasNext()) {"
      },
      {
        "txt": "if (ignoredSet.contains(it.next().getName())) { it.remove(); } } } return props; } protected void processViews(SerializationConfig config, BeanSerializerBuilder builder) { List<BeanPropertyWriter> props = builder.getProperties();"
      },
      {
        "txt": "boolean includeByDefault = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION); final int propCount = props.size(); int viewsFound = 0; BeanPropertyWriter[] filtered = new BeanPropertyWriter[propCount]; for (int i = 0; i < propCount; ++i) { BeanPropertyWriter bpw = props.get(i); Class<?>[] views = bpw.getViews(); if (views == null) { // no view info? include or exclude by default? if (includeByDefault) { filtered[i] = bpw;"
      },
      {
        "txt": "} } else { ++viewsFound; filtered[i] = constructFilteredBeanWriter(bpw, views); } } if (includeByDefault && viewsFound == 0) { return; } builder.setFilteredProperties(filtered);"
      },
      {
        "txt": "} protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); HashMap<Class<?>,Boolean> ignores = new HashMap<Class<?>,Boolean>(); Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); AnnotatedMember accessor = property.getAccessor();"
      },
      {
        "txt": "if (accessor == null) { it.remove(); continue; } Class<?> type = accessor.getRawType(); Boolean result = ignores.get(type); if (result == null) { BeanDescription desc = config.introspectClassAnnotations(type); AnnotatedClass ac = desc.getClassInfo(); result = intr.isIgnorableType(ac);"
      },
      {
        "txt": "if (result == null) { result = Boolean.FALSE; } ignores.put(type, result); } if (result.booleanValue()) { it.remove(); } } }"
      },
      {
        "txt": "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) { it.remove(); } }"
      },
      {
        "txt": "} protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException { final PropertyName name = propDef.getFullName(); if (prov.canOverrideAccessModifiers()) { accessor.fixAccess(); }"
      },
      {
        "txt": "JavaType type = accessor.getType(typeContext); BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(), pb.getClassAnnotations(), accessor, propDef.getMetadata()); JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov, accessor); if (annotatedSerializer instanceof ResolvableSerializer) { ((ResolvableSerializer) annotatedSerializer).resolve(prov); } annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property); TypeSerializer contentTypeSer = null;"
      },
      {
        "txt": "if (ClassUtil.isCollectionMapOrArray(type.getRawClass()) || type.isCollectionLikeType() || type.isMapLikeType()) { contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor); } TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor); BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping); return pbw; }"
      }
    ]
  },
  {
    "id": 1359,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java",
    "start-bug-line": 370,
    "end-bug-line": 370,
    "bug": "JsonSerializer<?> ser = provider.findValueSerializer(delegateType, prop);",
    "fix": "JsonSerializer<?> ser = delegateType.isJavaLangObject() ? null : provider.findValueSerializer(delegateType, prop);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.Type; import java.util.*; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdGenerators;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.ObjectIdInfo; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsonschema.JsonSerializableSchema; import com.fasterxml.jackson.databind.jsonschema.SchemaAware;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.*; import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter; import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator; import com.fasterxml.jackson.databind.ser.impl.WritableObjectId; import com.fasterxml.jackson.databind.util.ArrayBuilders; import com.fasterxml.jackson.databind.util.Converter; import com.fasterxml.jackson.databind.util.NameTransformer; @SuppressWarnings(\"serial\")"
      },
      {
        "txt": "public abstract class BeanSerializerBase extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final static PropertyName NAME_FOR_OBJECT_REF = new PropertyName(\"#object-ref\"); final protected static BeanPropertyWriter[] NO_PROPS = new BeanPropertyWriter[0]; final protected BeanPropertyWriter[] _props; final protected BeanPropertyWriter[] _filteredProps; final protected AnyGetterWriter _anyGetterWriter;"
      },
      {
        "txt": "final protected Object _propertyFilterId; final protected AnnotatedMember _typeId; final protected ObjectIdWriter _objectIdWriter; final protected JsonFormat.Shape _serializationShape; protected BeanSerializerBase(JavaType type, BeanSerializerBuilder builder, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) { super(type); _props = properties; _filteredProps = filteredProperties;"
      },
      {
        "txt": "if (builder == null) { // mostly for testing _typeId = null; _anyGetterWriter = null; _propertyFilterId = null; _objectIdWriter = null; _serializationShape = null; } else { _typeId = builder.getTypeId(); _anyGetterWriter = builder.getAnyGetter(); _propertyFilterId = builder.getFilterId();"
      },
      {
        "txt": "_objectIdWriter = builder.getObjectIdWriter(); JsonFormat.Value format = builder.getBeanDescription().findExpectedFormat(null); _serializationShape = (format == null) ? null : format.getShape(); } } public BeanSerializerBase(BeanSerializerBase src, BeanPropertyWriter[] properties, BeanPropertyWriter[] filteredProperties) { super(src._handledType); _props = properties;"
      },
      {
        "txt": "_filteredProps = filteredProperties; _typeId = src._typeId; _anyGetterWriter = src._anyGetterWriter; _objectIdWriter = src._objectIdWriter; _propertyFilterId = src._propertyFilterId; _serializationShape = src._serializationShape; } protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter) {"
      },
      {
        "txt": "this(src, objectIdWriter, src._propertyFilterId); } protected BeanSerializerBase(BeanSerializerBase src, ObjectIdWriter objectIdWriter, Object filterId) { super(src._handledType); _props = src._props; _filteredProps = src._filteredProps; _typeId = src._typeId; _anyGetterWriter = src._anyGetterWriter;"
      },
      {
        "txt": "_objectIdWriter = objectIdWriter; _propertyFilterId = filterId; _serializationShape = src._serializationShape; } protected BeanSerializerBase(BeanSerializerBase src, String[] toIgnore) { super(src._handledType); HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(toIgnore); final BeanPropertyWriter[] propsIn = src._props; final BeanPropertyWriter[] fpropsIn = src._filteredProps;"
      },
      {
        "txt": "final int len = propsIn.length; ArrayList<BeanPropertyWriter> propsOut = new ArrayList<BeanPropertyWriter>(len); ArrayList<BeanPropertyWriter> fpropsOut = (fpropsIn == null) ? null : new ArrayList<BeanPropertyWriter>(len); for (int i = 0; i < len; ++i) { BeanPropertyWriter bpw = propsIn[i]; if (ignoredSet.contains(bpw.getName())) { continue; } propsOut.add(bpw); if (fpropsIn != null) {"
      },
      {
        "txt": "fpropsOut.add(fpropsIn[i]); } } _props = propsOut.toArray(new BeanPropertyWriter[propsOut.size()]); _filteredProps = (fpropsOut == null) ? null : fpropsOut.toArray(new BeanPropertyWriter[fpropsOut.size()]); _typeId = src._typeId; _anyGetterWriter = src._anyGetterWriter; _objectIdWriter = src._objectIdWriter; _propertyFilterId = src._propertyFilterId; _serializationShape = src._serializationShape;"
      },
      {
        "txt": "} public abstract BeanSerializerBase withObjectIdWriter(ObjectIdWriter objectIdWriter); protected abstract BeanSerializerBase withIgnorals(String[] toIgnore); protected abstract BeanSerializerBase asArraySerializer(); protected abstract BeanSerializerBase withFilterId(Object filterId); protected BeanSerializerBase(BeanSerializerBase src) { this(src, src._props, src._filteredProps); } protected BeanSerializerBase(BeanSerializerBase src, NameTransformer unwrapper) { this(src, rename(src._props, unwrapper), rename(src._filteredProps, unwrapper));"
      },
      {
        "txt": "} private final static BeanPropertyWriter[] rename(BeanPropertyWriter[] props, NameTransformer transformer) { if (props == null || props.length == 0 || transformer == null || transformer == NameTransformer.NOP) { return props; } final int len = props.length; BeanPropertyWriter[] result = new BeanPropertyWriter[len]; for (int i = 0; i < len; ++i) {"
      },
      {
        "txt": "BeanPropertyWriter bpw = props[i]; if (bpw != null) { result[i] = bpw.rename(transformer); } } return result; } @Override public void resolve(SerializerProvider provider) throws JsonMappingException"
      },
      {
        "txt": "{ int filteredCount = (_filteredProps == null) ? 0 : _filteredProps.length; for (int i = 0, len = _props.length; i < len; ++i) { BeanPropertyWriter prop = _props[i]; if (!prop.willSuppressNulls() && !prop.hasNullSerializer()) { JsonSerializer<Object> nullSer = provider.findNullValueSerializer(prop); if (nullSer != null) { prop.assignNullSerializer(nullSer); if (i < filteredCount) { BeanPropertyWriter w2 = _filteredProps[i];"
      },
      {
        "txt": "if (w2 != null) { w2.assignNullSerializer(nullSer); } } } } if (prop.hasSerializer()) { continue; } JsonSerializer<Object> ser = findConvertingSerializer(provider, prop);"
      },
      {
        "txt": "if (ser == null) { JavaType type = prop.getSerializationType(); if (type == null) { type = provider.constructType(prop.getGenericPropertyType()); if (!type.isFinal()) { if (type.isContainerType() || type.containedTypeCount() > 0) { prop.setNonTrivialBaseType(type); } continue; }"
      },
      {
        "txt": "} ser = provider.findValueSerializer(type, prop); if (type.isContainerType()) { TypeSerializer typeSer = type.getContentType().getTypeHandler(); if (typeSer != null) { if (ser instanceof ContainerSerializer<?>) { @SuppressWarnings(\"unchecked\") JsonSerializer<Object> ser2 = (JsonSerializer<Object>)((ContainerSerializer<?>) ser).withValueTypeSerializer(typeSer); ser = ser2; }"
      },
      {
        "txt": "} } } prop.assignSerializer(ser); if (i < filteredCount) { BeanPropertyWriter w2 = _filteredProps[i]; if (w2 != null) { w2.assignSerializer(ser); } }"
      },
      {
        "txt": "} if (_anyGetterWriter != null) { _anyGetterWriter.resolve(provider); } } protected JsonSerializer<Object> findConvertingSerializer(SerializerProvider provider, BeanPropertyWriter prop) throws JsonMappingException { final AnnotationIntrospector intr = provider.getAnnotationIntrospector();"
      },
      {
        "txt": "AnnotatedMember m = prop.getMember(); if (m != null) { Object convDef = intr.findSerializationConverter(m); if (convDef != null) { Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef); JavaType delegateType = conv.getOutputType(provider.getTypeFactory()); <extra_id_0> return new StdDelegatingSerializer(conv, delegateType, ser); } } } return null; }"
      },
      {
        "txt": "return null; } @SuppressWarnings(\"incomplete-switch\") @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { final AnnotationIntrospector intr = provider.getAnnotationIntrospector(); final AnnotatedMember accessor = (property == null || intr == null)"
      },
      {
        "txt": "? null : property.getMember(); final SerializationConfig config = provider.getConfig(); JsonFormat.Shape shape = null; if (accessor != null) { JsonFormat.Value format = intr.findFormat((Annotated) accessor); if (format != null) { shape = format.getShape(); if (shape != _serializationShape) { if (_handledType.isEnum()) { switch (shape) {"
      },
      {
        "txt": "case STRING: case NUMBER: case NUMBER_INT: BeanDescription desc = config.introspectClassAnnotations(_handledType); JsonSerializer<?> ser = EnumSerializer.construct(_handledType, provider.getConfig(), desc, format); return provider.handlePrimaryContextualization(ser, property); } } }"
      },
      {
        "txt": "} } ObjectIdWriter oiw = _objectIdWriter; String[] ignorals = null; Object newFilterId = null; if (accessor != null) { ignorals = intr.findPropertiesToIgnore(accessor); ObjectIdInfo objectIdInfo = intr.findObjectIdInfo(accessor); if (objectIdInfo == null) { if (oiw != null) {"
      },
      {
        "txt": "objectIdInfo = intr.findObjectReferenceInfo(accessor, new ObjectIdInfo(NAME_FOR_OBJECT_REF, null, null, null)); oiw = _objectIdWriter.withAlwaysAsId(objectIdInfo.getAlwaysAsId()); } } else { objectIdInfo = intr.findObjectReferenceInfo(accessor, objectIdInfo); ObjectIdGenerator<?> gen; Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType type = provider.constructType(implClass); JavaType idType = provider.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0];"
      },
      {
        "txt": "if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work String propName = objectIdInfo.getPropertyName().getSimpleName(); BeanPropertyWriter idProp = null; for (int i = 0, len = _props.length ;; ++i) { if (i == len) { throw new IllegalArgumentException(\"Invalid Object Id definition for \"+_handledType.getName() +\": can not find property with name '\"+propName+\"'\"); } BeanPropertyWriter prop = _props[i]; if (propName.equals(prop.getName())) {"
      },
      {
        "txt": "idProp = prop; if (i > 0) { // note: must shuffle both regular properties and filtered System.arraycopy(_props, 0, _props, 1, i); _props[0] = idProp; if (_filteredProps != null) { BeanPropertyWriter fp = _filteredProps[i]; System.arraycopy(_filteredProps, 0, _filteredProps, 1, i); _filteredProps[0] = fp; } }"
      },
      {
        "txt": "break; } } idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp); oiw = ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId()); } else { // other types need to be simpler gen = provider.objectIdGeneratorInstance(accessor, objectIdInfo); oiw = ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId());"
      },
      {
        "txt": "} } Object filterId = intr.findFilterId(accessor); if (filterId != null) { if (_propertyFilterId == null || !filterId.equals(_propertyFilterId)) { newFilterId = filterId; } } } BeanSerializerBase contextual = this;"
      },
      {
        "txt": "if (oiw != null) { JsonSerializer<?> ser = provider.findValueSerializer(oiw.idType, property); oiw = oiw.withSerializer(ser); if (oiw != _objectIdWriter) { contextual = contextual.withObjectIdWriter(oiw); } } if (ignorals != null && ignorals.length != 0) { contextual = contextual.withIgnorals(ignorals); }"
      },
      {
        "txt": "if (newFilterId != null) { contextual = contextual.withFilterId(newFilterId); } if (shape == null) { shape = _serializationShape; } if (shape == JsonFormat.Shape.ARRAY) { return contextual.asArraySerializer(); } return contextual;"
      },
      {
        "txt": "} @Override public boolean usesObjectId() { return (_objectIdWriter != null); } @Override public abstract void serialize(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException; @Override public void serializeWithType(Object bean, JsonGenerator gen,"
      },
      {
        "txt": "SerializerProvider provider, TypeSerializer typeSer) throws IOException { if (_objectIdWriter != null) { _serializeWithObjectId(bean, gen, provider, typeSer); return; } String typeStr = (_typeId == null) ? null : _customTypeId(bean); if (typeStr == null) { typeSer.writeTypePrefixForObject(bean, gen);"
      },
      {
        "txt": "} else { typeSer.writeCustomTypePrefixForObject(bean, gen, typeStr); } if (_propertyFilterId != null) { serializeFieldsFiltered(bean, gen, provider); } else { serializeFields(bean, gen, provider); } if (typeStr == null) { typeSer.writeTypeSuffixForObject(bean, gen);"
      },
      {
        "txt": "} else { typeSer.writeCustomTypeSuffixForObject(bean, gen, typeStr); } } protected final void _serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider, boolean startEndObject) throws IOException, JsonGenerationException { final ObjectIdWriter w = _objectIdWriter;"
      },
      {
        "txt": "WritableObjectId objectId = provider.findObjectId(bean, w.generator); if (objectId.writeAsId(jgen, provider, w)) { return; } Object id = objectId.generateId(bean); if (w.alwaysAsId) { w.serializer.serialize(id, jgen, provider); return; } if (startEndObject) {"
      },
      {
        "txt": "jgen.writeStartObject(); } objectId.writeAsField(jgen, provider, w); if (_propertyFilterId != null) { serializeFieldsFiltered(bean, jgen, provider); } else { serializeFields(bean, jgen, provider); } if (startEndObject) { jgen.writeEndObject();"
      },
      {
        "txt": "} } protected final void _serializeWithObjectId(Object bean, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonGenerationException { final ObjectIdWriter w = _objectIdWriter; WritableObjectId objectId = provider.findObjectId(bean, w.generator); if (objectId.writeAsId(jgen, provider, w)) {"
      },
      {
        "txt": "return; } Object id = objectId.generateId(bean); if (w.alwaysAsId) { w.serializer.serialize(id, jgen, provider); return; } _serializeObjectId(bean, jgen, provider, typeSer, objectId); } protected void _serializeObjectId(Object bean,"
      },
      {
        "txt": "JsonGenerator jgen,SerializerProvider provider, TypeSerializer typeSer, WritableObjectId objectId) throws IOException, JsonProcessingException, JsonGenerationException { final ObjectIdWriter w = _objectIdWriter; String typeStr = (_typeId == null) ? null :_customTypeId(bean); if (typeStr == null) { typeSer.writeTypePrefixForObject(bean, jgen); } else { typeSer.writeCustomTypePrefixForObject(bean, jgen, typeStr); }"
      },
      {
        "txt": "objectId.writeAsField(jgen, provider, w); if (_propertyFilterId != null) { serializeFieldsFiltered(bean, jgen, provider); } else { serializeFields(bean, jgen, provider); } if (typeStr == null) { typeSer.writeTypeSuffixForObject(bean, jgen); } else { typeSer.writeCustomTypeSuffixForObject(bean, jgen, typeStr);"
      },
      {
        "txt": "} } protected final String _customTypeId(Object bean) { final Object typeId = _typeId.getValue(bean); if (typeId == null) { return \"\"; } return (typeId instanceof String) ? (String) typeId : typeId.toString(); }"
      },
      {
        "txt": "protected void serializeFields(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { final BeanPropertyWriter[] props; if (_filteredProps != null && provider.getActiveView() != null) { props = _filteredProps; } else { props = _props; } int i = 0;"
      },
      {
        "txt": "try { for (final int len = props.length; i < len; ++i) { BeanPropertyWriter prop = props[i]; if (prop != null) { // can have nulls in filtered list prop.serializeAsField(bean, jgen, provider); } } if (_anyGetterWriter != null) { _anyGetterWriter.getAndSerialize(bean, jgen, provider); }"
      },
      {
        "txt": "} catch (Exception e) { String name = (i == props.length) ? \"[anySetter]\" : props[i].getName(); wrapAndThrow(provider, e, bean, name); } catch (StackOverflowError e) { JsonMappingException mapE = new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e); String name = (i == props.length) ? \"[anySetter]\" : props[i].getName(); mapE.prependPath(new JsonMappingException.Reference(bean, name)); throw mapE; } }"
      },
      {
        "txt": "protected void serializeFieldsFiltered(Object bean, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException { final BeanPropertyWriter[] props; if (_filteredProps != null && provider.getActiveView() != null) { props = _filteredProps; } else { props = _props; }"
      },
      {
        "txt": "final PropertyFilter filter = findPropertyFilter(provider, _propertyFilterId, bean); if (filter == null) { serializeFields(bean, jgen, provider); return; } int i = 0; try { for (final int len = props.length; i < len; ++i) { BeanPropertyWriter prop = props[i]; if (prop != null) { // can have nulls in filtered list"
      },
      {
        "txt": "filter.serializeAsField(bean, jgen, provider, prop); } } if (_anyGetterWriter != null) { _anyGetterWriter.getAndFilter(bean, jgen, provider, filter); } } catch (Exception e) { String name = (i == props.length) ? \"[anySetter]\" : props[i].getName(); wrapAndThrow(provider, e, bean, name); } catch (StackOverflowError e) {"
      },
      {
        "txt": "JsonMappingException mapE = new JsonMappingException(\"Infinite recursion (StackOverflowError)\", e); String name = (i == props.length) ? \"[anySetter]\" : props[i].getName(); mapE.prependPath(new JsonMappingException.Reference(bean, name)); throw mapE; } } @Deprecated @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException"
      },
      {
        "txt": "{ ObjectNode o = createSchemaNode(\"object\", true); JsonSerializableSchema ann = _handledType.getAnnotation(JsonSerializableSchema.class); if (ann != null) { String id = ann.id(); if (id != null && id.length() > 0) { o.put(\"id\", id); } } ObjectNode propertiesNode = o.objectNode();"
      },
      {
        "txt": "final PropertyFilter filter; if (_propertyFilterId != null) { filter = findPropertyFilter(provider, _propertyFilterId, null); } else { filter = null; } for (int i = 0; i < _props.length; i++) { BeanPropertyWriter prop = _props[i]; if (filter == null) { prop.depositSchemaProperty(propertiesNode, provider);"
      },
      {
        "txt": "} else { filter.depositSchemaProperty(prop, propertiesNode, provider); } } o.put(\"properties\", propertiesNode); return o; } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      },
      {
        "txt": "{ if (visitor == null) { return; } JsonObjectFormatVisitor objectVisitor = visitor.expectObjectFormat(typeHint); if (objectVisitor == null) { return; } if (_propertyFilterId != null) { PropertyFilter filter = findPropertyFilter(visitor.getProvider(),"
      },
      {
        "txt": "_propertyFilterId, null); for (int i = 0; i < _props.length; i++) { filter.depositSchemaProperty(_props[i], objectVisitor, visitor.getProvider()); } } else { for (int i = 0; i < _props.length; i++) { _props[i].depositSchemaProperty(objectVisitor); } } }"
      }
    ]
  },
  {
    "id": 1360,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 121,
    "end-bug-line": 121,
    "bug": "",
    "fix": "if (!delegateType.isJavaLangObject()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object>"
      },
      {
        "txt": "implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class);"
      },
      {
        "txt": "_converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null;"
      },
      {
        "txt": "_delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer;"
      },
      {
        "txt": "} protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override"
      },
      {
        "txt": "public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } <extra_id_0> } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);"
      },
      {
        "txt": "return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; }"
      },
      {
        "txt": "@Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); }"
      },
      {
        "txt": "@Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value)"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); }"
      },
      {
        "txt": "@Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)"
      },
      {
        "txt": "throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1361,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 122,
    "end-bug-line": 122,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer,"
      },
      {
        "txt": "JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter;"
      },
      {
        "txt": "_delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; }"
      },
      {
        "txt": "protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException"
      },
      {
        "txt": "{ if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException {"
      },
      {
        "txt": "JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); <extra_id_0> if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); }"
      },
      {
        "txt": ": withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override"
      },
      {
        "txt": "public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); } @Override"
      },
      {
        "txt": "public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) {"
      },
      {
        "txt": "Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); } @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint,"
      },
      {
        "txt": "boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException"
      },
      {
        "txt": "{ _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1362,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 126,
    "end-bug-line": 127,
    "bug": "return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer);",
    "fix": "if (delSer == _delegateSerializer && delegateType == _delegateType) { return this; } return withDelegate(_converter, delegateType, delSer);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter;"
      },
      {
        "txt": "import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType;"
      },
      {
        "txt": "protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)"
      },
      {
        "txt": "{ super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) {"
      },
      {
        "txt": "throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider);"
      },
      {
        "txt": "} } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) {"
      },
      {
        "txt": "} delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } <extra_id_0> } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() {"
      },
      {
        "txt": "@Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen);"
      },
      {
        "txt": "return; } _delegateSerializer.serialize(delegateValue, gen, provider); } @Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);"
      },
      {
        "txt": "} @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value)"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint);"
      },
      {
        "txt": "} return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); }"
      },
      {
        "txt": "return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value);"
      }
    ]
  },
  {
    "id": 1363,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 161,
    "end-bug-line": 161,
    "bug": "_delegateSerializer.serialize(delegateValue, gen, provider);",
    "fix": "JsonSerializer<Object> ser = _delegateSerializer; if (ser == null) { ser = _findSerializer(delegateValue, provider); } ser.serialize(delegateValue, gen, provider);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware {"
      },
      {
        "txt": "protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)"
      },
      {
        "txt": "{ if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null)"
      },
      {
        "txt": "&& (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType;"
      },
      {
        "txt": "if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this"
      },
      {
        "txt": ": withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } <extra_id_0> } @Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value);"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue);"
      },
      {
        "txt": "} @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException"
      },
      {
        "txt": "{ if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException {"
      },
      {
        "txt": "if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);"
      },
      {
        "txt": "} protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1364,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 172,
    "end-bug-line": 172,
    "bug": "_delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer);",
    "fix": "JsonSerializer<Object> ser = _delegateSerializer; if (ser == null) { ser = _findSerializer(value, provider); } ser.serializeWithType(delegateValue, gen, provider, typeSer);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object>"
      },
      {
        "txt": "implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class);"
      },
      {
        "txt": "_converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null;"
      },
      {
        "txt": "_delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer;"
      },
      {
        "txt": "} protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override"
      },
      {
        "txt": "public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "{ JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) {"
      },
      {
        "txt": "delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() {"
      },
      {
        "txt": "return _delegateSerializer; } @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; }"
      },
      {
        "txt": "} @Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); <extra_id_0> } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) { Object delegateValue = convertValue(value);"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); }"
      },
      {
        "txt": "@Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)"
      },
      {
        "txt": "throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1365,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 180,
    "end-bug-line": 180,
    "bug": "",
    "fix": "if (_delegateSerializer == null) { // best we can do for now, too costly to look up return (value == null); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type;"
      },
      {
        "txt": "@SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) {"
      },
      {
        "txt": "super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType);"
      },
      {
        "txt": "_converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); }"
      },
      {
        "txt": "return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } }"
      },
      {
        "txt": "@Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); }"
      },
      {
        "txt": "delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter;"
      },
      {
        "txt": "} @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) {"
      },
      {
        "txt": "provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); } @Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value);"
      },
      {
        "txt": "} @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) { Object delegateValue = convertValue(value); <extra_id_0> } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue);"
      },
      {
        "txt": "Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); }"
      },
      {
        "txt": "return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint);"
      },
      {
        "txt": "} @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1366,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 187,
    "end-bug-line": 187,
    "bug": "",
    "fix": "if (_delegateSerializer == null) { // best we can do for now, too costly to look up return (value == null); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware {"
      },
      {
        "txt": "protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer)"
      },
      {
        "txt": "{ if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null)"
      },
      {
        "txt": "&& (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType;"
      },
      {
        "txt": "if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this"
      },
      {
        "txt": ": withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override"
      },
      {
        "txt": "public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); } @Override"
      },
      {
        "txt": "public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) {"
      },
      {
        "txt": "return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); <extra_id_0> } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) {"
      },
      {
        "txt": "{ if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException {"
      },
      {
        "txt": "if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);"
      },
      {
        "txt": "} protected Object convertValue(Object value) { return _converter.convert(value); }"
      }
    ]
  },
  {
    "id": 1367,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 224,
    "end-bug-line": 224,
    "bug": "_delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint);",
    "fix": "if (_delegateSerializer != null) { _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type;"
      },
      {
        "txt": "@SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware { protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) {"
      },
      {
        "txt": "super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType);"
      },
      {
        "txt": "_converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); }"
      },
      {
        "txt": "return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException { if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } }"
      },
      {
        "txt": "@Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer; JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); }"
      },
      {
        "txt": "delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); } return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter;"
      },
      {
        "txt": "} @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; } @Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) {"
      },
      {
        "txt": "provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); } @Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value);"
      },
      {
        "txt": "_delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override"
      },
      {
        "txt": "public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) {"
      },
      {
        "txt": "return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional);"
      },
      {
        "txt": "return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { <extra_id_0> } protected Object convertValue(Object value) { return _converter.convert(value); } }"
      }
    ]
  },
  {
    "id": 1368,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 256,
    "end-bug-line": 256,
    "bug": "",
    "fix": "protected JsonSerializer<Object> _findSerializer(Object value, SerializerProvider serializers) throws JsonMappingException {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware"
      },
      {
        "txt": "{ protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null;"
      },
      {
        "txt": "_delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter,"
      },
      {
        "txt": "JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException {"
      },
      {
        "txt": "if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer;"
      },
      {
        "txt": "JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); }"
      },
      {
        "txt": "return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; }"
      },
      {
        "txt": "@Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); }"
      },
      {
        "txt": "@Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value)"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); }"
      },
      {
        "txt": "@Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)"
      },
      {
        "txt": "{ _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); } <extra_id_0> }"
      }
    ]
  },
  {
    "id": 1369,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdDelegatingSerializer.java",
    "start-bug-line": 257,
    "end-bug-line": 257,
    "bug": "",
    "fix": "return serializers.findValueSerializer(value.getClass()); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.ContextualSerializer; import com.fasterxml.jackson.databind.ser.ResolvableSerializer; import com.fasterxml.jackson.databind.util.Converter; import java.io.IOException; import java.lang.reflect.Type; @SuppressWarnings(\"serial\") public class StdDelegatingSerializer extends StdSerializer<Object> implements ContextualSerializer, ResolvableSerializer, JsonFormatVisitable, SchemaAware"
      },
      {
        "txt": "{ protected final Converter<Object,?> _converter; protected final JavaType _delegateType; protected final JsonSerializer<Object> _delegateSerializer; @SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<?,?> converter) { super(Object.class); _converter = (Converter<Object,?>)converter; _delegateType = null;"
      },
      {
        "txt": "_delegateSerializer = null; } @SuppressWarnings(\"unchecked\") public <T> StdDelegatingSerializer(Class<T> cls, Converter<T,?> converter) { super(cls, false); _converter = (Converter<Object,?>)converter; _delegateType = null; _delegateSerializer = null; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public StdDelegatingSerializer(Converter<Object,?> converter, JavaType delegateType, JsonSerializer<?> delegateSerializer) { super(delegateType); _converter = converter; _delegateType = delegateType; _delegateSerializer = (JsonSerializer<Object>) delegateSerializer; } protected StdDelegatingSerializer withDelegate(Converter<Object,?> converter,"
      },
      {
        "txt": "JavaType delegateType, JsonSerializer<?> delegateSerializer) { if (getClass() != StdDelegatingSerializer.class) { throw new IllegalStateException(\"Sub-class \"+getClass().getName()+\" must override 'withDelegate'\"); } return new StdDelegatingSerializer(converter, delegateType, delegateSerializer); } @Override public void resolve(SerializerProvider provider) throws JsonMappingException {"
      },
      {
        "txt": "if ((_delegateSerializer != null) && (_delegateSerializer instanceof ResolvableSerializer)) { ((ResolvableSerializer) _delegateSerializer).resolve(provider); } } @Override public JsonSerializer<?> createContextual(SerializerProvider provider, BeanProperty property) throws JsonMappingException { JsonSerializer<?> delSer = _delegateSerializer;"
      },
      {
        "txt": "JavaType delegateType = _delegateType; if (delSer == null) { if (delegateType == null) { delegateType = _converter.getOutputType(provider.getTypeFactory()); } delSer = provider.findValueSerializer(delegateType); } if (delSer instanceof ContextualSerializer) { delSer = provider.handleSecondaryContextualization(delSer, property); }"
      },
      {
        "txt": "return (delSer == _delegateSerializer) ? this : withDelegate(_converter, delegateType, delSer); } protected Converter<Object, ?> getConverter() { return _converter; } @Override public JsonSerializer<?> getDelegatee() { return _delegateSerializer; }"
      },
      {
        "txt": "@Override public void serialize(Object value, JsonGenerator gen, SerializerProvider provider) throws IOException { Object delegateValue = convertValue(value); if (delegateValue == null) { provider.defaultSerializeNull(gen); return; } _delegateSerializer.serialize(delegateValue, gen, provider); }"
      },
      {
        "txt": "@Override public void serializeWithType(Object value, JsonGenerator gen, SerializerProvider provider, TypeSerializer typeSer) throws IOException { Object delegateValue = convertValue(value); _delegateSerializer.serializeWithType(delegateValue, gen, provider, typeSer); } @Override @Deprecated // since 2.5 public boolean isEmpty(Object value)"
      },
      {
        "txt": "{ Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(delegateValue); } @Override public boolean isEmpty(SerializerProvider prov, Object value) { Object delegateValue = convertValue(value); return _delegateSerializer.isEmpty(prov, delegateValue); }"
      },
      {
        "txt": "@Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint); } return super.getSchema(provider, typeHint); } @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { if (_delegateSerializer instanceof SchemaAware) { return ((SchemaAware) _delegateSerializer).getSchema(provider, typeHint, isOptional); } return super.getSchema(provider, typeHint); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint)"
      },
      {
        "txt": "{ _delegateSerializer.acceptJsonFormatVisitor(visitor, typeHint); } protected Object convertValue(Object value) { return _converter.convert(value); } <extra_id_0>"
      }
    ]
  },
  {
    "id": 1370,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdSerializer.java",
    "start-bug-line": 262,
    "end-bug-line": 262,
    "bug": "if (existingSerializer == null) {",
    "fix": "if (existingSerializer == null && !delegateType.hasRawClass(Object.class)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Type; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitable; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.FilterProvider; import com.fasterxml.jackson.databind.ser.PropertyFilter; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public abstract class StdSerializer<T> extends JsonSerializer<T> implements JsonFormatVisitable, SchemaAware, java.io.Serializable"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected final Class<T> _handledType; protected StdSerializer(Class<T> t) { _handledType = t; } @SuppressWarnings(\"unchecked\") protected StdSerializer(JavaType type) { _handledType = (Class<T>) type.getRawClass(); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected StdSerializer(Class<?> t, boolean dummy) { _handledType = (Class<T>) t; } @Override public Class<T> handledType() { return _handledType; } @Override public abstract void serialize(T value, JsonGenerator jgen, SerializerProvider provider) throws IOException, JsonGenerationException; @Override"
      },
      {
        "txt": "public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { return createSchemaNode(\"string\"); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint, boolean isOptional) throws JsonMappingException { ObjectNode schema = (ObjectNode) getSchema(provider, typeHint);"
      },
      {
        "txt": "if (!isOptional) { schema.put(\"required\", !isOptional); } return schema; } protected ObjectNode createObjectNode() { return JsonNodeFactory.instance.objectNode(); } protected ObjectNode createSchemaNode(String type) {"
      },
      {
        "txt": "ObjectNode schema = createObjectNode(); schema.put(\"type\", type); return schema; } protected ObjectNode createSchemaNode(String type, boolean isOptional) { ObjectNode schema = createSchemaNode(type); if (!isOptional) { schema.put(\"required\", !isOptional); }"
      },
      {
        "txt": "return schema; } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { visitor.expectAnyFormat(typeHint); } public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, String fieldName)"
      },
      {
        "txt": "throws IOException { while (t instanceof InvocationTargetException && t.getCause() != null) { t = t.getCause(); } if (t instanceof Error) { throw (Error) t; } boolean wrap = (provider == null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS); if (t instanceof IOException) {"
      },
      {
        "txt": "if (!wrap || !(t instanceof JsonMappingException)) { throw (IOException) t; } } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions if (t instanceof RuntimeException) { throw (RuntimeException) t; } } throw JsonMappingException.wrapWithPath(t, bean, fieldName); }"
      },
      {
        "txt": "public void wrapAndThrow(SerializerProvider provider, Throwable t, Object bean, int index) throws IOException { while (t instanceof InvocationTargetException && t.getCause() != null) { t = t.getCause(); } if (t instanceof Error) { throw (Error) t; }"
      },
      {
        "txt": "boolean wrap = (provider == null) || provider.isEnabled(SerializationFeature.WRAP_EXCEPTIONS); if (t instanceof IOException) { if (!wrap || !(t instanceof JsonMappingException)) { throw (IOException) t; } } else if (!wrap) { // [JACKSON-407] -- allow disabling wrapping for unchecked exceptions if (t instanceof RuntimeException) { throw (RuntimeException) t; } }"
      },
      {
        "txt": "throw JsonMappingException.wrapWithPath(t, bean, index); } protected boolean isDefaultSerializer(JsonSerializer<?> serializer) { return ClassUtil.isJacksonStdImpl(serializer); } protected JsonSerializer<?> findConvertingContentSerializer(SerializerProvider provider, BeanProperty prop, JsonSerializer<?> existingSerializer) throws JsonMappingException { final AnnotationIntrospector intr = provider.getAnnotationIntrospector();"
      },
      {
        "txt": "AnnotatedMember m = prop.getMember(); if (m != null) { Object convDef = intr.findSerializationContentConverter(m); if (convDef != null) { Converter<Object,Object> conv = provider.converterInstance(prop.getMember(), convDef); JavaType delegateType = conv.getOutputType(provider.getTypeFactory()); <extra_id_0> existingSerializer = provider.findValueSerializer(delegateType); } return new StdDelegatingSerializer(conv, delegateType, existingSerializer); } } }"
      },
      {
        "txt": "} } return existingSerializer; } protected PropertyFilter findPropertyFilter(SerializerProvider provider, Object filterId, Object valueToFilter) throws JsonMappingException { FilterProvider filters = provider.getFilterProvider(); if (filters == null) {"
      },
      {
        "txt": "throw new JsonMappingException(\"Can not resolve PropertyFilter with id '\"+filterId+\"'; no FilterProvider configured\"); } PropertyFilter filter = filters.findPropertyFilter(filterId, valueToFilter); return filter; }"
      }
    ]
  }
]
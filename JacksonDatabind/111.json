[
  {
    "id": 1809,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/CreatorProperty.java",
    "start-bug-line": 135,
    "end-bug-line": 135,
    "bug": "return new CreatorProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new CreatorProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.AnnotatedParameter; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public class CreatorProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedParameter _annotated; protected final Object _injectableValueId; protected SettableBeanProperty _fallbackSetter; protected final int _creatorIndex; protected boolean _ignorable; public CreatorProperty(PropertyName name, JavaType type, PropertyName wrapperName,"
      },
      {
        "txt": "TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedParameter param, int index, Object injectableValueId, PropertyMetadata metadata) { super(name, type, wrapperName, typeDeser, contextAnnotations, metadata); _annotated = param; _creatorIndex = index; _injectableValueId = injectableValueId; _fallbackSetter = null;"
      },
      {
        "txt": "} protected CreatorProperty(CreatorProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _injectableValueId = src._injectableValueId; _fallbackSetter = src._fallbackSetter; _creatorIndex = src._creatorIndex; _ignorable = src._ignorable; } protected CreatorProperty(CreatorProperty src, JsonDeserializer<?> deser,"
      },
      {
        "txt": "NullValueProvider nva) { super(src, deser, nva); _annotated = src._annotated; _injectableValueId = src._injectableValueId; _fallbackSetter = src._fallbackSetter; _creatorIndex = src._creatorIndex; _ignorable = src._ignorable; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new CreatorProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public void fixAccess(DeserializationConfig config) { if (_fallbackSetter != null) { _fallbackSetter.fixAccess(config); } } public void setFallbackSetter(SettableBeanProperty fallbackSetter) { _fallbackSetter = fallbackSetter; }"
      },
      {
        "txt": "@Override public void markAsIgnorable() { _ignorable = true; } @Override public boolean isIgnorable() { return _ignorable; } public Object findInjectableValue(DeserializationContext context, Object beanInstance) throws JsonMappingException"
      },
      {
        "txt": "{ if (_injectableValueId == null) { context.reportBadDefinition(ClassUtil.classOf(beanInstance), String.format(\"Property '%s' (type %s) has no injectable value id configured\", getName(), getClass().getName())); } return context.findInjectableValue(_injectableValueId, this, beanInstance); } public void inject(DeserializationContext context, Object beanInstance) throws IOException"
      },
      {
        "txt": "{ set(beanInstance, findInjectableValue(context, beanInstance)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { if (_annotated == null) { return null; } return _annotated.getAnnotation(acls); }"
      },
      {
        "txt": "@Override public AnnotatedMember getMember() { return _annotated; } @Override public int getCreatorIndex() { return _creatorIndex; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { _verifySetter(); _fallbackSetter.set(instance, deserialize(p, ctxt));"
      },
      {
        "txt": "} @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { _verifySetter(); return _fallbackSetter.setAndReturn(instance, deserialize(p, ctxt)); } @Override public void set(Object instance, Object value) throws IOException"
      },
      {
        "txt": "{ _verifySetter(); _fallbackSetter.set(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException { _verifySetter(); return _fallbackSetter.setAndReturn(instance, value); }"
      },
      {
        "txt": "@Override public Object getInjectableValueId() { return _injectableValueId; } @Override public String toString() { return \"[creator property, name '\"+getName()+\"'; inject id '\"+_injectableValueId+\"']\"; } private final void _verifySetter() throws IOException { if (_fallbackSetter == null) { _reportMissingSetter(null, null); }"
      },
      {
        "txt": "} private void _reportMissingSetter(JsonParser p, DeserializationContext ctxt) throws IOException { final String msg = \"No fallback setter/field defined for creator property '\"+getName()+\"'\"; if (ctxt != null ) { ctxt.reportBadDefinition(getType(), msg); } else { throw InvalidDefinitionException.from(p, msg, getType()); } }"
      }
    ]
  },
  {
    "id": 1810,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
    "start-bug-line": 93,
    "end-bug-line": 93,
    "bug": "return new FieldProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new FieldProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Field; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.introspect.AnnotatedField; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil; public final class FieldProperty"
      },
      {
        "txt": "extends SettableBeanProperty { private static final long serialVersionUID = 1L; final protected AnnotatedField _annotated; final protected transient Field _field; final protected boolean _skipNulls; public FieldProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedField field) { super(propDef, type, typeDeser, contextAnnotations);"
      },
      {
        "txt": "_annotated = field; _field = field.getAnnotated(); _skipNulls = NullsConstantProvider.isSkipper(_nullProvider); } protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva); _annotated = src._annotated; _field = src._field; _skipNulls = NullsConstantProvider.isSkipper(nva);"
      },
      {
        "txt": "} protected FieldProperty(FieldProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _field = src._field; _skipNulls = src._skipNulls; } protected FieldProperty(FieldProperty src) { super(src);"
      },
      {
        "txt": "_annotated = src._annotated; Field f = _annotated.getAnnotated(); if (f == null) { throw new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\"); } _field = f; _skipNulls = src._skipNulls; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new FieldProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public void fixAccess(DeserializationConfig config) { ClassUtil.checkAndFixAccess(_field, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return (_annotated == null) ? null : _annotated.getAnnotation(acls); }"
      },
      {
        "txt": "@Override public AnnotatedMember getMember() { return _annotated; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return; }"
      },
      {
        "txt": "value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt); if (value == null) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt); } } else {"
      },
      {
        "txt": "value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try { _field.set(instance, value); } catch (Exception e) { _throwAsIOE(p, e, value); } } @Override public Object deserializeSetAndReturn(JsonParser p,"
      },
      {
        "txt": "DeserializationContext ctxt, Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt);"
      },
      {
        "txt": "if (value == null) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try {"
      },
      {
        "txt": "_field.set(instance, value); } catch (Exception e) { _throwAsIOE(p, e, value); } return instance; } @Override public void set(Object instance, Object value) throws IOException { try {"
      },
      {
        "txt": "_field.set(instance, value); } catch (Exception e) { _throwAsIOE(e, value); } } @Override public Object setAndReturn(Object instance, Object value) throws IOException { try { _field.set(instance, value);"
      },
      {
        "txt": "} catch (Exception e) { _throwAsIOE(e, value); } return instance; } Object readResolve() { return new FieldProperty(this); }"
      }
    ]
  },
  {
    "id": 1811,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/FieldProperty.java",
    "start-bug-line": 217,
    "end-bug-line": 217,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Field; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedField; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil; public final class FieldProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "final protected AnnotatedField _annotated; final protected transient Field _field; final protected boolean _skipNulls; public FieldProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedField field) { super(propDef, type, typeDeser, contextAnnotations); _annotated = field; _field = field.getAnnotated(); _skipNulls = NullsConstantProvider.isSkipper(_nullProvider);"
      },
      {
        "txt": "} protected FieldProperty(FieldProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva); _annotated = src._annotated; _field = src._field; _skipNulls = NullsConstantProvider.isSkipper(nva); } protected FieldProperty(FieldProperty src, PropertyName newName) { super(src, newName);"
      },
      {
        "txt": "_annotated = src._annotated; _field = src._field; _skipNulls = src._skipNulls; } protected FieldProperty(FieldProperty src) { super(src); _annotated = src._annotated; Field f = _annotated.getAnnotated(); if (f == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Missing field (broken JDK (de)serialization?)\"); } _field = f; _skipNulls = src._skipNulls; } @Override public SettableBeanProperty withName(PropertyName newName) { return new FieldProperty(this, newName); } @Override"
      },
      {
        "txt": "public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } return new FieldProperty(this, deser, _nullProvider); } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new FieldProperty(this, _valueDeserializer, nva); }"
      },
      {
        "txt": "@Override public void fixAccess(DeserializationConfig config) { ClassUtil.checkAndFixAccess(_field, config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return (_annotated == null) ? null : _annotated.getAnnotation(acls); } @Override public AnnotatedMember getMember() { return _annotated; }"
      },
      {
        "txt": "@Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt);"
      },
      {
        "txt": "} else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt); if (value == null) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer);"
      },
      {
        "txt": "} try { _field.set(instance, value); } catch (Exception e) { _throwAsIOE(p, e, value); } } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException"
      },
      {
        "txt": "{ Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt); if (value == null) {"
      },
      {
        "txt": "if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try { _field.set(instance, value);"
      },
      {
        "txt": "} catch (Exception e) { _throwAsIOE(p, e, value); } return instance; } @Override public void set(Object instance, Object value) throws IOException { try { _field.set(instance, value);"
      },
      {
        "txt": "} catch (Exception e) { _throwAsIOE(e, value); } } @Override public Object setAndReturn(Object instance, Object value) throws IOException { try { _field.set(instance, value); } catch (Exception e) {"
      },
      {
        "txt": "} return instance; } Object readResolve() { return new FieldProperty(this); } <extra_id_0>"
      }
    ]
  },
  {
    "id": 1812,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "start-bug-line": 218,
    "end-bug-line": 218,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Method; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; public final class MethodProperty extends SettableBeanProperty"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1; protected final AnnotatedMethod _annotated; protected final transient Method _setter; final protected boolean _skipNulls; public MethodProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) { super(propDef, type, typeDeser, contextAnnotations);"
      },
      {
        "txt": "_annotated = method; _setter = method.getAnnotated(); _skipNulls = NullsConstantProvider.isSkipper(_nullProvider); } protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva); _annotated = src._annotated; _setter = src._setter; _skipNulls = NullsConstantProvider.isSkipper(nva);"
      },
      {
        "txt": "} protected MethodProperty(MethodProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _setter = src._setter; _skipNulls = src._skipNulls; } protected MethodProperty(MethodProperty src, Method m) { super(src); _annotated = src._annotated;"
      },
      {
        "txt": "_setter = m; _skipNulls = src._skipNulls; } @Override public SettableBeanProperty withName(PropertyName newName) { return new MethodProperty(this, newName); } @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) {"
      },
      {
        "txt": "return this; } return new MethodProperty(this, deser, _nullProvider); } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new MethodProperty(this, _valueDeserializer, nva); } @Override public void fixAccess(DeserializationConfig config) {"
      },
      {
        "txt": "_annotated.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return (_annotated == null) ? null : _annotated.getAnnotation(acls); } @Override public AnnotatedMember getMember() { return _annotated; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt,"
      },
      {
        "txt": "Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt);"
      },
      {
        "txt": "if (value == null) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try {"
      },
      {
        "txt": "_setter.invoke(instance, value); } catch (Exception e) { _throwAsIOE(p, e, value); } } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { Object value;"
      },
      {
        "txt": "if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt); if (value == null) { if (_skipNulls) { return instance;"
      },
      {
        "txt": "} value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try { Object result = _setter.invoke(instance, value); return (result == null) ? instance : result; } catch (Exception e) {"
      },
      {
        "txt": "_throwAsIOE(p, e, value); return null; } } @Override public final void set(Object instance, Object value) throws IOException { try { _setter.invoke(instance, value); } catch (Exception e) {"
      },
      {
        "txt": "_throwAsIOE(e, value); } } @Override public Object setAndReturn(Object instance, Object value) throws IOException { try { Object result = _setter.invoke(instance, value); return (result == null) ? instance : result; } catch (Exception e) {"
      },
      {
        "txt": "_throwAsIOE(e, value); return null; } } Object readResolve() { return new MethodProperty(this, _annotated.getAnnotated()); }"
      }
    ]
  },
  {
    "id": 1813,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/MethodProperty.java",
    "start-bug-line": 84,
    "end-bug-line": 84,
    "bug": "return new MethodProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new MethodProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Method; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; public final class MethodProperty extends SettableBeanProperty { private static final long serialVersionUID = 1; protected final AnnotatedMethod _annotated; protected final transient Method _setter; final protected boolean _skipNulls;"
      },
      {
        "txt": "public MethodProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) { super(propDef, type, typeDeser, contextAnnotations); _annotated = method; _setter = method.getAnnotated(); _skipNulls = NullsConstantProvider.isSkipper(_nullProvider); } protected MethodProperty(MethodProperty src, JsonDeserializer<?> deser,"
      },
      {
        "txt": "NullValueProvider nva) { super(src, deser, nva); _annotated = src._annotated; _setter = src._setter; _skipNulls = NullsConstantProvider.isSkipper(nva); } protected MethodProperty(MethodProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _setter = src._setter;"
      },
      {
        "txt": "_skipNulls = src._skipNulls; } protected MethodProperty(MethodProperty src, Method m) { super(src); _annotated = src._annotated; _setter = m; _skipNulls = src._skipNulls; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new MethodProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public void fixAccess(DeserializationConfig config) { _annotated.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return (_annotated == null) ? null : _annotated.getAnnotation(acls); }"
      },
      {
        "txt": "@Override public AnnotatedMember getMember() { return _annotated; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return; }"
      },
      {
        "txt": "value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt); if (value == null) { if (_skipNulls) { return; } value = _nullProvider.getNullValue(ctxt); } } else {"
      },
      {
        "txt": "value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try { _setter.invoke(instance, value); } catch (Exception e) { _throwAsIOE(p, e, value); } } @Override public Object deserializeSetAndReturn(JsonParser p,"
      },
      {
        "txt": "DeserializationContext ctxt, Object instance) throws IOException { Object value; if (p.hasToken(JsonToken.VALUE_NULL)) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } else if (_valueTypeDeserializer == null) { value = _valueDeserializer.deserialize(p, ctxt);"
      },
      {
        "txt": "if (value == null) { if (_skipNulls) { return instance; } value = _nullProvider.getNullValue(ctxt); } } else { value = _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } try {"
      },
      {
        "txt": "Object result = _setter.invoke(instance, value); return (result == null) ? instance : result; } catch (Exception e) { _throwAsIOE(p, e, value); return null; } } @Override public final void set(Object instance, Object value) throws IOException {"
      },
      {
        "txt": "try { _setter.invoke(instance, value); } catch (Exception e) { _throwAsIOE(e, value); } } @Override public Object setAndReturn(Object instance, Object value) throws IOException { try {"
      },
      {
        "txt": "Object result = _setter.invoke(instance, value); return (result == null) ? instance : result; } catch (Exception e) { _throwAsIOE(e, value); return null; } } Object readResolve() { return new MethodProperty(this, _annotated.getAnnotated()); }"
      }
    ]
  },
  {
    "id": 1814,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdReferenceProperty.java",
    "start-bug-line": 54,
    "end-bug-line": 54,
    "bug": "return new ObjectIdReferenceProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new ObjectIdReferenceProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.deser.UnresolvedForwardReference; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.ObjectIdInfo; public class ObjectIdReferenceProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; private final SettableBeanProperty _forward; public ObjectIdReferenceProperty(SettableBeanProperty forward, ObjectIdInfo objectIdInfo)"
      },
      {
        "txt": "{ super(forward); _forward = forward; _objectIdInfo = objectIdInfo; } public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva); _forward = src._forward;"
      },
      {
        "txt": "_objectIdInfo = src._objectIdInfo; } public ObjectIdReferenceProperty(ObjectIdReferenceProperty src, PropertyName newName) { super(src, newName); _forward = src._forward; _objectIdInfo = src._objectIdInfo; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new ObjectIdReferenceProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public void fixAccess(DeserializationConfig config) { if (_forward != null) { _forward.fixAccess(config); } } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return _forward.getAnnotation(acls);"
      },
      {
        "txt": "} @Override public AnnotatedMember getMember() { return _forward.getMember(); } @Override public int getCreatorIndex() { return _forward.getCreatorIndex(); } @Override"
      },
      {
        "txt": "public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { deserializeSetAndReturn(p, ctxt, instance); } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { try { return setAndReturn(instance, deserialize(p, ctxt)); } catch (UnresolvedForwardReference reference) { boolean usingIdentityInfo = (_objectIdInfo != null) || (_valueDeserializer.getObjectIdReader() != null);"
      },
      {
        "txt": "if (!usingIdentityInfo) { throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info\", reference); } reference.getRoid().appendReferring(new PropertyReferring(this, reference, _type.getRawClass(), instance)); return null; } } @Override public void set(Object instance, Object value) throws IOException { _forward.set(instance, value);"
      },
      {
        "txt": "} @Override public Object setAndReturn(Object instance, Object value) throws IOException { return _forward.setAndReturn(instance, value); } public final static class PropertyReferring extends Referring { private final ObjectIdReferenceProperty _parent; public final Object _pojo; public PropertyReferring(ObjectIdReferenceProperty parent, UnresolvedForwardReference ref, Class<?> type, Object ob)"
      },
      {
        "txt": "{ super(ref, type); _parent = parent; _pojo = ob; } @Override public void handleResolvedForwardReference(Object id, Object value) throws IOException { if (!hasId(id)) { throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id"
      },
      {
        "txt": "+ \"] that wasn't previously seen as unresolved.\"); } _parent.set(_pojo, value); } }"
      }
    ]
  },
  {
    "id": 1815,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 55,
    "end-bug-line": 55,
    "bug": "return new ObjectIdValueProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new ObjectIdValueProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException;"
      },
      {
        "txt": "import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) { super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser, NullValueProvider nva)"
      },
      {
        "txt": "{ super(src, deser, nva); _objectIdReader = src._objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) { super(src, newName); _objectIdReader = src._objectIdReader; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new ObjectIdValueProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return null; } @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {"
      },
      {
        "txt": "deserializeSetAndReturn(p, ctxt, instance); } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { if (p.hasToken(JsonToken.VALUE_NULL)) { return null; } Object id = _valueDeserializer.deserialize(p, ctxt);"
      },
      {
        "txt": "ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(instance, id); } return instance; } @Override public void set(Object instance, Object value) throws IOException {"
      },
      {
        "txt": "setAndReturn(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException { SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); }"
      },
      {
        "txt": "return idProp.setAndReturn(instance, value); }"
      }
    ]
  },
  {
    "id": 1816,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
    "start-bug-line": 68,
    "end-bug-line": 68,
    "bug": "return new SetterlessProperty(this, deser, _nullProvider);",
    "fix": "NullValueProvider nvp = (_valueDeserializer == _nullProvider) ? deser : _nullProvider; return new SetterlessProperty(this, deser, nvp);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Method; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.introspect.AnnotatedMember;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedMethod; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; public final class SetterlessProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _annotated; protected final Method _getter;"
      },
      {
        "txt": "public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) { super(propDef, type, typeDeser, contextAnnotations); _annotated = method; _getter = method.getAnnotated(); } protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva);"
      },
      {
        "txt": "_annotated = src._annotated; _getter = src._getter; } protected SetterlessProperty(SetterlessProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _getter = src._getter; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "} @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } <extra_id_0> } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new SetterlessProperty(this, _valueDeserializer, nva); } @Override"
      },
      {
        "txt": "} @Override public void fixAccess(DeserializationConfig config) { _annotated.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return _annotated.getAnnotation(acls); }"
      },
      {
        "txt": "@Override public AnnotatedMember getMember() { return _annotated; } @Override public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_NULL) { return; } if (_valueTypeDeserializer != null) {"
      },
      {
        "txt": "ctxt.reportBadDefinition(getType(), String.format( \"Problem deserializing 'setterless' property (\\\"%s\\\"): no way to handle typed deser with setterless yet\", getName())); } Object toModify; try { toModify = _getter.invoke(instance, (Object[]) null); } catch (Exception e) { _throwAsIOE(p, e); return; // never gets here"
      },
      {
        "txt": "} if (toModify == null) { ctxt.reportBadDefinition(getType(), String.format( \"Problem deserializing 'setterless' property '%s': get method returned null\", getName())); } _valueDeserializer.deserialize(p, ctxt, toModify); } @Override public Object deserializeSetAndReturn(JsonParser p,"
      },
      {
        "txt": "DeserializationContext ctxt, Object instance) throws IOException { deserializeAndSet(p, ctxt, instance); return instance; } @Override public final void set(Object instance, Object value) throws IOException { throw new UnsupportedOperationException(\"Should never call `set()` on setterless property ('\"+getName()+\"')\"); } @Override"
      },
      {
        "txt": "public Object setAndReturn(Object instance, Object value) throws IOException { set(instance, value); return instance; }"
      }
    ]
  },
  {
    "id": 1817,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/SetterlessProperty.java",
    "start-bug-line": 156,
    "end-bug-line": 156,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.Method; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonToken; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.introspect.AnnotatedMember;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedMethod; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; public final class SetterlessProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final AnnotatedMethod _annotated; protected final Method _getter;"
      },
      {
        "txt": "public SetterlessProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations, AnnotatedMethod method) { super(propDef, type, typeDeser, contextAnnotations); _annotated = method; _getter = method.getAnnotated(); } protected SetterlessProperty(SetterlessProperty src, JsonDeserializer<?> deser, NullValueProvider nva) { super(src, deser, nva);"
      },
      {
        "txt": "_annotated = src._annotated; _getter = src._getter; } protected SetterlessProperty(SetterlessProperty src, PropertyName newName) { super(src, newName); _annotated = src._annotated; _getter = src._getter; } @Override public SettableBeanProperty withName(PropertyName newName) {"
      },
      {
        "txt": "return new SetterlessProperty(this, newName); } @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { if (_valueDeserializer == deser) { return this; } return new SetterlessProperty(this, deser, _nullProvider); } @Override"
      },
      {
        "txt": "public SettableBeanProperty withNullProvider(NullValueProvider nva) { return new SetterlessProperty(this, _valueDeserializer, nva); } @Override public void fixAccess(DeserializationConfig config) { _annotated.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) {"
      },
      {
        "txt": "return _annotated.getAnnotation(acls); } @Override public AnnotatedMember getMember() { return _annotated; } @Override public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_NULL) { return;"
      },
      {
        "txt": "} if (_valueTypeDeserializer != null) { ctxt.reportBadDefinition(getType(), String.format( \"Problem deserializing 'setterless' property (\\\"%s\\\"): no way to handle typed deser with setterless yet\", getName())); } Object toModify; try { toModify = _getter.invoke(instance, (Object[]) null); } catch (Exception e) {"
      },
      {
        "txt": "_throwAsIOE(p, e); return; // never gets here } if (toModify == null) { ctxt.reportBadDefinition(getType(), String.format( \"Problem deserializing 'setterless' property '%s': get method returned null\", getName())); } _valueDeserializer.deserialize(p, ctxt, toModify); }"
      },
      {
        "txt": "@Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { deserializeAndSet(p, ctxt, instance); return instance; } @Override public final void set(Object instance, Object value) throws IOException { throw new UnsupportedOperationException(\"Should never call `set()` on setterless property ('\"+getName()+\"')\");"
      },
      {
        "txt": "@Override public Object setAndReturn(Object instance, Object value) throws IOException { set(instance, value); return instance; } <extra_id_0>"
      }
    ]
  },
  {
    "id": 1818,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
    "start-bug-line": 157,
    "end-bug-line": 157,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.ValueInstantiator; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; public class AtomicReferenceDeserializer"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; public class AtomicReferenceDeserializer extends ReferenceTypeDeserializer<AtomicReference<Object>> { private static final long serialVersionUID = 1L; public AtomicReferenceDeserializer(JavaType fullType, ValueInstantiator inst, TypeDeserializer typeDeser, JsonDeserializer<?> deser) { super(fullType, inst, typeDeser, deser); }"
      },
      {
        "txt": "@Override public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser) { return new AtomicReferenceDeserializer(_fullType, _valueInstantiator, typeDeser, valueDeser); } @Override public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException { return new AtomicReference<Object>(); } @Override"
      },
      {
        "txt": "public Object getEmptyValue(DeserializationContext ctxt) { return new AtomicReference<Object>(); } @Override public AtomicReference<Object> referenceValue(Object contents) { return new AtomicReference<Object>(contents); } @Override public Object getReferenced(AtomicReference<Object> reference) { return reference.get();"
      },
      {
        "txt": "} @Override // since 2.9 public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents) { reference.set(contents); return reference; } @Override // since 2.9 public Boolean supportsUpdate(DeserializationConfig config) { return Boolean.TRUE; }"
      }
    ]
  },
  {
    "id": 1819,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/AtomicReferenceDeserializer.java",
    "start-bug-line": 43,
    "end-bug-line": 43,
    "bug": "return new AtomicReference<Object>();",
    "fix": "return new AtomicReference<Object>(_valueDeserializer.getNullValue(ctxt));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.ValueInstantiator;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; public class AtomicReferenceDeserializer extends ReferenceTypeDeserializer<AtomicReference<Object>> { private static final long serialVersionUID = 1L; public AtomicReferenceDeserializer(JavaType fullType, ValueInstantiator inst, TypeDeserializer typeDeser, JsonDeserializer<?> deser) { super(fullType, inst, typeDeser, deser); }"
      },
      {
        "txt": "public AtomicReferenceDeserializer withResolved(TypeDeserializer typeDeser, JsonDeserializer<?> valueDeser) { return new AtomicReferenceDeserializer(_fullType, _valueInstantiator, typeDeser, valueDeser); } @Override public AtomicReference<Object> getNullValue(DeserializationContext ctxt) throws JsonMappingException { <extra_id_0> } @Override public Object getEmptyValue(DeserializationContext ctxt) { return new AtomicReference<Object>(); } @Override"
      },
      {
        "txt": "} @Override public AtomicReference<Object> referenceValue(Object contents) { return new AtomicReference<Object>(contents); } @Override public Object getReferenced(AtomicReference<Object> reference) { return reference.get(); } @Override // since 2.9"
      },
      {
        "txt": "public AtomicReference<Object> updateReference(AtomicReference<Object> reference, Object contents) { reference.set(contents); return reference; } @Override // since 2.9 public Boolean supportsUpdate(DeserializationConfig config) { return Boolean.TRUE; }"
      }
    ]
  }
]
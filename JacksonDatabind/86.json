[
  {
    "id": 1712,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/ResolvedRecursiveType.java",
    "start-bug-line": 29,
    "end-bug-line": 29,
    "bug": "",
    "fix": "@Override public JavaType getSuperClass() { if (_referencedType != null) { return _referencedType.getSuperClass(); } return super.getSuperClass(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public class ResolvedRecursiveType extends TypeBase { private static final long serialVersionUID = 1L; protected JavaType _referencedType; public ResolvedRecursiveType(Class<?> erasedType, TypeBindings bindings) { super(erasedType, bindings, null, null, 0, null, null, false); }"
      },
      {
        "txt": "{ if (_referencedType != null) { throw new IllegalStateException(\"Trying to re-set self reference; old value = \"+_referencedType+\", new = \"+ref); } _referencedType = ref; } <extra_id_0> public JavaType getSelfReferencedType() { return _referencedType; } @Override public StringBuilder getGenericSignature(StringBuilder sb) { return _referencedType.getGenericSignature(sb); } @Override"
      },
      {
        "txt": "} @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _referencedType.getErasedSignature(sb); } @Override public JavaType withContentType(JavaType contentType) { return this; } @Override"
      },
      {
        "txt": "public JavaType withTypeHandler(Object h) { return this; } @Override public JavaType withContentTypeHandler(Object h) { return this; } @Override public JavaType withValueHandler(Object h) { return this;"
      },
      {
        "txt": "} @Override public JavaType withContentValueHandler(Object h) { return this; } @Override public JavaType withStaticTyping() { return this; } @Deprecated // since 2.7"
      },
      {
        "txt": "@Override protected JavaType _narrow(Class<?> subclass) { return this; } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } @Override"
      },
      {
        "txt": "public boolean isContainerType() { return false; } @Override public String toString() { StringBuilder sb = new StringBuilder(40) .append(\"[recursive type; \"); if (_referencedType == null) { sb.append(\"UNRESOLVED\"); } else {"
      },
      {
        "txt": "sb.append(_referencedType.getRawClass().getName()); } return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (_referencedType == null) { return false;"
      },
      {
        "txt": "} return (o.getClass() == getClass() && _referencedType.equals(((ResolvedRecursiveType) o).getSelfReferencedType())); }"
      }
    ]
  }
]
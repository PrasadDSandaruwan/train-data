[
  {
    "id": 1744,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
    "start-bug-line": 298,
    "end-bug-line": 298,
    "bug": "buffer.assignParameter(typeProp, typeId);",
    "fix": "final Object v; if (typeProp.getType().hasRawClass(String.class)) { v = typeId; } else { TokenBuffer tb = new TokenBuffer(p, ctxt); tb.writeString(typeId); v = typeProp.getValueDeserializer().deserialize(tb.asParserOnFirstToken(), ctxt); tb.close(); } buffer.assignParameter(typeProp, v);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.TokenBuffer; public class ExternalTypeHandler { private final JavaType _beanType;"
      },
      {
        "txt": "private final ExtTypedProperty[] _properties; private final Map<String, Object> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(JavaType beanType, ExtTypedProperty[] properties, Map<String, Object> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) { _beanType = beanType;"
      },
      {
        "txt": "_properties = properties; _nameToPropertyIndex = nameToPropertyIndex; _typeIds = typeIds; _tokens = tokens; } protected ExternalTypeHandler(ExternalTypeHandler h) { _beanType = h._beanType; _properties = h._properties; _nameToPropertyIndex = h._nameToPropertyIndex;"
      },
      {
        "txt": "int len = _properties.length; _typeIds = new String[len]; _tokens = new TokenBuffer[len]; } public static Builder builder(JavaType beanType) { return new Builder(beanType); } public ExternalTypeHandler start() { return new ExternalTypeHandler(this); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public boolean handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException { Object ob = _nameToPropertyIndex.get(propName); if (ob == null) { return false; } final String typeId = p.getText();"
      },
      {
        "txt": "if (ob instanceof List<?>) { boolean result = false; for (Integer index : (List<Integer>) ob) { if (_handleTypePropertyValue(p, ctxt, propName, bean, typeId, index.intValue())) { result = true; } } return result; }"
      },
      {
        "txt": "return _handleTypePropertyValue(p, ctxt, propName, bean, typeId, ((Integer) ob).intValue()); } private final boolean _handleTypePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean, String typeId, int index) throws IOException { ExtTypedProperty prop = _properties[index]; if (!prop.hasTypePropertyName(propName)) { // when could/should this ever happen? return false;"
      },
      {
        "txt": "} boolean canDeserialize = (bean != null) && (_tokens[index] != null); if (canDeserialize) { _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; } else { _typeIds[index] = typeId; } return true; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public boolean handlePropertyValue(JsonParser p, DeserializationContext ctxt, String propName, Object bean) throws IOException { Object ob = _nameToPropertyIndex.get(propName); if (ob == null) { return false; } if (ob instanceof List<?>) { Iterator<Integer> it = ((List<Integer>) ob).iterator();"
      },
      {
        "txt": "Integer index = it.next(); ExtTypedProperty prop = _properties[index]; if (prop.hasTypePropertyName(propName)) { String typeId = p.getText(); p.skipChildren(); _typeIds[index] = typeId; while (it.hasNext()) { _typeIds[it.next()] = typeId; } } else {"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(p, ctxt); tokens.copyCurrentStructure(p); _tokens[index] = tokens; while (it.hasNext()) { _tokens[it.next()] = tokens; } } return true; }"
      },
      {
        "txt": "int index = ((Integer) ob).intValue(); ExtTypedProperty prop = _properties[index]; boolean canDeserialize; if (prop.hasTypePropertyName(propName)) { _typeIds[index] = p.getText(); p.skipChildren(); canDeserialize = (bean != null) && (_tokens[index] != null); } else { @SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(p, ctxt);"
      },
      {
        "txt": "tokens.copyCurrentStructure(p); _tokens[index] = tokens; canDeserialize = (bean != null) && (_typeIds[index] != null); } if (canDeserialize) { String typeId = _typeIds[index]; _typeIds[index] = null; _deserializeAndSet(p, ctxt, bean, index, typeId); _tokens[index] = null; }"
      },
      {
        "txt": "return true; } @SuppressWarnings(\"resource\") public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException { for (int i = 0, len = _properties.length; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { TokenBuffer tokens = _tokens[i];"
      },
      {
        "txt": "if (tokens == null) { continue; } JsonToken t = tokens.firstToken(); if (t.isScalarValue()) { // can't be null as we never store empty buffers JsonParser buffered = tokens.asParser(p); buffered.nextToken(); SettableBeanProperty extProp = _properties[i].getProperty(); Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); if (result != null) {"
      },
      {
        "txt": "extProp.set(bean, result); continue; } if (!_properties[i].hasDefaultType()) { ctxt.reportInputMismatch(bean.getClass(), \"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } else { typeId = _properties[i].getDefaultTypeId(); }"
      },
      {
        "txt": "} } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty(); if(prop.isRequired() || ctxt.isEnabled(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY)) { ctxt.reportInputMismatch(bean.getClass(), \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } return bean;"
      },
      {
        "txt": "} _deserializeAndSet(p, ctxt, bean, i, typeId); } return bean; } public Object complete(JsonParser p, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length;"
      },
      {
        "txt": "Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; final ExtTypedProperty extProp = _properties[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!extProp.hasDefaultType()) { ctxt.reportInputMismatch(_beanType,"
      },
      {
        "txt": "\"Missing external type id property '%s'\", extProp.getTypePropertyName()); } else { typeId = extProp.getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = extProp.getProperty(); ctxt.reportInputMismatch(_beanType, \"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName());"
      },
      {
        "txt": "values[i] = _deserialize(p, ctxt, i, typeId); final SettableBeanProperty prop = extProp.getProperty(); if (prop.getCreatorIndex() >= 0) { buffer.assignParameter(prop, values[i]); SettableBeanProperty typeProp = extProp.getTypeProperty(); if ((typeProp != null) && (typeProp.getCreatorIndex() >= 0)) { <extra_id_0> } } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty();"
      },
      {
        "txt": "for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (prop.getCreatorIndex() < 0) { prop.set(bean, values[i]); } } return bean; } @SuppressWarnings(\"resource\") protected final Object _deserialize(JsonParser p, DeserializationContext ctxt,"
      },
      {
        "txt": "int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { return null; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray(); merged.writeString(typeId);"
      },
      {
        "txt": "merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); return _properties[index].getProperty().deserialize(mp, ctxt); } @SuppressWarnings(\"resource\") protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException {"
      },
      {
        "txt": "JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); if (t == JsonToken.VALUE_NULL) { _properties[index].getProperty().set(bean, null); return; } TokenBuffer merged = new TokenBuffer(p, ctxt); merged.writeStartArray(); merged.writeString(typeId); merged.copyCurrentStructure(p2);"
      },
      {
        "txt": "merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean); } public static class Builder { private final JavaType _beanType; private final List<ExtTypedProperty> _properties = new ArrayList<>(); private final Map<String, Object> _nameToPropertyIndex = new HashMap<>();"
      },
      {
        "txt": "protected Builder(JavaType t) { _beanType = t; } public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) { Integer index = _properties.size(); _properties.add(new ExtTypedProperty(property, typeDeser)); _addPropertyIndex(property.getName(), index); _addPropertyIndex(typeDeser.getPropertyName(), index); }"
      },
      {
        "txt": "private void _addPropertyIndex(String name, Integer index) { Object ob = _nameToPropertyIndex.get(name); if (ob == null) { _nameToPropertyIndex.put(name, index); } else if (ob instanceof List<?>) { @SuppressWarnings(\"unchecked\") List<Object> list = (List<Object>) ob; list.add(index); } else { List<Object> list = new LinkedList<>();"
      },
      {
        "txt": "list.add(ob); list.add(index); _nameToPropertyIndex.put(name, list); } } public ExternalTypeHandler build(BeanPropertyMap otherProps) { final int len = _properties.size(); ExtTypedProperty[] extProps = new ExtTypedProperty[len]; for (int i = 0; i < len; ++i) { ExtTypedProperty extProp = _properties.get(i);"
      },
      {
        "txt": "String typePropId = extProp.getTypePropertyName(); SettableBeanProperty typeProp = otherProps.find(typePropId); if (typeProp != null) { extProp.linkTypeProperty(typeProp); } extProps[i] = extProp; } return new ExternalTypeHandler(_beanType, extProps, _nameToPropertyIndex, null, null); }"
      },
      {
        "txt": "} private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; private SettableBeanProperty _typeProperty; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) { _property = property;"
      },
      {
        "txt": "_typeDeserializer = typeDeser; _typePropertyName = typeDeser.getPropertyName(); } public void linkTypeProperty(SettableBeanProperty p) { _typeProperty = p; } public boolean hasTypePropertyName(String n) { return n.equals(_typePropertyName); } public boolean hasDefaultType() {"
      },
      {
        "txt": "return _typeDeserializer.getDefaultImpl() != null; } public String getDefaultTypeId() { Class<?> defaultType = _typeDeserializer.getDefaultImpl(); if (defaultType == null) { return null; } return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); } public String getTypePropertyName() { return _typePropertyName; }"
      },
      {
        "txt": "public SettableBeanProperty getProperty() { return _property; } public SettableBeanProperty getTypeProperty() { return _typeProperty; } }"
      }
    ]
  }
]
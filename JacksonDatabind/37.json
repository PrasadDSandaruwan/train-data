[
  {
    "id": 1494,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 135,
    "end-bug-line": 135,
    "bug": "return new SimpleType(subclass, _bindings, _superClass, _superInterfaces,",
    "fix": "return new SimpleType(subclass, _bindings, this, _superInterfaces,",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase { private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) {"
      },
      {
        "txt": "this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) { super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts,"
      },
      {
        "txt": "0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) {"
      },
      {
        "txt": "return new SimpleType(raw, null, null, null, null, null, false); } @Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) { throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } return new SimpleType(cls); } @Override protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "return this; } if (!_class.isAssignableFrom(subclass)) { throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); } <extra_id_0> _valueHandler, _typeHandler, _asStatic); } @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); }"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override"
      },
      {
        "txt": "public JavaType withContentTypeHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this; } return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); }"
      },
      {
        "txt": "@Override public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override"
      },
      {
        "txt": "public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size();"
      },
      {
        "txt": "if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); } sb.append(t.toCanonical()); } sb.append('>');"
      },
      {
        "txt": "} return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override"
      },
      {
        "txt": "public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { sb = containedType(i).getGenericSignature(sb); } sb.append('>');"
      },
      {
        "txt": "} sb.append(';'); return sb; } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString();"
      },
      {
        "txt": "} @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o; if (other._class != this._class) return false; TypeBindings b1 = _bindings;"
      },
      {
        "txt": "TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  }
]
[
  {
    "id": 1337,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java",
    "start-bug-line": 27,
    "end-bug-line": 27,
    "bug": "",
    "fix": "Class<?> cls = value.getClass();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.Type; import java.util.Date; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;"
      },
      {
        "txt": "public class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer() { super(Object.class); } @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { String str; <extra_id_0> if (value instanceof Date) { provider.defaultSerializeDateKey((Date) value, jgen); return; } else { str = value.toString(); }"
      },
      {
        "txt": "str = value.toString(); } jgen.writeFieldName(str); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { return createSchemaNode(\"string\"); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException {"
      },
      {
        "txt": "visitor.expectStringFormat(typeHint); }"
      }
    ]
  },
  {
    "id": 1338,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java",
    "start-bug-line": 28,
    "end-bug-line": 28,
    "bug": "if (value instanceof Date) {",
    "fix": "if (cls == String.class) { str = (String) value; } else if (Date.class.isAssignableFrom(cls)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.Type; import java.util.Date; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper;"
      },
      {
        "txt": "public class StdKeySerializer extends StdSerializer<Object> { public StdKeySerializer() { super(Object.class); } @Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { String str; <extra_id_0> provider.defaultSerializeDateKey((Date) value, jgen); return; } else { str = value.toString(); } jgen.writeFieldName(str);"
      },
      {
        "txt": "} jgen.writeFieldName(str); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { return createSchemaNode(\"string\"); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { visitor.expectStringFormat(typeHint);"
      }
    ]
  },
  {
    "id": 1339,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/StdKeySerializer.java",
    "start-bug-line": 31,
    "end-bug-line": 31,
    "bug": "",
    "fix": "} else if (cls == Class.class) { str = ((Class<?>) value).getName();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.Type;"
      },
      {
        "txt": "import java.util.Date; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; @SuppressWarnings(\"serial\") public class StdKeySerializer extends StdSerializer<Object> {"
      },
      {
        "txt": "@Override public void serialize(Object value, JsonGenerator jgen, SerializerProvider provider) throws IOException { String str; if (value instanceof Date) { provider.defaultSerializeDateKey((Date) value, jgen); return; <extra_id_0> str = value.toString(); } jgen.writeFieldName(str); } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException {"
      },
      {
        "txt": "@Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) throws JsonMappingException { return createSchemaNode(\"string\"); } @Override public void acceptJsonFormatVisitor(JsonFormatVisitorWrapper visitor, JavaType typeHint) throws JsonMappingException { visitor.expectStringFormat(typeHint); }"
      }
    ]
  }
]
[
  {
    "id": 1454,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
    "start-bug-line": 228,
    "end-bug-line": 228,
    "bug": "",
    "fix": "if (t == JsonToken.VALUE_NULL) { return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.TokenBuffer; public class ExternalTypeHandler {"
      },
      {
        "txt": "private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties, HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) { _properties = properties; _nameToPropertyIndex = nameToPropertyIndex;"
      },
      {
        "txt": "_typeIds = typeIds; _tokens = tokens; } protected ExternalTypeHandler(ExternalTypeHandler h) { _properties = h._properties; _nameToPropertyIndex = h._nameToPropertyIndex; int len = _properties.length; _typeIds = new String[len]; _tokens = new TokenBuffer[len];"
      },
      {
        "txt": "} public ExternalTypeHandler start() { return new ExternalTypeHandler(this); } public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException { Integer I = _nameToPropertyIndex.get(propName); if (I == null) {"
      },
      {
        "txt": "return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; if (!prop.hasTypePropertyName(propName)) { return false; } String typeId = jp.getText(); boolean canDeserialize = (bean != null) && (_tokens[index] != null); if (canDeserialize) {"
      },
      {
        "txt": "_deserializeAndSet(jp, ctxt, bean, index, typeId); _tokens[index] = null; } else { _typeIds[index] = typeId; } return true; } public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException {"
      },
      {
        "txt": "Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; boolean canDeserialize; if (prop.hasTypePropertyName(propName)) { _typeIds[index] = jp.getText(); jp.skipChildren();"
      },
      {
        "txt": "canDeserialize = (bean != null) && (_tokens[index] != null); } else { @SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(jp); tokens.copyCurrentStructure(jp); _tokens[index] = tokens; canDeserialize = (bean != null) && (_typeIds[index] != null); } if (canDeserialize) { String typeId = _typeIds[index];"
      },
      {
        "txt": "_typeIds[index] = null; _deserializeAndSet(jp, ctxt, bean, index, typeId); _tokens[index] = null; } return true; } @SuppressWarnings(\"resource\") public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException {"
      },
      {
        "txt": "for (int i = 0, len = _properties.length; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { TokenBuffer tokens = _tokens[i]; if (tokens == null) { continue; } JsonToken t = tokens.firstToken(); if (t != null && t.isScalarValue()) { JsonParser buffered = tokens.asParser(p);"
      },
      {
        "txt": "buffered.nextToken(); SettableBeanProperty extProp = _properties[i].getProperty(); Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); if (result != null) { extProp.set(bean, result); continue; } if (!_properties[i].hasDefaultType()) { throw ctxt.mappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName());"
      },
      {
        "txt": "} typeId = _properties[i].getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty(); throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } _deserializeAndSet(p, ctxt, bean, i, typeId); }"
      },
      {
        "txt": "return bean; } public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException { final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i];"
      },
      {
        "txt": "if (typeId == null) { if (_tokens[i] == null) { continue; } if (!_properties[i].hasDefaultType()) { throw ctxt.mappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } typeId = _properties[i].getDefaultTypeId(); } else if (_tokens[i] == null) {"
      },
      {
        "txt": "SettableBeanProperty prop = _properties[i].getProperty(); throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(jp, ctxt, i, typeId); } for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (creator.findCreatorProperty(prop.getName()) != null) { buffer.assignParameter(prop, values[i]);"
      },
      {
        "txt": "} } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (creator.findCreatorProperty(prop.getName()) == null) { prop.set(bean, values[i]); } } return bean;"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); <extra_id_0> TokenBuffer merged = new TokenBuffer(p); merged.writeStartArray(); merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p);"
      },
      {
        "txt": "merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); return _properties[index].getProperty().deserialize(mp, ctxt); } @SuppressWarnings(\"resource\") protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p);"
      },
      {
        "txt": "JsonToken t = p2.nextToken(); TokenBuffer merged = new TokenBuffer(p); merged.writeStartArray(); merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean); }"
      },
      {
        "txt": "public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) { Integer index = _properties.size(); _properties.add(new ExtTypedProperty(property, typeDeser)); _nameToPropertyIndex.put(property.getName(), index); _nameToPropertyIndex.put(typeDeser.getPropertyName(), index);"
      },
      {
        "txt": "} public ExternalTypeHandler build() { return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null); } } private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer;"
      },
      {
        "txt": "private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) { _property = property; _typeDeserializer = typeDeser; _typePropertyName = typeDeser.getPropertyName(); } public boolean hasTypePropertyName(String n) { return n.equals(_typePropertyName); }"
      },
      {
        "txt": "public boolean hasDefaultType() { return _typeDeserializer.getDefaultImpl() != null; } public String getDefaultTypeId() { Class<?> defaultType = _typeDeserializer.getDefaultImpl(); if (defaultType == null) { return null; } return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); }"
      },
      {
        "txt": "public String getTypePropertyName() { return _typePropertyName; } public SettableBeanProperty getProperty() { return _property; } }"
      }
    ]
  },
  {
    "id": 1455,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ExternalTypeHandler.java",
    "start-bug-line": 251,
    "end-bug-line": 251,
    "bug": "",
    "fix": "if (t == JsonToken.VALUE_NULL) { _properties[index].getProperty().set(bean, null); return; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.SettableBeanProperty; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.TokenBuffer; public class ExternalTypeHandler { private final ExtTypedProperty[] _properties; private final HashMap<String, Integer> _nameToPropertyIndex; private final String[] _typeIds; private final TokenBuffer[] _tokens; protected ExternalTypeHandler(ExtTypedProperty[] properties,"
      },
      {
        "txt": "HashMap<String, Integer> nameToPropertyIndex, String[] typeIds, TokenBuffer[] tokens) { _properties = properties; _nameToPropertyIndex = nameToPropertyIndex; _typeIds = typeIds; _tokens = tokens; } protected ExternalTypeHandler(ExternalTypeHandler h) {"
      },
      {
        "txt": "_properties = h._properties; _nameToPropertyIndex = h._nameToPropertyIndex; int len = _properties.length; _typeIds = new String[len]; _tokens = new TokenBuffer[len]; } public ExternalTypeHandler start() { return new ExternalTypeHandler(this); } public boolean handleTypePropertyValue(JsonParser jp, DeserializationContext ctxt,"
      },
      {
        "txt": "String propName, Object bean) throws IOException { Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue(); ExtTypedProperty prop = _properties[index]; if (!prop.hasTypePropertyName(propName)) {"
      },
      {
        "txt": "return false; } String typeId = jp.getText(); boolean canDeserialize = (bean != null) && (_tokens[index] != null); if (canDeserialize) { _deserializeAndSet(jp, ctxt, bean, index, typeId); _tokens[index] = null; } else { _typeIds[index] = typeId; }"
      },
      {
        "txt": "return true; } public boolean handlePropertyValue(JsonParser jp, DeserializationContext ctxt, String propName, Object bean) throws IOException { Integer I = _nameToPropertyIndex.get(propName); if (I == null) { return false; } int index = I.intValue();"
      },
      {
        "txt": "ExtTypedProperty prop = _properties[index]; boolean canDeserialize; if (prop.hasTypePropertyName(propName)) { _typeIds[index] = jp.getText(); jp.skipChildren(); canDeserialize = (bean != null) && (_tokens[index] != null); } else { @SuppressWarnings(\"resource\") TokenBuffer tokens = new TokenBuffer(jp); tokens.copyCurrentStructure(jp);"
      },
      {
        "txt": "_tokens[index] = tokens; canDeserialize = (bean != null) && (_typeIds[index] != null); } if (canDeserialize) { String typeId = _typeIds[index]; _typeIds[index] = null; _deserializeAndSet(jp, ctxt, bean, index, typeId); _tokens[index] = null; } return true;"
      },
      {
        "txt": "} @SuppressWarnings(\"resource\") public Object complete(JsonParser p, DeserializationContext ctxt, Object bean) throws IOException { for (int i = 0, len = _properties.length; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { TokenBuffer tokens = _tokens[i]; if (tokens == null) {"
      },
      {
        "txt": "continue; } JsonToken t = tokens.firstToken(); if (t != null && t.isScalarValue()) { JsonParser buffered = tokens.asParser(p); buffered.nextToken(); SettableBeanProperty extProp = _properties[i].getProperty(); Object result = TypeDeserializer.deserializeIfNatural(buffered, ctxt, extProp.getType()); if (result != null) { extProp.set(bean, result);"
      },
      {
        "txt": "continue; } if (!_properties[i].hasDefaultType()) { throw ctxt.mappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } typeId = _properties[i].getDefaultTypeId(); } } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty();"
      },
      {
        "txt": "throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } _deserializeAndSet(p, ctxt, bean, i, typeId); } return bean; } public Object complete(JsonParser jp, DeserializationContext ctxt, PropertyValueBuffer buffer, PropertyBasedCreator creator) throws IOException"
      },
      {
        "txt": "{ final int len = _properties.length; Object[] values = new Object[len]; for (int i = 0; i < len; ++i) { String typeId = _typeIds[i]; if (typeId == null) { if (_tokens[i] == null) { continue; } if (!_properties[i].hasDefaultType()) {"
      },
      {
        "txt": "throw ctxt.mappingException(\"Missing external type id property '%s'\", _properties[i].getTypePropertyName()); } typeId = _properties[i].getDefaultTypeId(); } else if (_tokens[i] == null) { SettableBeanProperty prop = _properties[i].getProperty(); throw ctxt.mappingException(\"Missing property '%s' for external type id '%s'\", prop.getName(), _properties[i].getTypePropertyName()); } values[i] = _deserialize(jp, ctxt, i, typeId);"
      },
      {
        "txt": "} for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty(); if (creator.findCreatorProperty(prop.getName()) != null) { buffer.assignParameter(prop, values[i]); } } Object bean = creator.build(ctxt, buffer); for (int i = 0; i < len; ++i) { SettableBeanProperty prop = _properties[i].getProperty();"
      },
      {
        "txt": "if (creator.findCreatorProperty(prop.getName()) == null) { prop.set(bean, values[i]); } } return bean; } @SuppressWarnings(\"resource\") protected final Object _deserialize(JsonParser p, DeserializationContext ctxt, int index, String typeId) throws IOException {"
      },
      {
        "txt": "JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); TokenBuffer merged = new TokenBuffer(p); merged.writeStartArray(); merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken(); return _properties[index].getProperty().deserialize(mp, ctxt);"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") protected final void _deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object bean, int index, String typeId) throws IOException { JsonParser p2 = _tokens[index].asParser(p); JsonToken t = p2.nextToken(); <extra_id_0> merged.writeStartArray(); merged.writeString(typeId); merged.copyCurrentStructure(p2); merged.writeEndArray(); JsonParser mp = merged.asParser(p); mp.nextToken();"
      },
      {
        "txt": "JsonParser mp = merged.asParser(p); mp.nextToken(); _properties[index].getProperty().deserializeAndSet(mp, ctxt, bean); } public static class Builder { private final ArrayList<ExtTypedProperty> _properties = new ArrayList<ExtTypedProperty>(); private final HashMap<String, Integer> _nameToPropertyIndex = new HashMap<String, Integer>(); public void addExternal(SettableBeanProperty property, TypeDeserializer typeDeser) {"
      },
      {
        "txt": "Integer index = _properties.size(); _properties.add(new ExtTypedProperty(property, typeDeser)); _nameToPropertyIndex.put(property.getName(), index); _nameToPropertyIndex.put(typeDeser.getPropertyName(), index); } public ExternalTypeHandler build() { return new ExternalTypeHandler(_properties.toArray(new ExtTypedProperty[_properties.size()]), _nameToPropertyIndex, null, null); } }"
      },
      {
        "txt": "private final static class ExtTypedProperty { private final SettableBeanProperty _property; private final TypeDeserializer _typeDeserializer; private final String _typePropertyName; public ExtTypedProperty(SettableBeanProperty property, TypeDeserializer typeDeser) { _property = property; _typeDeserializer = typeDeser; _typePropertyName = typeDeser.getPropertyName();"
      },
      {
        "txt": "} public boolean hasTypePropertyName(String n) { return n.equals(_typePropertyName); } public boolean hasDefaultType() { return _typeDeserializer.getDefaultImpl() != null; } public String getDefaultTypeId() { Class<?> defaultType = _typeDeserializer.getDefaultImpl(); if (defaultType == null) {"
      },
      {
        "txt": "return null; } return _typeDeserializer.getTypeIdResolver().idFromValueAndType(null, defaultType); } public String getTypePropertyName() { return _typePropertyName; } public SettableBeanProperty getProperty() { return _property; } }"
      }
    ]
  }
]
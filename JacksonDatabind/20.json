[
  {
    "id": 1401,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
    "start-bug-line": 4,
    "end-bug-line": 4,
    "bug": "",
    "fix": "import com.fasterxml.jackson.annotation.JsonIgnore;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.node; import com.fasterxml.jackson.annotation.JsonAutoDetect; <extra_id_0> import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import java.io.IOException; import java.math.BigDecimal; import java.util.ArrayList;"
      },
      {
        "txt": "import java.math.BigDecimal; import java.util.ArrayList; import java.util.Arrays; import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; public class ObjectNode extends ContainerNode<ObjectNode>"
      },
      {
        "txt": "{ protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc) { super(nc); _children = new LinkedHashMap<String, JsonNode>(); } public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids) { super(nc); _children = kids; }"
      },
      {
        "txt": "@Override protected JsonNode _at(JsonPointer ptr) { return get(ptr.getMatchingProperty()); } @SuppressWarnings(\"unchecked\") @Override public ObjectNode deepCopy() { ObjectNode ret = new ObjectNode(_nodeFactory); for (Map.Entry<String, JsonNode> entry: _children.entrySet())"
      },
      {
        "txt": "ret._children.put(entry.getKey(), entry.getValue().deepCopy()); return ret; } @Override public JsonNodeType getNodeType() { return JsonNodeType.OBJECT; } @Override public JsonToken asToken() { return JsonToken.START_OBJECT; } @Override public int size() {"
      },
      {
        "txt": "return _children.size(); } @Override public Iterator<JsonNode> elements() { return _children.values().iterator(); } @Override public JsonNode get(int index) { return null; } @Override public JsonNode get(String fieldName) {"
      },
      {
        "txt": "return _children.get(fieldName); } @Override public Iterator<String> fieldNames() { return _children.keySet().iterator(); } @Override public JsonNode path(int index) { return MissingNode.getInstance(); }"
      },
      {
        "txt": "@Override public JsonNode path(String fieldName) { JsonNode n = _children.get(fieldName); if (n != null) { return n; } return MissingNode.getInstance(); } @Override"
      },
      {
        "txt": "public Iterator<Map.Entry<String, JsonNode>> fields() { return _children.entrySet().iterator(); } @Override public ObjectNode with(String propertyName) { JsonNode n = _children.get(propertyName); if (n != null) { if (n instanceof ObjectNode) { return (ObjectNode) n; }"
      },
      {
        "txt": "throw new UnsupportedOperationException(\"Property '\" + propertyName + \"' has value that is not of type ObjectNode (but \" + n .getClass().getName() + \")\"); } ObjectNode result = objectNode(); _children.put(propertyName, result); return result; } @Override public ArrayNode withArray(String propertyName)"
      },
      {
        "txt": "{ JsonNode n = _children.get(propertyName); if (n != null) { if (n instanceof ArrayNode) { return (ArrayNode) n; } throw new UnsupportedOperationException(\"Property '\" + propertyName + \"' has value that is not of type ArrayNode (but \" + n .getClass().getName() + \")\"); }"
      },
      {
        "txt": "ArrayNode result = arrayNode(); _children.put(propertyName, result); return result; } @Override public JsonNode findValue(String fieldName) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { return entry.getValue();"
      },
      {
        "txt": "} JsonNode value = entry.getValue().findValue(fieldName); if (value != null) { return value; } } return null; } @Override public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar)"
      },
      {
        "txt": "{ for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { if (foundSoFar == null) { foundSoFar = new ArrayList<JsonNode>(); } foundSoFar.add(entry.getValue()); } else { // only add children if parent not added foundSoFar = entry.getValue().findValues(fieldName, foundSoFar); }"
      },
      {
        "txt": "} return foundSoFar; } @Override public List<String> findValuesAsText(String fieldName, List<String> foundSoFar) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { if (foundSoFar == null) { foundSoFar = new ArrayList<String>();"
      },
      {
        "txt": "} foundSoFar.add(entry.getValue().asText()); } else { // only add children if parent not added foundSoFar = entry.getValue().findValuesAsText(fieldName, foundSoFar); } } return foundSoFar; } @Override"
      },
      {
        "txt": "public ObjectNode findParent(String fieldName) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { return this; } JsonNode value = entry.getValue().findParent(fieldName); if (value != null) { return (ObjectNode) value; }"
      },
      {
        "txt": "} return null; } @Override public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { if (foundSoFar == null) { foundSoFar = new ArrayList<JsonNode>();"
      },
      {
        "txt": "} foundSoFar.add(this); } else { // only add children if parent not added foundSoFar = entry.getValue() .findParents(fieldName, foundSoFar); } } return foundSoFar; } @Override"
      },
      {
        "txt": "public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException { jg.writeStartObject(); for (Map.Entry<String, JsonNode> en : _children.entrySet()) { jg.writeFieldName(en.getKey()); ((BaseJsonNode) en.getValue()).serialize(jg, provider); } jg.writeEndObject(); }"
      },
      {
        "txt": "@Override public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer) throws IOException, JsonProcessingException { typeSer.writeTypePrefixForObject(this, jg); for (Map.Entry<String, JsonNode> en : _children.entrySet()) { jg.writeFieldName(en.getKey()); ((BaseJsonNode) en.getValue()).serialize(jg, provider); }"
      },
      {
        "txt": "typeSer.writeTypeSuffixForObject(this, jg); } public JsonNode set(String fieldName, JsonNode value) { if (value == null) { value = nullNode(); } _children.put(fieldName, value); return this; }"
      },
      {
        "txt": "public JsonNode setAll(Map<String,? extends JsonNode> properties) { for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) { JsonNode n = en.getValue(); if (n == null) { n = nullNode(); } _children.put(en.getKey(), n); } return this;"
      },
      {
        "txt": "} public JsonNode setAll(ObjectNode other) { _children.putAll(other._children); return this; } public JsonNode replace(String fieldName, JsonNode value) { if (value == null) { // let's not store 'raw' nulls but nodes value = nullNode();"
      },
      {
        "txt": "} return _children.put(fieldName, value); } public JsonNode without(String fieldName) { _children.remove(fieldName); return this; } public ObjectNode without(Collection<String> fieldNames) {"
      },
      {
        "txt": "_children.keySet().removeAll(fieldNames); return this; } @Deprecated public JsonNode put(String fieldName, JsonNode value) { if (value == null) { // let's not store 'raw' nulls but nodes value = nullNode(); } return _children.put(fieldName, value);"
      },
      {
        "txt": "} public JsonNode remove(String fieldName) { return _children.remove(fieldName); } public ObjectNode remove(Collection<String> fieldNames) { _children.keySet().removeAll(fieldNames); return this; } @Override"
      },
      {
        "txt": "public ObjectNode removeAll() { _children.clear(); return this; } @Deprecated public JsonNode putAll(Map<String,? extends JsonNode> properties) { return setAll(properties); } @Deprecated"
      },
      {
        "txt": "public JsonNode putAll(ObjectNode other) { return setAll(other); } public ObjectNode retain(Collection<String> fieldNames) { _children.keySet().retainAll(fieldNames); return this; } public ObjectNode retain(String... fieldNames) { return retain(Arrays.asList(fieldNames));"
      },
      {
        "txt": "} public ArrayNode putArray(String fieldName) { ArrayNode n = arrayNode(); _put(fieldName, n); return n; } public ObjectNode putObject(String fieldName) { ObjectNode n = objectNode();"
      },
      {
        "txt": "_put(fieldName, n); return n; } public ObjectNode putPOJO(String fieldName, Object pojo) { return _put(fieldName, pojoNode(pojo)); } public ObjectNode putNull(String fieldName) { _children.put(fieldName, nullNode()); return this;"
      },
      {
        "txt": "} public ObjectNode put(String fieldName, short v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Short v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.shortValue())); } public ObjectNode put(String fieldName, int v) { return _put(fieldName, numberNode(v));"
      },
      {
        "txt": "} public ObjectNode put(String fieldName, Integer v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.intValue())); } public ObjectNode put(String fieldName, long v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Long v) { return _put(fieldName, (v == null) ? nullNode()"
      },
      {
        "txt": ": numberNode(v.longValue())); } public ObjectNode put(String fieldName, float v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Float v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.floatValue())); } public ObjectNode put(String fieldName, double v) {"
      },
      {
        "txt": "return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Double v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.doubleValue())); } public ObjectNode put(String fieldName, BigDecimal v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v)); }"
      },
      {
        "txt": "public ObjectNode put(String fieldName, String v) { return _put(fieldName, (v == null) ? nullNode() : textNode(v)); } public ObjectNode put(String fieldName, boolean v) { return _put(fieldName, booleanNode(v)); } public ObjectNode put(String fieldName, Boolean v) { return _put(fieldName, (v == null) ? nullNode() : booleanNode(v.booleanValue()));"
      },
      {
        "txt": "} public ObjectNode put(String fieldName, byte[] v) { return _put(fieldName, (v == null) ? nullNode() : binaryNode(v)); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false;"
      },
      {
        "txt": "if (o instanceof ObjectNode) { return _childrenEqual((ObjectNode) o); } return false; } protected boolean _childrenEqual(ObjectNode other) { return _children.equals(other._children); } @Override"
      },
      {
        "txt": "public int hashCode() { return _children.hashCode(); } @Override public String toString() { StringBuilder sb = new StringBuilder(32 + (size() << 4)); sb.append(\"{\"); int count = 0;"
      },
      {
        "txt": "for (Map.Entry<String, JsonNode> en : _children.entrySet()) { if (count > 0) { sb.append(\",\"); } ++count; TextNode.appendQuoted(sb, en.getKey()); sb.append(':'); sb.append(en.getValue().toString()); } sb.append(\"}\");"
      },
      {
        "txt": "return sb.toString(); } protected ObjectNode _put(String fieldName, JsonNode value) { _children.put(fieldName, value); return this; }"
      }
    ]
  },
  {
    "id": 1402,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/node/ObjectNode.java",
    "start-bug-line": 324,
    "end-bug-line": 324,
    "bug": "",
    "fix": "@JsonIgnore // work-around for [databind#815]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.node; import com.fasterxml.jackson.annotation.JsonAutoDetect; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.JsonNode; import com.fasterxml.jackson.databind.SerializerProvider; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import java.io.IOException; import java.math.BigDecimal; import java.util.ArrayList; import java.util.Arrays;"
      },
      {
        "txt": "import java.util.Collection; import java.util.Iterator; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; public class ObjectNode extends ContainerNode<ObjectNode> { protected final Map<String, JsonNode> _children; public ObjectNode(JsonNodeFactory nc) {"
      },
      {
        "txt": "super(nc); _children = new LinkedHashMap<String, JsonNode>(); } public ObjectNode(JsonNodeFactory nc, Map<String, JsonNode> kids) { super(nc); _children = kids; } @Override protected JsonNode _at(JsonPointer ptr) { return get(ptr.getMatchingProperty());"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") @Override public ObjectNode deepCopy() { ObjectNode ret = new ObjectNode(_nodeFactory); for (Map.Entry<String, JsonNode> entry: _children.entrySet()) ret._children.put(entry.getKey(), entry.getValue().deepCopy()); return ret; }"
      },
      {
        "txt": "@Override public JsonNodeType getNodeType() { return JsonNodeType.OBJECT; } @Override public JsonToken asToken() { return JsonToken.START_OBJECT; } @Override public int size() { return _children.size(); } @Override"
      },
      {
        "txt": "public Iterator<JsonNode> elements() { return _children.values().iterator(); } @Override public JsonNode get(int index) { return null; } @Override public JsonNode get(String fieldName) { return _children.get(fieldName); } @Override"
      },
      {
        "txt": "public Iterator<String> fieldNames() { return _children.keySet().iterator(); } @Override public JsonNode path(int index) { return MissingNode.getInstance(); } @Override public JsonNode path(String fieldName) {"
      },
      {
        "txt": "JsonNode n = _children.get(fieldName); if (n != null) { return n; } return MissingNode.getInstance(); } @Override public Iterator<Map.Entry<String, JsonNode>> fields() { return _children.entrySet().iterator(); }"
      },
      {
        "txt": "@Override public ObjectNode with(String propertyName) { JsonNode n = _children.get(propertyName); if (n != null) { if (n instanceof ObjectNode) { return (ObjectNode) n; } throw new UnsupportedOperationException(\"Property '\" + propertyName + \"' has value that is not of type ObjectNode (but \" + n .getClass().getName() + \")\");"
      },
      {
        "txt": "} ObjectNode result = objectNode(); _children.put(propertyName, result); return result; } @Override public ArrayNode withArray(String propertyName) { JsonNode n = _children.get(propertyName); if (n != null) {"
      },
      {
        "txt": "if (n instanceof ArrayNode) { return (ArrayNode) n; } throw new UnsupportedOperationException(\"Property '\" + propertyName + \"' has value that is not of type ArrayNode (but \" + n .getClass().getName() + \")\"); } ArrayNode result = arrayNode(); _children.put(propertyName, result); return result;"
      },
      {
        "txt": "} @Override public JsonNode findValue(String fieldName) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { return entry.getValue(); } JsonNode value = entry.getValue().findValue(fieldName); if (value != null) {"
      },
      {
        "txt": "return value; } } return null; } @Override public List<JsonNode> findValues(String fieldName, List<JsonNode> foundSoFar) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) {"
      },
      {
        "txt": "if (foundSoFar == null) { foundSoFar = new ArrayList<JsonNode>(); } foundSoFar.add(entry.getValue()); } else { // only add children if parent not added foundSoFar = entry.getValue().findValues(fieldName, foundSoFar); } } return foundSoFar; }"
      },
      {
        "txt": "@Override public List<String> findValuesAsText(String fieldName, List<String> foundSoFar) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { if (foundSoFar == null) { foundSoFar = new ArrayList<String>(); } foundSoFar.add(entry.getValue().asText()); } else { // only add children if parent not added"
      },
      {
        "txt": "foundSoFar = entry.getValue().findValuesAsText(fieldName, foundSoFar); } } return foundSoFar; } @Override public ObjectNode findParent(String fieldName) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) {"
      },
      {
        "txt": "if (fieldName.equals(entry.getKey())) { return this; } JsonNode value = entry.getValue().findParent(fieldName); if (value != null) { return (ObjectNode) value; } } return null; }"
      },
      {
        "txt": "@Override public List<JsonNode> findParents(String fieldName, List<JsonNode> foundSoFar) { for (Map.Entry<String, JsonNode> entry : _children.entrySet()) { if (fieldName.equals(entry.getKey())) { if (foundSoFar == null) { foundSoFar = new ArrayList<JsonNode>(); } foundSoFar.add(this); } else { // only add children if parent not added"
      },
      {
        "txt": "foundSoFar = entry.getValue() .findParents(fieldName, foundSoFar); } } return foundSoFar; } @Override public void serialize(JsonGenerator jg, SerializerProvider provider) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "jg.writeStartObject(); for (Map.Entry<String, JsonNode> en : _children.entrySet()) { jg.writeFieldName(en.getKey()); ((BaseJsonNode) en.getValue()).serialize(jg, provider); } jg.writeEndObject(); } @Override public void serializeWithType(JsonGenerator jg, SerializerProvider provider, TypeSerializer typeSer)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { typeSer.writeTypePrefixForObject(this, jg); for (Map.Entry<String, JsonNode> en : _children.entrySet()) { jg.writeFieldName(en.getKey()); ((BaseJsonNode) en.getValue()).serialize(jg, provider); } typeSer.writeTypeSuffixForObject(this, jg); } public JsonNode set(String fieldName, JsonNode value)"
      },
      {
        "txt": "if (value == null) { value = nullNode(); } _children.put(fieldName, value); return this; } <extra_id_0> { for (Map.Entry<String,? extends JsonNode> en : properties.entrySet()) { JsonNode n = en.getValue(); if (n == null) { n = nullNode(); }"
      },
      {
        "txt": "n = nullNode(); } _children.put(en.getKey(), n); } return this; } public JsonNode setAll(ObjectNode other) { _children.putAll(other._children); return this;"
      },
      {
        "txt": "} public JsonNode replace(String fieldName, JsonNode value) { if (value == null) { // let's not store 'raw' nulls but nodes value = nullNode(); } return _children.put(fieldName, value); } public JsonNode without(String fieldName) {"
      },
      {
        "txt": "_children.remove(fieldName); return this; } public ObjectNode without(Collection<String> fieldNames) { _children.keySet().removeAll(fieldNames); return this; } @Deprecated public JsonNode put(String fieldName, JsonNode value)"
      },
      {
        "txt": "{ if (value == null) { // let's not store 'raw' nulls but nodes value = nullNode(); } return _children.put(fieldName, value); } public JsonNode remove(String fieldName) { return _children.remove(fieldName); } public ObjectNode remove(Collection<String> fieldNames)"
      },
      {
        "txt": "{ _children.keySet().removeAll(fieldNames); return this; } @Override public ObjectNode removeAll() { _children.clear(); return this; }"
      },
      {
        "txt": "@Deprecated public JsonNode putAll(Map<String,? extends JsonNode> properties) { return setAll(properties); } @Deprecated public JsonNode putAll(ObjectNode other) { return setAll(other); } public ObjectNode retain(Collection<String> fieldNames) {"
      },
      {
        "txt": "_children.keySet().retainAll(fieldNames); return this; } public ObjectNode retain(String... fieldNames) { return retain(Arrays.asList(fieldNames)); } public ArrayNode putArray(String fieldName) { ArrayNode n = arrayNode(); _put(fieldName, n);"
      },
      {
        "txt": "return n; } public ObjectNode putObject(String fieldName) { ObjectNode n = objectNode(); _put(fieldName, n); return n; } public ObjectNode putPOJO(String fieldName, Object pojo) { return _put(fieldName, pojoNode(pojo));"
      },
      {
        "txt": "} public ObjectNode putNull(String fieldName) { _children.put(fieldName, nullNode()); return this; } public ObjectNode put(String fieldName, short v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Short v) {"
      },
      {
        "txt": "return _put(fieldName, (v == null) ? nullNode() : numberNode(v.shortValue())); } public ObjectNode put(String fieldName, int v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Integer v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.intValue())); }"
      },
      {
        "txt": "public ObjectNode put(String fieldName, long v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Long v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.longValue())); } public ObjectNode put(String fieldName, float v) { return _put(fieldName, numberNode(v)); }"
      },
      {
        "txt": "public ObjectNode put(String fieldName, Float v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.floatValue())); } public ObjectNode put(String fieldName, double v) { return _put(fieldName, numberNode(v)); } public ObjectNode put(String fieldName, Double v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v.doubleValue()));"
      },
      {
        "txt": "} public ObjectNode put(String fieldName, BigDecimal v) { return _put(fieldName, (v == null) ? nullNode() : numberNode(v)); } public ObjectNode put(String fieldName, String v) { return _put(fieldName, (v == null) ? nullNode() : textNode(v)); } public ObjectNode put(String fieldName, boolean v) {"
      },
      {
        "txt": "return _put(fieldName, booleanNode(v)); } public ObjectNode put(String fieldName, Boolean v) { return _put(fieldName, (v == null) ? nullNode() : booleanNode(v.booleanValue())); } public ObjectNode put(String fieldName, byte[] v) { return _put(fieldName, (v == null) ? nullNode() : binaryNode(v)); }"
      },
      {
        "txt": "@Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o instanceof ObjectNode) { return _childrenEqual((ObjectNode) o); } return false; }"
      },
      {
        "txt": "protected boolean _childrenEqual(ObjectNode other) { return _children.equals(other._children); } @Override public int hashCode() { return _children.hashCode(); } @Override"
      },
      {
        "txt": "public String toString() { StringBuilder sb = new StringBuilder(32 + (size() << 4)); sb.append(\"{\"); int count = 0; for (Map.Entry<String, JsonNode> en : _children.entrySet()) { if (count > 0) { sb.append(\",\"); } ++count;"
      },
      {
        "txt": "TextNode.appendQuoted(sb, en.getKey()); sb.append(':'); sb.append(en.getValue().toString()); } sb.append(\"}\"); return sb.toString(); } protected ObjectNode _put(String fieldName, JsonNode value) { _children.put(fieldName, value);"
      },
      {
        "txt": "return this; }"
      }
    ]
  }
]
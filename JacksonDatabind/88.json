[
  {
    "id": 1724,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "start-bug-line": 58,
    "end-bug-line": 58,
    "bug": "",
    "fix": "if (!t.isTypeOrSubTypeOf(_baseType.getRawClass())) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public class ClassNameIdResolver extends TypeIdResolverBase { public ClassNameIdResolver(JavaType baseType, TypeFactory typeFactory) { super(baseType, typeFactory); } @Override public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.CLASS; } public void registerSubtype(Class<?> type, String name) { }"
      },
      {
        "txt": "@Override public String idFromValue(Object value) { return _idFrom(value, value.getClass(), _typeFactory); } @Override public String idFromValueAndType(Object value, Class<?> type) { return _idFrom(value, type, _typeFactory); } @Override public JavaType typeFromId(DatabindContext context, String id) throws IOException {"
      },
      {
        "txt": "} protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException { TypeFactory tf = ctxt.getTypeFactory(); if (id.indexOf('<') > 0) { JavaType t = tf.constructFromCanonical(id); <extra_id_0> return t; } Class<?> cls; try { cls = tf.findClass(id); } catch (ClassNotFoundException e) {"
      },
      {
        "txt": "cls = tf.findClass(id); } catch (ClassNotFoundException e) { if (ctxt instanceof DeserializationContext) { DeserializationContext dctxt = (DeserializationContext) ctxt; return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\"); } return null; } catch (Exception e) { throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e); }"
      },
      {
        "txt": "return tf.constructSpecializedType(_baseType, cls); } protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFactory) { if (Enum.class.isAssignableFrom(cls)) { if (!cls.isEnum()) { // means that it's sub-class of base enum, so: cls = cls.getSuperclass(); } } String str = cls.getName();"
      },
      {
        "txt": "if (str.startsWith(\"java.util\")) { if (value instanceof EnumSet<?>) { // Regular- and JumboEnumSet... Class<?> enumClass = ClassUtil.findEnumType((EnumSet<?>) value); str = typeFactory.constructCollectionType(EnumSet.class, enumClass).toCanonical(); } else if (value instanceof EnumMap<?,?>) { Class<?> enumClass = ClassUtil.findEnumType((EnumMap<?,?>) value); Class<?> valueClass = Object.class; str = typeFactory.constructMapType(EnumMap.class, enumClass, valueClass).toCanonical(); } else { String end = str.substring(9);"
      },
      {
        "txt": "if ((end.startsWith(\".Arrays$\") || end.startsWith(\".Collections$\")) && str.indexOf(\"List\") >= 0) { str = \"java.util.ArrayList\"; } } } else if (str.indexOf('$') >= 0) { Class<?> outer = ClassUtil.getOuterClass(cls); if (outer != null) { Class<?> staticType = _baseType.getRawClass(); if (ClassUtil.getOuterClass(staticType) == null) {"
      },
      {
        "txt": "cls = _baseType.getRawClass(); str = cls.getName(); } } } return str; } @Override public String getDescForKnownTypeIds() { return \"class name used as type id\";"
      }
    ]
  },
  {
    "id": 1725,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/ClassNameIdResolver.java",
    "start-bug-line": 59,
    "end-bug-line": 59,
    "bug": "",
    "fix": "throw new IllegalArgumentException(String.format( \"Class %s not subtype of %s\", t.getRawClass().getName(), _baseType)); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.*; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public class ClassNameIdResolver extends TypeIdResolverBase { public ClassNameIdResolver(JavaType baseType, TypeFactory typeFactory) { super(baseType, typeFactory); } @Override public JsonTypeInfo.Id getMechanism() { return JsonTypeInfo.Id.CLASS; } public void registerSubtype(Class<?> type, String name) { }"
      },
      {
        "txt": "@Override public String idFromValue(Object value) { return _idFrom(value, value.getClass(), _typeFactory); } @Override public String idFromValueAndType(Object value, Class<?> type) { return _idFrom(value, type, _typeFactory); } @Override public JavaType typeFromId(DatabindContext context, String id) throws IOException {"
      },
      {
        "txt": "} protected JavaType _typeFromId(String id, DatabindContext ctxt) throws IOException { TypeFactory tf = ctxt.getTypeFactory(); if (id.indexOf('<') > 0) { JavaType t = tf.constructFromCanonical(id); <extra_id_0> } Class<?> cls; try { cls = tf.findClass(id); } catch (ClassNotFoundException e) { if (ctxt instanceof DeserializationContext) {"
      },
      {
        "txt": "} catch (ClassNotFoundException e) { if (ctxt instanceof DeserializationContext) { DeserializationContext dctxt = (DeserializationContext) ctxt; return dctxt.handleUnknownTypeId(_baseType, id, this, \"no such class found\"); } return null; } catch (Exception e) { throw new IllegalArgumentException(\"Invalid type id '\"+id+\"' (for id type 'Id.class'): \"+e.getMessage(), e); } return tf.constructSpecializedType(_baseType, cls);"
      },
      {
        "txt": "} protected final String _idFrom(Object value, Class<?> cls, TypeFactory typeFactory) { if (Enum.class.isAssignableFrom(cls)) { if (!cls.isEnum()) { // means that it's sub-class of base enum, so: cls = cls.getSuperclass(); } } String str = cls.getName(); if (str.startsWith(\"java.util\")) {"
      },
      {
        "txt": "if (value instanceof EnumSet<?>) { // Regular- and JumboEnumSet... Class<?> enumClass = ClassUtil.findEnumType((EnumSet<?>) value); str = typeFactory.constructCollectionType(EnumSet.class, enumClass).toCanonical(); } else if (value instanceof EnumMap<?,?>) { Class<?> enumClass = ClassUtil.findEnumType((EnumMap<?,?>) value); Class<?> valueClass = Object.class; str = typeFactory.constructMapType(EnumMap.class, enumClass, valueClass).toCanonical(); } else { String end = str.substring(9); if ((end.startsWith(\".Arrays$\") || end.startsWith(\".Collections$\"))"
      },
      {
        "txt": "&& str.indexOf(\"List\") >= 0) { str = \"java.util.ArrayList\"; } } } else if (str.indexOf('$') >= 0) { Class<?> outer = ClassUtil.getOuterClass(cls); if (outer != null) { Class<?> staticType = _baseType.getRawClass(); if (ClassUtil.getOuterClass(staticType) == null) { cls = _baseType.getRawClass();"
      },
      {
        "txt": "str = cls.getName(); } } } return str; } @Override public String getDescForKnownTypeIds() { return \"class name used as type id\"; }"
      }
    ]
  }
]
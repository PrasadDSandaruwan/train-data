[
  {
    "id": 1508,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/FromStringDeserializer.java",
    "start-bug-line": 284,
    "end-bug-line": 284,
    "bug": "",
    "fix": "if (_kind == STD_LOCALE) { return Locale.ROOT; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.io.*; import java.net.InetAddress; import java.net.InetSocketAddress;"
      },
      {
        "txt": "import java.net.URI; import java.net.URL; import java.nio.charset.Charset; import java.util.Currency; import java.util.Locale; import java.util.TimeZone; import java.util.regex.Pattern; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.exc.InvalidFormatException; import com.fasterxml.jackson.databind.util.ClassUtil; @SuppressWarnings(\"serial\") public abstract class FromStringDeserializer<T> extends StdScalarDeserializer<T> { public static Class<?>[] types() { return new Class<?>[] { File.class,"
      },
      {
        "txt": "URL.class, URI.class, Class.class, JavaType.class, Currency.class, Pattern.class, Locale.class, Charset.class, TimeZone.class, InetAddress.class,"
      },
      {
        "txt": "InetSocketAddress.class, }; } protected FromStringDeserializer(Class<?> vc) { super(vc); } public static Std findDeserializer(Class<?> rawType) { int kind = 0; if (rawType == File.class) {"
      },
      {
        "txt": "kind = Std.STD_FILE; } else if (rawType == URL.class) { kind = Std.STD_URL; } else if (rawType == URI.class) { kind = Std.STD_URI; } else if (rawType == Class.class) { kind = Std.STD_CLASS; } else if (rawType == JavaType.class) { kind = Std.STD_JAVA_TYPE; } else if (rawType == Currency.class) {"
      },
      {
        "txt": "kind = Std.STD_CURRENCY; } else if (rawType == Pattern.class) { kind = Std.STD_PATTERN; } else if (rawType == Locale.class) { kind = Std.STD_LOCALE; } else if (rawType == Charset.class) { kind = Std.STD_CHARSET; } else if (rawType == TimeZone.class) { kind = Std.STD_TIME_ZONE; } else if (rawType == InetAddress.class) {"
      },
      {
        "txt": "kind = Std.STD_INET_ADDRESS; } else if (rawType == InetSocketAddress.class) { kind = Std.STD_INET_SOCKET_ADDRESS; } else { return null; } return new Std(rawType, kind); } @SuppressWarnings(\"unchecked\") @Override"
      },
      {
        "txt": "public T deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException { if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { jp.nextToken(); final T value = deserialize(jp, ctxt); if (jp.nextToken() != JsonToken.END_ARRAY) { throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\"); } return value;"
      },
      {
        "txt": "} String text = jp.getValueAsString(); if (text != null) { // has String representation if (text.length() == 0 || (text = text.trim()).length() == 0) { return _deserializeFromEmptyString(); } Exception cause = null; try { T result = _deserialize(text, ctxt); if (result != null) {"
      },
      {
        "txt": "return result; } } catch (IllegalArgumentException iae) { cause = iae; } String msg = \"not a valid textual representation\"; if (cause != null) { String m2 = cause.getMessage(); if (m2 != null) { msg = msg + \", problem: \"+m2;"
      },
      {
        "txt": "} } JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg); if (cause != null) { e.initCause(cause); } throw e; } if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT) { Object ob = jp.getEmbeddedObject();"
      },
      {
        "txt": "if (ob == null) { return null; } if (_valueClass.isAssignableFrom(ob.getClass())) { return (T) ob; } return _deserializeEmbedded(ob, ctxt); } throw ctxt.mappingException(_valueClass); }"
      },
      {
        "txt": "protected abstract T _deserialize(String value, DeserializationContext ctxt) throws IOException; protected T _deserializeEmbedded(Object ob, DeserializationContext ctxt) throws IOException { throw ctxt.mappingException(\"Don't know how to convert embedded Object of type %s into %s\", ob.getClass().getName(), _valueClass.getName()); } protected T _deserializeFromEmptyString() throws IOException { return null; } public static class Std extends FromStringDeserializer<Object> {"
      },
      {
        "txt": "private static final long serialVersionUID = 1; public final static int STD_FILE = 1; public final static int STD_URL = 2; public final static int STD_URI = 3; public final static int STD_CLASS = 4; public final static int STD_JAVA_TYPE = 5; public final static int STD_CURRENCY = 6; public final static int STD_PATTERN = 7; public final static int STD_LOCALE = 8; public final static int STD_CHARSET = 9;"
      },
      {
        "txt": "public final static int STD_TIME_ZONE = 10; public final static int STD_INET_ADDRESS = 11; public final static int STD_INET_SOCKET_ADDRESS = 12; protected final int _kind; protected Std(Class<?> valueType, int kind) { super(valueType); _kind = kind; } @Override protected Object _deserialize(String value, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ switch (_kind) { case STD_FILE: return new File(value); case STD_URL: return new URL(value); case STD_URI: return URI.create(value); case STD_CLASS: try {"
      },
      {
        "txt": "return ctxt.findClass(value); } catch (Exception e) { throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e)); } case STD_JAVA_TYPE: return ctxt.getTypeFactory().constructFromCanonical(value); case STD_CURRENCY: return Currency.getInstance(value); case STD_PATTERN: return Pattern.compile(value);"
      },
      {
        "txt": "case STD_LOCALE: { int ix = value.indexOf('_'); if (ix < 0) { // single argument return new Locale(value); } String first = value.substring(0, ix); value = value.substring(ix+1); ix = value.indexOf('_'); if (ix < 0) { // two pieces"
      },
      {
        "txt": "return new Locale(first, value); } String second = value.substring(0, ix); return new Locale(first, second, value.substring(ix+1)); } case STD_CHARSET: return Charset.forName(value); case STD_TIME_ZONE: return TimeZone.getTimeZone(value); case STD_INET_ADDRESS:"
      },
      {
        "txt": "return InetAddress.getByName(value); case STD_INET_SOCKET_ADDRESS: if (value.startsWith(\"[\")) { int i = value.lastIndexOf(']'); if (i == -1) { throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\", value, InetSocketAddress.class); } int j = value.indexOf(':', i); int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;"
      },
      {
        "txt": "return new InetSocketAddress(value.substring(0, i + 1), port); } else { int ix = value.indexOf(':'); if (ix >= 0 && value.indexOf(':', ix + 1) < 0) { int port = Integer.parseInt(value.substring(ix+1)); return new InetSocketAddress(value.substring(0, ix), port); } return new InetSocketAddress(value, 0); } }"
      },
      {
        "txt": "} @Override protected Object _deserializeFromEmptyString() throws IOException { if (_kind == STD_URI) { return URI.create(\"\"); } <extra_id_0> } } }"
      }
    ]
  }
]
[
  {
    "id": 1321,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 406,
    "end-bug-line": 407,
    "bug": "c = dateStr.charAt(len-9); if (Character.isDigit(c)) {",
    "fix": "int timeLen = len - dateStr.lastIndexOf('T') - 6; if (timeLen < 12) { // 8 for hh:mm:ss, 4 for .sss int offset = len - 5; // insertion offset, before tz-offset",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition;"
      },
      {
        "txt": "import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";"
      },
      {
        "txt": "protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"; protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"; protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE;"
      },
      {
        "txt": "static { DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"GMT\"); } private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE);"
      },
      {
        "txt": "DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone;"
      },
      {
        "txt": "protected final Locale _locale; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601; protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.4 public StdDateFormat(TimeZone tz) {"
      },
      {
        "txt": "this(tz, DEFAULT_LOCALE); } public StdDateFormat(TimeZone tz, Locale loc) { _timezone = tz; _locale = loc; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE; } public StdDateFormat withTimeZone(TimeZone tz) {"
      },
      {
        "txt": "if (tz == null) { tz = DEFAULT_TIMEZONE; } if (tz.equals(_timezone)) { return this; } return new StdDateFormat(tz, _locale); } public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) {"
      },
      {
        "txt": "return this; } return new StdDateFormat(_timezone, loc); } @Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale); } @Deprecated public static DateFormat getBlueprintISO8601Format() {"
      },
      {
        "txt": "return DATE_FORMAT_ISO8601; } @Deprecated public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc); } @Deprecated"
      },
      {
        "txt": "public static DateFormat getBlueprintRFC1123Format() { return DATE_FORMAT_RFC1123; } public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc); } @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); }"
      },
      {
        "txt": "@Override public void setTimeZone(TimeZone tz) { if (!tz.equals(_timezone)) { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; _timezone = tz; }"
      },
      {
        "txt": "} @Override public Date parse(String dateStr) throws ParseException { dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date result = parse(dateStr, pos); if (result != null) { return result; }"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) { sb.append(\"\\\", \\\"\"); } else { sb.append('\"'); } sb.append(f); } sb.append('\"');"
      },
      {
        "txt": "throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex()); } @Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" return parseAsISO8601(dateStr, pos); }"
      },
      {
        "txt": "int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } } } if (i < 0) { // all digits"
      },
      {
        "txt": "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); } } return parseAsRFC1123(dateStr, pos); } @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {"
      },
      {
        "txt": "if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); } return _formatISO8601.format(date, toAppendTo, fieldPosition); } @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) {"
      },
      {
        "txt": "str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\"; return str; } protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3))"
      },
      {
        "txt": "&& dateStr.charAt(4) == '-' ) { return true; } return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos) { int len = dateStr.length(); char c = dateStr.charAt(len-1);"
      },
      {
        "txt": "DateFormat df; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale); } } else if (c == 'Z') { df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);"
      },
      {
        "txt": "} if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon"
      },
      {
        "txt": "sb.delete(len-3, len-2); dateStr = sb.toString(); } else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\"; } len = dateStr.length(); <extra_id_0> StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-5, \".000\"); dateStr = sb.toString(); } df = _formatISO8601; if (_formatISO8601 == null) {"
      },
      {
        "txt": "df = _formatISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1; if (timeLen <= 8) { sb.append(\".000\"); }"
      },
      {
        "txt": "sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } } } return df.parse(dateStr, pos);"
      },
      {
        "txt": "} protected Date parseAsRFC1123(String dateStr, ParsePosition pos) { if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) {"
      },
      {
        "txt": "int len = str.length(); if (len >= 6) { char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false;"
      },
      {
        "txt": "} private final static DateFormat _cloneFormat(DateFormat df, String format, TimeZone tz, Locale loc) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) {"
      },
      {
        "txt": "df.setTimeZone(tz); } } return df; }"
      }
    ]
  },
  {
    "id": 1322,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 409,
    "end-bug-line": 409,
    "bug": "sb.insert(len-5, \".000\");",
    "fix": "switch (timeLen) { case 11: sb.insert(offset, '0'); break; case 10: sb.insert(offset, \"00\"); break; case 9: // is this legal? (just second fraction marker) sb.insert(offset, \"000\"); break; case 8: sb.insert(offset, \".000\"); break; case 7: // not legal to have single-digit second break; case 6: // probably not legal, but let's allow sb.insert(offset, \"00.000\"); case 5: // is legal to omit seconds sb.insert(offset, \":00.000\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat;"
      },
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"; protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";"
      },
      {
        "txt": "protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static { DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"GMT\"); }"
      },
      {
        "txt": "private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601;"
      },
      {
        "txt": "protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.4 public StdDateFormat(TimeZone tz) { this(tz, DEFAULT_LOCALE); } public StdDateFormat(TimeZone tz, Locale loc) {"
      },
      {
        "txt": "_timezone = tz; _locale = loc; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE; } public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; }"
      },
      {
        "txt": "if (tz.equals(_timezone)) { return this; } return new StdDateFormat(tz, _locale); } public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc);"
      },
      {
        "txt": "} @Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale); } @Deprecated public static DateFormat getBlueprintISO8601Format() { return DATE_FORMAT_ISO8601; } @Deprecated"
      },
      {
        "txt": "public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc); } @Deprecated public static DateFormat getBlueprintRFC1123Format() { return DATE_FORMAT_RFC1123; }"
      },
      {
        "txt": "public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc); } @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override public void setTimeZone(TimeZone tz) {"
      },
      {
        "txt": "if (!tz.equals(_timezone)) { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; _timezone = tz; } } @Override public Date parse(String dateStr) throws ParseException"
      },
      {
        "txt": "{ dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date result = parse(dateStr, pos); if (result != null) { return result; } StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) {"
      },
      {
        "txt": "sb.append(\"\\\", \\\"\"); } else { sb.append('\"'); } sb.append(f); } sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());"
      },
      {
        "txt": "} @Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" return parseAsISO8601(dateStr, pos); } int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i);"
      },
      {
        "txt": "if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } } } if (i < 0) { // all digits if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); }"
      },
      {
        "txt": "} return parseAsRFC1123(dateStr, pos); } @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); }"
      },
      {
        "txt": "return _formatISO8601.format(date, toAppendTo, fieldPosition); } @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\";"
      },
      {
        "txt": "return str; } protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true;"
      },
      {
        "txt": "} return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos) { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain;"
      },
      {
        "txt": "if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale); } } else if (c == 'Z') { df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr);"
      },
      {
        "txt": "sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString();"
      },
      {
        "txt": "dateStr += \"00\"; } len = dateStr.length(); c = dateStr.charAt(len-9); if (Character.isDigit(c)) { StringBuilder sb = new StringBuilder(dateStr); <extra_id_0> dateStr = sb.toString(); } df = _formatISO8601; if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); }"
      },
      {
        "txt": "df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1; if (timeLen <= 8) { sb.append(\".000\"); } sb.append('Z'); dateStr = sb.toString();"
      },
      {
        "txt": "df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } } } return df.parse(dateStr, pos); } protected Date parseAsRFC1123(String dateStr, ParsePosition pos)"
      },
      {
        "txt": "{ if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length(); if (len >= 6) {"
      },
      {
        "txt": "char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; } private final static DateFormat _cloneFormat(DateFormat df, String format,"
      },
      {
        "txt": "TimeZone tz, Locale loc) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz); }"
      },
      {
        "txt": "} return df; }"
      }
    ]
  },
  {
    "id": 1323,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 421,
    "end-bug-line": 421,
    "bug": "if (timeLen <= 8) {",
    "fix": "if (timeLen < 12) { // missing, or partial switch (timeLen) { case 11: sb.append('0'); case 10: sb.append('0'); case 9: sb.append('0'); break; default:",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat;"
      },
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.core.io.NumberInput; @SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"; protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";"
      },
      {
        "txt": "protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601, DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static { DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"GMT\"); }"
      },
      {
        "txt": "private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123; protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601;"
      },
      {
        "txt": "protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain; public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.4 public StdDateFormat(TimeZone tz) { this(tz, DEFAULT_LOCALE); } public StdDateFormat(TimeZone tz, Locale loc) {"
      },
      {
        "txt": "_timezone = tz; _locale = loc; } public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE; } public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; }"
      },
      {
        "txt": "if (tz.equals(_timezone)) { return this; } return new StdDateFormat(tz, _locale); } public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc);"
      },
      {
        "txt": "} @Override public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale); } @Deprecated public static DateFormat getBlueprintISO8601Format() { return DATE_FORMAT_ISO8601; } @Deprecated"
      },
      {
        "txt": "public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE); } public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc); } @Deprecated public static DateFormat getBlueprintRFC1123Format() { return DATE_FORMAT_RFC1123; }"
      },
      {
        "txt": "public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc); } @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override public void setTimeZone(TimeZone tz) {"
      },
      {
        "txt": "if (!tz.equals(_timezone)) { _formatRFC1123 = null; _formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; _timezone = tz; } } @Override public Date parse(String dateStr) throws ParseException"
      },
      {
        "txt": "{ dateStr = dateStr.trim(); ParsePosition pos = new ParsePosition(0); Date result = parse(dateStr, pos); if (result != null) { return result; } StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) {"
      },
      {
        "txt": "sb.append(\"\\\", \\\"\"); } else { sb.append('\"'); } sb.append(f); } sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex());"
      },
      {
        "txt": "} @Override public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" return parseAsISO8601(dateStr, pos); } int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i);"
      },
      {
        "txt": "if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') { break; } } } if (i < 0) { // all digits if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); }"
      },
      {
        "txt": "} return parseAsRFC1123(dateStr, pos); } @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); }"
      },
      {
        "txt": "return _formatISO8601.format(date, toAppendTo, fieldPosition); } @Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\";"
      },
      {
        "txt": "return str; } protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true;"
      },
      {
        "txt": "} return false; } protected Date parseAsISO8601(String dateStr, ParsePosition pos) { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain;"
      },
      {
        "txt": "if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale); } } else if (c == 'Z') { df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr);"
      },
      {
        "txt": "sb.insert(len-1, \".000\"); dateStr = sb.toString(); } } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString();"
      },
      {
        "txt": "} else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\"; } len = dateStr.length(); c = dateStr.charAt(len-9); if (Character.isDigit(c)) { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-5, \".000\"); dateStr = sb.toString(); }"
      },
      {
        "txt": "if (_formatISO8601 == null) { df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); } } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1; <extra_id_0> sb.append(\".000\"); } sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; if (df == null) {"
      },
      {
        "txt": "df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } } } return df.parse(dateStr, pos); } protected Date parseAsRFC1123(String dateStr, ParsePosition pos)"
      },
      {
        "txt": "{ if (_formatRFC1123 == null) { _formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length(); if (len >= 6) {"
      },
      {
        "txt": "char c = str.charAt(len-6); if (c == '+' || c == '-') return true; c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; } private final static DateFormat _cloneFormat(DateFormat df, String format,"
      },
      {
        "txt": "TimeZone tz, Locale loc) { if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz); }"
      },
      {
        "txt": "} return df; }"
      }
    ]
  },
  {
    "id": 1324,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/StdDateFormat.java",
    "start-bug-line": 423,
    "end-bug-line": 423,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.text.DateFormat; import java.text.FieldPosition; import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.*; import com.fasterxml.jackson.core.io.NumberInput;"
      },
      {
        "txt": "@SuppressWarnings(\"serial\") public class StdDateFormat extends DateFormat { protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"; protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\"; protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\"; protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\"; protected final static String[] ALL_FORMATS = new String[] { DATE_FORMAT_STR_ISO8601,"
      },
      {
        "txt": "DATE_FORMAT_STR_ISO8601_Z, DATE_FORMAT_STR_RFC1123, DATE_FORMAT_STR_PLAIN }; private final static TimeZone DEFAULT_TIMEZONE; static { DEFAULT_TIMEZONE = TimeZone.getTimeZone(\"GMT\"); } private final static Locale DEFAULT_LOCALE = Locale.US; protected final static DateFormat DATE_FORMAT_RFC1123;"
      },
      {
        "txt": "protected final static DateFormat DATE_FORMAT_ISO8601; protected final static DateFormat DATE_FORMAT_ISO8601_Z; protected final static DateFormat DATE_FORMAT_PLAIN; static { DATE_FORMAT_RFC1123 = new SimpleDateFormat(DATE_FORMAT_STR_RFC1123, DEFAULT_LOCALE); DATE_FORMAT_RFC1123.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601 = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601, DEFAULT_LOCALE); DATE_FORMAT_ISO8601.setTimeZone(DEFAULT_TIMEZONE); DATE_FORMAT_ISO8601_Z = new SimpleDateFormat(DATE_FORMAT_STR_ISO8601_Z, DEFAULT_LOCALE); DATE_FORMAT_ISO8601_Z.setTimeZone(DEFAULT_TIMEZONE);"
      },
      {
        "txt": "DATE_FORMAT_PLAIN = new SimpleDateFormat(DATE_FORMAT_STR_PLAIN, DEFAULT_LOCALE); DATE_FORMAT_PLAIN.setTimeZone(DEFAULT_TIMEZONE); } public final static StdDateFormat instance = new StdDateFormat(); protected transient TimeZone _timezone; protected final Locale _locale; protected transient DateFormat _formatRFC1123; protected transient DateFormat _formatISO8601; protected transient DateFormat _formatISO8601_z; protected transient DateFormat _formatPlain;"
      },
      {
        "txt": "public StdDateFormat() { _locale = DEFAULT_LOCALE; } @Deprecated // since 2.4 public StdDateFormat(TimeZone tz) { this(tz, DEFAULT_LOCALE); } public StdDateFormat(TimeZone tz, Locale loc) { _timezone = tz; _locale = loc;"
      },
      {
        "txt": "} public static TimeZone getDefaultTimeZone() { return DEFAULT_TIMEZONE; } public StdDateFormat withTimeZone(TimeZone tz) { if (tz == null) { tz = DEFAULT_TIMEZONE; } if (tz.equals(_timezone)) { return this;"
      },
      {
        "txt": "} return new StdDateFormat(tz, _locale); } public StdDateFormat withLocale(Locale loc) { if (loc.equals(_locale)) { return this; } return new StdDateFormat(_timezone, loc); } @Override"
      },
      {
        "txt": "public StdDateFormat clone() { return new StdDateFormat(_timezone, _locale); } @Deprecated public static DateFormat getBlueprintISO8601Format() { return DATE_FORMAT_ISO8601; } @Deprecated public static DateFormat getISO8601Format(TimeZone tz) { return getISO8601Format(tz, DEFAULT_LOCALE);"
      },
      {
        "txt": "} public static DateFormat getISO8601Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc); } @Deprecated public static DateFormat getBlueprintRFC1123Format() { return DATE_FORMAT_RFC1123; } public static DateFormat getRFC1123Format(TimeZone tz, Locale loc) { return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, tz, loc);"
      },
      {
        "txt": "} @Deprecated public static DateFormat getRFC1123Format(TimeZone tz) { return getRFC1123Format(tz, DEFAULT_LOCALE); } @Override public void setTimeZone(TimeZone tz) { if (!tz.equals(_timezone)) { _formatRFC1123 = null;"
      },
      {
        "txt": "_formatISO8601 = null; _formatISO8601_z = null; _formatPlain = null; _timezone = tz; } } @Override public Date parse(String dateStr) throws ParseException { dateStr = dateStr.trim();"
      },
      {
        "txt": "ParsePosition pos = new ParsePosition(0); Date result = parse(dateStr, pos); if (result != null) { return result; } StringBuilder sb = new StringBuilder(); for (String f : ALL_FORMATS) { if (sb.length() > 0) { sb.append(\"\\\", \\\"\"); } else {"
      },
      {
        "txt": "sb.append('\"'); } sb.append(f); } sb.append('\"'); throw new ParseException (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\", dateStr, sb.toString()), pos.getErrorIndex()); } @Override"
      },
      {
        "txt": "public Date parse(String dateStr, ParsePosition pos) { if (looksLikeISO8601(dateStr)) { // also includes \"plain\" return parseAsISO8601(dateStr, pos); } int i = dateStr.length(); while (--i >= 0) { char ch = dateStr.charAt(i); if (ch < '0' || ch > '9') { if (i > 0 || ch != '-') {"
      },
      {
        "txt": "break; } } } if (i < 0) { // all digits if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)) { return new Date(Long.parseLong(dateStr)); } } return parseAsRFC1123(dateStr, pos);"
      },
      {
        "txt": "} @Override public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) { if (_formatISO8601 == null) { _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, _timezone, _locale); } return _formatISO8601.format(date, toAppendTo, fieldPosition); }"
      },
      {
        "txt": "@Override public String toString() { String str = \"DateFormat \"+getClass().getName(); TimeZone tz = _timezone; if (tz != null) { str += \" (timezone: \"+tz+\")\"; } str += \"(locale: \"+_locale+\")\"; return str; }"
      },
      {
        "txt": "protected boolean looksLikeISO8601(String dateStr) { if (dateStr.length() >= 5 && Character.isDigit(dateStr.charAt(0)) && Character.isDigit(dateStr.charAt(3)) && dateStr.charAt(4) == '-' ) { return true; } return false;"
      },
      {
        "txt": "} protected Date parseAsISO8601(String dateStr, ParsePosition pos) { int len = dateStr.length(); char c = dateStr.charAt(len-1); DateFormat df; if (len <= 10 && Character.isDigit(c)) { df = _formatPlain; if (df == null) { df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, DATE_FORMAT_STR_PLAIN, _timezone, _locale);"
      },
      {
        "txt": "} } else if (c == 'Z') { df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } if (dateStr.charAt(len-4) == ':') { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-1, \".000\"); dateStr = sb.toString();"
      },
      {
        "txt": "} } else { if (hasTimeZone(dateStr)) { c = dateStr.charAt(len-3); if (c == ':') { // remove optional colon StringBuilder sb = new StringBuilder(dateStr); sb.delete(len-3, len-2); dateStr = sb.toString(); } else if (c == '+' || c == '-') { // missing minutes dateStr += \"00\";"
      },
      {
        "txt": "} len = dateStr.length(); c = dateStr.charAt(len-9); if (Character.isDigit(c)) { StringBuilder sb = new StringBuilder(dateStr); sb.insert(len-5, \".000\"); dateStr = sb.toString(); } df = _formatISO8601; if (_formatISO8601 == null) {"
      },
      {
        "txt": "} } else { StringBuilder sb = new StringBuilder(dateStr); int timeLen = len - dateStr.lastIndexOf('T') - 1; if (timeLen <= 8) { sb.append(\".000\"); <extra_id_0> sb.append('Z'); dateStr = sb.toString(); df = _formatISO8601_z; if (df == null) { df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale);"
      },
      {
        "txt": "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, DATE_FORMAT_STR_ISO8601_Z, _timezone, _locale); } } } return df.parse(dateStr, pos); } protected Date parseAsRFC1123(String dateStr, ParsePosition pos) { if (_formatRFC1123 == null) {"
      },
      {
        "txt": "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123, _timezone, _locale); } return _formatRFC1123.parse(dateStr, pos); } private final static boolean hasTimeZone(String str) { int len = str.length(); if (len >= 6) { char c = str.charAt(len-6); if (c == '+' || c == '-') return true;"
      },
      {
        "txt": "c = str.charAt(len-5); if (c == '+' || c == '-') return true; c = str.charAt(len-3); if (c == '+' || c == '-') return true; } return false; } private final static DateFormat _cloneFormat(DateFormat df, String format, TimeZone tz, Locale loc) {"
      },
      {
        "txt": "if (!loc.equals(DEFAULT_LOCALE)) { df = new SimpleDateFormat(format, loc); df.setTimeZone((tz == null) ? DEFAULT_TIMEZONE : tz); } else { df = (DateFormat) df.clone(); if (tz != null) { df.setTimeZone(tz); } } return df;"
      }
    ]
  }
]
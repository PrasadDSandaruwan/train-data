[
  {
    "id": 1538,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "start-bug-line": 184,
    "end-bug-line": 184,
    "bug": "",
    "fix": "if (!type.hasGenericTypes()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.Map; import java.util.concurrent.ConcurrentHashMap;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class TypeDeserializerBase extends TypeDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1; protected final TypeIdResolver _idResolver; protected final JavaType _baseType; protected final BeanProperty _property; protected final JavaType _defaultImpl;"
      },
      {
        "txt": "protected final String _typePropertyName; protected final boolean _typeIdVisible; protected final Map<String,JsonDeserializer<Object>> _deserializers; protected JsonDeserializer<Object> _defaultImplDeserializer; protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl) { _baseType = baseType; _idResolver = idRes; _typePropertyName = (typePropertyName == null) ? \"\" : typePropertyName;"
      },
      {
        "txt": "_typeIdVisible = typeIdVisible; _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 2); _defaultImpl = defaultImpl; _property = null; } protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property) { _baseType = src._baseType; _idResolver = src._idResolver; _typePropertyName = src._typePropertyName;"
      },
      {
        "txt": "_typeIdVisible = src._typeIdVisible; _deserializers = src._deserializers; _defaultImpl = src._defaultImpl; _defaultImplDeserializer = src._defaultImplDeserializer; _property = property; } @Override public abstract TypeDeserializer forProperty(BeanProperty prop); @Override public abstract JsonTypeInfo.As getTypeInclusion();"
      },
      {
        "txt": "public String baseTypeName() { return _baseType.getRawClass().getName(); } @Override public final String getPropertyName() { return _typePropertyName; } @Override public TypeIdResolver getTypeIdResolver() { return _idResolver; } @Override public Class<?> getDefaultImpl() { return (_defaultImpl == null) ? null : _defaultImpl.getRawClass(); } @Override"
      },
      {
        "txt": "public String toString() { StringBuilder sb = new StringBuilder(); sb.append('[').append(getClass().getName()); sb.append(\"; base-type:\").append(_baseType); sb.append(\"; id-resolver: \").append(_idResolver); sb.append(']'); return sb.toString(); } protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt,"
      },
      {
        "txt": "String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType); if (actual == null) { // what should this be taken to mean?"
      },
      {
        "txt": "} deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { <extra_id_0> } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser;"
      },
      {
        "txt": "} return deser; } protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException { if (_defaultImpl == null) { if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return NullifyingDeserializer.instance; } return null;"
      },
      {
        "txt": "} Class<?> raw = _defaultImpl.getRawClass(); if (ClassUtil.isBogusClass(raw)) { return NullifyingDeserializer.instance; } synchronized (_defaultImpl) { if (_defaultImplDeserializer == null) { _defaultImplDeserializer = ctxt.findContextualValueDeserializer( _defaultImpl, _property); }"
      },
      {
        "txt": "return _defaultImplDeserializer; } } @Deprecated protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException { return _deserializeWithNativeTypeId(jp, ctxt, jp.getTypeId()); } protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException {"
      },
      {
        "txt": "JsonDeserializer<Object> deser; if (typeId == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { ctxt.reportMappingException(\"No (native) type id found when one was expected for polymorphic type handling\"); return null; } } else { String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId); deser = _findDeserializer(ctxt, typeIdStr);"
      },
      {
        "txt": "} return deser.deserialize(jp, ctxt); } protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId, TypeIdResolver idResolver, JavaType baseType) throws IOException { String extraDesc; if (idResolver instanceof TypeIdResolverBase) { extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds();"
      },
      {
        "txt": "if (extraDesc == null) { extraDesc = \"known type ids are not statically known\"; } else { extraDesc = \"known type ids = \" + extraDesc; } } else { extraDesc = null; } return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc); }"
      }
    ]
  },
  {
    "id": 1539,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "start-bug-line": 185,
    "end-bug-line": 185,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.annotation.JsonTypeInfo;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public abstract class TypeDeserializerBase extends TypeDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1; protected final TypeIdResolver _idResolver; protected final JavaType _baseType; protected final BeanProperty _property; protected final JavaType _defaultImpl; protected final String _typePropertyName;"
      },
      {
        "txt": "protected final boolean _typeIdVisible; protected final Map<String,JsonDeserializer<Object>> _deserializers; protected JsonDeserializer<Object> _defaultImplDeserializer; protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl) { _baseType = baseType; _idResolver = idRes; _typePropertyName = (typePropertyName == null) ? \"\" : typePropertyName; _typeIdVisible = typeIdVisible;"
      },
      {
        "txt": "_deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 2); _defaultImpl = defaultImpl; _property = null; } protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property) { _baseType = src._baseType; _idResolver = src._idResolver; _typePropertyName = src._typePropertyName; _typeIdVisible = src._typeIdVisible;"
      },
      {
        "txt": "_deserializers = src._deserializers; _defaultImpl = src._defaultImpl; _defaultImplDeserializer = src._defaultImplDeserializer; _property = property; } @Override public abstract TypeDeserializer forProperty(BeanProperty prop); @Override public abstract JsonTypeInfo.As getTypeInclusion(); public String baseTypeName() { return _baseType.getRawClass().getName(); }"
      },
      {
        "txt": "@Override public final String getPropertyName() { return _typePropertyName; } @Override public TypeIdResolver getTypeIdResolver() { return _idResolver; } @Override public Class<?> getDefaultImpl() { return (_defaultImpl == null) ? null : _defaultImpl.getRawClass(); } @Override public String toString()"
      },
      {
        "txt": "{ StringBuilder sb = new StringBuilder(); sb.append('[').append(getClass().getName()); sb.append(\"; base-type:\").append(_baseType); sb.append(\"; id-resolver: \").append(_idResolver); sb.append(']'); return sb.toString(); } protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException"
      },
      {
        "txt": "{ JsonDeserializer<Object> deser = _deserializers.get(typeId); if (deser == null) { JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId, _idResolver, _baseType); if (actual == null) { // what should this be taken to mean? return null;"
      },
      {
        "txt": "deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); <extra_id_0> deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); } return deser; }"
      },
      {
        "txt": "return deser; } protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException { if (_defaultImpl == null) { if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return NullifyingDeserializer.instance; } return null; }"
      },
      {
        "txt": "Class<?> raw = _defaultImpl.getRawClass(); if (ClassUtil.isBogusClass(raw)) { return NullifyingDeserializer.instance; } synchronized (_defaultImpl) { if (_defaultImplDeserializer == null) { _defaultImplDeserializer = ctxt.findContextualValueDeserializer( _defaultImpl, _property); } return _defaultImplDeserializer;"
      },
      {
        "txt": "} } @Deprecated protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException { return _deserializeWithNativeTypeId(jp, ctxt, jp.getTypeId()); } protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException { JsonDeserializer<Object> deser;"
      },
      {
        "txt": "if (typeId == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { ctxt.reportMappingException(\"No (native) type id found when one was expected for polymorphic type handling\"); return null; } } else { String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId); deser = _findDeserializer(ctxt, typeIdStr); }"
      },
      {
        "txt": "return deser.deserialize(jp, ctxt); } protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId, TypeIdResolver idResolver, JavaType baseType) throws IOException { String extraDesc; if (idResolver instanceof TypeIdResolverBase) { extraDesc = ((TypeIdResolverBase) idResolver).getDescForKnownTypeIds(); if (extraDesc == null) {"
      },
      {
        "txt": "extraDesc = \"known type ids are not statically known\"; } else { extraDesc = \"known type ids = \" + extraDesc; } } else { extraDesc = null; } return ctxt.handleUnknownTypeId(_baseType, typeId, idResolver, extraDesc); }"
      }
    ]
  }
]
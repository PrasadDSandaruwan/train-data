[
  {
    "id": 1525,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java",
    "start-bug-line": 50,
    "end-bug-line": 50,
    "bug": "",
    "fix": "if (id == null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.impl; import java.io.IOException; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.SerializableString; import com.fasterxml.jackson.databind.SerializerProvider; public final class WritableObjectId { public final ObjectIdGenerator<?> generator; public Object id;"
      },
      {
        "txt": "protected boolean idWritten = false; public WritableObjectId(ObjectIdGenerator<?> generator) { this.generator = generator; } public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException { if ((id != null) && (idWritten || w.alwaysAsId)) { if (gen.canWriteObjectId()) { gen.writeObjectRef(String.valueOf(id)); } else {"
      },
      {
        "txt": "} return true; } return false; } public Object generateId(Object forPojo) { <extra_id_0> return id; } public void writeAsField(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException { idWritten = true;"
      },
      {
        "txt": "{ idWritten = true; if (gen.canWriteObjectId()) { gen.writeObjectId(String.valueOf(id)); return; } SerializableString name = w.propertyName; if (name != null) { gen.writeFieldName(name); w.serializer.serialize(id, gen, provider);"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 1526,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/impl/WritableObjectId.java",
    "start-bug-line": 51,
    "end-bug-line": 51,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.SerializableString; import com.fasterxml.jackson.databind.SerializerProvider; public final class WritableObjectId { public final ObjectIdGenerator<?> generator; public Object id; protected boolean idWritten = false;"
      },
      {
        "txt": "public WritableObjectId(ObjectIdGenerator<?> generator) { this.generator = generator; } public boolean writeAsId(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException { if ((id != null) && (idWritten || w.alwaysAsId)) { if (gen.canWriteObjectId()) { gen.writeObjectRef(String.valueOf(id)); } else { w.serializer.serialize(id, gen, provider);"
      },
      {
        "txt": "return true; } return false; } public Object generateId(Object forPojo) { id = generator.generateId(forPojo); <extra_id_0> } public void writeAsField(JsonGenerator gen, SerializerProvider provider, ObjectIdWriter w) throws IOException { idWritten = true; if (gen.canWriteObjectId()) {"
      },
      {
        "txt": "idWritten = true; if (gen.canWriteObjectId()) { gen.writeObjectId(String.valueOf(id)); return; } SerializableString name = w.propertyName; if (name != null) { gen.writeFieldName(name); w.serializer.serialize(id, gen, provider); }"
      }
    ]
  }
]
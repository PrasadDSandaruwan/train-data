[
  {
    "id": 1735,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "start-bug-line": 23,
    "end-bug-line": 23,
    "bug": "",
    "fix": "protected final static String PREFIX_C3P0 = \"com.mchange.v2.c3p0.\";",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.util.Collections; import java.util.HashSet;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; public class SubTypeValidator { protected final static String PREFIX_SPRING = \"org.springframework.\"; <extra_id_0> protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES; static { Set<String> s = new HashSet<String>(); s.add(\"org.apache.commons.collections.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\"); s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");"
      },
      {
        "txt": "s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\"); s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\"); s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\"); s.add(\"org.codehaus.groovy.runtime.MethodClosure\"); s.add(\"org.springframework.beans.factory.ObjectFactory\"); s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"); s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"); s.add(\"com.sun.rowset.JdbcRowSetImpl\"); s.add(\"java.util.logging.FileHandler\");"
      },
      {
        "txt": "s.add(\"java.rmi.server.UnicastRemoteObject\"); s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\"); s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\"); s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\"); DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s); } protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES; private final static SubTypeValidator instance = new SubTypeValidator(); protected SubTypeValidator() { } public static SubTypeValidator instance() { return instance; }"
      },
      {
        "txt": "public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException { final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } if (raw.isInterface()) {"
      },
      {
        "txt": "; } else if (full.startsWith(PREFIX_SPRING)) { for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){ String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } } }"
      },
      {
        "txt": "return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }"
      }
    ]
  },
  {
    "id": 1736,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "start-bug-line": 98,
    "end-bug-line": 98,
    "bug": "",
    "fix": "} } else if (full.startsWith(PREFIX_C3P0)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.util.Collections; import java.util.HashSet; import java.util.Set; import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; public class SubTypeValidator { protected final static String PREFIX_SPRING = \"org.springframework.\"; protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES; static { Set<String> s = new HashSet<String>(); s.add(\"org.apache.commons.collections.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");"
      },
      {
        "txt": "s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\"); s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\"); s.add(\"org.codehaus.groovy.runtime.MethodClosure\"); s.add(\"org.springframework.beans.factory.ObjectFactory\"); s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"); s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"); s.add(\"com.sun.rowset.JdbcRowSetImpl\"); s.add(\"java.util.logging.FileHandler\"); s.add(\"java.rmi.server.UnicastRemoteObject\");"
      },
      {
        "txt": "s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\"); s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\"); s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\"); DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s); } protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES; private final static SubTypeValidator instance = new SubTypeValidator(); protected SubTypeValidator() { } public static SubTypeValidator instance() { return instance; } public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } if (raw.isInterface()) { ;"
      },
      {
        "txt": "for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){ String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } <extra_id_0> } } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full));"
      },
      {
        "txt": "throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }"
      }
    ]
  },
  {
    "id": 1737,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/SubTypeValidator.java",
    "start-bug-line": 104,
    "end-bug-line": 104,
    "bug": "",
    "fix": "if (full.endsWith(\"DataSource\")) { break main_check;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.util.Collections; import java.util.HashSet; import java.util.Set; import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; public class SubTypeValidator { protected final static String PREFIX_SPRING = \"org.springframework.\"; protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES; static { Set<String> s = new HashSet<String>(); s.add(\"org.apache.commons.collections.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\");"
      },
      {
        "txt": "s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections4.functors.InstantiateTransformer\"); s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\"); s.add(\"org.codehaus.groovy.runtime.MethodClosure\"); s.add(\"org.springframework.beans.factory.ObjectFactory\"); s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"); s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"); s.add(\"com.sun.rowset.JdbcRowSetImpl\"); s.add(\"java.util.logging.FileHandler\"); s.add(\"java.rmi.server.UnicastRemoteObject\");"
      },
      {
        "txt": "s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\"); s.add(\"org.apache.tomcat.dbcp.dbcp2.BasicDataSource\"); s.add(\"com.sun.org.apache.bcel.internal.util.ClassLoader\"); DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s); } protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES; private final static SubTypeValidator instance = new SubTypeValidator(); protected SubTypeValidator() { } public static SubTypeValidator instance() { return instance; } public void validateSubType(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ final Class<?> raw = type.getRawClass(); String full = raw.getName(); main_check: do { if (_cfgIllegalClassNames.contains(full)) { break; } if (raw.isInterface()) { ;"
      },
      {
        "txt": "for (Class<?> cls = raw; (cls != null) && (cls != Object.class); cls = cls.getSuperclass()){ String name = cls.getSimpleName(); if (\"AbstractPointcutAdvisor\".equals(name) || \"AbstractApplicationContext\".equals(name)) { break main_check; } <extra_id_0> } return; } while (false); throw JsonMappingException.from(ctxt, String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }"
      },
      {
        "txt": "String.format(\"Illegal type (%s) to deserialize: prevented for security reasons\", full)); }"
      }
    ]
  }
]
[
  {
    "id": 1495,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java",
    "start-bug-line": 3,
    "end-bug-line": 3,
    "bug": "",
    "fix": "import java.lang.reflect.TypeVariable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; <extra_id_0> import com.fasterxml.jackson.databind.JavaType; public final class CollectionType extends CollectionLikeType { private static final long serialVersionUID = 1L; private CollectionType(Class<?> collT, TypeBindings bindings,"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; private CollectionType(Class<?> collT, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType elemT, Object valueHandler, Object typeHandler, boolean asStatic) { super(collT, bindings, superClass, superInts, elemT, valueHandler, typeHandler, asStatic); } protected CollectionType(TypeBase base, JavaType elemT) { super(base, elemT); }"
      },
      {
        "txt": "public static CollectionType construct(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType elemT) { return new CollectionType(rawType, bindings, superClass, superInts, elemT, null, null, false); } @Deprecated // since 2.7 public static CollectionType construct(Class<?> rawType, JavaType elemT) { return new CollectionType(rawType, null, _bogusSuperClass(rawType), null, elemT, null, null, false);"
      },
      {
        "txt": "} @Deprecated // since 2.7 @Override protected JavaType _narrow(Class<?> subclass) { return new CollectionType(subclass, _bindings, _superClass, _superInterfaces, _elementType, null, null, _asStatic); } @Override public JavaType withContentType(JavaType contentType) { if (_elementType == contentType) {"
      },
      {
        "txt": "return this; } return new CollectionType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withTypeHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, h, _asStatic); }"
      },
      {
        "txt": "@Override public CollectionType withContentTypeHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withValueHandler(Object h) { return new CollectionType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _elementType, h, _typeHandler, _asStatic); } @Override public CollectionType withContentValueHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withStaticTyping() {"
      },
      {
        "txt": "if (_asStatic) { return this; } return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) {"
      },
      {
        "txt": "return new CollectionType(rawType, bindings, superClass, superInterfaces, _elementType, _valueHandler, _typeHandler, _asStatic); } @Override public String toString() { return \"[collection type; class \"+_class.getName()+\", contains \"+_elementType+\"]\"; }"
      }
    ]
  },
  {
    "id": 1496,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/CollectionType.java",
    "start-bug-line": 50,
    "end-bug-line": 50,
    "bug": "return new CollectionType(rawType, null,",
    "fix": "TypeVariable<?>[] vars = rawType.getTypeParameters(); TypeBindings bindings; if ((vars == null) || (vars.length != 1)) { bindings = TypeBindings.emptyBindings(); } else { bindings = TypeBindings.create(rawType, elemT); } return new CollectionType(rawType, bindings,",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public final class CollectionType extends CollectionLikeType {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; private CollectionType(Class<?> collT, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType elemT, Object valueHandler, Object typeHandler, boolean asStatic) { super(collT, bindings, superClass, superInts, elemT, valueHandler, typeHandler, asStatic); } protected CollectionType(TypeBase base, JavaType elemT) { super(base, elemT); }"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, JavaType elemT) { return new CollectionType(rawType, bindings, superClass, superInts, elemT, null, null, false); } @Deprecated // since 2.7 public static CollectionType construct(Class<?> rawType, JavaType elemT) { <extra_id_0> _bogusSuperClass(rawType), null, elemT, null, null, false); } @Deprecated // since 2.7 @Override protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "@Override protected JavaType _narrow(Class<?> subclass) { return new CollectionType(subclass, _bindings, _superClass, _superInterfaces, _elementType, null, null, _asStatic); } @Override public JavaType withContentType(JavaType contentType) { if (_elementType == contentType) { return this; }"
      },
      {
        "txt": "return new CollectionType(_class, _bindings, _superClass, _superInterfaces, contentType, _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withTypeHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType, _valueHandler, h, _asStatic); } @Override public CollectionType withContentTypeHandler(Object h)"
      },
      {
        "txt": "{ return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withValueHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType, h, _typeHandler, _asStatic); }"
      },
      {
        "txt": "@Override public CollectionType withContentValueHandler(Object h) { return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public CollectionType withStaticTyping() { if (_asStatic) { return this;"
      },
      {
        "txt": "} return new CollectionType(_class, _bindings, _superClass, _superInterfaces, _elementType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return new CollectionType(rawType, bindings, superClass, superInterfaces, _elementType,"
      },
      {
        "txt": "_valueHandler, _typeHandler, _asStatic); } @Override public String toString() { return \"[collection type; class \"+_class.getName()+\", contains \"+_elementType+\"]\"; }"
      }
    ]
  },
  {
    "id": 1497,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
    "start-bug-line": 3,
    "end-bug-line": 3,
    "bug": "",
    "fix": "import java.lang.reflect.TypeVariable;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; <extra_id_0> import com.fasterxml.jackson.databind.JavaType; public final class MapType extends MapLikeType { private static final long serialVersionUID = 1L; private MapType(Class<?> mapType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT,"
      },
      {
        "txt": "private MapType(Class<?> mapType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT, Object valueHandler, Object typeHandler, boolean asStatic) { super(mapType, bindings, superClass, superInts, keyT, valueT, valueHandler, typeHandler, asStatic); } protected MapType(TypeBase base, JavaType keyT, JavaType valueT) { super(base, keyT, valueT); } public static MapType construct(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT) { return new MapType(rawType, bindings, superClass, superInts, keyT, valueT, null, null, false); } @Deprecated // since 2.7 public static MapType construct(Class<?> rawType, JavaType keyT, JavaType valueT) { return new MapType(rawType, null, _bogusSuperClass(rawType), null, keyT, valueT, null, null, false); }"
      },
      {
        "txt": "@Deprecated // since 2.7 @Override protected JavaType _narrow(Class<?> subclass) { return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withTypeHandler(Object h) { return new MapType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _keyType, _valueType, _valueHandler, h, _asStatic); } @Override public MapType withContentTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public MapType withValueHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, h, _typeHandler, _asStatic); } @Override public MapType withContentValueHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); }"
      },
      {
        "txt": "@Override public MapType withStaticTyping() { if (_asStatic) { return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override"
      },
      {
        "txt": "public JavaType withContentType(JavaType contentType) { if (_valueType == contentType) { return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyType(JavaType keyType) { if (keyType == _keyType) {"
      },
      {
        "txt": "return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return new MapType(rawType, bindings, superClass, superInterfaces, _keyType, _valueType,"
      },
      {
        "txt": "_valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public MapType withKeyValueHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withValueHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public String toString() { return \"[map type; class \"+_class.getName()+\", \"+_keyType+\" -> \"+_valueType+\"]\"; }"
      }
    ]
  },
  {
    "id": 1498,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
    "start-bug-line": 47,
    "end-bug-line": 47,
    "bug": "",
    "fix": "TypeVariable<?>[] vars = rawType.getTypeParameters(); TypeBindings bindings; if ((vars == null) || (vars.length != 2)) { bindings = TypeBindings.emptyBindings(); } else { bindings = TypeBindings.create(rawType, keyT, valueT); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public final class MapType extends MapLikeType { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "private MapType(Class<?> mapType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT, Object valueHandler, Object typeHandler, boolean asStatic) { super(mapType, bindings, superClass, superInts, keyT, valueT, valueHandler, typeHandler, asStatic); } protected MapType(TypeBase base, JavaType keyT, JavaType valueT) { super(base, keyT, valueT); } public static MapType construct(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType keyT, JavaType valueT) { return new MapType(rawType, bindings, superClass, superInts, keyT, valueT, null, null, false); } @Deprecated // since 2.7 public static MapType construct(Class<?> rawType, JavaType keyT, JavaType valueT) { <extra_id_0> return new MapType(rawType, null, _bogusSuperClass(rawType), null, keyT, valueT, null, null, false); } @Deprecated // since 2.7 @Override protected JavaType _narrow(Class<?> subclass) {"
      },
      {
        "txt": "@Override protected JavaType _narrow(Class<?> subclass) { return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, h, _asStatic);"
      },
      {
        "txt": "} @Override public MapType withContentTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public MapType withValueHandler(Object h) {"
      },
      {
        "txt": "return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, h, _typeHandler, _asStatic); } @Override public MapType withContentValueHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override"
      },
      {
        "txt": "public MapType withStaticTyping() { if (_asStatic) { return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override public JavaType withContentType(JavaType contentType) {"
      },
      {
        "txt": "if (_valueType == contentType) { return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyType(JavaType keyType) { if (keyType == _keyType) { return this;"
      },
      {
        "txt": "} return new MapType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return new MapType(rawType, bindings, superClass, superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic);"
      },
      {
        "txt": "} @Override public MapType withKeyTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyValueHandler(Object h) {"
      },
      {
        "txt": "return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withValueHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public String toString() { return \"[map type; class \"+_class.getName()+\", \"+_keyType+\" -> \"+_valueType+\"]\"; }"
      }
    ]
  },
  {
    "id": 1499,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/MapType.java",
    "start-bug-line": 48,
    "end-bug-line": 48,
    "bug": "return new MapType(rawType, null, _bogusSuperClass(rawType), null,",
    "fix": "return new MapType(rawType, bindings, _bogusSuperClass(rawType), null,",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public final class MapType extends MapLikeType { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "private MapType(Class<?> mapType, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType keyT, JavaType valueT, Object valueHandler, Object typeHandler, boolean asStatic) { super(mapType, bindings, superClass, superInts, keyT, valueT, valueHandler, typeHandler, asStatic); } protected MapType(TypeBase base, JavaType keyT, JavaType valueT) { super(base, keyT, valueT); } public static MapType construct(Class<?> rawType, TypeBindings bindings,"
      },
      {
        "txt": "JavaType keyT, JavaType valueT) { return new MapType(rawType, bindings, superClass, superInts, keyT, valueT, null, null, false); } @Deprecated // since 2.7 public static MapType construct(Class<?> rawType, JavaType keyT, JavaType valueT) { <extra_id_0> keyT, valueT, null, null, false); } @Deprecated // since 2.7 @Override protected JavaType _narrow(Class<?> subclass) { return new MapType(subclass, _bindings,"
      },
      {
        "txt": "protected JavaType _narrow(Class<?> subclass) { return new MapType(subclass, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType, _valueHandler, h, _asStatic); }"
      },
      {
        "txt": "@Override public MapType withContentTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withTypeHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public MapType withValueHandler(Object h) { return new MapType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _keyType, _valueType, h, _typeHandler, _asStatic); } @Override public MapType withContentValueHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, _valueType.withValueHandler(h), _valueHandler, _typeHandler, _asStatic); } @Override public MapType withStaticTyping() {"
      },
      {
        "txt": "if (_asStatic) { return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withStaticTyping(), _valueType.withStaticTyping(), _valueHandler, _typeHandler, true); } @Override public JavaType withContentType(JavaType contentType) { if (_valueType == contentType) {"
      },
      {
        "txt": "return this; } return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType, contentType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyType(JavaType keyType) { if (keyType == _keyType) { return this; }"
      },
      {
        "txt": "return new MapType(_class, _bindings, _superClass, _superInterfaces, keyType, _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return new MapType(rawType, bindings, superClass, superInterfaces, _keyType, _valueType, _valueHandler, _typeHandler, _asStatic); }"
      },
      {
        "txt": "@Override public MapType withKeyTypeHandler(Object h) { return new MapType(_class, _bindings, _superClass, _superInterfaces, _keyType.withTypeHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public MapType withKeyValueHandler(Object h) { return new MapType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _keyType.withValueHandler(h), _valueType, _valueHandler, _typeHandler, _asStatic); } @Override public String toString() { return \"[map type; class \"+_class.getName()+\", \"+_keyType+\" -> \"+_valueType+\"]\"; }"
      }
    ]
  },
  {
    "id": 1500,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 116,
    "end-bug-line": 117,
    "bug": "return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false);",
    "fix": "TypeBindings b = TypeBindings.emptyBindings(); return new SimpleType(cls, b, _buildSuperClass(cls.getSuperclass(), b), null, null, null, false);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType; public class SimpleType // note: until 2.6 was final extends TypeBase { private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); }"
      },
      {
        "txt": "protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false); } protected SimpleType(TypeBase base) { super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic)"
      },
      {
        "txt": "{ super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic);"
      },
      {
        "txt": "} public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null, null, null, null, null, false); } @Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\");"
      },
      {
        "txt": "if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\"); } if (cls.isArray()) { throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } <extra_id_0> } @Override @Deprecated protected JavaType _narrow(Class<?> subclass) { if (_class == subclass) {"
      },
      {
        "txt": "{ if (_class == subclass) { return this; } if (!_class.isAssignableFrom(subclass)) { throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); } return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);"
      },
      {
        "txt": "} @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; }"
      },
      {
        "txt": "return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this;"
      },
      {
        "txt": "} return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); }"
      },
      {
        "txt": "sb.append(t.toCanonical()); } sb.append('>'); } return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) {"
      },
      {
        "txt": "return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) {"
      },
      {
        "txt": "sb = containedType(i).getGenericSignature(sb); } sb.append('>'); } sb.append(';'); return sb; } @Override public String toString() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false;"
      },
      {
        "txt": "SimpleType other = (SimpleType) o; if (other._class != this._class) return false; TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  },
  {
    "id": 1501,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/SimpleType.java",
    "start-bug-line": 251,
    "end-bug-line": 251,
    "bug": "",
    "fix": "private static JavaType _buildSuperClass(Class<?> superClass, TypeBindings b) { if (superClass == null) { return null; } if (superClass == Object.class) { return TypeFactory.unknownType(); } JavaType superSuper = _buildSuperClass(superClass.getSuperclass(), b); return new SimpleType(superClass, b, superSuper, null, null, null, false); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import java.util.*; import com.fasterxml.jackson.databind.JavaType;"
      },
      {
        "txt": "public class SimpleType // note: until 2.6 was final extends TypeBase { private static final long serialVersionUID = 1L; protected SimpleType(Class<?> cls) { this(cls, TypeBindings.emptyBindings(), null, null); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts) { this(cls, bindings, superClass, superInts, null, null, false);"
      },
      {
        "txt": "} protected SimpleType(TypeBase base) { super(base); } protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, 0, valueHandler, typeHandler, asStatic);"
      },
      {
        "txt": "} protected SimpleType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, int extraHash, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, extraHash, valueHandler, typeHandler, asStatic); } public static SimpleType constructUnsafe(Class<?> raw) { return new SimpleType(raw, null,"
      },
      {
        "txt": "null, null, null, null, false); } @Deprecated public static SimpleType construct(Class<?> cls) { if (Map.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Map (class: \"+cls.getName()+\")\"); } if (Collection.class.isAssignableFrom(cls)) { throw new IllegalArgumentException(\"Can not construct SimpleType for a Collection (class: \"+cls.getName()+\")\");"
      },
      {
        "txt": "} if (cls.isArray()) { throw new IllegalArgumentException(\"Can not construct SimpleType for an array (class: \"+cls.getName()+\")\"); } return new SimpleType(cls, TypeBindings.emptyBindings(), _bogusSuperClass(cls), null, null, null, false); } @Override @Deprecated protected JavaType _narrow(Class<?> subclass)"
      },
      {
        "txt": "{ if (_class == subclass) { return this; } if (!_class.isAssignableFrom(subclass)) { throw new IllegalArgumentException(\"Class \"+subclass.getName()+\" not sub-type of \" +_class.getName()); } return new SimpleType(subclass, _bindings, this, _superInterfaces, _valueHandler, _typeHandler, _asStatic);"
      },
      {
        "txt": "} @Override public JavaType withContentType(JavaType contentType) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContentType()\"); } @Override public SimpleType withTypeHandler(Object h) { if (_typeHandler == h) { return this; }"
      },
      {
        "txt": "return new SimpleType(_class, _bindings, _superClass, _superInterfaces, _valueHandler, h, _asStatic); } @Override public JavaType withContentTypeHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenTypeHandler()\"); } @Override public SimpleType withValueHandler(Object h) { if (h == _valueHandler) { return this;"
      },
      {
        "txt": "} return new SimpleType(_class, _bindings, _superClass, _superInterfaces, h, _typeHandler, _asStatic); } @Override public SimpleType withContentValueHandler(Object h) { throw new IllegalArgumentException(\"Simple types have no content types; can not call withContenValueHandler()\"); } @Override public SimpleType withStaticTyping() { return _asStatic ? this : new SimpleType(_class, _bindings,"
      },
      {
        "txt": "_superClass, _superInterfaces, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return null; } @Override protected String buildCanonicalName() {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) { JavaType t = containedType(i); if (i > 0) { sb.append(','); }"
      },
      {
        "txt": "sb.append(t.toCanonical()); } sb.append('>'); } return sb.toString(); } @Override public boolean isContainerType() { return false; } @Override public StringBuilder getErasedSignature(StringBuilder sb) {"
      },
      {
        "txt": "return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); final int count = _bindings.size(); if (count > 0) { sb.append('<'); for (int i = 0; i < count; ++i) {"
      },
      {
        "txt": "} sb.append('>'); } sb.append(';'); return sb; } <extra_id_0> @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString();"
      },
      {
        "txt": "sb.append(\"[simple type, class \").append(buildCanonicalName()).append(']'); return sb.toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; SimpleType other = (SimpleType) o;"
      },
      {
        "txt": "if (other._class != this._class) return false; TypeBindings b1 = _bindings; TypeBindings b2 = other._bindings; return b1.equals(b2); }"
      }
    ]
  }
]
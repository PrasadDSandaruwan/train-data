[
  {
    "id": 1751,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/DatabindContext.java",
    "start-bug-line": 195,
    "end-bug-line": 195,
    "bug": "e.getMessage()));",
    "fix": "ClassUtil.exceptionMessage(e)));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.lang.reflect.Type; import java.util.Locale; import java.util.TimeZone; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.cfg.MapperConfig; import com.fasterxml.jackson.databind.introspect.Annotated;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.ObjectIdInfo; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public abstract class DatabindContext { private final static int MAX_ERROR_STR_LEN = 500; public abstract MapperConfig<?> getConfig(); public abstract AnnotationIntrospector getAnnotationIntrospector(); public abstract boolean isEnabled(MapperFeature feature);"
      },
      {
        "txt": "public abstract boolean canOverrideAccessModifiers(); public abstract Class<?> getActiveView(); public abstract Locale getLocale(); public abstract TimeZone getTimeZone(); public abstract JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType); public abstract Object getAttribute(Object key); public abstract DatabindContext setAttribute(Object key, Object value); public JavaType constructType(Type type) { if (type == null) { return null;"
      },
      {
        "txt": "} return getTypeFactory().constructType(type); } public JavaType constructSpecializedType(JavaType baseType, Class<?> subclass) { if (baseType.getRawClass() == subclass) { return baseType; } return getConfig().constructSpecializedType(baseType, subclass); } public JavaType resolveSubType(JavaType baseType, String subClass)"
      },
      {
        "txt": "throws JsonMappingException { if (subClass.indexOf('<') > 0) { JavaType t = getTypeFactory().constructFromCanonical(subClass); if (t.isTypeOrSubTypeOf(baseType.getRawClass())) { return t; } } else { Class<?> cls; try {"
      },
      {
        "txt": "} catch (ClassNotFoundException e) { // let caller handle this problem return null; } catch (Exception e) { throw invalidTypeIdException(baseType, subClass, String.format( \"problem: (%s) %s\", e.getClass().getName(), <extra_id_0> } if (baseType.isTypeOrSuperTypeOf(cls)) { return getTypeFactory().constructSpecializedType(baseType, cls); } } throw invalidTypeIdException(baseType, subClass, \"Not a subtype\");"
      },
      {
        "txt": "} throw invalidTypeIdException(baseType, subClass, \"Not a subtype\"); } protected abstract JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc); public abstract TypeFactory getTypeFactory(); public ObjectIdGenerator<?> objectIdGeneratorInstance(Annotated annotated, ObjectIdInfo objectIdInfo) throws JsonMappingException {"
      },
      {
        "txt": "Class<?> implClass = objectIdInfo.getGeneratorType(); final MapperConfig<?> config = getConfig(); HandlerInstantiator hi = config.getHandlerInstantiator(); ObjectIdGenerator<?> gen = (hi == null) ? null : hi.objectIdGeneratorInstance(config, annotated, implClass); if (gen == null) { gen = (ObjectIdGenerator<?>) ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers()); } return gen.forScope(objectIdInfo.getScope()); }"
      },
      {
        "txt": "public ObjectIdResolver objectIdResolverInstance(Annotated annotated, ObjectIdInfo objectIdInfo) { Class<? extends ObjectIdResolver> implClass = objectIdInfo.getResolverType(); final MapperConfig<?> config = getConfig(); HandlerInstantiator hi = config.getHandlerInstantiator(); ObjectIdResolver resolver = (hi == null) ? null : hi.resolverIdGeneratorInstance(config, annotated, implClass); if (resolver == null) { resolver = ClassUtil.createInstance(implClass, config.canOverrideAccessModifiers()); } return resolver;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public Converter<Object,Object> converterInstance(Annotated annotated, Object converterDef) throws JsonMappingException { if (converterDef == null) { return null; } if (converterDef instanceof Converter<?,?>) {"
      },
      {
        "txt": "return (Converter<Object,Object>) converterDef; } if (!(converterDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\"); } Class<?> converterClass = (Class<?>)converterDef; if (converterClass == Converter.None.class || ClassUtil.isBogusClass(converterClass)) { return null; }"
      },
      {
        "txt": "if (!Converter.class.isAssignableFrom(converterClass)) { throw new IllegalStateException(\"AnnotationIntrospector returned Class \" +converterClass.getName()+\"; expected Class<Converter>\"); } final MapperConfig<?> config = getConfig(); HandlerInstantiator hi = config.getHandlerInstantiator(); Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(config, annotated, converterClass); if (conv == null) { conv = (Converter<?,?>) ClassUtil.createInstance(converterClass, config.canOverrideAccessModifiers());"
      },
      {
        "txt": "} return (Converter<Object,Object>) conv; } public abstract <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException; public <T> T reportBadDefinition(Class<?> type, String msg) throws JsonMappingException { return reportBadDefinition(constructType(type), msg); } protected final String _format(String msg, Object... msgArgs) { if (msgArgs.length > 0) { return String.format(msg, msgArgs);"
      },
      {
        "txt": "} return msg; } protected final String _truncate(String desc) { if (desc == null) { return \"\"; } if (desc.length() <= MAX_ERROR_STR_LEN) { return desc; }"
      },
      {
        "txt": "return desc.substring(0, MAX_ERROR_STR_LEN) + \"]...[\" + desc.substring(desc.length() - MAX_ERROR_STR_LEN); } protected String _quotedString(String desc) { if (desc == null) { return \"[N/A]\"; } return String.format(\"\\\"%s\\\"\", _truncate(desc)); } protected String _colonConcat(String msgBase, String extra) { if (extra == null) {"
      },
      {
        "txt": "return msgBase; } return msgBase + \": \" + extra; } protected String _desc(String desc) { if (desc == null) { return \"[N/A]\"; } return _truncate(desc); }"
      }
    ]
  },
  {
    "id": 1752,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
    "start-bug-line": 714,
    "end-bug-line": 714,
    "bug": "e.getMessage()));",
    "fix": "ClassUtil.exceptionMessage(e)));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.IOException; import java.text.DateFormat; import java.text.ParseException; import java.util.*; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdResolver;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId; import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer; import com.fasterxml.jackson.databind.exc.MismatchedInputException; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.exc.InvalidFormatException; import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.*; public abstract class DeserializationContext extends DatabindContext"
      },
      {
        "txt": "implements java.io.Serializable { private static final long serialVersionUID = 1L; // 2.6 protected final DeserializerCache _cache; protected final DeserializerFactory _factory; protected final DeserializationConfig _config; protected final int _featureFlags; protected final Class<?> _view; protected transient JsonParser _parser; protected final InjectableValues _injectableValues;"
      },
      {
        "txt": "protected transient ArrayBuilders _arrayBuilders; protected transient ObjectBuffer _objectBuffer; protected transient DateFormat _dateFormat; protected transient ContextAttributes _attributes; protected LinkedNode<JavaType> _currentType; protected DeserializationContext(DeserializerFactory df) { this(df, null); } protected DeserializationContext(DeserializerFactory df, DeserializerCache cache)"
      },
      {
        "txt": "{ if (df == null) { throw new IllegalArgumentException(\"Cannot pass null DeserializerFactory\"); } _factory = df; if (cache == null) { cache = new DeserializerCache(); } _cache = cache; _featureFlags = 0;"
      },
      {
        "txt": "_config = null; _injectableValues = null; _view = null; _attributes = null; } protected DeserializationContext(DeserializationContext src, DeserializerFactory factory) { _cache = src._cache; _factory = factory;"
      },
      {
        "txt": "_config = src._config; _featureFlags = src._featureFlags; _view = src._view; _parser = src._parser; _injectableValues = src._injectableValues; _attributes = src._attributes; } protected DeserializationContext(DeserializationContext src, DeserializationConfig config, JsonParser p, InjectableValues injectableValues)"
      },
      {
        "txt": "{ _cache = src._cache; _factory = src._factory; _config = config; _featureFlags = config.getDeserializationFeatures(); _view = config.getActiveView(); _parser = p; _injectableValues = injectableValues; _attributes = config.getAttributes(); }"
      },
      {
        "txt": "protected DeserializationContext(DeserializationContext src) { _cache = new DeserializerCache(); _factory = src._factory; _config = src._config; _featureFlags = src._featureFlags; _view = src._view; _injectableValues = null; } @Override public DeserializationConfig getConfig() { return _config; }"
      },
      {
        "txt": "@Override public final Class<?> getActiveView() { return _view; } @Override public final boolean canOverrideAccessModifiers() { return _config.canOverrideAccessModifiers(); } @Override public final boolean isEnabled(MapperFeature feature) { return _config.isEnabled(feature); }"
      },
      {
        "txt": "@Override public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) { return _config.getDefaultPropertyFormat(baseType); } @Override public final AnnotationIntrospector getAnnotationIntrospector() { return _config.getAnnotationIntrospector(); } @Override public final TypeFactory getTypeFactory() {"
      },
      {
        "txt": "return _config.getTypeFactory(); } @Override public Locale getLocale() { return _config.getLocale(); } @Override public TimeZone getTimeZone() { return _config.getTimeZone(); }"
      },
      {
        "txt": "@Override public Object getAttribute(Object key) { return _attributes.getAttribute(key); } @Override public DeserializationContext setAttribute(Object key, Object value) { _attributes = _attributes.withPerCallAttribute(key, value); return this; }"
      },
      {
        "txt": "public JavaType getContextualType() { return (_currentType == null) ? null : _currentType.value(); } public DeserializerFactory getFactory() { return _factory; } public final boolean isEnabled(DeserializationFeature feat) { return (_featureFlags & feat.getMask()) != 0; } public final int getDeserializationFeatures() {"
      },
      {
        "txt": "return _featureFlags; } public final boolean hasDeserializationFeatures(int featureMask) { return (_featureFlags & featureMask) == featureMask; } public final boolean hasSomeOfFeatures(int featureMask) { return (_featureFlags & featureMask) != 0; } public final JsonParser getParser() { return _parser; } public final Object findInjectableValue(Object valueId,"
      },
      {
        "txt": "BeanProperty forProperty, Object beanInstance) throws JsonMappingException { if (_injectableValues == null) { reportBadDefinition(ClassUtil.classOf(valueId), String.format( \"No 'injectableValues' configured, cannot inject value with id [%s]\", valueId)); } return _injectableValues.findInjectableValue(valueId, this, forProperty, beanInstance); } public final Base64Variant getBase64Variant() {"
      },
      {
        "txt": "return _config.getBase64Variant(); } public final JsonNodeFactory getNodeFactory() { return _config.getNodeFactory(); } public boolean hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause) { try { return _cache.hasValueDeserializerFor(this, _factory, type); } catch (JsonMappingException e) { if (cause != null) {"
      },
      {
        "txt": "cause.set(e); } } catch (RuntimeException e) { if (cause == null) { // earlier behavior throw e; } cause.set(e); } return false; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public final JsonDeserializer<Object> findContextualValueDeserializer(JavaType type, BeanProperty prop) throws JsonMappingException { JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type); if (deser != null) { deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, prop, type); } return deser; }"
      },
      {
        "txt": "public final JsonDeserializer<Object> findNonContextualValueDeserializer(JavaType type) throws JsonMappingException { return _cache.findValueDeserializer(this, _factory, type); } @SuppressWarnings(\"unchecked\") public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type) throws JsonMappingException { JsonDeserializer<Object> deser = _cache.findValueDeserializer(this,"
      },
      {
        "txt": "_factory, type); if (deser == null) { // can this occur? return null; } deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, null, type); TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type); if (typeDeser != null) { typeDeser = typeDeser.forProperty(null); return new TypeWrappedDeserializer(typeDeser, deser); }"
      },
      {
        "txt": "return deser; } public final KeyDeserializer findKeyDeserializer(JavaType keyType, BeanProperty prop) throws JsonMappingException { KeyDeserializer kd = _cache.findKeyDeserializer(this, _factory, keyType); if (kd instanceof ContextualKeyDeserializer) { kd = ((ContextualKeyDeserializer) kd).createContextual(this, prop); } return kd;"
      },
      {
        "txt": "} public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver); public abstract void checkUnresolvedObjectId() throws UnresolvedForwardReference; public final JavaType constructType(Class<?> cls) { return (cls == null) ? null : _config.constructType(cls); } public Class<?> findClass(String className) throws ClassNotFoundException { return getTypeFactory().findClass(className);"
      },
      {
        "txt": "} public final ObjectBuffer leaseObjectBuffer() { ObjectBuffer buf = _objectBuffer; if (buf == null) { buf = new ObjectBuffer(); } else { _objectBuffer = null; } return buf;"
      },
      {
        "txt": "} public final void returnObjectBuffer(ObjectBuffer buf) { if (_objectBuffer == null || buf.initialCapacity() >= _objectBuffer.initialCapacity()) { _objectBuffer = buf; } } public final ArrayBuilders getArrayBuilders() {"
      },
      {
        "txt": "if (_arrayBuilders == null) { _arrayBuilders = new ArrayBuilders(); } return _arrayBuilders; } public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException; public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated, Object deserDef)"
      },
      {
        "txt": "throws JsonMappingException; public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type) throws JsonMappingException { if (deser instanceof ContextualDeserializer) { _currentType = new LinkedNode<JavaType>(type, _currentType); try { deser = ((ContextualDeserializer) deser).createContextual(this, prop); } finally {"
      },
      {
        "txt": "_currentType = _currentType.next(); } } return deser; } public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type) throws JsonMappingException { if (deser instanceof ContextualDeserializer) {"
      },
      {
        "txt": "_currentType = new LinkedNode<JavaType>(type, _currentType); try { deser = ((ContextualDeserializer) deser).createContextual(this, prop); } finally { _currentType = _currentType.next(); } } return deser; } public Date parseDate(String dateStr) throws IllegalArgumentException"
      },
      {
        "txt": "try { DateFormat df = getDateFormat(); return df.parse(dateStr); } catch (ParseException e) { throw new IllegalArgumentException(String.format( \"Failed to parse Date value '%s': %s\", dateStr, <extra_id_0> } } public Calendar constructCalendar(Date d) { Calendar c = Calendar.getInstance(getTimeZone()); c.setTime(d); return c;"
      },
      {
        "txt": "c.setTime(d); return c; } public <T> T readValue(JsonParser p, Class<T> type) throws IOException { return readValue(p, getTypeFactory().constructType(type)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, JavaType type) throws IOException { JsonDeserializer<Object> deser = findRootValueDeserializer(type); if (deser == null) {"
      },
      {
        "txt": "reportBadDefinition(type, \"Could not find JsonDeserializer for type \"+type); } return (T) deser.deserialize(p, this); } public <T> T readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type) throws IOException { return readPropertyValue(p, prop, getTypeFactory().constructType(type)); } @SuppressWarnings(\"unchecked\") public <T> T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException {"
      },
      {
        "txt": "JsonDeserializer<Object> deser = findContextualValueDeserializer(type, prop); if (deser == null) { return reportBadDefinition(type, String.format( \"Could not find JsonDeserializer for type %s (via property %s)\", type, ClassUtil.nameOf(prop))); } return (T) deser.deserialize(p, this); } public boolean handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName)"
      },
      {
        "txt": "throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { if (h.value().handleUnknownProperty(this, p, deser, instanceOrClass, propName)) { return true; } h = h.next(); } if (!isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {"
      },
      {
        "txt": "p.skipChildren(); return true; } Collection<Object> propIds = (deser == null) ? null : deser.getKnownPropertyNames(); throw UnrecognizedPropertyException.from(_parser, instanceOrClass, propName, propIds); } public Object handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object... msgArgs) throws IOException"
      },
      {
        "txt": "{ msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object key = h.value().handleWeirdKey(this, keyClass, keyValue, msg); if (key != DeserializationProblemHandler.NOT_HANDLED) { if ((key == null) || keyClass.isInstance(key)) { return key; } throw weirdStringException(keyValue, keyClass, String.format("
      },
      {
        "txt": "\"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\", keyClass, key.getClass())); } h = h.next(); } throw weirdKeyException(keyClass, keyValue, msg); } public Object handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object... msgArgs) throws IOException"
      },
      {
        "txt": "{ msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleWeirdStringValue(this, targetClass, value, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(targetClass, instance)) { return instance; } throw weirdStringException(value, targetClass, String.format("
      },
      {
        "txt": "\"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\", targetClass, instance.getClass())); } h = h.next(); } throw weirdStringException(value, targetClass, msg); } public Object handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object... msgArgs) throws IOException"
      },
      {
        "txt": "{ msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object key = h.value().handleWeirdNumberValue(this, targetClass, value, msg); if (key != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(targetClass, key)) { return key; } throw weirdNumberException(value, targetClass, _format("
      },
      {
        "txt": "\"DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s\", targetClass, key.getClass())); } h = h.next(); } throw weirdNumberException(value, targetClass, msg); } public Object handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p) throws IOException"
      },
      {
        "txt": "{ LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); final Class<?> raw = targetType.getRawClass(); for (; h != null; h = h.next()) { Object goodValue = h.value().handleWeirdNativeValue(this, targetType, badValue, p); if (goodValue != DeserializationProblemHandler.NOT_HANDLED) { if ((goodValue == null) || raw.isInstance(goodValue)) { return goodValue; } throw JsonMappingException.from(p, _format("
      },
      {
        "txt": "\"DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s\", targetType, goodValue.getClass())); } } throw weirdNativeValueException(badValue, raw); } @SuppressWarnings(\"resource\") public Object handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object... msgArgs) throws IOException"
      },
      {
        "txt": "{ if (p == null) { p = getParser(); } msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleMissingInstantiator(this, instClass, valueInst, p, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if (_isCompatible(instClass, instance)) { return instance; } reportBadDefinition(constructType(instClass), String.format( \"DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s\", instClass, ClassUtil.classNameOf(instance))); } h = h.next(); } if ((valueInst != null) && !valueInst.canInstantiate()) {"
      },
      {
        "txt": "msg = String.format(\"Cannot construct instance of %s (no Creators, like default construct, exist): %s\", ClassUtil.nameOf(instClass), msg); return reportBadDefinition(constructType(instClass), msg); } msg = String.format(\"Cannot construct instance of %s (although at least one Creator exists): %s\", ClassUtil.nameOf(instClass), msg); return reportInputMismatch(instClass, msg); } public Object handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t)"
      },
      {
        "txt": "throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleInstantiationProblem(this, instClass, argument, t); if (instance != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(instClass, instance)) { return instance; } reportBadDefinition(constructType(instClass), String.format("
      },
      {
        "txt": "\"DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s\", instClass, ClassUtil.classNameOf(instance))); } h = h.next(); } ClassUtil.throwIfIOE(t); throw instantiationException(instClass, t); } public Object handleUnexpectedToken(Class<?> instClass, JsonParser p) throws IOException"
      },
      {
        "txt": "{ return handleUnexpectedToken(instClass, p.getCurrentToken(), p, null); } public Object handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object... msgArgs) throws IOException { msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) {"
      },
      {
        "txt": "Object instance = h.value().handleUnexpectedToken(this, instClass, t, p, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(instClass, instance)) { return instance; } reportBadDefinition(constructType(instClass), String.format( \"DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s\", ClassUtil.nameOf(instClass), ClassUtil.classNameOf(instance))); }"
      },
      {
        "txt": "h = h.next(); } if (msg == null) { if (t == null) { msg = String.format(\"Unexpected end-of-input when binding data into %s\", ClassUtil.nameOf(instClass)); } else { msg = String.format(\"Cannot deserialize instance of %s out of %s token\", ClassUtil.nameOf(instClass), t); }"
      },
      {
        "txt": "} reportInputMismatch(instClass, msg); return null; // never gets here } public JavaType handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc) throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { JavaType type = h.value().handleUnknownTypeId(this, baseType, id, idResolver, extraDesc);"
      },
      {
        "txt": "if (type != null) { if (type.hasRawClass(Void.class)) { return null; } if (type.isTypeOrSubTypeOf(baseType.getRawClass())) { return type; } throw invalidTypeIdException(baseType, id, \"problem handler tried to resolve into non-subtype: \"+type); }"
      },
      {
        "txt": "h = h.next(); } if (!isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return null; } throw invalidTypeIdException(baseType, id, extraDesc); } public JavaType handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc) throws IOException {"
      },
      {
        "txt": "LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { JavaType type = h.value().handleMissingTypeId(this, baseType, idResolver, extraDesc); if (type != null) { if (type.hasRawClass(Void.class)) { return null; } if (type.isTypeOrSubTypeOf(baseType.getRawClass())) { return type; }"
      },
      {
        "txt": "throw invalidTypeIdException(baseType, null, \"problem handler tried to resolve into non-subtype: \"+type); } h = h.next(); } throw missingTypeIdException(baseType, extraDesc); } protected boolean _isCompatible(Class<?> target, Object value) { if ((value == null) || target.isInstance(value)) {"
      },
      {
        "txt": "return true; } return target.isPrimitive() && ClassUtil.wrapperType(target).isInstance(value); } public void reportWrongTokenException(JsonDeserializer<?> deser, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs);"
      },
      {
        "txt": "throw wrongTokenException(getParser(), deser.handledType(), expToken, msg); } public void reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw wrongTokenException(getParser(), targetType, expToken, msg); } public void reportWrongTokenException(Class<?> targetType,"
      },
      {
        "txt": "JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw wrongTokenException(getParser(), targetType, expToken, msg); } public <T> T reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean) throws JsonMappingException { String msg = String.format(\"No Object Id found for an instance of %s, to assign to property '%s'\","
      },
      {
        "txt": "ClassUtil.classNameOf(bean), oidReader.propertyName); return reportInputMismatch(oidReader.idProperty, msg); } public <T> T reportInputMismatch(BeanProperty prop, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); JavaType type = (prop == null) ? null : prop.getType(); throw MismatchedInputException.from(getParser(), type, msg); }"
      },
      {
        "txt": "public <T> T reportInputMismatch(JsonDeserializer<?> src, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw MismatchedInputException.from(getParser(), src.handledType(), msg); } public <T> T reportInputMismatch(Class<?> targetType, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs);"
      },
      {
        "txt": "throw MismatchedInputException.from(getParser(), targetType, msg); } public <T> T reportInputMismatch(JavaType targetType, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw MismatchedInputException.from(getParser(), targetType, msg); } public <T> T reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken) throws JsonMappingException"
      },
      {
        "txt": "{ throw MismatchedInputException.from(p, targetType, String.format( \"Trailing token (of type %s) found after value (bound as %s): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`\", trailingToken, ClassUtil.nameOf(targetType) )); } @Deprecated // since 2.9 public void reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException"
      },
      {
        "txt": "{ msg = _format(msg, msgArgs); throw wrongTokenException(p, expToken, msg); } @Deprecated public void reportUnknownProperty(Object instanceOrClass, String fieldName, JsonDeserializer<?> deser) throws JsonMappingException { if (isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) {"
      },
      {
        "txt": "Collection<Object> propIds = (deser == null) ? null : deser.getKnownPropertyNames(); throw UnrecognizedPropertyException.from(_parser, instanceOrClass, fieldName, propIds); } } @Deprecated // since 2.9 public void reportMissingContent(String msg, Object... msgArgs) throws JsonMappingException { throw MismatchedInputException.from(getParser(), (JavaType) null, \"No content to map due to end-of-input\"); } public <T> T reportBadTypeDefinition(BeanDescription bean,"
      },
      {
        "txt": "String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); String beanDesc = ClassUtil.nameOf(bean.getBeanClass()); msg = String.format(\"Invalid type definition for type %s: %s\", beanDesc, msg); throw InvalidDefinitionException.from(_parser, msg, bean, null); } public <T> T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); String propName = ClassUtil.nameOf(prop);"
      },
      {
        "txt": "String beanDesc = ClassUtil.nameOf(bean.getBeanClass()); msg = String.format(\"Invalid definition for property %s (of type %s): %s\", propName, beanDesc, msg); throw InvalidDefinitionException.from(_parser, msg, bean, prop); } @Override public <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException { throw InvalidDefinitionException.from(_parser, msg, type); } public <T> T reportBadMerge(JsonDeserializer<?> deser) throws JsonMappingException"
      },
      {
        "txt": "{ if (isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) { return null; } JavaType type = constructType(deser.handledType()); String msg = String.format(\"Invalid configuration: values of type %s cannot be merged\", type); throw InvalidDefinitionException.from(getParser(), msg, type); } public JsonMappingException wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra)"
      },
      {
        "txt": "{ String msg = String.format(\"Unexpected token (%s), expected %s\", p.getCurrentToken(), expToken); msg = _colonConcat(msg, extra); return MismatchedInputException.from(p, targetType, msg); } public JsonMappingException wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra) { String msg = String.format(\"Unexpected token (%s), expected %s\","
      },
      {
        "txt": "p.getCurrentToken(), expToken); msg = _colonConcat(msg, extra); return MismatchedInputException.from(p, targetType, msg); } @Deprecated // since 2.9 public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken, String msg) { return wrongTokenException(p, (JavaType) null, expToken, msg); }"
      },
      {
        "txt": "public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) { return InvalidFormatException.from(_parser, String.format(\"Cannot deserialize Map key of type %s from String %s: %s\", ClassUtil.nameOf(keyClass), _quotedString(keyValue), msg), keyValue, keyClass); } public JsonMappingException weirdStringException(String value, Class<?> instClass, String msg) { return InvalidFormatException.from(_parser,"
      },
      {
        "txt": "String.format(\"Cannot deserialize value of type %s from String %s: %s\", ClassUtil.nameOf(instClass), _quotedString(value), msg), value, instClass); } public JsonMappingException weirdNumberException(Number value, Class<?> instClass, String msg) { return InvalidFormatException.from(_parser, String.format(\"Cannot deserialize value of type %s from number %s: %s\", ClassUtil.nameOf(instClass), String.valueOf(value), msg), value, instClass);"
      },
      {
        "txt": "} public JsonMappingException weirdNativeValueException(Object value, Class<?> instClass) { return InvalidFormatException.from(_parser, String.format( \"Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types\", ClassUtil.nameOf(instClass), ClassUtil.classNameOf(value)), value, instClass); } public JsonMappingException instantiationException(Class<?> instClass, Throwable cause) { final JavaType type = constructType(instClass);"
      },
      {
        "txt": "String excMsg; if (cause == null) { excMsg = \"N/A\"; } else if ((excMsg = cause.getMessage()) == null) { excMsg = ClassUtil.nameOf(cause.getClass()); } String msg = String.format(\"Cannot construct instance of %s, problem: %s\", ClassUtil.nameOf(instClass), excMsg); InvalidDefinitionException e = InvalidDefinitionException.from(_parser, msg, type); e.initCause(cause);"
      },
      {
        "txt": "return e; } public JsonMappingException instantiationException(Class<?> instClass, String msg0) { JavaType type = constructType(instClass); String msg = String.format(\"Cannot construct instance of %s: %s\", ClassUtil.nameOf(instClass), msg0); return InvalidDefinitionException.from(_parser, msg, type); } @Override public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId,"
      },
      {
        "txt": "String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' as a subtype of %s\", typeId, baseType); return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, typeId); } public JsonMappingException missingTypeIdException(JavaType baseType, String extraDesc) { String msg = String.format(\"Missing type id when trying to resolve subtype of %s\", baseType); return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, null);"
      },
      {
        "txt": "} @Deprecated public JsonMappingException unknownTypeException(JavaType type, String id, String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' into a subtype of %s\", id, type); msg = _colonConcat(msg, extraDesc); return MismatchedInputException.from(_parser, type, msg); }"
      },
      {
        "txt": "@Deprecated public JsonMappingException endOfInputException(Class<?> instClass) { return MismatchedInputException.from(_parser, instClass, \"Unexpected end-of-input when trying to deserialize a \"+instClass.getName()); } @Deprecated // since 2.9 public void reportMappingException(String msg, Object... msgArgs) throws JsonMappingException { throw JsonMappingException.from(getParser(), _format(msg, msgArgs));"
      },
      {
        "txt": "} @Deprecated public JsonMappingException mappingException(String message) { return JsonMappingException.from(getParser(), message); } @Deprecated public JsonMappingException mappingException(String msg, Object... msgArgs) { return JsonMappingException.from(getParser(), _format(msg, msgArgs)); } @Deprecated"
      },
      {
        "txt": "public JsonMappingException mappingException(Class<?> targetClass) { return mappingException(targetClass, _parser.getCurrentToken()); } @Deprecated public JsonMappingException mappingException(Class<?> targetClass, JsonToken token) { return JsonMappingException.from(_parser, String.format(\"Cannot deserialize instance of %s out of %s token\", ClassUtil.nameOf(targetClass), token)); } protected DateFormat getDateFormat()"
      },
      {
        "txt": "{ if (_dateFormat != null) { return _dateFormat; } DateFormat df = _config.getDateFormat(); _dateFormat = df = (DateFormat) df.clone(); return df; }"
      }
    ]
  },
  {
    "id": 1753,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/DeserializationContext.java",
    "start-bug-line": 1603,
    "end-bug-line": 1603,
    "bug": "} else if ((excMsg = cause.getMessage()) == null) {",
    "fix": "} else if ((excMsg = ClassUtil.exceptionMessage(cause)) == null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.IOException; import java.text.DateFormat; import java.text.ParseException; import java.util.*; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.JsonFormat;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdResolver; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.deser.impl.ObjectIdReader; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId; import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer; import com.fasterxml.jackson.databind.exc.MismatchedInputException; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.exc.InvalidFormatException; import com.fasterxml.jackson.databind.exc.InvalidTypeIdException; import com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.*;"
      },
      {
        "txt": "public abstract class DeserializationContext extends DatabindContext implements java.io.Serializable { private static final long serialVersionUID = 1L; // 2.6 protected final DeserializerCache _cache; protected final DeserializerFactory _factory; protected final DeserializationConfig _config; protected final int _featureFlags; protected final Class<?> _view;"
      },
      {
        "txt": "protected transient JsonParser _parser; protected final InjectableValues _injectableValues; protected transient ArrayBuilders _arrayBuilders; protected transient ObjectBuffer _objectBuffer; protected transient DateFormat _dateFormat; protected transient ContextAttributes _attributes; protected LinkedNode<JavaType> _currentType; protected DeserializationContext(DeserializerFactory df) { this(df, null); }"
      },
      {
        "txt": "protected DeserializationContext(DeserializerFactory df, DeserializerCache cache) { if (df == null) { throw new IllegalArgumentException(\"Cannot pass null DeserializerFactory\"); } _factory = df; if (cache == null) { cache = new DeserializerCache(); }"
      },
      {
        "txt": "_cache = cache; _featureFlags = 0; _config = null; _injectableValues = null; _view = null; _attributes = null; } protected DeserializationContext(DeserializationContext src, DeserializerFactory factory) {"
      },
      {
        "txt": "_cache = src._cache; _factory = factory; _config = src._config; _featureFlags = src._featureFlags; _view = src._view; _parser = src._parser; _injectableValues = src._injectableValues; _attributes = src._attributes; } protected DeserializationContext(DeserializationContext src,"
      },
      {
        "txt": "DeserializationConfig config, JsonParser p, InjectableValues injectableValues) { _cache = src._cache; _factory = src._factory; _config = config; _featureFlags = config.getDeserializationFeatures(); _view = config.getActiveView(); _parser = p; _injectableValues = injectableValues;"
      },
      {
        "txt": "_attributes = config.getAttributes(); } protected DeserializationContext(DeserializationContext src) { _cache = new DeserializerCache(); _factory = src._factory; _config = src._config; _featureFlags = src._featureFlags; _view = src._view; _injectableValues = null; }"
      },
      {
        "txt": "@Override public DeserializationConfig getConfig() { return _config; } @Override public final Class<?> getActiveView() { return _view; } @Override public final boolean canOverrideAccessModifiers() { return _config.canOverrideAccessModifiers(); } @Override public final boolean isEnabled(MapperFeature feature) {"
      },
      {
        "txt": "return _config.isEnabled(feature); } @Override public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) { return _config.getDefaultPropertyFormat(baseType); } @Override public final AnnotationIntrospector getAnnotationIntrospector() { return _config.getAnnotationIntrospector(); }"
      },
      {
        "txt": "@Override public final TypeFactory getTypeFactory() { return _config.getTypeFactory(); } @Override public Locale getLocale() { return _config.getLocale(); } @Override public TimeZone getTimeZone() {"
      },
      {
        "txt": "return _config.getTimeZone(); } @Override public Object getAttribute(Object key) { return _attributes.getAttribute(key); } @Override public DeserializationContext setAttribute(Object key, Object value) { _attributes = _attributes.withPerCallAttribute(key, value);"
      },
      {
        "txt": "return this; } public JavaType getContextualType() { return (_currentType == null) ? null : _currentType.value(); } public DeserializerFactory getFactory() { return _factory; } public final boolean isEnabled(DeserializationFeature feat) { return (_featureFlags & feat.getMask()) != 0;"
      },
      {
        "txt": "} public final int getDeserializationFeatures() { return _featureFlags; } public final boolean hasDeserializationFeatures(int featureMask) { return (_featureFlags & featureMask) == featureMask; } public final boolean hasSomeOfFeatures(int featureMask) { return (_featureFlags & featureMask) != 0; }"
      },
      {
        "txt": "public final JsonParser getParser() { return _parser; } public final Object findInjectableValue(Object valueId, BeanProperty forProperty, Object beanInstance) throws JsonMappingException { if (_injectableValues == null) { reportBadDefinition(ClassUtil.classOf(valueId), String.format( \"No 'injectableValues' configured, cannot inject value with id [%s]\", valueId)); } return _injectableValues.findInjectableValue(valueId, this, forProperty, beanInstance);"
      },
      {
        "txt": "} public final Base64Variant getBase64Variant() { return _config.getBase64Variant(); } public final JsonNodeFactory getNodeFactory() { return _config.getNodeFactory(); } public boolean hasValueDeserializerFor(JavaType type, AtomicReference<Throwable> cause) { try { return _cache.hasValueDeserializerFor(this, _factory, type);"
      },
      {
        "txt": "} catch (JsonMappingException e) { if (cause != null) { cause.set(e); } } catch (RuntimeException e) { if (cause == null) { // earlier behavior throw e; } cause.set(e); }"
      },
      {
        "txt": "return false; } @SuppressWarnings(\"unchecked\") public final JsonDeserializer<Object> findContextualValueDeserializer(JavaType type, BeanProperty prop) throws JsonMappingException { JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type); if (deser != null) { deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, prop, type); }"
      },
      {
        "txt": "return deser; } public final JsonDeserializer<Object> findNonContextualValueDeserializer(JavaType type) throws JsonMappingException { return _cache.findValueDeserializer(this, _factory, type); } @SuppressWarnings(\"unchecked\") public final JsonDeserializer<Object> findRootValueDeserializer(JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ JsonDeserializer<Object> deser = _cache.findValueDeserializer(this, _factory, type); if (deser == null) { // can this occur? return null; } deser = (JsonDeserializer<Object>) handleSecondaryContextualization(deser, null, type); TypeDeserializer typeDeser = _factory.findTypeDeserializer(_config, type); if (typeDeser != null) { typeDeser = typeDeser.forProperty(null);"
      },
      {
        "txt": "return new TypeWrappedDeserializer(typeDeser, deser); } return deser; } public final KeyDeserializer findKeyDeserializer(JavaType keyType, BeanProperty prop) throws JsonMappingException { KeyDeserializer kd = _cache.findKeyDeserializer(this, _factory, keyType); if (kd instanceof ContextualKeyDeserializer) { kd = ((ContextualKeyDeserializer) kd).createContextual(this, prop);"
      },
      {
        "txt": "} return kd; } public abstract ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> generator, ObjectIdResolver resolver); public abstract void checkUnresolvedObjectId() throws UnresolvedForwardReference; public final JavaType constructType(Class<?> cls) { return (cls == null) ? null : _config.constructType(cls); } public Class<?> findClass(String className) throws ClassNotFoundException"
      },
      {
        "txt": "{ return getTypeFactory().findClass(className); } public final ObjectBuffer leaseObjectBuffer() { ObjectBuffer buf = _objectBuffer; if (buf == null) { buf = new ObjectBuffer(); } else { _objectBuffer = null;"
      },
      {
        "txt": "} return buf; } public final void returnObjectBuffer(ObjectBuffer buf) { if (_objectBuffer == null || buf.initialCapacity() >= _objectBuffer.initialCapacity()) { _objectBuffer = buf; } }"
      },
      {
        "txt": "public final ArrayBuilders getArrayBuilders() { if (_arrayBuilders == null) { _arrayBuilders = new ArrayBuilders(); } return _arrayBuilders; } public abstract JsonDeserializer<Object> deserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException;"
      },
      {
        "txt": "public abstract KeyDeserializer keyDeserializerInstance(Annotated annotated, Object deserDef) throws JsonMappingException; public JsonDeserializer<?> handlePrimaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type) throws JsonMappingException { if (deser instanceof ContextualDeserializer) { _currentType = new LinkedNode<JavaType>(type, _currentType); try {"
      },
      {
        "txt": "deser = ((ContextualDeserializer) deser).createContextual(this, prop); } finally { _currentType = _currentType.next(); } } return deser; } public JsonDeserializer<?> handleSecondaryContextualization(JsonDeserializer<?> deser, BeanProperty prop, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ if (deser instanceof ContextualDeserializer) { _currentType = new LinkedNode<JavaType>(type, _currentType); try { deser = ((ContextualDeserializer) deser).createContextual(this, prop); } finally { _currentType = _currentType.next(); } } return deser;"
      },
      {
        "txt": "} public Date parseDate(String dateStr) throws IllegalArgumentException { try { DateFormat df = getDateFormat(); return df.parse(dateStr); } catch (ParseException e) { throw new IllegalArgumentException(String.format( \"Failed to parse Date value '%s': %s\", dateStr, e.getMessage()));"
      },
      {
        "txt": "} } public Calendar constructCalendar(Date d) { Calendar c = Calendar.getInstance(getTimeZone()); c.setTime(d); return c; } public <T> T readValue(JsonParser p, Class<T> type) throws IOException { return readValue(p, getTypeFactory().constructType(type)); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, JavaType type) throws IOException { JsonDeserializer<Object> deser = findRootValueDeserializer(type); if (deser == null) { reportBadDefinition(type, \"Could not find JsonDeserializer for type \"+type); } return (T) deser.deserialize(p, this); } public <T> T readPropertyValue(JsonParser p, BeanProperty prop, Class<T> type) throws IOException {"
      },
      {
        "txt": "return readPropertyValue(p, prop, getTypeFactory().constructType(type)); } @SuppressWarnings(\"unchecked\") public <T> T readPropertyValue(JsonParser p, BeanProperty prop, JavaType type) throws IOException { JsonDeserializer<Object> deser = findContextualValueDeserializer(type, prop); if (deser == null) { return reportBadDefinition(type, String.format( \"Could not find JsonDeserializer for type %s (via property %s)\", type, ClassUtil.nameOf(prop))); }"
      },
      {
        "txt": "return (T) deser.deserialize(p, this); } public boolean handleUnknownProperty(JsonParser p, JsonDeserializer<?> deser, Object instanceOrClass, String propName) throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { if (h.value().handleUnknownProperty(this, p, deser, instanceOrClass, propName)) { return true;"
      },
      {
        "txt": "} h = h.next(); } if (!isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) { p.skipChildren(); return true; } Collection<Object> propIds = (deser == null) ? null : deser.getKnownPropertyNames(); throw UnrecognizedPropertyException.from(_parser, instanceOrClass, propName, propIds);"
      },
      {
        "txt": "} public Object handleWeirdKey(Class<?> keyClass, String keyValue, String msg, Object... msgArgs) throws IOException { msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object key = h.value().handleWeirdKey(this, keyClass, keyValue, msg); if (key != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if ((key == null) || keyClass.isInstance(key)) { return key; } throw weirdStringException(keyValue, keyClass, String.format( \"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\", keyClass, key.getClass())); } h = h.next(); } throw weirdKeyException(keyClass, keyValue, msg);"
      },
      {
        "txt": "} public Object handleWeirdStringValue(Class<?> targetClass, String value, String msg, Object... msgArgs) throws IOException { msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleWeirdStringValue(this, targetClass, value, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if (_isCompatible(targetClass, instance)) { return instance; } throw weirdStringException(value, targetClass, String.format( \"DeserializationProblemHandler.handleWeirdStringValue() for type %s returned value of type %s\", targetClass, instance.getClass())); } h = h.next(); } throw weirdStringException(value, targetClass, msg);"
      },
      {
        "txt": "} public Object handleWeirdNumberValue(Class<?> targetClass, Number value, String msg, Object... msgArgs) throws IOException { msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object key = h.value().handleWeirdNumberValue(this, targetClass, value, msg); if (key != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if (_isCompatible(targetClass, key)) { return key; } throw weirdNumberException(value, targetClass, _format( \"DeserializationProblemHandler.handleWeirdNumberValue() for type %s returned value of type %s\", targetClass, key.getClass())); } h = h.next(); } throw weirdNumberException(value, targetClass, msg);"
      },
      {
        "txt": "} public Object handleWeirdNativeValue(JavaType targetType, Object badValue, JsonParser p) throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); final Class<?> raw = targetType.getRawClass(); for (; h != null; h = h.next()) { Object goodValue = h.value().handleWeirdNativeValue(this, targetType, badValue, p); if (goodValue != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if ((goodValue == null) || raw.isInstance(goodValue)) { return goodValue; } throw JsonMappingException.from(p, _format( \"DeserializationProblemHandler.handleWeirdNativeValue() for type %s returned value of type %s\", targetType, goodValue.getClass())); } } throw weirdNativeValueException(badValue, raw); }"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") public Object handleMissingInstantiator(Class<?> instClass, ValueInstantiator valueInst, JsonParser p, String msg, Object... msgArgs) throws IOException { if (p == null) { p = getParser(); } msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers();"
      },
      {
        "txt": "while (h != null) { Object instance = h.value().handleMissingInstantiator(this, instClass, valueInst, p, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(instClass, instance)) { return instance; } reportBadDefinition(constructType(instClass), String.format( \"DeserializationProblemHandler.handleMissingInstantiator() for type %s returned value of type %s\", instClass, ClassUtil.classNameOf(instance)));"
      },
      {
        "txt": "} h = h.next(); } if ((valueInst != null) && !valueInst.canInstantiate()) { msg = String.format(\"Cannot construct instance of %s (no Creators, like default construct, exist): %s\", ClassUtil.nameOf(instClass), msg); return reportBadDefinition(constructType(instClass), msg); } msg = String.format(\"Cannot construct instance of %s (although at least one Creator exists): %s\", ClassUtil.nameOf(instClass), msg);"
      },
      {
        "txt": "return reportInputMismatch(instClass, msg); } public Object handleInstantiationProblem(Class<?> instClass, Object argument, Throwable t) throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleInstantiationProblem(this, instClass, argument, t); if (instance != DeserializationProblemHandler.NOT_HANDLED) {"
      },
      {
        "txt": "if (_isCompatible(instClass, instance)) { return instance; } reportBadDefinition(constructType(instClass), String.format( \"DeserializationProblemHandler.handleInstantiationProblem() for type %s returned value of type %s\", instClass, ClassUtil.classNameOf(instance))); } h = h.next(); } ClassUtil.throwIfIOE(t);"
      },
      {
        "txt": "throw instantiationException(instClass, t); } public Object handleUnexpectedToken(Class<?> instClass, JsonParser p) throws IOException { return handleUnexpectedToken(instClass, p.getCurrentToken(), p, null); } public Object handleUnexpectedToken(Class<?> instClass, JsonToken t, JsonParser p, String msg, Object... msgArgs) throws IOException"
      },
      {
        "txt": "{ msg = _format(msg, msgArgs); LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { Object instance = h.value().handleUnexpectedToken(this, instClass, t, p, msg); if (instance != DeserializationProblemHandler.NOT_HANDLED) { if (_isCompatible(instClass, instance)) { return instance; }"
      },
      {
        "txt": "reportBadDefinition(constructType(instClass), String.format( \"DeserializationProblemHandler.handleUnexpectedToken() for type %s returned value of type %s\", ClassUtil.nameOf(instClass), ClassUtil.classNameOf(instance))); } h = h.next(); } if (msg == null) { if (t == null) { msg = String.format(\"Unexpected end-of-input when binding data into %s\", ClassUtil.nameOf(instClass));"
      },
      {
        "txt": "} else { msg = String.format(\"Cannot deserialize instance of %s out of %s token\", ClassUtil.nameOf(instClass), t); } } reportInputMismatch(instClass, msg); return null; // never gets here } public JavaType handleUnknownTypeId(JavaType baseType, String id, TypeIdResolver idResolver, String extraDesc) throws IOException"
      },
      {
        "txt": "{ LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { JavaType type = h.value().handleUnknownTypeId(this, baseType, id, idResolver, extraDesc); if (type != null) { if (type.hasRawClass(Void.class)) { return null; } if (type.isTypeOrSubTypeOf(baseType.getRawClass())) { return type;"
      },
      {
        "txt": "} throw invalidTypeIdException(baseType, id, \"problem handler tried to resolve into non-subtype: \"+type); } h = h.next(); } if (!isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return null; } throw invalidTypeIdException(baseType, id, extraDesc);"
      },
      {
        "txt": "} public JavaType handleMissingTypeId(JavaType baseType, TypeIdResolver idResolver, String extraDesc) throws IOException { LinkedNode<DeserializationProblemHandler> h = _config.getProblemHandlers(); while (h != null) { JavaType type = h.value().handleMissingTypeId(this, baseType, idResolver, extraDesc); if (type != null) { if (type.hasRawClass(Void.class)) { return null;"
      },
      {
        "txt": "} if (type.isTypeOrSubTypeOf(baseType.getRawClass())) { return type; } throw invalidTypeIdException(baseType, null, \"problem handler tried to resolve into non-subtype: \"+type); } h = h.next(); } throw missingTypeIdException(baseType, extraDesc);"
      },
      {
        "txt": "} protected boolean _isCompatible(Class<?> target, Object value) { if ((value == null) || target.isInstance(value)) { return true; } return target.isPrimitive() && ClassUtil.wrapperType(target).isInstance(value); } public void reportWrongTokenException(JsonDeserializer<?> deser,"
      },
      {
        "txt": "JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw wrongTokenException(getParser(), deser.handledType(), expToken, msg); } public void reportWrongTokenException(JavaType targetType, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException {"
      },
      {
        "txt": "msg = _format(msg, msgArgs); throw wrongTokenException(getParser(), targetType, expToken, msg); } public void reportWrongTokenException(Class<?> targetType, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw wrongTokenException(getParser(), targetType, expToken, msg); }"
      },
      {
        "txt": "public <T> T reportUnresolvedObjectId(ObjectIdReader oidReader, Object bean) throws JsonMappingException { String msg = String.format(\"No Object Id found for an instance of %s, to assign to property '%s'\", ClassUtil.classNameOf(bean), oidReader.propertyName); return reportInputMismatch(oidReader.idProperty, msg); } public <T> T reportInputMismatch(BeanProperty prop, String msg, Object... msgArgs) throws JsonMappingException {"
      },
      {
        "txt": "msg = _format(msg, msgArgs); JavaType type = (prop == null) ? null : prop.getType(); throw MismatchedInputException.from(getParser(), type, msg); } public <T> T reportInputMismatch(JsonDeserializer<?> src, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw MismatchedInputException.from(getParser(), src.handledType(), msg); }"
      },
      {
        "txt": "public <T> T reportInputMismatch(Class<?> targetType, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw MismatchedInputException.from(getParser(), targetType, msg); } public <T> T reportInputMismatch(JavaType targetType, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs);"
      },
      {
        "txt": "throw MismatchedInputException.from(getParser(), targetType, msg); } public <T> T reportTrailingTokens(Class<?> targetType, JsonParser p, JsonToken trailingToken) throws JsonMappingException { throw MismatchedInputException.from(p, targetType, String.format( \"Trailing token (of type %s) found after value (bound as %s): not allowed as per `DeserializationFeature.FAIL_ON_TRAILING_TOKENS`\", trailingToken, ClassUtil.nameOf(targetType) )); }"
      },
      {
        "txt": "@Deprecated // since 2.9 public void reportWrongTokenException(JsonParser p, JsonToken expToken, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); throw wrongTokenException(p, expToken, msg); } @Deprecated public void reportUnknownProperty(Object instanceOrClass, String fieldName,"
      },
      {
        "txt": "JsonDeserializer<?> deser) throws JsonMappingException { if (isEnabled(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)) { Collection<Object> propIds = (deser == null) ? null : deser.getKnownPropertyNames(); throw UnrecognizedPropertyException.from(_parser, instanceOrClass, fieldName, propIds); } } @Deprecated // since 2.9"
      },
      {
        "txt": "public void reportMissingContent(String msg, Object... msgArgs) throws JsonMappingException { throw MismatchedInputException.from(getParser(), (JavaType) null, \"No content to map due to end-of-input\"); } public <T> T reportBadTypeDefinition(BeanDescription bean, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); String beanDesc = ClassUtil.nameOf(bean.getBeanClass()); msg = String.format(\"Invalid type definition for type %s: %s\", beanDesc, msg); throw InvalidDefinitionException.from(_parser, msg, bean, null); }"
      },
      {
        "txt": "public <T> T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String msg, Object... msgArgs) throws JsonMappingException { msg = _format(msg, msgArgs); String propName = ClassUtil.nameOf(prop); String beanDesc = ClassUtil.nameOf(bean.getBeanClass()); msg = String.format(\"Invalid definition for property %s (of type %s): %s\", propName, beanDesc, msg); throw InvalidDefinitionException.from(_parser, msg, bean, prop); } @Override"
      },
      {
        "txt": "public <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException { throw InvalidDefinitionException.from(_parser, msg, type); } public <T> T reportBadMerge(JsonDeserializer<?> deser) throws JsonMappingException { if (isEnabled(MapperFeature.IGNORE_MERGE_FOR_UNMERGEABLE)) { return null; } JavaType type = constructType(deser.handledType()); String msg = String.format(\"Invalid configuration: values of type %s cannot be merged\", type);"
      },
      {
        "txt": "throw InvalidDefinitionException.from(getParser(), msg, type); } public JsonMappingException wrongTokenException(JsonParser p, JavaType targetType, JsonToken expToken, String extra) { String msg = String.format(\"Unexpected token (%s), expected %s\", p.getCurrentToken(), expToken); msg = _colonConcat(msg, extra); return MismatchedInputException.from(p, targetType, msg); }"
      },
      {
        "txt": "public JsonMappingException wrongTokenException(JsonParser p, Class<?> targetType, JsonToken expToken, String extra) { String msg = String.format(\"Unexpected token (%s), expected %s\", p.getCurrentToken(), expToken); msg = _colonConcat(msg, extra); return MismatchedInputException.from(p, targetType, msg); } @Deprecated // since 2.9 public JsonMappingException wrongTokenException(JsonParser p, JsonToken expToken,"
      },
      {
        "txt": "String msg) { return wrongTokenException(p, (JavaType) null, expToken, msg); } public JsonMappingException weirdKeyException(Class<?> keyClass, String keyValue, String msg) { return InvalidFormatException.from(_parser, String.format(\"Cannot deserialize Map key of type %s from String %s: %s\", ClassUtil.nameOf(keyClass), _quotedString(keyValue), msg), keyValue, keyClass);"
      },
      {
        "txt": "} public JsonMappingException weirdStringException(String value, Class<?> instClass, String msg) { return InvalidFormatException.from(_parser, String.format(\"Cannot deserialize value of type %s from String %s: %s\", ClassUtil.nameOf(instClass), _quotedString(value), msg), value, instClass); } public JsonMappingException weirdNumberException(Number value, Class<?> instClass, String msg) {"
      },
      {
        "txt": "return InvalidFormatException.from(_parser, String.format(\"Cannot deserialize value of type %s from number %s: %s\", ClassUtil.nameOf(instClass), String.valueOf(value), msg), value, instClass); } public JsonMappingException weirdNativeValueException(Object value, Class<?> instClass) { return InvalidFormatException.from(_parser, String.format( \"Cannot deserialize value of type %s from native value (`JsonToken.VALUE_EMBEDDED_OBJECT`) of type %s: incompatible types\", ClassUtil.nameOf(instClass), ClassUtil.classNameOf(value)),"
      },
      {
        "txt": "} public JsonMappingException instantiationException(Class<?> instClass, Throwable cause) { final JavaType type = constructType(instClass); String excMsg; if (cause == null) { excMsg = \"N/A\"; <extra_id_0> excMsg = ClassUtil.nameOf(cause.getClass()); } String msg = String.format(\"Cannot construct instance of %s, problem: %s\", ClassUtil.nameOf(instClass), excMsg); InvalidDefinitionException e = InvalidDefinitionException.from(_parser, msg, type); e.initCause(cause);"
      },
      {
        "txt": "InvalidDefinitionException e = InvalidDefinitionException.from(_parser, msg, type); e.initCause(cause); return e; } public JsonMappingException instantiationException(Class<?> instClass, String msg0) { JavaType type = constructType(instClass); String msg = String.format(\"Cannot construct instance of %s: %s\", ClassUtil.nameOf(instClass), msg0); return InvalidDefinitionException.from(_parser, msg, type); }"
      },
      {
        "txt": "@Override public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' as a subtype of %s\", typeId, baseType); return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, typeId); } public JsonMappingException missingTypeIdException(JavaType baseType, String extraDesc) { String msg = String.format(\"Missing type id when trying to resolve subtype of %s\","
      },
      {
        "txt": "baseType); return InvalidTypeIdException.from(_parser, _colonConcat(msg, extraDesc), baseType, null); } @Deprecated public JsonMappingException unknownTypeException(JavaType type, String id, String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' into a subtype of %s\", id, type); msg = _colonConcat(msg, extraDesc);"
      },
      {
        "txt": "return MismatchedInputException.from(_parser, type, msg); } @Deprecated public JsonMappingException endOfInputException(Class<?> instClass) { return MismatchedInputException.from(_parser, instClass, \"Unexpected end-of-input when trying to deserialize a \"+instClass.getName()); } @Deprecated // since 2.9 public void reportMappingException(String msg, Object... msgArgs) throws JsonMappingException"
      },
      {
        "txt": "{ throw JsonMappingException.from(getParser(), _format(msg, msgArgs)); } @Deprecated public JsonMappingException mappingException(String message) { return JsonMappingException.from(getParser(), message); } @Deprecated public JsonMappingException mappingException(String msg, Object... msgArgs) { return JsonMappingException.from(getParser(), _format(msg, msgArgs));"
      },
      {
        "txt": "} @Deprecated public JsonMappingException mappingException(Class<?> targetClass) { return mappingException(targetClass, _parser.getCurrentToken()); } @Deprecated public JsonMappingException mappingException(Class<?> targetClass, JsonToken token) { return JsonMappingException.from(_parser, String.format(\"Cannot deserialize instance of %s out of %s token\", ClassUtil.nameOf(targetClass), token));"
      },
      {
        "txt": "} protected DateFormat getDateFormat() { if (_dateFormat != null) { return _dateFormat; } DateFormat df = _config.getDateFormat(); _dateFormat = df = (DateFormat) df.clone(); return df; }"
      }
    ]
  },
  {
    "id": 1754,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
    "start-bug-line": 10,
    "end-bug-line": 10,
    "bug": "",
    "fix": "import com.fasterxml.jackson.databind.util.ClassUtil;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Closeable; import java.io.IOException; import java.io.Serializable; import java.util.*; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.core.*; <extra_id_0> public class JsonMappingException extends JsonProcessingException { private static final long serialVersionUID = 1L; final static int MAX_REFS_TO_LIST = 1000; public static class Reference implements Serializable"
      },
      {
        "txt": "final static int MAX_REFS_TO_LIST = 1000; public static class Reference implements Serializable { private static final long serialVersionUID = 2L; // changes between 2.7 and 2.8 protected transient Object _from; protected String _fieldName; protected int _index = -1; protected String _desc; protected Reference() { } public Reference(Object from) { _from = from; }"
      },
      {
        "txt": "public Reference(Object from, String fieldName) { _from = from; if (fieldName == null) { throw new NullPointerException(\"Cannot pass null fieldName\"); } _fieldName = fieldName; } public Reference(Object from, int index) { _from = from; _index = index;"
      },
      {
        "txt": "} void setFieldName(String n) { _fieldName = n; } void setIndex(int ix) { _index = ix; } void setDescription(String d) { _desc = d; } @JsonIgnore public Object getFrom() { return _from; } public String getFieldName() { return _fieldName; } public int getIndex() { return _index; } public String getDescription() { if (_desc == null) {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); if (_from == null) { // can this ever occur? sb.append(\"UNKNOWN\"); } else { Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass(); int arrays = 0; while (cls.isArray()) { cls = cls.getComponentType(); ++arrays; }"
      },
      {
        "txt": "sb.append(cls.getName()); while (--arrays >= 0) { sb.append(\"[]\"); } String pkgName = ClassUtil.getPackageName(cls); if (pkgName != null) { sb.append(pkgName); sb.append('.'); } }"
      },
      {
        "txt": "sb.append('['); if (_fieldName != null) { sb.append('\"'); sb.append(_fieldName); sb.append('\"'); } else if (_index >= 0) { sb.append(_index); } else { sb.append('?'); }"
      },
      {
        "txt": "sb.append(']'); _desc = sb.toString(); } return _desc; } @Override public String toString() { return getDescription(); } Object writeReplace() {"
      },
      {
        "txt": "getDescription(); return this; } } protected LinkedList<Reference> _path; protected transient Closeable _processor; @Deprecated // since 2.7 public JsonMappingException(String msg) { super(msg); } @Deprecated // since 2.7 public JsonMappingException(String msg, Throwable rootCause) { super(msg, rootCause); }"
      },
      {
        "txt": "@Deprecated // since 2.7 public JsonMappingException(String msg, JsonLocation loc) { super(msg, loc); } @Deprecated // since 2.7 public JsonMappingException(String msg, JsonLocation loc, Throwable rootCause) { super(msg, loc, rootCause); } public JsonMappingException(Closeable processor, String msg) { super(msg); _processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation(); }"
      },
      {
        "txt": "} public JsonMappingException(Closeable processor, String msg, Throwable problem) { super(msg, problem); _processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation(); } } public JsonMappingException(Closeable processor, String msg, JsonLocation loc) { super(msg, loc);"
      },
      {
        "txt": "_processor = processor; } public static JsonMappingException from(JsonParser p, String msg) { return new JsonMappingException(p, msg); } public static JsonMappingException from(JsonParser p, String msg, Throwable problem) { return new JsonMappingException(p, msg, problem); } public static JsonMappingException from(JsonGenerator g, String msg) { return new JsonMappingException(g, msg, (Throwable) null);"
      },
      {
        "txt": "} public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) { return new JsonMappingException(g, msg, problem); } public static JsonMappingException from(DeserializationContext ctxt, String msg) { return new JsonMappingException(ctxt.getParser(), msg); } public static JsonMappingException from(DeserializationContext ctxt, String msg, Throwable t) { return new JsonMappingException(ctxt.getParser(), msg, t); }"
      },
      {
        "txt": "public static JsonMappingException from(SerializerProvider ctxt, String msg) { return new JsonMappingException(ctxt.getGenerator(), msg); } public static JsonMappingException from(SerializerProvider ctxt, String msg, Throwable problem) { return new JsonMappingException(ctxt.getGenerator(), msg, problem); } public static JsonMappingException fromUnexpectedIOE(IOException src) { return new JsonMappingException(null, String.format(\"Unexpected IOException (of type %s): %s\", src.getClass().getName(),"
      },
      {
        "txt": "src.getMessage())); } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, String refFieldName) { return wrapWithPath(src, new Reference(refFrom, refFieldName)); } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) { return wrapWithPath(src, new Reference(refFrom, index)); } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "public static JsonMappingException wrapWithPath(Throwable src, Reference ref) { JsonMappingException jme; if (src instanceof JsonMappingException) { jme = (JsonMappingException) src; } else { String msg = src.getMessage(); if (msg == null || msg.length() == 0) { msg = \"(was \"+src.getClass().getName()+\")\"; }"
      },
      {
        "txt": "Closeable proc = null; if (src instanceof JsonProcessingException) { Object proc0 = ((JsonProcessingException) src).getProcessor(); if (proc0 instanceof Closeable) { proc = (Closeable) proc0; } } jme = new JsonMappingException(proc, msg, src); } jme.prependPath(ref);"
      },
      {
        "txt": "return jme; } public List<Reference> getPath() { if (_path == null) { return Collections.emptyList(); } return Collections.unmodifiableList(_path); } public String getPathReference()"
      },
      {
        "txt": "{ return getPathReference(new StringBuilder()).toString(); } public StringBuilder getPathReference(StringBuilder sb) { _appendPathDesc(sb); return sb; } public void prependPath(Object referrer, String fieldName) {"
      },
      {
        "txt": "Reference ref = new Reference(referrer, fieldName); prependPath(ref); } public void prependPath(Object referrer, int index) { Reference ref = new Reference(referrer, index); prependPath(ref); } public void prependPath(Reference r) {"
      },
      {
        "txt": "if (_path == null) { _path = new LinkedList<Reference>(); } if (_path.size() < MAX_REFS_TO_LIST) { _path.addFirst(r); } } @Override // since 2.7.5 @JsonIgnore // as per [databind#1368] public Object getProcessor() { return _processor; }"
      },
      {
        "txt": "@Override public String getLocalizedMessage() { return _buildMessage(); } @Override public String getMessage() { return _buildMessage(); } protected String _buildMessage() {"
      },
      {
        "txt": "String msg = super.getMessage(); if (_path == null) { return msg; } StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg); sb.append(\" (through reference chain: \"); sb = getPathReference(sb); sb.append(')'); return sb.toString(); }"
      },
      {
        "txt": "@Override public String toString() { return getClass().getName()+\": \"+getMessage(); } protected void _appendPathDesc(StringBuilder sb) { if (_path == null) { return; }"
      },
      {
        "txt": "Iterator<Reference> it = _path.iterator(); while (it.hasNext()) { sb.append(it.next().toString()); if (it.hasNext()) { sb.append(\"->\"); } } }"
      }
    ]
  },
  {
    "id": 1755,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
    "start-bug-line": 339,
    "end-bug-line": 339,
    "bug": "src.getMessage()));",
    "fix": "ClassUtil.exceptionMessage(src)));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.Closeable; import java.io.IOException; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.core.*; public class JsonMappingException extends JsonProcessingException { private static final long serialVersionUID = 1L; final static int MAX_REFS_TO_LIST = 1000; public static class Reference implements Serializable {"
      },
      {
        "txt": "private static final long serialVersionUID = 2L; // changes between 2.7 and 2.8 protected transient Object _from; protected String _fieldName; protected int _index = -1; protected String _desc; protected Reference() { } public Reference(Object from) { _from = from; } public Reference(Object from, String fieldName) { _from = from; if (fieldName == null) {"
      },
      {
        "txt": "throw new NullPointerException(\"Cannot pass null fieldName\"); } _fieldName = fieldName; } public Reference(Object from, int index) { _from = from; _index = index; } void setFieldName(String n) { _fieldName = n; } void setIndex(int ix) { _index = ix; }"
      },
      {
        "txt": "void setDescription(String d) { _desc = d; } @JsonIgnore public Object getFrom() { return _from; } public String getFieldName() { return _fieldName; } public int getIndex() { return _index; } public String getDescription() { if (_desc == null) { StringBuilder sb = new StringBuilder(); if (_from == null) { // can this ever occur? sb.append(\"UNKNOWN\");"
      },
      {
        "txt": "} else { Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass(); int arrays = 0; while (cls.isArray()) { cls = cls.getComponentType(); ++arrays; } sb.append(cls.getName()); while (--arrays >= 0) { sb.append(\"[]\");"
      },
      {
        "txt": "} String pkgName = ClassUtil.getPackageName(cls); if (pkgName != null) { sb.append(pkgName); sb.append('.'); } } sb.append('['); if (_fieldName != null) { sb.append('\"');"
      },
      {
        "txt": "sb.append(_fieldName); sb.append('\"'); } else if (_index >= 0) { sb.append(_index); } else { sb.append('?'); } sb.append(']'); _desc = sb.toString(); }"
      },
      {
        "txt": "return _desc; } @Override public String toString() { return getDescription(); } Object writeReplace() { getDescription(); return this; }"
      },
      {
        "txt": "} protected LinkedList<Reference> _path; protected transient Closeable _processor; @Deprecated // since 2.7 public JsonMappingException(String msg) { super(msg); } @Deprecated // since 2.7 public JsonMappingException(String msg, Throwable rootCause) { super(msg, rootCause); } @Deprecated // since 2.7 public JsonMappingException(String msg, JsonLocation loc) { super(msg, loc); } @Deprecated // since 2.7"
      },
      {
        "txt": "public JsonMappingException(String msg, JsonLocation loc, Throwable rootCause) { super(msg, loc, rootCause); } public JsonMappingException(Closeable processor, String msg) { super(msg); _processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation(); } } public JsonMappingException(Closeable processor, String msg, Throwable problem) { super(msg, problem);"
      },
      {
        "txt": "_processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation(); } } public JsonMappingException(Closeable processor, String msg, JsonLocation loc) { super(msg, loc); _processor = processor; } public static JsonMappingException from(JsonParser p, String msg) {"
      },
      {
        "txt": "return new JsonMappingException(p, msg); } public static JsonMappingException from(JsonParser p, String msg, Throwable problem) { return new JsonMappingException(p, msg, problem); } public static JsonMappingException from(JsonGenerator g, String msg) { return new JsonMappingException(g, msg, (Throwable) null); } public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) { return new JsonMappingException(g, msg, problem);"
      },
      {
        "txt": "} public static JsonMappingException from(DeserializationContext ctxt, String msg) { return new JsonMappingException(ctxt.getParser(), msg); } public static JsonMappingException from(DeserializationContext ctxt, String msg, Throwable t) { return new JsonMappingException(ctxt.getParser(), msg, t); } public static JsonMappingException from(SerializerProvider ctxt, String msg) { return new JsonMappingException(ctxt.getGenerator(), msg); }"
      },
      {
        "txt": "return new JsonMappingException(ctxt.getGenerator(), msg, problem); } public static JsonMappingException fromUnexpectedIOE(IOException src) { return new JsonMappingException(null, String.format(\"Unexpected IOException (of type %s): %s\", src.getClass().getName(), <extra_id_0> } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, String refFieldName) { return wrapWithPath(src, new Reference(refFrom, refFieldName)); } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) {"
      },
      {
        "txt": "} public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) { return wrapWithPath(src, new Reference(refFrom, index)); } @SuppressWarnings(\"resource\") public static JsonMappingException wrapWithPath(Throwable src, Reference ref) { JsonMappingException jme; if (src instanceof JsonMappingException) { jme = (JsonMappingException) src;"
      },
      {
        "txt": "} else { String msg = src.getMessage(); if (msg == null || msg.length() == 0) { msg = \"(was \"+src.getClass().getName()+\")\"; } Closeable proc = null; if (src instanceof JsonProcessingException) { Object proc0 = ((JsonProcessingException) src).getProcessor(); if (proc0 instanceof Closeable) { proc = (Closeable) proc0;"
      },
      {
        "txt": "} } jme = new JsonMappingException(proc, msg, src); } jme.prependPath(ref); return jme; } public List<Reference> getPath() { if (_path == null) {"
      },
      {
        "txt": "return Collections.emptyList(); } return Collections.unmodifiableList(_path); } public String getPathReference() { return getPathReference(new StringBuilder()).toString(); } public StringBuilder getPathReference(StringBuilder sb) {"
      },
      {
        "txt": "_appendPathDesc(sb); return sb; } public void prependPath(Object referrer, String fieldName) { Reference ref = new Reference(referrer, fieldName); prependPath(ref); } public void prependPath(Object referrer, int index) {"
      },
      {
        "txt": "Reference ref = new Reference(referrer, index); prependPath(ref); } public void prependPath(Reference r) { if (_path == null) { _path = new LinkedList<Reference>(); } if (_path.size() < MAX_REFS_TO_LIST) { _path.addFirst(r);"
      },
      {
        "txt": "} } @Override // since 2.7.5 @JsonIgnore // as per [databind#1368] public Object getProcessor() { return _processor; } @Override public String getLocalizedMessage() { return _buildMessage(); } @Override"
      },
      {
        "txt": "public String getMessage() { return _buildMessage(); } protected String _buildMessage() { String msg = super.getMessage(); if (_path == null) { return msg; } StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg);"
      },
      {
        "txt": "sb.append(\" (through reference chain: \"); sb = getPathReference(sb); sb.append(')'); return sb.toString(); } @Override public String toString() { return getClass().getName()+\": \"+getMessage(); }"
      },
      {
        "txt": "protected void _appendPathDesc(StringBuilder sb) { if (_path == null) { return; } Iterator<Reference> it = _path.iterator(); while (it.hasNext()) { sb.append(it.next().toString()); if (it.hasNext()) { sb.append(\"->\");"
      },
      {
        "txt": "} } }"
      }
    ]
  },
  {
    "id": 1756,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/JsonMappingException.java",
    "start-bug-line": 380,
    "end-bug-line": 380,
    "bug": "String msg = src.getMessage();",
    "fix": "String msg = ClassUtil.exceptionMessage(src);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.Closeable; import java.io.IOException; import java.io.Serializable; import java.util.*; import com.fasterxml.jackson.annotation.JsonIgnore; import com.fasterxml.jackson.core.*; public class JsonMappingException extends JsonProcessingException {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; final static int MAX_REFS_TO_LIST = 1000; public static class Reference implements Serializable { private static final long serialVersionUID = 2L; // changes between 2.7 and 2.8 protected transient Object _from; protected String _fieldName; protected int _index = -1; protected String _desc; protected Reference() { }"
      },
      {
        "txt": "public Reference(Object from) { _from = from; } public Reference(Object from, String fieldName) { _from = from; if (fieldName == null) { throw new NullPointerException(\"Cannot pass null fieldName\"); } _fieldName = fieldName; } public Reference(Object from, int index) { _from = from;"
      },
      {
        "txt": "_index = index; } void setFieldName(String n) { _fieldName = n; } void setIndex(int ix) { _index = ix; } void setDescription(String d) { _desc = d; } @JsonIgnore public Object getFrom() { return _from; } public String getFieldName() { return _fieldName; } public int getIndex() { return _index; } public String getDescription() {"
      },
      {
        "txt": "if (_desc == null) { StringBuilder sb = new StringBuilder(); if (_from == null) { // can this ever occur? sb.append(\"UNKNOWN\"); } else { Class<?> cls = (_from instanceof Class<?>) ? (Class<?>)_from : _from.getClass(); int arrays = 0; while (cls.isArray()) { cls = cls.getComponentType(); ++arrays;"
      },
      {
        "txt": "} sb.append(cls.getName()); while (--arrays >= 0) { sb.append(\"[]\"); } String pkgName = ClassUtil.getPackageName(cls); if (pkgName != null) { sb.append(pkgName); sb.append('.'); }"
      },
      {
        "txt": "} sb.append('['); if (_fieldName != null) { sb.append('\"'); sb.append(_fieldName); sb.append('\"'); } else if (_index >= 0) { sb.append(_index); } else { sb.append('?');"
      },
      {
        "txt": "} sb.append(']'); _desc = sb.toString(); } return _desc; } @Override public String toString() { return getDescription(); }"
      },
      {
        "txt": "Object writeReplace() { getDescription(); return this; } } protected LinkedList<Reference> _path; protected transient Closeable _processor; @Deprecated // since 2.7 public JsonMappingException(String msg) { super(msg); } @Deprecated // since 2.7"
      },
      {
        "txt": "public JsonMappingException(String msg, Throwable rootCause) { super(msg, rootCause); } @Deprecated // since 2.7 public JsonMappingException(String msg, JsonLocation loc) { super(msg, loc); } @Deprecated // since 2.7 public JsonMappingException(String msg, JsonLocation loc, Throwable rootCause) { super(msg, loc, rootCause); } public JsonMappingException(Closeable processor, String msg) { super(msg); _processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation();"
      },
      {
        "txt": "} } public JsonMappingException(Closeable processor, String msg, Throwable problem) { super(msg, problem); _processor = processor; if (processor instanceof JsonParser) { _location = ((JsonParser) processor).getTokenLocation(); } } public JsonMappingException(Closeable processor, String msg, JsonLocation loc) {"
      },
      {
        "txt": "super(msg, loc); _processor = processor; } public static JsonMappingException from(JsonParser p, String msg) { return new JsonMappingException(p, msg); } public static JsonMappingException from(JsonParser p, String msg, Throwable problem) { return new JsonMappingException(p, msg, problem); } public static JsonMappingException from(JsonGenerator g, String msg) {"
      },
      {
        "txt": "return new JsonMappingException(g, msg, (Throwable) null); } public static JsonMappingException from(JsonGenerator g, String msg, Throwable problem) { return new JsonMappingException(g, msg, problem); } public static JsonMappingException from(DeserializationContext ctxt, String msg) { return new JsonMappingException(ctxt.getParser(), msg); } public static JsonMappingException from(DeserializationContext ctxt, String msg, Throwable t) { return new JsonMappingException(ctxt.getParser(), msg, t);"
      },
      {
        "txt": "} public static JsonMappingException from(SerializerProvider ctxt, String msg) { return new JsonMappingException(ctxt.getGenerator(), msg); } public static JsonMappingException from(SerializerProvider ctxt, String msg, Throwable problem) { return new JsonMappingException(ctxt.getGenerator(), msg, problem); } public static JsonMappingException fromUnexpectedIOE(IOException src) { return new JsonMappingException(null, String.format(\"Unexpected IOException (of type %s): %s\","
      },
      {
        "txt": "src.getClass().getName(), src.getMessage())); } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, String refFieldName) { return wrapWithPath(src, new Reference(refFrom, refFieldName)); } public static JsonMappingException wrapWithPath(Throwable src, Object refFrom, int index) { return wrapWithPath(src, new Reference(refFrom, index)); }"
      },
      {
        "txt": "public static JsonMappingException wrapWithPath(Throwable src, Reference ref) { JsonMappingException jme; if (src instanceof JsonMappingException) { jme = (JsonMappingException) src; } else { <extra_id_0> if (msg == null || msg.length() == 0) { msg = \"(was \"+src.getClass().getName()+\")\"; } Closeable proc = null; if (src instanceof JsonProcessingException) { Object proc0 = ((JsonProcessingException) src).getProcessor();"
      },
      {
        "txt": "if (src instanceof JsonProcessingException) { Object proc0 = ((JsonProcessingException) src).getProcessor(); if (proc0 instanceof Closeable) { proc = (Closeable) proc0; } } jme = new JsonMappingException(proc, msg, src); } jme.prependPath(ref); return jme;"
      },
      {
        "txt": "} public List<Reference> getPath() { if (_path == null) { return Collections.emptyList(); } return Collections.unmodifiableList(_path); } public String getPathReference() {"
      },
      {
        "txt": "return getPathReference(new StringBuilder()).toString(); } public StringBuilder getPathReference(StringBuilder sb) { _appendPathDesc(sb); return sb; } public void prependPath(Object referrer, String fieldName) { Reference ref = new Reference(referrer, fieldName);"
      },
      {
        "txt": "prependPath(ref); } public void prependPath(Object referrer, int index) { Reference ref = new Reference(referrer, index); prependPath(ref); } public void prependPath(Reference r) { if (_path == null) {"
      },
      {
        "txt": "_path = new LinkedList<Reference>(); } if (_path.size() < MAX_REFS_TO_LIST) { _path.addFirst(r); } } @Override // since 2.7.5 @JsonIgnore // as per [databind#1368] public Object getProcessor() { return _processor; } @Override"
      },
      {
        "txt": "public String getLocalizedMessage() { return _buildMessage(); } @Override public String getMessage() { return _buildMessage(); } protected String _buildMessage() { String msg = super.getMessage();"
      },
      {
        "txt": "if (_path == null) { return msg; } StringBuilder sb = (msg == null) ? new StringBuilder() : new StringBuilder(msg); sb.append(\" (through reference chain: \"); sb = getPathReference(sb); sb.append(')'); return sb.toString(); } @Override"
      },
      {
        "txt": "public String toString() { return getClass().getName()+\": \"+getMessage(); } protected void _appendPathDesc(StringBuilder sb) { if (_path == null) { return; } Iterator<Reference> it = _path.iterator();"
      },
      {
        "txt": "while (it.hasNext()) { sb.append(it.next().toString()); if (it.hasNext()) { sb.append(\"->\"); } } }"
      }
    ]
  },
  {
    "id": 1757,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
    "start-bug-line": 1341,
    "end-bug-line": 1341,
    "bug": "reportMappingProblem(iae, iae.getMessage());",
    "fix": "reportMappingProblem(iae, ClassUtil.exceptionMessage(iae));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.IOException; import java.text.DateFormat; import java.util.Date; import java.util.Locale; import java.util.TimeZone; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.ContextualDeserializer; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.exc.InvalidTypeIdException; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.impl.FailingSerializer; import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap; import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer; import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer; import com.fasterxml.jackson.databind.ser.impl.WritableObjectId; import com.fasterxml.jackson.databind.ser.std.NullSerializer; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class SerializerProvider extends DatabindContext"
      },
      {
        "txt": "{ protected final static boolean CACHE_UNKNOWN_MAPPINGS = false; public final static JsonSerializer<Object> DEFAULT_NULL_KEY_SERIALIZER = new FailingSerializer(\"Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)\"); protected final static JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER = new UnknownSerializer(); final protected SerializationConfig _config; final protected Class<?> _serializationView; final protected SerializerFactory _serializerFactory; final protected SerializerCache _serializerCache; protected transient ContextAttributes _attributes;"
      },
      {
        "txt": "protected JsonSerializer<Object> _unknownTypeSerializer = DEFAULT_UNKNOWN_SERIALIZER; protected JsonSerializer<Object> _keySerializer; protected JsonSerializer<Object> _nullValueSerializer = NullSerializer.instance; protected JsonSerializer<Object> _nullKeySerializer = DEFAULT_NULL_KEY_SERIALIZER; protected final ReadOnlyClassToSerializerMap _knownSerializers; protected DateFormat _dateFormat; protected final boolean _stdNullValueSerializer; public SerializerProvider() { _config = null;"
      },
      {
        "txt": "_serializerFactory = null; _serializerCache = new SerializerCache(); _knownSerializers = null; _serializationView = null; _attributes = null; _stdNullValueSerializer = true; } protected SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f) {"
      },
      {
        "txt": "_serializerFactory = f; _config = config; _serializerCache = src._serializerCache; _unknownTypeSerializer = src._unknownTypeSerializer; _keySerializer = src._keySerializer; _nullValueSerializer = src._nullValueSerializer; _nullKeySerializer = src._nullKeySerializer; _stdNullValueSerializer = (_nullValueSerializer == DEFAULT_NULL_KEY_SERIALIZER); _serializationView = config.getActiveView(); _attributes = config.getAttributes();"
      },
      {
        "txt": "_knownSerializers = _serializerCache.getReadOnlyLookupMap(); } protected SerializerProvider(SerializerProvider src) { _config = null; _serializationView = null; _serializerFactory = null; _knownSerializers = null; _serializerCache = new SerializerCache(); _unknownTypeSerializer = src._unknownTypeSerializer;"
      },
      {
        "txt": "_keySerializer = src._keySerializer; _nullValueSerializer = src._nullValueSerializer; _nullKeySerializer = src._nullKeySerializer; _stdNullValueSerializer = src._stdNullValueSerializer; } public void setDefaultKeySerializer(JsonSerializer<Object> ks) { if (ks == null) { throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); }"
      },
      {
        "txt": "_keySerializer = ks; } public void setNullValueSerializer(JsonSerializer<Object> nvs) { if (nvs == null) { throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); } _nullValueSerializer = nvs; } public void setNullKeySerializer(JsonSerializer<Object> nks)"
      },
      {
        "txt": "{ if (nks == null) { throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); } _nullKeySerializer = nks; } @Override public final SerializationConfig getConfig() { return _config; } @Override public final AnnotationIntrospector getAnnotationIntrospector() {"
      },
      {
        "txt": "return _config.getAnnotationIntrospector(); } @Override public final TypeFactory getTypeFactory() { return _config.getTypeFactory(); } @Override public final Class<?> getActiveView() { return _serializationView; } @Deprecated public final Class<?> getSerializationView() { return _serializationView; }"
      },
      {
        "txt": "@Override public final boolean canOverrideAccessModifiers() { return _config.canOverrideAccessModifiers(); } @Override public final boolean isEnabled(MapperFeature feature) { return _config.isEnabled(feature); } @Override public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) {"
      },
      {
        "txt": "return _config.getDefaultPropertyFormat(baseType); } public final JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) { return _config.getDefaultPropertyInclusion(); } @Override public Locale getLocale() { return _config.getLocale(); } @Override"
      },
      {
        "txt": "public TimeZone getTimeZone() { return _config.getTimeZone(); } @Override public Object getAttribute(Object key) { return _attributes.getAttribute(key); } @Override public SerializerProvider setAttribute(Object key, Object value) {"
      },
      {
        "txt": "_attributes = _attributes.withPerCallAttribute(key, value); return this; } public final boolean isEnabled(SerializationFeature feature) { return _config.isEnabled(feature); } public final boolean hasSerializationFeatures(int featureMask) { return _config.hasSerializationFeatures(featureMask); } public final FilterProvider getFilterProvider() {"
      },
      {
        "txt": "return _config.getFilterProvider(); } public JsonGenerator getGenerator() { return null; } public abstract WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType); @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "{ JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType);"
      },
      {
        "txt": "if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; } } } } return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException { if (valueType == null) { reportMappingProblem(\"Null passed for `valueType` of `findValueSerializer()`\"); } JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType);"
      },
      {
        "txt": "if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; } }"
      },
      {
        "txt": "} return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); } public JsonSerializer<Object> findValueSerializer(Class<?> valueType) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType));"
      },
      {
        "txt": "if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } } } }"
      },
      {
        "txt": "} return ser; } public JsonSerializer<Object> findValueSerializer(JavaType valueType) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) {"
      },
      {
        "txt": "ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } } } } return ser;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findPrimaryPropertySerializer(JavaType valueType, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType);"
      },
      {
        "txt": "if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; } } } return (JsonSerializer<Object>) handlePrimaryContextualization(ser, property);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) {"
      },
      {
        "txt": "ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; }"
      },
      {
        "txt": "} } } return (JsonSerializer<Object>) handlePrimaryContextualization(ser, property); } public JsonSerializer<Object> findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType);"
      },
      {
        "txt": "if (ser != null) { return ser; } ser = _serializerCache.typedValueSerializer(valueType); if (ser != null) { return ser; } ser = findValueSerializer(valueType, property); TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType));"
      },
      {
        "txt": "if (typeSer != null) { typeSer = typeSer.forProperty(property); ser = new TypeWrappedSerializer(typeSer, ser); } if (cache) { _serializerCache.addTypedSerializer(valueType, ser); } return ser; } public JsonSerializer<Object> findTypedValueSerializer(JavaType valueType, boolean cache,"
      },
      {
        "txt": "BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType); if (ser != null) { return ser; } ser = _serializerCache.typedValueSerializer(valueType); if (ser != null) { return ser;"
      },
      {
        "txt": "} ser = findValueSerializer(valueType, property); TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, valueType); if (typeSer != null) { typeSer = typeSer.forProperty(property); ser = new TypeWrappedSerializer(typeSer, ser); } if (cache) { _serializerCache.addTypedSerializer(valueType, ser); }"
      },
      {
        "txt": "return ser; } public TypeSerializer findTypeSerializer(JavaType javaType) throws JsonMappingException { return _serializerFactory.createTypeSerializer(_config, javaType); } public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType, _keySerializer); return _handleContextualResolvable(ser, property);"
      },
      {
        "txt": "} public JsonSerializer<Object> findKeySerializer(Class<?> rawKeyType, BeanProperty property) throws JsonMappingException { return findKeySerializer(_config.constructType(rawKeyType), property); } public JsonSerializer<Object> getDefaultNullKeySerializer() { return _nullKeySerializer; } public JsonSerializer<Object> getDefaultNullValueSerializer() {"
      },
      {
        "txt": "return _nullValueSerializer; } public JsonSerializer<Object> findNullKeySerializer(JavaType serializationType, BeanProperty property) throws JsonMappingException { return _nullKeySerializer; } public JsonSerializer<Object> findNullValueSerializer(BeanProperty property) throws JsonMappingException {"
      },
      {
        "txt": "return _nullValueSerializer; } public JsonSerializer<Object> getUnknownTypeSerializer(Class<?> unknownType) { if (unknownType == Object.class) { return _unknownTypeSerializer; } return new UnknownSerializer(unknownType); } public boolean isUnknownTypeSerializer(JsonSerializer<?> ser) { if ((ser == _unknownTypeSerializer) || (ser == null)) {"
      },
      {
        "txt": "return true; } if (isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { if (ser.getClass() == UnknownSerializer.class) { return true; } } return false; } public abstract JsonSerializer<Object> serializerInstance(Annotated annotated,"
      },
      {
        "txt": "Object serDef) throws JsonMappingException; public abstract Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException; public abstract boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException; public JsonSerializer<?> handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "{ if (ser != null) { if (ser instanceof ContextualSerializer) { ser = ((ContextualSerializer) ser).createContextual(this, property); } } return ser; } public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property)"
      },
      {
        "txt": "throws JsonMappingException { if (ser != null) { if (ser instanceof ContextualSerializer) { ser = ((ContextualSerializer) ser).createContextual(this, property); } } return ser; } public final void defaultSerializeValue(Object value, JsonGenerator gen) throws IOException"
      },
      {
        "txt": "{ if (value == null) { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else { _nullValueSerializer.serialize(null, gen, this); } } else { Class<?> cls = value.getClass(); findTypedValueSerializer(cls, true, null).serialize(value, gen, this);"
      },
      {
        "txt": "} } public final void defaultSerializeField(String fieldName, Object value, JsonGenerator gen) throws IOException { gen.writeFieldName(fieldName); if (value == null) { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else {"
      },
      {
        "txt": "_nullValueSerializer.serialize(null, gen, this); } } else { Class<?> cls = value.getClass(); findTypedValueSerializer(cls, true, null).serialize(value, gen, this); } } public final void defaultSerializeDateValue(long timestamp, JsonGenerator gen) throws IOException {"
      },
      {
        "txt": "if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { gen.writeNumber(timestamp); } else { gen.writeString(_dateFormat().format(new Date(timestamp))); } } public final void defaultSerializeDateValue(Date date, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { gen.writeNumber(date.getTime());"
      },
      {
        "txt": "} else { gen.writeString(_dateFormat().format(date)); } } public void defaultSerializeDateKey(long timestamp, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) { gen.writeFieldName(String.valueOf(timestamp)); } else { gen.writeFieldName(_dateFormat().format(new Date(timestamp)));"
      },
      {
        "txt": "} } public void defaultSerializeDateKey(Date date, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) { gen.writeFieldName(String.valueOf(date.getTime())); } else { gen.writeFieldName(_dateFormat().format(date)); } }"
      },
      {
        "txt": "public final void defaultSerializeNull(JsonGenerator gen) throws IOException { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else { _nullValueSerializer.serialize(null, gen, this); } } public void reportMappingProblem(String message, Object... args) throws JsonMappingException { throw mappingException(message, args);"
      },
      {
        "txt": "} public <T> T reportBadTypeDefinition(BeanDescription bean, String msg, Object... msgArgs) throws JsonMappingException { String beanDesc = \"N/A\"; if (bean != null) { beanDesc = ClassUtil.nameOf(bean.getBeanClass()); } msg = String.format(\"Invalid type definition for type %s: %s\", beanDesc, _format(msg, msgArgs)); throw InvalidDefinitionException.from(getGenerator(), msg, bean, null);"
      },
      {
        "txt": "} public <T> T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object... msgArgs) throws JsonMappingException { message = _format(message, msgArgs); String propName = \"N/A\"; if (prop != null) { propName = _quotedString(prop.getName()); } String beanDesc = \"N/A\"; if (bean != null) {"
      },
      {
        "txt": "beanDesc = ClassUtil.nameOf(bean.getBeanClass()); } message = String.format(\"Invalid definition for property %s (of type %s): %s\", propName, beanDesc, message); throw InvalidDefinitionException.from(getGenerator(), message, bean, prop); } @Override public <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException { throw InvalidDefinitionException.from(getGenerator(), msg, type); }"
      },
      {
        "txt": "public <T> T reportBadDefinition(JavaType type, String msg, Throwable cause) throws JsonMappingException { InvalidDefinitionException e = InvalidDefinitionException.from(getGenerator(), msg, type); e.initCause(cause); throw e; } public <T> T reportBadDefinition(Class<?> raw, String msg, Throwable cause) throws JsonMappingException { InvalidDefinitionException e = InvalidDefinitionException.from(getGenerator(), msg, constructType(raw)); e.initCause(cause);"
      },
      {
        "txt": "throw e; } public void reportMappingProblem(Throwable t, String message, Object... msgArgs) throws JsonMappingException { message = _format(message, msgArgs); throw JsonMappingException.from(getGenerator(), message, t); } @Override public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' as a subtype of %s\","
      },
      {
        "txt": "typeId, baseType); return InvalidTypeIdException.from(null, _colonConcat(msg, extraDesc), baseType, typeId); } @Deprecated // since 2.9 public JsonMappingException mappingException(String message, Object... msgArgs) { return JsonMappingException.from(getGenerator(), _format(message, msgArgs)); } @Deprecated // since 2.9 protected JsonMappingException mappingException(Throwable t, String message, Object... msgArgs) { return JsonMappingException.from(getGenerator(), _format(message, msgArgs), t);"
      },
      {
        "txt": "} protected void _reportIncompatibleRootType(Object value, JavaType rootType) throws IOException { if (rootType.isPrimitive()) { Class<?> wrapperType = ClassUtil.wrapperType(rootType.getRawClass()); if (wrapperType.isAssignableFrom(value.getClass())) { return; } } reportBadDefinition(rootType, String.format("
      },
      {
        "txt": "\"Incompatible types: declared root type (%s) vs %s\", rootType, ClassUtil.classNameOf(value))); } protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(runtimeType); if (ser == null) {"
      },
      {
        "txt": "ser = _createAndCacheUntypedSerializer(runtimeType); } } if (isUnknownTypeSerializer(ser)) { return null; } return ser; } protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> rawType) throws JsonMappingException"
      },
      {
        "txt": "JavaType fullType = _config.constructType(rawType); JsonSerializer<Object> ser; try { ser = _createUntypedSerializer(fullType); } catch (IllegalArgumentException iae) { ser = null; // doesn't matter but compiler whines otherwise <extra_id_0> } if (ser != null) { _serializerCache.addAndResolveNonTypedSerializer(rawType, fullType, ser, this); } return ser; }"
      },
      {
        "txt": "return ser; } protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type) throws JsonMappingException { JsonSerializer<Object> ser; try { ser = _createUntypedSerializer(type); } catch (IllegalArgumentException iae) { ser = null;"
      },
      {
        "txt": "reportMappingProblem(iae, iae.getMessage()); } if (ser != null) { _serializerCache.addAndResolveNonTypedSerializer(type, ser, this); } return ser; } protected JsonSerializer<Object> _createUntypedSerializer(JavaType type) throws JsonMappingException {"
      },
      {
        "txt": "synchronized (_serializerCache) { return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type); } } @SuppressWarnings(\"unchecked\") protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { if (ser instanceof ResolvableSerializer) {"
      },
      {
        "txt": "((ResolvableSerializer) ser).resolve(this); } return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); } @SuppressWarnings(\"unchecked\") protected JsonSerializer<Object> _handleResolvable(JsonSerializer<?> ser) throws JsonMappingException { if (ser instanceof ResolvableSerializer) { ((ResolvableSerializer) ser).resolve(this);"
      },
      {
        "txt": "} return (JsonSerializer<Object>) ser; } protected final DateFormat _dateFormat() { if (_dateFormat != null) { return _dateFormat; } DateFormat df = _config.getDateFormat(); _dateFormat = df = (DateFormat) df.clone();"
      },
      {
        "txt": "TimeZone tz = getTimeZone(); if (tz != df.getTimeZone()) { df.setTimeZone(tz); } return df; }"
      }
    ]
  },
  {
    "id": 1758,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/SerializerProvider.java",
    "start-bug-line": 1361,
    "end-bug-line": 1361,
    "bug": "reportMappingProblem(iae, iae.getMessage());",
    "fix": "reportMappingProblem(iae, ClassUtil.exceptionMessage(iae));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.IOException; import java.text.DateFormat;"
      },
      {
        "txt": "import java.util.Date; import java.util.Locale; import java.util.TimeZone; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.ContextualDeserializer; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.exc.InvalidTypeIdException; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.*; import com.fasterxml.jackson.databind.ser.impl.FailingSerializer; import com.fasterxml.jackson.databind.ser.impl.ReadOnlyClassToSerializerMap; import com.fasterxml.jackson.databind.ser.impl.TypeWrappedSerializer; import com.fasterxml.jackson.databind.ser.impl.UnknownSerializer; import com.fasterxml.jackson.databind.ser.impl.WritableObjectId;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.std.NullSerializer; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class SerializerProvider extends DatabindContext { protected final static boolean CACHE_UNKNOWN_MAPPINGS = false; public final static JsonSerializer<Object> DEFAULT_NULL_KEY_SERIALIZER = new FailingSerializer(\"Null key for a Map not allowed in JSON (use a converting NullKeySerializer?)\"); protected final static JsonSerializer<Object> DEFAULT_UNKNOWN_SERIALIZER = new UnknownSerializer();"
      },
      {
        "txt": "final protected SerializationConfig _config; final protected Class<?> _serializationView; final protected SerializerFactory _serializerFactory; final protected SerializerCache _serializerCache; protected transient ContextAttributes _attributes; protected JsonSerializer<Object> _unknownTypeSerializer = DEFAULT_UNKNOWN_SERIALIZER; protected JsonSerializer<Object> _keySerializer; protected JsonSerializer<Object> _nullValueSerializer = NullSerializer.instance; protected JsonSerializer<Object> _nullKeySerializer = DEFAULT_NULL_KEY_SERIALIZER; protected final ReadOnlyClassToSerializerMap _knownSerializers;"
      },
      {
        "txt": "protected DateFormat _dateFormat; protected final boolean _stdNullValueSerializer; public SerializerProvider() { _config = null; _serializerFactory = null; _serializerCache = new SerializerCache(); _knownSerializers = null; _serializationView = null; _attributes = null;"
      },
      {
        "txt": "_stdNullValueSerializer = true; } protected SerializerProvider(SerializerProvider src, SerializationConfig config, SerializerFactory f) { _serializerFactory = f; _config = config; _serializerCache = src._serializerCache; _unknownTypeSerializer = src._unknownTypeSerializer; _keySerializer = src._keySerializer;"
      },
      {
        "txt": "_nullValueSerializer = src._nullValueSerializer; _nullKeySerializer = src._nullKeySerializer; _stdNullValueSerializer = (_nullValueSerializer == DEFAULT_NULL_KEY_SERIALIZER); _serializationView = config.getActiveView(); _attributes = config.getAttributes(); _knownSerializers = _serializerCache.getReadOnlyLookupMap(); } protected SerializerProvider(SerializerProvider src) { _config = null;"
      },
      {
        "txt": "_serializationView = null; _serializerFactory = null; _knownSerializers = null; _serializerCache = new SerializerCache(); _unknownTypeSerializer = src._unknownTypeSerializer; _keySerializer = src._keySerializer; _nullValueSerializer = src._nullValueSerializer; _nullKeySerializer = src._nullKeySerializer; _stdNullValueSerializer = src._stdNullValueSerializer; }"
      },
      {
        "txt": "public void setDefaultKeySerializer(JsonSerializer<Object> ks) { if (ks == null) { throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); } _keySerializer = ks; } public void setNullValueSerializer(JsonSerializer<Object> nvs) { if (nvs == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); } _nullValueSerializer = nvs; } public void setNullKeySerializer(JsonSerializer<Object> nks) { if (nks == null) { throw new IllegalArgumentException(\"Cannot pass null JsonSerializer\"); } _nullKeySerializer = nks;"
      },
      {
        "txt": "} @Override public final SerializationConfig getConfig() { return _config; } @Override public final AnnotationIntrospector getAnnotationIntrospector() { return _config.getAnnotationIntrospector(); } @Override public final TypeFactory getTypeFactory() { return _config.getTypeFactory();"
      },
      {
        "txt": "} @Override public final Class<?> getActiveView() { return _serializationView; } @Deprecated public final Class<?> getSerializationView() { return _serializationView; } @Override public final boolean canOverrideAccessModifiers() { return _config.canOverrideAccessModifiers(); } @Override"
      },
      {
        "txt": "public final boolean isEnabled(MapperFeature feature) { return _config.isEnabled(feature); } @Override public final JsonFormat.Value getDefaultPropertyFormat(Class<?> baseType) { return _config.getDefaultPropertyFormat(baseType); } public final JsonInclude.Value getDefaultPropertyInclusion(Class<?> baseType) { return _config.getDefaultPropertyInclusion(); }"
      },
      {
        "txt": "@Override public Locale getLocale() { return _config.getLocale(); } @Override public TimeZone getTimeZone() { return _config.getTimeZone(); } @Override public Object getAttribute(Object key) {"
      },
      {
        "txt": "return _attributes.getAttribute(key); } @Override public SerializerProvider setAttribute(Object key, Object value) { _attributes = _attributes.withPerCallAttribute(key, value); return this; } public final boolean isEnabled(SerializationFeature feature) { return _config.isEnabled(feature);"
      },
      {
        "txt": "} public final boolean hasSerializationFeatures(int featureMask) { return _config.hasSerializationFeatures(featureMask); } public final FilterProvider getFilterProvider() { return _config.getFilterProvider(); } public JsonGenerator getGenerator() { return null; }"
      },
      {
        "txt": "public abstract WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType); @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findValueSerializer(Class<?> valueType, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) {"
      },
      {
        "txt": "ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; }"
      },
      {
        "txt": "} } } return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); } @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findValueSerializer(JavaType valueType, BeanProperty property) throws JsonMappingException { if (valueType == null) {"
      },
      {
        "txt": "reportMappingProblem(\"Null passed for `valueType` of `findValueSerializer()`\"); } JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) {"
      },
      {
        "txt": "_serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; } } } return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); } public JsonSerializer<Object> findValueSerializer(Class<?> valueType) throws JsonMappingException {"
      },
      {
        "txt": "JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType); if (CACHE_UNKNOWN_MAPPINGS) {"
      },
      {
        "txt": "_serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } } } } } return ser; } public JsonSerializer<Object> findValueSerializer(JavaType valueType) throws JsonMappingException"
      },
      {
        "txt": "{ JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this);"
      },
      {
        "txt": "} } } } return ser; } @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findPrimaryPropertySerializer(JavaType valueType, BeanProperty property) throws JsonMappingException {"
      },
      {
        "txt": "JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType.getRawClass()); if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); }"
      },
      {
        "txt": "return ser; } } } return (JsonSerializer<Object>) handlePrimaryContextualization(ser, property); } @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> findPrimaryPropertySerializer(Class<?> valueType, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "{ JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(valueType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(_config.constructType(valueType)); if (ser == null) { ser = _createAndCacheUntypedSerializer(valueType); if (ser == null) { ser = getUnknownTypeSerializer(valueType);"
      },
      {
        "txt": "if (CACHE_UNKNOWN_MAPPINGS) { _serializerCache.addAndResolveNonTypedSerializer(valueType, ser, this); } return ser; } } } } return (JsonSerializer<Object>) handlePrimaryContextualization(ser, property); }"
      },
      {
        "txt": "public JsonSerializer<Object> findTypedValueSerializer(Class<?> valueType, boolean cache, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType); if (ser != null) { return ser; } ser = _serializerCache.typedValueSerializer(valueType); if (ser != null) {"
      },
      {
        "txt": "return ser; } ser = findValueSerializer(valueType, property); TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, _config.constructType(valueType)); if (typeSer != null) { typeSer = typeSer.forProperty(property); ser = new TypeWrappedSerializer(typeSer, ser); } if (cache) {"
      },
      {
        "txt": "_serializerCache.addTypedSerializer(valueType, ser); } return ser; } public JsonSerializer<Object> findTypedValueSerializer(JavaType valueType, boolean cache, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _knownSerializers.typedValueSerializer(valueType); if (ser != null) {"
      },
      {
        "txt": "return ser; } ser = _serializerCache.typedValueSerializer(valueType); if (ser != null) { return ser; } ser = findValueSerializer(valueType, property); TypeSerializer typeSer = _serializerFactory.createTypeSerializer(_config, valueType); if (typeSer != null) { typeSer = typeSer.forProperty(property);"
      },
      {
        "txt": "ser = new TypeWrappedSerializer(typeSer, ser); } if (cache) { _serializerCache.addTypedSerializer(valueType, ser); } return ser; } public TypeSerializer findTypeSerializer(JavaType javaType) throws JsonMappingException { return _serializerFactory.createTypeSerializer(_config, javaType); }"
      },
      {
        "txt": "public JsonSerializer<Object> findKeySerializer(JavaType keyType, BeanProperty property) throws JsonMappingException { JsonSerializer<Object> ser = _serializerFactory.createKeySerializer(_config, keyType, _keySerializer); return _handleContextualResolvable(ser, property); } public JsonSerializer<Object> findKeySerializer(Class<?> rawKeyType, BeanProperty property) throws JsonMappingException { return findKeySerializer(_config.constructType(rawKeyType), property);"
      },
      {
        "txt": "} public JsonSerializer<Object> getDefaultNullKeySerializer() { return _nullKeySerializer; } public JsonSerializer<Object> getDefaultNullValueSerializer() { return _nullValueSerializer; } public JsonSerializer<Object> findNullKeySerializer(JavaType serializationType, BeanProperty property) throws JsonMappingException"
      },
      {
        "txt": "{ return _nullKeySerializer; } public JsonSerializer<Object> findNullValueSerializer(BeanProperty property) throws JsonMappingException { return _nullValueSerializer; } public JsonSerializer<Object> getUnknownTypeSerializer(Class<?> unknownType) { if (unknownType == Object.class) { return _unknownTypeSerializer;"
      },
      {
        "txt": "} return new UnknownSerializer(unknownType); } public boolean isUnknownTypeSerializer(JsonSerializer<?> ser) { if ((ser == _unknownTypeSerializer) || (ser == null)) { return true; } if (isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { if (ser.getClass() == UnknownSerializer.class) { return true;"
      },
      {
        "txt": "} } return false; } public abstract JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException; public abstract Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) throws JsonMappingException;"
      },
      {
        "txt": "public abstract boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException; public JsonSerializer<?> handlePrimaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { if (ser != null) { if (ser instanceof ContextualSerializer) { ser = ((ContextualSerializer) ser).createContextual(this, property); }"
      },
      {
        "txt": "} return ser; } public JsonSerializer<?> handleSecondaryContextualization(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { if (ser != null) { if (ser instanceof ContextualSerializer) { ser = ((ContextualSerializer) ser).createContextual(this, property);"
      },
      {
        "txt": "} } return ser; } public final void defaultSerializeValue(Object value, JsonGenerator gen) throws IOException { if (value == null) { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else {"
      },
      {
        "txt": "_nullValueSerializer.serialize(null, gen, this); } } else { Class<?> cls = value.getClass(); findTypedValueSerializer(cls, true, null).serialize(value, gen, this); } } public final void defaultSerializeField(String fieldName, Object value, JsonGenerator gen) throws IOException {"
      },
      {
        "txt": "gen.writeFieldName(fieldName); if (value == null) { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else { _nullValueSerializer.serialize(null, gen, this); } } else { Class<?> cls = value.getClass(); findTypedValueSerializer(cls, true, null).serialize(value, gen, this);"
      },
      {
        "txt": "} } public final void defaultSerializeDateValue(long timestamp, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { gen.writeNumber(timestamp); } else { gen.writeString(_dateFormat().format(new Date(timestamp))); }"
      },
      {
        "txt": "} public final void defaultSerializeDateValue(Date date, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)) { gen.writeNumber(date.getTime()); } else { gen.writeString(_dateFormat().format(date)); } } public void defaultSerializeDateKey(long timestamp, JsonGenerator gen) throws IOException"
      },
      {
        "txt": "{ if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) { gen.writeFieldName(String.valueOf(timestamp)); } else { gen.writeFieldName(_dateFormat().format(new Date(timestamp))); } } public void defaultSerializeDateKey(Date date, JsonGenerator gen) throws IOException { if (isEnabled(SerializationFeature.WRITE_DATE_KEYS_AS_TIMESTAMPS)) {"
      },
      {
        "txt": "gen.writeFieldName(String.valueOf(date.getTime())); } else { gen.writeFieldName(_dateFormat().format(date)); } } public final void defaultSerializeNull(JsonGenerator gen) throws IOException { if (_stdNullValueSerializer) { // minor perf optimization gen.writeNull(); } else {"
      },
      {
        "txt": "_nullValueSerializer.serialize(null, gen, this); } } public void reportMappingProblem(String message, Object... args) throws JsonMappingException { throw mappingException(message, args); } public <T> T reportBadTypeDefinition(BeanDescription bean, String msg, Object... msgArgs) throws JsonMappingException { String beanDesc = \"N/A\"; if (bean != null) {"
      },
      {
        "txt": "beanDesc = ClassUtil.nameOf(bean.getBeanClass()); } msg = String.format(\"Invalid type definition for type %s: %s\", beanDesc, _format(msg, msgArgs)); throw InvalidDefinitionException.from(getGenerator(), msg, bean, null); } public <T> T reportBadPropertyDefinition(BeanDescription bean, BeanPropertyDefinition prop, String message, Object... msgArgs) throws JsonMappingException { message = _format(message, msgArgs); String propName = \"N/A\";"
      },
      {
        "txt": "if (prop != null) { propName = _quotedString(prop.getName()); } String beanDesc = \"N/A\"; if (bean != null) { beanDesc = ClassUtil.nameOf(bean.getBeanClass()); } message = String.format(\"Invalid definition for property %s (of type %s): %s\", propName, beanDesc, message); throw InvalidDefinitionException.from(getGenerator(), message, bean, prop);"
      },
      {
        "txt": "} @Override public <T> T reportBadDefinition(JavaType type, String msg) throws JsonMappingException { throw InvalidDefinitionException.from(getGenerator(), msg, type); } public <T> T reportBadDefinition(JavaType type, String msg, Throwable cause) throws JsonMappingException { InvalidDefinitionException e = InvalidDefinitionException.from(getGenerator(), msg, type); e.initCause(cause); throw e;"
      },
      {
        "txt": "} public <T> T reportBadDefinition(Class<?> raw, String msg, Throwable cause) throws JsonMappingException { InvalidDefinitionException e = InvalidDefinitionException.from(getGenerator(), msg, constructType(raw)); e.initCause(cause); throw e; } public void reportMappingProblem(Throwable t, String message, Object... msgArgs) throws JsonMappingException { message = _format(message, msgArgs); throw JsonMappingException.from(getGenerator(), message, t);"
      },
      {
        "txt": "} @Override public JsonMappingException invalidTypeIdException(JavaType baseType, String typeId, String extraDesc) { String msg = String.format(\"Could not resolve type id '%s' as a subtype of %s\", typeId, baseType); return InvalidTypeIdException.from(null, _colonConcat(msg, extraDesc), baseType, typeId); } @Deprecated // since 2.9 public JsonMappingException mappingException(String message, Object... msgArgs) {"
      },
      {
        "txt": "return JsonMappingException.from(getGenerator(), _format(message, msgArgs)); } @Deprecated // since 2.9 protected JsonMappingException mappingException(Throwable t, String message, Object... msgArgs) { return JsonMappingException.from(getGenerator(), _format(message, msgArgs), t); } protected void _reportIncompatibleRootType(Object value, JavaType rootType) throws IOException { if (rootType.isPrimitive()) { Class<?> wrapperType = ClassUtil.wrapperType(rootType.getRawClass());"
      },
      {
        "txt": "if (wrapperType.isAssignableFrom(value.getClass())) { return; } } reportBadDefinition(rootType, String.format( \"Incompatible types: declared root type (%s) vs %s\", rootType, ClassUtil.classNameOf(value))); } protected JsonSerializer<Object> _findExplicitUntypedSerializer(Class<?> runtimeType) throws JsonMappingException"
      },
      {
        "txt": "{ JsonSerializer<Object> ser = _knownSerializers.untypedValueSerializer(runtimeType); if (ser == null) { ser = _serializerCache.untypedValueSerializer(runtimeType); if (ser == null) { ser = _createAndCacheUntypedSerializer(runtimeType); } } if (isUnknownTypeSerializer(ser)) { return null;"
      },
      {
        "txt": "} return ser; } protected JsonSerializer<Object> _createAndCacheUntypedSerializer(Class<?> rawType) throws JsonMappingException { JavaType fullType = _config.constructType(rawType); JsonSerializer<Object> ser; try { ser = _createUntypedSerializer(fullType);"
      },
      {
        "txt": "} catch (IllegalArgumentException iae) { ser = null; // doesn't matter but compiler whines otherwise reportMappingProblem(iae, iae.getMessage()); } if (ser != null) { _serializerCache.addAndResolveNonTypedSerializer(rawType, fullType, ser, this); } return ser; } protected JsonSerializer<Object> _createAndCacheUntypedSerializer(JavaType type)"
      },
      {
        "txt": "{ JsonSerializer<Object> ser; try { ser = _createUntypedSerializer(type); } catch (IllegalArgumentException iae) { ser = null; <extra_id_0> } if (ser != null) { _serializerCache.addAndResolveNonTypedSerializer(type, ser, this); } return ser; }"
      },
      {
        "txt": "return ser; } protected JsonSerializer<Object> _createUntypedSerializer(JavaType type) throws JsonMappingException { synchronized (_serializerCache) { return (JsonSerializer<Object>)_serializerFactory.createSerializer(this, type); } } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "protected JsonSerializer<Object> _handleContextualResolvable(JsonSerializer<?> ser, BeanProperty property) throws JsonMappingException { if (ser instanceof ResolvableSerializer) { ((ResolvableSerializer) ser).resolve(this); } return (JsonSerializer<Object>) handleSecondaryContextualization(ser, property); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "protected JsonSerializer<Object> _handleResolvable(JsonSerializer<?> ser) throws JsonMappingException { if (ser instanceof ResolvableSerializer) { ((ResolvableSerializer) ser).resolve(this); } return (JsonSerializer<Object>) ser; } protected final DateFormat _dateFormat() {"
      },
      {
        "txt": "if (_dateFormat != null) { return _dateFormat; } DateFormat df = _config.getDateFormat(); _dateFormat = df = (DateFormat) df.clone(); TimeZone tz = getTimeZone(); if (tz != df.getTimeZone()) { df.setTimeZone(tz); } return df;"
      }
    ]
  },
  {
    "id": 1759,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BasicDeserializerFactory.java",
    "start-bug-line": 1589,
    "end-bug-line": 1589,
    "bug": "e0.getMessage(), baseType);",
    "fix": "ClassUtil.exceptionMessage(e0), baseType);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import java.util.concurrent.*; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.JacksonInject; import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonIgnoreProperties; import com.fasterxml.jackson.annotation.JsonCreator.Mode; import com.fasterxml.jackson.core.JsonLocation; import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.deser.impl.CreatorCandidate; import com.fasterxml.jackson.databind.deser.impl.CreatorCollector; import com.fasterxml.jackson.databind.deser.impl.JavaUtilCollectionsDeserializers; import com.fasterxml.jackson.databind.deser.std.*; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.ext.OptionalHandlerFactory; import com.fasterxml.jackson.databind.introspect.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.NamedType; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.*; @SuppressWarnings(\"serial\") public abstract class BasicDeserializerFactory extends DeserializerFactory implements java.io.Serializable {"
      },
      {
        "txt": "private final static Class<?> CLASS_OBJECT = Object.class; private final static Class<?> CLASS_STRING = String.class; private final static Class<?> CLASS_CHAR_SEQUENCE = CharSequence.class; private final static Class<?> CLASS_ITERABLE = Iterable.class; private final static Class<?> CLASS_MAP_ENTRY = Map.Entry.class; protected final static PropertyName UNWRAPPED_CREATOR_PARAM_NAME = new PropertyName(\"@JsonUnwrapped\"); @SuppressWarnings(\"rawtypes\") final static HashMap<String, Class<? extends Map>> _mapFallbacks = new HashMap<String, Class<? extends Map>>(); static {"
      },
      {
        "txt": "_mapFallbacks.put(Map.class.getName(), LinkedHashMap.class); _mapFallbacks.put(ConcurrentMap.class.getName(), ConcurrentHashMap.class); _mapFallbacks.put(SortedMap.class.getName(), TreeMap.class); _mapFallbacks.put(java.util.NavigableMap.class.getName(), TreeMap.class); _mapFallbacks.put(java.util.concurrent.ConcurrentNavigableMap.class.getName(), java.util.concurrent.ConcurrentSkipListMap.class); } @SuppressWarnings(\"rawtypes\") final static HashMap<String, Class<? extends Collection>> _collectionFallbacks = new HashMap<String, Class<? extends Collection>>();"
      },
      {
        "txt": "static { _collectionFallbacks.put(Collection.class.getName(), ArrayList.class); _collectionFallbacks.put(List.class.getName(), ArrayList.class); _collectionFallbacks.put(Set.class.getName(), HashSet.class); _collectionFallbacks.put(SortedSet.class.getName(), TreeSet.class); _collectionFallbacks.put(Queue.class.getName(), LinkedList.class); _collectionFallbacks.put(\"java.util.Deque\", LinkedList.class); _collectionFallbacks.put(\"java.util.NavigableSet\", TreeSet.class); } protected final DeserializerFactoryConfig _factoryConfig;"
      },
      {
        "txt": "protected BasicDeserializerFactory(DeserializerFactoryConfig config) { _factoryConfig = config; } public DeserializerFactoryConfig getFactoryConfig() { return _factoryConfig; } protected abstract DeserializerFactory withConfig(DeserializerFactoryConfig config); @Override public final DeserializerFactory withAdditionalDeserializers(Deserializers additional) { return withConfig(_factoryConfig.withAdditionalDeserializers(additional));"
      },
      {
        "txt": "} @Override public final DeserializerFactory withAdditionalKeyDeserializers(KeyDeserializers additional) { return withConfig(_factoryConfig.withAdditionalKeyDeserializers(additional)); } @Override public final DeserializerFactory withDeserializerModifier(BeanDeserializerModifier modifier) { return withConfig(_factoryConfig.withDeserializerModifier(modifier)); } @Override"
      },
      {
        "txt": "public final DeserializerFactory withAbstractTypeResolver(AbstractTypeResolver resolver) { return withConfig(_factoryConfig.withAbstractTypeResolver(resolver)); } @Override public final DeserializerFactory withValueInstantiators(ValueInstantiators instantiators) { return withConfig(_factoryConfig.withValueInstantiators(instantiators)); } @Override public JavaType mapAbstractType(DeserializationConfig config, JavaType type) throws JsonMappingException {"
      },
      {
        "txt": "while (true) { JavaType next = _mapAbstractType2(config, type); if (next == null) { return type; } Class<?> prevCls = type.getRawClass(); Class<?> nextCls = next.getRawClass(); if ((prevCls == nextCls) || !prevCls.isAssignableFrom(nextCls)) { throw new IllegalArgumentException(\"Invalid abstract type resolution from \"+type+\" to \"+next+\": latter is not a subtype of former\"); }"
      },
      {
        "txt": "type = next; } } private JavaType _mapAbstractType2(DeserializationConfig config, JavaType type) throws JsonMappingException { Class<?> currClass = type.getRawClass(); if (_factoryConfig.hasAbstractTypeResolvers()) { for (AbstractTypeResolver resolver : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = resolver.findTypeMapping(config, type);"
      },
      {
        "txt": "if ((concrete != null) && !concrete.hasRawClass(currClass)) { return concrete; } } } return null; } @Override public ValueInstantiator findValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); ValueInstantiator instantiator = null; AnnotatedClass ac = beanDesc.getClassInfo(); Object instDef = ctxt.getAnnotationIntrospector().findValueInstantiator(ac); if (instDef != null) { instantiator = _valueInstantiatorInstance(config, ac, instDef); } if (instantiator == null) {"
      },
      {
        "txt": "instantiator = _findStdValueInstantiator(config, beanDesc); if (instantiator == null) { instantiator = _constructDefaultValueInstantiator(ctxt, beanDesc); } } if (_factoryConfig.hasValueInstantiators()) { for (ValueInstantiators insts : _factoryConfig.valueInstantiators()) { instantiator = insts.findValueInstantiator(config, beanDesc, instantiator); if (instantiator == null) { ctxt.reportBadTypeDefinition(beanDesc,"
      },
      {
        "txt": "\"Broken registered ValueInstantiators (of type %s): returned null ValueInstantiator\", insts.getClass().getName()); } } } if (instantiator.getIncompleteParameter() != null) { final AnnotatedParameter nonAnnotatedParam = instantiator.getIncompleteParameter(); final AnnotatedWithParams ctor = nonAnnotatedParam.getOwner(); throw new IllegalArgumentException(\"Argument #\"+nonAnnotatedParam.getIndex() +\" of constructor \"+ctor+\" has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\");"
      },
      {
        "txt": "} return instantiator; } private ValueInstantiator _findStdValueInstantiator(DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { Class<?> raw = beanDesc.getBeanClass(); if (raw == JsonLocation.class) { return new JsonLocationInstantiator();"
      },
      {
        "txt": "} if (Collection.class.isAssignableFrom(raw)) { if (Collections.EMPTY_SET.getClass() == raw) { return new ConstantValueInstantiator(Collections.EMPTY_SET); } if (Collections.EMPTY_LIST.getClass() == raw) { return new ConstantValueInstantiator(Collections.EMPTY_LIST); } } else if (Map.class.isAssignableFrom(raw)) { if (Collections.EMPTY_MAP.getClass() == raw) {"
      },
      {
        "txt": "return new ConstantValueInstantiator(Collections.EMPTY_MAP); } } return null; } protected ValueInstantiator _constructDefaultValueInstantiator(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException { CreatorCollector creators = new CreatorCollector(beanDesc, ctxt.getConfig());"
      },
      {
        "txt": "AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); final DeserializationConfig config = ctxt.getConfig(); VisibilityChecker<?> vchecker = config.getDefaultVisibilityChecker(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorDefs = _findCreatorsFromProperties(ctxt, beanDesc); _addDeserializerFactoryMethods(ctxt, beanDesc, vchecker, intr, creators, creatorDefs); if (beanDesc.getType().isConcrete()) { _addDeserializerConstructors(ctxt, beanDesc, vchecker, intr, creators, creatorDefs); }"
      },
      {
        "txt": "return creators.constructValueInstantiator(ctxt); } protected Map<AnnotatedWithParams,BeanPropertyDefinition[]> _findCreatorsFromProperties(DeserializationContext ctxt, BeanDescription beanDesc) throws JsonMappingException { Map<AnnotatedWithParams,BeanPropertyDefinition[]> result = Collections.emptyMap(); for (BeanPropertyDefinition propDef : beanDesc.findProperties()) { Iterator<AnnotatedParameter> it = propDef.getConstructorParameters(); while (it.hasNext()) { AnnotatedParameter param = it.next();"
      },
      {
        "txt": "AnnotatedWithParams owner = param.getOwner(); BeanPropertyDefinition[] defs = result.get(owner); final int index = param.getIndex(); if (defs == null) { if (result.isEmpty()) { // since emptyMap is immutable need to create a 'real' one result = new LinkedHashMap<AnnotatedWithParams,BeanPropertyDefinition[]>(); } defs = new BeanPropertyDefinition[owner.getParameterCount()]; result.put(owner, defs); } else {"
      },
      {
        "txt": "if (defs[index] != null) { ctxt.reportBadTypeDefinition(beanDesc, \"Conflict: parameter #%d of %s bound to more than one property; %s vs %s\", index, owner, defs[index], propDef); } } defs[index] = propDef; } } return result;"
      },
      {
        "txt": "} public ValueInstantiator _valueInstantiatorInstance(DeserializationConfig config, Annotated annotated, Object instDef) throws JsonMappingException { if (instDef == null) { return null; } ValueInstantiator inst; if (instDef instanceof ValueInstantiator) {"
      },
      {
        "txt": "return (ValueInstantiator) instDef; } if (!(instDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \" +instDef.getClass().getName() +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\"); } Class<?> instClass = (Class<?>)instDef; if (ClassUtil.isBogusClass(instClass)) { return null;"
      },
      {
        "txt": "} if (!ValueInstantiator.class.isAssignableFrom(instClass)) { throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+instClass.getName() +\"; expected Class<ValueInstantiator>\"); } HandlerInstantiator hi = config.getHandlerInstantiator(); if (hi != null) { inst = hi.valueInstantiatorInstance(config, annotated, instClass); if (inst != null) { return inst;"
      },
      {
        "txt": "} } return (ValueInstantiator) ClassUtil.createInstance(instClass, config.canOverrideAccessModifiers()); } protected void _addDeserializerConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams) throws JsonMappingException"
      },
      {
        "txt": "{ final boolean isNonStaticInnerClass = beanDesc.isNonStaticInnerClass(); if (isNonStaticInnerClass) { return; } AnnotatedConstructor defaultCtor = beanDesc.findDefaultConstructor(); if (defaultCtor != null) { if (!creators.hasDefaultCreator() || _hasCreatorAnnotation(ctxt, defaultCtor)) { creators.setDefaultCreator(defaultCtor); }"
      },
      {
        "txt": "} List<CreatorCandidate> nonAnnotated = new LinkedList<>(); int explCount = 0; for (AnnotatedConstructor ctor : beanDesc.getConstructors()) { JsonCreator.Mode creatorMode = intr.findCreatorAnnotation(ctxt.getConfig(), ctor); if (Mode.DISABLED == creatorMode) { continue; } if (creatorMode == null) { if (vchecker.isCreatorVisible(ctor)) {"
      },
      {
        "txt": "nonAnnotated.add(CreatorCandidate.construct(intr, ctor, creatorParams.get(ctor))); } continue; } switch (creatorMode) { case DELEGATING: _addExplicitDelegatingCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, ctor, null)); break; case PROPERTIES:"
      },
      {
        "txt": "_addExplicitPropertyCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, ctor, creatorParams.get(ctor))); break; default: _addExplicitAnyCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, ctor, creatorParams.get(ctor))); break; } ++explCount; }"
      },
      {
        "txt": "if (explCount > 0) { // TODO: split method into two since we could have expl factories return; } List<AnnotatedWithParams> implicitCtors = null; for (CreatorCandidate candidate : nonAnnotated) { final int argCount = candidate.paramCount(); final AnnotatedWithParams ctor = candidate.creator(); if (argCount == 1) { BeanPropertyDefinition propDef = candidate.propertyDef(0); boolean useProps = _checkIfCreatorPropertyBased(intr, ctor, propDef);"
      },
      {
        "txt": "if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[1]; PropertyName name = candidate.paramName(0); properties[0] = constructCreatorProperty(ctxt, beanDesc, name, 0, candidate.parameter(0), candidate.injection(0)); creators.addPropertyCreator(ctor, false, properties); } else { ctor, false, vchecker.isCreatorVisible(ctor)); if (propDef != null) {"
      },
      {
        "txt": "((POJOPropertyBuilder) propDef).removeConstructors(); } } continue; } int nonAnnotatedParamIndex = -1; SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; int explicitNameCount = 0; int implicitWithCreatorCount = 0; int injectCount = 0;"
      },
      {
        "txt": "for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = ctor.getParameter(i); BeanPropertyDefinition propDef = candidate.propertyDef(i); JacksonInject.Value injectId = intr.findInjectableValue(param); final PropertyName name = (propDef == null) ? null : propDef.getFullName(); if (propDef != null && propDef.isExplicitlyNamed()) { ++explicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; }"
      },
      {
        "txt": "if (injectId != null) { ++injectCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param); if (unwrapper != null) { _reportUnwrappedCreatorProperty(ctxt, beanDesc, param); properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null); ++explicitNameCount;"
      },
      {
        "txt": "continue; } if (isCreator && (name != null && !name.isEmpty())) { ++implicitWithCreatorCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); continue; } if (nonAnnotatedParamIndex < 0) { nonAnnotatedParamIndex = i; }"
      },
      {
        "txt": "} final int namedCount = explicitNameCount + implicitWithCreatorCount; if ((explicitNameCount > 0) || (injectCount > 0)) { if ((namedCount + injectCount) == argCount) { creators.addPropertyCreator(ctor, false, properties); continue; } if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) { creators.addDelegatingCreator(ctor, false, properties, 0); continue;"
      },
      {
        "txt": "} PropertyName impl = candidate.findImplicitParamName(nonAnnotatedParamIndex); if (impl == null || impl.isEmpty()) { if ((nonAnnotatedParamIndex == 0) && isNonStaticInnerClass) { throw new IllegalArgumentException(\"Non-static inner classes like \" +ctor.getDeclaringClass().getName()+\" cannot use @JsonCreator for constructors\"); } ctxt.reportBadTypeDefinition(beanDesc, \"Argument #%d of constructor %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\", nonAnnotatedParamIndex, ctor);"
      },
      {
        "txt": "} } if (!creators.hasDefaultCreator()) { if (implicitCtors == null) { implicitCtors = new LinkedList<>(); } implicitCtors.add(ctor); } } if ((implicitCtors != null) && !creators.hasDelegatingCreator()"
      },
      {
        "txt": "&& !creators.hasPropertyBasedCreator()) { _checkImplicitlyNamedConstructors(ctxt, beanDesc, vchecker, intr, creators, implicitCtors); } } protected void _addExplicitDelegatingCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException {"
      },
      {
        "txt": "int ix = -1; final int argCount = candidate.paramCount(); SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; for (int i = 0; i < argCount; ++i) { AnnotatedParameter param = candidate.parameter(i); JacksonInject.Value injectId = candidate.injection(i); if (injectId != null) { properties[i] = constructCreatorProperty(ctxt, beanDesc, null, i, param, injectId); continue; }"
      },
      {
        "txt": "if (ix < 0) { ix = i; continue; } ctxt.reportBadTypeDefinition(beanDesc, \"More than one argument (#%d and #%d) left as delegating for Creator %s: only one allowed\", ix, i, candidate); } if (ix < 0) { ctxt.reportBadTypeDefinition(beanDesc,"
      },
      {
        "txt": "\"No argument left as delegating for Creator %s: exactly one required\", candidate); } if (argCount == 1) { _handleSingleArgumentCreator(creators, candidate.creator(), true, true); BeanPropertyDefinition paramDef = candidate.propertyDef(0); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } return; }"
      },
      {
        "txt": "creators.addDelegatingCreator(candidate.creator(), true, properties, ix); } protected void _addExplicitPropertyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { final int paramCount = candidate.paramCount(); SettableBeanProperty[] properties = new SettableBeanProperty[paramCount]; for (int i = 0; i < paramCount; ++i) {"
      },
      {
        "txt": "JacksonInject.Value injectId = candidate.injection(i); AnnotatedParameter param = candidate.parameter(i); PropertyName name = candidate.paramName(i); if (name == null) { NameTransformer unwrapper = ctxt.getAnnotationIntrospector().findUnwrappingNameTransformer(param); if (unwrapper != null) { _reportUnwrappedCreatorProperty(ctxt, beanDesc, param); properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null); ++explicitNameCount; }"
      },
      {
        "txt": "name = candidate.findImplicitParamName(i); if ((name == null) && (injectId == null)) { ctxt.reportBadTypeDefinition(beanDesc, \"Argument #%d has no property name, is not Injectable: can not use as Creator %s\", i, candidate); } } properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectId); } creators.addPropertyCreator(candidate.creator(), true, properties); }"
      },
      {
        "txt": "protected void _addExplicitAnyCreator(DeserializationContext ctxt, BeanDescription beanDesc, CreatorCollector creators, CreatorCandidate candidate) throws JsonMappingException { if (1 != candidate.paramCount()) { int oneNotInjected = candidate.findOnlyParamWithoutInjection(); if (oneNotInjected >= 0) { if (candidate.paramName(oneNotInjected) == null) { _addExplicitDelegatingCreator(ctxt, beanDesc, creators, candidate);"
      },
      {
        "txt": "return; } } _addExplicitPropertyCreator(ctxt, beanDesc, creators, candidate); return; } AnnotatedParameter param = candidate.parameter(0); JacksonInject.Value injectId = candidate.injection(0); PropertyName paramName = candidate.explicitParamName(0); BeanPropertyDefinition paramDef = candidate.propertyDef(0);"
      },
      {
        "txt": "boolean useProps = (paramName != null) || (injectId != null); if (!useProps && (paramDef != null)) { paramName = candidate.paramName(0); useProps = (paramName != null) && paramDef.couldSerialize(); } if (useProps) { SettableBeanProperty[] properties = new SettableBeanProperty[] { constructCreatorProperty(ctxt, beanDesc, paramName, 0, param, injectId) }; creators.addPropertyCreator(candidate.creator(), true, properties);"
      },
      {
        "txt": "return; } _handleSingleArgumentCreator(creators, candidate.creator(), true, true); if (paramDef != null) { ((POJOPropertyBuilder) paramDef).removeConstructors(); } } private boolean _checkIfCreatorPropertyBased(AnnotationIntrospector intr, AnnotatedWithParams creator, BeanPropertyDefinition propDef) {"
      },
      {
        "txt": "if (((propDef != null) && propDef.isExplicitlyNamed()) || (intr.findInjectableValue(creator.getParameter(0)) != null)) { return true; } if (propDef != null) { String implName = propDef.getName(); if (implName != null && !implName.isEmpty()) { if (propDef.couldSerialize()) { return true; }"
      },
      {
        "txt": "} } return false; } private void _checkImplicitlyNamedConstructors(DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators, List<AnnotatedWithParams> implicitCtors) throws JsonMappingException { AnnotatedWithParams found = null;"
      },
      {
        "txt": "SettableBeanProperty[] foundProps = null; main_loop: for (AnnotatedWithParams ctor : implicitCtors) { if (!vchecker.isCreatorVisible(ctor)) { continue; } final int argCount = ctor.getParameterCount(); SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = ctor.getParameter(i);"
      },
      {
        "txt": "final PropertyName name = _findParamName(param, intr); if (name == null || name.isEmpty()) { continue main_loop; } properties[i] = constructCreatorProperty(ctxt, beanDesc, name, param.getIndex(), param, /*injectId*/ null); } if (found != null) { // only one allowed; but multiple not an error found = null; break;"
      },
      {
        "txt": "} found = ctor; foundProps = properties; } if (found != null) { creators.addPropertyCreator(found, /*isCreator*/ false, foundProps); BasicBeanDescription bbd = (BasicBeanDescription) beanDesc; for (SettableBeanProperty prop : foundProps) { PropertyName pn = prop.getFullName(); if (!bbd.hasProperty(pn)) {"
      },
      {
        "txt": "BeanPropertyDefinition newDef = SimpleBeanPropertyDefinition.construct( ctxt.getConfig(), prop.getMember(), pn); bbd.addProperty(newDef); } } } } protected void _addDeserializerFactoryMethods (DeserializationContext ctxt, BeanDescription beanDesc, VisibilityChecker<?> vchecker, AnnotationIntrospector intr, CreatorCollector creators,"
      },
      {
        "txt": "Map<AnnotatedWithParams,BeanPropertyDefinition[]> creatorParams) throws JsonMappingException { List<CreatorCandidate> nonAnnotated = new LinkedList<>(); int explCount = 0; for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) { JsonCreator.Mode creatorMode = intr.findCreatorAnnotation(ctxt.getConfig(), factory); final int argCount = factory.getParameterCount(); if (creatorMode == null) { if ((argCount == 1) && vchecker.isCreatorVisible(factory)) {"
      },
      {
        "txt": "nonAnnotated.add(CreatorCandidate.construct(intr, factory, null)); } continue; } if (creatorMode == Mode.DISABLED) { continue; } if (argCount == 0) { creators.setDefaultCreator(factory); continue;"
      },
      {
        "txt": "} switch (creatorMode) { case DELEGATING: _addExplicitDelegatingCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, factory, null)); break; case PROPERTIES: _addExplicitPropertyCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, factory, creatorParams.get(factory))); break;"
      },
      {
        "txt": "case DEFAULT: default: _addExplicitAnyCreator(ctxt, beanDesc, creators, CreatorCandidate.construct(intr, factory, creatorParams.get(factory))); break; } ++explCount; } if (explCount > 0) { // TODO: split method into two since we could have expl factories return;"
      },
      {
        "txt": "} for (CreatorCandidate candidate : nonAnnotated) { final int argCount = candidate.paramCount(); AnnotatedWithParams factory = candidate.creator(); final BeanPropertyDefinition[] propDefs = creatorParams.get(factory); if (argCount != 1) { continue; // 2 and more args? Must be explicit, handled earlier } BeanPropertyDefinition argDef = candidate.propertyDef(0); boolean useProps = _checkIfCreatorPropertyBased(intr, factory, argDef);"
      },
      {
        "txt": "if (!useProps) { // not property based but delegating factory, false, vchecker.isCreatorVisible(factory)); if (argDef != null) { ((POJOPropertyBuilder) argDef).removeConstructors(); } continue; } AnnotatedParameter nonAnnotatedParam = null; SettableBeanProperty[] properties = new SettableBeanProperty[argCount]; int implicitNameCount = 0;"
      },
      {
        "txt": "int explicitNameCount = 0; int injectCount = 0; for (int i = 0; i < argCount; ++i) { final AnnotatedParameter param = factory.getParameter(i); BeanPropertyDefinition propDef = (propDefs == null) ? null : propDefs[i]; JacksonInject.Value injectable = intr.findInjectableValue(param); final PropertyName name = (propDef == null) ? null : propDef.getFullName(); if (propDef != null && propDef.isExplicitlyNamed()) { ++explicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable);"
      },
      {
        "txt": "continue; } if (injectable != null) { ++injectCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable); continue; } NameTransformer unwrapper = intr.findUnwrappingNameTransformer(param); if (unwrapper != null) { _reportUnwrappedCreatorProperty(ctxt, beanDesc, param);"
      },
      {
        "txt": "properties[i] = constructCreatorProperty(ctxt, beanDesc, UNWRAPPED_CREATOR_PARAM_NAME, i, param, null); ++implicitNameCount; continue; } if (isCreator) { if (name != null && !name.isEmpty()) { ++implicitNameCount; properties[i] = constructCreatorProperty(ctxt, beanDesc, name, i, param, injectable); continue; }"
      },
      {
        "txt": "} PropertyName name2 = _findExplicitParamName(param, intr); if (name2 != null && !name2.isEmpty()) { continue main_loop; } if (nonAnnotatedParam == null) { nonAnnotatedParam = param; } } final int namedCount = explicitNameCount + implicitNameCount;"
      },
      {
        "txt": "if (explicitNameCount > 0 || injectCount > 0) { if ((namedCount + injectCount) == argCount) { creators.addPropertyCreator(factory, false, properties); } else if ((explicitNameCount == 0) && ((injectCount + 1) == argCount)) { creators.addDelegatingCreator(factory, false, properties, 0); } else { // otherwise, epic fail ctxt.reportBadTypeDefinition(beanDesc, \"Argument #%d of factory method %s has no property name annotation; must have name when multiple-parameter constructor annotated as Creator\", nonAnnotatedParam.getIndex(), factory); }"
      },
      {
        "txt": "} } } protected boolean _handleSingleArgumentCreator(CreatorCollector creators, AnnotatedWithParams ctor, boolean isCreator, boolean isVisible) { Class<?> type = ctor.getRawParameterType(0); if (type == String.class || type == CLASS_CHAR_SEQUENCE) { if (isCreator || isVisible) { creators.addStringCreator(ctor, isCreator);"
      },
      {
        "txt": "} return true; } if (type == int.class || type == Integer.class) { if (isCreator || isVisible) { creators.addIntCreator(ctor, isCreator); } return true; } if (type == long.class || type == Long.class) {"
      },
      {
        "txt": "if (isCreator || isVisible) { creators.addLongCreator(ctor, isCreator); } return true; } if (type == double.class || type == Double.class) { if (isCreator || isVisible) { creators.addDoubleCreator(ctor, isCreator); } return true;"
      },
      {
        "txt": "} if (type == boolean.class || type == Boolean.class) { if (isCreator || isVisible) { creators.addBooleanCreator(ctor, isCreator); } return true; } if (isCreator) { creators.addDelegatingCreator(ctor, isCreator, null, 0); return true;"
      },
      {
        "txt": "} return false; } protected void _reportUnwrappedCreatorProperty(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedParameter param) throws JsonMappingException { ctxt.reportBadDefinition(beanDesc.getType(), String.format( \"Cannot define Creator parameter %d as `@JsonUnwrapped`: combination not yet supported\", param.getIndex()));"
      },
      {
        "txt": "} protected SettableBeanProperty constructCreatorProperty(DeserializationContext ctxt, BeanDescription beanDesc, PropertyName name, int index, AnnotatedParameter param, JacksonInject.Value injectable) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); PropertyMetadata metadata;"
      },
      {
        "txt": "{ if (intr == null) { metadata = PropertyMetadata.STD_REQUIRED_OR_OPTIONAL; } else { Boolean b = intr.hasRequiredMarker(param); String desc = intr.findPropertyDescription(param); Integer idx = intr.findPropertyIndex(param); String def = intr.findPropertyDefaultValue(param); metadata = PropertyMetadata.construct(b, desc, idx, def); }"
      },
      {
        "txt": "} JavaType type = resolveMemberAndTypeAnnotations(ctxt, param, param.getType()); BeanProperty.Std property = new BeanProperty.Std(name, type, intr.findWrapperName(param), param, metadata); TypeDeserializer typeDeser = (TypeDeserializer) type.getTypeHandler(); if (typeDeser == null) { typeDeser = findTypeDeserializer(config, type); } Object injectableValueId = (injectable == null) ? null : injectable.getId(); SettableBeanProperty prop = new CreatorProperty(name, type, property.getWrapperName(),"
      },
      {
        "txt": "typeDeser, beanDesc.getClassAnnotations(), param, index, injectableValueId, metadata); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, param); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); }"
      },
      {
        "txt": "return prop; } private PropertyName _findParamName(AnnotatedParameter param, AnnotationIntrospector intr) { if (param != null && intr != null) { PropertyName name = intr.findNameForDeserialization(param); if (name != null) { return name; } String str = intr.findImplicitPropertyName(param);"
      },
      {
        "txt": "if (str != null && !str.isEmpty()) { return PropertyName.construct(str); } } return null; } @Override public JsonDeserializer<?> createArrayDeserializer(DeserializationContext ctxt, ArrayType type, final BeanDescription beanDesc) throws JsonMappingException"
      },
      {
        "txt": "{ final DeserializationConfig config = ctxt.getConfig(); JavaType elemType = type.getContentType(); JsonDeserializer<Object> contentDeser = elemType.getValueHandler(); TypeDeserializer elemTypeDeser = elemType.getTypeHandler(); if (elemTypeDeser == null) { elemTypeDeser = findTypeDeserializer(config, elemType); } JsonDeserializer<?> deser = _findCustomArrayDeserializer(type, config, beanDesc, elemTypeDeser, contentDeser);"
      },
      {
        "txt": "if (deser == null) { if (contentDeser == null) { Class<?> raw = elemType.getRawClass(); if (elemType.isPrimitive()) { return PrimitiveArrayDeserializers.forType(raw); } if (raw == String.class) { return StringArrayDeserializer.instance; } }"
      },
      {
        "txt": "deser = new ObjectArrayDeserializer(type, contentDeser, elemTypeDeser); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyArrayDeserializer(config, type, beanDesc, deser); } } return deser; } @Override"
      },
      {
        "txt": "public JsonDeserializer<?> createCollectionDeserializer(DeserializationContext ctxt, CollectionType type, BeanDescription beanDesc) throws JsonMappingException { JavaType contentType = type.getContentType(); JsonDeserializer<Object> contentDeser = contentType.getValueHandler(); final DeserializationConfig config = ctxt.getConfig(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType);"
      },
      {
        "txt": "} JsonDeserializer<?> deser = _findCustomCollectionDeserializer(type, config, beanDesc, contentTypeDeser, contentDeser); if (deser == null) { Class<?> collectionClass = type.getRawClass(); if (contentDeser == null) { // not defined by annotation if (EnumSet.class.isAssignableFrom(collectionClass)) { deser = new EnumSetDeserializer(contentType, null); } }"
      },
      {
        "txt": "} if (deser == null) { if (type.isInterface() || type.isAbstract()) { CollectionType implType = _mapAbstractCollectionType(type, config); if (implType == null) { if (type.getTypeHandler() == null) { throw new IllegalArgumentException(\"Cannot find a deserializer for non-concrete Collection type \"+type); } deser = AbstractDeserializer.constructForNonPOJO(beanDesc); } else {"
      },
      {
        "txt": "type = implType; beanDesc = config.introspectForCreation(type); } } if (deser == null) { ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc); if (!inst.canCreateUsingDefault()) { if (type.hasRawClass(ArrayBlockingQueue.class)) { return new ArrayBlockingQueueDeserializer(type, contentDeser, contentTypeDeser, inst); }"
      },
      {
        "txt": "deser = JavaUtilCollectionsDeserializers.findForCollection(ctxt, type); if (deser != null) { return deser; } } if (contentType.hasRawClass(String.class)) { deser = new StringCollectionDeserializer(type, contentDeser, inst); } else { deser = new CollectionDeserializer(type, contentDeser, contentTypeDeser, inst); }"
      },
      {
        "txt": "} } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyCollectionDeserializer(config, type, beanDesc, deser); } } return deser; } protected CollectionType _mapAbstractCollectionType(JavaType type, DeserializationConfig config)"
      },
      {
        "txt": "{ Class<?> collectionClass = type.getRawClass(); collectionClass = _collectionFallbacks.get(collectionClass.getName()); if (collectionClass == null) { return null; } return (CollectionType) config.constructSpecializedType(type, collectionClass); } @Override public JsonDeserializer<?> createCollectionLikeDeserializer(DeserializationContext ctxt,"
      },
      {
        "txt": "CollectionLikeType type, final BeanDescription beanDesc) throws JsonMappingException { JavaType contentType = type.getContentType(); JsonDeserializer<Object> contentDeser = contentType.getValueHandler(); final DeserializationConfig config = ctxt.getConfig(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType); }"
      },
      {
        "txt": "JsonDeserializer<?> deser = _findCustomCollectionLikeDeserializer(type, config, beanDesc, contentTypeDeser, contentDeser); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyCollectionLikeDeserializer(config, type, beanDesc, deser); } } } return deser;"
      },
      {
        "txt": "} @Override public JsonDeserializer<?> createMapDeserializer(DeserializationContext ctxt, MapType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JavaType keyType = type.getKeyType(); JavaType contentType = type.getContentType(); @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler(); KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomMapDeserializer(type, config, beanDesc, keyDes, contentTypeDeser, contentDeser); if (deser == null) { Class<?> mapClass = type.getRawClass();"
      },
      {
        "txt": "if (EnumMap.class.isAssignableFrom(mapClass)) { ValueInstantiator inst; if (mapClass == EnumMap.class) { inst = null; } else { inst = findValueInstantiator(ctxt, beanDesc); } Class<?> kt = keyType.getRawClass(); if (kt == null || !kt.isEnum()) { throw new IllegalArgumentException(\"Cannot construct EnumMap; generic (key) type not available\");"
      },
      {
        "txt": "} deser = new EnumMapDeserializer(type, inst, null, contentDeser, contentTypeDeser, null); } if (deser == null) { if (type.isInterface() || type.isAbstract()) { @SuppressWarnings(\"rawtypes\") Class<? extends Map> fallback = _mapFallbacks.get(mapClass.getName()); if (fallback != null) { mapClass = fallback;"
      },
      {
        "txt": "type = (MapType) config.constructSpecializedType(type, mapClass); beanDesc = config.introspectForCreation(type); } else { if (type.getTypeHandler() == null) { throw new IllegalArgumentException(\"Cannot find a deserializer for non-concrete Map type \"+type); } deser = AbstractDeserializer.constructForNonPOJO(beanDesc); } } else { deser = JavaUtilCollectionsDeserializers.findForMap(ctxt, type);"
      },
      {
        "txt": "if (deser != null) { return deser; } } if (deser == null) { ValueInstantiator inst = findValueInstantiator(ctxt, beanDesc); MapDeserializer md = new MapDeserializer(type, inst, keyDes, contentDeser, contentTypeDeser); JsonIgnoreProperties.Value ignorals = config.getDefaultPropertyIgnorals(Map.class, beanDesc.getClassInfo()); Set<String> ignored = (ignorals == null) ? null"
      },
      {
        "txt": ": ignorals.findIgnoredForDeserialization(); md.setIgnorableProperties(ignored); deser = md; } } } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyMapDeserializer(config, type, beanDesc, deser); }"
      },
      {
        "txt": "} return deser; } @Override public JsonDeserializer<?> createMapLikeDeserializer(DeserializationContext ctxt, MapLikeType type, final BeanDescription beanDesc) throws JsonMappingException { JavaType keyType = type.getKeyType(); JavaType contentType = type.getContentType();"
      },
      {
        "txt": "final DeserializationConfig config = ctxt.getConfig(); @SuppressWarnings(\"unchecked\") JsonDeserializer<Object> contentDeser = (JsonDeserializer<Object>) contentType.getValueHandler(); KeyDeserializer keyDes = (KeyDeserializer) keyType.getValueHandler(); if (keyDes == null) { keyDes = p.findKeyDeserializer(config, keyType, property); } TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { contentTypeDeser = findTypeDeserializer(config, contentType);"
      },
      {
        "txt": "} JsonDeserializer<?> deser = _findCustomMapLikeDeserializer(type, config, beanDesc, keyDes, contentTypeDeser, contentDeser); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyMapLikeDeserializer(config, type, beanDesc, deser); } } }"
      },
      {
        "txt": "return deser; } @Override public JsonDeserializer<?> createEnumDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); final Class<?> enumClass = type.getRawClass(); JsonDeserializer<?> deser = _findCustomEnumDeserializer(enumClass, config, beanDesc);"
      },
      {
        "txt": "if (deser == null) { ValueInstantiator valueInstantiator = _constructDefaultValueInstantiator(ctxt, beanDesc); SettableBeanProperty[] creatorProps = (valueInstantiator == null) ? null : valueInstantiator.getFromObjectArguments(ctxt.getConfig()); for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) { if (_hasCreatorAnnotation(ctxt, factory)) { if (factory.getParameterCount() == 0) { // [databind#960] deser = EnumDeserializer.deserializerForNoArgsCreator(config, enumClass, factory); break; }"
      },
      {
        "txt": "Class<?> returnType = factory.getRawReturnType(); if (returnType.isAssignableFrom(enumClass)) { deser = EnumDeserializer.deserializerForCreator(config, enumClass, factory, valueInstantiator, creatorProps); break; } } } if (deser == null) { deser = new EnumDeserializer(constructEnumResolver(enumClass, config, beanDesc.findJsonValueAccessor()),"
      },
      {
        "txt": "config.isEnabled(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS)); } } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyEnumDeserializer(config, type, beanDesc, deser); } } return deser; }"
      },
      {
        "txt": "@Override public JsonDeserializer<?> createTreeDeserializer(DeserializationConfig config, JavaType nodeType, BeanDescription beanDesc) throws JsonMappingException { @SuppressWarnings(\"unchecked\") Class<? extends JsonNode> nodeClass = (Class<? extends JsonNode>) nodeType.getRawClass(); JsonDeserializer<?> custom = _findCustomTreeNodeDeserializer(nodeClass, config, beanDesc); if (custom != null) {"
      },
      {
        "txt": "return custom; } return JsonNodeDeserializer.getDeserializer(nodeClass); } @Override public JsonDeserializer<?> createReferenceDeserializer(DeserializationContext ctxt, ReferenceType type, BeanDescription beanDesc) throws JsonMappingException { JavaType contentType = type.getContentType();"
      },
      {
        "txt": "JsonDeserializer<Object> contentDeser = contentType.getValueHandler(); final DeserializationConfig config = ctxt.getConfig(); TypeDeserializer contentTypeDeser = contentType.getTypeHandler(); if (contentTypeDeser == null) { // or if not, may be able to find: contentTypeDeser = findTypeDeserializer(config, contentType); } JsonDeserializer<?> deser = _findCustomReferenceDeserializer(type, config, beanDesc, contentTypeDeser, contentDeser); if (deser == null) { if (type.isTypeOrSubTypeOf(AtomicReference.class)) {"
      },
      {
        "txt": "Class<?> rawType = type.getRawClass(); ValueInstantiator inst; if (rawType == AtomicReference.class) { inst = null; } else { inst = findValueInstantiator(ctxt, beanDesc); } return new AtomicReferenceDeserializer(type, inst, contentTypeDeser, contentDeser); } }"
      },
      {
        "txt": "if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyReferenceDeserializer(config, type, beanDesc, deser); } } } return deser; } @Override"
      },
      {
        "txt": "public TypeDeserializer findTypeDeserializer(DeserializationConfig config, JavaType baseType) throws JsonMappingException { BeanDescription bean = config.introspectClassAnnotations(baseType.getRawClass()); AnnotatedClass ac = bean.getClassInfo(); AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findTypeResolver(config, ac, baseType); Collection<NamedType> subtypes = null; if (b == null) {"
      },
      {
        "txt": "b = config.getDefaultTyper(baseType); if (b == null) { return null; } } else { subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId(config, ac); } if ((b.getDefaultImpl() == null) && baseType.isAbstract()) { JavaType defaultType = mapAbstractType(config, baseType); if ((defaultType != null) && !defaultType.hasRawClass(baseType.getRawClass())) {"
      },
      {
        "txt": "} } try { return b.buildTypeDeserializer(config, baseType, subtypes); } catch (IllegalArgumentException e0) { InvalidDefinitionException e = InvalidDefinitionException.from((JsonParser) null, <extra_id_0> e.initCause(e0); throw e; } } protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "protected JsonDeserializer<?> findOptionalStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { return OptionalHandlerFactory.instance.findDeserializer(type, ctxt.getConfig(), beanDesc); } @Override public KeyDeserializer createKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException"
      },
      {
        "txt": "{ final DeserializationConfig config = ctxt.getConfig(); KeyDeserializer deser = null; if (_factoryConfig.hasKeyDeserializers()) { BeanDescription beanDesc = config.introspectClassAnnotations(type.getRawClass()); for (KeyDeserializers d : _factoryConfig.keyDeserializers()) { deser = d.findKeyDeserializer(type, config, beanDesc); if (deser != null) { break; }"
      },
      {
        "txt": "} } if (deser == null) { if (type.isEnumType()) { deser = _createEnumKeyDeserializer(ctxt, type); } else { deser = StdKeyDeserializers.findStringBasedKeyDeserializer(config, type); } } if (deser != null) {"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyKeyDeserializer(config, type, deser); } } } return deser; } private KeyDeserializer _createEnumKeyDeserializer(DeserializationContext ctxt, JavaType type)"
      },
      {
        "txt": "throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); Class<?> enumClass = type.getRawClass(); BeanDescription beanDesc = config.introspect(type); KeyDeserializer des = findKeyDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); if (des != null) { return des; } else { JsonDeserializer<?> custom = _findCustomEnumDeserializer(enumClass, config, beanDesc);"
      },
      {
        "txt": "if (custom != null) { return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, custom); } JsonDeserializer<?> valueDesForKey = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); if (valueDesForKey != null) { return StdKeyDeserializers.constructDelegatingKeyDeserializer(config, type, valueDesForKey); } } EnumResolver enumRes = constructEnumResolver(enumClass, config, beanDesc.findJsonValueAccessor()); for (AnnotatedMethod factory : beanDesc.getFactoryMethods()) {"
      },
      {
        "txt": "if (_hasCreatorAnnotation(ctxt, factory)) { int argCount = factory.getParameterCount(); if (argCount == 1) { Class<?> returnType = factory.getRawReturnType(); if (returnType.isAssignableFrom(enumClass)) { if (factory.getRawParameterType(0) != String.class) { throw new IllegalArgumentException(\"Parameter #0 type for factory method (\"+factory+\") not suitable, must be java.lang.String\"); } if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(factory.getMember(),"
      },
      {
        "txt": "ctxt.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes, factory); } } throw new IllegalArgumentException(\"Unsuitable method (\"+factory+\") decorated with @JsonCreator (for Enum type \" +enumClass.getName()+\")\"); } } return StdKeyDeserializers.constructEnumKeyDeserializer(enumRes);"
      },
      {
        "txt": "} public TypeDeserializer findPropertyTypeDeserializer(DeserializationConfig config, JavaType baseType, AnnotatedMember annotated) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, annotated, baseType); if (b == null) { return findTypeDeserializer(config, baseType); }"
      },
      {
        "txt": "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId( config, annotated, baseType); return b.buildTypeDeserializer(config, baseType, subtypes); } public TypeDeserializer findPropertyContentTypeDeserializer(DeserializationConfig config, JavaType containerType, AnnotatedMember propertyEntity) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, propertyEntity, containerType);"
      },
      {
        "txt": "JavaType contentType = containerType.getContentType(); if (b == null) { return findTypeDeserializer(config, contentType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypesByTypeId( config, propertyEntity, contentType); return b.buildTypeDeserializer(config, contentType, subtypes); } public JsonDeserializer<?> findDefaultDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { Class<?> rawType = type.getRawClass(); if (rawType == CLASS_OBJECT) { DeserializationConfig config = ctxt.getConfig(); JavaType lt, mt; if (_factoryConfig.hasAbstractTypeResolvers()) { lt = _findRemappedType(config, List.class); mt = _findRemappedType(config, Map.class); } else {"
      },
      {
        "txt": "lt = mt = null; } return new UntypedObjectDeserializer(lt, mt); } if (rawType == CLASS_STRING || rawType == CLASS_CHAR_SEQUENCE) { return StringDeserializer.instance; } if (rawType == CLASS_ITERABLE) { TypeFactory tf = ctxt.getTypeFactory(); JavaType[] tps = tf.findTypeParameters(type, CLASS_ITERABLE);"
      },
      {
        "txt": "JavaType elemType = (tps == null || tps.length != 1) ? TypeFactory.unknownType() : tps[0]; CollectionType ct = tf.constructCollectionType(Collection.class, elemType); return createCollectionDeserializer(ctxt, ct, beanDesc); } if (rawType == CLASS_MAP_ENTRY) { JavaType kt = type.containedTypeOrUnknown(0); JavaType vt = type.containedTypeOrUnknown(1); TypeDeserializer vts = (TypeDeserializer) vt.getTypeHandler(); if (vts == null) { vts = findTypeDeserializer(ctxt.getConfig(), vt);"
      },
      {
        "txt": "} JsonDeserializer<Object> valueDeser = vt.getValueHandler(); KeyDeserializer keyDes = (KeyDeserializer) kt.getValueHandler(); return new MapEntryDeserializer(type, keyDes, valueDeser, vts); } String clsName = rawType.getName(); if (rawType.isPrimitive() || clsName.startsWith(\"java.\")) { JsonDeserializer<?> deser = NumberDeserializers.find(rawType, clsName); if (deser == null) { deser = DateDeserializers.find(rawType, clsName);"
      },
      {
        "txt": "} if (deser != null) { return deser; } } if (rawType == TokenBuffer.class) { return new TokenBufferDeserializer(); } JsonDeserializer<?> deser = findOptionalStdDeserializer(ctxt, type, beanDesc); if (deser != null) {"
      },
      {
        "txt": "return deser; } return JdkDeserializers.find(rawType, clsName); } protected JavaType _findRemappedType(DeserializationConfig config, Class<?> rawType) throws JsonMappingException { JavaType type = mapAbstractType(config, config.constructType(rawType)); return (type == null || type.hasRawClass(rawType)) ? null : type; } protected JsonDeserializer<?> _findCustomTreeNodeDeserializer(Class<? extends JsonNode> type, DeserializationConfig config, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findTreeNodeDeserializer(type, config, beanDesc); if (deser != null) { return deser; } } return null; }"
      },
      {
        "txt": "protected JsonDeserializer<?> _findCustomReferenceDeserializer(ReferenceType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer contentTypeDeserializer, JsonDeserializer<?> contentDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findReferenceDeserializer(type, config, beanDesc, contentTypeDeserializer, contentDeserializer); if (deser != null) { return deser;"
      },
      {
        "txt": "} } return null; } @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> _findCustomBeanDeserializer(JavaType type, DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) {"
      },
      {
        "txt": "JsonDeserializer<?> deser = d.findBeanDeserializer(type, config, beanDesc); if (deser != null) { return (JsonDeserializer<Object>) deser; } } return null; } protected JsonDeserializer<?> _findCustomArrayDeserializer(ArrayType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)"
      },
      {
        "txt": "throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findArrayDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; } } return null;"
      },
      {
        "txt": "} protected JsonDeserializer<?> _findCustomCollectionDeserializer(CollectionType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findCollectionDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) {"
      },
      {
        "txt": "return deser; } } return null; } protected JsonDeserializer<?> _findCustomCollectionLikeDeserializer(CollectionLikeType type, DeserializationConfig config, BeanDescription beanDesc, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException {"
      },
      {
        "txt": "for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findCollectionLikeDeserializer(type, config, beanDesc, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; } } return null; } protected JsonDeserializer<?> _findCustomEnumDeserializer(Class<?> type,"
      },
      {
        "txt": "DeserializationConfig config, BeanDescription beanDesc) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findEnumDeserializer(type, config, beanDesc); if (deser != null) { return deser; } } return null;"
      },
      {
        "txt": "} protected JsonDeserializer<?> _findCustomMapDeserializer(MapType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer) throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findMapDeserializer(type, config, beanDesc, keyDeserializer, elementTypeDeserializer, elementDeserializer);"
      },
      {
        "txt": "if (deser != null) { return deser; } } return null; } protected JsonDeserializer<?> _findCustomMapLikeDeserializer(MapLikeType type, DeserializationConfig config, BeanDescription beanDesc, KeyDeserializer keyDeserializer, TypeDeserializer elementTypeDeserializer, JsonDeserializer<?> elementDeserializer)"
      },
      {
        "txt": "throws JsonMappingException { for (Deserializers d : _factoryConfig.deserializers()) { JsonDeserializer<?> deser = d.findMapLikeDeserializer(type, config, beanDesc, keyDeserializer, elementTypeDeserializer, elementDeserializer); if (deser != null) { return deser; } } return null;"
      },
      {
        "txt": "} protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr != null) { Object deserDef = intr.findDeserializer(ann); if (deserDef != null) { return ctxt.deserializerInstance(ann, deserDef);"
      },
      {
        "txt": "} } return null; } protected KeyDeserializer findKeyDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr != null) {"
      },
      {
        "txt": "Object deserDef = intr.findKeyDeserializer(ann); if (deserDef != null) { return ctxt.keyDeserializerInstance(ann, deserDef); } } return null; } protected JsonDeserializer<Object> findContentDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann) throws JsonMappingException"
      },
      {
        "txt": "{ AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr != null) { Object deserDef = intr.findContentDeserializer(ann); if (deserDef != null) { return ctxt.deserializerInstance(ann, deserDef); } } return null; }"
      },
      {
        "txt": "protected JavaType resolveMemberAndTypeAnnotations(DeserializationContext ctxt, AnnotatedMember member, JavaType type) throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr == null) { return type; } if (type.isMapLikeType()) { JavaType keyType = type.getKeyType();"
      },
      {
        "txt": "if (keyType != null) { Object kdDef = intr.findKeyDeserializer(member); KeyDeserializer kd = ctxt.keyDeserializerInstance(member, kdDef); if (kd != null) { type = ((MapLikeType) type).withKeyValueHandler(kd); keyType = type.getKeyType(); // just in case it's used below } } } if (type.hasContentType()) { // that is, is either container- or reference-type"
      },
      {
        "txt": "Object cdDef = intr.findContentDeserializer(member); JsonDeserializer<?> cd = ctxt.deserializerInstance(member, cdDef); if (cd != null) { type = type.withContentValueHandler(cd); } TypeDeserializer contentTypeDeser = findPropertyContentTypeDeserializer( ctxt.getConfig(), type, (AnnotatedMember) member); if (contentTypeDeser != null) { type = type.withContentTypeHandler(contentTypeDeser); }"
      },
      {
        "txt": "} TypeDeserializer valueTypeDeser = findPropertyTypeDeserializer(ctxt.getConfig(), type, (AnnotatedMember) member); if (valueTypeDeser != null) { type = type.withTypeHandler(valueTypeDeser); } type = intr.refineDeserializationType(ctxt.getConfig(), member, type); return type; } protected EnumResolver constructEnumResolver(Class<?> enumClass,"
      },
      {
        "txt": "DeserializationConfig config, AnnotatedMember jsonValueAccessor) { if (jsonValueAccessor != null) { if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(jsonValueAccessor.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } return EnumResolver.constructUnsafeUsingMethod(enumClass, jsonValueAccessor, config.getAnnotationIntrospector()); }"
      },
      {
        "txt": "return EnumResolver.constructUnsafe(enumClass, config.getAnnotationIntrospector()); } protected boolean _hasCreatorAnnotation(DeserializationContext ctxt, Annotated ann) { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr != null) { JsonCreator.Mode mode = intr.findCreatorAnnotation(ctxt.getConfig(), ann); return (mode != null) && (mode != JsonCreator.Mode.DISABLED); } return false;"
      },
      {
        "txt": "} @Deprecated protected JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr == null) { return type; }"
      },
      {
        "txt": "return intr.refineDeserializationType(ctxt.getConfig(), a, type); } @Deprecated // since 2.8 protected JavaType resolveType(DeserializationContext ctxt, BeanDescription beanDesc, JavaType type, AnnotatedMember member) throws JsonMappingException { return resolveMemberAndTypeAnnotations(ctxt, member, type); } @Deprecated // not used, possibly remove as early as 2.9"
      },
      {
        "txt": "protected AnnotatedMethod _findJsonValueFor(DeserializationConfig config, JavaType enumType) { if (enumType == null) { return null; } BeanDescription beanDesc = config.introspect(enumType); return beanDesc.findJsonValueMethod(); }"
      }
    ]
  },
  {
    "id": 1760,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "start-bug-line": 222,
    "end-bug-line": 222,
    "bug": "e.getMessage(),",
    "fix": "ClassUtil.exceptionMessage(e),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig; import com.fasterxml.jackson.databind.deser.impl.*; import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition; public class BeanDeserializerFactory"
      },
      {
        "txt": "extends BasicDeserializerFactory implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1; private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class }; public final static BeanDeserializerFactory instance = new BeanDeserializerFactory( new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) { super(config); }"
      },
      {
        "txt": "@Override public DeserializerFactory withConfig(DeserializerFactoryConfig config) { if (_factoryConfig == config) { return this; } ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\"); return new BeanDeserializerFactory(config); } @Override"
      },
      {
        "txt": "public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc); if (custom != null) { return custom; } if (type.isThrowable()) {"
      },
      {
        "txt": "return buildThrowableDeserializer(ctxt, type, beanDesc); } if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) { JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc); if (concreteType != null) { beanDesc = config.introspect(concreteType); return buildBeanDeserializer(ctxt, concreteType, beanDesc); } } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc); if (deser != null) { return deser; } if (!isPotentialBeanType(type.getRawClass())) { return null; } _validateSubType(ctxt, type, beanDesc); return buildBeanDeserializer(ctxt, type, beanDesc); }"
      },
      {
        "txt": "@Override public JsonDeserializer<Object> createBuilderBasedDeserializer(DeserializationContext ctxt, JavaType valueType, BeanDescription beanDesc, Class<?> builderClass) throws JsonMappingException { JavaType builderType = ctxt.constructType(builderClass); BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType); return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc); } protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt,"
      },
      {
        "txt": "JavaType type, BeanDescription beanDesc) throws JsonMappingException { JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser); } }"
      },
      {
        "txt": "} return deser; } protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc); if (concrete != null) {"
      },
      {
        "txt": "return concrete; } } return null; } @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {"
      },
      {
        "txt": "try { valueInstantiator = findValueInstantiator(ctxt, beanDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } catch (IllegalArgumentException e) { throw InvalidDefinitionException.from(ctxt.getParser(), <extra_id_0> beanDesc, null); } BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, beanDesc, builder); addObjectIdReader(ctxt, beanDesc, builder);"
      },
      {
        "txt": "addBeanProps(ctxt, beanDesc, builder); addObjectIdReader(ctxt, beanDesc, builder); addBackReferenceProperties(ctxt, beanDesc, builder); addInjectables(ctxt, beanDesc, builder); final DeserializationConfig config = ctxt.getConfig(); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } }"
      },
      {
        "txt": "JsonDeserializer<?> deserializer; if (type.isAbstract() && !valueInstantiator.canInstantiate()) { deserializer = builder.buildAbstract(); } else { deserializer = builder.build(); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); }"
      },
      {
        "txt": "} return (JsonDeserializer<Object>) deserializer; } @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> buildBuilderBasedDeserializer( DeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc) throws JsonMappingException { ValueInstantiator valueInstantiator; try {"
      },
      {
        "txt": "valueInstantiator = findValueInstantiator(ctxt, builderDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } catch (IllegalArgumentException e) { throw InvalidDefinitionException.from(ctxt.getParser(), e.getMessage(), builderDesc, null); } final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc);"
      },
      {
        "txt": "builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, builderDesc, builder); addObjectIdReader(ctxt, builderDesc, builder); addBackReferenceProperties(ctxt, builderDesc, builder); addInjectables(ctxt, builderDesc, builder); JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig(); final String buildMethodName = (builderConfig == null) ? JsonPOJOBuilder.DEFAULT_BUILD_METHOD : builderConfig.buildMethodName; AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null); if (buildMethod != null) { // note: can't yet throw error; may be given build method"
      },
      {
        "txt": "if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } } builder.setPOJOBuilder(buildMethod, builderConfig); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, builderDesc, builder); } }"
      },
      {
        "txt": "JsonDeserializer<?> deserializer = builder.buildBuilderBased( valueType, buildMethodName); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, builderDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected void addObjectIdReader(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo(); if (objectIdInfo == null) { return; } Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType idType; SettableBeanProperty idProp;"
      },
      {
        "txt": "ObjectIdGenerator<?> gen; ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work PropertyName propName = objectIdInfo.getPropertyName(); idProp = builder.findProperty(propName); if (idProp == null) { throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": cannot find property with name '\"+propName+\"'\"); } idType = idProp.getType();"
      },
      {
        "txt": "gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); } else { JavaType type = ctxt.constructType(implClass); idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; idProp = null; gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo); } JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc)); addBeanProps(ctxt, beanDesc, builder);"
      },
      {
        "txt": "AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS); if (am != null) { // should never be null SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(\"cause\")); SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0)); if (prop != null) { builder.addOrReplaceProperty(prop, true); } }"
      },
      {
        "txt": "builder.addIgnorable(\"localizedMessage\"); builder.addIgnorable(\"suppressed\"); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer = builder.build(); if (deserializer instanceof BeanDeserializer) { deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer);"
      },
      {
        "txt": "} if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt, BeanDescription beanDesc) {"
      },
      {
        "txt": "return new BeanDeserializerBuilder(beanDesc, ctxt); } protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;"
      },
      {
        "txt": "final boolean hasCreatorProps = (creatorProps != null); JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.findIgnoredForDeserialization(); for (String propName : ignored) {"
      },
      {
        "txt": "builder.addIgnorable(propName); } } else { ignored = Collections.emptySet(); } AnnotatedMember anySetter = beanDesc.findAnySetterAccessor(); if (anySetter != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter)); } else { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();"
      },
      {
        "txt": "if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName); } } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs); } } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { AnnotatedMethod setter = propDef.getSetter(); JavaType propertyType = setter.getParameterType(0);"
      },
      {
        "txt": "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { AnnotatedField field = propDef.getField(); JavaType propertyType = field.getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else { AnnotatedMethod getter = propDef.getGetter(); if (getter != null) { if (useGettersAsSetters && _isSetterlessType(getter.getRawType())) { if (builder.hasIgnorable(propDef.getName())) {"
      },
      {
        "txt": "; } else { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } else if (!propDef.hasConstructorParameter()) { PropertyMetadata md = propDef.getMetadata(); if (md.getMergeInfo() != null) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } }"
      },
      {
        "txt": "} } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName(); CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break;"
      },
      {
        "txt": "} } } if (cprop == null) { List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\","
      },
      {
        "txt": "name, n); continue; } if (prop != null) { cprop.setFallbackSetter(prop); } Class<?>[] views = propDef.findViews(); if (views == null) { views = beanDesc.findDefaultViews(); }"
      },
      {
        "txt": "cprop.setViews(views); builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { views = beanDesc.findDefaultViews(); } prop.setViews(views);"
      },
      {
        "txt": "builder.addProperty(prop); } } } private boolean _isSetterlessType(Class<?> rawType) { return Collection.class.isAssignableFrom(rawType) || Map.class.isAssignableFrom(rawType); } protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder,"
      },
      {
        "txt": "List<BeanPropertyDefinition> propDefsIn, Set<String> ignored) throws JsonMappingException { ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>( Math.max(4, propDefsIn.size())); HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>(); for (BeanPropertyDefinition property : propDefsIn) { String name = property.getName(); if (ignored.contains(name)) { // explicit ignoral using @JsonIgnoreProperties needs to block entries"
      },
      {
        "txt": "continue; } if (!property.hasConstructorParameter()) { // never skip constructor params Class<?> rawPropertyType = property.getRawPrimaryType(); if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), property, rawPropertyType, ignoredTypes)) { builder.addIgnorable(name); continue; } }"
      },
      {
        "txt": "result.add(property); } return result; } protected void addBackReferenceProperties(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { List<BeanPropertyDefinition> refProps = beanDesc.findBackReferences(); if (refProps != null) {"
      },
      {
        "txt": "for (BeanPropertyDefinition refProp : refProps) { AnnotatedMember m = refProp.getMutator(); JavaType type; if (m instanceof AnnotatedMethod) { type = ((AnnotatedMethod) m).getParameterType(0); } else { type = m.getType(); if (m instanceof AnnotatedParameter) { ctxt.reportBadTypeDefinition(beanDesc, \"Cannot bind back reference using Creator parameter (reference '%s', parameter index #%d)\","
      },
      {
        "txt": "name, ((AnnotatedParameter) m).getIndex()); } } String refName = refProp.findReferenceName(); builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt, beanDesc, refProp, refProp.getPrimaryType())); } } } @Deprecated // since 2.9 (rename)"
      },
      {
        "txt": "protected void addReferenceProperties(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { addBackReferenceProperties(ctxt, beanDesc, builder); } protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {"
      },
      {
        "txt": "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables(); if (raw != null) { for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) { AnnotatedMember m = entry.getValue(); builder.addInjectable(PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey()); } } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedMember mutator) throws JsonMappingException { BeanProperty prop; JavaType keyType; JavaType valueType; if (mutator instanceof AnnotatedMethod) { AnnotatedMethod am = (AnnotatedMethod) mutator;"
      },
      {
        "txt": "keyType = am.getParameterType(0); valueType = am.getParameterType(1); valueType = resolveMemberAndTypeAnnotations(ctxt, mutator, valueType); prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), valueType, null, mutator, PropertyMetadata.STD_OPTIONAL); } else if (mutator instanceof AnnotatedField) { AnnotatedField af = (AnnotatedField) mutator; JavaType mapType = af.getType(); mapType = resolveMemberAndTypeAnnotations(ctxt, mutator, mapType);"
      },
      {
        "txt": "keyType = mapType.getKeyType(); valueType = mapType.getContentType(); prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), mapType, null, mutator, PropertyMetadata.STD_OPTIONAL); } else { return ctxt.reportBadDefinition(beanDesc.getType(), String.format( \"Unrecognized mutator type for any setter: %s\", mutator.getClass())); } KeyDeserializer keyDeser = findKeyDeserializerFromAnnotation(ctxt, mutator); if (keyDeser == null) {"
      },
      {
        "txt": "keyDeser = keyType.getValueHandler(); } if (keyDeser == null) { keyDeser = ctxt.findKeyDeserializer(keyType, prop); } else { if (keyDeser instanceof ContextualKeyDeserializer) { keyDeser = ((ContextualKeyDeserializer) keyDeser) .createContextual(ctxt, prop); } }"
      },
      {
        "txt": "JsonDeserializer<Object> deser = findContentDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = valueType.getValueHandler(); } if (deser != null) { deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, valueType); } TypeDeserializer typeDeser = valueType.getTypeHandler(); return new SettableAnyProperty(prop, mutator, valueType, keyDeser, deser, typeDeser);"
      },
      {
        "txt": "} protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, JavaType propType0) throws JsonMappingException { AnnotatedMember mutator = propDef.getNonConstructorMutator(); if (mutator == null) { ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\"); }"
      },
      {
        "txt": "JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop; if (mutator instanceof AnnotatedMethod) { prop = new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator); } else { prop = new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator); }"
      },
      {
        "txt": "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType(); if (ref != null && ref.isManagedReference()) {"
      },
      {
        "txt": "prop.setManagedReferenceName(ref.getName()); } ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo(); if (objectIdInfo != null){ prop.setObjectIdInfo(objectIdInfo); } return prop; } protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef)"
      },
      {
        "txt": "throws JsonMappingException { final AnnotatedMethod getter = propDef.getGetter(); JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType()); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter); if (deser == null) { deser = type.getValueHandler();"
      },
      {
        "txt": "} if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } return prop; } protected boolean isPotentialBeanType(Class<?> type) { String typeStr = ClassUtil.canBeABeanType(type);"
      },
      {
        "txt": "if (typeStr != null) { throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } if (ClassUtil.isProxyType(type)) { throw new IllegalArgumentException(\"Cannot deserialize Proxy class \"+type.getName()+\" as a Bean\"); } typeStr = ClassUtil.isLocalType(type, true); if (typeStr != null) { throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); }"
      },
      {
        "txt": "return true; } protected boolean isIgnorableType(DeserializationConfig config, BeanPropertyDefinition propDef, Class<?> type, Map<Class<?>,Boolean> ignoredTypes) { Boolean status = ignoredTypes.get(type); if (status != null) { return status.booleanValue(); } if ((type == String.class) || type.isPrimitive()) {"
      },
      {
        "txt": "status = Boolean.FALSE; } else { status = config.getConfigOverride(type).getIsIgnoredType(); if (status == null) { BeanDescription desc = config.introspectClassAnnotations(type); status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo()); if (status == null) { status = Boolean.FALSE; } }"
      },
      {
        "txt": "} ignoredTypes.put(type, status); return status.booleanValue(); } protected void _validateSubType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc); }"
      }
    ]
  },
  {
    "id": 1761,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "start-bug-line": 281,
    "end-bug-line": 281,
    "bug": "e.getMessage(),",
    "fix": "ClassUtil.exceptionMessage(e),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig; import com.fasterxml.jackson.databind.deser.impl.*; import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer; import com.fasterxml.jackson.databind.exc.InvalidDefinitionException; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.impl.SubTypeValidator; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition; public class BeanDeserializerFactory"
      },
      {
        "txt": "extends BasicDeserializerFactory implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1; private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class }; public final static BeanDeserializerFactory instance = new BeanDeserializerFactory( new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) { super(config); }"
      },
      {
        "txt": "@Override public DeserializerFactory withConfig(DeserializerFactoryConfig config) { if (_factoryConfig == config) { return this; } ClassUtil.verifyMustOverride(BeanDeserializerFactory.class, this, \"withConfig\"); return new BeanDeserializerFactory(config); } @Override"
      },
      {
        "txt": "public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc); if (custom != null) { return custom; } if (type.isThrowable()) {"
      },
      {
        "txt": "return buildThrowableDeserializer(ctxt, type, beanDesc); } if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) { JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc); if (concreteType != null) { beanDesc = config.introspect(concreteType); return buildBeanDeserializer(ctxt, concreteType, beanDesc); } } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc); if (deser != null) { return deser; } if (!isPotentialBeanType(type.getRawClass())) { return null; } _validateSubType(ctxt, type, beanDesc); return buildBeanDeserializer(ctxt, type, beanDesc); }"
      },
      {
        "txt": "@Override public JsonDeserializer<Object> createBuilderBasedDeserializer(DeserializationContext ctxt, JavaType valueType, BeanDescription beanDesc, Class<?> builderClass) throws JsonMappingException { JavaType builderType = ctxt.constructType(builderClass); BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType); return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc); } protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt,"
      },
      {
        "txt": "JavaType type, BeanDescription beanDesc) throws JsonMappingException { JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser); } }"
      },
      {
        "txt": "} return deser; } protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc); if (concrete != null) {"
      },
      {
        "txt": "return concrete; } } return null; } @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {"
      },
      {
        "txt": "ValueInstantiator valueInstantiator; try { valueInstantiator = findValueInstantiator(ctxt, beanDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } catch (IllegalArgumentException e) { throw InvalidDefinitionException.from(ctxt.getParser(), e.getMessage(), beanDesc, null); }"
      },
      {
        "txt": "BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, beanDesc, builder); addObjectIdReader(ctxt, beanDesc, builder); addBackReferenceProperties(ctxt, beanDesc, builder); addInjectables(ctxt, beanDesc, builder); final DeserializationConfig config = ctxt.getConfig(); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder);"
      },
      {
        "txt": "} } JsonDeserializer<?> deserializer; if (type.isAbstract() && !valueInstantiator.canInstantiate()) { deserializer = builder.buildAbstract(); } else { deserializer = builder.build(); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {"
      },
      {
        "txt": "deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> buildBuilderBasedDeserializer( DeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc) throws JsonMappingException {"
      },
      {
        "txt": "try { valueInstantiator = findValueInstantiator(ctxt, builderDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } catch (IllegalArgumentException e) { throw InvalidDefinitionException.from(ctxt.getParser(), <extra_id_0> builderDesc, null); } final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, builderDesc, builder);"
      },
      {
        "txt": "builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, builderDesc, builder); addObjectIdReader(ctxt, builderDesc, builder); addBackReferenceProperties(ctxt, builderDesc, builder); addInjectables(ctxt, builderDesc, builder); JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig(); final String buildMethodName = (builderConfig == null) ? JsonPOJOBuilder.DEFAULT_BUILD_METHOD : builderConfig.buildMethodName; AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null); if (buildMethod != null) { // note: can't yet throw error; may be given build method"
      },
      {
        "txt": "if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } } builder.setPOJOBuilder(buildMethod, builderConfig); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, builderDesc, builder); } }"
      },
      {
        "txt": "JsonDeserializer<?> deserializer = builder.buildBuilderBased( valueType, buildMethodName); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, builderDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected void addObjectIdReader(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo(); if (objectIdInfo == null) { return; } Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType idType; SettableBeanProperty idProp;"
      },
      {
        "txt": "ObjectIdGenerator<?> gen; ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work PropertyName propName = objectIdInfo.getPropertyName(); idProp = builder.findProperty(propName); if (idProp == null) { throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": cannot find property with name '\"+propName+\"'\"); } idType = idProp.getType();"
      },
      {
        "txt": "gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); } else { JavaType type = ctxt.constructType(implClass); idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; idProp = null; gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo); } JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver));"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc)); addBeanProps(ctxt, beanDesc, builder);"
      },
      {
        "txt": "AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS); if (am != null) { // should never be null SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(\"cause\")); SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0)); if (prop != null) { builder.addOrReplaceProperty(prop, true); } }"
      },
      {
        "txt": "builder.addIgnorable(\"localizedMessage\"); builder.addIgnorable(\"suppressed\"); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer = builder.build(); if (deserializer instanceof BeanDeserializer) { deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer);"
      },
      {
        "txt": "} if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt, BeanDescription beanDesc) {"
      },
      {
        "txt": "return new BeanDeserializerBuilder(beanDesc, ctxt); } protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null;"
      },
      {
        "txt": "final boolean hasCreatorProps = (creatorProps != null); JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.findIgnoredForDeserialization(); for (String propName : ignored) {"
      },
      {
        "txt": "builder.addIgnorable(propName); } } else { ignored = Collections.emptySet(); } AnnotatedMember anySetter = beanDesc.findAnySetterAccessor(); if (anySetter != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetter)); } else { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames();"
      },
      {
        "txt": "if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName); } } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored);"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs); } } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { AnnotatedMethod setter = propDef.getSetter(); JavaType propertyType = setter.getParameterType(0);"
      },
      {
        "txt": "prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { AnnotatedField field = propDef.getField(); JavaType propertyType = field.getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else { AnnotatedMethod getter = propDef.getGetter(); if (getter != null) { if (useGettersAsSetters && _isSetterlessType(getter.getRawType())) { if (builder.hasIgnorable(propDef.getName())) {"
      },
      {
        "txt": "; } else { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } else if (!propDef.hasConstructorParameter()) { PropertyMetadata md = propDef.getMetadata(); if (md.getMergeInfo() != null) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } }"
      },
      {
        "txt": "} } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName(); CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break;"
      },
      {
        "txt": "} } } if (cprop == null) { List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\","
      },
      {
        "txt": "name, n); continue; } if (prop != null) { cprop.setFallbackSetter(prop); } Class<?>[] views = propDef.findViews(); if (views == null) { views = beanDesc.findDefaultViews(); }"
      },
      {
        "txt": "cprop.setViews(views); builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { views = beanDesc.findDefaultViews(); } prop.setViews(views);"
      },
      {
        "txt": "builder.addProperty(prop); } } } private boolean _isSetterlessType(Class<?> rawType) { return Collection.class.isAssignableFrom(rawType) || Map.class.isAssignableFrom(rawType); } protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder,"
      },
      {
        "txt": "List<BeanPropertyDefinition> propDefsIn, Set<String> ignored) throws JsonMappingException { ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>( Math.max(4, propDefsIn.size())); HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>(); for (BeanPropertyDefinition property : propDefsIn) { String name = property.getName(); if (ignored.contains(name)) { // explicit ignoral using @JsonIgnoreProperties needs to block entries"
      },
      {
        "txt": "continue; } if (!property.hasConstructorParameter()) { // never skip constructor params Class<?> rawPropertyType = property.getRawPrimaryType(); if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), property, rawPropertyType, ignoredTypes)) { builder.addIgnorable(name); continue; } }"
      },
      {
        "txt": "result.add(property); } return result; } protected void addBackReferenceProperties(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { List<BeanPropertyDefinition> refProps = beanDesc.findBackReferences(); if (refProps != null) {"
      },
      {
        "txt": "for (BeanPropertyDefinition refProp : refProps) { AnnotatedMember m = refProp.getMutator(); JavaType type; if (m instanceof AnnotatedMethod) { type = ((AnnotatedMethod) m).getParameterType(0); } else { type = m.getType(); if (m instanceof AnnotatedParameter) { ctxt.reportBadTypeDefinition(beanDesc, \"Cannot bind back reference using Creator parameter (reference '%s', parameter index #%d)\","
      },
      {
        "txt": "name, ((AnnotatedParameter) m).getIndex()); } } String refName = refProp.findReferenceName(); builder.addBackReferenceProperty(refName, constructSettableProperty(ctxt, beanDesc, refProp, refProp.getPrimaryType())); } } } @Deprecated // since 2.9 (rename)"
      },
      {
        "txt": "protected void addReferenceProperties(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { addBackReferenceProperties(ctxt, beanDesc, builder); } protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {"
      },
      {
        "txt": "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables(); if (raw != null) { for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) { AnnotatedMember m = entry.getValue(); builder.addInjectable(PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey()); } } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedMember mutator) throws JsonMappingException { BeanProperty prop; JavaType keyType; JavaType valueType; if (mutator instanceof AnnotatedMethod) { AnnotatedMethod am = (AnnotatedMethod) mutator;"
      },
      {
        "txt": "keyType = am.getParameterType(0); valueType = am.getParameterType(1); valueType = resolveMemberAndTypeAnnotations(ctxt, mutator, valueType); prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), valueType, null, mutator, PropertyMetadata.STD_OPTIONAL); } else if (mutator instanceof AnnotatedField) { AnnotatedField af = (AnnotatedField) mutator; JavaType mapType = af.getType(); mapType = resolveMemberAndTypeAnnotations(ctxt, mutator, mapType);"
      },
      {
        "txt": "keyType = mapType.getKeyType(); valueType = mapType.getContentType(); prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), mapType, null, mutator, PropertyMetadata.STD_OPTIONAL); } else { return ctxt.reportBadDefinition(beanDesc.getType(), String.format( \"Unrecognized mutator type for any setter: %s\", mutator.getClass())); } KeyDeserializer keyDeser = findKeyDeserializerFromAnnotation(ctxt, mutator); if (keyDeser == null) {"
      },
      {
        "txt": "keyDeser = keyType.getValueHandler(); } if (keyDeser == null) { keyDeser = ctxt.findKeyDeserializer(keyType, prop); } else { if (keyDeser instanceof ContextualKeyDeserializer) { keyDeser = ((ContextualKeyDeserializer) keyDeser) .createContextual(ctxt, prop); } }"
      },
      {
        "txt": "JsonDeserializer<Object> deser = findContentDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = valueType.getValueHandler(); } if (deser != null) { deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, valueType); } TypeDeserializer typeDeser = valueType.getTypeHandler(); return new SettableAnyProperty(prop, mutator, valueType, keyDeser, deser, typeDeser);"
      },
      {
        "txt": "} protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, JavaType propType0) throws JsonMappingException { AnnotatedMember mutator = propDef.getNonConstructorMutator(); if (mutator == null) { ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\"); }"
      },
      {
        "txt": "JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop; if (mutator instanceof AnnotatedMethod) { prop = new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator); } else { prop = new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator); }"
      },
      {
        "txt": "JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType(); if (ref != null && ref.isManagedReference()) {"
      },
      {
        "txt": "prop.setManagedReferenceName(ref.getName()); } ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo(); if (objectIdInfo != null){ prop.setObjectIdInfo(objectIdInfo); } return prop; } protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef)"
      },
      {
        "txt": "throws JsonMappingException { final AnnotatedMethod getter = propDef.getGetter(); JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType()); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), getter); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter); if (deser == null) { deser = type.getValueHandler();"
      },
      {
        "txt": "} if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } return prop; } protected boolean isPotentialBeanType(Class<?> type) { String typeStr = ClassUtil.canBeABeanType(type);"
      },
      {
        "txt": "if (typeStr != null) { throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } if (ClassUtil.isProxyType(type)) { throw new IllegalArgumentException(\"Cannot deserialize Proxy class \"+type.getName()+\" as a Bean\"); } typeStr = ClassUtil.isLocalType(type, true); if (typeStr != null) { throw new IllegalArgumentException(\"Cannot deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); }"
      },
      {
        "txt": "return true; } protected boolean isIgnorableType(DeserializationConfig config, BeanPropertyDefinition propDef, Class<?> type, Map<Class<?>,Boolean> ignoredTypes) { Boolean status = ignoredTypes.get(type); if (status != null) { return status.booleanValue(); } if ((type == String.class) || type.isPrimitive()) {"
      },
      {
        "txt": "status = Boolean.FALSE; } else { status = config.getConfigOverride(type).getIsIgnoredType(); if (status == null) { BeanDescription desc = config.introspectClassAnnotations(type); status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo()); if (status == null) { status = Boolean.FALSE; } }"
      },
      {
        "txt": "} ignoredTypes.put(type, status); return status.booleanValue(); } protected void _validateSubType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { SubTypeValidator.instance().validateSubType(ctxt, type, beanDesc); }"
      }
    ]
  },
  {
    "id": 1762,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/DeserializerCache.java",
    "start-bug-line": 268,
    "end-bug-line": 268,
    "bug": "throw JsonMappingException.from(ctxt, iae.getMessage(), iae);",
    "fix": "throw JsonMappingException.from(ctxt, ClassUtil.exceptionMessage(iae), iae);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.HashMap; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.std.StdDelegatingDeserializer; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public final class DeserializerCache"
      },
      {
        "txt": "implements java.io.Serializable // since 2.1 -- needs to be careful tho { private static final long serialVersionUID = 1L; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _cachedDeserializers = new ConcurrentHashMap<JavaType, JsonDeserializer<Object>>(64, 0.75f, 4); final protected HashMap<JavaType, JsonDeserializer<Object>> _incompleteDeserializers = new HashMap<JavaType, JsonDeserializer<Object>>(8); public DeserializerCache() { } Object writeReplace() { _incompleteDeserializers.clear();"
      },
      {
        "txt": "return this; } public int cachedDeserializersCount() { return _cachedDeserializers.size(); } public void flushCachedDeserializers() { _cachedDeserializers.clear(); } public JsonDeserializer<Object> findValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType propertyType)"
      },
      {
        "txt": "throws JsonMappingException { JsonDeserializer<Object> deser = _findCachedDeserializer(propertyType); if (deser == null) { deser = _createAndCacheValueDeserializer(ctxt, factory, propertyType); if (deser == null) { deser = _handleUnknownValueDeserializer(ctxt, propertyType); } } return deser;"
      },
      {
        "txt": "} public KeyDeserializer findKeyDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { KeyDeserializer kd = factory.createKeyDeserializer(ctxt, type); if (kd == null) { // if none found, need to use a placeholder that'll fail return _handleUnknownKeyDeserializer(ctxt, type); } if (kd instanceof ResolvableDeserializer) {"
      },
      {
        "txt": "((ResolvableDeserializer) kd).resolve(ctxt); } return kd; } public boolean hasValueDeserializerFor(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { JsonDeserializer<Object> deser = _findCachedDeserializer(type); if (deser == null) {"
      },
      {
        "txt": "deser = _createAndCacheValueDeserializer(ctxt, factory, type); } return (deser != null); } protected JsonDeserializer<Object> _findCachedDeserializer(JavaType type) { if (type == null) { throw new IllegalArgumentException(\"Null JavaType passed\"); } if (_hasCustomHandlers(type)) {"
      },
      {
        "txt": "return null; } return _cachedDeserializers.get(type); } protected JsonDeserializer<Object> _createAndCacheValueDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { synchronized (_incompleteDeserializers) { JsonDeserializer<Object> deser = _findCachedDeserializer(type);"
      },
      {
        "txt": "if (deser != null) { return deser; } int count = _incompleteDeserializers.size(); if (count > 0) { deser = _incompleteDeserializers.get(type); if (deser != null) { return deser; } }"
      },
      {
        "txt": "try { return _createAndCache2(ctxt, factory, type); } finally { if (count == 0 && _incompleteDeserializers.size() > 0) { _incompleteDeserializers.clear(); } } } } protected JsonDeserializer<Object> _createAndCache2(DeserializationContext ctxt,"
      },
      {
        "txt": "throws JsonMappingException { JsonDeserializer<Object> deser; try { deser = _createDeserializer(ctxt, factory, type); } catch (IllegalArgumentException iae) { <extra_id_0> } if (deser == null) { return null; } boolean addToCache = !_hasCustomHandlers(type) && deser.isCachable(); if (deser instanceof ResolvableDeserializer) {"
      },
      {
        "txt": "boolean addToCache = !_hasCustomHandlers(type) && deser.isCachable(); if (deser instanceof ResolvableDeserializer) { _incompleteDeserializers.put(type, deser); ((ResolvableDeserializer)deser).resolve(ctxt); _incompleteDeserializers.remove(type); } if (addToCache) { _cachedDeserializers.put(type, deser); } return deser;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> _createDeserializer(DeserializationContext ctxt, DeserializerFactory factory, JavaType type) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); if (type.isAbstract() || type.isMapLikeType() || type.isCollectionLikeType()) { type = factory.mapAbstractType(config, type); }"
      },
      {
        "txt": "BeanDescription beanDesc = config.introspect(type); JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, beanDesc.getClassInfo()); if (deser != null) { return deser; } JavaType newType = modifyTypeByAnnotation(ctxt, beanDesc.getClassInfo(), type); if (newType != type) { type = newType; beanDesc = config.introspect(newType);"
      },
      {
        "txt": "} Class<?> builder = beanDesc.findPOJOBuilder(); if (builder != null) { return (JsonDeserializer<Object>) factory.createBuilderBasedDeserializer( ctxt, type, beanDesc, builder); } Converter<Object,Object> conv = beanDesc.findDeserializationConverter(); if (conv == null) { // nope, just construct in normal way return (JsonDeserializer<Object>) _createDeserializer2(ctxt, factory, type, beanDesc); }"
      },
      {
        "txt": "JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); if (!delegateType.hasRawClass(type.getRawClass())) { beanDesc = config.introspect(delegateType); } return new StdDelegatingDeserializer<Object>(conv, delegateType, _createDeserializer2(ctxt, factory, delegateType, beanDesc)); } protected JsonDeserializer<?> _createDeserializer2(DeserializationContext ctxt, DeserializerFactory factory, JavaType type, BeanDescription beanDesc) throws JsonMappingException"
      },
      {
        "txt": "{ final DeserializationConfig config = ctxt.getConfig(); if (type.isEnumType()) { return factory.createEnumDeserializer(ctxt, type, beanDesc); } if (type.isContainerType()) { if (type.isArrayType()) { return factory.createArrayDeserializer(ctxt, (ArrayType) type, beanDesc); } if (type.isMapLikeType()) {"
      },
      {
        "txt": "JsonFormat.Value format = beanDesc.findExpectedFormat(null); if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) { MapLikeType mlt = (MapLikeType) type; if (mlt.isTrueMapType()) { return factory.createMapDeserializer(ctxt,(MapType) mlt, beanDesc); } return factory.createMapLikeDeserializer(ctxt, mlt, beanDesc); } } if (type.isCollectionLikeType()) {"
      },
      {
        "txt": "JsonFormat.Value format = beanDesc.findExpectedFormat(null); if ((format == null) || format.getShape() != JsonFormat.Shape.OBJECT) { CollectionLikeType clt = (CollectionLikeType) type; if (clt.isTrueCollectionType()) { return factory.createCollectionDeserializer(ctxt, (CollectionType) clt, beanDesc); } return factory.createCollectionLikeDeserializer(ctxt, clt, beanDesc); } } }"
      },
      {
        "txt": "if (type.isReferenceType()) { return factory.createReferenceDeserializer(ctxt, (ReferenceType) type, beanDesc); } if (JsonNode.class.isAssignableFrom(type.getRawClass())) { return factory.createTreeDeserializer(config, type, beanDesc); } return factory.createBeanDeserializer(ctxt, type, beanDesc); } protected JsonDeserializer<Object> findDeserializerFromAnnotation(DeserializationContext ctxt, Annotated ann)"
      },
      {
        "txt": "throws JsonMappingException { Object deserDef = ctxt.getAnnotationIntrospector().findDeserializer(ann); if (deserDef == null) { return null; } JsonDeserializer<Object> deser = ctxt.deserializerInstance(ann, deserDef); return findConvertingDeserializer(ctxt, ann, deser); } protected JsonDeserializer<Object> findConvertingDeserializer(DeserializationContext ctxt,"
      },
      {
        "txt": "Annotated a, JsonDeserializer<Object> deser) throws JsonMappingException { Converter<Object,Object> conv = findConverter(ctxt, a); if (conv == null) { return deser; } JavaType delegateType = conv.getInputType(ctxt.getTypeFactory()); return (JsonDeserializer<Object>) new StdDelegatingDeserializer<Object>(conv, delegateType, deser); }"
      },
      {
        "txt": "protected Converter<Object,Object> findConverter(DeserializationContext ctxt, Annotated a) throws JsonMappingException { Object convDef = ctxt.getAnnotationIntrospector().findDeserializationConverter(a); if (convDef == null) { return null; } return ctxt.converterInstance(a, convDef); }"
      },
      {
        "txt": "private JavaType modifyTypeByAnnotation(DeserializationContext ctxt, Annotated a, JavaType type) throws JsonMappingException { AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (intr == null) { return type; } if (type.isMapLikeType()) { JavaType keyType = type.getKeyType();"
      },
      {
        "txt": "if (keyType != null && keyType.getValueHandler() == null) { Object kdDef = intr.findKeyDeserializer(a); if (kdDef != null) { KeyDeserializer kd = ctxt.keyDeserializerInstance(a, kdDef); if (kd != null) { type = ((MapLikeType) type).withKeyValueHandler(kd); keyType = type.getKeyType(); // just in case it's used below } } }"
      },
      {
        "txt": "} JavaType contentType = type.getContentType(); if (contentType != null) { if (contentType.getValueHandler() == null) { // as with above, avoid resetting (which would trigger exception) Object cdDef = intr.findContentDeserializer(a); if (cdDef != null) { JsonDeserializer<?> cd = null; if (cdDef instanceof JsonDeserializer<?>) { cdDef = (JsonDeserializer<?>) cdDef; } else {"
      },
      {
        "txt": "Class<?> cdClass = _verifyAsClass(cdDef, \"findContentDeserializer\", JsonDeserializer.None.class); if (cdClass != null) { cd = ctxt.deserializerInstance(a, cdClass); } } if (cd != null) { type = type.withContentValueHandler(cd); } } }"
      },
      {
        "txt": "} type = intr.refineDeserializationType(ctxt.getConfig(), a, type); return type; } private boolean _hasCustomHandlers(JavaType t) { if (t.isContainerType()) { JavaType ct = t.getContentType(); if (ct != null) { if ((ct.getValueHandler() != null) || (ct.getTypeHandler() != null)) { return true;"
      },
      {
        "txt": "} } if (t.isMapLikeType()) { JavaType kt = t.getKeyType(); if (kt.getValueHandler() != null) { return true; } } } return false;"
      },
      {
        "txt": "} private Class<?> _verifyAsClass(Object src, String methodName, Class<?> noneClass) { if (src == null) { return null; } if (!(src instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector.\"+methodName+\"() returned value of type \"+src.getClass().getName()+\": expected type JsonSerializer or Class<JsonSerializer> instead\"); } Class<?> cls = (Class<?>) src;"
      },
      {
        "txt": "if (cls == noneClass || ClassUtil.isBogusClass(cls)) { return null; } return cls; } protected JsonDeserializer<Object> _handleUnknownValueDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException { Class<?> rawClass = type.getRawClass(); if (!ClassUtil.isConcrete(rawClass)) {"
      },
      {
        "txt": "return ctxt.reportBadDefinition(type, \"Cannot find a Value deserializer for abstract type \"+type); } return ctxt.reportBadDefinition(type, \"Cannot find a Value deserializer for type \"+type); } protected KeyDeserializer _handleUnknownKeyDeserializer(DeserializationContext ctxt, JavaType type) throws JsonMappingException { return ctxt.reportBadDefinition(type, \"Cannot find a (Map) Key deserializer for type \"+type); }"
      }
    ]
  },
  {
    "id": 1763,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
    "start-bug-line": 202,
    "end-bug-line": 202,
    "bug": "String origMsg = e.getMessage();",
    "fix": "String origMsg = ClassUtil.exceptionMessage(e);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.io.IOException; import java.util.Map;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring; import com.fasterxml.jackson.databind.introspect.AnnotatedField; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.AnnotatedMethod; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.ClassUtil; public class SettableAnyProperty implements java.io.Serializable"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected final BeanProperty _property; final protected AnnotatedMember _setter; final boolean _setterIsField; protected final JavaType _type; protected JsonDeserializer<Object> _valueDeserializer; protected final TypeDeserializer _valueTypeDeserializer; protected final KeyDeserializer _keyDeserializer; public SettableAnyProperty(BeanProperty property, AnnotatedMember setter, JavaType type,"
      },
      {
        "txt": "KeyDeserializer keyDeser, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) { _property = property; _setter = setter; _type = type; _valueDeserializer = valueDeser; _valueTypeDeserializer = typeDeser; _keyDeserializer = keyDeser; _setterIsField = setter instanceof AnnotatedField;"
      },
      {
        "txt": "} @Deprecated // since 2.9 public SettableAnyProperty(BeanProperty property, AnnotatedMember setter, JavaType type, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) { this(property, setter, type, null, valueDeser, typeDeser); } public SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> deser) { return new SettableAnyProperty(_property, _setter, _type, _keyDeserializer, deser, _valueTypeDeserializer);"
      },
      {
        "txt": "} public void fixAccess(DeserializationConfig config) { _setter.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } Object readResolve() { if (_setter == null || _setter.getAnnotated() == null) { throw new IllegalArgumentException(\"Missing method (broken JDK (de)serialization?)\"); } return this;"
      },
      {
        "txt": "} public BeanProperty getProperty() { return _property; } public boolean hasValueDeserializer() { return (_valueDeserializer != null); } public JavaType getType() { return _type; } public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName) throws IOException { try { Object key = (_keyDeserializer == null) ? propName"
      },
      {
        "txt": ": _keyDeserializer.deserializeKey(propName, ctxt); set(instance, key, deserialize(p, ctxt)); } catch (UnresolvedForwardReference reference) { if (!(_valueDeserializer.getObjectIdReader() != null)) { throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info.\", reference); } AnySetterReferring referring = new AnySetterReferring(this, reference, _type.getRawClass(), instance, propName); reference.getRoid().appendReferring(referring); }"
      },
      {
        "txt": "} public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_NULL) { return _valueDeserializer.getNullValue(ctxt); } if (_valueTypeDeserializer != null) { return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); }"
      },
      {
        "txt": "return _valueDeserializer.deserialize(p, ctxt); } @SuppressWarnings(\"unchecked\") public void set(Object instance, Object propName, Object value) throws IOException { try { if (_setterIsField) { AnnotatedField field = (AnnotatedField) _setter; Map<Object,Object> val = (Map<Object,Object>) field.getValue(instance); if (val != null) {"
      },
      {
        "txt": "val.put(propName, value); } } else { ((AnnotatedMethod) _setter).callOnWith(instance, propName, value); } } catch (Exception e) { _throwAsIOE(e, propName, value); } } protected void _throwAsIOE(Exception e, Object propName, Object value)"
      },
      {
        "txt": "{ if (e instanceof IllegalArgumentException) { String actType = ClassUtil.classNameOf(value); StringBuilder msg = new StringBuilder(\"Problem deserializing \\\"any\\\" property '\").append(propName); msg.append(\"' of class \"+getClassName()+\" (expected type: \").append(_type); msg.append(\"; actual type: \").append(actType).append(\")\"); <extra_id_0> if (origMsg != null) { msg.append(\", problem: \").append(origMsg); } else { msg.append(\" (no error message provided)\"); } throw new JsonMappingException(null, msg.toString(), e);"
      },
      {
        "txt": "} throw new JsonMappingException(null, msg.toString(), e); } ClassUtil.throwIfIOE(e); ClassUtil.throwIfRTE(e); Throwable t = ClassUtil.getRootCause(e); throw new JsonMappingException(null, t.getMessage(), t); } private String getClassName() { return _setter.getDeclaringClass().getName(); } @Override public String toString() { return \"[any property on class \"+getClassName()+\"]\"; }"
      },
      {
        "txt": "private static class AnySetterReferring extends Referring { private final SettableAnyProperty _parent; private final Object _pojo; private final String _propName; public AnySetterReferring(SettableAnyProperty parent, UnresolvedForwardReference reference, Class<?> type, Object instance, String propName) { super(reference, type); _parent = parent; _pojo = instance;"
      },
      {
        "txt": "_propName = propName; } @Override public void handleResolvedForwardReference(Object id, Object value) throws IOException { if (!hasId(id)) { throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id.toString() + \"] that wasn't previously registered.\"); }"
      },
      {
        "txt": "_parent.set(_pojo, _propName, value); } }"
      }
    ]
  },
  {
    "id": 1764,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableAnyProperty.java",
    "start-bug-line": 214,
    "end-bug-line": 214,
    "bug": "throw new JsonMappingException(null, t.getMessage(), t);",
    "fix": "throw new JsonMappingException(null, ClassUtil.exceptionMessage(t), t);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.io.IOException; import java.util.Map; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring; import com.fasterxml.jackson.databind.introspect.AnnotatedField; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.introspect.AnnotatedMethod; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.ClassUtil; public class SettableAnyProperty implements java.io.Serializable {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; protected final BeanProperty _property; final protected AnnotatedMember _setter; final boolean _setterIsField; protected final JavaType _type; protected JsonDeserializer<Object> _valueDeserializer; protected final TypeDeserializer _valueTypeDeserializer; protected final KeyDeserializer _keyDeserializer; public SettableAnyProperty(BeanProperty property, AnnotatedMember setter, JavaType type, KeyDeserializer keyDeser,"
      },
      {
        "txt": "JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) { _property = property; _setter = setter; _type = type; _valueDeserializer = valueDeser; _valueTypeDeserializer = typeDeser; _keyDeserializer = keyDeser; _setterIsField = setter instanceof AnnotatedField; }"
      },
      {
        "txt": "@Deprecated // since 2.9 public SettableAnyProperty(BeanProperty property, AnnotatedMember setter, JavaType type, JsonDeserializer<Object> valueDeser, TypeDeserializer typeDeser) { this(property, setter, type, null, valueDeser, typeDeser); } public SettableAnyProperty withValueDeserializer(JsonDeserializer<Object> deser) { return new SettableAnyProperty(_property, _setter, _type, _keyDeserializer, deser, _valueTypeDeserializer); }"
      },
      {
        "txt": "public void fixAccess(DeserializationConfig config) { _setter.fixAccess( config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } Object readResolve() { if (_setter == null || _setter.getAnnotated() == null) { throw new IllegalArgumentException(\"Missing method (broken JDK (de)serialization?)\"); } return this; }"
      },
      {
        "txt": "public BeanProperty getProperty() { return _property; } public boolean hasValueDeserializer() { return (_valueDeserializer != null); } public JavaType getType() { return _type; } public final void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance, String propName) throws IOException { try { Object key = (_keyDeserializer == null) ? propName : _keyDeserializer.deserializeKey(propName, ctxt);"
      },
      {
        "txt": "set(instance, key, deserialize(p, ctxt)); } catch (UnresolvedForwardReference reference) { if (!(_valueDeserializer.getObjectIdReader() != null)) { throw JsonMappingException.from(p, \"Unresolved forward reference but no identity info.\", reference); } AnySetterReferring referring = new AnySetterReferring(this, reference, _type.getRawClass(), instance, propName); reference.getRoid().appendReferring(referring); } }"
      },
      {
        "txt": "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_NULL) { return _valueDeserializer.getNullValue(ctxt); } if (_valueTypeDeserializer != null) { return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } return _valueDeserializer.deserialize(p, ctxt);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public void set(Object instance, Object propName, Object value) throws IOException { try { if (_setterIsField) { AnnotatedField field = (AnnotatedField) _setter; Map<Object,Object> val = (Map<Object,Object>) field.getValue(instance); if (val != null) { val.put(propName, value);"
      },
      {
        "txt": "} } else { ((AnnotatedMethod) _setter).callOnWith(instance, propName, value); } } catch (Exception e) { _throwAsIOE(e, propName, value); } } protected void _throwAsIOE(Exception e, Object propName, Object value) throws IOException"
      },
      {
        "txt": "{ if (e instanceof IllegalArgumentException) { String actType = ClassUtil.classNameOf(value); StringBuilder msg = new StringBuilder(\"Problem deserializing \\\"any\\\" property '\").append(propName); msg.append(\"' of class \"+getClassName()+\" (expected type: \").append(_type); msg.append(\"; actual type: \").append(actType).append(\")\"); String origMsg = e.getMessage(); if (origMsg != null) { msg.append(\", problem: \").append(origMsg); } else {"
      },
      {
        "txt": "} throw new JsonMappingException(null, msg.toString(), e); } ClassUtil.throwIfIOE(e); ClassUtil.throwIfRTE(e); Throwable t = ClassUtil.getRootCause(e); <extra_id_0> } private String getClassName() { return _setter.getDeclaringClass().getName(); } @Override public String toString() { return \"[any property on class \"+getClassName()+\"]\"; } private static class AnySetterReferring extends Referring { private final SettableAnyProperty _parent; private final Object _pojo;"
      },
      {
        "txt": "private final SettableAnyProperty _parent; private final Object _pojo; private final String _propName; public AnySetterReferring(SettableAnyProperty parent, UnresolvedForwardReference reference, Class<?> type, Object instance, String propName) { super(reference, type); _parent = parent; _pojo = instance; _propName = propName;"
      },
      {
        "txt": "} @Override public void handleResolvedForwardReference(Object id, Object value) throws IOException { if (!hasId(id)) { throw new IllegalArgumentException(\"Trying to resolve a forward reference with id [\" + id.toString() + \"] that wasn't previously registered.\"); } _parent.set(_pojo, _propName, value);"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 1765,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "start-bug-line": 590,
    "end-bug-line": 590,
    "bug": "String origMsg = e.getMessage();",
    "fix": "String origMsg = ClassUtil.exceptionMessage(e);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.ViewMatcher; @SuppressWarnings(\"serial\") public abstract class SettableBeanProperty extends ConcreteBeanPropertyBase"
      },
      {
        "txt": "implements java.io.Serializable { protected static final JsonDeserializer<Object> MISSING_VALUE_DESERIALIZER = new FailingDeserializer( \"No _valueDeserializer assigned\"); protected final PropertyName _propName; protected final JavaType _type; protected final PropertyName _wrapperName; protected final transient Annotations _contextAnnotations; protected final JsonDeserializer<Object> _valueDeserializer; protected final TypeDeserializer _valueTypeDeserializer;"
      },
      {
        "txt": "protected final NullValueProvider _nullProvider; protected String _managedReferenceName; protected ObjectIdInfo _objectIdInfo; protected ViewMatcher _viewMatcher; protected int _propertyIndex = -1; protected SettableBeanProperty(BeanPropertyDefinition propDef, JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations) { this(propDef.getFullName(), type, propDef.getWrapperName(), typeDeser, contextAnnotations, propDef.getMetadata());"
      },
      {
        "txt": "} protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper, TypeDeserializer typeDeser, Annotations contextAnnotations, PropertyMetadata metadata) { super(metadata); if (propName == null) { _propName = PropertyName.NO_NAME; } else { _propName = propName.internSimpleName();"
      },
      {
        "txt": "} _type = type; _wrapperName = wrapper; _contextAnnotations = contextAnnotations; _viewMatcher = null; if (typeDeser != null) { typeDeser = typeDeser.forProperty(this); } _valueTypeDeserializer = typeDeser; _valueDeserializer = MISSING_VALUE_DESERIALIZER;"
      },
      {
        "txt": "_nullProvider = MISSING_VALUE_DESERIALIZER; } protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyMetadata metadata, JsonDeserializer<Object> valueDeser) { super(metadata); if (propName == null) { _propName = PropertyName.NO_NAME; } else { _propName = propName.internSimpleName();"
      },
      {
        "txt": "} _type = type; _wrapperName = null; _contextAnnotations = null; _viewMatcher = null; _valueTypeDeserializer = null; _valueDeserializer = valueDeser; _nullProvider = valueDeser; } protected SettableBeanProperty(SettableBeanProperty src)"
      },
      {
        "txt": "{ super(src); _propName = src._propName; _type = src._type; _wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations; _valueDeserializer = src._valueDeserializer; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName; _propertyIndex = src._propertyIndex;"
      },
      {
        "txt": "_viewMatcher = src._viewMatcher; _nullProvider = src._nullProvider; } @SuppressWarnings(\"unchecked\") protected SettableBeanProperty(SettableBeanProperty src, JsonDeserializer<?> deser, NullValueProvider nuller) { super(src); _propName = src._propName; _type = src._type;"
      },
      {
        "txt": "_wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName; _propertyIndex = src._propertyIndex; if (deser == null) { _valueDeserializer = MISSING_VALUE_DESERIALIZER; } else { _valueDeserializer = (JsonDeserializer<Object>) deser; }"
      },
      {
        "txt": "_viewMatcher = src._viewMatcher; if (nuller == MISSING_VALUE_DESERIALIZER) { nuller = _valueDeserializer; } _nullProvider = nuller; } protected SettableBeanProperty(SettableBeanProperty src, PropertyName newName) { super(src); _propName = newName;"
      },
      {
        "txt": "_type = src._type; _wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations; _valueDeserializer = src._valueDeserializer; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName; _propertyIndex = src._propertyIndex; _viewMatcher = src._viewMatcher; _nullProvider = src._nullProvider; }"
      },
      {
        "txt": "public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser); public abstract SettableBeanProperty withName(PropertyName newName); public SettableBeanProperty withSimpleName(String simpleName) { PropertyName n = (_propName == null) ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName); return (n == _propName) ? this : withName(n); } public abstract SettableBeanProperty withNullProvider(NullValueProvider nva); public void setManagedReferenceName(String n) { _managedReferenceName = n;"
      },
      {
        "txt": "} public void setObjectIdInfo(ObjectIdInfo objectIdInfo) { _objectIdInfo = objectIdInfo; } public void setViews(Class<?>[] views) { if (views == null) { _viewMatcher = null; } else { _viewMatcher = ViewMatcher.construct(views); }"
      },
      {
        "txt": "} public void assignIndex(int index) { if (_propertyIndex != -1) { throw new IllegalStateException(\"Property '\"+getName()+\"' already had index (\"+_propertyIndex+\"), trying to assign \"+index); } _propertyIndex = index; } public void fixAccess(DeserializationConfig config) { ; }"
      },
      {
        "txt": "public void markAsIgnorable() { } public boolean isIgnorable() { return false; } @Override public final String getName() { return _propName.getSimpleName(); } @Override public PropertyName getFullName() { return _propName; }"
      },
      {
        "txt": "@Override public JavaType getType() { return _type; } @Override public PropertyName getWrapperName() { return _wrapperName; } @Override public abstract AnnotatedMember getMember(); @Override public abstract <A extends Annotation> A getAnnotation(Class<A> acls);"
      },
      {
        "txt": "@Override public <A extends Annotation> A getContextAnnotation(Class<A> acls) { return _contextAnnotations.get(acls); } @Override public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor, SerializerProvider provider) throws JsonMappingException { if (isRequired()) {"
      },
      {
        "txt": "objectVisitor.property(this); } else { objectVisitor.optionalProperty(this); } } protected Class<?> getDeclaringClass() { return getMember().getDeclaringClass(); } public String getManagedReferenceName() { return _managedReferenceName; } public ObjectIdInfo getObjectIdInfo() { return _objectIdInfo; }"
      },
      {
        "txt": "public boolean hasValueDeserializer() { return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER); } public boolean hasValueTypeDeserializer() { return (_valueTypeDeserializer != null); } public JsonDeserializer<Object> getValueDeserializer() { JsonDeserializer<Object> deser = _valueDeserializer; if (deser == MISSING_VALUE_DESERIALIZER) { return null; } return deser;"
      },
      {
        "txt": "} public TypeDeserializer getValueTypeDeserializer() { return _valueTypeDeserializer; } public NullValueProvider getNullValueProvider() { return _nullProvider; } public boolean visibleInView(Class<?> activeView) { return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView); } public boolean hasViews() { return _viewMatcher != null; } public int getPropertyIndex() { return _propertyIndex; } public int getCreatorIndex() { throw new IllegalStateException(String.format("
      },
      {
        "txt": "\"Internal error: no creator index for property '%s' (of type %s)\", this.getName(), getClass().getName())); } public Object getInjectableValueId() { return null; } public abstract void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException; public abstract Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException; public abstract void set(Object instance, Object value) throws IOException; public abstract Object setAndReturn(Object instance, Object value) throws IOException;"
      },
      {
        "txt": "public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.VALUE_NULL)) { return _nullProvider.getNullValue(ctxt); } if (_valueTypeDeserializer != null) { return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } Object value = _valueDeserializer.deserialize(p, ctxt); if (value == null) {"
      },
      {
        "txt": "value = _nullProvider.getNullValue(ctxt); } return value; } public final Object deserializeWith(JsonParser p, DeserializationContext ctxt, Object toUpdate) throws IOException { if (p.hasToken(JsonToken.VALUE_NULL)) { if (NullsConstantProvider.isSkipper(_nullProvider)) { return toUpdate;"
      },
      {
        "txt": "} return _nullProvider.getNullValue(ctxt); } if (_valueTypeDeserializer != null) { ctxt.reportBadDefinition(getType(), String.format(\"Cannot merge polymorphic property '%s'\", getName())); } Object value = _valueDeserializer.deserialize(p, ctxt, toUpdate); if (value == null) {"
      },
      {
        "txt": "if (NullsConstantProvider.isSkipper(_nullProvider)) { return toUpdate; } value = _nullProvider.getNullValue(ctxt); } return value; } protected void _throwAsIOE(JsonParser p, Exception e, Object value) throws IOException { if (e instanceof IllegalArgumentException) {"
      },
      {
        "txt": "StringBuilder msg = new StringBuilder(\"Problem deserializing property '\") .append(getName()) .append(\"' (expected type: \") .append(getType()) .append(\"; actual type: \") .append(actType).append(\")\"); <extra_id_0> if (origMsg != null) { msg.append(\", problem: \") .append(origMsg); } else { msg.append(\" (no error message provided)\"); }"
      },
      {
        "txt": "msg.append(\" (no error message provided)\"); } throw JsonMappingException.from(p, msg.toString(), e); } _throwAsIOE(p, e); } protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException { ClassUtil.throwIfIOE(e); ClassUtil.throwIfRTE(e);"
      },
      {
        "txt": "Throwable th = ClassUtil.getRootCause(e); throw JsonMappingException.from(p, th.getMessage(), th); } @Deprecated // since 2.7 protected IOException _throwAsIOE(Exception e) throws IOException { return _throwAsIOE((JsonParser) null, e); } protected void _throwAsIOE(Exception e, Object value) throws IOException { _throwAsIOE((JsonParser) null, e, value); }"
      },
      {
        "txt": "@Override public String toString() { return \"[property '\"+getName()+\"']\"; } public static abstract class Delegating extends SettableBeanProperty { protected final SettableBeanProperty delegate; protected Delegating(SettableBeanProperty d) { super(d); delegate = d; } protected abstract SettableBeanProperty withDelegate(SettableBeanProperty d);"
      },
      {
        "txt": "protected SettableBeanProperty _with(SettableBeanProperty newDelegate) { if (newDelegate == delegate) { return this; } return withDelegate(newDelegate); } @Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { return _with(delegate.withValueDeserializer(deser)); }"
      },
      {
        "txt": "@Override public SettableBeanProperty withName(PropertyName newName) { return _with(delegate.withName(newName)); } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) { return _with(delegate.withNullProvider(nva)); } @Override public void assignIndex(int index) {"
      },
      {
        "txt": "delegate.assignIndex(index); } @Override public void fixAccess(DeserializationConfig config) { delegate.fixAccess(config); } @Override protected Class<?> getDeclaringClass() { return delegate.getDeclaringClass(); } @Override public String getManagedReferenceName() { return delegate.getManagedReferenceName(); }"
      },
      {
        "txt": "@Override public ObjectIdInfo getObjectIdInfo() { return delegate.getObjectIdInfo(); } @Override public boolean hasValueDeserializer() { return delegate.hasValueDeserializer(); } @Override public boolean hasValueTypeDeserializer() { return delegate.hasValueTypeDeserializer(); } @Override public JsonDeserializer<Object> getValueDeserializer() { return delegate.getValueDeserializer(); } @Override public TypeDeserializer getValueTypeDeserializer() { return delegate.getValueTypeDeserializer(); }"
      },
      {
        "txt": "@Override public boolean visibleInView(Class<?> activeView) { return delegate.visibleInView(activeView); } @Override public boolean hasViews() { return delegate.hasViews(); } @Override public int getPropertyIndex() { return delegate.getPropertyIndex(); } @Override public int getCreatorIndex() { return delegate.getCreatorIndex(); } @Override public Object getInjectableValueId() { return delegate.getInjectableValueId(); }"
      },
      {
        "txt": "@Override public AnnotatedMember getMember() { return delegate.getMember(); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return delegate.getAnnotation(acls); } public SettableBeanProperty getDelegate() { return delegate;"
      },
      {
        "txt": "} @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { delegate.deserializeAndSet(p, ctxt, instance); } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {"
      },
      {
        "txt": "return delegate.deserializeSetAndReturn(p, ctxt, instance); } @Override public void set(Object instance, Object value) throws IOException { delegate.set(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException { return delegate.setAndReturn(instance, value); }"
      }
    ]
  },
  {
    "id": 1766,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/SettableBeanProperty.java",
    "start-bug-line": 611,
    "end-bug-line": 611,
    "bug": "throw JsonMappingException.from(p, th.getMessage(), th);",
    "fix": "throw JsonMappingException.from(p, ClassUtil.exceptionMessage(th), th);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.io.IOException;"
      },
      {
        "txt": "import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.impl.FailingDeserializer; import com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ViewMatcher; @SuppressWarnings(\"serial\") public abstract class SettableBeanProperty extends ConcreteBeanPropertyBase implements java.io.Serializable { protected static final JsonDeserializer<Object> MISSING_VALUE_DESERIALIZER = new FailingDeserializer( \"No _valueDeserializer assigned\"); protected final PropertyName _propName; protected final JavaType _type;"
      },
      {
        "txt": "protected final PropertyName _wrapperName; protected final transient Annotations _contextAnnotations; protected final JsonDeserializer<Object> _valueDeserializer; protected final TypeDeserializer _valueTypeDeserializer; protected final NullValueProvider _nullProvider; protected String _managedReferenceName; protected ObjectIdInfo _objectIdInfo; protected ViewMatcher _viewMatcher; protected int _propertyIndex = -1; protected SettableBeanProperty(BeanPropertyDefinition propDef,"
      },
      {
        "txt": "JavaType type, TypeDeserializer typeDeser, Annotations contextAnnotations) { this(propDef.getFullName(), type, propDef.getWrapperName(), typeDeser, contextAnnotations, propDef.getMetadata()); } protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyName wrapper, TypeDeserializer typeDeser, Annotations contextAnnotations, PropertyMetadata metadata) { super(metadata);"
      },
      {
        "txt": "if (propName == null) { _propName = PropertyName.NO_NAME; } else { _propName = propName.internSimpleName(); } _type = type; _wrapperName = wrapper; _contextAnnotations = contextAnnotations; _viewMatcher = null; if (typeDeser != null) {"
      },
      {
        "txt": "typeDeser = typeDeser.forProperty(this); } _valueTypeDeserializer = typeDeser; _valueDeserializer = MISSING_VALUE_DESERIALIZER; _nullProvider = MISSING_VALUE_DESERIALIZER; } protected SettableBeanProperty(PropertyName propName, JavaType type, PropertyMetadata metadata, JsonDeserializer<Object> valueDeser) { super(metadata);"
      },
      {
        "txt": "if (propName == null) { _propName = PropertyName.NO_NAME; } else { _propName = propName.internSimpleName(); } _type = type; _wrapperName = null; _contextAnnotations = null; _viewMatcher = null; _valueTypeDeserializer = null;"
      },
      {
        "txt": "_valueDeserializer = valueDeser; _nullProvider = valueDeser; } protected SettableBeanProperty(SettableBeanProperty src) { super(src); _propName = src._propName; _type = src._type; _wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations;"
      },
      {
        "txt": "_valueDeserializer = src._valueDeserializer; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName; _propertyIndex = src._propertyIndex; _viewMatcher = src._viewMatcher; _nullProvider = src._nullProvider; } @SuppressWarnings(\"unchecked\") protected SettableBeanProperty(SettableBeanProperty src, JsonDeserializer<?> deser, NullValueProvider nuller)"
      },
      {
        "txt": "{ super(src); _propName = src._propName; _type = src._type; _wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName; _propertyIndex = src._propertyIndex; if (deser == null) {"
      },
      {
        "txt": "_valueDeserializer = MISSING_VALUE_DESERIALIZER; } else { _valueDeserializer = (JsonDeserializer<Object>) deser; } _viewMatcher = src._viewMatcher; if (nuller == MISSING_VALUE_DESERIALIZER) { nuller = _valueDeserializer; } _nullProvider = nuller; }"
      },
      {
        "txt": "protected SettableBeanProperty(SettableBeanProperty src, PropertyName newName) { super(src); _propName = newName; _type = src._type; _wrapperName = src._wrapperName; _contextAnnotations = src._contextAnnotations; _valueDeserializer = src._valueDeserializer; _valueTypeDeserializer = src._valueTypeDeserializer; _managedReferenceName = src._managedReferenceName;"
      },
      {
        "txt": "_propertyIndex = src._propertyIndex; _viewMatcher = src._viewMatcher; _nullProvider = src._nullProvider; } public abstract SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser); public abstract SettableBeanProperty withName(PropertyName newName); public SettableBeanProperty withSimpleName(String simpleName) { PropertyName n = (_propName == null) ? new PropertyName(simpleName) : _propName.withSimpleName(simpleName); return (n == _propName) ? this : withName(n);"
      },
      {
        "txt": "} public abstract SettableBeanProperty withNullProvider(NullValueProvider nva); public void setManagedReferenceName(String n) { _managedReferenceName = n; } public void setObjectIdInfo(ObjectIdInfo objectIdInfo) { _objectIdInfo = objectIdInfo; } public void setViews(Class<?>[] views) { if (views == null) {"
      },
      {
        "txt": "_viewMatcher = null; } else { _viewMatcher = ViewMatcher.construct(views); } } public void assignIndex(int index) { if (_propertyIndex != -1) { throw new IllegalStateException(\"Property '\"+getName()+\"' already had index (\"+_propertyIndex+\"), trying to assign \"+index); } _propertyIndex = index;"
      },
      {
        "txt": "} public void fixAccess(DeserializationConfig config) { ; } public void markAsIgnorable() { } public boolean isIgnorable() { return false; } @Override public final String getName() { return _propName.getSimpleName(); }"
      },
      {
        "txt": "@Override public PropertyName getFullName() { return _propName; } @Override public JavaType getType() { return _type; } @Override public PropertyName getWrapperName() { return _wrapperName; }"
      },
      {
        "txt": "@Override public abstract AnnotatedMember getMember(); @Override public abstract <A extends Annotation> A getAnnotation(Class<A> acls); @Override public <A extends Annotation> A getContextAnnotation(Class<A> acls) { return _contextAnnotations.get(acls); } @Override public void depositSchemaProperty(JsonObjectFormatVisitor objectVisitor,"
      },
      {
        "txt": "SerializerProvider provider) throws JsonMappingException { if (isRequired()) { objectVisitor.property(this); } else { objectVisitor.optionalProperty(this); } } protected Class<?> getDeclaringClass() {"
      },
      {
        "txt": "return getMember().getDeclaringClass(); } public String getManagedReferenceName() { return _managedReferenceName; } public ObjectIdInfo getObjectIdInfo() { return _objectIdInfo; } public boolean hasValueDeserializer() { return (_valueDeserializer != null) && (_valueDeserializer != MISSING_VALUE_DESERIALIZER); } public boolean hasValueTypeDeserializer() { return (_valueTypeDeserializer != null); } public JsonDeserializer<Object> getValueDeserializer() { JsonDeserializer<Object> deser = _valueDeserializer;"
      },
      {
        "txt": "if (deser == MISSING_VALUE_DESERIALIZER) { return null; } return deser; } public TypeDeserializer getValueTypeDeserializer() { return _valueTypeDeserializer; } public NullValueProvider getNullValueProvider() { return _nullProvider; } public boolean visibleInView(Class<?> activeView) { return (_viewMatcher == null) || _viewMatcher.isVisibleForView(activeView); }"
      },
      {
        "txt": "public boolean hasViews() { return _viewMatcher != null; } public int getPropertyIndex() { return _propertyIndex; } public int getCreatorIndex() { throw new IllegalStateException(String.format( \"Internal error: no creator index for property '%s' (of type %s)\", this.getName(), getClass().getName())); } public Object getInjectableValueId() { return null; } public abstract void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException;"
      },
      {
        "txt": "public abstract Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException; public abstract void set(Object instance, Object value) throws IOException; public abstract Object setAndReturn(Object instance, Object value) throws IOException; public final Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.VALUE_NULL)) { return _nullProvider.getNullValue(ctxt); } if (_valueTypeDeserializer != null) {"
      },
      {
        "txt": "return _valueDeserializer.deserializeWithType(p, ctxt, _valueTypeDeserializer); } Object value = _valueDeserializer.deserialize(p, ctxt); if (value == null) { value = _nullProvider.getNullValue(ctxt); } return value; } public final Object deserializeWith(JsonParser p, DeserializationContext ctxt, Object toUpdate) throws IOException"
      },
      {
        "txt": "{ if (p.hasToken(JsonToken.VALUE_NULL)) { if (NullsConstantProvider.isSkipper(_nullProvider)) { return toUpdate; } return _nullProvider.getNullValue(ctxt); } if (_valueTypeDeserializer != null) { ctxt.reportBadDefinition(getType(), String.format(\"Cannot merge polymorphic property '%s'\","
      },
      {
        "txt": "getName())); } Object value = _valueDeserializer.deserialize(p, ctxt, toUpdate); if (value == null) { if (NullsConstantProvider.isSkipper(_nullProvider)) { return toUpdate; } value = _nullProvider.getNullValue(ctxt); } return value;"
      },
      {
        "txt": "} protected void _throwAsIOE(JsonParser p, Exception e, Object value) throws IOException { if (e instanceof IllegalArgumentException) { String actType = ClassUtil.classNameOf(value); StringBuilder msg = new StringBuilder(\"Problem deserializing property '\") .append(getName()) .append(\"' (expected type: \") .append(getType()) .append(\"; actual type: \")"
      },
      {
        "txt": ".append(actType).append(\")\"); String origMsg = e.getMessage(); if (origMsg != null) { msg.append(\", problem: \") .append(origMsg); } else { msg.append(\" (no error message provided)\"); } throw JsonMappingException.from(p, msg.toString(), e); }"
      },
      {
        "txt": "} protected IOException _throwAsIOE(JsonParser p, Exception e) throws IOException { ClassUtil.throwIfIOE(e); ClassUtil.throwIfRTE(e); Throwable th = ClassUtil.getRootCause(e); <extra_id_0> } @Deprecated // since 2.7 protected IOException _throwAsIOE(Exception e) throws IOException { return _throwAsIOE((JsonParser) null, e); } protected void _throwAsIOE(Exception e, Object value) throws IOException {"
      },
      {
        "txt": "} protected void _throwAsIOE(Exception e, Object value) throws IOException { _throwAsIOE((JsonParser) null, e, value); } @Override public String toString() { return \"[property '\"+getName()+\"']\"; } public static abstract class Delegating extends SettableBeanProperty { protected final SettableBeanProperty delegate; protected Delegating(SettableBeanProperty d) {"
      },
      {
        "txt": "super(d); delegate = d; } protected abstract SettableBeanProperty withDelegate(SettableBeanProperty d); protected SettableBeanProperty _with(SettableBeanProperty newDelegate) { if (newDelegate == delegate) { return this; } return withDelegate(newDelegate); }"
      },
      {
        "txt": "@Override public SettableBeanProperty withValueDeserializer(JsonDeserializer<?> deser) { return _with(delegate.withValueDeserializer(deser)); } @Override public SettableBeanProperty withName(PropertyName newName) { return _with(delegate.withName(newName)); } @Override public SettableBeanProperty withNullProvider(NullValueProvider nva) {"
      },
      {
        "txt": "return _with(delegate.withNullProvider(nva)); } @Override public void assignIndex(int index) { delegate.assignIndex(index); } @Override public void fixAccess(DeserializationConfig config) { delegate.fixAccess(config); }"
      },
      {
        "txt": "@Override protected Class<?> getDeclaringClass() { return delegate.getDeclaringClass(); } @Override public String getManagedReferenceName() { return delegate.getManagedReferenceName(); } @Override public ObjectIdInfo getObjectIdInfo() { return delegate.getObjectIdInfo(); } @Override public boolean hasValueDeserializer() { return delegate.hasValueDeserializer(); } @Override public boolean hasValueTypeDeserializer() { return delegate.hasValueTypeDeserializer(); }"
      },
      {
        "txt": "@Override public JsonDeserializer<Object> getValueDeserializer() { return delegate.getValueDeserializer(); } @Override public TypeDeserializer getValueTypeDeserializer() { return delegate.getValueTypeDeserializer(); } @Override public boolean visibleInView(Class<?> activeView) { return delegate.visibleInView(activeView); } @Override public boolean hasViews() { return delegate.hasViews(); } @Override public int getPropertyIndex() { return delegate.getPropertyIndex(); }"
      },
      {
        "txt": "@Override public int getCreatorIndex() { return delegate.getCreatorIndex(); } @Override public Object getInjectableValueId() { return delegate.getInjectableValueId(); } @Override public AnnotatedMember getMember() { return delegate.getMember(); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) {"
      },
      {
        "txt": "return delegate.getAnnotation(acls); } public SettableBeanProperty getDelegate() { return delegate; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { delegate.deserializeAndSet(p, ctxt, instance); }"
      },
      {
        "txt": "@Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { return delegate.deserializeSetAndReturn(p, ctxt, instance); } @Override public void set(Object instance, Object value) throws IOException { delegate.set(instance, value); }"
      },
      {
        "txt": "@Override public Object setAndReturn(Object instance, Object value) throws IOException { return delegate.setAndReturn(instance, value); } }"
      }
    ]
  },
  {
    "id": 1767,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdDeserializer.java",
    "start-bug-line": 526,
    "end-bug-line": 526,
    "bug": "iae.getMessage());",
    "fix": "ClassUtil.exceptionMessage(iae));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.io.IOException;"
      },
      {
        "txt": "import java.util.*; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.Nulls; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.io.NumberInput; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.deser.BeanDeserializerBase; import com.fasterxml.jackson.databind.deser.NullValueProvider; import com.fasterxml.jackson.databind.deser.SettableBeanProperty;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.ValueInstantiator; import com.fasterxml.jackson.databind.deser.impl.NullsAsEmptyProvider; import com.fasterxml.jackson.databind.deser.impl.NullsConstantProvider; import com.fasterxml.jackson.databind.deser.impl.NullsFailProvider; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.AccessPattern; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public abstract class StdDeserializer<T>"
      },
      {
        "txt": "extends JsonDeserializer<T> implements java.io.Serializable { private static final long serialVersionUID = 1L; protected final static int F_MASK_INT_COERCIONS = DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.getMask() | DeserializationFeature.USE_LONG_FOR_INTS.getMask(); protected final static int F_MASK_ACCEPT_ARRAYS = DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS.getMask() | DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT.getMask();"
      },
      {
        "txt": "final protected Class<?> _valueClass; protected StdDeserializer(Class<?> vc) { _valueClass = vc; } protected StdDeserializer(JavaType valueType) { _valueClass = (valueType == null) ? Object.class : valueType.getRawClass(); } protected StdDeserializer(StdDeserializer<?> src) { _valueClass = src._valueClass; }"
      },
      {
        "txt": "@Override public Class<?> handledType() { return _valueClass; } @Deprecated public final Class<?> getValueClass() { return _valueClass; } public JavaType getValueType() { return null; } protected boolean isDefaultDeserializer(JsonDeserializer<?> deserializer) { return ClassUtil.isJacksonStdImpl(deserializer); } protected boolean isDefaultKeyDeserializer(KeyDeserializer keyDeser) { return ClassUtil.isJacksonStdImpl(keyDeser);"
      },
      {
        "txt": "} @Override public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException { return typeDeserializer.deserializeTypedFromAny(p, ctxt); } protected final boolean _parseBooleanPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_TRUE) return true;"
      },
      {
        "txt": "if (t == JsonToken.VALUE_FALSE) return false; if (t == JsonToken.VALUE_NULL) { _verifyNullForPrimitive(ctxt); return false; } if (t == JsonToken.VALUE_NUMBER_INT) { return _parseBooleanFromInt(p, ctxt); } if (t == JsonToken.VALUE_STRING) { String text = p.getText().trim();"
      },
      {
        "txt": "if (\"true\".equals(text) || \"True\".equals(text)) { return true; } if (\"false\".equals(text) || \"False\".equals(text)) { return false; } if (_isEmptyOrTextualNull(text)) { _verifyNullForPrimitiveCoercion(ctxt, text); return false; }"
      },
      {
        "txt": "Boolean b = (Boolean) ctxt.handleWeirdStringValue(_valueClass, text, \"only \\\"true\\\" or \\\"false\\\" recognized\"); return Boolean.TRUE.equals(b); } if (t == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken(); final boolean parsed = _parseBooleanPrimitive(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed; }"
      },
      {
        "txt": "return ((Boolean) ctxt.handleUnexpectedToken(_valueClass, p)).booleanValue(); } protected boolean _parseBooleanFromInt(JsonParser p, DeserializationContext ctxt) throws IOException { _verifyNumberForScalarCoercion(ctxt, p); return !\"0\".equals(p.getText()); } protected final byte _parseBytePrimitive(JsonParser p, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ int value = _parseIntPrimitive(p, ctxt); if (_byteOverflow(value)) { Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value), \"overflow, value cannot be represented as 8-bit value\"); return _nonNullNumber(v).byteValue(); } return (byte) value; } protected final short _parseShortPrimitive(JsonParser p, DeserializationContext ctxt)"
      },
      {
        "txt": "throws IOException { int value = _parseIntPrimitive(p, ctxt); if (_shortOverflow(value)) { Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, String.valueOf(value), \"overflow, value cannot be represented as 16-bit value\"); return _nonNullNumber(v).shortValue(); } return (short) value; }"
      },
      {
        "txt": "protected final int _parseIntPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) { return p.getIntValue(); } switch (p.getCurrentTokenId()) { case JsonTokenId.ID_STRING: String text = p.getText().trim(); if (_isEmptyOrTextualNull(text)) {"
      },
      {
        "txt": "_verifyNullForPrimitiveCoercion(ctxt, text); return 0; } return _parseIntPrimitive(ctxt, text); case JsonTokenId.ID_NUMBER_FLOAT: if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) { _failDoubleToIntCoercion(p, ctxt, \"int\"); } return p.getValueAsInt(); case JsonTokenId.ID_NULL:"
      },
      {
        "txt": "_verifyNullForPrimitive(ctxt); return 0; case JsonTokenId.ID_START_ARRAY: if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken(); final int parsed = _parseIntPrimitive(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed; } break;"
      },
      {
        "txt": "default: } return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).intValue(); } protected final int _parseIntPrimitive(DeserializationContext ctxt, String text) throws IOException { try { if (text.length() > 9) { long l = Long.parseLong(text); if (_intOverflow(l)) {"
      },
      {
        "txt": "Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text, \"Overflow: numeric value (%s) out of range of int (%d -%d)\", text, Integer.MIN_VALUE, Integer.MAX_VALUE); return _nonNullNumber(v).intValue(); } return (int) l; } return NumberInput.parseInt(text); } catch (IllegalArgumentException iae) { Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,"
      },
      {
        "txt": "\"not a valid int value\"); return _nonNullNumber(v).intValue(); } } protected final long _parseLongPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.VALUE_NUMBER_INT)) { return p.getLongValue(); }"
      },
      {
        "txt": "switch (p.getCurrentTokenId()) { case JsonTokenId.ID_STRING: String text = p.getText().trim(); if (_isEmptyOrTextualNull(text)) { _verifyNullForPrimitiveCoercion(ctxt, text); return 0L; } return _parseLongPrimitive(ctxt, text); case JsonTokenId.ID_NUMBER_FLOAT: if (!ctxt.isEnabled(DeserializationFeature.ACCEPT_FLOAT_AS_INT)) {"
      },
      {
        "txt": "_failDoubleToIntCoercion(p, ctxt, \"long\"); } return p.getValueAsLong(); case JsonTokenId.ID_NULL: _verifyNullForPrimitive(ctxt); return 0L; case JsonTokenId.ID_START_ARRAY: if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken(); final long parsed = _parseLongPrimitive(p, ctxt);"
      },
      {
        "txt": "_verifyEndArrayForSingle(p, ctxt); return parsed; } break; } return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).longValue(); } protected final long _parseLongPrimitive(DeserializationContext ctxt, String text) throws IOException { try {"
      },
      {
        "txt": "return NumberInput.parseLong(text); } catch (IllegalArgumentException iae) { } { Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text, \"not a valid long value\"); return _nonNullNumber(v).longValue(); } } protected final float _parseFloatPrimitive(JsonParser p, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT)) { return p.getFloatValue(); } switch (p.getCurrentTokenId()) { case JsonTokenId.ID_STRING: String text = p.getText().trim(); if (_isEmptyOrTextualNull(text)) { _verifyNullForPrimitiveCoercion(ctxt, text); return 0.0f;"
      },
      {
        "txt": "} return _parseFloatPrimitive(ctxt, text); case JsonTokenId.ID_NUMBER_INT: return p.getFloatValue(); case JsonTokenId.ID_NULL: _verifyNullForPrimitive(ctxt); return 0.0f; case JsonTokenId.ID_START_ARRAY: if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken();"
      },
      {
        "txt": "final float parsed = _parseFloatPrimitive(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed; } break; } return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).floatValue(); } protected final float _parseFloatPrimitive(DeserializationContext ctxt, String text) throws IOException"
      },
      {
        "txt": "{ switch (text.charAt(0)) { case 'I': if (_isPosInf(text)) { return Float.POSITIVE_INFINITY; } break; case 'N': if (_isNaN(text)) { return Float.NaN; } break;"
      },
      {
        "txt": "case '-': if (_isNegInf(text)) { return Float.NEGATIVE_INFINITY; } break; } try { return Float.parseFloat(text); } catch (IllegalArgumentException iae) { } Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text,"
      },
      {
        "txt": "\"not a valid float value\"); return _nonNullNumber(v).floatValue(); } protected final double _parseDoublePrimitive(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.VALUE_NUMBER_FLOAT)) { return p.getDoubleValue(); } switch (p.getCurrentTokenId()) {"
      },
      {
        "txt": "case JsonTokenId.ID_STRING: String text = p.getText().trim(); if (_isEmptyOrTextualNull(text)) { _verifyNullForPrimitiveCoercion(ctxt, text); return 0.0; } return _parseDoublePrimitive(ctxt, text); case JsonTokenId.ID_NUMBER_INT: return p.getDoubleValue(); case JsonTokenId.ID_NULL:"
      },
      {
        "txt": "_verifyNullForPrimitive(ctxt); return 0.0; case JsonTokenId.ID_START_ARRAY: if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken(); final double parsed = _parseDoublePrimitive(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed; } break;"
      },
      {
        "txt": "} return ((Number) ctxt.handleUnexpectedToken(_valueClass, p)).doubleValue(); } protected final double _parseDoublePrimitive(DeserializationContext ctxt, String text) throws IOException { switch (text.charAt(0)) { case 'I': if (_isPosInf(text)) { return Double.POSITIVE_INFINITY;"
      },
      {
        "txt": "} break; case 'N': if (_isNaN(text)) { return Double.NaN; } break; case '-': if (_isNegInf(text)) { return Double.NEGATIVE_INFINITY;"
      },
      {
        "txt": "} break; } try { return parseDouble(text); } catch (IllegalArgumentException iae) { } Number v = (Number) ctxt.handleWeirdStringValue(_valueClass, text, \"not a valid double value (as String to convert)\"); return _nonNullNumber(v).doubleValue(); }"
      },
      {
        "txt": "protected java.util.Date _parseDate(JsonParser p, DeserializationContext ctxt) throws IOException { switch (p.getCurrentTokenId()) { case JsonTokenId.ID_STRING: return _parseDate(p.getText().trim(), ctxt); case JsonTokenId.ID_NUMBER_INT: { long ts; try {"
      },
      {
        "txt": "ts = p.getLongValue(); } catch (JsonParseException e) { Number v = (Number) ctxt.handleWeirdNumberValue(_valueClass, p.getNumberValue(), \"not a valid 64-bit long for creating `java.util.Date`\"); ts = v.longValue(); } return new java.util.Date(ts); } case JsonTokenId.ID_NULL: return (java.util.Date) getNullValue(ctxt);"
      },
      {
        "txt": "case JsonTokenId.ID_START_ARRAY: return _parseDateFromArray(p, ctxt); } return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, p); } protected java.util.Date _parseDateFromArray(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t; if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS)) {"
      },
      {
        "txt": "t = p.nextToken(); if (t == JsonToken.END_ARRAY) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) { return (java.util.Date) getNullValue(ctxt); } } if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { final Date parsed = _parseDate(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed;"
      },
      {
        "txt": "} } else { t = p.getCurrentToken(); } return (java.util.Date) ctxt.handleUnexpectedToken(_valueClass, t, p, null); } protected java.util.Date _parseDate(String value, DeserializationContext ctxt) throws IOException { try {"
      },
      {
        "txt": "return (java.util.Date) getNullValue(ctxt); } return ctxt.parseDate(value); } catch (IllegalArgumentException iae) { return (java.util.Date) ctxt.handleWeirdStringValue(_valueClass, value, \"not a valid representation (error: %s)\", <extra_id_0> } } protected final static double parseDouble(String numStr) throws NumberFormatException { if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr)) { return Double.MIN_NORMAL; // since 2.7; was MIN_VALUE prior"
      },
      {
        "txt": "if (NumberInput.NASTY_SMALL_DOUBLE.equals(numStr)) { return Double.MIN_NORMAL; // since 2.7; was MIN_VALUE prior } return Double.parseDouble(numStr); } protected final String _parseString(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.VALUE_STRING) { return p.getText();"
      },
      {
        "txt": "} if ((t == JsonToken.START_ARRAY) && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) { p.nextToken(); final String parsed = _parseString(p, ctxt); _verifyEndArrayForSingle(p, ctxt); return parsed; } String value = p.getValueAsString(); if (value != null) { return value;"
      },
      {
        "txt": "} return (String) ctxt.handleUnexpectedToken(String.class, p); } @SuppressWarnings(\"unchecked\") protected T _deserializeFromEmpty(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.getCurrentToken(); if (t == JsonToken.START_ARRAY) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) {"
      },
      {
        "txt": "t = p.nextToken(); if (t == JsonToken.END_ARRAY) { return null; } return (T) ctxt.handleUnexpectedToken(handledType(), p); } } else if (t == JsonToken.VALUE_STRING) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT)) { String str = p.getText().trim(); if (str.isEmpty()) {"
      },
      {
        "txt": "return null; } } } return (T) ctxt.handleUnexpectedToken(handledType(), p); } protected boolean _hasTextualNull(String value) { return \"null\".equals(value); } protected boolean _isEmptyOrTextualNull(String value) {"
      },
      {
        "txt": "return value.isEmpty() || \"null\".equals(value); } protected final boolean _isNegInf(String text) { return \"-Infinity\".equals(text) || \"-INF\".equals(text); } protected final boolean _isPosInf(String text) { return \"Infinity\".equals(text) || \"INF\".equals(text); } protected final boolean _isNaN(String text) { return \"NaN\".equals(text); } protected T _deserializeFromArray(JsonParser p, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ JsonToken t; if (ctxt.hasSomeOfFeatures(F_MASK_ACCEPT_ARRAYS)) { t = p.nextToken(); if (t == JsonToken.END_ARRAY) { if (ctxt.isEnabled(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT)) { return getNullValue(ctxt); } } if (ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS)) {"
      },
      {
        "txt": "final T parsed = deserialize(p, ctxt); if (p.nextToken() != JsonToken.END_ARRAY) { handleMissingEndArrayForSingle(p, ctxt); } return parsed; } } else { t = p.getCurrentToken(); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "T result = (T) ctxt.handleUnexpectedToken(_valueClass, t, p, null); return result; } protected T _deserializeWrappedValue(JsonParser p, DeserializationContext ctxt) throws IOException { if (p.hasToken(JsonToken.START_ARRAY)) { String msg = String.format( \"Cannot deserialize instance of %s out of %s token: nested Arrays not allowed with %s\", ClassUtil.nameOf(_valueClass), JsonToken.START_ARRAY, \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") T result = (T) ctxt.handleUnexpectedToken(_valueClass, p.getCurrentToken(), p, msg); return result; } return (T) deserialize(p, ctxt); } protected void _failDoubleToIntCoercion(JsonParser p, DeserializationContext ctxt, String type) throws IOException { ctxt.reportInputMismatch(handledType(),"
      },
      {
        "txt": "\"Cannot coerce a floating-point value ('%s') into %s (enable `DeserializationFeature.ACCEPT_FLOAT_AS_INT` to allow)\", p.getValueAsString(), type); } protected Object _coerceIntegral(JsonParser p, DeserializationContext ctxt) throws IOException { int feats = ctxt.getDeserializationFeatures(); if (DeserializationFeature.USE_BIG_INTEGER_FOR_INTS.enabledIn(feats)) { return p.getBigIntegerValue(); } if (DeserializationFeature.USE_LONG_FOR_INTS.enabledIn(feats)) {"
      },
      {
        "txt": "return p.getLongValue(); } return p.getBigIntegerValue(); // should be optimal, whatever it is } protected Object _coerceNullToken(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException { if (isPrimitive) { _verifyNullForPrimitive(ctxt); } return getNullValue(ctxt);"
      },
      {
        "txt": "} protected Object _coerceTextualNull(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException { Enum<?> feat; boolean enable; if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) { feat = MapperFeature.ALLOW_COERCION_OF_SCALARS; enable = true; } else if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) { feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;"
      },
      {
        "txt": "enable = false; } else { return getNullValue(ctxt); } _reportFailedNullCoerce(ctxt, enable, feat, \"String \\\"null\\\"\"); return null; } protected Object _coerceEmptyString(DeserializationContext ctxt, boolean isPrimitive) throws JsonMappingException { Enum<?> feat;"
      },
      {
        "txt": "boolean enable; if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) { feat = MapperFeature.ALLOW_COERCION_OF_SCALARS; enable = true; } else if (isPrimitive && ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) { feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES; enable = false; } else { return getNullValue(ctxt); }"
      },
      {
        "txt": "_reportFailedNullCoerce(ctxt, enable, feat, \"empty String (\\\"\\\")\"); return null; } protected final void _verifyNullForPrimitive(DeserializationContext ctxt) throws JsonMappingException { if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) { ctxt.reportInputMismatch(this, \"Cannot coerce `null` %s (disable `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` to allow)\", _coercedTypeDesc()); }"
      },
      {
        "txt": "} protected final void _verifyNullForPrimitiveCoercion(DeserializationContext ctxt, String str) throws JsonMappingException { Enum<?> feat; boolean enable; if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) { feat = MapperFeature.ALLOW_COERCION_OF_SCALARS; enable = true; } else if (ctxt.isEnabled(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES)) { feat = DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES;"
      },
      {
        "txt": "enable = false; } else { return; } String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str); _reportFailedNullCoerce(ctxt, enable, feat, strDesc); } protected final void _verifyNullForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException { if (!ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS)) {"
      },
      {
        "txt": "String strDesc = str.isEmpty() ? \"empty String (\\\"\\\")\" : String.format(\"String \\\"%s\\\"\", str); _reportFailedNullCoerce(ctxt, true, MapperFeature.ALLOW_COERCION_OF_SCALARS, strDesc); } } protected void _verifyStringForScalarCoercion(DeserializationContext ctxt, String str) throws JsonMappingException { MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS; if (!ctxt.isEnabled(feat)) { ctxt.reportInputMismatch(this, \"Cannot coerce String \\\"%s\\\" %s (enable `%s.%s` to allow)\", str, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name());"
      },
      {
        "txt": "} } protected void _verifyNumberForScalarCoercion(DeserializationContext ctxt, JsonParser p) throws IOException { MapperFeature feat = MapperFeature.ALLOW_COERCION_OF_SCALARS; if (!ctxt.isEnabled(feat)) { String valueDesc = p.getText(); ctxt.reportInputMismatch(this, \"Cannot coerce Number (%s) %s (enable `%s.%s` to allow)\", valueDesc, _coercedTypeDesc(), feat.getClass().getSimpleName(), feat.name()); }"
      },
      {
        "txt": "} protected void _reportFailedNullCoerce(DeserializationContext ctxt, boolean state, Enum<?> feature, String inputDesc) throws JsonMappingException { String enableDesc = state ? \"enable\" : \"disable\"; ctxt.reportInputMismatch(this, \"Cannot coerce %s to Null value %s (%s `%s.%s` to allow)\", inputDesc, _coercedTypeDesc(), enableDesc, feature.getClass().getSimpleName(), feature.name()); } protected String _coercedTypeDesc() { boolean structured;"
      },
      {
        "txt": "String typeDesc; JavaType t = getValueType(); if ((t != null) && !t.isPrimitive()) { structured = (t.isContainerType() || t.isReferenceType()); typeDesc = \"'\"+t.toString()+\"'\"; } else { Class<?> cls = handledType(); structured = cls.isArray() || Collection.class.isAssignableFrom(cls) || Map.class.isAssignableFrom(cls); typeDesc = ClassUtil.nameOf(cls);"
      },
      {
        "txt": "} if (structured) { return \"as content of type \"+typeDesc; } return \"for type \"+typeDesc; } protected JsonDeserializer<Object> findDeserializer(DeserializationContext ctxt, JavaType type, BeanProperty property) throws JsonMappingException {"
      },
      {
        "txt": "return ctxt.findContextualValueDeserializer(type, property); } protected final boolean _isIntNumber(String text) { final int len = text.length(); if (len > 0) { char c = text.charAt(0); int i = (c == '-' || c == '+') ? 1 : 0; for (; i < len; ++i) { int ch = text.charAt(i);"
      },
      {
        "txt": "if (ch > '9' || ch < '0') { return false; } } return true; } return false; } protected JsonDeserializer<?> findConvertingContentDeserializer(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer<?> existingDeserializer)"
      },
      {
        "txt": "throws JsonMappingException { final AnnotationIntrospector intr = ctxt.getAnnotationIntrospector(); if (_neitherNull(intr, prop)) { AnnotatedMember member = prop.getMember(); if (member != null) { Object convDef = intr.findDeserializationContentConverter(member); if (convDef != null) { Converter<Object,Object> conv = ctxt.converterInstance(prop.getMember(), convDef); JavaType delegateType = conv.getInputType(ctxt.getTypeFactory());"
      },
      {
        "txt": "if (existingDeserializer == null) { existingDeserializer = ctxt.findContextualValueDeserializer(delegateType, prop); } return new StdDelegatingDeserializer<Object>(conv, delegateType, existingDeserializer); } } } return existingDeserializer; } protected JsonFormat.Value findFormatOverrides(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanProperty prop, Class<?> typeForDefaults) { if (prop != null) { return prop.findPropertyFormat(ctxt.getConfig(), typeForDefaults); } return ctxt.getDefaultPropertyFormat(typeForDefaults); } protected Boolean findFormatFeature(DeserializationContext ctxt, BeanProperty prop, Class<?> typeForDefaults, JsonFormat.Feature feat) {"
      },
      {
        "txt": "JsonFormat.Value format = findFormatOverrides(ctxt, prop, typeForDefaults); if (format != null) { return format.getFeature(feat); } return null; } protected final NullValueProvider findValueNullProvider(DeserializationContext ctxt, SettableBeanProperty prop, PropertyMetadata propMetadata) throws JsonMappingException {"
      },
      {
        "txt": "if (prop != null) { return _findNullProvider(ctxt, prop, propMetadata.getValueNulls(), prop.getValueDeserializer()); } return null; } protected NullValueProvider findContentNullProvider(DeserializationContext ctxt, BeanProperty prop, JsonDeserializer<?> valueDeser) throws JsonMappingException {"
      },
      {
        "txt": "final Nulls nulls = findContentNullStyle(ctxt, prop); if (nulls == Nulls.SKIP) { return NullsConstantProvider.skipper(); } NullValueProvider prov = _findNullProvider(ctxt, prop, nulls, valueDeser); if (prov != null) { return prov; } return valueDeser; }"
      },
      {
        "txt": "protected Nulls findContentNullStyle(DeserializationContext ctxt, BeanProperty prop) throws JsonMappingException { if (prop != null) { return prop.getMetadata().getContentNulls(); } return null; } protected final NullValueProvider _findNullProvider(DeserializationContext ctxt, BeanProperty prop, Nulls nulls, JsonDeserializer<?> valueDeser)"
      },
      {
        "txt": "throws JsonMappingException { if (nulls == Nulls.FAIL) { if (prop == null) { return NullsFailProvider.constructForRootValue(ctxt.constructType(valueDeser.handledType())); } return NullsFailProvider.constructForProperty(prop); } if (nulls == Nulls.AS_EMPTY) { if (valueDeser == null) {"
      },
      {
        "txt": "return null; } if (valueDeser instanceof BeanDeserializerBase) { ValueInstantiator vi = ((BeanDeserializerBase) valueDeser).getValueInstantiator(); if (!vi.canCreateUsingDefault()) { final JavaType type = prop.getType(); ctxt.reportBadDefinition(type, String.format(\"Cannot create empty instance of %s, no default Creator\", type)); } }"
      },
      {
        "txt": "{ AccessPattern access = valueDeser.getEmptyAccessPattern(); if (access == AccessPattern.ALWAYS_NULL) { return NullsConstantProvider.nuller(); } if (access == AccessPattern.CONSTANT) { return NullsConstantProvider.forValue(valueDeser.getEmptyValue(ctxt)); } } return new NullsAsEmptyProvider(valueDeser);"
      },
      {
        "txt": "} if (nulls == Nulls.SKIP) { return NullsConstantProvider.skipper(); } return null; } protected void handleUnknownProperty(JsonParser p, DeserializationContext ctxt, Object instanceOrClass, String propName) throws IOException {"
      },
      {
        "txt": "if (instanceOrClass == null) { instanceOrClass = handledType(); } if (ctxt.handleUnknownProperty(p, this, instanceOrClass, propName)) { return; } p.skipChildren(); } protected void handleMissingEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ ctxt.reportWrongTokenException(this, JsonToken.END_ARRAY, \"Attempted to unwrap '%s' value from an array (with `DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS`) but it contains more than one value\", handledType().getName()); } protected void _verifyEndArrayForSingle(JsonParser p, DeserializationContext ctxt) throws IOException { JsonToken t = p.nextToken(); if (t != JsonToken.END_ARRAY) { handleMissingEndArrayForSingle(p, ctxt);"
      },
      {
        "txt": "} } protected final static boolean _neitherNull(Object a, Object b) { return (a != null) && (b != null); } protected final boolean _byteOverflow(int value) { return (value < Byte.MIN_VALUE || value > 255); } protected final boolean _shortOverflow(int value) { return (value < Short.MIN_VALUE || value > Short.MAX_VALUE);"
      },
      {
        "txt": "} protected final boolean _intOverflow(long value) { return (value < Integer.MIN_VALUE || value > Integer.MAX_VALUE); } protected Number _nonNullNumber(Number n) { if (n == null) { n = Integer.valueOf(0); } return n; }"
      }
    ]
  },
  {
    "id": 1768,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
    "start-bug-line": 135,
    "end-bug-line": 135,
    "bug": "re.getMessage());",
    "fix": "ClassUtil.exceptionMessage(re));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.io.IOException; import java.lang.reflect.Constructor; import java.lang.reflect.Method;"
      },
      {
        "txt": "import java.net.MalformedURLException; import java.net.URI; import java.net.URL; import java.util.*; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.core.io.NumberInput; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.introspect.AnnotatedMethod;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.EnumResolver; import com.fasterxml.jackson.databind.util.TokenBuffer; @JacksonStdImpl public class StdKeyDeserializer extends KeyDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1L; public final static int TYPE_BOOLEAN = 1; public final static int TYPE_BYTE = 2;"
      },
      {
        "txt": "public final static int TYPE_SHORT = 3; public final static int TYPE_CHAR = 4; public final static int TYPE_INT = 5; public final static int TYPE_LONG = 6; public final static int TYPE_FLOAT = 7; public final static int TYPE_DOUBLE = 8; public final static int TYPE_LOCALE = 9; public final static int TYPE_DATE = 10; public final static int TYPE_CALENDAR = 11; public final static int TYPE_UUID = 12;"
      },
      {
        "txt": "public final static int TYPE_URI = 13; public final static int TYPE_URL = 14; public final static int TYPE_CLASS = 15; public final static int TYPE_CURRENCY = 16; public final static int TYPE_BYTE_ARRAY = 17; // since 2.9 final protected int _kind; final protected Class<?> _keyClass; protected final FromStringDeserializer<?> _deser; protected StdKeyDeserializer(int kind, Class<?> cls) { this(kind, cls, null);"
      },
      {
        "txt": "} protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser) { _kind = kind; _keyClass = cls; _deser = deser; } public static StdKeyDeserializer forType(Class<?> raw) { int kind; if (raw == String.class || raw == Object.class || raw == CharSequence.class) {"
      },
      {
        "txt": "return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE; } else if (raw == Calendar.class) {"
      },
      {
        "txt": "kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT; } else if (raw == Float.class) {"
      },
      {
        "txt": "kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS; } else if (raw == Locale.class) {"
      },
      {
        "txt": "FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else if (raw == byte[].class) { kind = TYPE_BYTE_ARRAY; } else { return null; }"
      },
      {
        "txt": "return new StdKeyDeserializer(kind, raw); } @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { if (key == null) { // is this even legal call? return null; } try {"
      },
      {
        "txt": "if (result != null) { return result; } } catch (Exception re) { return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\", re.getClass().getName(), <extra_id_0> } if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) { return null; } return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\"); }"
      },
      {
        "txt": "return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\"); } public Class<?> getKeyClass() { return _keyClass; } protected Object _parse(String key, DeserializationContext ctxt) throws Exception { switch (_kind) { case TYPE_BOOLEAN: if (\"true\".equals(key)) { return Boolean.TRUE; }"
      },
      {
        "txt": "if (\"false\".equals(key)) { return Boolean.FALSE; } return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\"); case TYPE_BYTE: { int value = _parseInt(key); if (value < Byte.MIN_VALUE || value > 255) { return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\"); }"
      },
      {
        "txt": "return Byte.valueOf((byte) value); } case TYPE_SHORT: { int value = _parseInt(key); if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) { return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\"); } return Short.valueOf((short) value); }"
      },
      {
        "txt": "case TYPE_CHAR: if (key.length() == 1) { return Character.valueOf(key.charAt(0)); } return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\"); case TYPE_INT: return _parseInt(key); case TYPE_LONG: return _parseLong(key); case TYPE_FLOAT:"
      },
      {
        "txt": "return Float.valueOf((float) _parseDouble(key)); case TYPE_DOUBLE: return _parseDouble(key); case TYPE_LOCALE: try { return _deser._deserialize(key, ctxt); } catch (IllegalArgumentException e) { return _weirdKey(ctxt, key, e); } case TYPE_CURRENCY:"
      },
      {
        "txt": "try { return _deser._deserialize(key, ctxt); } catch (IllegalArgumentException e) { return _weirdKey(ctxt, key, e); } case TYPE_DATE: return ctxt.parseDate(key); case TYPE_CALENDAR: return ctxt.constructCalendar(ctxt.parseDate(key)); case TYPE_UUID:"
      },
      {
        "txt": "try { return UUID.fromString(key); } catch (Exception e) { return _weirdKey(ctxt, key, e); } case TYPE_URI: try { return URI.create(key); } catch (Exception e) { return _weirdKey(ctxt, key, e);"
      },
      {
        "txt": "} case TYPE_URL: try { return new URL(key); } catch (MalformedURLException e) { return _weirdKey(ctxt, key, e); } case TYPE_CLASS: try { return ctxt.findClass(key);"
      },
      {
        "txt": "} catch (Exception e) { return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\"); } case TYPE_BYTE_ARRAY: try { return ctxt.getConfig().getBase64Variant().decode(key); } catch (IllegalArgumentException e) { return _weirdKey(ctxt, key, e); } default:"
      },
      {
        "txt": "throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass); } } protected int _parseInt(String key) throws IllegalArgumentException { return Integer.parseInt(key); } protected long _parseLong(String key) throws IllegalArgumentException { return Long.parseLong(key); } protected double _parseDouble(String key) throws IllegalArgumentException {"
      },
      {
        "txt": "return NumberInput.parseDouble(key); } protected Object _weirdKey(DeserializationContext ctxt, String key, Exception e) throws IOException { return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", e.getMessage()); } @JacksonStdImpl final static class StringKD extends StdKeyDeserializer { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "private final static StringKD sString = new StringKD(String.class); private final static StringKD sObject = new StringKD(Object.class); private StringKD(Class<?> nominalType) { super(-1, nominalType); } public static StringKD forType(Class<?> nominalType) { if (nominalType == String.class) { return sString; } if (nominalType == Object.class) { return sObject;"
      },
      {
        "txt": "} return new StringKD(nominalType); } @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException { return key; } } final static class DelegatingKD extends KeyDeserializer // note: NOT the std one"
      },
      {
        "txt": "implements java.io.Serializable { private static final long serialVersionUID = 1L; final protected Class<?> _keyClass; protected final JsonDeserializer<?> _delegate; protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser) { _keyClass = cls; _delegate = deser; } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "@Override public final Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { if (key == null) { // is this even legal call? return null; } TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt); tb.writeString(key); try {"
      },
      {
        "txt": "JsonParser p = tb.asParser(); p.nextToken(); Object result = _delegate.deserialize(p, ctxt); if (result != null) { return result; } return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\"); } catch (Exception re) { return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage()); }"
      },
      {
        "txt": "} public Class<?> getKeyClass() { return _keyClass; } } @JacksonStdImpl final static class EnumKD extends StdKeyDeserializer { private static final long serialVersionUID = 1L; protected final EnumResolver _byNameResolver; protected final AnnotatedMethod _factory; protected EnumResolver _byToStringResolver;"
      },
      {
        "txt": "protected final Enum<?> _enumDefaultValue; protected EnumKD(EnumResolver er, AnnotatedMethod factory) { super(-1, er.getEnumClass()); _byNameResolver = er; _factory = factory; _enumDefaultValue = er.getDefaultValue(); } @Override public Object _parse(String key, DeserializationContext ctxt) throws IOException {"
      },
      {
        "txt": "if (_factory != null) { try { return _factory.call1(key); } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e); } } EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING) ? _getToStringResolver(ctxt) : _byNameResolver; Enum<?> e = res.findEnum(key);"
      },
      {
        "txt": "if (e == null) { if ((_enumDefaultValue != null) && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)) { e = _enumDefaultValue; } else if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) { return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\", res.getEnumIds()); } } return e;"
      },
      {
        "txt": "} private EnumResolver _getToStringResolver(DeserializationContext ctxt) { EnumResolver res = _byToStringResolver; if (res == null) { synchronized (this) { res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(), ctxt.getAnnotationIntrospector()); } }"
      },
      {
        "txt": "return res; } } final static class StringCtorKeyDeserializer extends StdKeyDeserializer { private static final long serialVersionUID = 1L; protected final Constructor<?> _ctor; public StringCtorKeyDeserializer(Constructor<?> ctor) { super(-1, ctor.getDeclaringClass()); _ctor = ctor;"
      },
      {
        "txt": "} @Override public Object _parse(String key, DeserializationContext ctxt) throws Exception { return _ctor.newInstance(key); } } final static class StringFactoryKeyDeserializer extends StdKeyDeserializer { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "final Method _factoryMethod; public StringFactoryKeyDeserializer(Method fm) { super(-1, fm.getDeclaringClass()); _factoryMethod = fm; } @Override public Object _parse(String key, DeserializationContext ctxt) throws Exception { return _factoryMethod.invoke(null, key); }"
      }
    ]
  },
  {
    "id": 1769,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdKeyDeserializer.java",
    "start-bug-line": 262,
    "end-bug-line": 262,
    "bug": "e.getMessage());",
    "fix": "ClassUtil.exceptionMessage(e));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.io.IOException; import java.lang.reflect.Constructor;"
      },
      {
        "txt": "import java.lang.reflect.Method; import java.net.MalformedURLException; import java.net.URI; import java.net.URL; import java.util.*; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.core.JsonProcessingException; import com.fasterxml.jackson.core.io.NumberInput; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedMethod; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.EnumResolver; import com.fasterxml.jackson.databind.util.TokenBuffer; @JacksonStdImpl public class StdKeyDeserializer extends KeyDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1L; public final static int TYPE_BOOLEAN = 1;"
      },
      {
        "txt": "public final static int TYPE_BYTE = 2; public final static int TYPE_SHORT = 3; public final static int TYPE_CHAR = 4; public final static int TYPE_INT = 5; public final static int TYPE_LONG = 6; public final static int TYPE_FLOAT = 7; public final static int TYPE_DOUBLE = 8; public final static int TYPE_LOCALE = 9; public final static int TYPE_DATE = 10; public final static int TYPE_CALENDAR = 11;"
      },
      {
        "txt": "public final static int TYPE_UUID = 12; public final static int TYPE_URI = 13; public final static int TYPE_URL = 14; public final static int TYPE_CLASS = 15; public final static int TYPE_CURRENCY = 16; public final static int TYPE_BYTE_ARRAY = 17; // since 2.9 final protected int _kind; final protected Class<?> _keyClass; protected final FromStringDeserializer<?> _deser; protected StdKeyDeserializer(int kind, Class<?> cls) {"
      },
      {
        "txt": "this(kind, cls, null); } protected StdKeyDeserializer(int kind, Class<?> cls, FromStringDeserializer<?> deser) { _kind = kind; _keyClass = cls; _deser = deser; } public static StdKeyDeserializer forType(Class<?> raw) { int kind;"
      },
      {
        "txt": "if (raw == String.class || raw == Object.class || raw == CharSequence.class) { return StringKD.forType(raw); } else if (raw == UUID.class) { kind = TYPE_UUID; } else if (raw == Integer.class) { kind = TYPE_INT; } else if (raw == Long.class) { kind = TYPE_LONG; } else if (raw == Date.class) { kind = TYPE_DATE;"
      },
      {
        "txt": "} else if (raw == Calendar.class) { kind = TYPE_CALENDAR; } else if (raw == Boolean.class) { kind = TYPE_BOOLEAN; } else if (raw == Byte.class) { kind = TYPE_BYTE; } else if (raw == Character.class) { kind = TYPE_CHAR; } else if (raw == Short.class) { kind = TYPE_SHORT;"
      },
      {
        "txt": "} else if (raw == Float.class) { kind = TYPE_FLOAT; } else if (raw == Double.class) { kind = TYPE_DOUBLE; } else if (raw == URI.class) { kind = TYPE_URI; } else if (raw == URL.class) { kind = TYPE_URL; } else if (raw == Class.class) { kind = TYPE_CLASS;"
      },
      {
        "txt": "} else if (raw == Locale.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Locale.class); return new StdKeyDeserializer(TYPE_LOCALE, raw, deser); } else if (raw == Currency.class) { FromStringDeserializer<?> deser = FromStringDeserializer.findDeserializer(Currency.class); return new StdKeyDeserializer(TYPE_CURRENCY, raw, deser); } else if (raw == byte[].class) { kind = TYPE_BYTE_ARRAY; } else { return null;"
      },
      {
        "txt": "} return new StdKeyDeserializer(kind, raw); } @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { if (key == null) { // is this even legal call? return null; }"
      },
      {
        "txt": "try { Object result = _parse(key, ctxt); if (result != null) { return result; } } catch (Exception re) { return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation, problem: (%s) %s\", re.getClass().getName(), re.getMessage()); }"
      },
      {
        "txt": "if (_keyClass.isEnum() && ctxt.getConfig().isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) { return null; } return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\"); } public Class<?> getKeyClass() { return _keyClass; } protected Object _parse(String key, DeserializationContext ctxt) throws Exception { switch (_kind) { case TYPE_BOOLEAN:"
      },
      {
        "txt": "if (\"true\".equals(key)) { return Boolean.TRUE; } if (\"false\".equals(key)) { return Boolean.FALSE; } return ctxt.handleWeirdKey(_keyClass, key, \"value not 'true' or 'false'\"); case TYPE_BYTE: { int value = _parseInt(key);"
      },
      {
        "txt": "if (value < Byte.MIN_VALUE || value > 255) { return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 8-bit value\"); } return Byte.valueOf((byte) value); } case TYPE_SHORT: { int value = _parseInt(key); if (value < Short.MIN_VALUE || value > Short.MAX_VALUE) { return ctxt.handleWeirdKey(_keyClass, key, \"overflow, value cannot be represented as 16-bit value\");"
      },
      {
        "txt": "} return Short.valueOf((short) value); } case TYPE_CHAR: if (key.length() == 1) { return Character.valueOf(key.charAt(0)); } return ctxt.handleWeirdKey(_keyClass, key, \"can only convert 1-character Strings\"); case TYPE_INT: return _parseInt(key);"
      },
      {
        "txt": "case TYPE_LONG: return _parseLong(key); case TYPE_FLOAT: return Float.valueOf((float) _parseDouble(key)); case TYPE_DOUBLE: return _parseDouble(key); case TYPE_LOCALE: try { return _deser._deserialize(key, ctxt); } catch (IllegalArgumentException e) {"
      },
      {
        "txt": "return _weirdKey(ctxt, key, e); } case TYPE_CURRENCY: try { return _deser._deserialize(key, ctxt); } catch (IllegalArgumentException e) { return _weirdKey(ctxt, key, e); } case TYPE_DATE: return ctxt.parseDate(key);"
      },
      {
        "txt": "case TYPE_CALENDAR: return ctxt.constructCalendar(ctxt.parseDate(key)); case TYPE_UUID: try { return UUID.fromString(key); } catch (Exception e) { return _weirdKey(ctxt, key, e); } case TYPE_URI: try {"
      },
      {
        "txt": "return URI.create(key); } catch (Exception e) { return _weirdKey(ctxt, key, e); } case TYPE_URL: try { return new URL(key); } catch (MalformedURLException e) { return _weirdKey(ctxt, key, e); }"
      },
      {
        "txt": "case TYPE_CLASS: try { return ctxt.findClass(key); } catch (Exception e) { return ctxt.handleWeirdKey(_keyClass, key, \"unable to parse key as Class\"); } case TYPE_BYTE_ARRAY: try { return ctxt.getConfig().getBase64Variant().decode(key); } catch (IllegalArgumentException e) {"
      },
      {
        "txt": "return _weirdKey(ctxt, key, e); } default: throw new IllegalStateException(\"Internal error: unknown key type \"+_keyClass); } } protected int _parseInt(String key) throws IllegalArgumentException { return Integer.parseInt(key); } protected long _parseLong(String key) throws IllegalArgumentException {"
      },
      {
        "txt": "} protected double _parseDouble(String key) throws IllegalArgumentException { return NumberInput.parseDouble(key); } protected Object _weirdKey(DeserializationContext ctxt, String key, Exception e) throws IOException { return ctxt.handleWeirdKey(_keyClass, key, \"problem: %s\", <extra_id_0> } @JacksonStdImpl final static class StringKD extends StdKeyDeserializer { private static final long serialVersionUID = 1L; private final static StringKD sString = new StringKD(String.class);"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; private final static StringKD sString = new StringKD(String.class); private final static StringKD sObject = new StringKD(Object.class); private StringKD(Class<?> nominalType) { super(-1, nominalType); } public static StringKD forType(Class<?> nominalType) { if (nominalType == String.class) { return sString; } if (nominalType == Object.class) {"
      },
      {
        "txt": "return sObject; } return new StringKD(nominalType); } @Override public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException { return key; } } final static class DelegatingKD"
      },
      {
        "txt": "extends KeyDeserializer // note: NOT the std one implements java.io.Serializable { private static final long serialVersionUID = 1L; final protected Class<?> _keyClass; protected final JsonDeserializer<?> _delegate; protected DelegatingKD(Class<?> cls, JsonDeserializer<?> deser) { _keyClass = cls; _delegate = deser; }"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") @Override public final Object deserializeKey(String key, DeserializationContext ctxt) throws IOException { if (key == null) { // is this even legal call? return null; } TokenBuffer tb = new TokenBuffer(ctxt.getParser(), ctxt); tb.writeString(key);"
      },
      {
        "txt": "try { JsonParser p = tb.asParser(); p.nextToken(); Object result = _delegate.deserialize(p, ctxt); if (result != null) { return result; } return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation\"); } catch (Exception re) { return ctxt.handleWeirdKey(_keyClass, key, \"not a valid representation: %s\", re.getMessage());"
      },
      {
        "txt": "} } public Class<?> getKeyClass() { return _keyClass; } } @JacksonStdImpl final static class EnumKD extends StdKeyDeserializer { private static final long serialVersionUID = 1L; protected final EnumResolver _byNameResolver; protected final AnnotatedMethod _factory;"
      },
      {
        "txt": "protected EnumResolver _byToStringResolver; protected final Enum<?> _enumDefaultValue; protected EnumKD(EnumResolver er, AnnotatedMethod factory) { super(-1, er.getEnumClass()); _byNameResolver = er; _factory = factory; _enumDefaultValue = er.getDefaultValue(); } @Override public Object _parse(String key, DeserializationContext ctxt) throws IOException"
      },
      {
        "txt": "{ if (_factory != null) { try { return _factory.call1(key); } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e); } } EnumResolver res = ctxt.isEnabled(DeserializationFeature.READ_ENUMS_USING_TO_STRING) ? _getToStringResolver(ctxt) : _byNameResolver;"
      },
      {
        "txt": "Enum<?> e = res.findEnum(key); if (e == null) { if ((_enumDefaultValue != null) && ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_USING_DEFAULT_VALUE)) { e = _enumDefaultValue; } else if (!ctxt.isEnabled(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)) { return ctxt.handleWeirdKey(_keyClass, key, \"not one of values excepted for Enum class: %s\", res.getEnumIds()); } }"
      },
      {
        "txt": "return e; } private EnumResolver _getToStringResolver(DeserializationContext ctxt) { EnumResolver res = _byToStringResolver; if (res == null) { synchronized (this) { res = EnumResolver.constructUnsafeUsingToString(_byNameResolver.getEnumClass(), ctxt.getAnnotationIntrospector()); }"
      },
      {
        "txt": "} return res; } } final static class StringCtorKeyDeserializer extends StdKeyDeserializer { private static final long serialVersionUID = 1L; protected final Constructor<?> _ctor; public StringCtorKeyDeserializer(Constructor<?> ctor) { super(-1, ctor.getDeclaringClass());"
      },
      {
        "txt": "_ctor = ctor; } @Override public Object _parse(String key, DeserializationContext ctxt) throws Exception { return _ctor.newInstance(key); } } final static class StringFactoryKeyDeserializer extends StdKeyDeserializer {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; final Method _factoryMethod; public StringFactoryKeyDeserializer(Method fm) { super(-1, fm.getDeclaringClass()); _factoryMethod = fm; } @Override public Object _parse(String key, DeserializationContext ctxt) throws Exception { return _factoryMethod.invoke(null, key);"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 1770,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/StdValueInstantiator.java",
    "start-bug-line": 456,
    "end-bug-line": 456,
    "bug": "\"Instantiation of \"+getValueTypeDesc()+\" value failed: \"+t.getMessage(), t);",
    "fix": "\"Instantiation of \"+getValueTypeDesc()+\" value failed: \"+ClassUtil.exceptionMessage(t), t);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.io.IOException; import java.lang.reflect.InvocationTargetException; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.deser.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedParameter; import com.fasterxml.jackson.databind.introspect.AnnotatedWithParams; import com.fasterxml.jackson.databind.util.ClassUtil; @JacksonStdImpl public class StdValueInstantiator extends ValueInstantiator implements java.io.Serializable { private static final long serialVersionUID = 1L; protected final String _valueTypeDesc;"
      },
      {
        "txt": "protected final Class<?> _valueClass; protected AnnotatedWithParams _defaultCreator; protected AnnotatedWithParams _withArgsCreator; protected SettableBeanProperty[] _constructorArguments; protected JavaType _delegateType; protected AnnotatedWithParams _delegateCreator; protected SettableBeanProperty[] _delegateArguments; protected JavaType _arrayDelegateType; protected AnnotatedWithParams _arrayDelegateCreator; protected SettableBeanProperty[] _arrayDelegateArguments;"
      },
      {
        "txt": "protected AnnotatedWithParams _fromStringCreator; protected AnnotatedWithParams _fromIntCreator; protected AnnotatedWithParams _fromLongCreator; protected AnnotatedWithParams _fromDoubleCreator; protected AnnotatedWithParams _fromBooleanCreator; protected AnnotatedParameter _incompleteParameter; @Deprecated public StdValueInstantiator(DeserializationConfig config, Class<?> valueType) { _valueTypeDesc = ClassUtil.nameOf(valueType); _valueClass = (valueType == null) ? Object.class : valueType;"
      },
      {
        "txt": "} public StdValueInstantiator(DeserializationConfig config, JavaType valueType) { _valueTypeDesc = (valueType == null) ? \"UNKNOWN TYPE\" : valueType.toString(); _valueClass = (valueType == null) ? Object.class : valueType.getRawClass(); } protected StdValueInstantiator(StdValueInstantiator src) { _valueTypeDesc = src._valueTypeDesc; _valueClass = src._valueClass; _defaultCreator = src._defaultCreator;"
      },
      {
        "txt": "_constructorArguments = src._constructorArguments; _withArgsCreator = src._withArgsCreator; _delegateType = src._delegateType; _delegateCreator = src._delegateCreator; _delegateArguments = src._delegateArguments; _arrayDelegateType = src._arrayDelegateType; _arrayDelegateCreator = src._arrayDelegateCreator; _arrayDelegateArguments = src._arrayDelegateArguments; _fromStringCreator = src._fromStringCreator; _fromIntCreator = src._fromIntCreator;"
      },
      {
        "txt": "_fromLongCreator = src._fromLongCreator; _fromDoubleCreator = src._fromDoubleCreator; _fromBooleanCreator = src._fromBooleanCreator; } public void configureFromObjectSettings(AnnotatedWithParams defaultCreator, AnnotatedWithParams delegateCreator, JavaType delegateType, SettableBeanProperty[] delegateArgs, AnnotatedWithParams withArgsCreator, SettableBeanProperty[] constructorArgs) { _defaultCreator = defaultCreator; _delegateCreator = delegateCreator;"
      },
      {
        "txt": "_delegateType = delegateType; _delegateArguments = delegateArgs; _withArgsCreator = withArgsCreator; _constructorArguments = constructorArgs; } public void configureFromArraySettings( AnnotatedWithParams arrayDelegateCreator, JavaType arrayDelegateType, SettableBeanProperty[] arrayDelegateArgs) {"
      },
      {
        "txt": "_arrayDelegateCreator = arrayDelegateCreator; _arrayDelegateType = arrayDelegateType; _arrayDelegateArguments = arrayDelegateArgs; } public void configureFromStringCreator(AnnotatedWithParams creator) { _fromStringCreator = creator; } public void configureFromIntCreator(AnnotatedWithParams creator) { _fromIntCreator = creator; }"
      },
      {
        "txt": "public void configureFromLongCreator(AnnotatedWithParams creator) { _fromLongCreator = creator; } public void configureFromDoubleCreator(AnnotatedWithParams creator) { _fromDoubleCreator = creator; } public void configureFromBooleanCreator(AnnotatedWithParams creator) { _fromBooleanCreator = creator; } public void configureIncompleteParameter(AnnotatedParameter parameter) {"
      },
      {
        "txt": "_incompleteParameter = parameter; } @Override public String getValueTypeDesc() { return _valueTypeDesc; } @Override public Class<?> getValueClass() { return _valueClass; }"
      },
      {
        "txt": "@Override public boolean canCreateFromString() { return (_fromStringCreator != null); } @Override public boolean canCreateFromInt() { return (_fromIntCreator != null); } @Override public boolean canCreateFromLong() {"
      },
      {
        "txt": "return (_fromLongCreator != null); } @Override public boolean canCreateFromDouble() { return (_fromDoubleCreator != null); } @Override public boolean canCreateFromBoolean() { return (_fromBooleanCreator != null); }"
      },
      {
        "txt": "@Override public boolean canCreateUsingDefault() { return (_defaultCreator != null); } @Override public boolean canCreateUsingDelegate() { return (_delegateType != null); } @Override public boolean canCreateUsingArrayDelegate() {"
      },
      {
        "txt": "return (_arrayDelegateType != null); } @Override public boolean canCreateFromObjectWith() { return (_withArgsCreator != null); } @Override public boolean canInstantiate() { return canCreateUsingDefault() || canCreateUsingDelegate() || canCreateUsingArrayDelegate()"
      },
      {
        "txt": "|| canCreateFromObjectWith() || canCreateFromString() || canCreateFromInt() || canCreateFromLong() || canCreateFromDouble() || canCreateFromBoolean(); } @Override public JavaType getDelegateType(DeserializationConfig config) { return _delegateType; } @Override public JavaType getArrayDelegateType(DeserializationConfig config) {"
      },
      {
        "txt": "return _arrayDelegateType; } @Override public SettableBeanProperty[] getFromObjectArguments(DeserializationConfig config) { return _constructorArguments; } @Override public Object createUsingDefault(DeserializationContext ctxt) throws IOException { if (_defaultCreator == null) { // sanity-check; caller should check"
      },
      {
        "txt": "return super.createUsingDefault(ctxt); } try { return _defaultCreator.call(); } catch (Exception e) { // 19-Apr-2017, tatu: Let's not catch Errors, just Exceptions return ctxt.handleInstantiationProblem(_valueClass, null, rewrapCtorProblem(ctxt, e)); } } @Override public Object createFromObjectWith(DeserializationContext ctxt, Object[] args) throws IOException"
      },
      {
        "txt": "{ if (_withArgsCreator == null) { // sanity-check; caller should check return super.createFromObjectWith(ctxt, args); } try { return _withArgsCreator.call(args); } catch (Exception e) { // 19-Apr-2017, tatu: Let's not catch Errors, just Exceptions return ctxt.handleInstantiationProblem(_valueClass, args, rewrapCtorProblem(ctxt, e)); } }"
      },
      {
        "txt": "@Override public Object createUsingDelegate(DeserializationContext ctxt, Object delegate) throws IOException { if (_delegateCreator == null) { if (_arrayDelegateCreator != null) { return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate); } } return _createUsingDelegate(_delegateCreator, _delegateArguments, ctxt, delegate); }"
      },
      {
        "txt": "@Override public Object createUsingArrayDelegate(DeserializationContext ctxt, Object delegate) throws IOException { if (_arrayDelegateCreator == null) { if (_delegateCreator != null) { // sanity-check; caller should check return createUsingDelegate(ctxt, delegate); } } return _createUsingDelegate(_arrayDelegateCreator, _arrayDelegateArguments, ctxt, delegate); }"
      },
      {
        "txt": "@Override public Object createFromString(DeserializationContext ctxt, String value) throws IOException { if (_fromStringCreator == null) { return _createFromStringFallbacks(ctxt, value); } try { return _fromStringCreator.call1(value); } catch (Throwable t) { return ctxt.handleInstantiationProblem(_fromStringCreator.getDeclaringClass(),"
      },
      {
        "txt": "value, rewrapCtorProblem(ctxt, t)); } } @Override public Object createFromInt(DeserializationContext ctxt, int value) throws IOException { if (_fromIntCreator != null) { Object arg = Integer.valueOf(value); try { return _fromIntCreator.call1(arg);"
      },
      {
        "txt": "} catch (Throwable t0) { return ctxt.handleInstantiationProblem(_fromIntCreator.getDeclaringClass(), arg, rewrapCtorProblem(ctxt, t0)); } } if (_fromLongCreator != null) { Object arg = Long.valueOf(value); try { return _fromLongCreator.call1(arg); } catch (Throwable t0) {"
      },
      {
        "txt": "return ctxt.handleInstantiationProblem(_fromLongCreator.getDeclaringClass(), arg, rewrapCtorProblem(ctxt, t0)); } } return super.createFromInt(ctxt, value); } @Override public Object createFromLong(DeserializationContext ctxt, long value) throws IOException { if (_fromLongCreator == null) {"
      },
      {
        "txt": "return super.createFromLong(ctxt, value); } Object arg = Long.valueOf(value); try { return _fromLongCreator.call1(arg); } catch (Throwable t0) { return ctxt.handleInstantiationProblem(_fromLongCreator.getDeclaringClass(), arg, rewrapCtorProblem(ctxt, t0)); } }"
      },
      {
        "txt": "@Override public Object createFromDouble(DeserializationContext ctxt, double value) throws IOException { if (_fromDoubleCreator == null) { return super.createFromDouble(ctxt, value); } Object arg = Double.valueOf(value); try { return _fromDoubleCreator.call1(arg); } catch (Throwable t0) {"
      },
      {
        "txt": "return ctxt.handleInstantiationProblem(_fromDoubleCreator.getDeclaringClass(), arg, rewrapCtorProblem(ctxt, t0)); } } @Override public Object createFromBoolean(DeserializationContext ctxt, boolean value) throws IOException { if (_fromBooleanCreator == null) { return super.createFromBoolean(ctxt, value); }"
      },
      {
        "txt": "final Boolean arg = Boolean.valueOf(value); try { return _fromBooleanCreator.call1(arg); } catch (Throwable t0) { return ctxt.handleInstantiationProblem(_fromBooleanCreator.getDeclaringClass(), arg, rewrapCtorProblem(ctxt, t0)); } } @Override public AnnotatedWithParams getDelegateCreator() {"
      },
      {
        "txt": "return _delegateCreator; } @Override public AnnotatedWithParams getArrayDelegateCreator() { return _arrayDelegateCreator; } @Override public AnnotatedWithParams getDefaultCreator() { return _defaultCreator; }"
      },
      {
        "txt": "@Override public AnnotatedWithParams getWithArgsCreator() { return _withArgsCreator; } @Override public AnnotatedParameter getIncompleteParameter() { return _incompleteParameter; } @Deprecated // since 2.7 protected JsonMappingException wrapException(Throwable t)"
      },
      {
        "txt": "for (Throwable curr = t; curr != null; curr = curr.getCause()) { if (curr instanceof JsonMappingException) { return (JsonMappingException) curr; } } return new JsonMappingException(null, <extra_id_0> } protected JsonMappingException unwrapAndWrapException(DeserializationContext ctxt, Throwable t) { for (Throwable curr = t; curr != null; curr = curr.getCause()) { if (curr instanceof JsonMappingException) { return (JsonMappingException) curr;"
      },
      {
        "txt": "if (curr instanceof JsonMappingException) { return (JsonMappingException) curr; } } return ctxt.instantiationException(getValueClass(), t); } protected JsonMappingException wrapAsJsonMappingException(DeserializationContext ctxt, Throwable t) { if (t instanceof JsonMappingException) {"
      },
      {
        "txt": "return (JsonMappingException) t; } return ctxt.instantiationException(getValueClass(), t); } protected JsonMappingException rewrapCtorProblem(DeserializationContext ctxt, Throwable t) { if ((t instanceof ExceptionInInitializerError) // from static initialization block || (t instanceof InvocationTargetException) // from constructor/method ) {"
      },
      {
        "txt": "Throwable cause = t.getCause(); if (cause != null) { t = cause; } } return wrapAsJsonMappingException(ctxt, t); } private Object _createUsingDelegate(AnnotatedWithParams delegateCreator, SettableBeanProperty[] delegateArguments, DeserializationContext ctxt,"
      },
      {
        "txt": "Object delegate) throws IOException { if (delegateCreator == null) { // sanity-check; caller should check throw new IllegalStateException(\"No delegate constructor for \"+getValueTypeDesc()); } try { if (delegateArguments == null) { return delegateCreator.call1(delegate); }"
      },
      {
        "txt": "final int len = delegateArguments.length; Object[] args = new Object[len]; for (int i = 0; i < len; ++i) { SettableBeanProperty prop = delegateArguments[i]; if (prop == null) { // delegate args[i] = delegate; } else { // nope, injectable: args[i] = ctxt.findInjectableValue(prop.getInjectableValueId(), prop, null); } }"
      },
      {
        "txt": "return delegateCreator.call(args); } catch (Throwable t) { throw rewrapCtorProblem(ctxt, t); } }"
      }
    ]
  },
  {
    "id": 1771,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java",
    "start-bug-line": 364,
    "end-bug-line": 364,
    "bug": "+t.getMessage(), t);",
    "fix": "+ClassUtil.exceptionMessage(t), t);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.introspect; import java.lang.reflect.Constructor;"
      },
      {
        "txt": "import java.lang.reflect.Method; import java.util.*; import com.fasterxml.jackson.annotation.JsonCreator; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.cfg.MapperConfig; import com.fasterxml.jackson.databind.type.TypeBindings;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public class BasicBeanDescription extends BeanDescription { private final static Class<?>[] NO_VIEWS = new Class<?>[0]; final protected POJOPropertiesCollector _propCollector; final protected MapperConfig<?> _config; final protected AnnotationIntrospector _annotationIntrospector; final protected AnnotatedClass _classInfo;"
      },
      {
        "txt": "protected Class<?>[] _defaultViews; protected boolean _defaultViewsResolved; protected List<BeanPropertyDefinition> _properties; protected ObjectIdInfo _objectIdInfo; protected BasicBeanDescription(POJOPropertiesCollector coll, JavaType type, AnnotatedClass classDef) { super(type); _propCollector = coll; _config = coll.getConfig();"
      },
      {
        "txt": "if (_config == null) { _annotationIntrospector = null; } else { _annotationIntrospector = _config.getAnnotationIntrospector(); } _classInfo = classDef; } protected BasicBeanDescription(MapperConfig<?> config, JavaType type, AnnotatedClass classDef, List<BeanPropertyDefinition> props) {"
      },
      {
        "txt": "super(type); _propCollector = null; _config = config; if (_config == null) { _annotationIntrospector = null; } else { _annotationIntrospector = _config.getAnnotationIntrospector(); } _classInfo = classDef; _properties = props;"
      },
      {
        "txt": "} protected BasicBeanDescription(POJOPropertiesCollector coll) { this(coll, coll.getType(), coll.getClassDef()); _objectIdInfo = coll.getObjectIdInfo(); } public static BasicBeanDescription forDeserialization(POJOPropertiesCollector coll) { return new BasicBeanDescription(coll); } public static BasicBeanDescription forSerialization(POJOPropertiesCollector coll) {"
      },
      {
        "txt": "return new BasicBeanDescription(coll); } public static BasicBeanDescription forOtherUse(MapperConfig<?> config, JavaType type, AnnotatedClass ac) { return new BasicBeanDescription(config, type, ac, Collections.<BeanPropertyDefinition>emptyList()); } protected List<BeanPropertyDefinition> _properties() { if (_properties == null) {"
      },
      {
        "txt": "_properties = _propCollector.getProperties(); } return _properties; } public boolean removeProperty(String propName) { Iterator<BeanPropertyDefinition> it = _properties().iterator(); while (it.hasNext()) { BeanPropertyDefinition prop = it.next(); if (prop.getName().equals(propName)) {"
      },
      {
        "txt": "it.remove(); return true; } } return false; } public boolean addProperty(BeanPropertyDefinition def) { if (hasProperty(def.getFullName())) { return false;"
      },
      {
        "txt": "} _properties().add(def); return true; } public boolean hasProperty(PropertyName name) { return findProperty(name) != null; } public BeanPropertyDefinition findProperty(PropertyName name) { for (BeanPropertyDefinition prop : _properties()) {"
      },
      {
        "txt": "if (prop.hasName(name)) { return prop; } } return null; } @Override public AnnotatedClass getClassInfo() { return _classInfo; } @Override public ObjectIdInfo getObjectIdInfo() { return _objectIdInfo; }"
      },
      {
        "txt": "@Override public List<BeanPropertyDefinition> findProperties() { return _properties(); } @Override @Deprecated // since 2.9 public AnnotatedMethod findJsonValueMethod() { return (_propCollector == null) ? null : _propCollector.getJsonValueMethod(); }"
      },
      {
        "txt": "@Override // since 2.9 public AnnotatedMember findJsonValueAccessor() { return (_propCollector == null) ? null : _propCollector.getJsonValueAccessor(); } @Override public Set<String> getIgnoredPropertyNames() { Set<String> ign = (_propCollector == null) ? null : _propCollector.getIgnoredPropertyNames(); if (ign == null) {"
      },
      {
        "txt": "return Collections.emptySet(); } return ign; } @Override public boolean hasKnownClassAnnotations() { return _classInfo.hasAnnotations(); } @Override public Annotations getClassAnnotations() {"
      },
      {
        "txt": "return _classInfo.getAnnotations(); } @Override @Deprecated // since 2.7 public TypeBindings bindingsForBeanType() { return _type.getBindings(); } @Override @Deprecated // since 2.8 public JavaType resolveType(java.lang.reflect.Type jdkType) {"
      },
      {
        "txt": "if (jdkType == null) { return null; } return _config.getTypeFactory().constructType(jdkType, _type.getBindings()); } @Override public AnnotatedConstructor findDefaultConstructor() { return _classInfo.getDefaultConstructor(); } @Override"
      },
      {
        "txt": "public AnnotatedMember findAnySetterAccessor() throws IllegalArgumentException { if (_propCollector != null) { AnnotatedMethod anyMethod = _propCollector.getAnySetterMethod(); if (anyMethod != null) { Class<?> type = anyMethod.getRawParameterType(0); if ((type != String.class) && (type != Object.class)) { throw new IllegalArgumentException(String.format( \"Invalid 'any-setter' annotation on method '%s()': first argument not of type String or Object, but %s\", anyMethod.getName(), type.getName()));"
      },
      {
        "txt": "} return anyMethod; } AnnotatedMember anyField = _propCollector.getAnySetterField(); if (anyField != null) { Class<?> type = anyField.getRawType(); if (!Map.class.isAssignableFrom(type)) { throw new IllegalArgumentException(String.format( \"Invalid 'any-setter' annotation on field '%s': type is not instance of java.util.Map\", anyField.getName()));"
      },
      {
        "txt": "} return anyField; } } return null; } @Override public Map<Object, AnnotatedMember> findInjectables() { if (_propCollector != null) { return _propCollector.getInjectables();"
      },
      {
        "txt": "} return Collections.emptyMap(); } @Override public List<AnnotatedConstructor> getConstructors() { return _classInfo.getConstructors(); } @Override public Object instantiateBean(boolean fixAccess) { AnnotatedConstructor ac = _classInfo.getDefaultConstructor();"
      },
      {
        "txt": "if (ac == null) { return null; } if (fixAccess) { ac.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } try { return ac.getAnnotated().newInstance(); } catch (Exception e) { Throwable t = e;"
      },
      {
        "txt": "t = t.getCause(); } ClassUtil.throwIfError(t); ClassUtil.throwIfRTE(t); throw new IllegalArgumentException(\"Failed to instantiate bean of type \" +_classInfo.getAnnotated().getName()+\": (\"+t.getClass().getName()+\") \" <extra_id_0> } } @Override public AnnotatedMethod findMethod(String name, Class<?>[] paramTypes) { return _classInfo.findMethod(name, paramTypes); }"
      },
      {
        "txt": "return _classInfo.findMethod(name, paramTypes); } @Override public JsonFormat.Value findExpectedFormat(JsonFormat.Value defValue) { if (_annotationIntrospector != null) { JsonFormat.Value v = _annotationIntrospector.findFormat(_classInfo); if (v != null) { if (defValue == null) { defValue = v;"
      },
      {
        "txt": "} else { defValue = defValue.withOverrides(v); } } } JsonFormat.Value v = _config.getDefaultPropertyFormat(_classInfo.getRawType()); if (v != null) { if (defValue == null) { defValue = v; } else {"
      },
      {
        "txt": "defValue = defValue.withOverrides(v); } } return defValue; } @Override // since 2.9 public Class<?>[] findDefaultViews() { if (!_defaultViewsResolved) { _defaultViewsResolved = true;"
      },
      {
        "txt": "Class<?>[] def = (_annotationIntrospector == null) ? null : _annotationIntrospector.findViews(_classInfo); if (def == null) { if (!_config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) { def = NO_VIEWS; } } _defaultViews = def; } return _defaultViews;"
      },
      {
        "txt": "} @Override public Converter<Object,Object> findSerializationConverter() { if (_annotationIntrospector == null) { return null; } return _createConverter(_annotationIntrospector.findSerializationConverter(_classInfo)); } @Override"
      },
      {
        "txt": "public JsonInclude.Value findPropertyInclusion(JsonInclude.Value defValue) { if (_annotationIntrospector != null) { JsonInclude.Value incl = _annotationIntrospector.findPropertyInclusion(_classInfo); if (incl != null) { return (defValue == null) ? incl : defValue.withOverrides(incl); } } return defValue; } @Override"
      },
      {
        "txt": "public AnnotatedMember findAnyGetter() throws IllegalArgumentException { AnnotatedMember anyGetter = (_propCollector == null) ? null : _propCollector.getAnyGetter(); if (anyGetter != null) { Class<?> type = anyGetter.getRawType(); if (!Map.class.isAssignableFrom(type)) { throw new IllegalArgumentException(\"Invalid 'any-getter' annotation on method \"+anyGetter.getName()+\"(): return type is not instance of java.util.Map\"); } }"
      },
      {
        "txt": "return anyGetter; } @Override public List<BeanPropertyDefinition> findBackReferences() { List<BeanPropertyDefinition> result = null; HashSet<String> names = null; for (BeanPropertyDefinition property : _properties()) { AnnotationIntrospector.ReferenceProperty refDef = property.findReferenceType(); if ((refDef == null) || !refDef.isBackReference()) {"
      },
      {
        "txt": "continue; } final String refName = refDef.getName(); if (result == null) { result = new ArrayList<BeanPropertyDefinition>(); names = new HashSet<>(); names.add(refName); } else { if (!names.add(refName)) { throw new IllegalArgumentException(\"Multiple back-reference properties with name '\"+refName+\"'\");"
      },
      {
        "txt": "} } result.add(property); } return result; } @Deprecated // since 2.9 @Override public Map<String,AnnotatedMember> findBackReferenceProperties() {"
      },
      {
        "txt": "List<BeanPropertyDefinition> props = findBackReferences(); if (props == null) { return null; } Map<String,AnnotatedMember> result = new HashMap<>(); for (BeanPropertyDefinition prop : props) { result.put(prop.getName(), prop.getMutator()); } return result; }"
      },
      {
        "txt": "@Override public List<AnnotatedMethod> getFactoryMethods() { List<AnnotatedMethod> candidates = _classInfo.getFactoryMethods(); if (candidates.isEmpty()) { return candidates; } List<AnnotatedMethod> result = null; for (AnnotatedMethod am : candidates) { if (isFactoryMethod(am)) {"
      },
      {
        "txt": "if (result == null) { result = new ArrayList<AnnotatedMethod>(); } result.add(am); } } if (result == null) { return Collections.emptyList(); } return result;"
      },
      {
        "txt": "} @Override public Constructor<?> findSingleArgConstructor(Class<?>... argTypes) { for (AnnotatedConstructor ac : _classInfo.getConstructors()) { if (ac.getParameterCount() == 1) { Class<?> actArg = ac.getRawParameterType(0); for (Class<?> expArg : argTypes) { if (expArg == actArg) { return ac.getAnnotated();"
      },
      {
        "txt": "} } } } return null; } @Override public Method findFactoryMethod(Class<?>... expArgTypes) { for (AnnotatedMethod am : _classInfo.getFactoryMethods()) {"
      },
      {
        "txt": "if (isFactoryMethod(am) && am.getParameterCount() == 1) { Class<?> actualArgType = am.getRawParameterType(0); for (Class<?> expArgType : expArgTypes) { if (actualArgType.isAssignableFrom(expArgType)) { return am.getAnnotated(); } } } } return null;"
      },
      {
        "txt": "} protected boolean isFactoryMethod(AnnotatedMethod am) { Class<?> rt = am.getRawReturnType(); if (!getBeanClass().isAssignableFrom(rt)) { return false; } JsonCreator.Mode mode = _annotationIntrospector.findCreatorAnnotation(_config, am); if ((mode != null) && (mode != JsonCreator.Mode.DISABLED)) { return true;"
      },
      {
        "txt": "} final String name = am.getName(); if (\"valueOf\".equals(name)) { if (am.getParameterCount() == 1) { return true; } } if (\"fromString\".equals(name)) { if (am.getParameterCount() == 1) { Class<?> cls = am.getRawParameterType(0);"
      },
      {
        "txt": "if (cls == String.class || CharSequence.class.isAssignableFrom(cls)) { return true; } } } return false; } @Deprecated // since 2.8, not used at least since 2.7 protected PropertyName _findCreatorPropertyName(AnnotatedParameter param) {"
      },
      {
        "txt": "PropertyName name = _annotationIntrospector.findNameForDeserialization(param); if (name == null || name.isEmpty()) { String str = _annotationIntrospector.findImplicitPropertyName(param); if (str != null && !str.isEmpty()) { name = PropertyName.construct(str); } } return name; } @Override"
      },
      {
        "txt": "public Class<?> findPOJOBuilder() { return (_annotationIntrospector == null) ? null : _annotationIntrospector.findPOJOBuilder(_classInfo); } @Override public JsonPOJOBuilder.Value findPOJOBuilderConfig() { return (_annotationIntrospector == null) ? null : _annotationIntrospector.findPOJOBuilderConfig(_classInfo); }"
      },
      {
        "txt": "@Override public Converter<Object,Object> findDeserializationConverter() { if (_annotationIntrospector == null) { return null; } return _createConverter(_annotationIntrospector.findDeserializationConverter(_classInfo)); } @Override public String findClassDescription() {"
      },
      {
        "txt": "return (_annotationIntrospector == null) ? null : _annotationIntrospector.findClassDescription(_classInfo); } @Deprecated public LinkedHashMap<String,AnnotatedField> _findPropertyFields( Collection<String> ignoredProperties, boolean forSerialization) { LinkedHashMap<String,AnnotatedField> results = new LinkedHashMap<String,AnnotatedField>(); for (BeanPropertyDefinition property : _properties()) { AnnotatedField f = property.getField();"
      },
      {
        "txt": "if (f != null) { String name = property.getName(); if (ignoredProperties != null) { if (ignoredProperties.contains(name)) { continue; } } results.put(name, f); } }"
      },
      {
        "txt": "return results; } @SuppressWarnings(\"unchecked\") protected Converter<Object,Object> _createConverter(Object converterDef) { if (converterDef == null) { return null; } if (converterDef instanceof Converter<?,?>) { return (Converter<Object,Object>) converterDef;"
      },
      {
        "txt": "} if (!(converterDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned Converter definition of type \" +converterDef.getClass().getName()+\"; expected type Converter or Class<Converter> instead\"); } Class<?> converterClass = (Class<?>)converterDef; if (converterClass == Converter.None.class || ClassUtil.isBogusClass(converterClass)) { return null; } if (!Converter.class.isAssignableFrom(converterClass)) {"
      },
      {
        "txt": "throw new IllegalStateException(\"AnnotationIntrospector returned Class \" +converterClass.getName()+\"; expected Class<Converter>\"); } HandlerInstantiator hi = _config.getHandlerInstantiator(); Converter<?,?> conv = (hi == null) ? null : hi.converterInstance(_config, _classInfo, converterClass); if (conv == null) { conv = (Converter<?,?>) ClassUtil.createInstance(converterClass, _config.canOverrideAccessModifiers()); } return (Converter<Object,Object>) conv;"
      }
    ]
  },
  {
    "id": 1772,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "start-bug-line": 171,
    "end-bug-line": 171,
    "bug": "filter.getClass().getName(), t.getClass().getName(), t.getMessage());",
    "fix": "filter.getClass().getName(), t.getClass().getName(), ClassUtil.exceptionMessage(t));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.io.IOException; import java.util.*; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.impl.WritableObjectId; import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class DefaultSerializerProvider extends SerializerProvider implements java.io.Serializable // since 2.1; only because ObjectWriter needs it {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; protected transient Map<Object, WritableObjectId> _seenObjectIds; protected transient ArrayList<ObjectIdGenerator<?>> _objectIdGenerators; protected transient JsonGenerator _generator; protected DefaultSerializerProvider() { super(); } protected DefaultSerializerProvider(SerializerProvider src, SerializationConfig config,SerializerFactory f) { super(src, config, f); } protected DefaultSerializerProvider(DefaultSerializerProvider src) {"
      },
      {
        "txt": "super(src); } public abstract DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf); public DefaultSerializerProvider copy() { throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\"); } @Override public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException"
      },
      {
        "txt": "{ if (serDef == null) { return null; } JsonSerializer<?> ser; if (serDef instanceof JsonSerializer) { ser = (JsonSerializer<?>) serDef; } else { if (!(serDef instanceof Class)) { reportBadDefinition(annotated.getType(),"
      },
      {
        "txt": "\"AnnotationIntrospector returned serializer definition of type \" +serDef.getClass().getName()+\"; expected type JsonSerializer or Class<JsonSerializer> instead\"); } Class<?> serClass = (Class<?>)serDef; if (serClass == JsonSerializer.None.class || ClassUtil.isBogusClass(serClass)) { return null; } if (!JsonSerializer.class.isAssignableFrom(serClass)) { reportBadDefinition(annotated.getType(), \"AnnotationIntrospector returned Class \""
      },
      {
        "txt": "+serClass.getName()+\"; expected Class<JsonSerializer>\"); } HandlerInstantiator hi = _config.getHandlerInstantiator(); ser = (hi == null) ? null : hi.serializerInstance(_config, annotated, serClass); if (ser == null) { ser = (JsonSerializer<?>) ClassUtil.createInstance(serClass, _config.canOverrideAccessModifiers()); } } return (JsonSerializer<Object>) _handleResolvable(ser);"
      },
      {
        "txt": "} @Override public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) { if (filterClass == null) { return null; } HandlerInstantiator hi = _config.getHandlerInstantiator(); Object filter = (hi == null) ? null : hi.includeFilterInstance(_config, forProperty, filterClass);"
      },
      {
        "txt": "if (filter == null) { filter = ClassUtil.createInstance(filterClass, _config.canOverrideAccessModifiers()); } return filter; } @Override public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException { if (filter == null) {"
      },
      {
        "txt": "} try { return filter.equals(null); } catch (Throwable t) { String msg = String.format( \"Problem determining whether filter of type '%s' should filter out `null` values: (%s) %s\", <extra_id_0> reportBadDefinition(filter.getClass(), msg, t); return false; // never gets here } } @Override public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType)"
      },
      {
        "txt": "@Override public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) { if (_seenObjectIds == null) { _seenObjectIds = _createObjectIdMap(); } else { WritableObjectId oid = _seenObjectIds.get(forPojo); if (oid != null) { return oid; }"
      },
      {
        "txt": "} ObjectIdGenerator<?> generator = null; if (_objectIdGenerators == null) { _objectIdGenerators = new ArrayList<ObjectIdGenerator<?>>(8); } else { for (int i = 0, len = _objectIdGenerators.size(); i < len; ++i) { ObjectIdGenerator<?> gen = _objectIdGenerators.get(i); if (gen.canUseFor(generatorType)) { generator = gen; break;"
      },
      {
        "txt": "} } } if (generator == null) { generator = generatorType.newForSerialization(this); _objectIdGenerators.add(generator); } WritableObjectId oid = new WritableObjectId(generator); _seenObjectIds.put(forPojo, oid); return oid;"
      },
      {
        "txt": "} protected Map<Object,WritableObjectId> _createObjectIdMap() { if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID)) { return new HashMap<Object,WritableObjectId>(); } return new IdentityHashMap<Object,WritableObjectId>(); } public boolean hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause) {"
      },
      {
        "txt": "if (cls == Object.class) { if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { return true; } } try { JsonSerializer<?> ser = _findExplicitUntypedSerializer(cls); return (ser != null); } catch (JsonMappingException e) { if (cause != null) {"
      },
      {
        "txt": "cause.set(e); } } catch (RuntimeException e) { if (cause == null) { // earlier behavior throw e; } cause.set(e); } return false; }"
      },
      {
        "txt": "@Override public JsonGenerator getGenerator() { return _generator; } public void serializeValue(JsonGenerator gen, Object value) throws IOException { _generator = gen; if (value == null) { _serializeNull(gen); return;"
      },
      {
        "txt": "} final Class<?> cls = value.getClass(); final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null); PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { _serialize(gen, value, ser, _config.findRootName(cls)); return; } } else if (!rootName.isEmpty()) {"
      },
      {
        "txt": "_serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException { _generator = gen; if (value == null) { _serializeNull(gen);"
      },
      {
        "txt": "return; } if (!rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null); PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { _serialize(gen, value, ser, _config.findRootName(rootType));"
      },
      {
        "txt": "return; } } else if (!rootName.isEmpty()) { _serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException"
      },
      {
        "txt": "{ _generator = gen; if (value == null) { _serializeNull(gen); return; } if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } if (ser == null) {"
      },
      {
        "txt": "ser = findTypedValueSerializer(rootType, true, null); } PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { rootName = (rootType == null) ? _config.findRootName(value.getClass()) : _config.findRootName(rootType); _serialize(gen, value, ser, rootName); return;"
      },
      {
        "txt": "} } else if (!rootName.isEmpty()) { _serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer) throws IOException"
      },
      {
        "txt": "{ _generator = gen; if (value == null) { _serializeNull(gen); return; } if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } if (valueSer == null) {"
      },
      {
        "txt": "if ((rootType != null) && rootType.isContainerType()) { valueSer = findValueSerializer(rootType, null); } else { valueSer = findValueSerializer(value.getClass(), null); } } final boolean wrap; PropertyName rootName = _config.getFullRootName(); if (rootName == null) { wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);"
      },
      {
        "txt": "if (wrap) { gen.writeStartObject(); PropertyName pname = _config.findRootName(value.getClass()); gen.writeFieldName(pname.simpleAsEncoded(_config)); } } else if (rootName.isEmpty()) { wrap = false; } else { wrap = true; gen.writeStartObject();"
      },
      {
        "txt": "gen.writeFieldName(rootName.getSimpleName()); } try { valueSer.serializeWithType(value, gen, this, typeSer); if (wrap) { gen.writeEndObject(); } } catch (Exception e) { throw _wrapAsIOE(gen, e); }"
      },
      {
        "txt": "} private final void _serialize(JsonGenerator gen, Object value, JsonSerializer<Object> ser, PropertyName rootName) throws IOException { try { gen.writeStartObject(); gen.writeFieldName(rootName.simpleAsEncoded(_config)); ser.serialize(value, gen, this); gen.writeEndObject();"
      },
      {
        "txt": "} catch (Exception e) { throw _wrapAsIOE(gen, e); } } private final void _serialize(JsonGenerator gen, Object value, JsonSerializer<Object> ser) throws IOException { try { ser.serialize(value, gen, this);"
      },
      {
        "txt": "} catch (Exception e) { throw _wrapAsIOE(gen, e); } } protected void _serializeNull(JsonGenerator gen) throws IOException { JsonSerializer<Object> ser = getDefaultNullValueSerializer(); try { ser.serialize(null, gen, this); } catch (Exception e) {"
      },
      {
        "txt": "throw _wrapAsIOE(gen, e); } } private IOException _wrapAsIOE(JsonGenerator g, Exception e) { if (e instanceof IOException) { return (IOException) e; } String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\";"
      },
      {
        "txt": "} return new JsonMappingException(g, msg, e); } public int cachedSerializersCount() { return _serializerCache.size(); } public void flushCachedSerializers() { _serializerCache.flush(); } public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor)"
      },
      {
        "txt": "throws JsonMappingException { if (javaType == null) { throw new IllegalArgumentException(\"A class must be provided\"); } visitor.setProvider(this); findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType); } @Deprecated // since 2.6 public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> type)"
      },
      {
        "txt": "throws JsonMappingException { JsonSerializer<Object> ser = findValueSerializer(type, null); JsonNode schemaNode = (ser instanceof SchemaAware) ? ((SchemaAware) ser).getSchema(this, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); if (!(schemaNode instanceof ObjectNode)) { throw new IllegalArgumentException(\"Class \" + type.getName() +\" would not be serialized as a JSON object and therefore has no schema\"); } return new com.fasterxml.jackson.databind.jsonschema.JsonSchema((ObjectNode) schemaNode);"
      },
      {
        "txt": "} public final static class Impl extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; public Impl() { super(); } public Impl(Impl src) { super(src); } protected Impl(SerializerProvider src, SerializationConfig config, SerializerFactory f) { super(src, config, f); } @Override"
      },
      {
        "txt": "public DefaultSerializerProvider copy() { if (getClass() != Impl.class) { return super.copy(); } return new Impl(this); } @Override public Impl createInstance(SerializationConfig config, SerializerFactory jsf) { return new Impl(this, config, jsf);"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 1773,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/DefaultSerializerProvider.java",
    "start-bug-line": 505,
    "end-bug-line": 505,
    "bug": "String msg = e.getMessage();",
    "fix": "String msg = ClassUtil.exceptionMessage(e);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.io.IOException;"
      },
      {
        "txt": "import java.util.*; import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsonschema.SchemaAware;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.impl.WritableObjectId; import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class DefaultSerializerProvider extends SerializerProvider implements java.io.Serializable // since 2.1; only because ObjectWriter needs it { private static final long serialVersionUID = 1L; protected transient Map<Object, WritableObjectId> _seenObjectIds;"
      },
      {
        "txt": "protected transient ArrayList<ObjectIdGenerator<?>> _objectIdGenerators; protected transient JsonGenerator _generator; protected DefaultSerializerProvider() { super(); } protected DefaultSerializerProvider(SerializerProvider src, SerializationConfig config,SerializerFactory f) { super(src, config, f); } protected DefaultSerializerProvider(DefaultSerializerProvider src) { super(src); }"
      },
      {
        "txt": "public abstract DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf); public DefaultSerializerProvider copy() { throw new IllegalStateException(\"DefaultSerializerProvider sub-class not overriding copy()\"); } @Override public JsonSerializer<Object> serializerInstance(Annotated annotated, Object serDef) throws JsonMappingException { if (serDef == null) {"
      },
      {
        "txt": "return null; } JsonSerializer<?> ser; if (serDef instanceof JsonSerializer) { ser = (JsonSerializer<?>) serDef; } else { if (!(serDef instanceof Class)) { reportBadDefinition(annotated.getType(), \"AnnotationIntrospector returned serializer definition of type \" +serDef.getClass().getName()+\"; expected type JsonSerializer or Class<JsonSerializer> instead\");"
      },
      {
        "txt": "} Class<?> serClass = (Class<?>)serDef; if (serClass == JsonSerializer.None.class || ClassUtil.isBogusClass(serClass)) { return null; } if (!JsonSerializer.class.isAssignableFrom(serClass)) { reportBadDefinition(annotated.getType(), \"AnnotationIntrospector returned Class \" +serClass.getName()+\"; expected Class<JsonSerializer>\"); }"
      },
      {
        "txt": "HandlerInstantiator hi = _config.getHandlerInstantiator(); ser = (hi == null) ? null : hi.serializerInstance(_config, annotated, serClass); if (ser == null) { ser = (JsonSerializer<?>) ClassUtil.createInstance(serClass, _config.canOverrideAccessModifiers()); } } return (JsonSerializer<Object>) _handleResolvable(ser); } @Override"
      },
      {
        "txt": "public Object includeFilterInstance(BeanPropertyDefinition forProperty, Class<?> filterClass) { if (filterClass == null) { return null; } HandlerInstantiator hi = _config.getHandlerInstantiator(); Object filter = (hi == null) ? null : hi.includeFilterInstance(_config, forProperty, filterClass); if (filter == null) { filter = ClassUtil.createInstance(filterClass,"
      },
      {
        "txt": "_config.canOverrideAccessModifiers()); } return filter; } @Override public boolean includeFilterSuppressNulls(Object filter) throws JsonMappingException { if (filter == null) { return true; }"
      },
      {
        "txt": "try { return filter.equals(null); } catch (Throwable t) { String msg = String.format( \"Problem determining whether filter of type '%s' should filter out `null` values: (%s) %s\", filter.getClass().getName(), t.getClass().getName(), t.getMessage()); reportBadDefinition(filter.getClass(), msg, t); return false; // never gets here } }"
      },
      {
        "txt": "@Override public WritableObjectId findObjectId(Object forPojo, ObjectIdGenerator<?> generatorType) { if (_seenObjectIds == null) { _seenObjectIds = _createObjectIdMap(); } else { WritableObjectId oid = _seenObjectIds.get(forPojo); if (oid != null) { return oid; }"
      },
      {
        "txt": "} ObjectIdGenerator<?> generator = null; if (_objectIdGenerators == null) { _objectIdGenerators = new ArrayList<ObjectIdGenerator<?>>(8); } else { for (int i = 0, len = _objectIdGenerators.size(); i < len; ++i) { ObjectIdGenerator<?> gen = _objectIdGenerators.get(i); if (gen.canUseFor(generatorType)) { generator = gen; break;"
      },
      {
        "txt": "} } } if (generator == null) { generator = generatorType.newForSerialization(this); _objectIdGenerators.add(generator); } WritableObjectId oid = new WritableObjectId(generator); _seenObjectIds.put(forPojo, oid); return oid;"
      },
      {
        "txt": "} protected Map<Object,WritableObjectId> _createObjectIdMap() { if (isEnabled(SerializationFeature.USE_EQUALITY_FOR_OBJECT_ID)) { return new HashMap<Object,WritableObjectId>(); } return new IdentityHashMap<Object,WritableObjectId>(); } public boolean hasSerializerFor(Class<?> cls, AtomicReference<Throwable> cause) {"
      },
      {
        "txt": "if (cls == Object.class) { if (!_config.isEnabled(SerializationFeature.FAIL_ON_EMPTY_BEANS)) { return true; } } try { JsonSerializer<?> ser = _findExplicitUntypedSerializer(cls); return (ser != null); } catch (JsonMappingException e) { if (cause != null) {"
      },
      {
        "txt": "cause.set(e); } } catch (RuntimeException e) { if (cause == null) { // earlier behavior throw e; } cause.set(e); } return false; }"
      },
      {
        "txt": "@Override public JsonGenerator getGenerator() { return _generator; } public void serializeValue(JsonGenerator gen, Object value) throws IOException { _generator = gen; if (value == null) { _serializeNull(gen); return;"
      },
      {
        "txt": "} final Class<?> cls = value.getClass(); final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null); PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { _serialize(gen, value, ser, _config.findRootName(cls)); return; } } else if (!rootName.isEmpty()) {"
      },
      {
        "txt": "_serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException { _generator = gen; if (value == null) { _serializeNull(gen);"
      },
      {
        "txt": "return; } if (!rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null); PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { _serialize(gen, value, ser, _config.findRootName(rootType));"
      },
      {
        "txt": "return; } } else if (!rootName.isEmpty()) { _serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException"
      },
      {
        "txt": "{ _generator = gen; if (value == null) { _serializeNull(gen); return; } if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } if (ser == null) {"
      },
      {
        "txt": "ser = findTypedValueSerializer(rootType, true, null); } PropertyName rootName = _config.getFullRootName(); if (rootName == null) { // not explicitly specified if (_config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE)) { rootName = (rootType == null) ? _config.findRootName(value.getClass()) : _config.findRootName(rootType); _serialize(gen, value, ser, rootName); return;"
      },
      {
        "txt": "} } else if (!rootName.isEmpty()) { _serialize(gen, value, ser, rootName); return; } _serialize(gen, value, ser); } public void serializePolymorphic(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> valueSer, TypeSerializer typeSer) throws IOException"
      },
      {
        "txt": "{ _generator = gen; if (value == null) { _serializeNull(gen); return; } if ((rootType != null) && !rootType.getRawClass().isAssignableFrom(value.getClass())) { _reportIncompatibleRootType(value, rootType); } if (valueSer == null) {"
      },
      {
        "txt": "if ((rootType != null) && rootType.isContainerType()) { valueSer = findValueSerializer(rootType, null); } else { valueSer = findValueSerializer(value.getClass(), null); } } final boolean wrap; PropertyName rootName = _config.getFullRootName(); if (rootName == null) { wrap = _config.isEnabled(SerializationFeature.WRAP_ROOT_VALUE);"
      },
      {
        "txt": "if (wrap) { gen.writeStartObject(); PropertyName pname = _config.findRootName(value.getClass()); gen.writeFieldName(pname.simpleAsEncoded(_config)); } } else if (rootName.isEmpty()) { wrap = false; } else { wrap = true; gen.writeStartObject();"
      },
      {
        "txt": "gen.writeFieldName(rootName.getSimpleName()); } try { valueSer.serializeWithType(value, gen, this, typeSer); if (wrap) { gen.writeEndObject(); } } catch (Exception e) { throw _wrapAsIOE(gen, e); }"
      },
      {
        "txt": "} private final void _serialize(JsonGenerator gen, Object value, JsonSerializer<Object> ser, PropertyName rootName) throws IOException { try { gen.writeStartObject(); gen.writeFieldName(rootName.simpleAsEncoded(_config)); ser.serialize(value, gen, this); gen.writeEndObject();"
      },
      {
        "txt": "} catch (Exception e) { throw _wrapAsIOE(gen, e); } } private final void _serialize(JsonGenerator gen, Object value, JsonSerializer<Object> ser) throws IOException { try { ser.serialize(value, gen, this);"
      },
      {
        "txt": "} catch (Exception e) { throw _wrapAsIOE(gen, e); } } protected void _serializeNull(JsonGenerator gen) throws IOException { JsonSerializer<Object> ser = getDefaultNullValueSerializer(); try { ser.serialize(null, gen, this); } catch (Exception e) {"
      },
      {
        "txt": "} } private IOException _wrapAsIOE(JsonGenerator g, Exception e) { if (e instanceof IOException) { return (IOException) e; } <extra_id_0> if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } return new JsonMappingException(g, msg, e); } public int cachedSerializersCount() {"
      },
      {
        "txt": "} public int cachedSerializersCount() { return _serializerCache.size(); } public void flushCachedSerializers() { _serializerCache.flush(); } public void acceptJsonFormatVisitor(JavaType javaType, JsonFormatVisitorWrapper visitor) throws JsonMappingException {"
      },
      {
        "txt": "if (javaType == null) { throw new IllegalArgumentException(\"A class must be provided\"); } visitor.setProvider(this); findValueSerializer(javaType, null).acceptJsonFormatVisitor(visitor, javaType); } @Deprecated // since 2.6 public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> type) throws JsonMappingException {"
      },
      {
        "txt": "JsonSerializer<Object> ser = findValueSerializer(type, null); JsonNode schemaNode = (ser instanceof SchemaAware) ? ((SchemaAware) ser).getSchema(this, null) : com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); if (!(schemaNode instanceof ObjectNode)) { throw new IllegalArgumentException(\"Class \" + type.getName() +\" would not be serialized as a JSON object and therefore has no schema\"); } return new com.fasterxml.jackson.databind.jsonschema.JsonSchema((ObjectNode) schemaNode); } public final static class Impl extends DefaultSerializerProvider {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; public Impl() { super(); } public Impl(Impl src) { super(src); } protected Impl(SerializerProvider src, SerializationConfig config, SerializerFactory f) { super(src, config, f); } @Override public DefaultSerializerProvider copy() {"
      },
      {
        "txt": "if (getClass() != Impl.class) { return super.copy(); } return new Impl(this); } @Override public Impl createInstance(SerializationConfig config, SerializerFactory jsf) { return new Impl(this, config, jsf); } }"
      }
    ]
  },
  {
    "id": 1774,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "start-bug-line": 103,
    "end-bug-line": 103,
    "bug": "return prov.reportBadDefinition(declaredType, e.getMessage());",
    "fix": "return prov.reportBadDefinition(declaredType, ClassUtil.exceptionMessage(e));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeSerializer;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.*; public class PropertyBuilder { private final static Object NO_DEFAULT_MARKER = Boolean.FALSE; final protected SerializationConfig _config; final protected BeanDescription _beanDesc; final protected AnnotationIntrospector _annotationIntrospector; protected Object _defaultBean; final protected JsonInclude.Value _defaultInclusion; final protected boolean _useRealPropertyDefaults;"
      },
      {
        "txt": "public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc) { _config = config; _beanDesc = beanDesc; JsonInclude.Value inclPerType = JsonInclude.Value.merge( beanDesc.findPropertyInclusion(JsonInclude.Value.empty()), config.getDefaultPropertyInclusion(beanDesc.getBeanClass(), JsonInclude.Value.empty())); _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(), inclPerType);"
      },
      {
        "txt": "_useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT; _annotationIntrospector = _config.getAnnotationIntrospector(); } public Annotations getClassAnnotations() { return _beanDesc.getClassAnnotations(); } protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping)"
      },
      {
        "txt": "{ JavaType serializationType; try { serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType); } catch (JsonMappingException e) { if (propDef == null) { <extra_id_0> } return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage()); } if (contentTypeSer != null) { if (serializationType == null) { serializationType = declaredType;"
      },
      {
        "txt": "if (serializationType == null) { serializationType = declaredType; } JavaType ct = serializationType.getContentType(); if (ct == null) { prov.reportBadPropertyDefinition(_beanDesc, propDef, \"serialization type \"+serializationType+\" has no content\"); } serializationType = serializationType.withContentTypeHandler(contentTypeSer); ct = serializationType.getContentType();"
      },
      {
        "txt": "} Object valueToSuppress = null; boolean suppressNulls = false; JavaType actualType = (serializationType == null) ? declaredType : serializationType; AnnotatedMember accessor = propDef.getAccessor(); if (accessor == null) { return prov.reportBadPropertyDefinition(_beanDesc, propDef, \"could not determine property type\"); } Class<?> rawPropertyType = accessor.getRawType();"
      },
      {
        "txt": "JsonInclude.Value inclV = _config.getDefaultInclusion(actualType.getRawClass(), rawPropertyType, _defaultInclusion); inclV = inclV.withOverrides(propDef.findInclusion()); JsonInclude.Include inclusion = inclV.getValueInclusion(); if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but... inclusion = JsonInclude.Include.ALWAYS; } switch (inclusion) { case NON_DEFAULT: Object defaultBean;"
      },
      {
        "txt": "if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) { if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) { am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } try { valueToSuppress = am.getValue(defaultBean); } catch (Exception e) { _throwWrapped(e, propDef.getName(), defaultBean); } } else {"
      },
      {
        "txt": "valueToSuppress = BeanUtil.getDefaultValue(actualType); suppressNulls = true; } if (valueToSuppress == null) { suppressNulls = true; } else { if (valueToSuppress.getClass().isArray()) { valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress); } }"
      },
      {
        "txt": "break; case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals suppressNulls = true; if (actualType.isReferenceType()) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; case NON_EMPTY: suppressNulls = true; valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY;"
      },
      {
        "txt": "break; case CUSTOM: // new with 2.9 valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter()); if (valueToSuppress == null) { // is this legal? suppressNulls = true; } else { suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress); } break; case NON_NULL:"
      },
      {
        "txt": "suppressNulls = true; case ALWAYS: // default default: if (actualType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; } Class<?>[] views = propDef.findViews();"
      },
      {
        "txt": "if (views == null) { views = _beanDesc.findDefaultViews(); } BeanPropertyWriter bpw = new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress, views); Object serDef = _annotationIntrospector.findNullSerializer(am); if (serDef != null) { bpw.assignNullSerializer(prov.serializerInstance(am, serDef)); }"
      },
      {
        "txt": "NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am); if (unwrapper != null) { bpw = bpw.unwrappingWriter(unwrapper); } return bpw; } protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType) throws JsonMappingException { JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType);"
      },
      {
        "txt": "if (secondary != declaredType) { Class<?> serClass = secondary.getRawClass(); Class<?> rawDeclared = declaredType.getRawClass(); if (serClass.isAssignableFrom(rawDeclared)) { ; // fine as is } else { if (!rawDeclared.isAssignableFrom(serClass)) { throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName()); } }"
      },
      {
        "txt": "useStaticTyping = true; declaredType = secondary; } JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a); if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) { useStaticTyping = (typing == JsonSerialize.Typing.STATIC); } if (useStaticTyping) { return declaredType.withStaticTyping(); }"
      },
      {
        "txt": "return null; } protected Object getDefaultBean() { Object def = _defaultBean; if (def == null) { def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers()); if (def == null) { Class<?> cls = _beanDesc.getClassInfo().getAnnotated(); throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; cannot instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\");"
      },
      {
        "txt": "def = NO_DEFAULT_MARKER; } _defaultBean = def; } return (def == NO_DEFAULT_MARKER) ? null : _defaultBean; } @Deprecated // since 2.9 protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type) {"
      },
      {
        "txt": "Object defaultBean = getDefaultBean(); if (defaultBean == null) { return getDefaultValue(type); } try { return member.getValue(defaultBean); } catch (Exception e) { return _throwWrapped(e, name, defaultBean); } }"
      },
      {
        "txt": "@Deprecated // since 2.9 protected Object getDefaultValue(JavaType type) { return BeanUtil.getDefaultValue(type); } protected Object _throwWrapped(Exception e, String propName, Object defaultBean) { Throwable t = e; while (t.getCause() != null) { t = t.getCause(); }"
      },
      {
        "txt": "ClassUtil.throwIfError(t); ClassUtil.throwIfRTE(t); throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\"); }"
      }
    ]
  },
  {
    "id": 1775,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/PropertyBuilder.java",
    "start-bug-line": 105,
    "end-bug-line": 105,
    "bug": "return prov.reportBadPropertyDefinition(_beanDesc, propDef, e.getMessage());",
    "fix": "return prov.reportBadPropertyDefinition(_beanDesc, propDef, ClassUtil.exceptionMessage(e));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonSerialize; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.util.*; public class PropertyBuilder"
      },
      {
        "txt": "{ private final static Object NO_DEFAULT_MARKER = Boolean.FALSE; final protected SerializationConfig _config; final protected BeanDescription _beanDesc; final protected AnnotationIntrospector _annotationIntrospector; protected Object _defaultBean; final protected JsonInclude.Value _defaultInclusion; final protected boolean _useRealPropertyDefaults; public PropertyBuilder(SerializationConfig config, BeanDescription beanDesc) {"
      },
      {
        "txt": "_config = config; _beanDesc = beanDesc; JsonInclude.Value inclPerType = JsonInclude.Value.merge( beanDesc.findPropertyInclusion(JsonInclude.Value.empty()), config.getDefaultPropertyInclusion(beanDesc.getBeanClass(), JsonInclude.Value.empty())); _defaultInclusion = JsonInclude.Value.merge(config.getDefaultPropertyInclusion(), inclPerType); _useRealPropertyDefaults = inclPerType.getValueInclusion() == JsonInclude.Include.NON_DEFAULT; _annotationIntrospector = _config.getAnnotationIntrospector();"
      },
      {
        "txt": "} public Annotations getClassAnnotations() { return _beanDesc.getClassAnnotations(); } protected BeanPropertyWriter buildWriter(SerializerProvider prov, BeanPropertyDefinition propDef, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, TypeSerializer contentTypeSer, AnnotatedMember am, boolean defaultUseStaticTyping) throws JsonMappingException {"
      },
      {
        "txt": "try { serializationType = findSerializationType(am, defaultUseStaticTyping, declaredType); } catch (JsonMappingException e) { if (propDef == null) { return prov.reportBadDefinition(declaredType, e.getMessage()); } <extra_id_0> } if (contentTypeSer != null) { if (serializationType == null) { serializationType = declaredType; } JavaType ct = serializationType.getContentType();"
      },
      {
        "txt": "} JavaType ct = serializationType.getContentType(); if (ct == null) { prov.reportBadPropertyDefinition(_beanDesc, propDef, \"serialization type \"+serializationType+\" has no content\"); } serializationType = serializationType.withContentTypeHandler(contentTypeSer); ct = serializationType.getContentType(); } Object valueToSuppress = null;"
      },
      {
        "txt": "boolean suppressNulls = false; JavaType actualType = (serializationType == null) ? declaredType : serializationType; AnnotatedMember accessor = propDef.getAccessor(); if (accessor == null) { return prov.reportBadPropertyDefinition(_beanDesc, propDef, \"could not determine property type\"); } Class<?> rawPropertyType = accessor.getRawType(); JsonInclude.Value inclV = _config.getDefaultInclusion(actualType.getRawClass(), rawPropertyType, _defaultInclusion);"
      },
      {
        "txt": "inclV = inclV.withOverrides(propDef.findInclusion()); JsonInclude.Include inclusion = inclV.getValueInclusion(); if (inclusion == JsonInclude.Include.USE_DEFAULTS) { // should not occur but... inclusion = JsonInclude.Include.ALWAYS; } switch (inclusion) { case NON_DEFAULT: Object defaultBean; if (_useRealPropertyDefaults && (defaultBean = getDefaultBean()) != null) { if (prov.isEnabled(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)) {"
      },
      {
        "txt": "am.fixAccess(_config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS)); } try { valueToSuppress = am.getValue(defaultBean); } catch (Exception e) { _throwWrapped(e, propDef.getName(), defaultBean); } } else { valueToSuppress = BeanUtil.getDefaultValue(actualType); suppressNulls = true;"
      },
      {
        "txt": "} if (valueToSuppress == null) { suppressNulls = true; } else { if (valueToSuppress.getClass().isArray()) { valueToSuppress = ArrayBuilders.getArrayComparator(valueToSuppress); } } break; case NON_ABSENT: // new with 2.6, to support Guava/JDK8 Optionals"
      },
      {
        "txt": "suppressNulls = true; if (actualType.isReferenceType()) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; case NON_EMPTY: suppressNulls = true; valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; break; case CUSTOM: // new with 2.9"
      },
      {
        "txt": "valueToSuppress = prov.includeFilterInstance(propDef, inclV.getValueFilter()); if (valueToSuppress == null) { // is this legal? suppressNulls = true; } else { suppressNulls = prov.includeFilterSuppressNulls(valueToSuppress); } break; case NON_NULL: suppressNulls = true; case ALWAYS: // default"
      },
      {
        "txt": "default: if (actualType.isContainerType() && !_config.isEnabled(SerializationFeature.WRITE_EMPTY_JSON_ARRAYS)) { valueToSuppress = BeanPropertyWriter.MARKER_FOR_EMPTY; } break; } Class<?>[] views = propDef.findViews(); if (views == null) { views = _beanDesc.findDefaultViews();"
      },
      {
        "txt": "} BeanPropertyWriter bpw = new BeanPropertyWriter(propDef, am, _beanDesc.getClassAnnotations(), declaredType, ser, typeSer, serializationType, suppressNulls, valueToSuppress, views); Object serDef = _annotationIntrospector.findNullSerializer(am); if (serDef != null) { bpw.assignNullSerializer(prov.serializerInstance(am, serDef)); } NameTransformer unwrapper = _annotationIntrospector.findUnwrappingNameTransformer(am); if (unwrapper != null) {"
      },
      {
        "txt": "bpw = bpw.unwrappingWriter(unwrapper); } return bpw; } protected JavaType findSerializationType(Annotated a, boolean useStaticTyping, JavaType declaredType) throws JsonMappingException { JavaType secondary = _annotationIntrospector.refineSerializationType(_config, a, declaredType); if (secondary != declaredType) { Class<?> serClass = secondary.getRawClass();"
      },
      {
        "txt": "Class<?> rawDeclared = declaredType.getRawClass(); if (serClass.isAssignableFrom(rawDeclared)) { ; // fine as is } else { if (!rawDeclared.isAssignableFrom(serClass)) { throw new IllegalArgumentException(\"Illegal concrete-type annotation for method '\"+a.getName()+\"': class \"+serClass.getName()+\" not a super-type of (declared) class \"+rawDeclared.getName()); } } useStaticTyping = true; declaredType = secondary;"
      },
      {
        "txt": "} JsonSerialize.Typing typing = _annotationIntrospector.findSerializationTyping(a); if ((typing != null) && (typing != JsonSerialize.Typing.DEFAULT_TYPING)) { useStaticTyping = (typing == JsonSerialize.Typing.STATIC); } if (useStaticTyping) { return declaredType.withStaticTyping(); } return null; }"
      },
      {
        "txt": "protected Object getDefaultBean() { Object def = _defaultBean; if (def == null) { def = _beanDesc.instantiateBean(_config.canOverrideAccessModifiers()); if (def == null) { Class<?> cls = _beanDesc.getClassInfo().getAnnotated(); throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default constructor; cannot instantiate default bean value to support 'properties=JsonSerialize.Inclusion.NON_DEFAULT' annotation\"); def = NO_DEFAULT_MARKER; }"
      },
      {
        "txt": "_defaultBean = def; } return (def == NO_DEFAULT_MARKER) ? null : _defaultBean; } @Deprecated // since 2.9 protected Object getPropertyDefaultValue(String name, AnnotatedMember member, JavaType type) { Object defaultBean = getDefaultBean(); if (defaultBean == null) {"
      },
      {
        "txt": "return getDefaultValue(type); } try { return member.getValue(defaultBean); } catch (Exception e) { return _throwWrapped(e, name, defaultBean); } } @Deprecated // since 2.9 protected Object getDefaultValue(JavaType type) {"
      },
      {
        "txt": "return BeanUtil.getDefaultValue(type); } protected Object _throwWrapped(Exception e, String propName, Object defaultBean) { Throwable t = e; while (t.getCause() != null) { t = t.getCause(); } ClassUtil.throwIfError(t); ClassUtil.throwIfRTE(t);"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Failed to get property '\"+propName+\"' of default \"+defaultBean.getClass().getName()+\" instance\"); }"
      }
    ]
  },
  {
    "id": 1776,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java",
    "start-bug-line": 10,
    "end-bug-line": 10,
    "bug": "",
    "fix": "import com.fasterxml.jackson.core.JsonProcessingException;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Closeable; import java.io.IOException; import java.lang.annotation.Annotation; import java.lang.reflect.*; import java.util.*; import com.fasterxml.jackson.core.JsonGenerator; <extra_id_0> import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; public final class ClassUtil { private final static Class<?> CLS_OBJECT = Object.class;"
      },
      {
        "txt": "{ private final static Class<?> CLS_OBJECT = Object.class; private final static Annotation[] NO_ANNOTATIONS = new Annotation[0]; private final static Ctor[] NO_CTORS = new Ctor[0]; private final static Iterator<?> EMPTY_ITERATOR = Collections.emptyIterator(); @SuppressWarnings(\"unchecked\") public static <T> Iterator<T> emptyIterator() { return (Iterator<T>) EMPTY_ITERATOR; } public static List<JavaType> findSuperTypes(JavaType type, Class<?> endBefore,"
      },
      {
        "txt": "boolean addClassItself) { if ((type == null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) { return Collections.emptyList(); } List<JavaType> result = new ArrayList<JavaType>(8); _addSuperTypes(type, endBefore, result, addClassItself); return result; } public static List<Class<?>> findRawSuperTypes(Class<?> cls, Class<?> endBefore, boolean addClassItself) { if ((cls == null) || (cls == endBefore) || (cls == Object.class)) {"
      },
      {
        "txt": "return Collections.emptyList(); } List<Class<?>> result = new ArrayList<Class<?>>(8); _addRawSuperTypes(cls, endBefore, result, addClassItself); return result; } public static List<Class<?>> findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself) { List<Class<?>> result = new LinkedList<Class<?>>(); if ((cls != null) && (cls != endBefore)) {"
      },
      {
        "txt": "if (addClassItself) { result.add(cls); } while ((cls = cls.getSuperclass()) != null) { if (cls == endBefore) { break; } result.add(cls); } }"
      },
      {
        "txt": "return result; } @Deprecated // since 2.7 public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore) { return findSuperTypes(cls, endBefore, new ArrayList<Class<?>>(8)); } @Deprecated // since 2.7 public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore, List<Class<?>> result) { _addRawSuperTypes(cls, endBefore, result, false); return result;"
      },
      {
        "txt": "} private static void _addSuperTypes(JavaType type, Class<?> endBefore, Collection<JavaType> result, boolean addClassItself) { if (type == null) { return; } final Class<?> cls = type.getRawClass(); if (cls == endBefore || cls == Object.class) { return; } if (addClassItself) {"
      },
      {
        "txt": "if (result.contains(type)) { // already added, no need to check supers return; } result.add(type); } for (JavaType intCls : type.getInterfaces()) { _addSuperTypes(intCls, endBefore, result, true); } _addSuperTypes(type.getSuperClass(), endBefore, result, true); }"
      },
      {
        "txt": "private static void _addRawSuperTypes(Class<?> cls, Class<?> endBefore, Collection<Class<?>> result, boolean addClassItself) { if (cls == endBefore || cls == null || cls == Object.class) { return; } if (addClassItself) { if (result.contains(cls)) { // already added, no need to check supers return; } result.add(cls); } for (Class<?> intCls : _interfaces(cls)) { _addRawSuperTypes(intCls, endBefore, result, true);"
      },
      {
        "txt": "} _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true); } public static String canBeABeanType(Class<?> type) { if (type.isAnnotation()) { return \"annotation\"; } if (type.isArray()) { return \"array\";"
      },
      {
        "txt": "} if (type.isEnum()) { return \"enum\"; } if (type.isPrimitive()) { return \"primitive\"; } return null; } public static String isLocalType(Class<?> type, boolean allowNonStatic)"
      },
      {
        "txt": "{ try { if (hasEnclosingMethod(type)) { return \"local/anonymous\"; } if (!allowNonStatic) { if (!Modifier.isStatic(type.getModifiers())) { if (getEnclosingClass(type) != null) { return \"non-static member class\"; }"
      },
      {
        "txt": "} } } catch (SecurityException e) { } catch (NullPointerException e) { } return null; } public static Class<?> getOuterClass(Class<?> type) { try {"
      },
      {
        "txt": "if (hasEnclosingMethod(type)) { return null; } if (!Modifier.isStatic(type.getModifiers())) { return getEnclosingClass(type); } } catch (SecurityException e) { } return null; } public static boolean isProxyType(Class<?> type)"
      },
      {
        "txt": "{ if (Proxy.isProxyClass(type)) { return true; } String name = type.getName(); if (name.startsWith(\"net.sf.cglib.proxy.\") || name.startsWith(\"org.hibernate.proxy.\")) { return true; } return false;"
      },
      {
        "txt": "} public static boolean isConcrete(Class<?> type) { int mod = type.getModifiers(); return (mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0; } public static boolean isConcrete(Member member) { int mod = member.getModifiers(); return (mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0;"
      },
      {
        "txt": "} public static boolean isCollectionMapOrArray(Class<?> type) { if (type.isArray()) return true; if (Collection.class.isAssignableFrom(type)) return true; if (Map.class.isAssignableFrom(type)) return true; return false; } public static boolean isBogusClass(Class<?> cls) { return (cls == Void.class || cls == Void.TYPE"
      },
      {
        "txt": "|| cls == com.fasterxml.jackson.databind.annotation.NoClass.class); } public static boolean isNonStaticInnerClass(Class<?> cls) { return !Modifier.isStatic(cls.getModifiers()) && (getEnclosingClass(cls) != null); } public static boolean isObjectOrPrimitive(Class<?> cls) { return (cls == CLS_OBJECT) || cls.isPrimitive(); } public static boolean hasClass(Object inst, Class<?> raw) {"
      },
      {
        "txt": "return (inst != null) && (inst.getClass() == raw); } public static void verifyMustOverride(Class<?> expType, Object instance, String method) { if (instance.getClass() != expType) { throw new IllegalStateException(String.format( \"Sub-class %s (of class %s) must override method '%s'\", instance.getClass().getName(), expType.getName(), method)); }"
      },
      {
        "txt": "} @Deprecated // since 2.6 public static boolean hasGetterSignature(Method m) { if (Modifier.isStatic(m.getModifiers())) { return false; } Class<?>[] pts = m.getParameterTypes(); if (pts != null && pts.length != 0) { return false;"
      },
      {
        "txt": "} if (Void.TYPE == m.getReturnType()) { return false; } return true; } public static Throwable throwIfError(Throwable t) { if (t instanceof Error) { throw (Error) t; }"
      },
      {
        "txt": "return t; } public static Throwable throwIfRTE(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } return t; } public static Throwable throwIfIOE(Throwable t) throws IOException { if (t instanceof IOException) {"
      },
      {
        "txt": "throw (IOException) t; } return t; } public static Throwable getRootCause(Throwable t) { while (t.getCause() != null) { t = t.getCause(); } return t;"
      },
      {
        "txt": "} public static Throwable throwRootCauseIfIOE(Throwable t) throws IOException { return throwIfIOE(getRootCause(t)); } public static void throwAsIAE(Throwable t) { throwAsIAE(t, t.getMessage()); } public static void throwAsIAE(Throwable t, String msg) { throwIfRTE(t);"
      },
      {
        "txt": "throwIfError(t); throw new IllegalArgumentException(msg, t); } public static <T> T throwAsMappingException(DeserializationContext ctxt, IOException e0) throws JsonMappingException { if (e0 instanceof JsonMappingException) { throw (JsonMappingException) e0; } JsonMappingException e = JsonMappingException.from(ctxt, e0.getMessage()); e.initCause(e0);"
      },
      {
        "txt": "throw e; } public static void unwrapAndThrowAsIAE(Throwable t) { throwAsIAE(getRootCause(t)); } public static void unwrapAndThrowAsIAE(Throwable t, String msg) { throwAsIAE(getRootCause(t), msg); }"
      },
      {
        "txt": "public static void closeOnFailAndThrowAsIOE(JsonGenerator g, Exception fail) throws IOException { g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { g.close(); } catch (Exception e) { fail.addSuppressed(e); } throwIfIOE(fail);"
      },
      {
        "txt": "throwIfRTE(fail); throw new RuntimeException(fail); } public static void closeOnFailAndThrowAsIOE(JsonGenerator g, Closeable toClose, Exception fail) throws IOException { if (g != null) { g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try {"
      },
      {
        "txt": "g.close(); } catch (Exception e) { fail.addSuppressed(e); } } if (toClose != null) { try { toClose.close(); } catch (Exception e) { fail.addSuppressed(e);"
      },
      {
        "txt": "} } throwIfIOE(fail); throwIfRTE(fail); throw new RuntimeException(fail); } public static <T> T createInstance(Class<T> cls, boolean canFixAccess) throws IllegalArgumentException { Constructor<T> ctor = findConstructor(cls, canFixAccess);"
      },
      {
        "txt": "if (ctor == null) { throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default (no arg) constructor\"); } try { return ctor.newInstance(); } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to instantiate class \"+cls.getName()+\", problem: \"+e.getMessage()); return null; } }"
      },
      {
        "txt": "public static <T> Constructor<T> findConstructor(Class<T> cls, boolean forceAccess) throws IllegalArgumentException { try { Constructor<T> ctor = cls.getDeclaredConstructor(); if (forceAccess) { checkAndFixAccess(ctor, forceAccess); } else { if (!Modifier.isPublic(ctor.getModifiers())) { throw new IllegalArgumentException(\"Default constructor for \"+cls.getName()+\" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type\");"
      },
      {
        "txt": "} } return ctor; } catch (NoSuchMethodException e) { ; } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to find default constructor of class \"+cls.getName()+\", problem: \"+e.getMessage()); } return null; }"
      },
      {
        "txt": "public static Class<?> classOf(Object inst) { if (inst == null) { return null; } return inst.getClass(); } public static Class<?> rawClass(JavaType t) { if (t == null) { return null; }"
      },
      {
        "txt": "return t.getRawClass(); } public static <T> T nonNull(T valueOrNull, T defaultValue) { return (valueOrNull == null) ? defaultValue : valueOrNull; } public static String nullOrToString(Object value) { if (value == null) { return null; } return value.toString();"
      },
      {
        "txt": "} public static String nonNullString(String str) { if (str == null) { return \"\"; } return str; } public static String quotedOr(Object str, String forNull) { if (str == null) { return forNull;"
      },
      {
        "txt": "} return String.format(\"\\\"%s\\\"\", str); } public static String getClassDescription(Object classOrInstance) { if (classOrInstance == null) { return \"unknown\"; } Class<?> cls = (classOrInstance instanceof Class<?>) ? (Class<?>) classOrInstance : classOrInstance.getClass();"
      },
      {
        "txt": "return nameOf(cls); } public static String classNameOf(Object inst) { if (inst == null) { return \"[null]\"; } return nameOf(inst.getClass()); } public static String nameOf(Class<?> cls) { if (cls == null) {"
      },
      {
        "txt": "return \"[null]\"; } int index = 0; while (cls.isArray()) { ++index; cls = cls.getComponentType(); } String base = cls.isPrimitive() ? cls.getSimpleName() : cls.getName(); if (index > 0) { StringBuilder sb = new StringBuilder(base);"
      },
      {
        "txt": "do { sb.append(\"[]\"); } while (--index > 0); base = sb.toString(); } return backticked(base); } public static String nameOf(Named named) { if (named == null) { return \"[null]\";"
      },
      {
        "txt": "} return backticked(named.getName()); } public static String backticked(String text) { if (text == null) { return \"[null]\"; } return new StringBuilder(text.length()+2).append('`').append(text).append('`').toString(); } public static Object defaultValue(Class<?> cls)"
      },
      {
        "txt": "{ if (cls == Integer.TYPE) { return Integer.valueOf(0); } if (cls == Long.TYPE) { return Long.valueOf(0L); } if (cls == Boolean.TYPE) { return Boolean.FALSE; }"
      },
      {
        "txt": "if (cls == Double.TYPE) { return Double.valueOf(0.0); } if (cls == Float.TYPE) { return Float.valueOf(0.0f); } if (cls == Byte.TYPE) { return Byte.valueOf((byte) 0); } if (cls == Short.TYPE) {"
      },
      {
        "txt": "return Short.valueOf((short) 0); } if (cls == Character.TYPE) { return '\\0'; } throw new IllegalArgumentException(\"Class \"+cls.getName()+\" is not a primitive type\"); } public static Class<?> wrapperType(Class<?> primitiveType) { if (primitiveType == Integer.TYPE) {"
      },
      {
        "txt": "return Integer.class; } if (primitiveType == Long.TYPE) { return Long.class; } if (primitiveType == Boolean.TYPE) { return Boolean.class; } if (primitiveType == Double.TYPE) { return Double.class;"
      },
      {
        "txt": "} if (primitiveType == Float.TYPE) { return Float.class; } if (primitiveType == Byte.TYPE) { return Byte.class; } if (primitiveType == Short.TYPE) { return Short.class; }"
      },
      {
        "txt": "if (primitiveType == Character.TYPE) { return Character.class; } throw new IllegalArgumentException(\"Class \"+primitiveType.getName()+\" is not a primitive type\"); } public static Class<?> primitiveType(Class<?> type) { if (type.isPrimitive()) { return type; }"
      },
      {
        "txt": "if (type == Integer.class) { return Integer.TYPE; } if (type == Long.class) { return Long.TYPE; } if (type == Boolean.class) { return Boolean.TYPE; } if (type == Double.class) {"
      },
      {
        "txt": "return Double.TYPE; } if (type == Float.class) { return Float.TYPE; } if (type == Byte.class) { return Byte.TYPE; } if (type == Short.class) { return Short.TYPE;"
      },
      {
        "txt": "} if (type == Character.class) { return Character.TYPE; } return null; } @Deprecated public static void checkAndFixAccess(Member member) { checkAndFixAccess(member, false); }"
      },
      {
        "txt": "public static void checkAndFixAccess(Member member, boolean force) { AccessibleObject ao = (AccessibleObject) member; try { if (force || (!Modifier.isPublic(member.getModifiers()) || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) { ao.setAccessible(true); } } catch (SecurityException se) {"
      },
      {
        "txt": "if (!ao.isAccessible()) { Class<?> declClass = member.getDeclaringClass(); throw new IllegalArgumentException(\"Cannot access \"+member+\" (from class \"+declClass.getName()+\"; failed to set access: \"+se.getMessage()); } } } public static Class<? extends Enum<?>> findEnumType(EnumSet<?> s) { if (!s.isEmpty()) { return findEnumType(s.iterator().next());"
      },
      {
        "txt": "} return EnumTypeLocator.instance.enumTypeFor(s); } public static Class<? extends Enum<?>> findEnumType(EnumMap<?,?> m) { if (!m.isEmpty()) { return findEnumType(m.keySet().iterator().next()); } return EnumTypeLocator.instance.enumTypeFor(m); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public static Class<? extends Enum<?>> findEnumType(Enum<?> en) { Class<?> ec = en.getClass(); if (ec.getSuperclass() != Enum.class) { ec = ec.getSuperclass(); } return (Class<? extends Enum<?>>) ec; } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public static Class<? extends Enum<?>> findEnumType(Class<?> cls) { if (cls.getSuperclass() != Enum.class) { cls = cls.getSuperclass(); } return (Class<? extends Enum<?>>) cls; } public static <T extends Annotation> Enum<?> findFirstAnnotatedEnumValue(Class<Enum<?>> enumClass, Class<T> annotationClass) { Field[] fields = getDeclaredFields(enumClass);"
      },
      {
        "txt": "for (Field field : fields) { if (field.isEnumConstant()) { Annotation defaultValueAnnotation = field.getAnnotation(annotationClass); if (defaultValueAnnotation != null) { final String name = field.getName(); for (Enum<?> enumValue : enumClass.getEnumConstants()) { if (name.equals(enumValue.name())) { return enumValue; } }"
      },
      {
        "txt": "} } } return null; } public static boolean isJacksonStdImpl(Object impl) { return (impl == null) || isJacksonStdImpl(impl.getClass()); } public static boolean isJacksonStdImpl(Class<?> implClass) { return (implClass.getAnnotation(JacksonStdImpl.class) != null);"
      },
      {
        "txt": "} public static String getPackageName(Class<?> cls) { Package pkg = cls.getPackage(); return (pkg == null) ? null : pkg.getName(); } public static boolean hasEnclosingMethod(Class<?> cls) { return !isObjectOrPrimitive(cls) && (cls.getEnclosingMethod() != null); } public static Field[] getDeclaredFields(Class<?> cls) { return cls.getDeclaredFields();"
      },
      {
        "txt": "} public static Method[] getDeclaredMethods(Class<?> cls) { return cls.getDeclaredMethods(); } public static Annotation[] findClassAnnotations(Class<?> cls) { if (isObjectOrPrimitive(cls)) { return NO_ANNOTATIONS; } return cls.getDeclaredAnnotations(); }"
      },
      {
        "txt": "public static Method[] getClassMethods(Class<?> cls) { try { return ClassUtil.getDeclaredMethods(cls); } catch (final NoClassDefFoundError ex) { final ClassLoader loader = Thread.currentThread().getContextClassLoader(); if (loader == null){ throw ex; } final Class<?> contextClass;"
      },
      {
        "txt": "try { contextClass = loader.loadClass(cls.getName()); } catch (ClassNotFoundException e) { ex.addSuppressed(e); throw ex; } return contextClass.getDeclaredMethods(); // Cross fingers } } public static Ctor[] getConstructors(Class<?> cls) {"
      },
      {
        "txt": "if (cls.isInterface() || isObjectOrPrimitive(cls)) { return NO_CTORS; } Constructor<?>[] rawCtors = cls.getDeclaredConstructors(); final int len = rawCtors.length; Ctor[] result = new Ctor[len]; for (int i = 0; i < len; ++i) { result[i] = new Ctor(rawCtors[i]); } return result;"
      },
      {
        "txt": "} public static Class<?> getDeclaringClass(Class<?> cls) { return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass(); } public static Type getGenericSuperclass(Class<?> cls) { return cls.getGenericSuperclass(); } public static Type[] getGenericInterfaces(Class<?> cls) { return cls.getGenericInterfaces(); }"
      },
      {
        "txt": "public static Class<?> getEnclosingClass(Class<?> cls) { return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass(); } private static Class<?>[] _interfaces(Class<?> cls) { return cls.getInterfaces(); } private static class EnumTypeLocator { final static EnumTypeLocator instance = new EnumTypeLocator(); private final Field enumSetTypeField;"
      },
      {
        "txt": "private final Field enumMapTypeField; private EnumTypeLocator() { enumSetTypeField = locateField(EnumSet.class, \"elementType\", Class.class); enumMapTypeField = locateField(EnumMap.class, \"elementType\", Class.class); } @SuppressWarnings(\"unchecked\") public Class<? extends Enum<?>> enumTypeFor(EnumSet<?> set) { if (enumSetTypeField != null) { return (Class<? extends Enum<?>>) get(set, enumSetTypeField);"
      },
      {
        "txt": "} throw new IllegalStateException(\"Cannot figure out type for EnumSet (odd JDK platform?)\"); } @SuppressWarnings(\"unchecked\") public Class<? extends Enum<?>> enumTypeFor(EnumMap<?,?> set) { if (enumMapTypeField != null) { return (Class<? extends Enum<?>>) get(set, enumMapTypeField); } throw new IllegalStateException(\"Cannot figure out type for EnumMap (odd JDK platform?)\");"
      },
      {
        "txt": "} private Object get(Object bean, Field field) { try { return field.get(bean); } catch (Exception e) { throw new IllegalArgumentException(e); } } private static Field locateField(Class<?> fromClass, String expectedName, Class<?> type)"
      },
      {
        "txt": "{ Field found = null; Field[] fields = getDeclaredFields(fromClass); for (Field f : fields) { if (expectedName.equals(f.getName()) && f.getType() == type) { found = f; break; } } if (found == null) {"
      },
      {
        "txt": "for (Field f : fields) { if (f.getType() == type) { if (found != null) return null; found = f; } } } if (found != null) { // it's non-public, need to force accessible try { found.setAccessible(true);"
      },
      {
        "txt": "} catch (Throwable t) { } } return found; } } public final static class Ctor { public final Constructor<?> _ctor; private Annotation[] _annotations; private Annotation[][] _paramAnnotations;"
      },
      {
        "txt": "private int _paramCount = -1; public Ctor(Constructor<?> ctor) { _ctor = ctor; } public Constructor<?> getConstructor() { return _ctor; } public int getParamCount() { int c = _paramCount; if (c < 0) {"
      },
      {
        "txt": "c = _ctor.getParameterTypes().length; _paramCount = c; } return c; } public Class<?> getDeclaringClass() { return _ctor.getDeclaringClass(); } public Annotation[] getDeclaredAnnotations() { Annotation[] result = _annotations;"
      },
      {
        "txt": "if (result == null) { result = _ctor.getDeclaredAnnotations(); _annotations = result; } return result; } public Annotation[][] getParameterAnnotations() { Annotation[][] result = _paramAnnotations; if (result == null) { result = _ctor.getParameterAnnotations();"
      },
      {
        "txt": "_paramAnnotations = result; } return result; } }"
      }
    ]
  },
  {
    "id": 1777,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/util/ClassUtil.java",
    "start-bug-line": 752,
    "end-bug-line": 752,
    "bug": "",
    "fix": "public static String exceptionMessage(Throwable t) { if (t instanceof JsonProcessingException) { return ((JsonProcessingException) t).getOriginalMessage(); } return t.getMessage(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.util; import java.io.Closeable; import java.io.IOException; import java.lang.annotation.Annotation;"
      },
      {
        "txt": "import java.lang.reflect.*; import java.util.*; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; public final class ClassUtil { private final static Class<?> CLS_OBJECT = Object.class;"
      },
      {
        "txt": "private final static Annotation[] NO_ANNOTATIONS = new Annotation[0]; private final static Ctor[] NO_CTORS = new Ctor[0]; private final static Iterator<?> EMPTY_ITERATOR = Collections.emptyIterator(); @SuppressWarnings(\"unchecked\") public static <T> Iterator<T> emptyIterator() { return (Iterator<T>) EMPTY_ITERATOR; } public static List<JavaType> findSuperTypes(JavaType type, Class<?> endBefore, boolean addClassItself) { if ((type == null) || type.hasRawClass(endBefore) || type.hasRawClass(Object.class)) {"
      },
      {
        "txt": "return Collections.emptyList(); } List<JavaType> result = new ArrayList<JavaType>(8); _addSuperTypes(type, endBefore, result, addClassItself); return result; } public static List<Class<?>> findRawSuperTypes(Class<?> cls, Class<?> endBefore, boolean addClassItself) { if ((cls == null) || (cls == endBefore) || (cls == Object.class)) { return Collections.emptyList(); }"
      },
      {
        "txt": "List<Class<?>> result = new ArrayList<Class<?>>(8); _addRawSuperTypes(cls, endBefore, result, addClassItself); return result; } public static List<Class<?>> findSuperClasses(Class<?> cls, Class<?> endBefore, boolean addClassItself) { List<Class<?>> result = new LinkedList<Class<?>>(); if ((cls != null) && (cls != endBefore)) { if (addClassItself) { result.add(cls);"
      },
      {
        "txt": "} while ((cls = cls.getSuperclass()) != null) { if (cls == endBefore) { break; } result.add(cls); } } return result; }"
      },
      {
        "txt": "@Deprecated // since 2.7 public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore) { return findSuperTypes(cls, endBefore, new ArrayList<Class<?>>(8)); } @Deprecated // since 2.7 public static List<Class<?>> findSuperTypes(Class<?> cls, Class<?> endBefore, List<Class<?>> result) { _addRawSuperTypes(cls, endBefore, result, false); return result; } private static void _addSuperTypes(JavaType type, Class<?> endBefore, Collection<JavaType> result,"
      },
      {
        "txt": "boolean addClassItself) { if (type == null) { return; } final Class<?> cls = type.getRawClass(); if (cls == endBefore || cls == Object.class) { return; } if (addClassItself) { if (result.contains(type)) { // already added, no need to check supers return;"
      },
      {
        "txt": "} result.add(type); } for (JavaType intCls : type.getInterfaces()) { _addSuperTypes(intCls, endBefore, result, true); } _addSuperTypes(type.getSuperClass(), endBefore, result, true); } private static void _addRawSuperTypes(Class<?> cls, Class<?> endBefore, Collection<Class<?>> result, boolean addClassItself) { if (cls == endBefore || cls == null || cls == Object.class) { return; }"
      },
      {
        "txt": "if (addClassItself) { if (result.contains(cls)) { // already added, no need to check supers return; } result.add(cls); } for (Class<?> intCls : _interfaces(cls)) { _addRawSuperTypes(intCls, endBefore, result, true); } _addRawSuperTypes(cls.getSuperclass(), endBefore, result, true);"
      },
      {
        "txt": "} public static String canBeABeanType(Class<?> type) { if (type.isAnnotation()) { return \"annotation\"; } if (type.isArray()) { return \"array\"; } if (type.isEnum()) {"
      },
      {
        "txt": "return \"enum\"; } if (type.isPrimitive()) { return \"primitive\"; } return null; } public static String isLocalType(Class<?> type, boolean allowNonStatic) { try {"
      },
      {
        "txt": "if (hasEnclosingMethod(type)) { return \"local/anonymous\"; } if (!allowNonStatic) { if (!Modifier.isStatic(type.getModifiers())) { if (getEnclosingClass(type) != null) { return \"non-static member class\"; } } }"
      },
      {
        "txt": "} catch (SecurityException e) { } catch (NullPointerException e) { } return null; } public static Class<?> getOuterClass(Class<?> type) { try { if (hasEnclosingMethod(type)) { return null;"
      },
      {
        "txt": "} if (!Modifier.isStatic(type.getModifiers())) { return getEnclosingClass(type); } } catch (SecurityException e) { } return null; } public static boolean isProxyType(Class<?> type) { if (Proxy.isProxyClass(type)) {"
      },
      {
        "txt": "return true; } String name = type.getName(); if (name.startsWith(\"net.sf.cglib.proxy.\") || name.startsWith(\"org.hibernate.proxy.\")) { return true; } return false; } public static boolean isConcrete(Class<?> type)"
      },
      {
        "txt": "{ int mod = type.getModifiers(); return (mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0; } public static boolean isConcrete(Member member) { int mod = member.getModifiers(); return (mod & (Modifier.INTERFACE | Modifier.ABSTRACT)) == 0; } public static boolean isCollectionMapOrArray(Class<?> type)"
      },
      {
        "txt": "{ if (type.isArray()) return true; if (Collection.class.isAssignableFrom(type)) return true; if (Map.class.isAssignableFrom(type)) return true; return false; } public static boolean isBogusClass(Class<?> cls) { return (cls == Void.class || cls == Void.TYPE || cls == com.fasterxml.jackson.databind.annotation.NoClass.class); }"
      },
      {
        "txt": "public static boolean isNonStaticInnerClass(Class<?> cls) { return !Modifier.isStatic(cls.getModifiers()) && (getEnclosingClass(cls) != null); } public static boolean isObjectOrPrimitive(Class<?> cls) { return (cls == CLS_OBJECT) || cls.isPrimitive(); } public static boolean hasClass(Object inst, Class<?> raw) { return (inst != null) && (inst.getClass() == raw); }"
      },
      {
        "txt": "public static void verifyMustOverride(Class<?> expType, Object instance, String method) { if (instance.getClass() != expType) { throw new IllegalStateException(String.format( \"Sub-class %s (of class %s) must override method '%s'\", instance.getClass().getName(), expType.getName(), method)); } } @Deprecated // since 2.6"
      },
      {
        "txt": "public static boolean hasGetterSignature(Method m) { if (Modifier.isStatic(m.getModifiers())) { return false; } Class<?>[] pts = m.getParameterTypes(); if (pts != null && pts.length != 0) { return false; } if (Void.TYPE == m.getReturnType()) {"
      },
      {
        "txt": "return false; } return true; } public static Throwable throwIfError(Throwable t) { if (t instanceof Error) { throw (Error) t; } return t; }"
      },
      {
        "txt": "public static Throwable throwIfRTE(Throwable t) { if (t instanceof RuntimeException) { throw (RuntimeException) t; } return t; } public static Throwable throwIfIOE(Throwable t) throws IOException { if (t instanceof IOException) { throw (IOException) t; }"
      },
      {
        "txt": "return t; } public static Throwable getRootCause(Throwable t) { while (t.getCause() != null) { t = t.getCause(); } return t; } public static Throwable throwRootCauseIfIOE(Throwable t) throws IOException {"
      },
      {
        "txt": "return throwIfIOE(getRootCause(t)); } public static void throwAsIAE(Throwable t) { throwAsIAE(t, t.getMessage()); } public static void throwAsIAE(Throwable t, String msg) { throwIfRTE(t); throwIfError(t); throw new IllegalArgumentException(msg, t);"
      },
      {
        "txt": "} public static <T> T throwAsMappingException(DeserializationContext ctxt, IOException e0) throws JsonMappingException { if (e0 instanceof JsonMappingException) { throw (JsonMappingException) e0; } JsonMappingException e = JsonMappingException.from(ctxt, e0.getMessage()); e.initCause(e0); throw e; }"
      },
      {
        "txt": "public static void unwrapAndThrowAsIAE(Throwable t) { throwAsIAE(getRootCause(t)); } public static void unwrapAndThrowAsIAE(Throwable t, String msg) { throwAsIAE(getRootCause(t), msg); } public static void closeOnFailAndThrowAsIOE(JsonGenerator g, Exception fail) throws IOException"
      },
      {
        "txt": "{ g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { g.close(); } catch (Exception e) { fail.addSuppressed(e); } throwIfIOE(fail); throwIfRTE(fail); throw new RuntimeException(fail);"
      },
      {
        "txt": "} public static void closeOnFailAndThrowAsIOE(JsonGenerator g, Closeable toClose, Exception fail) throws IOException { if (g != null) { g.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { g.close(); } catch (Exception e) {"
      },
      {
        "txt": "fail.addSuppressed(e); } } if (toClose != null) { try { toClose.close(); } catch (Exception e) { fail.addSuppressed(e); } }"
      },
      {
        "txt": "throwIfIOE(fail); throwIfRTE(fail); throw new RuntimeException(fail); } public static <T> T createInstance(Class<T> cls, boolean canFixAccess) throws IllegalArgumentException { Constructor<T> ctor = findConstructor(cls, canFixAccess); if (ctor == null) { throw new IllegalArgumentException(\"Class \"+cls.getName()+\" has no default (no arg) constructor\");"
      },
      {
        "txt": "} try { return ctor.newInstance(); } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to instantiate class \"+cls.getName()+\", problem: \"+e.getMessage()); return null; } } public static <T> Constructor<T> findConstructor(Class<T> cls, boolean forceAccess) throws IllegalArgumentException"
      },
      {
        "txt": "{ try { Constructor<T> ctor = cls.getDeclaredConstructor(); if (forceAccess) { checkAndFixAccess(ctor, forceAccess); } else { if (!Modifier.isPublic(ctor.getModifiers())) { throw new IllegalArgumentException(\"Default constructor for \"+cls.getName()+\" is not accessible (non-public?): not allowed to try modify access via Reflection: cannot instantiate type\"); } }"
      },
      {
        "txt": "return ctor; } catch (NoSuchMethodException e) { ; } catch (Exception e) { ClassUtil.unwrapAndThrowAsIAE(e, \"Failed to find default constructor of class \"+cls.getName()+\", problem: \"+e.getMessage()); } return null; } public static Class<?> classOf(Object inst) { if (inst == null) {"
      },
      {
        "txt": "return null; } return inst.getClass(); } public static Class<?> rawClass(JavaType t) { if (t == null) { return null; } return t.getRawClass(); }"
      },
      {
        "txt": "public static <T> T nonNull(T valueOrNull, T defaultValue) { return (valueOrNull == null) ? defaultValue : valueOrNull; } public static String nullOrToString(Object value) { if (value == null) { return null; } return value.toString(); } public static String nonNullString(String str) {"
      },
      {
        "txt": "if (str == null) { return \"\"; } return str; } public static String quotedOr(Object str, String forNull) { if (str == null) { return forNull; } return String.format(\"\\\"%s\\\"\", str);"
      },
      {
        "txt": "} public static String getClassDescription(Object classOrInstance) { if (classOrInstance == null) { return \"unknown\"; } Class<?> cls = (classOrInstance instanceof Class<?>) ? (Class<?>) classOrInstance : classOrInstance.getClass(); return nameOf(cls); }"
      },
      {
        "txt": "public static String classNameOf(Object inst) { if (inst == null) { return \"[null]\"; } return nameOf(inst.getClass()); } public static String nameOf(Class<?> cls) { if (cls == null) { return \"[null]\"; }"
      },
      {
        "txt": "int index = 0; while (cls.isArray()) { ++index; cls = cls.getComponentType(); } String base = cls.isPrimitive() ? cls.getSimpleName() : cls.getName(); if (index > 0) { StringBuilder sb = new StringBuilder(base); do { sb.append(\"[]\");"
      },
      {
        "txt": "} while (--index > 0); base = sb.toString(); } return backticked(base); } public static String nameOf(Named named) { if (named == null) { return \"[null]\"; } return backticked(named.getName());"
      },
      {
        "txt": "public static String backticked(String text) { if (text == null) { return \"[null]\"; } return new StringBuilder(text.length()+2).append('`').append(text).append('`').toString(); } <extra_id_0> public static Object defaultValue(Class<?> cls) { if (cls == Integer.TYPE) { return Integer.valueOf(0); } if (cls == Long.TYPE) {"
      },
      {
        "txt": "} if (cls == Long.TYPE) { return Long.valueOf(0L); } if (cls == Boolean.TYPE) { return Boolean.FALSE; } if (cls == Double.TYPE) { return Double.valueOf(0.0); }"
      },
      {
        "txt": "if (cls == Float.TYPE) { return Float.valueOf(0.0f); } if (cls == Byte.TYPE) { return Byte.valueOf((byte) 0); } if (cls == Short.TYPE) { return Short.valueOf((short) 0); } if (cls == Character.TYPE) {"
      },
      {
        "txt": "return '\\0'; } throw new IllegalArgumentException(\"Class \"+cls.getName()+\" is not a primitive type\"); } public static Class<?> wrapperType(Class<?> primitiveType) { if (primitiveType == Integer.TYPE) { return Integer.class; } if (primitiveType == Long.TYPE) {"
      },
      {
        "txt": "return Long.class; } if (primitiveType == Boolean.TYPE) { return Boolean.class; } if (primitiveType == Double.TYPE) { return Double.class; } if (primitiveType == Float.TYPE) { return Float.class;"
      },
      {
        "txt": "} if (primitiveType == Byte.TYPE) { return Byte.class; } if (primitiveType == Short.TYPE) { return Short.class; } if (primitiveType == Character.TYPE) { return Character.class; }"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Class \"+primitiveType.getName()+\" is not a primitive type\"); } public static Class<?> primitiveType(Class<?> type) { if (type.isPrimitive()) { return type; } if (type == Integer.class) { return Integer.TYPE; }"
      },
      {
        "txt": "if (type == Long.class) { return Long.TYPE; } if (type == Boolean.class) { return Boolean.TYPE; } if (type == Double.class) { return Double.TYPE; } if (type == Float.class) {"
      },
      {
        "txt": "return Float.TYPE; } if (type == Byte.class) { return Byte.TYPE; } if (type == Short.class) { return Short.TYPE; } if (type == Character.class) { return Character.TYPE;"
      },
      {
        "txt": "} return null; } @Deprecated public static void checkAndFixAccess(Member member) { checkAndFixAccess(member, false); } public static void checkAndFixAccess(Member member, boolean force) { AccessibleObject ao = (AccessibleObject) member;"
      },
      {
        "txt": "try { if (force || (!Modifier.isPublic(member.getModifiers()) || !Modifier.isPublic(member.getDeclaringClass().getModifiers()))) { ao.setAccessible(true); } } catch (SecurityException se) { if (!ao.isAccessible()) { Class<?> declClass = member.getDeclaringClass(); throw new IllegalArgumentException(\"Cannot access \"+member+\" (from class \"+declClass.getName()+\"; failed to set access: \"+se.getMessage());"
      },
      {
        "txt": "} } } public static Class<? extends Enum<?>> findEnumType(EnumSet<?> s) { if (!s.isEmpty()) { return findEnumType(s.iterator().next()); } return EnumTypeLocator.instance.enumTypeFor(s); }"
      },
      {
        "txt": "public static Class<? extends Enum<?>> findEnumType(EnumMap<?,?> m) { if (!m.isEmpty()) { return findEnumType(m.keySet().iterator().next()); } return EnumTypeLocator.instance.enumTypeFor(m); } @SuppressWarnings(\"unchecked\") public static Class<? extends Enum<?>> findEnumType(Enum<?> en) {"
      },
      {
        "txt": "Class<?> ec = en.getClass(); if (ec.getSuperclass() != Enum.class) { ec = ec.getSuperclass(); } return (Class<? extends Enum<?>>) ec; } @SuppressWarnings(\"unchecked\") public static Class<? extends Enum<?>> findEnumType(Class<?> cls) { if (cls.getSuperclass() != Enum.class) {"
      },
      {
        "txt": "cls = cls.getSuperclass(); } return (Class<? extends Enum<?>>) cls; } public static <T extends Annotation> Enum<?> findFirstAnnotatedEnumValue(Class<Enum<?>> enumClass, Class<T> annotationClass) { Field[] fields = getDeclaredFields(enumClass); for (Field field : fields) { if (field.isEnumConstant()) { Annotation defaultValueAnnotation = field.getAnnotation(annotationClass);"
      },
      {
        "txt": "if (defaultValueAnnotation != null) { final String name = field.getName(); for (Enum<?> enumValue : enumClass.getEnumConstants()) { if (name.equals(enumValue.name())) { return enumValue; } } } } }"
      },
      {
        "txt": "return null; } public static boolean isJacksonStdImpl(Object impl) { return (impl == null) || isJacksonStdImpl(impl.getClass()); } public static boolean isJacksonStdImpl(Class<?> implClass) { return (implClass.getAnnotation(JacksonStdImpl.class) != null); } public static String getPackageName(Class<?> cls) { Package pkg = cls.getPackage();"
      },
      {
        "txt": "return (pkg == null) ? null : pkg.getName(); } public static boolean hasEnclosingMethod(Class<?> cls) { return !isObjectOrPrimitive(cls) && (cls.getEnclosingMethod() != null); } public static Field[] getDeclaredFields(Class<?> cls) { return cls.getDeclaredFields(); } public static Method[] getDeclaredMethods(Class<?> cls) { return cls.getDeclaredMethods();"
      },
      {
        "txt": "} public static Annotation[] findClassAnnotations(Class<?> cls) { if (isObjectOrPrimitive(cls)) { return NO_ANNOTATIONS; } return cls.getDeclaredAnnotations(); } public static Method[] getClassMethods(Class<?> cls) { try {"
      },
      {
        "txt": "return ClassUtil.getDeclaredMethods(cls); } catch (final NoClassDefFoundError ex) { final ClassLoader loader = Thread.currentThread().getContextClassLoader(); if (loader == null){ throw ex; } final Class<?> contextClass; try { contextClass = loader.loadClass(cls.getName()); } catch (ClassNotFoundException e) {"
      },
      {
        "txt": "ex.addSuppressed(e); throw ex; } return contextClass.getDeclaredMethods(); // Cross fingers } } public static Ctor[] getConstructors(Class<?> cls) { if (cls.isInterface() || isObjectOrPrimitive(cls)) { return NO_CTORS; }"
      },
      {
        "txt": "Constructor<?>[] rawCtors = cls.getDeclaredConstructors(); final int len = rawCtors.length; Ctor[] result = new Ctor[len]; for (int i = 0; i < len; ++i) { result[i] = new Ctor(rawCtors[i]); } return result; } public static Class<?> getDeclaringClass(Class<?> cls) { return isObjectOrPrimitive(cls) ? null : cls.getDeclaringClass();"
      },
      {
        "txt": "} public static Type getGenericSuperclass(Class<?> cls) { return cls.getGenericSuperclass(); } public static Type[] getGenericInterfaces(Class<?> cls) { return cls.getGenericInterfaces(); } public static Class<?> getEnclosingClass(Class<?> cls) { return isObjectOrPrimitive(cls) ? null : cls.getEnclosingClass(); }"
      },
      {
        "txt": "private static Class<?>[] _interfaces(Class<?> cls) { return cls.getInterfaces(); } private static class EnumTypeLocator { final static EnumTypeLocator instance = new EnumTypeLocator(); private final Field enumSetTypeField; private final Field enumMapTypeField; private EnumTypeLocator() { enumSetTypeField = locateField(EnumSet.class, \"elementType\", Class.class);"
      },
      {
        "txt": "enumMapTypeField = locateField(EnumMap.class, \"elementType\", Class.class); } @SuppressWarnings(\"unchecked\") public Class<? extends Enum<?>> enumTypeFor(EnumSet<?> set) { if (enumSetTypeField != null) { return (Class<? extends Enum<?>>) get(set, enumSetTypeField); } throw new IllegalStateException(\"Cannot figure out type for EnumSet (odd JDK platform?)\"); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public Class<? extends Enum<?>> enumTypeFor(EnumMap<?,?> set) { if (enumMapTypeField != null) { return (Class<? extends Enum<?>>) get(set, enumMapTypeField); } throw new IllegalStateException(\"Cannot figure out type for EnumMap (odd JDK platform?)\"); } private Object get(Object bean, Field field) {"
      },
      {
        "txt": "try { return field.get(bean); } catch (Exception e) { throw new IllegalArgumentException(e); } } private static Field locateField(Class<?> fromClass, String expectedName, Class<?> type) { Field found = null; Field[] fields = getDeclaredFields(fromClass);"
      },
      {
        "txt": "for (Field f : fields) { if (expectedName.equals(f.getName()) && f.getType() == type) { found = f; break; } } if (found == null) { for (Field f : fields) { if (f.getType() == type) { if (found != null) return null;"
      },
      {
        "txt": "found = f; } } } if (found != null) { // it's non-public, need to force accessible try { found.setAccessible(true); } catch (Throwable t) { } } return found;"
      },
      {
        "txt": "} } public final static class Ctor { public final Constructor<?> _ctor; private Annotation[] _annotations; private Annotation[][] _paramAnnotations; private int _paramCount = -1; public Ctor(Constructor<?> ctor) { _ctor = ctor;"
      },
      {
        "txt": "} public Constructor<?> getConstructor() { return _ctor; } public int getParamCount() { int c = _paramCount; if (c < 0) { c = _ctor.getParameterTypes().length; _paramCount = c; }"
      },
      {
        "txt": "return c; } public Class<?> getDeclaringClass() { return _ctor.getDeclaringClass(); } public Annotation[] getDeclaredAnnotations() { Annotation[] result = _annotations; if (result == null) { result = _ctor.getDeclaredAnnotations(); _annotations = result;"
      },
      {
        "txt": "} return result; } public Annotation[][] getParameterAnnotations() { Annotation[][] result = _paramAnnotations; if (result == null) { result = _ctor.getParameterAnnotations(); _paramAnnotations = result; } return result;"
      },
      {
        "txt": "} }"
      }
    ]
  }
]
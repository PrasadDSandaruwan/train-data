[
  {
    "id": 1726,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "start-bug-line": 65,
    "end-bug-line": 65,
    "bug": "",
    "fix": "s.add(\"java.util.logging.FileHandler\"); s.add(\"java.rmi.server.UnicastRemoteObject\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder; import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.ConfigOverride; import com.fasterxml.jackson.databind.deser.impl.*; import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition; public class BeanDeserializerFactory extends BasicDeserializerFactory implements java.io.Serializable // since 2.1"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1; private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class }; private final static Class<?>[] NO_VIEWS = new Class<?>[0]; protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES; static { Set<String> s = new HashSet<>(); s.add(\"org.apache.commons.collections.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\"); s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");"
      },
      {
        "txt": "s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\"); s.add(\"org.codehaus.groovy.runtime.MethodClosure\"); s.add(\"org.springframework.beans.factory.ObjectFactory\"); s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"); s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"); s.add(\"com.sun.rowset.JdbcRowSetImpl\"); <extra_id_0> DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s); } protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES; public final static BeanDeserializerFactory instance = new BeanDeserializerFactory( new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) {"
      },
      {
        "txt": "new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) { super(config); } @Override public DeserializerFactory withConfig(DeserializerFactoryConfig config) { if (_factoryConfig == config) { return this; }"
      },
      {
        "txt": "if (getClass() != BeanDeserializerFactory.class) { throw new IllegalStateException(\"Subtype of BeanDeserializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \" +\"additional deserializer definitions\"); } return new BeanDeserializerFactory(config); } @Override public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc); if (custom != null) { return custom; } if (type.isThrowable()) { return buildThrowableDeserializer(ctxt, type, beanDesc); }"
      },
      {
        "txt": "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) { JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc); if (concreteType != null) { beanDesc = config.introspect(concreteType); return buildBeanDeserializer(ctxt, concreteType, beanDesc); } } @SuppressWarnings(\"unchecked\") JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc); if (deser != null) {"
      },
      {
        "txt": "return deser; } if (!isPotentialBeanType(type.getRawClass())) { return null; } checkIllegalTypes(ctxt, type, beanDesc); return buildBeanDeserializer(ctxt, type, beanDesc); } @Override public JsonDeserializer<Object> createBuilderBasedDeserializer("
      },
      {
        "txt": "DeserializationContext ctxt, JavaType valueType, BeanDescription beanDesc, Class<?> builderClass) throws JsonMappingException { JavaType builderType = ctxt.constructType(builderClass); BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType); return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc); } protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser); } } }"
      },
      {
        "txt": "return deser; } protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc); if (concrete != null) { return concrete;"
      },
      {
        "txt": "} } return null; } @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { ValueInstantiator valueInstantiator;"
      },
      {
        "txt": "try { valueInstantiator = findValueInstantiator(ctxt, beanDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, beanDesc, builder); addObjectIdReader(ctxt, beanDesc, builder); addReferenceProperties(ctxt, beanDesc, builder);"
      },
      {
        "txt": "addInjectables(ctxt, beanDesc, builder); final DeserializationConfig config = ctxt.getConfig(); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer; if (type.isAbstract() && !valueInstantiator.canInstantiate()) { deserializer = builder.buildAbstract();"
      },
      {
        "txt": "} else { deserializer = builder.build(); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> buildBuilderBasedDeserializer( DeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc) throws JsonMappingException { ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc); final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, builderDesc, builder);"
      },
      {
        "txt": "addObjectIdReader(ctxt, builderDesc, builder); addReferenceProperties(ctxt, builderDesc, builder); addInjectables(ctxt, builderDesc, builder); JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig(); final String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName; AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null); if (buildMethod != null) { // note: can't yet throw error; may be given build method if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));"
      },
      {
        "txt": "} } builder.setPOJOBuilder(buildMethod, builderConfig); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, builderDesc, builder); } } JsonDeserializer<?> deserializer = builder.buildBuilderBased( valueType, buildMethodName);"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, builderDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException"
      },
      {
        "txt": "{ ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo(); if (objectIdInfo == null) { return; } Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType idType; SettableBeanProperty idProp; ObjectIdGenerator<?> gen; ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);"
      },
      {
        "txt": "if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work PropertyName propName = objectIdInfo.getPropertyName(); idProp = builder.findProperty(propName); if (idProp == null) { throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": can not find property with name '\"+propName+\"'\"); } idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); } else {"
      },
      {
        "txt": "JavaType type = ctxt.constructType(implClass); idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; idProp = null; gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo); } JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver)); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc)); addBeanProps(ctxt, beanDesc, builder); AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS); if (am != null) { // should never be null"
      },
      {
        "txt": "SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(\"cause\")); SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0)); if (prop != null) { builder.addOrReplaceProperty(prop, true); } } builder.addIgnorable(\"localizedMessage\"); builder.addIgnorable(\"suppressed\");"
      },
      {
        "txt": "builder.addIgnorable(\"message\"); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer = builder.build(); if (deserializer instanceof BeanDeserializer) { deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer); }"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt, BeanDescription beanDesc) { return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());"
      },
      {
        "txt": "} protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null; final boolean hasCreatorProps = (creatorProps != null);"
      },
      {
        "txt": "JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.findIgnoredForDeserialization(); for (String propName : ignored) { builder.addIgnorable(propName);"
      },
      {
        "txt": "} } else { ignored = Collections.emptySet(); } AnnotatedMethod anySetterMethod = beanDesc.findAnySetter(); AnnotatedMember anySetterField = null; if (anySetterMethod != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod)); } else {"
      },
      {
        "txt": "anySetterField = beanDesc.findAnySetterField(); if(anySetterField != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField)); } } if (anySetterMethod == null && anySetterField == null) { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames(); if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName);"
      },
      {
        "txt": "} } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);"
      },
      {
        "txt": "} } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { JavaType propertyType = propDef.getSetter().getParameterType(0); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { JavaType propertyType = propDef.getField().getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);"
      },
      {
        "txt": "} else if (useGettersAsSetters && propDef.hasGetter()) { AnnotatedMethod getter = propDef.getGetter(); Class<?> rawPropertyType = getter.getRawType(); if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName();"
      },
      {
        "txt": "CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break; } } } if (cprop == null) {"
      },
      {
        "txt": "List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n); continue; } if (prop != null) {"
      },
      {
        "txt": "cprop.setFallbackSetter(prop); } prop = cprop; builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {"
      },
      {
        "txt": "views = NO_VIEWS; } } prop.setViews(views); builder.addProperty(prop); } } } protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder,"
      },
      {
        "txt": "List<BeanPropertyDefinition> propDefsIn, Set<String> ignored) throws JsonMappingException { ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>( Math.max(4, propDefsIn.size())); HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>(); for (BeanPropertyDefinition property : propDefsIn) { String name = property.getName(); if (ignored.contains(name)) { // explicit ignoral using @JsonIgnoreProperties needs to block entries"
      },
      {
        "txt": "continue; } if (!property.hasConstructorParameter()) { // never skip constructor params Class<?> rawPropertyType = null; if (property.hasSetter()) { rawPropertyType = property.getSetter().getRawParameterType(0); } else if (property.hasField()) { rawPropertyType = property.getField().getRawType(); } if ((rawPropertyType != null)"
      },
      {
        "txt": "&& isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) { builder.addIgnorable(name); continue; } } result.add(property); } return result; } protected void addReferenceProperties(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { Map<String,AnnotatedMember> refs = beanDesc.findBackReferenceProperties(); if (refs != null) { for (Map.Entry<String, AnnotatedMember> en : refs.entrySet()) { String name = en.getKey(); AnnotatedMember m = en.getValue(); JavaType type; if (m instanceof AnnotatedMethod) {"
      },
      {
        "txt": "type = ((AnnotatedMethod) m).getParameterType(0); } else { type = m.getType(); if (m instanceof AnnotatedParameter) { ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((AnnotatedParameter) m).getIndex()); } } SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct("
      },
      {
        "txt": "ctxt.getConfig(), m, PropertyName.construct(name)); builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type)); } } } protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {"
      },
      {
        "txt": "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables(); if (raw != null) { for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) { AnnotatedMember m = entry.getValue(); builder.addInjectable(PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey()); } } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedMember mutator) throws JsonMappingException { JavaType type = null; if (mutator instanceof AnnotatedMethod) { type = ((AnnotatedMethod) mutator).getParameterType(1); } else if (mutator instanceof AnnotatedField) { type = ((AnnotatedField) mutator).getType().getContentType();"
      },
      {
        "txt": "} type = resolveMemberAndTypeAnnotations(ctxt, mutator, type); BeanProperty.Std prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, PropertyMetadata.STD_OPTIONAL); JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) {"
      },
      {
        "txt": "deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, type); } TypeDeserializer typeDeser = type.getTypeHandler(); return new SettableAnyProperty(prop, mutator, type, deser, typeDeser); } protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, JavaType propType0) throws JsonMappingException {"
      },
      {
        "txt": "AnnotatedMember mutator = propDef.getNonConstructorMutator(); if (mutator == null) { ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\"); } JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop; if (mutator instanceof AnnotatedMethod) { prop = new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);"
      },
      {
        "txt": "} else { prop = new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator); } JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type);"
      },
      {
        "txt": "prop = prop.withValueDeserializer(deser); } AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType(); if (ref != null && ref.isManagedReference()) { prop.setManagedReferenceName(ref.getName()); } ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo(); if (objectIdInfo != null){ prop.setObjectIdInfo(objectIdInfo); }"
      },
      {
        "txt": "return prop; } protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef) throws JsonMappingException { final AnnotatedMethod getter = propDef.getGetter(); JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType()); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,"
      },
      {
        "txt": "beanDesc.getClassAnnotations(), getter); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } return prop;"
      },
      {
        "txt": "} protected boolean isPotentialBeanType(Class<?> type) { String typeStr = ClassUtil.canBeABeanType(type); if (typeStr != null) { throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } if (ClassUtil.isProxyType(type)) { throw new IllegalArgumentException(\"Can not deserialize Proxy class \"+type.getName()+\" as a Bean\"); }"
      },
      {
        "txt": "typeStr = ClassUtil.isLocalType(type, true); if (typeStr != null) { throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } return true; } protected boolean isIgnorableType(DeserializationConfig config, BeanDescription beanDesc, Class<?> type, Map<Class<?>,Boolean> ignoredTypes) { Boolean status = ignoredTypes.get(type);"
      },
      {
        "txt": "if (status != null) { return status.booleanValue(); } ConfigOverride override = config.findConfigOverride(type); if (override != null) { status = override.getIsIgnoredType(); } if (status == null) { BeanDescription desc = config.introspectClassAnnotations(type); status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());"
      },
      {
        "txt": "if (status == null) { status = Boolean.FALSE; } } ignoredTypes.put(type, status); return status.booleanValue(); } protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException"
      },
      {
        "txt": "{ String full = type.getRawClass().getName(); if (_cfgIllegalClassNames.contains(full)) { ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full); } }"
      }
    ]
  },
  {
    "id": 1727,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
    "start-bug-line": 66,
    "end-bug-line": 66,
    "bug": "",
    "fix": "s.add(\"org.springframework.aop.support.AbstractBeanFactoryPointcutAdvisor\"); s.add(\"org.springframework.beans.factory.config.PropertyPathFactoryBean\"); s.add(\"com.mchange.v2.c3p0.JndiRefForwardingDataSource\"); s.add(\"com.mchange.v2.c3p0.WrapperConnectionPoolDataSource\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder; import com.fasterxml.jackson.databind.cfg.DeserializerFactoryConfig;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.ConfigOverride; import com.fasterxml.jackson.databind.deser.impl.*; import com.fasterxml.jackson.databind.deser.std.ThrowableDeserializer; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.SimpleBeanPropertyDefinition; public class BeanDeserializerFactory extends BasicDeserializerFactory implements java.io.Serializable // since 2.1"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1; private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class }; private final static Class<?>[] NO_VIEWS = new Class<?>[0]; protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES; static { Set<String> s = new HashSet<>(); s.add(\"org.apache.commons.collections.functors.InvokerTransformer\"); s.add(\"org.apache.commons.collections.functors.InstantiateTransformer\"); s.add(\"org.apache.commons.collections4.functors.InvokerTransformer\");"
      },
      {
        "txt": "s.add(\"org.codehaus.groovy.runtime.ConvertedClosure\"); s.add(\"org.codehaus.groovy.runtime.MethodClosure\"); s.add(\"org.springframework.beans.factory.ObjectFactory\"); s.add(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\"); s.add(\"org.apache.xalan.xsltc.trax.TemplatesImpl\"); s.add(\"com.sun.rowset.JdbcRowSetImpl\"); <extra_id_0> DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s); } protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES; public final static BeanDeserializerFactory instance = new BeanDeserializerFactory( new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) {"
      },
      {
        "txt": "new DeserializerFactoryConfig()); public BeanDeserializerFactory(DeserializerFactoryConfig config) { super(config); } @Override public DeserializerFactory withConfig(DeserializerFactoryConfig config) { if (_factoryConfig == config) { return this; }"
      },
      {
        "txt": "if (getClass() != BeanDeserializerFactory.class) { throw new IllegalStateException(\"Subtype of BeanDeserializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \" +\"additional deserializer definitions\"); } return new BeanDeserializerFactory(config); } @Override public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); JsonDeserializer<Object> custom = _findCustomBeanDeserializer(type, config, beanDesc); if (custom != null) { return custom; } if (type.isThrowable()) { return buildThrowableDeserializer(ctxt, type, beanDesc); }"
      },
      {
        "txt": "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) { JavaType concreteType = materializeAbstractType(ctxt, type, beanDesc); if (concreteType != null) { beanDesc = config.introspect(concreteType); return buildBeanDeserializer(ctxt, concreteType, beanDesc); } } @SuppressWarnings(\"unchecked\") JsonDeserializer<Object> deser = (JsonDeserializer<Object>) findStdDeserializer(ctxt, type, beanDesc); if (deser != null) {"
      },
      {
        "txt": "return deser; } if (!isPotentialBeanType(type.getRawClass())) { return null; } checkIllegalTypes(ctxt, type, beanDesc); return buildBeanDeserializer(ctxt, type, beanDesc); } @Override public JsonDeserializer<Object> createBuilderBasedDeserializer("
      },
      {
        "txt": "DeserializationContext ctxt, JavaType valueType, BeanDescription beanDesc, Class<?> builderClass) throws JsonMappingException { JavaType builderType = ctxt.constructType(builderClass); BeanDescription builderDesc = ctxt.getConfig().introspectForBuilder(builderType); return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc); } protected JsonDeserializer<?> findStdDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { JsonDeserializer<?> deser = findDefaultDeserializer(ctxt, type, beanDesc); if (deser != null) { if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deser = mod.modifyDeserializer(ctxt.getConfig(), beanDesc, deser); } } }"
      },
      {
        "txt": "return deser; } protected JavaType materializeAbstractType(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) { JavaType concrete = r.resolveAbstractType(ctxt.getConfig(), beanDesc); if (concrete != null) { return concrete;"
      },
      {
        "txt": "} } return null; } @SuppressWarnings(\"unchecked\") public JsonDeserializer<Object> buildBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { ValueInstantiator valueInstantiator;"
      },
      {
        "txt": "try { valueInstantiator = findValueInstantiator(ctxt, beanDesc); } catch (NoClassDefFoundError error) { return new ErrorThrowingDeserializer(error); } BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, beanDesc, builder); addObjectIdReader(ctxt, beanDesc, builder); addReferenceProperties(ctxt, beanDesc, builder);"
      },
      {
        "txt": "addInjectables(ctxt, beanDesc, builder); final DeserializationConfig config = ctxt.getConfig(); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer; if (type.isAbstract() && !valueInstantiator.canInstantiate()) { deserializer = builder.buildAbstract();"
      },
      {
        "txt": "} else { deserializer = builder.build(); } if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected JsonDeserializer<Object> buildBuilderBasedDeserializer( DeserializationContext ctxt, JavaType valueType, BeanDescription builderDesc) throws JsonMappingException { ValueInstantiator valueInstantiator = findValueInstantiator(ctxt, builderDesc); final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, builderDesc); builder.setValueInstantiator(valueInstantiator); addBeanProps(ctxt, builderDesc, builder);"
      },
      {
        "txt": "addObjectIdReader(ctxt, builderDesc, builder); addReferenceProperties(ctxt, builderDesc, builder); addInjectables(ctxt, builderDesc, builder); JsonPOJOBuilder.Value builderConfig = builderDesc.findPOJOBuilderConfig(); final String buildMethodName = (builderConfig == null) ? \"build\" : builderConfig.buildMethodName; AnnotatedMethod buildMethod = builderDesc.findMethod(buildMethodName, null); if (buildMethod != null) { // note: can't yet throw error; may be given build method if (config.canOverrideAccessModifiers()) { ClassUtil.checkAndFixAccess(buildMethod.getMember(), config.isEnabled(MapperFeature.OVERRIDE_PUBLIC_ACCESS_MODIFIERS));"
      },
      {
        "txt": "} } builder.setPOJOBuilder(buildMethod, builderConfig); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, builderDesc, builder); } } JsonDeserializer<?> deserializer = builder.buildBuilderBased( valueType, buildMethodName);"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, builderDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected void addObjectIdReader(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException"
      },
      {
        "txt": "{ ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo(); if (objectIdInfo == null) { return; } Class<?> implClass = objectIdInfo.getGeneratorType(); JavaType idType; SettableBeanProperty idProp; ObjectIdGenerator<?> gen; ObjectIdResolver resolver = ctxt.objectIdResolverInstance(beanDesc.getClassInfo(), objectIdInfo);"
      },
      {
        "txt": "if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work PropertyName propName = objectIdInfo.getPropertyName(); idProp = builder.findProperty(propName); if (idProp == null) { throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": can not find property with name '\"+propName+\"'\"); } idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo.getScope()); } else {"
      },
      {
        "txt": "JavaType type = ctxt.constructType(implClass); idType = ctxt.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; idProp = null; gen = ctxt.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo); } JsonDeserializer<?> deser = ctxt.findRootValueDeserializer(idType); builder.setObjectIdReader(ObjectIdReader.construct(idType, objectIdInfo.getPropertyName(), gen, deser, idProp, resolver)); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public JsonDeserializer<Object> buildThrowableDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException { final DeserializationConfig config = ctxt.getConfig(); BeanDeserializerBuilder builder = constructBeanDeserializerBuilder(ctxt, beanDesc); builder.setValueInstantiator(findValueInstantiator(ctxt, beanDesc)); addBeanProps(ctxt, beanDesc, builder); AnnotatedMethod am = beanDesc.findMethod(\"initCause\", INIT_CAUSE_PARAMS); if (am != null) { // should never be null"
      },
      {
        "txt": "SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct(ctxt.getConfig(), am, new PropertyName(\"cause\")); SettableBeanProperty prop = constructSettableProperty(ctxt, beanDesc, propDef, am.getParameterType(0)); if (prop != null) { builder.addOrReplaceProperty(prop, true); } } builder.addIgnorable(\"localizedMessage\"); builder.addIgnorable(\"suppressed\");"
      },
      {
        "txt": "builder.addIgnorable(\"message\"); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonDeserializer<?> deserializer = builder.build(); if (deserializer instanceof BeanDeserializer) { deserializer = new ThrowableDeserializer((BeanDeserializer) deserializer); }"
      },
      {
        "txt": "if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { deserializer = mod.modifyDeserializer(config, beanDesc, deserializer); } } return (JsonDeserializer<Object>) deserializer; } protected BeanDeserializerBuilder constructBeanDeserializerBuilder(DeserializationContext ctxt, BeanDescription beanDesc) { return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());"
      },
      {
        "txt": "} protected void addBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { final boolean isConcrete = !beanDesc.getType().isAbstract(); final SettableBeanProperty[] creatorProps = isConcrete ? builder.getValueInstantiator().getFromObjectArguments(ctxt.getConfig()) : null; final boolean hasCreatorProps = (creatorProps != null);"
      },
      {
        "txt": "JsonIgnoreProperties.Value ignorals = ctxt.getConfig() .getDefaultPropertyIgnorals(beanDesc.getBeanClass(), beanDesc.getClassInfo()); Set<String> ignored; if (ignorals != null) { boolean ignoreAny = ignorals.getIgnoreUnknown(); builder.setIgnoreUnknownProperties(ignoreAny); ignored = ignorals.findIgnoredForDeserialization(); for (String propName : ignored) { builder.addIgnorable(propName);"
      },
      {
        "txt": "} } else { ignored = Collections.emptySet(); } AnnotatedMethod anySetterMethod = beanDesc.findAnySetter(); AnnotatedMember anySetterField = null; if (anySetterMethod != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterMethod)); } else {"
      },
      {
        "txt": "anySetterField = beanDesc.findAnySetterField(); if(anySetterField != null) { builder.setAnySetter(constructAnySetter(ctxt, beanDesc, anySetterField)); } } if (anySetterMethod == null && anySetterField == null) { Collection<String> ignored2 = beanDesc.getIgnoredPropertyNames(); if (ignored2 != null) { for (String propName : ignored2) { builder.addIgnorable(propName);"
      },
      {
        "txt": "} } } final boolean useGettersAsSetters = ctxt.isEnabled(MapperFeature.USE_GETTERS_AS_SETTERS) && ctxt.isEnabled(MapperFeature.AUTO_DETECT_GETTERS); List<BeanPropertyDefinition> propDefs = filterBeanProps(ctxt, beanDesc, builder, beanDesc.findProperties(), ignored); if (_factoryConfig.hasDeserializerModifiers()) { for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) { propDefs = mod.updateProperties(ctxt.getConfig(), beanDesc, propDefs);"
      },
      {
        "txt": "} } for (BeanPropertyDefinition propDef : propDefs) { SettableBeanProperty prop = null; if (propDef.hasSetter()) { JavaType propertyType = propDef.getSetter().getParameterType(0); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType); } else if (propDef.hasField()) { JavaType propertyType = propDef.getField().getType(); prop = constructSettableProperty(ctxt, beanDesc, propDef, propertyType);"
      },
      {
        "txt": "} else if (useGettersAsSetters && propDef.hasGetter()) { AnnotatedMethod getter = propDef.getGetter(); Class<?> rawPropertyType = getter.getRawType(); if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) { prop = constructSetterlessProperty(ctxt, beanDesc, propDef); } } if (hasCreatorProps && propDef.hasConstructorParameter()) { final String name = propDef.getName();"
      },
      {
        "txt": "CreatorProperty cprop = null; if (creatorProps != null) { for (SettableBeanProperty cp : creatorProps) { if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) { cprop = (CreatorProperty) cp; break; } } } if (cprop == null) {"
      },
      {
        "txt": "List<String> n = new ArrayList<>(); for (SettableBeanProperty cp : creatorProps) { n.add(cp.getName()); } ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"Could not find creator property with name '%s' (known Creator properties: %s)\", name, n); continue; } if (prop != null) {"
      },
      {
        "txt": "cprop.setFallbackSetter(prop); } prop = cprop; builder.addCreatorProperty(cprop); continue; } if (prop != null) { Class<?>[] views = propDef.findViews(); if (views == null) { if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {"
      },
      {
        "txt": "views = NO_VIEWS; } } prop.setViews(views); builder.addProperty(prop); } } } protected List<BeanPropertyDefinition> filterBeanProps(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder,"
      },
      {
        "txt": "List<BeanPropertyDefinition> propDefsIn, Set<String> ignored) throws JsonMappingException { ArrayList<BeanPropertyDefinition> result = new ArrayList<BeanPropertyDefinition>( Math.max(4, propDefsIn.size())); HashMap<Class<?>,Boolean> ignoredTypes = new HashMap<Class<?>,Boolean>(); for (BeanPropertyDefinition property : propDefsIn) { String name = property.getName(); if (ignored.contains(name)) { // explicit ignoral using @JsonIgnoreProperties needs to block entries"
      },
      {
        "txt": "continue; } if (!property.hasConstructorParameter()) { // never skip constructor params Class<?> rawPropertyType = null; if (property.hasSetter()) { rawPropertyType = property.getSetter().getRawParameterType(0); } else if (property.hasField()) { rawPropertyType = property.getField().getRawType(); } if ((rawPropertyType != null)"
      },
      {
        "txt": "&& isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) { builder.addIgnorable(name); continue; } } result.add(property); } return result; } protected void addReferenceProperties(DeserializationContext ctxt,"
      },
      {
        "txt": "BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException { Map<String,AnnotatedMember> refs = beanDesc.findBackReferenceProperties(); if (refs != null) { for (Map.Entry<String, AnnotatedMember> en : refs.entrySet()) { String name = en.getKey(); AnnotatedMember m = en.getValue(); JavaType type; if (m instanceof AnnotatedMethod) {"
      },
      {
        "txt": "type = ((AnnotatedMethod) m).getParameterType(0); } else { type = m.getType(); if (m instanceof AnnotatedParameter) { ctxt.reportBadTypeDefinition(beanDesc, \"Can not bind back references as Creator parameters: type %s (reference '%s', parameter index #%d)\", beanDesc.getBeanClass().getName(), name, ((AnnotatedParameter) m).getIndex()); } } SimpleBeanPropertyDefinition propDef = SimpleBeanPropertyDefinition.construct("
      },
      {
        "txt": "ctxt.getConfig(), m, PropertyName.construct(name)); builder.addBackReferenceProperty(name, constructSettableProperty(ctxt, beanDesc, propDef, type)); } } } protected void addInjectables(DeserializationContext ctxt, BeanDescription beanDesc, BeanDeserializerBuilder builder) throws JsonMappingException {"
      },
      {
        "txt": "Map<Object, AnnotatedMember> raw = beanDesc.findInjectables(); if (raw != null) { for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) { AnnotatedMember m = entry.getValue(); builder.addInjectable(PropertyName.construct(m.getName()), m.getType(), beanDesc.getClassAnnotations(), m, entry.getKey()); } } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") protected SettableAnyProperty constructAnySetter(DeserializationContext ctxt, BeanDescription beanDesc, AnnotatedMember mutator) throws JsonMappingException { JavaType type = null; if (mutator instanceof AnnotatedMethod) { type = ((AnnotatedMethod) mutator).getParameterType(1); } else if (mutator instanceof AnnotatedField) { type = ((AnnotatedField) mutator).getType().getContentType();"
      },
      {
        "txt": "} type = resolveMemberAndTypeAnnotations(ctxt, mutator, type); BeanProperty.Std prop = new BeanProperty.Std(PropertyName.construct(mutator.getName()), type, null, beanDesc.getClassAnnotations(), mutator, PropertyMetadata.STD_OPTIONAL); JsonDeserializer<Object> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) {"
      },
      {
        "txt": "deser = (JsonDeserializer<Object>) ctxt.handlePrimaryContextualization(deser, prop, type); } TypeDeserializer typeDeser = type.getTypeHandler(); return new SettableAnyProperty(prop, mutator, type, deser, typeDeser); } protected SettableBeanProperty constructSettableProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef, JavaType propType0) throws JsonMappingException {"
      },
      {
        "txt": "AnnotatedMember mutator = propDef.getNonConstructorMutator(); if (mutator == null) { ctxt.reportBadPropertyDefinition(beanDesc, propDef, \"No non-constructor mutator available\"); } JavaType type = resolveMemberAndTypeAnnotations(ctxt, mutator, propType0); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop; if (mutator instanceof AnnotatedMethod) { prop = new MethodProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedMethod) mutator);"
      },
      {
        "txt": "} else { prop = new FieldProperty(propDef, type, typeDeser, beanDesc.getClassAnnotations(), (AnnotatedField) mutator); } JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, mutator); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type);"
      },
      {
        "txt": "prop = prop.withValueDeserializer(deser); } AnnotationIntrospector.ReferenceProperty ref = propDef.findReferenceType(); if (ref != null && ref.isManagedReference()) { prop.setManagedReferenceName(ref.getName()); } ObjectIdInfo objectIdInfo = propDef.findObjectIdInfo(); if (objectIdInfo != null){ prop.setObjectIdInfo(objectIdInfo); }"
      },
      {
        "txt": "return prop; } protected SettableBeanProperty constructSetterlessProperty(DeserializationContext ctxt, BeanDescription beanDesc, BeanPropertyDefinition propDef) throws JsonMappingException { final AnnotatedMethod getter = propDef.getGetter(); JavaType type = resolveMemberAndTypeAnnotations(ctxt, getter, getter.getType()); TypeDeserializer typeDeser = type.getTypeHandler(); SettableBeanProperty prop = new SetterlessProperty(propDef, type, typeDeser,"
      },
      {
        "txt": "beanDesc.getClassAnnotations(), getter); JsonDeserializer<?> deser = findDeserializerFromAnnotation(ctxt, getter); if (deser == null) { deser = type.getValueHandler(); } if (deser != null) { deser = ctxt.handlePrimaryContextualization(deser, prop, type); prop = prop.withValueDeserializer(deser); } return prop;"
      },
      {
        "txt": "} protected boolean isPotentialBeanType(Class<?> type) { String typeStr = ClassUtil.canBeABeanType(type); if (typeStr != null) { throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } if (ClassUtil.isProxyType(type)) { throw new IllegalArgumentException(\"Can not deserialize Proxy class \"+type.getName()+\" as a Bean\"); }"
      },
      {
        "txt": "typeStr = ClassUtil.isLocalType(type, true); if (typeStr != null) { throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\"); } return true; } protected boolean isIgnorableType(DeserializationConfig config, BeanDescription beanDesc, Class<?> type, Map<Class<?>,Boolean> ignoredTypes) { Boolean status = ignoredTypes.get(type);"
      },
      {
        "txt": "if (status != null) { return status.booleanValue(); } ConfigOverride override = config.findConfigOverride(type); if (override != null) { status = override.getIsIgnoredType(); } if (status == null) { BeanDescription desc = config.introspectClassAnnotations(type); status = config.getAnnotationIntrospector().isIgnorableType(desc.getClassInfo());"
      },
      {
        "txt": "if (status == null) { status = Boolean.FALSE; } } ignoredTypes.put(type, status); return status.booleanValue(); } protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException"
      },
      {
        "txt": "{ String full = type.getRawClass().getName(); if (_cfgIllegalClassNames.contains(full)) { ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full); } }"
      }
    ]
  }
]
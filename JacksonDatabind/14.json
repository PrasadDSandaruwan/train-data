[
  {
    "id": 1354,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
    "start-bug-line": 1476,
    "end-bug-line": 1476,
    "bug": "JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, JSON_NODE_TYPE);",
    "fix": "JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.net.URL; import java.util.Iterator; import java.util.Locale; import java.util.Map; import java.util.TimeZone; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.core.type.TypeReference;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.DataFormatReaders; import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext; import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.NullNode; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.databind.type.SimpleType; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.RootNameLookup;"
      },
      {
        "txt": "public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1L; // since 2.5 private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final DeserializationConfig _config; protected final DefaultDeserializationContext _context; protected final JsonFactory _parserFactory; protected final boolean _unwrapRoot;"
      },
      {
        "txt": "protected final JavaType _valueType; protected final JsonDeserializer<Object> _rootDeserializer; protected final Object _valueToUpdate; protected final FormatSchema _schema; protected final InjectableValues _injectableValues; protected final DataFormatReaders _dataFormatReaders; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers; protected final RootNameLookup _rootNames; protected ObjectReader(ObjectMapper mapper, DeserializationConfig config) { this(mapper, config, null, null, null, null);"
      },
      {
        "txt": "} protected ObjectReader(ObjectMapper mapper, DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues) { _config = config; _context = mapper._deserializationContext; _rootDeserializers = mapper._rootDeserializers; _parserFactory = mapper._jsonFactory; _rootNames = mapper._rootNames;"
      },
      {
        "txt": "_valueType = valueType; _valueToUpdate = valueToUpdate; if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\"); } _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _rootDeserializer = _prefetchRootDeserializer(config, valueType); _dataFormatReaders = null;"
      },
      {
        "txt": "} protected ObjectReader(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory;"
      },
      {
        "txt": "_rootNames = base._rootNames; _valueType = valueType; _rootDeserializer = rootDeser; _valueToUpdate = valueToUpdate; if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\"); } _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping();"
      },
      {
        "txt": "_dataFormatReaders = dataFormatReaders; } protected ObjectReader(ObjectReader base, DeserializationConfig config) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _rootNames = base._rootNames; _valueType = base._valueType;"
      },
      {
        "txt": "_rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = base._dataFormatReaders; } protected ObjectReader(ObjectReader base, JsonFactory f) { _config = base._config"
      },
      {
        "txt": ".with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering()); _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = f; _rootNames = base._rootNames; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues;"
      },
      {
        "txt": "_unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; } @Override public Version version() { return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } protected ObjectReader _new(ObjectReader base, JsonFactory f) { return new ObjectReader(base, f); }"
      },
      {
        "txt": "protected ObjectReader _new(ObjectReader base, DeserializationConfig config) { return new ObjectReader(base, config); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders); }"
      },
      {
        "txt": "protected <T> MappingIterator<T> _newIterator(JavaType valueType, JsonParser parser, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean parserManaged, Object valueToUpdate) { return new MappingIterator<T>(valueType, parser, ctxt, deser, parserManaged, valueToUpdate); } protected JsonToken _initForReading(JsonParser p) throws IOException { if (_schema != null) {"
      },
      {
        "txt": "p.setSchema(_schema); } _config.initialize(p); // since 2.5 JsonToken t = p.getCurrentToken(); if (t == null) { // and then we must get something... t = p.nextToken(); if (t == null) { throw JsonMappingException.from(p, \"No content to map due to end-of-input\"); } }"
      },
      {
        "txt": "return t; } protected void _initForMultiRead(JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); // since 2.5 } public ObjectReader with(DeserializationFeature feature) { return _with(_config.with(feature));"
      },
      {
        "txt": "} public ObjectReader with(DeserializationFeature first, DeserializationFeature... other) { return _with(_config.with(first, other)); } public ObjectReader withFeatures(DeserializationFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(DeserializationFeature feature) {"
      },
      {
        "txt": "return _with(_config.without(feature)); } public ObjectReader without(DeserializationFeature first, DeserializationFeature... other) { return _with(_config.without(first, other)); } public ObjectReader withoutFeatures(DeserializationFeature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(JsonParser.Feature feature) {"
      },
      {
        "txt": "return _with(_config.with(feature)); } public ObjectReader withFeatures(JsonParser.Feature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(JsonParser.Feature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(JsonParser.Feature... features) { return _with(_config.withoutFeatures(features));"
      },
      {
        "txt": "} public ObjectReader with(DeserializationConfig config) { return _with(config); } public ObjectReader with(InjectableValues injectableValues) { if (_injectableValues == injectableValues) { return this; } return _new(this, _config,"
      },
      {
        "txt": "_valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders); } public ObjectReader with(JsonNodeFactory f) { return _with(_config.with(f)); } public ObjectReader with(JsonFactory f) { if (f == _parserFactory) { return this; }"
      },
      {
        "txt": "ObjectReader r = _new(this, f); if (f.getCodec() == null) { f.setCodec(r); } return r; } public ObjectReader withRootName(String rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader with(FormatSchema schema)"
      },
      {
        "txt": "{ if (_schema == schema) { return this; } _verifySchemaType(schema); return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders); } public ObjectReader forType(JavaType valueType) {"
      },
      {
        "txt": "if (valueType != null && valueType.equals(_valueType)) { return this; } JsonDeserializer<Object> rootDeser = _prefetchRootDeserializer(_config, valueType); DataFormatReaders det = _dataFormatReaders; if (det != null) { det = det.withType(valueType); } return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det);"
      },
      {
        "txt": "} public ObjectReader forType(Class<?> valueType) { return forType(_config.constructType(valueType)); } public ObjectReader forType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } @Deprecated public ObjectReader withType(JavaType valueType) { return forType(valueType);"
      },
      {
        "txt": "} @Deprecated public ObjectReader withType(Class<?> valueType) { return forType(_config.constructType(valueType)); } @Deprecated public ObjectReader withType(java.lang.reflect.Type valueType) { return forType(_config.getTypeFactory().constructType(valueType)); } @Deprecated"
      },
      {
        "txt": "public ObjectReader withType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } public ObjectReader withValueToUpdate(Object value) { if (value == _valueToUpdate) return this; if (value == null) { throw new IllegalArgumentException(\"cat not update null value\"); } JavaType t;"
      },
      {
        "txt": "if (_valueType == null) { t = _config.constructType(value.getClass()); } else { t = _valueType; } return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders); } public ObjectReader withView(Class<?> activeView) { return _with(_config.withView(activeView));"
      },
      {
        "txt": "} public ObjectReader with(Locale l) { return _with(_config.with(l)); } public ObjectReader with(TimeZone tz) { return _with(_config.with(tz)); } public ObjectReader withHandler(DeserializationProblemHandler h) { return _with(_config.withHandler(h)); }"
      },
      {
        "txt": "public ObjectReader with(Base64Variant defaultBase64) { return _with(_config.with(defaultBase64)); } public ObjectReader withFormatDetection(ObjectReader... readers) { return withFormatDetection(new DataFormatReaders(readers)); } public ObjectReader withFormatDetection(DataFormatReaders readers) { return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers); }"
      },
      {
        "txt": "public ObjectReader with(ContextAttributes attrs) { return _with(_config.with(attrs)); } public ObjectReader withAttributes(Map<Object,Object> attrs) { return _with(_config.withAttributes(attrs)); } public ObjectReader withAttribute(Object key, Object value) { return _with( _config.withAttribute(key, value)); } public ObjectReader withoutAttribute(Object key) {"
      },
      {
        "txt": "return _with(_config.withoutAttribute(key)); } protected ObjectReader _with(DeserializationConfig newConfig) { if (newConfig == _config) { return this; } ObjectReader r = _new(this, newConfig); if (_dataFormatReaders != null) { r = r.withFormatDetection(_dataFormatReaders.with(newConfig)); }"
      },
      {
        "txt": "return r; } public boolean isEnabled(DeserializationFeature f) { return _config.isEnabled(f); } public boolean isEnabled(MapperFeature f) { return _config.isEnabled(f); } public boolean isEnabled(JsonParser.Feature f) { return _parserFactory.isEnabled(f);"
      },
      {
        "txt": "} public DeserializationConfig getConfig() { return _config; } @Override public JsonFactory getFactory() { return _parserFactory; } @Deprecated @Override"
      },
      {
        "txt": "public JsonFactory getJsonFactory() { return _parserFactory; } public TypeFactory getTypeFactory() { return _config.getTypeFactory(); } public ContextAttributes getAttributes() { return _config.getAttributes(); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(JsonParser jp) throws IOException, JsonProcessingException { return (T) _bind(jp, _valueToUpdate); } @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "return (T) withType(valueType).readValue(jp); } @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return (T) withType(valueTypeRef).readValue(jp); } @Override"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return (T) withType((JavaType)valueType).readValue(jp); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { return (T) withType(valueType).readValue(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, Class<T> valueType)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return withType(valueTypeRef).readValues(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, ResolvedType valueType)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { return readValues(jp, (JavaType) valueType); } public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override public JsonNode createArrayNode() { return _config.getNodeFactory().arrayNode();"
      },
      {
        "txt": "} @Override public JsonNode createObjectNode() { return _config.getNodeFactory().objectNode(); } @Override public JsonParser treeAsTokens(TreeNode n) { return new TreeTraversingParser((JsonNode) n, this); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "@Override public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException { return (T) _bindAsTree(jp); } @Override public void writeTree(JsonGenerator jgen, TreeNode rootNode) { throw new UnsupportedOperationException(); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(Reader src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String src)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, 0, src.length); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int length) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, offset, length); } return (T) _bindAndClose(_parserFactory.createParser(src, offset, length), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(File src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(URL src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true);"
      },
      {
        "txt": "} return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonNode src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); }"
      },
      {
        "txt": "return (T) _bindAndClose(treeAsTokens(src), _valueToUpdate); } public JsonNode readTree(InputStream in) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndCloseAsTree(in); } return _bindAndCloseAsTree(_parserFactory.createParser(in)); }"
      },
      {
        "txt": "public JsonNode readTree(Reader r) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(r); } return _bindAndCloseAsTree(_parserFactory.createParser(r)); } public JsonNode readTree(String json) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { _reportUndetectableSource(json); } return _bindAndCloseAsTree(_parserFactory.createParser(json)); } public <T> MappingIterator<T> readValues(JsonParser jp) throws IOException, JsonProcessingException { DeserializationContext ctxt = createDeserializationContext(jp, _config);"
      },
      {
        "txt": "return _newIterator(_valueType, jp, ctxt, _findRootDeserializer(ctxt, _valueType), false, _valueToUpdate); } public <T> MappingIterator<T> readValues(InputStream src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false); }"
      },
      {
        "txt": "return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(Reader src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } JsonParser p = _parserFactory.createParser(src);"
      },
      {
        "txt": "_initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(String json) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { _reportUndetectableSource(json); } JsonParser p = _parserFactory.createParser(json); _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); }"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } public final <T> MappingIterator<T> readValues(byte[] src) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "return readValues(src, 0, src.length); } public <T> MappingIterator<T> readValues(File src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate);"
      },
      {
        "txt": "} public <T> MappingIterator<T> readValues(URL src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), true); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); }"
      },
      {
        "txt": "@Override public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException { try { return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e; } catch (IOException e) { // should not occur, no real i/o... throw new IllegalArgumentException(e.getMessage(), e); }"
      },
      {
        "txt": "} @Override public void writeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException { throw new UnsupportedOperationException(\"Not implemented for ObjectReader\"); } protected Object _bind(JsonParser jp, Object valueToUpdate) throws IOException { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) {"
      },
      {
        "txt": "if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue(); } else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { // pointing to event other than null DeserializationContext ctxt = createDeserializationContext(jp, _config);"
      },
      {
        "txt": "JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser); } else { if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate; }"
      },
      {
        "txt": "} } jp.clearCurrentToken(); return result; } protected Object _bindAndClose(JsonParser jp, Object valueToUpdate) throws IOException { try { Object result; JsonToken t = _initForReading(jp);"
      },
      {
        "txt": "if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue(); } else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else {"
      },
      {
        "txt": "DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser); } else { if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate;"
      },
      {
        "txt": "} } } return result; } finally { try { jp.close(); } catch (IOException ioe) { } } }"
      },
      {
        "txt": "protected JsonNode _bindAndCloseAsTree(JsonParser jp) throws IOException { try { return _bindAsTree(jp); } finally { try { jp.close(); } catch (IOException ioe) { } } } protected JsonNode _bindAsTree(JsonParser jp) throws IOException"
      },
      {
        "txt": "JsonNode result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL || t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = NullNode.instance; } else { DeserializationContext ctxt = createDeserializationContext(jp, _config); <extra_id_0> if (_unwrapRoot) { result = (JsonNode) _unwrapAndDeserialize(jp, ctxt, JSON_NODE_TYPE, deser); } else { result = (JsonNode) deser.deserialize(jp, ctxt); } }"
      },
      {
        "txt": "} } jp.clearCurrentToken(); return result; } protected <T> MappingIterator<T> _bindAndReadValues(JsonParser p, Object valueToUpdate) throws IOException { _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config);"
      },
      {
        "txt": "return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, JavaType rootType, JsonDeserializer<Object> deser) throws IOException { String expName = _config.getRootName(); if (expName == null) { PropertyName pname = _rootNames.findRootName(rootType, _config); expName = pname.getSimpleName();"
      },
      {
        "txt": "} if (jp.getCurrentToken() != JsonToken.START_OBJECT) { throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } if (jp.nextToken() != JsonToken.FIELD_NAME) { throw JsonMappingException.from(jp, \"Current token not FIELD_NAME (to contain expected root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } String actualName = jp.getCurrentName();"
      },
      {
        "txt": "if (!expName.equals(actualName)) { throw JsonMappingException.from(jp, \"Root name '\"+actualName+\"' does not match expected ('\" +expName+\"') for type \"+rootType); } jp.nextToken(); Object result; if (_valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, _valueToUpdate);"
      },
      {
        "txt": "result = _valueToUpdate; } if (jp.nextToken() != JsonToken.END_OBJECT) { throw JsonMappingException.from(jp, \"Current token not END_OBJECT (to match wrapper object with root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } return result; } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType)"
      },
      {
        "txt": "throws JsonMappingException { if (_rootDeserializer != null) { return _rootDeserializer; } if (valueType == null) { throw new JsonMappingException(\"No value type configured for ObjectReader\"); } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser != null) {"
      },
      {
        "txt": "return deser; } deser = ctxt.findRootValueDeserializer(valueType); if (deser == null) { // can this happen? throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType); } _rootDeserializers.put(valueType, deser); return deser; } protected JsonDeserializer<Object> _prefetchRootDeserializer(DeserializationConfig config, JavaType valueType)"
      },
      {
        "txt": "{ if (valueType == null || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) { return null; } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser == null) { try { DeserializationContext ctxt = createDeserializationContext(null, _config); deser = ctxt.findRootValueDeserializer(valueType); if (deser != null) {"
      },
      {
        "txt": "_rootDeserializers.put(valueType, deser); } return deser; } catch (JsonProcessingException e) { } } return deser; } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException"
      },
      {
        "txt": "{ DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser jp = match.createParserWithMatch(); return match.getReader()._bindAndClose(jp, _valueToUpdate); } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing)"
      },
      {
        "txt": "throws IOException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndClose(p, _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"resource\") protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing) throws IOException, JsonProcessingException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) {"
      },
      {
        "txt": "p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndReadValues(p, _valueToUpdate); } @SuppressWarnings(\"resource\") protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(in); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match);"
      },
      {
        "txt": "} JsonParser p = match.createParserWithMatch(); p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); return match.getReader()._bindAndCloseAsTree(p); } protected void _reportUnkownFormat(DataFormatReaders detector, DataFormatReaders.Match match) throws JsonProcessingException { throw new JsonParseException(\"Can not detect format from input, does not look like any of detectable formats \" +detector.toString(), JsonLocation.NA);"
      },
      {
        "txt": "} protected void _verifySchemaType(FormatSchema schema) { if (schema != null) { if (!_parserFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_parserFactory.getFormatName()); } } }"
      },
      {
        "txt": "protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { return _context.createInstance(cfg, jp, _injectableValues); } protected void _reportUndetectableSource(Object src) throws JsonProcessingException { throw new JsonParseException(\"Can not use source of type \" +src.getClass().getName()+\" with format auto-detection: must be byte- not char-based\", JsonLocation.NA); }"
      },
      {
        "txt": "protected InputStream _inputStream(URL src) throws IOException { return src.openStream(); } protected InputStream _inputStream(File f) throws IOException { return new FileInputStream(f); }"
      }
    ]
  },
  {
    "id": 1355,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
    "start-bug-line": 1577,
    "end-bug-line": 1577,
    "bug": "",
    "fix": "protected JsonDeserializer<Object> _findTreeDeserializer(DeserializationContext ctxt) throws JsonMappingException { JsonDeserializer<Object> deser = _rootDeserializers.get(JSON_NODE_TYPE); if (deser == null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.*; import java.net.URL; import java.util.Iterator; import java.util.Locale;"
      },
      {
        "txt": "import java.util.Map; import java.util.TimeZone; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.DataFormatReaders; import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext; import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.NullNode; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.databind.type.SimpleType; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.RootNameLookup; public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable // since 2.1 {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; // since 2.5 private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final DeserializationConfig _config; protected final DefaultDeserializationContext _context; protected final JsonFactory _parserFactory; protected final boolean _unwrapRoot; protected final JavaType _valueType; protected final JsonDeserializer<Object> _rootDeserializer; protected final Object _valueToUpdate; protected final FormatSchema _schema;"
      },
      {
        "txt": "protected final InjectableValues _injectableValues; protected final DataFormatReaders _dataFormatReaders; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers; protected final RootNameLookup _rootNames; protected ObjectReader(ObjectMapper mapper, DeserializationConfig config) { this(mapper, config, null, null, null, null); } protected ObjectReader(ObjectMapper mapper, DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)"
      },
      {
        "txt": "{ _config = config; _context = mapper._deserializationContext; _rootDeserializers = mapper._rootDeserializers; _parserFactory = mapper._jsonFactory; _rootNames = mapper._rootNames; _valueType = valueType; _valueToUpdate = valueToUpdate; if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\");"
      },
      {
        "txt": "} _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _rootDeserializer = _prefetchRootDeserializer(config, valueType); _dataFormatReaders = null; } protected ObjectReader(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues,"
      },
      {
        "txt": "DataFormatReaders dataFormatReaders) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _rootNames = base._rootNames; _valueType = valueType; _rootDeserializer = rootDeser; _valueToUpdate = valueToUpdate;"
      },
      {
        "txt": "if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\"); } _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = dataFormatReaders; } protected ObjectReader(ObjectReader base, DeserializationConfig config) {"
      },
      {
        "txt": "_config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _rootNames = base._rootNames; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues;"
      },
      {
        "txt": "_unwrapRoot = config.useRootWrapping(); _dataFormatReaders = base._dataFormatReaders; } protected ObjectReader(ObjectReader base, JsonFactory f) { _config = base._config .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering()); _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = f;"
      },
      {
        "txt": "_rootNames = base._rootNames; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; } @Override"
      },
      {
        "txt": "public Version version() { return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } protected ObjectReader _new(ObjectReader base, JsonFactory f) { return new ObjectReader(base, f); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config) { return new ObjectReader(base, config); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config,"
      },
      {
        "txt": "JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders); } protected <T> MappingIterator<T> _newIterator(JavaType valueType, JsonParser parser, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean parserManaged, Object valueToUpdate) {"
      },
      {
        "txt": "return new MappingIterator<T>(valueType, parser, ctxt, deser, parserManaged, valueToUpdate); } protected JsonToken _initForReading(JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); // since 2.5 JsonToken t = p.getCurrentToken();"
      },
      {
        "txt": "if (t == null) { // and then we must get something... t = p.nextToken(); if (t == null) { throw JsonMappingException.from(p, \"No content to map due to end-of-input\"); } } return t; } protected void _initForMultiRead(JsonParser p) throws IOException { if (_schema != null) {"
      },
      {
        "txt": "p.setSchema(_schema); } _config.initialize(p); // since 2.5 } public ObjectReader with(DeserializationFeature feature) { return _with(_config.with(feature)); } public ObjectReader with(DeserializationFeature first, DeserializationFeature... other) {"
      },
      {
        "txt": "return _with(_config.with(first, other)); } public ObjectReader withFeatures(DeserializationFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(DeserializationFeature feature) { return _with(_config.without(feature)); } public ObjectReader without(DeserializationFeature first, DeserializationFeature... other) {"
      },
      {
        "txt": "return _with(_config.without(first, other)); } public ObjectReader withoutFeatures(DeserializationFeature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(JsonParser.Feature feature) { return _with(_config.with(feature)); } public ObjectReader withFeatures(JsonParser.Feature... features) { return _with(_config.withFeatures(features));"
      },
      {
        "txt": "} public ObjectReader without(JsonParser.Feature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(JsonParser.Feature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(DeserializationConfig config) { return _with(config); }"
      },
      {
        "txt": "public ObjectReader with(InjectableValues injectableValues) { if (_injectableValues == injectableValues) { return this; } return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders); } public ObjectReader with(JsonNodeFactory f) {"
      },
      {
        "txt": "return _with(_config.with(f)); } public ObjectReader with(JsonFactory f) { if (f == _parserFactory) { return this; } ObjectReader r = _new(this, f); if (f.getCodec() == null) { f.setCodec(r); }"
      },
      {
        "txt": "return r; } public ObjectReader withRootName(String rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader with(FormatSchema schema) { if (_schema == schema) { return this; }"
      },
      {
        "txt": "_verifySchemaType(schema); return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders); } public ObjectReader forType(JavaType valueType) { if (valueType != null && valueType.equals(_valueType)) { return this; } JsonDeserializer<Object> rootDeser = _prefetchRootDeserializer(_config, valueType);"
      },
      {
        "txt": "DataFormatReaders det = _dataFormatReaders; if (det != null) { det = det.withType(valueType); } return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det); } public ObjectReader forType(Class<?> valueType) { return forType(_config.constructType(valueType)); }"
      },
      {
        "txt": "public ObjectReader forType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } @Deprecated public ObjectReader withType(JavaType valueType) { return forType(valueType); } @Deprecated public ObjectReader withType(Class<?> valueType) { return forType(_config.constructType(valueType));"
      },
      {
        "txt": "} @Deprecated public ObjectReader withType(java.lang.reflect.Type valueType) { return forType(_config.getTypeFactory().constructType(valueType)); } @Deprecated public ObjectReader withType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } public ObjectReader withValueToUpdate(Object value)"
      },
      {
        "txt": "{ if (value == _valueToUpdate) return this; if (value == null) { throw new IllegalArgumentException(\"cat not update null value\"); } JavaType t; if (_valueType == null) { t = _config.constructType(value.getClass()); } else { t = _valueType;"
      },
      {
        "txt": "} return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders); } public ObjectReader withView(Class<?> activeView) { return _with(_config.withView(activeView)); } public ObjectReader with(Locale l) { return _with(_config.with(l)); }"
      },
      {
        "txt": "public ObjectReader with(TimeZone tz) { return _with(_config.with(tz)); } public ObjectReader withHandler(DeserializationProblemHandler h) { return _with(_config.withHandler(h)); } public ObjectReader with(Base64Variant defaultBase64) { return _with(_config.with(defaultBase64)); } public ObjectReader withFormatDetection(ObjectReader... readers) {"
      },
      {
        "txt": "return withFormatDetection(new DataFormatReaders(readers)); } public ObjectReader withFormatDetection(DataFormatReaders readers) { return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers); } public ObjectReader with(ContextAttributes attrs) { return _with(_config.with(attrs)); } public ObjectReader withAttributes(Map<Object,Object> attrs) {"
      },
      {
        "txt": "return _with(_config.withAttributes(attrs)); } public ObjectReader withAttribute(Object key, Object value) { return _with( _config.withAttribute(key, value)); } public ObjectReader withoutAttribute(Object key) { return _with(_config.withoutAttribute(key)); } protected ObjectReader _with(DeserializationConfig newConfig) { if (newConfig == _config) {"
      },
      {
        "txt": "return this; } ObjectReader r = _new(this, newConfig); if (_dataFormatReaders != null) { r = r.withFormatDetection(_dataFormatReaders.with(newConfig)); } return r; } public boolean isEnabled(DeserializationFeature f) { return _config.isEnabled(f);"
      },
      {
        "txt": "} public boolean isEnabled(MapperFeature f) { return _config.isEnabled(f); } public boolean isEnabled(JsonParser.Feature f) { return _parserFactory.isEnabled(f); } public DeserializationConfig getConfig() { return _config; }"
      },
      {
        "txt": "@Override public JsonFactory getFactory() { return _parserFactory; } @Deprecated @Override public JsonFactory getJsonFactory() { return _parserFactory; } public TypeFactory getTypeFactory() {"
      },
      {
        "txt": "return _config.getTypeFactory(); } public ContextAttributes getAttributes() { return _config.getAttributes(); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp) throws IOException, JsonProcessingException { return (T) _bind(jp, _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { return (T) withType(valueType).readValue(jp); } @SuppressWarnings(\"unchecked\") @Override"
      },
      {
        "txt": "public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return (T) withType(valueTypeRef).readValue(jp); } @Override @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return (T) withType((JavaType)valueType).readValue(jp); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { return (T) withType(valueType).readValue(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override"
      },
      {
        "txt": "public <T> Iterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return withType(valueTypeRef).readValues(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return readValues(jp, (JavaType) valueType); } public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override public JsonNode createArrayNode() { return _config.getNodeFactory().arrayNode(); } @Override public JsonNode createObjectNode() { return _config.getNodeFactory().objectNode();"
      },
      {
        "txt": "} @Override public JsonParser treeAsTokens(TreeNode n) { return new TreeTraversingParser((JsonNode) n, this); } @SuppressWarnings(\"unchecked\") @Override public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "return (T) _bindAsTree(jp); } @Override public void writeTree(JsonGenerator jgen, TreeNode rootNode) { throw new UnsupportedOperationException(); } @SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(Reader src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "_reportUndetectableSource(src); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src);"
      },
      {
        "txt": "} return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, 0, src.length); }"
      },
      {
        "txt": "return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, offset, length); } return (T) _bindAndClose(_parserFactory.createParser(src, offset, length), _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public <T> T readValue(File src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(URL src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(JsonNode src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(treeAsTokens(src), _valueToUpdate); } public JsonNode readTree(InputStream in) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return _detectBindAndCloseAsTree(in); } return _bindAndCloseAsTree(_parserFactory.createParser(in)); } public JsonNode readTree(Reader r) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "_reportUndetectableSource(r); } return _bindAndCloseAsTree(_parserFactory.createParser(r)); } public JsonNode readTree(String json) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); }"
      },
      {
        "txt": "return _bindAndCloseAsTree(_parserFactory.createParser(json)); } public <T> MappingIterator<T> readValues(JsonParser jp) throws IOException, JsonProcessingException { DeserializationContext ctxt = createDeserializationContext(jp, _config); return _newIterator(_valueType, jp, ctxt, _findRootDeserializer(ctxt, _valueType), false, _valueToUpdate); }"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(InputStream src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(Reader src)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } JsonParser p = _parserFactory.createParser(src); _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt,"
      },
      {
        "txt": "_findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(String json) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } JsonParser p = _parserFactory.createParser(json);"
      },
      {
        "txt": "_initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } public final <T> MappingIterator<T> readValues(byte[] src) throws IOException, JsonProcessingException { return readValues(src, 0, src.length); } public <T> MappingIterator<T> readValues(File src) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } public <T> MappingIterator<T> readValues(URL src) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), true); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } @Override public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException { try {"
      },
      {
        "txt": "return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e; } catch (IOException e) { // should not occur, no real i/o... throw new IllegalArgumentException(e.getMessage(), e); } } @Override public void writeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException { throw new UnsupportedOperationException(\"Not implemented for ObjectReader\");"
      },
      {
        "txt": "} protected Object _bind(JsonParser jp, Object valueToUpdate) throws IOException { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue(); } else {"
      },
      {
        "txt": "result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { // pointing to event other than null DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser); } else {"
      },
      {
        "txt": "if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate; } } } jp.clearCurrentToken(); return result;"
      },
      {
        "txt": "} protected Object _bindAndClose(JsonParser jp, Object valueToUpdate) throws IOException { try { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue();"
      },
      {
        "txt": "} else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);"
      },
      {
        "txt": "} else { if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate; } } } return result;"
      },
      {
        "txt": "} finally { try { jp.close(); } catch (IOException ioe) { } } } protected JsonNode _bindAndCloseAsTree(JsonParser jp) throws IOException { try { return _bindAsTree(jp); } finally {"
      },
      {
        "txt": "try { jp.close(); } catch (IOException ioe) { } } } protected JsonNode _bindAsTree(JsonParser jp) throws IOException { JsonNode result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL || t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {"
      },
      {
        "txt": "result = NullNode.instance; } else { DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, JSON_NODE_TYPE); if (_unwrapRoot) { result = (JsonNode) _unwrapAndDeserialize(jp, ctxt, JSON_NODE_TYPE, deser); } else { result = (JsonNode) deser.deserialize(jp, ctxt); } }"
      },
      {
        "txt": "jp.clearCurrentToken(); return result; } protected <T> MappingIterator<T> _bindAndReadValues(JsonParser p, Object valueToUpdate) throws IOException { _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);"
      },
      {
        "txt": "} protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, JavaType rootType, JsonDeserializer<Object> deser) throws IOException { String expName = _config.getRootName(); if (expName == null) { PropertyName pname = _rootNames.findRootName(rootType, _config); expName = pname.getSimpleName(); } if (jp.getCurrentToken() != JsonToken.START_OBJECT) {"
      },
      {
        "txt": "throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } if (jp.nextToken() != JsonToken.FIELD_NAME) { throw JsonMappingException.from(jp, \"Current token not FIELD_NAME (to contain expected root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } String actualName = jp.getCurrentName(); if (!expName.equals(actualName)) { throw JsonMappingException.from(jp, \"Root name '\"+actualName+\"' does not match expected ('\""
      },
      {
        "txt": "+expName+\"') for type \"+rootType); } jp.nextToken(); Object result; if (_valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, _valueToUpdate); result = _valueToUpdate; }"
      },
      {
        "txt": "if (jp.nextToken() != JsonToken.END_OBJECT) { throw JsonMappingException.from(jp, \"Current token not END_OBJECT (to match wrapper object with root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } return result; } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType) throws JsonMappingException {"
      },
      {
        "txt": "if (_rootDeserializer != null) { return _rootDeserializer; } if (valueType == null) { throw new JsonMappingException(\"No value type configured for ObjectReader\"); } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser != null) { return deser; }"
      },
      {
        "txt": "if (deser == null) { // can this happen? throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType); } _rootDeserializers.put(valueType, deser); return deser; } <extra_id_0> protected JsonDeserializer<Object> _prefetchRootDeserializer(DeserializationConfig config, JavaType valueType) { if (valueType == null || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) { return null; } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType);"
      },
      {
        "txt": "} JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser == null) { try { DeserializationContext ctxt = createDeserializationContext(null, _config); deser = ctxt.findRootValueDeserializer(valueType); if (deser != null) { _rootDeserializers.put(valueType, deser); } return deser;"
      },
      {
        "txt": "} catch (JsonProcessingException e) { } } return deser; } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length); if (!match.hasMatch()) {"
      },
      {
        "txt": "_reportUnkownFormat(_dataFormatReaders, match); } JsonParser jp = match.createParserWithMatch(); return match.getReader()._bindAndClose(jp, _valueToUpdate); } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing) throws IOException { if (!match.hasMatch()) {"
      },
      {
        "txt": "_reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndClose(p, _valueToUpdate); } @SuppressWarnings(\"resource\") protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndReadValues(p, _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"resource\") protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(in); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);"
      },
      {
        "txt": "return match.getReader()._bindAndCloseAsTree(p); } protected void _reportUnkownFormat(DataFormatReaders detector, DataFormatReaders.Match match) throws JsonProcessingException { throw new JsonParseException(\"Can not detect format from input, does not look like any of detectable formats \" +detector.toString(), JsonLocation.NA); } protected void _verifySchemaType(FormatSchema schema) {"
      },
      {
        "txt": "if (schema != null) { if (!_parserFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_parserFactory.getFormatName()); } } } protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { return _context.createInstance(cfg, jp, _injectableValues);"
      },
      {
        "txt": "} protected void _reportUndetectableSource(Object src) throws JsonProcessingException { throw new JsonParseException(\"Can not use source of type \" +src.getClass().getName()+\" with format auto-detection: must be byte- not char-based\", JsonLocation.NA); } protected InputStream _inputStream(URL src) throws IOException { return src.openStream(); }"
      },
      {
        "txt": "protected InputStream _inputStream(File f) throws IOException { return new FileInputStream(f); }"
      }
    ]
  },
  {
    "id": 1356,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
    "start-bug-line": 1578,
    "end-bug-line": 1578,
    "bug": "",
    "fix": "deser = ctxt.findRootValueDeserializer(JSON_NODE_TYPE); if (deser == null) { // can this happen? throw new JsonMappingException(\"Can not find a deserializer for type \"+JSON_NODE_TYPE); } _rootDeserializers.put(JSON_NODE_TYPE, deser); } return deser; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.*; import java.net.URL; import java.util.Iterator; import java.util.Locale;"
      },
      {
        "txt": "import java.util.Map; import java.util.TimeZone; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.DataFormatReaders; import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext; import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.NullNode; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.databind.type.SimpleType; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.RootNameLookup; public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable // since 2.1 {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; // since 2.5 private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final DeserializationConfig _config; protected final DefaultDeserializationContext _context; protected final JsonFactory _parserFactory; protected final boolean _unwrapRoot; protected final JavaType _valueType; protected final JsonDeserializer<Object> _rootDeserializer; protected final Object _valueToUpdate; protected final FormatSchema _schema;"
      },
      {
        "txt": "protected final InjectableValues _injectableValues; protected final DataFormatReaders _dataFormatReaders; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers; protected final RootNameLookup _rootNames; protected ObjectReader(ObjectMapper mapper, DeserializationConfig config) { this(mapper, config, null, null, null, null); } protected ObjectReader(ObjectMapper mapper, DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues)"
      },
      {
        "txt": "{ _config = config; _context = mapper._deserializationContext; _rootDeserializers = mapper._rootDeserializers; _parserFactory = mapper._jsonFactory; _rootNames = mapper._rootNames; _valueType = valueType; _valueToUpdate = valueToUpdate; if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\");"
      },
      {
        "txt": "} _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _rootDeserializer = _prefetchRootDeserializer(config, valueType); _dataFormatReaders = null; } protected ObjectReader(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues,"
      },
      {
        "txt": "DataFormatReaders dataFormatReaders) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _rootNames = base._rootNames; _valueType = valueType; _rootDeserializer = rootDeser; _valueToUpdate = valueToUpdate;"
      },
      {
        "txt": "if (valueToUpdate != null && valueType.isArrayType()) { throw new IllegalArgumentException(\"Can not update an array value\"); } _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = dataFormatReaders; } protected ObjectReader(ObjectReader base, DeserializationConfig config) {"
      },
      {
        "txt": "_config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _rootNames = base._rootNames; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues;"
      },
      {
        "txt": "_unwrapRoot = config.useRootWrapping(); _dataFormatReaders = base._dataFormatReaders; } protected ObjectReader(ObjectReader base, JsonFactory f) { _config = base._config .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering()); _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = f;"
      },
      {
        "txt": "_rootNames = base._rootNames; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; } @Override"
      },
      {
        "txt": "public Version version() { return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } protected ObjectReader _new(ObjectReader base, JsonFactory f) { return new ObjectReader(base, f); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config) { return new ObjectReader(base, config); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config,"
      },
      {
        "txt": "JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders); } protected <T> MappingIterator<T> _newIterator(JavaType valueType, JsonParser parser, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean parserManaged, Object valueToUpdate) {"
      },
      {
        "txt": "return new MappingIterator<T>(valueType, parser, ctxt, deser, parserManaged, valueToUpdate); } protected JsonToken _initForReading(JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); // since 2.5 JsonToken t = p.getCurrentToken();"
      },
      {
        "txt": "if (t == null) { // and then we must get something... t = p.nextToken(); if (t == null) { throw JsonMappingException.from(p, \"No content to map due to end-of-input\"); } } return t; } protected void _initForMultiRead(JsonParser p) throws IOException { if (_schema != null) {"
      },
      {
        "txt": "p.setSchema(_schema); } _config.initialize(p); // since 2.5 } public ObjectReader with(DeserializationFeature feature) { return _with(_config.with(feature)); } public ObjectReader with(DeserializationFeature first, DeserializationFeature... other) {"
      },
      {
        "txt": "return _with(_config.with(first, other)); } public ObjectReader withFeatures(DeserializationFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(DeserializationFeature feature) { return _with(_config.without(feature)); } public ObjectReader without(DeserializationFeature first, DeserializationFeature... other) {"
      },
      {
        "txt": "return _with(_config.without(first, other)); } public ObjectReader withoutFeatures(DeserializationFeature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(JsonParser.Feature feature) { return _with(_config.with(feature)); } public ObjectReader withFeatures(JsonParser.Feature... features) { return _with(_config.withFeatures(features));"
      },
      {
        "txt": "} public ObjectReader without(JsonParser.Feature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(JsonParser.Feature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(DeserializationConfig config) { return _with(config); }"
      },
      {
        "txt": "public ObjectReader with(InjectableValues injectableValues) { if (_injectableValues == injectableValues) { return this; } return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders); } public ObjectReader with(JsonNodeFactory f) {"
      },
      {
        "txt": "return _with(_config.with(f)); } public ObjectReader with(JsonFactory f) { if (f == _parserFactory) { return this; } ObjectReader r = _new(this, f); if (f.getCodec() == null) { f.setCodec(r); }"
      },
      {
        "txt": "return r; } public ObjectReader withRootName(String rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader with(FormatSchema schema) { if (_schema == schema) { return this; }"
      },
      {
        "txt": "_verifySchemaType(schema); return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders); } public ObjectReader forType(JavaType valueType) { if (valueType != null && valueType.equals(_valueType)) { return this; } JsonDeserializer<Object> rootDeser = _prefetchRootDeserializer(_config, valueType);"
      },
      {
        "txt": "DataFormatReaders det = _dataFormatReaders; if (det != null) { det = det.withType(valueType); } return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det); } public ObjectReader forType(Class<?> valueType) { return forType(_config.constructType(valueType)); }"
      },
      {
        "txt": "public ObjectReader forType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } @Deprecated public ObjectReader withType(JavaType valueType) { return forType(valueType); } @Deprecated public ObjectReader withType(Class<?> valueType) { return forType(_config.constructType(valueType));"
      },
      {
        "txt": "} @Deprecated public ObjectReader withType(java.lang.reflect.Type valueType) { return forType(_config.getTypeFactory().constructType(valueType)); } @Deprecated public ObjectReader withType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } public ObjectReader withValueToUpdate(Object value)"
      },
      {
        "txt": "{ if (value == _valueToUpdate) return this; if (value == null) { throw new IllegalArgumentException(\"cat not update null value\"); } JavaType t; if (_valueType == null) { t = _config.constructType(value.getClass()); } else { t = _valueType;"
      },
      {
        "txt": "} return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders); } public ObjectReader withView(Class<?> activeView) { return _with(_config.withView(activeView)); } public ObjectReader with(Locale l) { return _with(_config.with(l)); }"
      },
      {
        "txt": "public ObjectReader with(TimeZone tz) { return _with(_config.with(tz)); } public ObjectReader withHandler(DeserializationProblemHandler h) { return _with(_config.withHandler(h)); } public ObjectReader with(Base64Variant defaultBase64) { return _with(_config.with(defaultBase64)); } public ObjectReader withFormatDetection(ObjectReader... readers) {"
      },
      {
        "txt": "return withFormatDetection(new DataFormatReaders(readers)); } public ObjectReader withFormatDetection(DataFormatReaders readers) { return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers); } public ObjectReader with(ContextAttributes attrs) { return _with(_config.with(attrs)); } public ObjectReader withAttributes(Map<Object,Object> attrs) {"
      },
      {
        "txt": "return _with(_config.withAttributes(attrs)); } public ObjectReader withAttribute(Object key, Object value) { return _with( _config.withAttribute(key, value)); } public ObjectReader withoutAttribute(Object key) { return _with(_config.withoutAttribute(key)); } protected ObjectReader _with(DeserializationConfig newConfig) { if (newConfig == _config) {"
      },
      {
        "txt": "return this; } ObjectReader r = _new(this, newConfig); if (_dataFormatReaders != null) { r = r.withFormatDetection(_dataFormatReaders.with(newConfig)); } return r; } public boolean isEnabled(DeserializationFeature f) { return _config.isEnabled(f);"
      },
      {
        "txt": "} public boolean isEnabled(MapperFeature f) { return _config.isEnabled(f); } public boolean isEnabled(JsonParser.Feature f) { return _parserFactory.isEnabled(f); } public DeserializationConfig getConfig() { return _config; }"
      },
      {
        "txt": "@Override public JsonFactory getFactory() { return _parserFactory; } @Deprecated @Override public JsonFactory getJsonFactory() { return _parserFactory; } public TypeFactory getTypeFactory() {"
      },
      {
        "txt": "return _config.getTypeFactory(); } public ContextAttributes getAttributes() { return _config.getAttributes(); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp) throws IOException, JsonProcessingException { return (T) _bind(jp, _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { return (T) withType(valueType).readValue(jp); } @SuppressWarnings(\"unchecked\") @Override"
      },
      {
        "txt": "public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return (T) withType(valueTypeRef).readValue(jp); } @Override @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return (T) withType((JavaType)valueType).readValue(jp); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { return (T) withType(valueType).readValue(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override"
      },
      {
        "txt": "public <T> Iterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException { return withType(valueTypeRef).readValues(jp); } @Override public <T> Iterator<T> readValues(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return readValues(jp, (JavaType) valueType); } public <T> Iterator<T> readValues(JsonParser jp, JavaType valueType)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { return withType(valueType).readValues(jp); } @Override public JsonNode createArrayNode() { return _config.getNodeFactory().arrayNode(); } @Override public JsonNode createObjectNode() { return _config.getNodeFactory().objectNode();"
      },
      {
        "txt": "} @Override public JsonParser treeAsTokens(TreeNode n) { return new TreeTraversingParser((JsonNode) n, this); } @SuppressWarnings(\"unchecked\") @Override public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "return (T) _bindAsTree(jp); } @Override public void writeTree(JsonGenerator jgen, TreeNode rootNode) { throw new UnsupportedOperationException(); } @SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(Reader src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "_reportUndetectableSource(src); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src);"
      },
      {
        "txt": "} return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, 0, src.length); }"
      },
      {
        "txt": "return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, offset, length); } return (T) _bindAndClose(_parserFactory.createParser(src, offset, length), _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public <T> T readValue(File src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(URL src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(JsonNode src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(treeAsTokens(src), _valueToUpdate); } public JsonNode readTree(InputStream in) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return _detectBindAndCloseAsTree(in); } return _bindAndCloseAsTree(_parserFactory.createParser(in)); } public JsonNode readTree(Reader r) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "_reportUndetectableSource(r); } return _bindAndCloseAsTree(_parserFactory.createParser(r)); } public JsonNode readTree(String json) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); }"
      },
      {
        "txt": "return _bindAndCloseAsTree(_parserFactory.createParser(json)); } public <T> MappingIterator<T> readValues(JsonParser jp) throws IOException, JsonProcessingException { DeserializationContext ctxt = createDeserializationContext(jp, _config); return _newIterator(_valueType, jp, ctxt, _findRootDeserializer(ctxt, _valueType), false, _valueToUpdate); }"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(InputStream src) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(Reader src)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } JsonParser p = _parserFactory.createParser(src); _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt,"
      },
      {
        "txt": "_findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(String json) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } JsonParser p = _parserFactory.createParser(json);"
      },
      {
        "txt": "_initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate); } public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException, JsonProcessingException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } public final <T> MappingIterator<T> readValues(byte[] src) throws IOException, JsonProcessingException { return readValues(src, 0, src.length); } public <T> MappingIterator<T> readValues(File src) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), false); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } public <T> MappingIterator<T> readValues(URL src) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), true); } return _bindAndReadValues(_parserFactory.createParser(src), _valueToUpdate); } @Override public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException { try {"
      },
      {
        "txt": "return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e; } catch (IOException e) { // should not occur, no real i/o... throw new IllegalArgumentException(e.getMessage(), e); } } @Override public void writeValue(JsonGenerator jgen, Object value) throws IOException, JsonProcessingException { throw new UnsupportedOperationException(\"Not implemented for ObjectReader\");"
      },
      {
        "txt": "} protected Object _bind(JsonParser jp, Object valueToUpdate) throws IOException { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue(); } else {"
      },
      {
        "txt": "result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { // pointing to event other than null DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser); } else {"
      },
      {
        "txt": "if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate; } } } jp.clearCurrentToken(); return result;"
      },
      {
        "txt": "} protected Object _bindAndClose(JsonParser jp, Object valueToUpdate) throws IOException { try { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { DeserializationContext ctxt = createDeserializationContext(jp, _config); result = _findRootDeserializer(ctxt, _valueType).getNullValue();"
      },
      {
        "txt": "} else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, _valueType); if (_unwrapRoot) { result = _unwrapAndDeserialize(jp, ctxt, _valueType, deser);"
      },
      {
        "txt": "} else { if (valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, valueToUpdate); result = valueToUpdate; } } } return result;"
      },
      {
        "txt": "} finally { try { jp.close(); } catch (IOException ioe) { } } } protected JsonNode _bindAndCloseAsTree(JsonParser jp) throws IOException { try { return _bindAsTree(jp); } finally {"
      },
      {
        "txt": "try { jp.close(); } catch (IOException ioe) { } } } protected JsonNode _bindAsTree(JsonParser jp) throws IOException { JsonNode result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL || t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {"
      },
      {
        "txt": "result = NullNode.instance; } else { DeserializationContext ctxt = createDeserializationContext(jp, _config); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, JSON_NODE_TYPE); if (_unwrapRoot) { result = (JsonNode) _unwrapAndDeserialize(jp, ctxt, JSON_NODE_TYPE, deser); } else { result = (JsonNode) deser.deserialize(jp, ctxt); } }"
      },
      {
        "txt": "jp.clearCurrentToken(); return result; } protected <T> MappingIterator<T> _bindAndReadValues(JsonParser p, Object valueToUpdate) throws IOException { _initForMultiRead(p); p.nextToken(); DeserializationContext ctxt = createDeserializationContext(p, _config); return _newIterator(_valueType, p, ctxt, _findRootDeserializer(ctxt, _valueType), true, _valueToUpdate);"
      },
      {
        "txt": "} protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, JavaType rootType, JsonDeserializer<Object> deser) throws IOException { String expName = _config.getRootName(); if (expName == null) { PropertyName pname = _rootNames.findRootName(rootType, _config); expName = pname.getSimpleName(); } if (jp.getCurrentToken() != JsonToken.START_OBJECT) {"
      },
      {
        "txt": "throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } if (jp.nextToken() != JsonToken.FIELD_NAME) { throw JsonMappingException.from(jp, \"Current token not FIELD_NAME (to contain expected root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } String actualName = jp.getCurrentName(); if (!expName.equals(actualName)) { throw JsonMappingException.from(jp, \"Root name '\"+actualName+\"' does not match expected ('\""
      },
      {
        "txt": "+expName+\"') for type \"+rootType); } jp.nextToken(); Object result; if (_valueToUpdate == null) { result = deser.deserialize(jp, ctxt); } else { deser.deserialize(jp, ctxt, _valueToUpdate); result = _valueToUpdate; }"
      },
      {
        "txt": "if (jp.nextToken() != JsonToken.END_OBJECT) { throw JsonMappingException.from(jp, \"Current token not END_OBJECT (to match wrapper object with root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } return result; } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType) throws JsonMappingException {"
      },
      {
        "txt": "if (_rootDeserializer != null) { return _rootDeserializer; } if (valueType == null) { throw new JsonMappingException(\"No value type configured for ObjectReader\"); } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser != null) { return deser; }"
      },
      {
        "txt": "if (deser == null) { // can this happen? throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType); } _rootDeserializers.put(valueType, deser); return deser; } <extra_id_0> protected JsonDeserializer<Object> _prefetchRootDeserializer(DeserializationConfig config, JavaType valueType) { if (valueType == null || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) { return null; } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType);"
      },
      {
        "txt": "} JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser == null) { try { DeserializationContext ctxt = createDeserializationContext(null, _config); deser = ctxt.findRootValueDeserializer(valueType); if (deser != null) { _rootDeserializers.put(valueType, deser); } return deser;"
      },
      {
        "txt": "} catch (JsonProcessingException e) { } } return deser; } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length); if (!match.hasMatch()) {"
      },
      {
        "txt": "_reportUnkownFormat(_dataFormatReaders, match); } JsonParser jp = match.createParserWithMatch(); return match.getReader()._bindAndClose(jp, _valueToUpdate); } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing) throws IOException { if (!match.hasMatch()) {"
      },
      {
        "txt": "_reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndClose(p, _valueToUpdate); } @SuppressWarnings(\"resource\") protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing)"
      },
      {
        "txt": "throws IOException, JsonProcessingException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndReadValues(p, _valueToUpdate);"
      },
      {
        "txt": "} @SuppressWarnings(\"resource\") protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(in); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);"
      },
      {
        "txt": "return match.getReader()._bindAndCloseAsTree(p); } protected void _reportUnkownFormat(DataFormatReaders detector, DataFormatReaders.Match match) throws JsonProcessingException { throw new JsonParseException(\"Can not detect format from input, does not look like any of detectable formats \" +detector.toString(), JsonLocation.NA); } protected void _verifySchemaType(FormatSchema schema) {"
      },
      {
        "txt": "if (schema != null) { if (!_parserFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_parserFactory.getFormatName()); } } } protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { return _context.createInstance(cfg, jp, _injectableValues);"
      },
      {
        "txt": "} protected void _reportUndetectableSource(Object src) throws JsonProcessingException { throw new JsonParseException(\"Can not use source of type \" +src.getClass().getName()+\" with format auto-detection: must be byte- not char-based\", JsonLocation.NA); } protected InputStream _inputStream(URL src) throws IOException { return src.openStream(); }"
      },
      {
        "txt": "protected InputStream _inputStream(File f) throws IOException { return new FileInputStream(f); }"
      }
    ]
  }
]
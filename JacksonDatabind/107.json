[
  {
    "id": 1790,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/jsontype/impl/TypeDeserializerBase.java",
    "start-bug-line": 165,
    "end-bug-line": 165,
    "bug": "return null;",
    "fix": "return NullifyingDeserializer.instance;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.jsontype.impl; import java.io.IOException; import java.util.Map; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.annotation.JsonTypeInfo; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.BeanProperty; import com.fasterxml.jackson.databind.DeserializationContext; import com.fasterxml.jackson.databind.DeserializationFeature; import com.fasterxml.jackson.databind.JavaType;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JsonDeserializer; import com.fasterxml.jackson.databind.deser.std.NullifyingDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeDeserializer; import com.fasterxml.jackson.databind.jsontype.TypeIdResolver; import com.fasterxml.jackson.databind.util.ClassUtil; public abstract class TypeDeserializerBase extends TypeDeserializer implements java.io.Serializable { private static final long serialVersionUID = 1;"
      },
      {
        "txt": "protected final TypeIdResolver _idResolver; protected final JavaType _baseType; protected final BeanProperty _property; protected final JavaType _defaultImpl; protected final String _typePropertyName; protected final boolean _typeIdVisible; protected final Map<String,JsonDeserializer<Object>> _deserializers; protected JsonDeserializer<Object> _defaultImplDeserializer; protected TypeDeserializerBase(JavaType baseType, TypeIdResolver idRes, String typePropertyName, boolean typeIdVisible, JavaType defaultImpl)"
      },
      {
        "txt": "{ _baseType = baseType; _idResolver = idRes; _typePropertyName = ClassUtil.nonNullString(typePropertyName); _typeIdVisible = typeIdVisible; _deserializers = new ConcurrentHashMap<String, JsonDeserializer<Object>>(16, 0.75f, 2); _defaultImpl = defaultImpl; _property = null; } protected TypeDeserializerBase(TypeDeserializerBase src, BeanProperty property)"
      },
      {
        "txt": "{ _baseType = src._baseType; _idResolver = src._idResolver; _typePropertyName = src._typePropertyName; _typeIdVisible = src._typeIdVisible; _deserializers = src._deserializers; _defaultImpl = src._defaultImpl; _defaultImplDeserializer = src._defaultImplDeserializer; _property = property; }"
      },
      {
        "txt": "@Override public abstract TypeDeserializer forProperty(BeanProperty prop); @Override public abstract JsonTypeInfo.As getTypeInclusion(); public String baseTypeName() { return _baseType.getRawClass().getName(); } @Override public final String getPropertyName() { return _typePropertyName; } @Override public TypeIdResolver getTypeIdResolver() { return _idResolver; } @Override"
      },
      {
        "txt": "public Class<?> getDefaultImpl() { return ClassUtil.rawClass(_defaultImpl); } public JavaType baseType() { return _baseType; } @Override public String toString() { StringBuilder sb = new StringBuilder();"
      },
      {
        "txt": "sb.append('[').append(getClass().getName()); sb.append(\"; base-type:\").append(_baseType); sb.append(\"; id-resolver: \").append(_idResolver); sb.append(']'); return sb.toString(); } protected final JsonDeserializer<Object> _findDeserializer(DeserializationContext ctxt, String typeId) throws IOException { JsonDeserializer<Object> deser = _deserializers.get(typeId);"
      },
      {
        "txt": "JavaType type = _idResolver.typeFromId(ctxt, typeId); if (type == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { JavaType actual = _handleUnknownTypeId(ctxt, typeId); if (actual == null) { // what should this be taken to mean? <extra_id_0> } deser = ctxt.findContextualValueDeserializer(actual, _property); } } else { if ((_baseType != null) && _baseType.getClass() == type.getClass()) {"
      },
      {
        "txt": "if ((_baseType != null) && _baseType.getClass() == type.getClass()) { if (!type.hasGenericTypes()) { type = ctxt.getTypeFactory().constructSpecializedType(_baseType, type.getRawClass()); } } deser = ctxt.findContextualValueDeserializer(type, _property); } _deserializers.put(typeId, deser); }"
      },
      {
        "txt": "return deser; } protected final JsonDeserializer<Object> _findDefaultImplDeserializer(DeserializationContext ctxt) throws IOException { if (_defaultImpl == null) { if (!ctxt.isEnabled(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)) { return NullifyingDeserializer.instance; } return null; }"
      },
      {
        "txt": "Class<?> raw = _defaultImpl.getRawClass(); if (ClassUtil.isBogusClass(raw)) { return NullifyingDeserializer.instance; } synchronized (_defaultImpl) { if (_defaultImplDeserializer == null) { _defaultImplDeserializer = ctxt.findContextualValueDeserializer( _defaultImpl, _property); } return _defaultImplDeserializer;"
      },
      {
        "txt": "} } @Deprecated protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt) throws IOException { return _deserializeWithNativeTypeId(jp, ctxt, jp.getTypeId()); } protected Object _deserializeWithNativeTypeId(JsonParser jp, DeserializationContext ctxt, Object typeId) throws IOException { JsonDeserializer<Object> deser;"
      },
      {
        "txt": "if (typeId == null) { deser = _findDefaultImplDeserializer(ctxt); if (deser == null) { return ctxt.reportInputMismatch(baseType(), \"No (native) type id found when one was expected for polymorphic type handling\"); } } else { String typeIdStr = (typeId instanceof String) ? (String) typeId : String.valueOf(typeId); deser = _findDeserializer(ctxt, typeIdStr); }"
      },
      {
        "txt": "return deser.deserialize(jp, ctxt); } protected JavaType _handleUnknownTypeId(DeserializationContext ctxt, String typeId) throws IOException { String extraDesc = _idResolver.getDescForKnownTypeIds(); if (extraDesc == null) { extraDesc = \"type ids are not statically known\"; } else { extraDesc = \"known type ids = \" + extraDesc;"
      },
      {
        "txt": "} if (_property != null) { extraDesc = String.format(\"%s (for POJO property '%s')\", extraDesc, _property.getName()); } return ctxt.handleUnknownTypeId(_baseType, typeId, _idResolver, extraDesc); } protected JavaType _handleMissingTypeId(DeserializationContext ctxt, String extraDesc) throws IOException {"
      },
      {
        "txt": "return ctxt.handleMissingTypeId(_baseType, _idResolver, extraDesc); }"
      }
    ]
  }
]
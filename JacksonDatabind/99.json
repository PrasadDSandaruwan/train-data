[
  {
    "id": 1745,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/type/ReferenceType.java",
    "start-bug-line": 169,
    "end-bug-line": 169,
    "bug": "",
    "fix": "sb.append('>');",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.type; import com.fasterxml.jackson.databind.JavaType; public class ReferenceType extends SimpleType { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "protected final JavaType _referencedType; protected final JavaType _anchorType; protected ReferenceType(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType refType, JavaType anchorType, Object valueHandler, Object typeHandler, boolean asStatic) { super(cls, bindings, superClass, superInts, refType.hashCode(), valueHandler, typeHandler, asStatic); _referencedType = refType;"
      },
      {
        "txt": "_anchorType = (anchorType == null) ? this : anchorType; } protected ReferenceType(TypeBase base, JavaType refType) { super(base); _referencedType = refType; _anchorType = this; } public static ReferenceType upgradeFrom(JavaType baseType, JavaType refdType) { if (refdType == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Missing referencedType\"); } if (baseType instanceof TypeBase) { return new ReferenceType((TypeBase) baseType, refdType); } throw new IllegalArgumentException(\"Can not upgrade from an instance of \"+baseType.getClass()); } public static ReferenceType construct(Class<?> cls, TypeBindings bindings, JavaType superClass, JavaType[] superInts, JavaType refType) {"
      },
      {
        "txt": "return new ReferenceType(cls, bindings, superClass, superInts, refType, null, null, null, false); } @Deprecated // since 2.7 public static ReferenceType construct(Class<?> cls, JavaType refType) { return new ReferenceType(cls, TypeBindings.emptyBindings(), null, null, null, refType, null, null, false); } @Override public JavaType withContentType(JavaType contentType) {"
      },
      {
        "txt": "if (_referencedType == contentType) { return this; } return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, contentType, _anchorType, _valueHandler, _typeHandler, _asStatic); } @Override public ReferenceType withTypeHandler(Object h) { if (h == _typeHandler) {"
      },
      {
        "txt": "return this; } return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, _anchorType, _valueHandler, h, _asStatic); } @Override public ReferenceType withContentTypeHandler(Object h) { if (h == _referencedType.<Object>getTypeHandler()) { return this;"
      },
      {
        "txt": "} return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType.withTypeHandler(h), _anchorType, _valueHandler, _typeHandler, _asStatic); } @Override public ReferenceType withValueHandler(Object h) { if (h == _valueHandler) { return this; }"
      },
      {
        "txt": "return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, _referencedType, _anchorType, h, _typeHandler,_asStatic); } @Override public ReferenceType withContentValueHandler(Object h) { if (h == _referencedType.<Object>getValueHandler()) { return this; } JavaType refdType = _referencedType.withValueHandler(h);"
      },
      {
        "txt": "return new ReferenceType(_class, _bindings, _superClass, _superInterfaces, refdType, _anchorType, _valueHandler, _typeHandler, _asStatic); } @Override public ReferenceType withStaticTyping() { if (_asStatic) { return this; } return new ReferenceType(_class, _bindings, _superClass, _superInterfaces,"
      },
      {
        "txt": "_referencedType.withStaticTyping(), _anchorType, _valueHandler, _typeHandler, true); } @Override public JavaType refine(Class<?> rawType, TypeBindings bindings, JavaType superClass, JavaType[] superInterfaces) { return new ReferenceType(rawType, _bindings, superClass, superInterfaces, _referencedType, _anchorType, _valueHandler, _typeHandler, _asStatic); }"
      },
      {
        "txt": "protected String buildCanonicalName() { StringBuilder sb = new StringBuilder(); sb.append(_class.getName()); sb.append('<'); sb.append(_referencedType.toCanonical()); <extra_id_0> } @Override @Deprecated // since 2.7 protected JavaType _narrow(Class<?> subclass) { return new ReferenceType(subclass, _bindings,"
      },
      {
        "txt": "{ return new ReferenceType(subclass, _bindings, _superClass, _superInterfaces, _referencedType, _anchorType, _valueHandler, _typeHandler, _asStatic); } @Override public JavaType getContentType() { return _referencedType; } @Override"
      },
      {
        "txt": "public JavaType getReferencedType() { return _referencedType; } @Override public boolean hasContentType() { return true; } @Override public boolean isReferenceType() { return true;"
      },
      {
        "txt": "} @Override public StringBuilder getErasedSignature(StringBuilder sb) { return _classSignature(_class, sb, true); } @Override public StringBuilder getGenericSignature(StringBuilder sb) { _classSignature(_class, sb, false); sb.append('<');"
      },
      {
        "txt": "sb = _referencedType.getGenericSignature(sb); sb.append(\">;\"); return sb; } public JavaType getAnchorType() { return _anchorType; } public boolean isAnchorType() { return (_anchorType == this); }"
      },
      {
        "txt": "@Override public String toString() { return new StringBuilder(40) .append(\"[reference type, class \") .append(buildCanonicalName()) .append('<') .append(_referencedType) .append('>') .append(']')"
      },
      {
        "txt": ".toString(); } @Override public boolean equals(Object o) { if (o == this) return true; if (o == null) return false; if (o.getClass() != getClass()) return false; ReferenceType other = (ReferenceType) o; if (other._class != _class) return false;"
      },
      {
        "txt": "return _referencedType.equals(other._referencedType); }"
      }
    ]
  }
]
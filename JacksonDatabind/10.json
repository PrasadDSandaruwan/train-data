[
  {
    "id": 1340,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 24,
    "end-bug-line": 24,
    "bug": "",
    "fix": "protected JsonSerializer<Object> _serializer;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; <extra_id_0> protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) { _accessor = accessor;"
      },
      {
        "txt": "{ _accessor = accessor; _property = property; _mapSerializer = (MapSerializer) serializer; } public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) {"
      },
      {
        "txt": "return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return; }"
      },
      {
        "txt": "} public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) {"
      },
      {
        "txt": "throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null); return; } } @SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException"
      },
      {
        "txt": "{ _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); }"
      }
    ]
  },
  {
    "id": 1341,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 29,
    "end-bug-line": 29,
    "bug": "AnnotatedMember accessor, MapSerializer serializer)",
    "fix": "AnnotatedMember accessor, JsonSerializer<?> serializer)",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer;"
      },
      {
        "txt": "{ protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, <extra_id_0> { _accessor = accessor; _property = property; _mapSerializer = (MapSerializer) serializer; } public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider)"
      },
      {
        "txt": "} public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\""
      },
      {
        "txt": "+_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return; } } public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception"
      },
      {
        "txt": "{ Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) {"
      },
      {
        "txt": "_mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null); return; } } @SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException { _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); }"
      }
    ]
  },
  {
    "id": 1342,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 33,
    "end-bug-line": 33,
    "bug": "",
    "fix": "_serializer = (JsonSerializer<Object>) serializer; if (serializer instanceof MapSerializer) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor;"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) { _accessor = accessor; _property = property; <extra_id_0> } public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) {"
      },
      {
        "txt": "Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider);"
      },
      {
        "txt": "return; } } public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return;"
      },
      {
        "txt": "} if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null); return; } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException { _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); }"
      }
    ]
  },
  {
    "id": 1343,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 34,
    "end-bug-line": 34,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer;"
      },
      {
        "txt": "public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) { _accessor = accessor; _property = property; _mapSerializer = (MapSerializer) serializer; <extra_id_0> public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return;"
      },
      {
        "txt": "if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return;"
      },
      {
        "txt": "} } public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; }"
      },
      {
        "txt": "if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null); return; } } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public void resolve(SerializerProvider provider) throws JsonMappingException { _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); }"
      }
    ]
  },
  {
    "id": 1344,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 52,
    "end-bug-line": 52,
    "bug": "",
    "fix": "_serializer.serialize(value, gen, provider);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter"
      },
      {
        "txt": "{ protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) { _accessor = accessor; _property = property;"
      },
      {
        "txt": "_mapSerializer = (MapSerializer) serializer; } public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) {"
      },
      {
        "txt": "+_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return; } <extra_id_0> public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception { Object value = _accessor.getValue(bean); if (value == null) {"
      },
      {
        "txt": "Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null);"
      },
      {
        "txt": "return; } } @SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException { _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); }"
      }
    ]
  },
  {
    "id": 1345,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 75,
    "end-bug-line": 75,
    "bug": "",
    "fix": "_serializer.serialize(value, gen, provider);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter { protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer)"
      },
      {
        "txt": "{ _accessor = accessor; _property = property; _mapSerializer = (MapSerializer) serializer; } public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) {"
      },
      {
        "txt": "return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return; }"
      },
      {
        "txt": "} public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) {"
      },
      {
        "txt": "+_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFilteredFields((Map<?,?>) value, gen, provider, filter, null); return; } <extra_id_0> @SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException { _mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property); } }"
      }
    ]
  },
  {
    "id": 1346,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/AnyGetterWriter.java",
    "start-bug-line": 82,
    "end-bug-line": 82,
    "bug": "_mapSerializer = (MapSerializer) provider.handlePrimaryContextualization(_mapSerializer, _property);",
    "fix": "if (_serializer instanceof ContextualSerializer) { JsonSerializer<?> ser = provider.handlePrimaryContextualization(_serializer, _property); _serializer = (JsonSerializer<Object>) ser; if (ser instanceof MapSerializer) { _mapSerializer = (MapSerializer) ser; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.Map; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; import com.fasterxml.jackson.databind.ser.std.MapSerializer; public class AnyGetterWriter {"
      },
      {
        "txt": "protected final BeanProperty _property; protected final AnnotatedMember _accessor; protected MapSerializer _mapSerializer; @SuppressWarnings(\"unchecked\") public AnyGetterWriter(BeanProperty property, AnnotatedMember accessor, MapSerializer serializer) { _accessor = accessor; _property = property; _mapSerializer = (MapSerializer) serializer;"
      },
      {
        "txt": "} public void getAndSerialize(Object bean, JsonGenerator gen, SerializerProvider provider) throws Exception { Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\""
      },
      {
        "txt": "+_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) { _mapSerializer.serializeFields((Map<?,?>) value, gen, provider); return; } } public void getAndFilter(Object bean, JsonGenerator gen, SerializerProvider provider, PropertyFilter filter) throws Exception"
      },
      {
        "txt": "{ Object value = _accessor.getValue(bean); if (value == null) { return; } if (!(value instanceof Map<?,?>)) { throw new JsonMappingException(\"Value returned by 'any-getter' (\" +_accessor.getName()+\"()) not java.util.Map but \"+value.getClass().getName()); } if (_mapSerializer != null) {"
      },
      {
        "txt": "return; } } @SuppressWarnings(\"unchecked\") public void resolve(SerializerProvider provider) throws JsonMappingException { <extra_id_0> } }"
      }
    ]
  },
  {
    "id": 1347,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "start-bug-line": 395,
    "end-bug-line": 395,
    "bug": "MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null);",
    "fix": "JsonSerializer<?> anySer = findSerializerFromAnnotation(prov, anyGetter); if (anySer == null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.*; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdGenerators; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsontype.NamedType; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter; import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter; import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator; import com.fasterxml.jackson.databind.ser.std.MapSerializer; import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer; import com.fasterxml.jackson.databind.type.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ArrayBuilders; import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public class BeanSerializerFactory extends BasicSerializerFactory implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1; public final static BeanSerializerFactory instance = new BeanSerializerFactory(null); protected BeanSerializerFactory(SerializerFactoryConfig config)"
      },
      {
        "txt": "{ super(config); } @Override public SerializerFactory withConfig(SerializerFactoryConfig config) { if (_factoryConfig == config) { return this; } if (getClass() != BeanSerializerFactory.class) {"
      },
      {
        "txt": "throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with \" +\"additional serializer definitions\"); } return new BeanSerializerFactory(config); } @Override protected Iterable<Serializers> customSerializers() { return _factoryConfig.serializers(); }"
      },
      {
        "txt": "@Override @SuppressWarnings(\"unchecked\") public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException { final SerializationConfig config = prov.getConfig(); BeanDescription beanDesc = config.introspect(origType); JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo()); if (ser != null) {"
      },
      {
        "txt": "return (JsonSerializer<Object>) ser; } boolean staticTyping; JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType); if (type == origType) { // no changes, won't force static typing staticTyping = false; } else { // changes; assume static typing; plus, need to re-introspect if class differs staticTyping = true; if (!type.hasRawClass(origType.getRawClass())) { beanDesc = config.introspect(type);"
      },
      {
        "txt": "} } Converter<Object,Object> conv = beanDesc.findSerializationConverter(); if (conv == null) { // no, simple return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping); } JavaType delegateType = conv.getOutputType(prov.getTypeFactory()); if (!delegateType.hasRawClass(type.getRawClass())) { beanDesc = config.introspect(delegateType); ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo());"
      },
      {
        "txt": "} if (ser == null) { ser = _createSerializer2(prov, delegateType, beanDesc, true); } return new StdDelegatingSerializer(conv, delegateType, ser); } protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException {"
      },
      {
        "txt": "JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc); if (ser != null) { return ser; } final SerializationConfig config = prov.getConfig(); if (type.isContainerType()) { if (!staticTyping) { staticTyping = usesStaticTyping(config, beanDesc, null); if (property == null) { JavaType t = origType.getContentType();"
      },
      {
        "txt": "if (t != null && !t.hasRawClass(Object.class)) { staticTyping = true; } } } ser = buildContainerSerializer(prov, type, beanDesc, staticTyping); if (ser != null) { return ser; } } else {"
      },
      {
        "txt": "for (Serializers serializers : customSerializers()) { ser = serializers.findSerializer(config, type, beanDesc); if (ser != null) { break; } } } if (ser == null) { ser = findSerializerByLookup(type, config, beanDesc, staticTyping); if (ser == null) {"
      },
      {
        "txt": "ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping); if (ser == null) { ser = findBeanSerializer(prov, type, beanDesc); if (ser == null) { ser = findSerializerByAddonType(config, type, beanDesc, staticTyping); if (ser == null) { ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); } } }"
      },
      {
        "txt": "} } if (ser != null) { if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { ser = mod.modifySerializer(config, beanDesc, ser); } } } return ser;"
      },
      {
        "txt": "} public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException { if (!isPotentialBeanType(type.getRawClass())) { if (!type.isEnumType()) { return null; } } return constructBeanSerializer(prov, beanDesc);"
      },
      {
        "txt": "} public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, accessor, baseType); if (b == null) { return createTypeSerializer(config, baseType); }"
      },
      {
        "txt": "Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes( accessor, config, ai, baseType); return b.buildTypeSerializer(config, baseType, subtypes); } public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException { JavaType contentType = containerType.getContentType(); AnnotationIntrospector ai = config.getAnnotationIntrospector();"
      },
      {
        "txt": "TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, accessor, containerType); if (b == null) { return createTypeSerializer(config, contentType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, contentType); return b.buildTypeSerializer(config, contentType, subtypes); } @SuppressWarnings(\"unchecked\") protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov,"
      },
      {
        "txt": "BeanDescription beanDesc) throws JsonMappingException { if (beanDesc.getBeanClass() == Object.class) { return prov.getUnknownTypeSerializer(Object.class); } final SerializationConfig config = prov.getConfig(); BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc); builder.setConfig(config); List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder);"
      },
      {
        "txt": "if (props == null) { props = new ArrayList<BeanPropertyWriter>(); } prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { props = mod.changeProperties(config, beanDesc, props); } } props = filterBeanProperties(config, beanDesc, props);"
      },
      {
        "txt": "if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { props = mod.orderProperties(config, beanDesc, props); } } builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props)); builder.setProperties(props); builder.setFilterId(findFilterId(config, beanDesc)); AnnotatedMember anyGetter = beanDesc.findAnyGetter(); if (anyGetter != null) {"
      },
      {
        "txt": "anyGetter.fixAccess(); } JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType()); boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING); JavaType valueType = type.getContentType(); TypeSerializer typeSer = createTypeSerializer(config, valueType); <extra_id_0> PropertyName name = new PropertyName(anyGetter.getName()); BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL); builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer)); } processViews(config, builder);"
      },
      {
        "txt": "} processViews(config, builder); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build(); if (ser == null) { if (beanDesc.hasKnownClassAnnotations()) {"
      },
      {
        "txt": "return builder.createDummy(); } } return ser; } protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException { ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();"
      },
      {
        "txt": "if (objectIdInfo == null) { return null; } ObjectIdGenerator<?> gen; Class<?> implClass = objectIdInfo.getGeneratorType(); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work String propName = objectIdInfo.getPropertyName().getSimpleName(); BeanPropertyWriter idProp = null; for (int i = 0, len = props.size() ;; ++i) { if (i == len) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName() +\": can not find property with name '\"+propName+\"'\"); } BeanPropertyWriter prop = props.get(i); if (propName.equals(prop.getName())) { idProp = prop; if (i > 0) { props.remove(i); props.add(0, idProp); }"
      },
      {
        "txt": "break; } } JavaType idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp); return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId()); } JavaType type = prov.constructType(implClass); JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);"
      },
      {
        "txt": "return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId()); } protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews) { return FilteredBeanPropertyWriter.constructViewBased(writer, inViews); } protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc)"
      },
      {
        "txt": "{ return new PropertyBuilder(config, beanDesc); } protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) { return new BeanSerializerBuilder(beanDesc); } protected boolean isPotentialBeanType(Class<?> type) { return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type); }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException { List<BeanPropertyDefinition> properties = beanDesc.findProperties(); final SerializationConfig config = prov.getConfig(); removeIgnorableTypes(config, beanDesc, properties); if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) { removeSetterlessGetters(config, beanDesc, properties); }"
      },
      {
        "txt": "if (properties.isEmpty()) { return null; } boolean staticTyping = usesStaticTyping(config, beanDesc, null); PropertyBuilder pb = constructPropertyBuilder(config, beanDesc); ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size()); TypeBindings typeBind = beanDesc.bindingsForBeanType(); for (BeanPropertyDefinition property : properties) { final AnnotatedMember accessor = property.getAccessor(); if (property.isTypeId()) {"
      },
      {
        "txt": "if (accessor != null) { // only add if we can access... but otherwise? if (config.canOverrideAccessModifiers()) { accessor.fixAccess(); } builder.setTypeId(accessor); } continue; } AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType(); if (refType != null && refType.isBackReference()) {"
      },
      {
        "txt": "continue; } if (accessor instanceof AnnotatedMethod) { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor)); } else { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor)); } } return result; }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); AnnotatedClass ac = beanDesc.getClassInfo(); String[] ignored = intr.findPropertiesToIgnore(ac); if (ignored != null && ignored.length > 0) { HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored); Iterator<BeanPropertyWriter> it = props.iterator(); while (it.hasNext()) {"
      },
      {
        "txt": "if (ignoredSet.contains(it.next().getName())) { it.remove(); } } } return props; } protected void processViews(SerializationConfig config, BeanSerializerBuilder builder) { List<BeanPropertyWriter> props = builder.getProperties();"
      },
      {
        "txt": "boolean includeByDefault = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION); final int propCount = props.size(); int viewsFound = 0; BeanPropertyWriter[] filtered = new BeanPropertyWriter[propCount]; for (int i = 0; i < propCount; ++i) { BeanPropertyWriter bpw = props.get(i); Class<?>[] views = bpw.getViews(); if (views == null) { // no view info? include or exclude by default? if (includeByDefault) { filtered[i] = bpw;"
      },
      {
        "txt": "} } else { ++viewsFound; filtered[i] = constructFilteredBeanWriter(bpw, views); } } if (includeByDefault && viewsFound == 0) { return; } builder.setFilteredProperties(filtered);"
      },
      {
        "txt": "} protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); HashMap<Class<?>,Boolean> ignores = new HashMap<Class<?>,Boolean>(); Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); AnnotatedMember accessor = property.getAccessor();"
      },
      {
        "txt": "if (accessor == null) { it.remove(); continue; } Class<?> type = accessor.getRawType(); Boolean result = ignores.get(type); if (result == null) { BeanDescription desc = config.introspectClassAnnotations(type); AnnotatedClass ac = desc.getClassInfo(); result = intr.isIgnorableType(ac);"
      },
      {
        "txt": "if (result == null) { result = Boolean.FALSE; } ignores.put(type, result); } if (result.booleanValue()) { it.remove(); } } }"
      },
      {
        "txt": "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) { it.remove(); } }"
      },
      {
        "txt": "} protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException { final PropertyName name = propDef.getFullName(); if (prov.canOverrideAccessModifiers()) { accessor.fixAccess(); }"
      },
      {
        "txt": "JavaType type = accessor.getType(typeContext); BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(), pb.getClassAnnotations(), accessor, propDef.getMetadata()); JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov, accessor); if (annotatedSerializer instanceof ResolvableSerializer) { ((ResolvableSerializer) annotatedSerializer).resolve(prov); } annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property); TypeSerializer contentTypeSer = null;"
      },
      {
        "txt": "if (ClassUtil.isCollectionMapOrArray(type.getRawClass()) || type.isCollectionLikeType() || type.isMapLikeType()) { contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor); } TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor); BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping); return pbw; }"
      }
    ]
  },
  {
    "id": 1348,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java",
    "start-bug-line": 397,
    "end-bug-line": 397,
    "bug": "",
    "fix": "anySer = MapSerializer.construct(/* ignored props*/ null, type, staticTyping, typeSer, null, null, /*filterId*/ null); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.util.*; import com.fasterxml.jackson.annotation.ObjectIdGenerator; import com.fasterxml.jackson.annotation.ObjectIdGenerators; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.SerializerFactoryConfig; import com.fasterxml.jackson.databind.introspect.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.jsontype.NamedType; import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.ser.impl.FilteredBeanPropertyWriter; import com.fasterxml.jackson.databind.ser.impl.ObjectIdWriter; import com.fasterxml.jackson.databind.ser.impl.PropertyBasedObjectIdGenerator; import com.fasterxml.jackson.databind.ser.std.MapSerializer; import com.fasterxml.jackson.databind.ser.std.StdDelegatingSerializer; import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.ArrayBuilders;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.ClassUtil; import com.fasterxml.jackson.databind.util.Converter; public class BeanSerializerFactory extends BasicSerializerFactory implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1; public final static BeanSerializerFactory instance = new BeanSerializerFactory(null); protected BeanSerializerFactory(SerializerFactoryConfig config) {"
      },
      {
        "txt": "super(config); } @Override public SerializerFactory withConfig(SerializerFactoryConfig config) { if (_factoryConfig == config) { return this; } if (getClass() != BeanSerializerFactory.class) { throw new IllegalStateException(\"Subtype of BeanSerializerFactory (\"+getClass().getName()"
      },
      {
        "txt": "+\") has not properly overridden method 'withAdditionalSerializers': can not instantiate subtype with \" +\"additional serializer definitions\"); } return new BeanSerializerFactory(config); } @Override protected Iterable<Serializers> customSerializers() { return _factoryConfig.serializers(); } @Override"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public JsonSerializer<Object> createSerializer(SerializerProvider prov, JavaType origType) throws JsonMappingException { final SerializationConfig config = prov.getConfig(); BeanDescription beanDesc = config.introspect(origType); JsonSerializer<?> ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo()); if (ser != null) { return (JsonSerializer<Object>) ser;"
      },
      {
        "txt": "} boolean staticTyping; JavaType type = modifyTypeByAnnotation(config, beanDesc.getClassInfo(), origType); if (type == origType) { // no changes, won't force static typing staticTyping = false; } else { // changes; assume static typing; plus, need to re-introspect if class differs staticTyping = true; if (!type.hasRawClass(origType.getRawClass())) { beanDesc = config.introspect(type); }"
      },
      {
        "txt": "} Converter<Object,Object> conv = beanDesc.findSerializationConverter(); if (conv == null) { // no, simple return (JsonSerializer<Object>) _createSerializer2(prov, type, beanDesc, staticTyping); } JavaType delegateType = conv.getOutputType(prov.getTypeFactory()); if (!delegateType.hasRawClass(type.getRawClass())) { beanDesc = config.introspect(delegateType); ser = findSerializerFromAnnotation(prov, beanDesc.getClassInfo()); }"
      },
      {
        "txt": "if (ser == null) { ser = _createSerializer2(prov, delegateType, beanDesc, true); } return new StdDelegatingSerializer(conv, delegateType, ser); } protected JsonSerializer<?> _createSerializer2(SerializerProvider prov, JavaType type, BeanDescription beanDesc, boolean staticTyping) throws JsonMappingException { JsonSerializer<?> ser = findSerializerByAnnotations(prov, type, beanDesc);"
      },
      {
        "txt": "if (ser != null) { return ser; } final SerializationConfig config = prov.getConfig(); if (type.isContainerType()) { if (!staticTyping) { staticTyping = usesStaticTyping(config, beanDesc, null); if (property == null) { JavaType t = origType.getContentType(); if (t != null && !t.hasRawClass(Object.class)) {"
      },
      {
        "txt": "staticTyping = true; } } } ser = buildContainerSerializer(prov, type, beanDesc, staticTyping); if (ser != null) { return ser; } } else { for (Serializers serializers : customSerializers()) {"
      },
      {
        "txt": "ser = serializers.findSerializer(config, type, beanDesc); if (ser != null) { break; } } } if (ser == null) { ser = findSerializerByLookup(type, config, beanDesc, staticTyping); if (ser == null) { ser = findSerializerByPrimaryType(prov, type, beanDesc, staticTyping);"
      },
      {
        "txt": "if (ser == null) { ser = findBeanSerializer(prov, type, beanDesc); if (ser == null) { ser = findSerializerByAddonType(config, type, beanDesc, staticTyping); if (ser == null) { ser = prov.getUnknownTypeSerializer(beanDesc.getBeanClass()); } } } }"
      },
      {
        "txt": "} if (ser != null) { if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { ser = mod.modifySerializer(config, beanDesc, ser); } } } return ser; }"
      },
      {
        "txt": "public JsonSerializer<Object> findBeanSerializer(SerializerProvider prov, JavaType type, BeanDescription beanDesc) throws JsonMappingException { if (!isPotentialBeanType(type.getRawClass())) { if (!type.isEnumType()) { return null; } } return constructBeanSerializer(prov, beanDesc); }"
      },
      {
        "txt": "public TypeSerializer findPropertyTypeSerializer(JavaType baseType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException { AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyTypeResolver(config, accessor, baseType); if (b == null) { return createTypeSerializer(config, baseType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes("
      },
      {
        "txt": "accessor, config, ai, baseType); return b.buildTypeSerializer(config, baseType, subtypes); } public TypeSerializer findPropertyContentTypeSerializer(JavaType containerType, SerializationConfig config, AnnotatedMember accessor) throws JsonMappingException { JavaType contentType = containerType.getContentType(); AnnotationIntrospector ai = config.getAnnotationIntrospector(); TypeResolverBuilder<?> b = ai.findPropertyContentTypeResolver(config, accessor, containerType);"
      },
      {
        "txt": "if (b == null) { return createTypeSerializer(config, contentType); } Collection<NamedType> subtypes = config.getSubtypeResolver().collectAndResolveSubtypes(accessor, config, ai, contentType); return b.buildTypeSerializer(config, contentType, subtypes); } @SuppressWarnings(\"unchecked\") protected JsonSerializer<Object> constructBeanSerializer(SerializerProvider prov, BeanDescription beanDesc)"
      },
      {
        "txt": "throws JsonMappingException { if (beanDesc.getBeanClass() == Object.class) { return prov.getUnknownTypeSerializer(Object.class); } final SerializationConfig config = prov.getConfig(); BeanSerializerBuilder builder = constructBeanSerializerBuilder(beanDesc); builder.setConfig(config); List<BeanPropertyWriter> props = findBeanProperties(prov, beanDesc, builder); if (props == null) {"
      },
      {
        "txt": "props = new ArrayList<BeanPropertyWriter>(); } prov.getAnnotationIntrospector().findAndAddVirtualProperties(config, beanDesc.getClassInfo(), props); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { props = mod.changeProperties(config, beanDesc, props); } } props = filterBeanProperties(config, beanDesc, props); if (_factoryConfig.hasSerializerModifiers()) {"
      },
      {
        "txt": "for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { props = mod.orderProperties(config, beanDesc, props); } } builder.setObjectIdWriter(constructObjectIdHandler(prov, beanDesc, props)); builder.setProperties(props); builder.setFilterId(findFilterId(config, beanDesc)); AnnotatedMember anyGetter = beanDesc.findAnyGetter(); if (anyGetter != null) { if (config.canOverrideAccessModifiers()) {"
      },
      {
        "txt": "} JavaType type = anyGetter.getType(beanDesc.bindingsForBeanType()); boolean staticTyping = config.isEnabled(MapperFeature.USE_STATIC_TYPING); JavaType valueType = type.getContentType(); TypeSerializer typeSer = createTypeSerializer(config, valueType); MapSerializer anySer = MapSerializer.construct(null, type, staticTyping, typeSer, null, null, null); <extra_id_0> PropertyName name = new PropertyName(anyGetter.getName()); BeanProperty.Std anyProp = new BeanProperty.Std(name, valueType, null, beanDesc.getClassAnnotations(), anyGetter, PropertyMetadata.STD_OPTIONAL); builder.setAnyGetter(new AnyGetterWriter(anyProp, anyGetter, anySer)); } processViews(config, builder);"
      },
      {
        "txt": "} processViews(config, builder); if (_factoryConfig.hasSerializerModifiers()) { for (BeanSerializerModifier mod : _factoryConfig.serializerModifiers()) { builder = mod.updateBuilder(config, beanDesc, builder); } } JsonSerializer<Object> ser = (JsonSerializer<Object>) builder.build(); if (ser == null) { if (beanDesc.hasKnownClassAnnotations()) {"
      },
      {
        "txt": "return builder.createDummy(); } } return ser; } protected ObjectIdWriter constructObjectIdHandler(SerializerProvider prov, BeanDescription beanDesc, List<BeanPropertyWriter> props) throws JsonMappingException { ObjectIdInfo objectIdInfo = beanDesc.getObjectIdInfo();"
      },
      {
        "txt": "if (objectIdInfo == null) { return null; } ObjectIdGenerator<?> gen; Class<?> implClass = objectIdInfo.getGeneratorType(); if (implClass == ObjectIdGenerators.PropertyGenerator.class) { // most special one, needs extra work String propName = objectIdInfo.getPropertyName().getSimpleName(); BeanPropertyWriter idProp = null; for (int i = 0, len = props.size() ;; ++i) { if (i == len) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Invalid Object Id definition for \"+beanDesc.getBeanClass().getName() +\": can not find property with name '\"+propName+\"'\"); } BeanPropertyWriter prop = props.get(i); if (propName.equals(prop.getName())) { idProp = prop; if (i > 0) { props.remove(i); props.add(0, idProp); }"
      },
      {
        "txt": "break; } } JavaType idType = idProp.getType(); gen = new PropertyBasedObjectIdGenerator(objectIdInfo, idProp); return ObjectIdWriter.construct(idType, (PropertyName) null, gen, objectIdInfo.getAlwaysAsId()); } JavaType type = prov.constructType(implClass); JavaType idType = prov.getTypeFactory().findTypeParameters(type, ObjectIdGenerator.class)[0]; gen = prov.objectIdGeneratorInstance(beanDesc.getClassInfo(), objectIdInfo);"
      },
      {
        "txt": "return ObjectIdWriter.construct(idType, objectIdInfo.getPropertyName(), gen, objectIdInfo.getAlwaysAsId()); } protected BeanPropertyWriter constructFilteredBeanWriter(BeanPropertyWriter writer, Class<?>[] inViews) { return FilteredBeanPropertyWriter.constructViewBased(writer, inViews); } protected PropertyBuilder constructPropertyBuilder(SerializationConfig config, BeanDescription beanDesc)"
      },
      {
        "txt": "{ return new PropertyBuilder(config, beanDesc); } protected BeanSerializerBuilder constructBeanSerializerBuilder(BeanDescription beanDesc) { return new BeanSerializerBuilder(beanDesc); } protected boolean isPotentialBeanType(Class<?> type) { return (ClassUtil.canBeABeanType(type) == null) && !ClassUtil.isProxyType(type); }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> findBeanProperties(SerializerProvider prov, BeanDescription beanDesc, BeanSerializerBuilder builder) throws JsonMappingException { List<BeanPropertyDefinition> properties = beanDesc.findProperties(); final SerializationConfig config = prov.getConfig(); removeIgnorableTypes(config, beanDesc, properties); if (config.isEnabled(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)) { removeSetterlessGetters(config, beanDesc, properties); }"
      },
      {
        "txt": "if (properties.isEmpty()) { return null; } boolean staticTyping = usesStaticTyping(config, beanDesc, null); PropertyBuilder pb = constructPropertyBuilder(config, beanDesc); ArrayList<BeanPropertyWriter> result = new ArrayList<BeanPropertyWriter>(properties.size()); TypeBindings typeBind = beanDesc.bindingsForBeanType(); for (BeanPropertyDefinition property : properties) { final AnnotatedMember accessor = property.getAccessor(); if (property.isTypeId()) {"
      },
      {
        "txt": "if (accessor != null) { // only add if we can access... but otherwise? if (config.canOverrideAccessModifiers()) { accessor.fixAccess(); } builder.setTypeId(accessor); } continue; } AnnotationIntrospector.ReferenceProperty refType = property.findReferenceType(); if (refType != null && refType.isBackReference()) {"
      },
      {
        "txt": "continue; } if (accessor instanceof AnnotatedMethod) { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedMethod) accessor)); } else { result.add(_constructWriter(prov, property, typeBind, pb, staticTyping, (AnnotatedField) accessor)); } } return result; }"
      },
      {
        "txt": "protected List<BeanPropertyWriter> filterBeanProperties(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyWriter> props) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); AnnotatedClass ac = beanDesc.getClassInfo(); String[] ignored = intr.findPropertiesToIgnore(ac); if (ignored != null && ignored.length > 0) { HashSet<String> ignoredSet = ArrayBuilders.arrayToSet(ignored); Iterator<BeanPropertyWriter> it = props.iterator(); while (it.hasNext()) {"
      },
      {
        "txt": "if (ignoredSet.contains(it.next().getName())) { it.remove(); } } } return props; } protected void processViews(SerializationConfig config, BeanSerializerBuilder builder) { List<BeanPropertyWriter> props = builder.getProperties();"
      },
      {
        "txt": "boolean includeByDefault = config.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION); final int propCount = props.size(); int viewsFound = 0; BeanPropertyWriter[] filtered = new BeanPropertyWriter[propCount]; for (int i = 0; i < propCount; ++i) { BeanPropertyWriter bpw = props.get(i); Class<?>[] views = bpw.getViews(); if (views == null) { // no view info? include or exclude by default? if (includeByDefault) { filtered[i] = bpw;"
      },
      {
        "txt": "} } else { ++viewsFound; filtered[i] = constructFilteredBeanWriter(bpw, views); } } if (includeByDefault && viewsFound == 0) { return; } builder.setFilteredProperties(filtered);"
      },
      {
        "txt": "} protected void removeIgnorableTypes(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { AnnotationIntrospector intr = config.getAnnotationIntrospector(); HashMap<Class<?>,Boolean> ignores = new HashMap<Class<?>,Boolean>(); Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); AnnotatedMember accessor = property.getAccessor();"
      },
      {
        "txt": "if (accessor == null) { it.remove(); continue; } Class<?> type = accessor.getRawType(); Boolean result = ignores.get(type); if (result == null) { BeanDescription desc = config.introspectClassAnnotations(type); AnnotatedClass ac = desc.getClassInfo(); result = intr.isIgnorableType(ac);"
      },
      {
        "txt": "if (result == null) { result = Boolean.FALSE; } ignores.put(type, result); } if (result.booleanValue()) { it.remove(); } } }"
      },
      {
        "txt": "protected void removeSetterlessGetters(SerializationConfig config, BeanDescription beanDesc, List<BeanPropertyDefinition> properties) { Iterator<BeanPropertyDefinition> it = properties.iterator(); while (it.hasNext()) { BeanPropertyDefinition property = it.next(); if (!property.couldDeserialize() && !property.isExplicitlyIncluded()) { it.remove(); } }"
      },
      {
        "txt": "} protected BeanPropertyWriter _constructWriter(SerializerProvider prov, BeanPropertyDefinition propDef, TypeBindings typeContext, PropertyBuilder pb, boolean staticTyping, AnnotatedMember accessor) throws JsonMappingException { final PropertyName name = propDef.getFullName(); if (prov.canOverrideAccessModifiers()) { accessor.fixAccess(); }"
      },
      {
        "txt": "JavaType type = accessor.getType(typeContext); BeanProperty.Std property = new BeanProperty.Std(name, type, propDef.getWrapperName(), pb.getClassAnnotations(), accessor, propDef.getMetadata()); JsonSerializer<?> annotatedSerializer = findSerializerFromAnnotation(prov, accessor); if (annotatedSerializer instanceof ResolvableSerializer) { ((ResolvableSerializer) annotatedSerializer).resolve(prov); } annotatedSerializer = prov.handlePrimaryContextualization(annotatedSerializer, property); TypeSerializer contentTypeSer = null;"
      },
      {
        "txt": "if (ClassUtil.isCollectionMapOrArray(type.getRawClass()) || type.isCollectionLikeType() || type.isMapLikeType()) { contentTypeSer = findPropertyContentTypeSerializer(type, prov.getConfig(), accessor); } TypeSerializer typeSer = findPropertyTypeSerializer(type, prov.getConfig(), accessor); BeanPropertyWriter pbw = pb.buildWriter(prov, propDef, type, annotatedSerializer, typeSer, contentTypeSer, accessor, staticTyping); return pbw; }"
      }
    ]
  }
]
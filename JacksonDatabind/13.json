[
  {
    "id": 1352,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java",
    "start-bug-line": 87,
    "end-bug-line": 87,
    "bug": "",
    "fix": "if (id == null) { return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser; import java.util.*; import java.util.Map.Entry; import com.fasterxml.jackson.annotation.ObjectIdGenerator;"
      },
      {
        "txt": "import com.fasterxml.jackson.annotation.ObjectIdResolver; import com.fasterxml.jackson.annotation.ObjectIdGenerator.IdKey; import com.fasterxml.jackson.annotation.SimpleObjectIdResolver; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId; import com.fasterxml.jackson.databind.deser.impl.ReadableObjectId.Referring; import com.fasterxml.jackson.databind.introspect.Annotated; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public abstract class DefaultDeserializationContext extends DeserializationContext implements java.io.Serializable // since 2.1 { private static final long serialVersionUID = 1L; protected transient LinkedHashMap<ObjectIdGenerator.IdKey, ReadableObjectId> _objectIds; private List<ObjectIdResolver> _objectIdResolvers; protected DefaultDeserializationContext(DeserializerFactory df, DeserializerCache cache) { super(df, cache); }"
      },
      {
        "txt": "protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializationConfig config, JsonParser jp, InjectableValues values) { super(src, config, jp, values); } protected DefaultDeserializationContext(DefaultDeserializationContext src, DeserializerFactory factory) { super(src, factory); } protected DefaultDeserializationContext(DefaultDeserializationContext src) { super(src);"
      },
      {
        "txt": "public DefaultDeserializationContext copy() { throw new IllegalStateException(\"DefaultDeserializationContext sub-class not overriding copy()\"); } @Override public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen, ObjectIdResolver resolverType) { <extra_id_0> final ObjectIdGenerator.IdKey key = gen.key(id); if (_objectIds == null) { _objectIds = new LinkedHashMap<ObjectIdGenerator.IdKey,ReadableObjectId>(); } else { ReadableObjectId entry = _objectIds.get(key); if (entry != null) {"
      },
      {
        "txt": "ReadableObjectId entry = _objectIds.get(key); if (entry != null) { return entry; } } ObjectIdResolver resolver = null; if (_objectIdResolvers == null) { _objectIdResolvers = new ArrayList<ObjectIdResolver>(8); } else { for (ObjectIdResolver res : _objectIdResolvers) {"
      },
      {
        "txt": "if (res.canUseFor(resolverType)) { resolver = res; break; } } } if (resolver == null) { resolver = resolverType.newForDeserialization(this); if (resolverType.getClass() == SimpleObjectIdResolver.class) { resolver = new SimpleObjectIdResolver();"
      },
      {
        "txt": "} _objectIdResolvers.add(resolver); } ReadableObjectId entry = new ReadableObjectId(key); entry.setResolver(resolver); _objectIds.put(key, entry); return entry; } @Deprecated // since 2.4 @Override"
      },
      {
        "txt": "public ReadableObjectId findObjectId(Object id, ObjectIdGenerator<?> gen) { return findObjectId(id, gen, new SimpleObjectIdResolver()); } @Override public void checkUnresolvedObjectId() throws UnresolvedForwardReference { if (_objectIds == null) { return; } if (!isEnabled(DeserializationFeature.FAIL_ON_UNRESOLVED_OBJECT_IDS)) {"
      },
      {
        "txt": "return; } UnresolvedForwardReference exception = null; for (Entry<IdKey,ReadableObjectId> entry : _objectIds.entrySet()) { ReadableObjectId roid = entry.getValue(); if (roid.hasReferringProperties()) { if (exception == null) { exception = new UnresolvedForwardReference(\"Unresolved forward references for: \"); } for (Iterator<Referring> iterator = roid.referringProperties(); iterator.hasNext(); ) {"
      },
      {
        "txt": "Referring referring = iterator.next(); exception.addUnresolvedId(roid.getKey().key, referring.getBeanType(), referring.getLocation()); } } } if (exception != null) { throw exception; } } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "@Override public JsonDeserializer<Object> deserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException { if (deserDef == null) { return null; } JsonDeserializer<?> deser; if (deserDef instanceof JsonDeserializer) { deser = (JsonDeserializer<?>) deserDef;"
      },
      {
        "txt": "} else { if (!(deserDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned deserializer definition of type \"+deserDef.getClass().getName()+\"; expected type JsonDeserializer or Class<JsonDeserializer> instead\"); } Class<?> deserClass = (Class<?>)deserDef; if (deserClass == JsonDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) { return null; } if (!JsonDeserializer.class.isAssignableFrom(deserClass)) { throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName()+\"; expected Class<JsonDeserializer>\");"
      },
      {
        "txt": "} HandlerInstantiator hi = _config.getHandlerInstantiator(); deser = (hi == null) ? null : hi.deserializerInstance(_config, ann, deserClass); if (deser == null) { deser = (JsonDeserializer<?>) ClassUtil.createInstance(deserClass, _config.canOverrideAccessModifiers()); } } if (deser instanceof ResolvableDeserializer) { ((ResolvableDeserializer) deser).resolve(this);"
      },
      {
        "txt": "} return (JsonDeserializer<Object>) deser; } @Override public final KeyDeserializer keyDeserializerInstance(Annotated ann, Object deserDef) throws JsonMappingException { if (deserDef == null) { return null; }"
      },
      {
        "txt": "KeyDeserializer deser; if (deserDef instanceof KeyDeserializer) { deser = (KeyDeserializer) deserDef; } else { if (!(deserDef instanceof Class)) { throw new IllegalStateException(\"AnnotationIntrospector returned key deserializer definition of type \" +deserDef.getClass().getName() +\"; expected type KeyDeserializer or Class<KeyDeserializer> instead\"); } Class<?> deserClass = (Class<?>)deserDef;"
      },
      {
        "txt": "if (deserClass == KeyDeserializer.None.class || ClassUtil.isBogusClass(deserClass)) { return null; } if (!KeyDeserializer.class.isAssignableFrom(deserClass)) { throw new IllegalStateException(\"AnnotationIntrospector returned Class \"+deserClass.getName() +\"; expected Class<KeyDeserializer>\"); } HandlerInstantiator hi = _config.getHandlerInstantiator(); deser = (hi == null) ? null : hi.keyDeserializerInstance(_config, ann, deserClass); if (deser == null) {"
      },
      {
        "txt": "deser = (KeyDeserializer) ClassUtil.createInstance(deserClass, _config.canOverrideAccessModifiers()); } } if (deser instanceof ResolvableDeserializer) { ((ResolvableDeserializer) deser).resolve(this); } return deser; } public abstract DefaultDeserializationContext with(DeserializerFactory factory);"
      },
      {
        "txt": "public abstract DefaultDeserializationContext createInstance( DeserializationConfig config, JsonParser jp, InjectableValues values); public final static class Impl extends DefaultDeserializationContext { private static final long serialVersionUID = 1L; public Impl(DeserializerFactory df) { super(df, null); } protected Impl(Impl src, DeserializationConfig config, JsonParser jp, InjectableValues values) {"
      },
      {
        "txt": "super(src, config, jp, values); } protected Impl(Impl src) { super(src); } protected Impl(Impl src, DeserializerFactory factory) { super(src, factory); } @Override public DefaultDeserializationContext copy() { if (getClass() != Impl.class) { return super.copy();"
      },
      {
        "txt": "} return new Impl(this); } @Override public DefaultDeserializationContext createInstance(DeserializationConfig config, JsonParser jp, InjectableValues values) { return new Impl(this, config, jp, values); } @Override public DefaultDeserializationContext with(DeserializerFactory factory) {"
      },
      {
        "txt": "return new Impl(this, factory); } }"
      }
    ]
  },
  {
    "id": 1353,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 92,
    "end-bug-line": 92,
    "bug": "",
    "fix": "if (id == null) { return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty extends SettableBeanProperty {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) { super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser)"
      },
      {
        "txt": "{ super(src, deser); _objectIdReader = src._objectIdReader; } @Deprecated // since 2.3 protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) { super(src, newName); _objectIdReader = src._objectIdReader; } @Deprecated // since 2.3"
      },
      {
        "txt": "protected ObjectIdValueProperty(ObjectIdValueProperty src, String newName) { this(src, new PropertyName(newName)); } @Override public ObjectIdValueProperty withName(PropertyName newName) { return new ObjectIdValueProperty(this, newName); } @Override public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) { return new ObjectIdValueProperty(this, deser);"
      },
      {
        "txt": "} @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return null; } @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException {"
      },
      {
        "txt": "} @Override public Object deserializeSetAndReturn(JsonParser jp, DeserializationContext ctxt, Object instance) throws IOException { Object id = _valueDeserializer.deserialize(jp, ctxt); <extra_id_0> ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(instance, id); }"
      },
      {
        "txt": "return idProp.setAndReturn(instance, id); } return instance; } @Override public void set(Object instance, Object value) throws IOException { setAndReturn(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException"
      },
      {
        "txt": "{ SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); } return idProp.setAndReturn(instance, value); }"
      }
    ]
  }
]
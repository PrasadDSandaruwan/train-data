[
  {
    "id": 1791,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
    "start-bug-line": 1169,
    "end-bug-line": 1169,
    "bug": "return (T) _bindAsTree(p);",
    "fix": "return (T) _bindAsTreeOrNull(p);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.*; import java.net.URL;"
      },
      {
        "txt": "import java.util.*; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.filter.FilteringParserDelegate; import com.fasterxml.jackson.core.filter.JsonPointerBasedFilter; import com.fasterxml.jackson.core.filter.TokenFilter; import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.DataFormatReaders;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext; import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.databind.type.SimpleType; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil; public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable // since 2.1"
      },
      {
        "txt": "{ private static final long serialVersionUID = 2L; // since 2.9 private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final DeserializationConfig _config; protected final DefaultDeserializationContext _context; protected final JsonFactory _parserFactory; protected final boolean _unwrapRoot; private final TokenFilter _filter; protected final JavaType _valueType; protected final JsonDeserializer<Object> _rootDeserializer;"
      },
      {
        "txt": "protected final Object _valueToUpdate; protected final FormatSchema _schema; protected final InjectableValues _injectableValues; protected final DataFormatReaders _dataFormatReaders; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers; protected ObjectReader(ObjectMapper mapper, DeserializationConfig config) { this(mapper, config, null, null, null, null); } protected ObjectReader(ObjectMapper mapper, DeserializationConfig config, JavaType valueType, Object valueToUpdate,"
      },
      {
        "txt": "FormatSchema schema, InjectableValues injectableValues) { _config = config; _context = mapper._deserializationContext; _rootDeserializers = mapper._rootDeserializers; _parserFactory = mapper._jsonFactory; _valueType = valueType; _valueToUpdate = valueToUpdate; _schema = schema; _injectableValues = injectableValues;"
      },
      {
        "txt": "_unwrapRoot = config.useRootWrapping(); _rootDeserializer = _prefetchRootDeserializer(valueType); _dataFormatReaders = null; _filter = null; } protected ObjectReader(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) {"
      },
      {
        "txt": "_config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = valueType; _rootDeserializer = rootDeser; _valueToUpdate = valueToUpdate; _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping();"
      },
      {
        "txt": "_dataFormatReaders = dataFormatReaders; _filter = base._filter; } protected ObjectReader(ObjectReader base, DeserializationConfig config) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = base._valueType;"
      },
      {
        "txt": "_rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = base._dataFormatReaders; _filter = base._filter; } protected ObjectReader(ObjectReader base, JsonFactory f) {"
      },
      {
        "txt": "_config = base._config .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering()); _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = f; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues;"
      },
      {
        "txt": "_unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; _filter = base._filter; } protected ObjectReader(ObjectReader base, TokenFilter filter) { _config = base._config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = base._valueType;"
      },
      {
        "txt": "_rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; _filter = filter; } @Override public Version version() {"
      },
      {
        "txt": "return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } protected ObjectReader _new(ObjectReader base, JsonFactory f) { return new ObjectReader(base, f); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config) { return new ObjectReader(base, config); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate,"
      },
      {
        "txt": "FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders); } protected <T> MappingIterator<T> _newIterator(JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean parserManaged) { return new MappingIterator<T>(_valueType, p, ctxt, deser, parserManaged, _valueToUpdate);"
      },
      {
        "txt": "} protected JsonToken _initForReading(DeserializationContext ctxt, JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); // since 2.5 JsonToken t = p.getCurrentToken(); if (t == null) { // and then we must get something..."
      },
      {
        "txt": "t = p.nextToken(); if (t == null) { ctxt.reportInputMismatch(_valueType, \"No content to map due to end-of-input\"); } } return t; } protected void _initForMultiRead(DeserializationContext ctxt, JsonParser p) throws IOException"
      },
      {
        "txt": "{ if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); } public ObjectReader with(DeserializationFeature feature) { return _with(_config.with(feature)); } public ObjectReader with(DeserializationFeature first,"
      },
      {
        "txt": "DeserializationFeature... other) { return _with(_config.with(first, other)); } public ObjectReader withFeatures(DeserializationFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(DeserializationFeature feature) { return _with(_config.without(feature)); }"
      },
      {
        "txt": "public ObjectReader without(DeserializationFeature first, DeserializationFeature... other) { return _with(_config.without(first, other)); } public ObjectReader withoutFeatures(DeserializationFeature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(JsonParser.Feature feature) { return _with(_config.with(feature)); }"
      },
      {
        "txt": "public ObjectReader withFeatures(JsonParser.Feature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(JsonParser.Feature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(JsonParser.Feature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader with(FormatFeature feature) {"
      },
      {
        "txt": "return _with(_config.with(feature)); } public ObjectReader withFeatures(FormatFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(FormatFeature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(FormatFeature... features) { return _with(_config.withoutFeatures(features));"
      },
      {
        "txt": "} public ObjectReader at(final String value) { return new ObjectReader(this, new JsonPointerBasedFilter(value)); } public ObjectReader at(final JsonPointer pointer) { return new ObjectReader(this, new JsonPointerBasedFilter(pointer)); } public ObjectReader with(DeserializationConfig config) { return _with(config); }"
      },
      {
        "txt": "public ObjectReader with(InjectableValues injectableValues) { if (_injectableValues == injectableValues) { return this; } return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, injectableValues, _dataFormatReaders); } public ObjectReader with(JsonNodeFactory f) {"
      },
      {
        "txt": "return _with(_config.with(f)); } public ObjectReader with(JsonFactory f) { if (f == _parserFactory) { return this; } ObjectReader r = _new(this, f); if (f.getCodec() == null) { f.setCodec(r); }"
      },
      {
        "txt": "return r; } public ObjectReader withRootName(String rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader withRootName(PropertyName rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader withoutRootName() { return _with(_config.withRootName(PropertyName.NO_NAME));"
      },
      {
        "txt": "} public ObjectReader with(FormatSchema schema) { if (_schema == schema) { return this; } _verifySchemaType(schema); return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders); }"
      },
      {
        "txt": "public ObjectReader forType(JavaType valueType) { if (valueType != null && valueType.equals(_valueType)) { return this; } JsonDeserializer<Object> rootDeser = _prefetchRootDeserializer(valueType); DataFormatReaders det = _dataFormatReaders; if (det != null) { det = det.withType(valueType); }"
      },
      {
        "txt": "return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det); } public ObjectReader forType(Class<?> valueType) { return forType(_config.constructType(valueType)); } public ObjectReader forType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } @Deprecated"
      },
      {
        "txt": "public ObjectReader withType(JavaType valueType) { return forType(valueType); } @Deprecated public ObjectReader withType(Class<?> valueType) { return forType(_config.constructType(valueType)); } @Deprecated public ObjectReader withType(java.lang.reflect.Type valueType) { return forType(_config.getTypeFactory().constructType(valueType));"
      },
      {
        "txt": "} @Deprecated public ObjectReader withType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } public ObjectReader withValueToUpdate(Object value) { if (value == _valueToUpdate) return this; if (value == null) { return _new(this, _config, _valueType, _rootDeserializer, null,"
      },
      {
        "txt": "_schema, _injectableValues, _dataFormatReaders); } JavaType t; if (_valueType == null) { t = _config.constructType(value.getClass()); } else { t = _valueType; } return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders);"
      },
      {
        "txt": "} public ObjectReader withView(Class<?> activeView) { return _with(_config.withView(activeView)); } public ObjectReader with(Locale l) { return _with(_config.with(l)); } public ObjectReader with(TimeZone tz) { return _with(_config.with(tz)); }"
      },
      {
        "txt": "public ObjectReader withHandler(DeserializationProblemHandler h) { return _with(_config.withHandler(h)); } public ObjectReader with(Base64Variant defaultBase64) { return _with(_config.with(defaultBase64)); } public ObjectReader withFormatDetection(ObjectReader... readers) { return withFormatDetection(new DataFormatReaders(readers)); } public ObjectReader withFormatDetection(DataFormatReaders readers) {"
      },
      {
        "txt": "return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers); } public ObjectReader with(ContextAttributes attrs) { return _with(_config.with(attrs)); } public ObjectReader withAttributes(Map<?,?> attrs) { return _with(_config.withAttributes(attrs)); } public ObjectReader withAttribute(Object key, Object value) {"
      },
      {
        "txt": "return _with( _config.withAttribute(key, value)); } public ObjectReader withoutAttribute(Object key) { return _with(_config.withoutAttribute(key)); } protected ObjectReader _with(DeserializationConfig newConfig) { if (newConfig == _config) { return this; } ObjectReader r = _new(this, newConfig);"
      },
      {
        "txt": "if (_dataFormatReaders != null) { r = r.withFormatDetection(_dataFormatReaders.with(newConfig)); } return r; } public boolean isEnabled(DeserializationFeature f) { return _config.isEnabled(f); } public boolean isEnabled(MapperFeature f) { return _config.isEnabled(f);"
      },
      {
        "txt": "} public boolean isEnabled(JsonParser.Feature f) { return _parserFactory.isEnabled(f); } public DeserializationConfig getConfig() { return _config; } @Override public JsonFactory getFactory() { return _parserFactory;"
      },
      {
        "txt": "} public TypeFactory getTypeFactory() { return _config.getTypeFactory(); } public ContextAttributes getAttributes() { return _config.getAttributes(); } public InjectableValues getInjectableValues() { return _injectableValues; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p) throws IOException { return (T) _bind(p, _valueToUpdate); } @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser p, Class<T> valueType) throws IOException { return (T) forType(valueType).readValue(p);"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef) throws IOException { return (T) forType(valueTypeRef).readValue(p); } @Override @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, ResolvedType valueType) throws IOException {"
      },
      {
        "txt": "return (T) forType((JavaType)valueType).readValue(p); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, JavaType valueType) throws IOException { return (T) forType(valueType).readValue(p); } @Override public <T> Iterator<T> readValues(JsonParser p, Class<T> valueType) throws IOException { return forType(valueType).readValues(p); }"
      },
      {
        "txt": "@Override public <T> Iterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef) throws IOException { return forType(valueTypeRef).readValues(p); } @Override public <T> Iterator<T> readValues(JsonParser p, ResolvedType valueType) throws IOException { return readValues(p, (JavaType) valueType); } public <T> Iterator<T> readValues(JsonParser p, JavaType valueType) throws IOException { return forType(valueType).readValues(p);"
      },
      {
        "txt": "} @Override public JsonNode createArrayNode() { return _config.getNodeFactory().arrayNode(); } @Override public JsonNode createObjectNode() { return _config.getNodeFactory().objectNode(); } @Override"
      },
      {
        "txt": "ObjectReader codec = withValueToUpdate(null); return new TreeTraversingParser((JsonNode) n, codec); } @SuppressWarnings(\"unchecked\") @Override public <T extends TreeNode> T readTree(JsonParser p) throws IOException { <extra_id_0> } @Override public void writeTree(JsonGenerator g, TreeNode rootNode) { throw new UnsupportedOperationException(); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(Reader src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String src) throws IOException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, 0, src.length);"
      },
      {
        "txt": "} return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int length) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, offset, length); }"
      },
      {
        "txt": "return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src, offset, length), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(File src) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); }"
      },
      {
        "txt": "return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(URL src) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false));"
      },
      {
        "txt": "} @SuppressWarnings({ \"unchecked\", \"resource\" }) public <T> T readValue(JsonNode src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(treeAsTokens(src), false)); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(DataInput src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } public JsonNode readTree(InputStream in) throws IOException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return _detectBindAndCloseAsTree(in); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(in), false)); } public JsonNode readTree(Reader r) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(r); }"
      },
      {
        "txt": "return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(r), false)); } public JsonNode readTree(String json) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false)); } public JsonNode readTree(byte[] json) throws IOException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { _reportUndetectableSource(json); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false)); } public JsonNode readTree(byte[] json, int offset, int len) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(json);"
      },
      {
        "txt": "} return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json, offset, len), false)); } public JsonNode readTree(DataInput src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(src), false)); }"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(JsonParser p) throws IOException { DeserializationContext ctxt = createDeserializationContext(p); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), false); } public <T> MappingIterator<T> readValues(InputStream src) throws IOException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(Reader src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src);"
      },
      {
        "txt": "} JsonParser p = _considerFilter(_parserFactory.createParser(src), true); DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(String json) throws IOException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { _reportUndetectableSource(json); } JsonParser p = _considerFilter(_parserFactory.createParser(json), true); DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); }"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), true)); } public final <T> MappingIterator<T> readValues(byte[] src)"
      },
      {
        "txt": "throws IOException { return readValues(src, 0, src.length); } public <T> MappingIterator<T> readValues(File src) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), false); }"
      },
      {
        "txt": "return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } public <T> MappingIterator<T> readValues(URL src) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), true); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true));"
      },
      {
        "txt": "} public <T> MappingIterator<T> readValues(DataInput src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } @Override public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException"
      },
      {
        "txt": "{ try { return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e; } catch (IOException e) { // should not occur, no real i/o... throw JsonMappingException.fromUnexpectedIOE(e); } } @Override"
      },
      {
        "txt": "public void writeValue(JsonGenerator gen, Object value) throws IOException { throw new UnsupportedOperationException(\"Not implemented for ObjectReader\"); } protected Object _bind(JsonParser p, Object valueToUpdate) throws IOException { Object result; final DeserializationContext ctxt = createDeserializationContext(p); JsonToken t = _initForReading(ctxt, p); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) {"
      },
      {
        "txt": "result = _findRootDeserializer(ctxt).getNullValue(ctxt); } else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = valueToUpdate; } else { // pointing to event other than null JsonDeserializer<Object> deser = _findRootDeserializer(ctxt); if (_unwrapRoot) { result = _unwrapAndDeserialize(p, ctxt, _valueType, deser);"
      },
      {
        "txt": "} else { if (valueToUpdate == null) { result = deser.deserialize(p, ctxt); } else { result = deser.deserialize(p, ctxt, valueToUpdate); } } } p.clearCurrentToken(); if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) {"
      },
      {
        "txt": "_verifyNoTrailingTokens(p, ctxt, _valueType); } return result; } protected Object _bindAndClose(JsonParser p0) throws IOException { try (JsonParser p = p0) { Object result; DeserializationContext ctxt = createDeserializationContext(p); JsonToken t = _initForReading(ctxt, p);"
      },
      {
        "txt": "if (t == JsonToken.VALUE_NULL) { if (_valueToUpdate == null) { result = _findRootDeserializer(ctxt).getNullValue(ctxt); } else { result = _valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = _valueToUpdate; } else { JsonDeserializer<Object> deser = _findRootDeserializer(ctxt);"
      },
      {
        "txt": "if (_unwrapRoot) { result = _unwrapAndDeserialize(p, ctxt, _valueType, deser); } else { if (_valueToUpdate == null) { result = deser.deserialize(p, ctxt); } else { deser.deserialize(p, ctxt, _valueToUpdate); result = _valueToUpdate; } }"
      },
      {
        "txt": "} if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, _valueType); } return result; } } protected final JsonNode _bindAndCloseAsTree(JsonParser p0) throws IOException { try (JsonParser p = p0) { return _bindAsTree(p);"
      },
      {
        "txt": "} } protected final JsonNode _bindAsTree(JsonParser p) throws IOException { _config.initialize(p); if (_schema != null) { p.setSchema(_schema); } JsonToken t = p.getCurrentToken(); if (t == null) {"
      },
      {
        "txt": "t = p.nextToken(); if (t == null) { return _config.getNodeFactory().missingNode(); } } final JsonNode resultNode; if (t == JsonToken.VALUE_NULL) { resultNode = _config.getNodeFactory().nullNode(); } else { final DeserializationContext ctxt = createDeserializationContext(p);"
      },
      {
        "txt": "final JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt); if (_unwrapRoot) { resultNode = (JsonNode) _unwrapAndDeserialize(p, ctxt, JSON_NODE_TYPE, deser); } else { resultNode = (JsonNode) deser.deserialize(p, ctxt); if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, JSON_NODE_TYPE); } } }"
      },
      {
        "txt": "return resultNode; } protected <T> MappingIterator<T> _bindAndReadValues(JsonParser p) throws IOException { DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); } protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt,"
      },
      {
        "txt": "JavaType rootType, JsonDeserializer<Object> deser) throws IOException { PropertyName expRootName = _config.findRootName(rootType); String expSimpleName = expRootName.getSimpleName(); if (p.getCurrentToken() != JsonToken.START_OBJECT) { ctxt.reportWrongTokenException(rootType, JsonToken.START_OBJECT, \"Current token not START_OBJECT (needed to unwrap root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } if (p.nextToken() != JsonToken.FIELD_NAME) {"
      },
      {
        "txt": "ctxt.reportWrongTokenException(rootType, JsonToken.FIELD_NAME, \"Current token not FIELD_NAME (to contain expected root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } String actualName = p.getCurrentName(); if (!expSimpleName.equals(actualName)) { ctxt.reportInputMismatch(rootType, \"Root name '%s' does not match expected ('%s') for type %s\", actualName, expSimpleName, rootType); }"
      },
      {
        "txt": "p.nextToken(); Object result; if (_valueToUpdate == null) { result = deser.deserialize(p, ctxt); } else { deser.deserialize(p, ctxt, _valueToUpdate); result = _valueToUpdate; } if (p.nextToken() != JsonToken.END_OBJECT) { ctxt.reportWrongTokenException(rootType, JsonToken.END_OBJECT,"
      },
      {
        "txt": "\"Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, _valueType); } return result; } protected JsonParser _considerFilter(final JsonParser p, boolean multiValue) { return ((_filter == null) || FilteringParserDelegate.class.isInstance(p))"
      },
      {
        "txt": "? p : new FilteringParserDelegate(p, _filter, false, multiValue); } protected final void _verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType) throws IOException { JsonToken t = p.nextToken(); if (t != null) { Class<?> bt = ClassUtil.rawClass(bindType); if (bt == null) {"
      },
      {
        "txt": "if (_valueToUpdate != null) { bt = _valueToUpdate.getClass(); } } ctxt.reportTrailingTokens(bt, p, t); } } @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException {"
      },
      {
        "txt": "DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); return match.getReader()._bindAndClose(p); } @SuppressWarnings({ \"resource\" }) protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing) throws IOException"
      },
      {
        "txt": "{ if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndClose(p); }"
      },
      {
        "txt": "@SuppressWarnings({ \"resource\" }) protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing) throws IOException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);"
      },
      {
        "txt": "} return match.getReader()._bindAndReadValues(p); } @SuppressWarnings({ \"resource\" }) protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(in); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); }"
      },
      {
        "txt": "JsonParser p = match.createParserWithMatch(); p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); return match.getReader()._bindAndCloseAsTree(p); } protected void _reportUnkownFormat(DataFormatReaders detector, DataFormatReaders.Match match) throws JsonProcessingException { throw new JsonParseException(null, \"Cannot detect format from input, does not look like any of detectable formats \" +detector.toString()); }"
      },
      {
        "txt": "protected void _verifySchemaType(FormatSchema schema) { if (schema != null) { if (!_parserFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Cannot use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_parserFactory.getFormatName()); } } } protected DefaultDeserializationContext createDeserializationContext(JsonParser p) {"
      },
      {
        "txt": "return _context.createInstance(_config, p, _injectableValues); } protected InputStream _inputStream(URL src) throws IOException { return src.openStream(); } protected InputStream _inputStream(File f) throws IOException { return new FileInputStream(f); } protected void _reportUndetectableSource(Object src) throws JsonProcessingException {"
      },
      {
        "txt": "throw new JsonParseException(null, \"Cannot use source of type \" +src.getClass().getName()+\" with format auto-detection: must be byte- not char-based\"); } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt) throws JsonMappingException { if (_rootDeserializer != null) { return _rootDeserializer; } JavaType t = _valueType;"
      },
      {
        "txt": "if (t == null) { ctxt.reportBadDefinition((JavaType) null, \"No value type configured for ObjectReader\"); } JsonDeserializer<Object> deser = _rootDeserializers.get(t); if (deser != null) { return deser; } deser = ctxt.findRootValueDeserializer(t); if (deser == null) { // can this happen?"
      },
      {
        "txt": "ctxt.reportBadDefinition(t, \"Cannot find a deserializer for type \"+t); } _rootDeserializers.put(t, deser); return deser; } protected JsonDeserializer<Object> _findTreeDeserializer(DeserializationContext ctxt) throws JsonMappingException { JsonDeserializer<Object> deser = _rootDeserializers.get(JSON_NODE_TYPE); if (deser == null) {"
      },
      {
        "txt": "deser = ctxt.findRootValueDeserializer(JSON_NODE_TYPE); if (deser == null) { // can this happen? ctxt.reportBadDefinition(JSON_NODE_TYPE, \"Cannot find a deserializer for type \"+JSON_NODE_TYPE); } _rootDeserializers.put(JSON_NODE_TYPE, deser); } return deser; } protected JsonDeserializer<Object> _prefetchRootDeserializer(JavaType valueType)"
      },
      {
        "txt": "{ if ((valueType == null) || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) { return null; } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser == null) { try { DeserializationContext ctxt = createDeserializationContext(null); deser = ctxt.findRootValueDeserializer(valueType); if (deser != null) {"
      },
      {
        "txt": "_rootDeserializers.put(valueType, deser); } return deser; } catch (JsonProcessingException e) { } } return deser; }"
      }
    ]
  },
  {
    "id": 1792,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectReader.java",
    "start-bug-line": 1707,
    "end-bug-line": 1707,
    "bug": "",
    "fix": "protected final JsonNode _bindAsTreeOrNull(JsonParser p) throws IOException { _config.initialize(p); if (_schema != null) { p.setSchema(_schema); } JsonToken t = p.getCurrentToken(); if (t == null) { t = p.nextToken(); if (t == null) { return null; } } final JsonNode resultNode; if (t == JsonToken.VALUE_NULL) { resultNode = _config.getNodeFactory().nullNode(); } else { final DeserializationContext ctxt = createDeserializationContext(p); final JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt); if (_unwrapRoot) { resultNode = (JsonNode) _unwrapAndDeserialize(p, ctxt, JSON_NODE_TYPE, deser); } else { resultNode = (JsonNode) deser.deserialize(p, ctxt); if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, JSON_NODE_TYPE); } } } return resultNode; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.*; import java.net.URL; import java.util.*; import java.util.concurrent.ConcurrentHashMap; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.filter.FilteringParserDelegate; import com.fasterxml.jackson.core.filter.JsonPointerBasedFilter; import com.fasterxml.jackson.core.filter.TokenFilter; import com.fasterxml.jackson.core.type.ResolvedType;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.databind.cfg.ContextAttributes; import com.fasterxml.jackson.databind.deser.DataFormatReaders; import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext; import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler; import com.fasterxml.jackson.databind.node.JsonNodeFactory; import com.fasterxml.jackson.databind.node.TreeTraversingParser; import com.fasterxml.jackson.databind.type.SimpleType; import com.fasterxml.jackson.databind.type.TypeFactory; import com.fasterxml.jackson.databind.util.ClassUtil;"
      },
      {
        "txt": "public class ObjectReader extends ObjectCodec implements Versioned, java.io.Serializable // since 2.1 { private static final long serialVersionUID = 2L; // since 2.9 private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final DeserializationConfig _config; protected final DefaultDeserializationContext _context; protected final JsonFactory _parserFactory; protected final boolean _unwrapRoot;"
      },
      {
        "txt": "private final TokenFilter _filter; protected final JavaType _valueType; protected final JsonDeserializer<Object> _rootDeserializer; protected final Object _valueToUpdate; protected final FormatSchema _schema; protected final InjectableValues _injectableValues; protected final DataFormatReaders _dataFormatReaders; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers; protected ObjectReader(ObjectMapper mapper, DeserializationConfig config) { this(mapper, config, null, null, null, null);"
      },
      {
        "txt": "} protected ObjectReader(ObjectMapper mapper, DeserializationConfig config, JavaType valueType, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues) { _config = config; _context = mapper._deserializationContext; _rootDeserializers = mapper._rootDeserializers; _parserFactory = mapper._jsonFactory; _valueType = valueType;"
      },
      {
        "txt": "_valueToUpdate = valueToUpdate; _schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _rootDeserializer = _prefetchRootDeserializer(valueType); _dataFormatReaders = null; _filter = null; } protected ObjectReader(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate,"
      },
      {
        "txt": "FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { _config = config; _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = valueType; _rootDeserializer = rootDeser; _valueToUpdate = valueToUpdate;"
      },
      {
        "txt": "_schema = schema; _injectableValues = injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = dataFormatReaders; _filter = base._filter; } protected ObjectReader(ObjectReader base, DeserializationConfig config) { _config = config; _context = base._context;"
      },
      {
        "txt": "_rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = config.useRootWrapping(); _dataFormatReaders = base._dataFormatReaders; _filter = base._filter;"
      },
      {
        "txt": "} protected ObjectReader(ObjectReader base, JsonFactory f) { _config = base._config .with(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, f.requiresPropertyOrdering()); _context = base._context; _rootDeserializers = base._rootDeserializers; _parserFactory = f; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer;"
      },
      {
        "txt": "_valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; _filter = base._filter; } protected ObjectReader(ObjectReader base, TokenFilter filter) { _config = base._config; _context = base._context;"
      },
      {
        "txt": "_rootDeserializers = base._rootDeserializers; _parserFactory = base._parserFactory; _valueType = base._valueType; _rootDeserializer = base._rootDeserializer; _valueToUpdate = base._valueToUpdate; _schema = base._schema; _injectableValues = base._injectableValues; _unwrapRoot = base._unwrapRoot; _dataFormatReaders = base._dataFormatReaders; _filter = filter;"
      },
      {
        "txt": "} @Override public Version version() { return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } protected ObjectReader _new(ObjectReader base, JsonFactory f) { return new ObjectReader(base, f); } protected ObjectReader _new(ObjectReader base, DeserializationConfig config) { return new ObjectReader(base, config);"
      },
      {
        "txt": "} protected ObjectReader _new(ObjectReader base, DeserializationConfig config, JavaType valueType, JsonDeserializer<Object> rootDeser, Object valueToUpdate, FormatSchema schema, InjectableValues injectableValues, DataFormatReaders dataFormatReaders) { return new ObjectReader(base, config, valueType, rootDeser, valueToUpdate, schema, injectableValues, dataFormatReaders); } protected <T> MappingIterator<T> _newIterator(JsonParser p, DeserializationContext ctxt, JsonDeserializer<?> deser, boolean parserManaged)"
      },
      {
        "txt": "{ return new MappingIterator<T>(_valueType, p, ctxt, deser, parserManaged, _valueToUpdate); } protected JsonToken _initForReading(DeserializationContext ctxt, JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); }"
      },
      {
        "txt": "_config.initialize(p); // since 2.5 JsonToken t = p.getCurrentToken(); if (t == null) { // and then we must get something... t = p.nextToken(); if (t == null) { ctxt.reportInputMismatch(_valueType, \"No content to map due to end-of-input\"); } } return t;"
      },
      {
        "txt": "} protected void _initForMultiRead(DeserializationContext ctxt, JsonParser p) throws IOException { if (_schema != null) { p.setSchema(_schema); } _config.initialize(p); } public ObjectReader with(DeserializationFeature feature) {"
      },
      {
        "txt": "return _with(_config.with(feature)); } public ObjectReader with(DeserializationFeature first, DeserializationFeature... other) { return _with(_config.with(first, other)); } public ObjectReader withFeatures(DeserializationFeature... features) { return _with(_config.withFeatures(features)); }"
      },
      {
        "txt": "public ObjectReader without(DeserializationFeature feature) { return _with(_config.without(feature)); } public ObjectReader without(DeserializationFeature first, DeserializationFeature... other) { return _with(_config.without(first, other)); } public ObjectReader withoutFeatures(DeserializationFeature... features) { return _with(_config.withoutFeatures(features)); }"
      },
      {
        "txt": "public ObjectReader with(JsonParser.Feature feature) { return _with(_config.with(feature)); } public ObjectReader withFeatures(JsonParser.Feature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(JsonParser.Feature feature) { return _with(_config.without(feature)); } public ObjectReader withoutFeatures(JsonParser.Feature... features) {"
      },
      {
        "txt": "return _with(_config.withoutFeatures(features)); } public ObjectReader with(FormatFeature feature) { return _with(_config.with(feature)); } public ObjectReader withFeatures(FormatFeature... features) { return _with(_config.withFeatures(features)); } public ObjectReader without(FormatFeature feature) { return _with(_config.without(feature));"
      },
      {
        "txt": "} public ObjectReader withoutFeatures(FormatFeature... features) { return _with(_config.withoutFeatures(features)); } public ObjectReader at(final String value) { return new ObjectReader(this, new JsonPointerBasedFilter(value)); } public ObjectReader at(final JsonPointer pointer) { return new ObjectReader(this, new JsonPointerBasedFilter(pointer)); }"
      },
      {
        "txt": "public ObjectReader with(DeserializationConfig config) { return _with(config); } public ObjectReader with(InjectableValues injectableValues) { if (_injectableValues == injectableValues) { return this; } return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate,"
      },
      {
        "txt": "_schema, injectableValues, _dataFormatReaders); } public ObjectReader with(JsonNodeFactory f) { return _with(_config.with(f)); } public ObjectReader with(JsonFactory f) { if (f == _parserFactory) { return this; } ObjectReader r = _new(this, f);"
      },
      {
        "txt": "if (f.getCodec() == null) { f.setCodec(r); } return r; } public ObjectReader withRootName(String rootName) { return _with(_config.withRootName(rootName)); } public ObjectReader withRootName(PropertyName rootName) { return _with(_config.withRootName(rootName));"
      },
      {
        "txt": "} public ObjectReader withoutRootName() { return _with(_config.withRootName(PropertyName.NO_NAME)); } public ObjectReader with(FormatSchema schema) { if (_schema == schema) { return this; } _verifySchemaType(schema);"
      },
      {
        "txt": "return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, schema, _injectableValues, _dataFormatReaders); } public ObjectReader forType(JavaType valueType) { if (valueType != null && valueType.equals(_valueType)) { return this; } JsonDeserializer<Object> rootDeser = _prefetchRootDeserializer(valueType); DataFormatReaders det = _dataFormatReaders;"
      },
      {
        "txt": "if (det != null) { det = det.withType(valueType); } return _new(this, _config, valueType, rootDeser, _valueToUpdate, _schema, _injectableValues, det); } public ObjectReader forType(Class<?> valueType) { return forType(_config.constructType(valueType)); } public ObjectReader forType(TypeReference<?> valueTypeRef) {"
      },
      {
        "txt": "return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } @Deprecated public ObjectReader withType(JavaType valueType) { return forType(valueType); } @Deprecated public ObjectReader withType(Class<?> valueType) { return forType(_config.constructType(valueType)); }"
      },
      {
        "txt": "@Deprecated public ObjectReader withType(java.lang.reflect.Type valueType) { return forType(_config.getTypeFactory().constructType(valueType)); } @Deprecated public ObjectReader withType(TypeReference<?> valueTypeRef) { return forType(_config.getTypeFactory().constructType(valueTypeRef.getType())); } public ObjectReader withValueToUpdate(Object value) {"
      },
      {
        "txt": "if (value == _valueToUpdate) return this; if (value == null) { return _new(this, _config, _valueType, _rootDeserializer, null, _schema, _injectableValues, _dataFormatReaders); } JavaType t; if (_valueType == null) { t = _config.constructType(value.getClass()); } else { t = _valueType;"
      },
      {
        "txt": "} return _new(this, _config, t, _rootDeserializer, value, _schema, _injectableValues, _dataFormatReaders); } public ObjectReader withView(Class<?> activeView) { return _with(_config.withView(activeView)); } public ObjectReader with(Locale l) { return _with(_config.with(l)); }"
      },
      {
        "txt": "public ObjectReader with(TimeZone tz) { return _with(_config.with(tz)); } public ObjectReader withHandler(DeserializationProblemHandler h) { return _with(_config.withHandler(h)); } public ObjectReader with(Base64Variant defaultBase64) { return _with(_config.with(defaultBase64)); } public ObjectReader withFormatDetection(ObjectReader... readers) {"
      },
      {
        "txt": "return withFormatDetection(new DataFormatReaders(readers)); } public ObjectReader withFormatDetection(DataFormatReaders readers) { return _new(this, _config, _valueType, _rootDeserializer, _valueToUpdate, _schema, _injectableValues, readers); } public ObjectReader with(ContextAttributes attrs) { return _with(_config.with(attrs)); } public ObjectReader withAttributes(Map<?,?> attrs) {"
      },
      {
        "txt": "return _with(_config.withAttributes(attrs)); } public ObjectReader withAttribute(Object key, Object value) { return _with( _config.withAttribute(key, value)); } public ObjectReader withoutAttribute(Object key) { return _with(_config.withoutAttribute(key)); } protected ObjectReader _with(DeserializationConfig newConfig) { if (newConfig == _config) {"
      },
      {
        "txt": "return this; } ObjectReader r = _new(this, newConfig); if (_dataFormatReaders != null) { r = r.withFormatDetection(_dataFormatReaders.with(newConfig)); } return r; } public boolean isEnabled(DeserializationFeature f) { return _config.isEnabled(f);"
      },
      {
        "txt": "} public boolean isEnabled(MapperFeature f) { return _config.isEnabled(f); } public boolean isEnabled(JsonParser.Feature f) { return _parserFactory.isEnabled(f); } public DeserializationConfig getConfig() { return _config; }"
      },
      {
        "txt": "@Override public JsonFactory getFactory() { return _parserFactory; } public TypeFactory getTypeFactory() { return _config.getTypeFactory(); } public ContextAttributes getAttributes() { return _config.getAttributes(); }"
      },
      {
        "txt": "public InjectableValues getInjectableValues() { return _injectableValues; } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p) throws IOException { return (T) _bind(p, _valueToUpdate); } @SuppressWarnings(\"unchecked\") @Override"
      },
      {
        "txt": "public <T> T readValue(JsonParser p, Class<T> valueType) throws IOException { return (T) forType(valueType).readValue(p); } @SuppressWarnings(\"unchecked\") @Override public <T> T readValue(JsonParser p, TypeReference<T> valueTypeRef) throws IOException { return (T) forType(valueTypeRef).readValue(p); }"
      },
      {
        "txt": "@Override @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, ResolvedType valueType) throws IOException { return (T) forType((JavaType)valueType).readValue(p); } @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser p, JavaType valueType) throws IOException { return (T) forType(valueType).readValue(p); } @Override"
      },
      {
        "txt": "public <T> Iterator<T> readValues(JsonParser p, Class<T> valueType) throws IOException { return forType(valueType).readValues(p); } @Override public <T> Iterator<T> readValues(JsonParser p, TypeReference<T> valueTypeRef) throws IOException { return forType(valueTypeRef).readValues(p); } @Override public <T> Iterator<T> readValues(JsonParser p, ResolvedType valueType) throws IOException { return readValues(p, (JavaType) valueType);"
      },
      {
        "txt": "} public <T> Iterator<T> readValues(JsonParser p, JavaType valueType) throws IOException { return forType(valueType).readValues(p); } @Override public JsonNode createArrayNode() { return _config.getNodeFactory().arrayNode(); } @Override public JsonNode createObjectNode() {"
      },
      {
        "txt": "return _config.getNodeFactory().objectNode(); } @Override public JsonParser treeAsTokens(TreeNode n) { ObjectReader codec = withValueToUpdate(null); return new TreeTraversingParser((JsonNode) n, codec); } @SuppressWarnings(\"unchecked\") @Override public <T extends TreeNode> T readTree(JsonParser p) throws IOException {"
      },
      {
        "txt": "return (T) _bindAsTree(p); } @Override public void writeTree(JsonGenerator g, TreeNode rootNode) { throw new UnsupportedOperationException(); } @SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src) throws IOException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "return (T) _detectBindAndClose(_dataFormatReaders.findFormat(src), false); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(Reader src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); }"
      },
      {
        "txt": "return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src) throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, 0, src.length); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int length)"
      },
      {
        "txt": "throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(src, offset, length); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src, offset, length), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(File src)"
      },
      {
        "txt": "throws IOException { if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(URL src) throws IOException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return (T) _detectBindAndClose(_dataFormatReaders.findFormat(_inputStream(src)), true); } return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } @SuppressWarnings({ \"unchecked\", \"resource\" }) public <T> T readValue(JsonNode src) throws IOException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return (T) _bindAndClose(_considerFilter(treeAsTokens(src), false)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(DataInput src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src);"
      },
      {
        "txt": "} return (T) _bindAndClose(_considerFilter(_parserFactory.createParser(src), false)); } public JsonNode readTree(InputStream in) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndCloseAsTree(in); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(in), false)); }"
      },
      {
        "txt": "public JsonNode readTree(Reader r) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(r); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(r), false)); } public JsonNode readTree(String json) throws IOException { if (_dataFormatReaders != null) {"
      },
      {
        "txt": "_reportUndetectableSource(json); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false)); } public JsonNode readTree(byte[] json) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json), false));"
      },
      {
        "txt": "} public JsonNode readTree(byte[] json, int offset, int len) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(json, offset, len), false)); } public JsonNode readTree(DataInput src) throws IOException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { _reportUndetectableSource(src); } return _bindAndCloseAsTree(_considerFilter(_parserFactory.createParser(src), false)); } public <T> MappingIterator<T> readValues(JsonParser p) throws IOException { DeserializationContext ctxt = createDeserializationContext(p); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), false);"
      },
      {
        "txt": "} public <T> MappingIterator<T> readValues(InputStream src) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } @SuppressWarnings(\"resource\")"
      },
      {
        "txt": "public <T> MappingIterator<T> readValues(Reader src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src); } JsonParser p = _considerFilter(_parserFactory.createParser(src), true); DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken();"
      },
      {
        "txt": "return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); } @SuppressWarnings(\"resource\") public <T> MappingIterator<T> readValues(String json) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(json); } JsonParser p = _considerFilter(_parserFactory.createParser(json), true);"
      },
      {
        "txt": "DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); } public <T> MappingIterator<T> readValues(byte[] src, int offset, int length) throws IOException { if (_dataFormatReaders != null) { return _detectBindAndReadValues(_dataFormatReaders.findFormat(src, offset, length), false);"
      },
      {
        "txt": "} return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src, offset, length), true)); } public final <T> MappingIterator<T> readValues(byte[] src) throws IOException { return readValues(src, 0, src.length); } public <T> MappingIterator<T> readValues(File src) throws IOException"
      },
      {
        "txt": "{ if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), false); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } public <T> MappingIterator<T> readValues(URL src) throws IOException {"
      },
      {
        "txt": "if (_dataFormatReaders != null) { return _detectBindAndReadValues( _dataFormatReaders.findFormat(_inputStream(src)), true); } return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } public <T> MappingIterator<T> readValues(DataInput src) throws IOException { if (_dataFormatReaders != null) { _reportUndetectableSource(src);"
      },
      {
        "txt": "} return _bindAndReadValues(_considerFilter(_parserFactory.createParser(src), true)); } @Override public <T> T treeToValue(TreeNode n, Class<T> valueType) throws JsonProcessingException { try { return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e;"
      },
      {
        "txt": "} catch (IOException e) { // should not occur, no real i/o... throw JsonMappingException.fromUnexpectedIOE(e); } } @Override public void writeValue(JsonGenerator gen, Object value) throws IOException { throw new UnsupportedOperationException(\"Not implemented for ObjectReader\"); } protected Object _bind(JsonParser p, Object valueToUpdate) throws IOException {"
      },
      {
        "txt": "Object result; final DeserializationContext ctxt = createDeserializationContext(p); JsonToken t = _initForReading(ctxt, p); if (t == JsonToken.VALUE_NULL) { if (valueToUpdate == null) { result = _findRootDeserializer(ctxt).getNullValue(ctxt); } else { result = valueToUpdate; } } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {"
      },
      {
        "txt": "result = valueToUpdate; } else { // pointing to event other than null JsonDeserializer<Object> deser = _findRootDeserializer(ctxt); if (_unwrapRoot) { result = _unwrapAndDeserialize(p, ctxt, _valueType, deser); } else { if (valueToUpdate == null) { result = deser.deserialize(p, ctxt); } else { result = deser.deserialize(p, ctxt, valueToUpdate);"
      },
      {
        "txt": "} } } p.clearCurrentToken(); if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, _valueType); } return result; } protected Object _bindAndClose(JsonParser p0) throws IOException"
      },
      {
        "txt": "{ try (JsonParser p = p0) { Object result; DeserializationContext ctxt = createDeserializationContext(p); JsonToken t = _initForReading(ctxt, p); if (t == JsonToken.VALUE_NULL) { if (_valueToUpdate == null) { result = _findRootDeserializer(ctxt).getNullValue(ctxt); } else { result = _valueToUpdate;"
      },
      {
        "txt": "} } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = _valueToUpdate; } else { JsonDeserializer<Object> deser = _findRootDeserializer(ctxt); if (_unwrapRoot) { result = _unwrapAndDeserialize(p, ctxt, _valueType, deser); } else { if (_valueToUpdate == null) { result = deser.deserialize(p, ctxt);"
      },
      {
        "txt": "} else { deser.deserialize(p, ctxt, _valueToUpdate); result = _valueToUpdate; } } } if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, _valueType); } return result;"
      },
      {
        "txt": "} } protected final JsonNode _bindAndCloseAsTree(JsonParser p0) throws IOException { try (JsonParser p = p0) { return _bindAsTree(p); } } protected final JsonNode _bindAsTree(JsonParser p) throws IOException { _config.initialize(p);"
      },
      {
        "txt": "if (_schema != null) { p.setSchema(_schema); } JsonToken t = p.getCurrentToken(); if (t == null) { t = p.nextToken(); if (t == null) { return _config.getNodeFactory().missingNode(); } }"
      },
      {
        "txt": "final JsonNode resultNode; if (t == JsonToken.VALUE_NULL) { resultNode = _config.getNodeFactory().nullNode(); } else { final DeserializationContext ctxt = createDeserializationContext(p); final JsonDeserializer<Object> deser = _findTreeDeserializer(ctxt); if (_unwrapRoot) { resultNode = (JsonNode) _unwrapAndDeserialize(p, ctxt, JSON_NODE_TYPE, deser); } else { resultNode = (JsonNode) deser.deserialize(p, ctxt);"
      },
      {
        "txt": "_verifyNoTrailingTokens(p, ctxt, JSON_NODE_TYPE); } } } return resultNode; } <extra_id_0> protected <T> MappingIterator<T> _bindAndReadValues(JsonParser p) throws IOException { DeserializationContext ctxt = createDeserializationContext(p); _initForMultiRead(ctxt, p); p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true);"
      },
      {
        "txt": "p.nextToken(); return _newIterator(p, ctxt, _findRootDeserializer(ctxt), true); } protected Object _unwrapAndDeserialize(JsonParser p, DeserializationContext ctxt, JavaType rootType, JsonDeserializer<Object> deser) throws IOException { PropertyName expRootName = _config.findRootName(rootType); String expSimpleName = expRootName.getSimpleName(); if (p.getCurrentToken() != JsonToken.START_OBJECT) { ctxt.reportWrongTokenException(rootType, JsonToken.START_OBJECT,"
      },
      {
        "txt": "\"Current token not START_OBJECT (needed to unwrap root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } if (p.nextToken() != JsonToken.FIELD_NAME) { ctxt.reportWrongTokenException(rootType, JsonToken.FIELD_NAME, \"Current token not FIELD_NAME (to contain expected root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } String actualName = p.getCurrentName(); if (!expSimpleName.equals(actualName)) {"
      },
      {
        "txt": "ctxt.reportInputMismatch(rootType, \"Root name '%s' does not match expected ('%s') for type %s\", actualName, expSimpleName, rootType); } p.nextToken(); Object result; if (_valueToUpdate == null) { result = deser.deserialize(p, ctxt); } else { deser.deserialize(p, ctxt, _valueToUpdate);"
      },
      {
        "txt": "result = _valueToUpdate; } if (p.nextToken() != JsonToken.END_OBJECT) { ctxt.reportWrongTokenException(rootType, JsonToken.END_OBJECT, \"Current token not END_OBJECT (to match wrapper object with root name '%s'), but %s\", expSimpleName, p.getCurrentToken()); } if (_config.isEnabled(DeserializationFeature.FAIL_ON_TRAILING_TOKENS)) { _verifyNoTrailingTokens(p, ctxt, _valueType); }"
      },
      {
        "txt": "return result; } protected JsonParser _considerFilter(final JsonParser p, boolean multiValue) { return ((_filter == null) || FilteringParserDelegate.class.isInstance(p)) ? p : new FilteringParserDelegate(p, _filter, false, multiValue); } protected final void _verifyNoTrailingTokens(JsonParser p, DeserializationContext ctxt, JavaType bindType) throws IOException {"
      },
      {
        "txt": "JsonToken t = p.nextToken(); if (t != null) { Class<?> bt = ClassUtil.rawClass(bindType); if (bt == null) { if (_valueToUpdate != null) { bt = _valueToUpdate.getClass(); } } ctxt.reportTrailingTokens(bt, p, t); }"
      },
      {
        "txt": "} @SuppressWarnings(\"resource\") protected Object _detectBindAndClose(byte[] src, int offset, int length) throws IOException { DataFormatReaders.Match match = _dataFormatReaders.findFormat(src, offset, length); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); return match.getReader()._bindAndClose(p);"
      },
      {
        "txt": "} @SuppressWarnings({ \"resource\" }) protected Object _detectBindAndClose(DataFormatReaders.Match match, boolean forceClosing) throws IOException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); if (forceClosing) {"
      },
      {
        "txt": "p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndClose(p); } @SuppressWarnings({ \"resource\" }) protected <T> MappingIterator<T> _detectBindAndReadValues(DataFormatReaders.Match match, boolean forceClosing) throws IOException { if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match);"
      },
      {
        "txt": "} JsonParser p = match.createParserWithMatch(); if (forceClosing) { p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); } return match.getReader()._bindAndReadValues(p); } @SuppressWarnings({ \"resource\" }) protected JsonNode _detectBindAndCloseAsTree(InputStream in) throws IOException {"
      },
      {
        "txt": "DataFormatReaders.Match match = _dataFormatReaders.findFormat(in); if (!match.hasMatch()) { _reportUnkownFormat(_dataFormatReaders, match); } JsonParser p = match.createParserWithMatch(); p.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE); return match.getReader()._bindAndCloseAsTree(p); } protected void _reportUnkownFormat(DataFormatReaders detector, DataFormatReaders.Match match) throws JsonProcessingException"
      },
      {
        "txt": "{ throw new JsonParseException(null, \"Cannot detect format from input, does not look like any of detectable formats \" +detector.toString()); } protected void _verifySchemaType(FormatSchema schema) { if (schema != null) { if (!_parserFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Cannot use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_parserFactory.getFormatName());"
      },
      {
        "txt": "} } } protected DefaultDeserializationContext createDeserializationContext(JsonParser p) { return _context.createInstance(_config, p, _injectableValues); } protected InputStream _inputStream(URL src) throws IOException { return src.openStream(); } protected InputStream _inputStream(File f) throws IOException {"
      },
      {
        "txt": "return new FileInputStream(f); } protected void _reportUndetectableSource(Object src) throws JsonProcessingException { throw new JsonParseException(null, \"Cannot use source of type \" +src.getClass().getName()+\" with format auto-detection: must be byte- not char-based\"); } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt) throws JsonMappingException {"
      },
      {
        "txt": "if (_rootDeserializer != null) { return _rootDeserializer; } JavaType t = _valueType; if (t == null) { ctxt.reportBadDefinition((JavaType) null, \"No value type configured for ObjectReader\"); } JsonDeserializer<Object> deser = _rootDeserializers.get(t); if (deser != null) {"
      },
      {
        "txt": "return deser; } deser = ctxt.findRootValueDeserializer(t); if (deser == null) { // can this happen? ctxt.reportBadDefinition(t, \"Cannot find a deserializer for type \"+t); } _rootDeserializers.put(t, deser); return deser; } protected JsonDeserializer<Object> _findTreeDeserializer(DeserializationContext ctxt)"
      },
      {
        "txt": "throws JsonMappingException { JsonDeserializer<Object> deser = _rootDeserializers.get(JSON_NODE_TYPE); if (deser == null) { deser = ctxt.findRootValueDeserializer(JSON_NODE_TYPE); if (deser == null) { // can this happen? ctxt.reportBadDefinition(JSON_NODE_TYPE, \"Cannot find a deserializer for type \"+JSON_NODE_TYPE); } _rootDeserializers.put(JSON_NODE_TYPE, deser);"
      },
      {
        "txt": "} return deser; } protected JsonDeserializer<Object> _prefetchRootDeserializer(JavaType valueType) { if ((valueType == null) || !_config.isEnabled(DeserializationFeature.EAGER_DESERIALIZER_FETCH)) { return null; } JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser == null) {"
      },
      {
        "txt": "try { DeserializationContext ctxt = createDeserializationContext(null); deser = ctxt.findRootValueDeserializer(valueType); if (deser != null) { _rootDeserializers.put(valueType, deser); } return deser; } catch (JsonProcessingException e) { } }"
      },
      {
        "txt": "return deser; }"
      }
    ]
  }
]
[
  {
    "id": 1449,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
    "start-bug-line": 39,
    "end-bug-line": 39,
    "bug": "implements BeanProperty",
    "fix": "implements BeanProperty, java.io.Serializable // since 2.6.2",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.lang.annotation.Annotation; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.lang.reflect.Type; import java.util.HashMap; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.JsonInclude;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.SerializableString; import com.fasterxml.jackson.core.io.SerializedString; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter; import com.fasterxml.jackson.databind.ser.std.BeanSerializerBase; import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.NameTransformer; @JacksonStdImpl // since 2.6. NOTE: sub-classes typically are not public class BeanPropertyWriter extends PropertyWriter <extra_id_0> { public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY; protected final static JsonFormat.Value NO_FORMAT = new JsonFormat.Value(); protected final SerializedString _name; protected final PropertyName _wrapperName; protected final JavaType _declaredType;"
      },
      {
        "txt": "protected final PropertyName _wrapperName; protected final JavaType _declaredType; protected final JavaType _cfgSerializationType; protected JavaType _nonTrivialBaseType; protected final transient Annotations _contextAnnotations; protected final PropertyMetadata _metadata; protected transient JsonFormat.Value _format; protected final AnnotatedMember _member; protected transient Method _accessorMethod; protected transient Field _field;"
      },
      {
        "txt": "protected JsonSerializer<Object> _serializer; protected JsonSerializer<Object> _nullSerializer; protected TypeSerializer _typeSerializer; protected transient PropertySerializerMap _dynamicSerializers; protected final boolean _suppressNulls; protected final Object _suppressableValue; protected final Class<?>[] _includeInViews; protected transient HashMap<Object,Object> _internalSettings; @SuppressWarnings(\"unchecked\") public BeanPropertyWriter(BeanPropertyDefinition propDef,"
      },
      {
        "txt": "AnnotatedMember member, Annotations contextAnnotations, JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue) { _member = member; _contextAnnotations = contextAnnotations; _name = new SerializedString(propDef.getName()); _wrapperName = propDef.getWrapperName(); _metadata = propDef.getMetadata();"
      },
      {
        "txt": "_includeInViews = propDef.findViews(); _declaredType = declaredType; _serializer = (JsonSerializer<Object>) ser; _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyForProperties() : null; _typeSerializer = typeSer; _cfgSerializationType = serType; if (member instanceof AnnotatedField) { _accessorMethod = null; _field = (Field) member.getMember(); } else if (member instanceof AnnotatedMethod) {"
      },
      {
        "txt": "_accessorMethod = (Method) member.getMember(); _field = null; } else { _accessorMethod = null; _field = null; } _suppressNulls = suppressNulls; _suppressableValue = suppressableValue; _nullSerializer = null; }"
      },
      {
        "txt": "protected BeanPropertyWriter() { _member = null; _contextAnnotations = null; _name = null; _wrapperName = null; _metadata = null; _includeInViews = null; _declaredType = null; _serializer = null; _dynamicSerializers = null;"
      },
      {
        "txt": "_typeSerializer = null; _cfgSerializationType = null; _accessorMethod = null; _field = null; _suppressNulls = false; _suppressableValue = null; _nullSerializer = null; } protected BeanPropertyWriter(BeanPropertyWriter base) { this(base, base._name);"
      },
      {
        "txt": "} protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name) { _name = new SerializedString(name.getSimpleName()); _wrapperName = base._wrapperName; _contextAnnotations = base._contextAnnotations; _declaredType = base._declaredType; _member = base._member; _accessorMethod = base._accessorMethod; _field = base._field;"
      },
      {
        "txt": "_serializer = base._serializer; _nullSerializer = base._nullSerializer; if (base._internalSettings != null) { _internalSettings = new HashMap<Object,Object>(base._internalSettings); } _cfgSerializationType = base._cfgSerializationType; _dynamicSerializers = base._dynamicSerializers; _suppressNulls = base._suppressNulls; _suppressableValue = base._suppressableValue; _includeInViews = base._includeInViews;"
      },
      {
        "txt": "_typeSerializer = base._typeSerializer; _nonTrivialBaseType = base._nonTrivialBaseType; _metadata = base._metadata; } protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) { _name = name; _wrapperName = base._wrapperName; _member = base._member; _contextAnnotations = base._contextAnnotations; _declaredType = base._declaredType;"
      },
      {
        "txt": "_accessorMethod = base._accessorMethod; _field = base._field; _serializer = base._serializer; _nullSerializer = base._nullSerializer; if (base._internalSettings != null) { _internalSettings = new HashMap<Object,Object>(base._internalSettings); } _cfgSerializationType = base._cfgSerializationType; _dynamicSerializers = base._dynamicSerializers; _suppressNulls = base._suppressNulls;"
      },
      {
        "txt": "_suppressableValue = base._suppressableValue; _includeInViews = base._includeInViews; _typeSerializer = base._typeSerializer; _nonTrivialBaseType = base._nonTrivialBaseType; _metadata = base._metadata; } public BeanPropertyWriter rename(NameTransformer transformer) { String newName = transformer.transform(_name.getValue()); if (newName.equals(_name.toString())) { return this;"
      },
      {
        "txt": "} return _new(PropertyName.construct(newName)); } protected BeanPropertyWriter _new(PropertyName newName) { return new BeanPropertyWriter(this, newName); } public void assignTypeSerializer(TypeSerializer typeSer) { _typeSerializer = typeSer; } public void assignSerializer(JsonSerializer<Object> ser) {"
      },
      {
        "txt": "if (_serializer != null && _serializer != ser) { throw new IllegalStateException(\"Can not override serializer\"); } _serializer = ser; } public void assignNullSerializer(JsonSerializer<Object> nullSer) { if (_nullSerializer != null && _nullSerializer != nullSer) { throw new IllegalStateException(\"Can not override null serializer\"); } _nullSerializer = nullSer;"
      },
      {
        "txt": "} public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) { return new UnwrappingBeanPropertyWriter(this, unwrapper); } public void setNonTrivialBaseType(JavaType t) { _nonTrivialBaseType = t; } Object readResolve() { if (_member instanceof AnnotatedField) { _accessorMethod = null;"
      },
      {
        "txt": "_field = (Field) _member.getMember(); } else if (_member instanceof AnnotatedMethod) { _accessorMethod = (Method) _member.getMember(); _field = null; } if (_serializer == null) { _dynamicSerializers = PropertySerializerMap.emptyForProperties(); } return this; }"
      },
      {
        "txt": "@Override public String getName() { return _name.getValue(); } @Override public PropertyName getFullName() { // !!! TODO: impl properly return new PropertyName(_name.getValue()); } @Override public JavaType getType() { return _declaredType; } @Override public PropertyName getWrapperName() { return _wrapperName; } @Override public boolean isRequired() { return _metadata.isRequired(); } @Override public PropertyMetadata getMetadata() { return _metadata; } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) {"
      },
      {
        "txt": "return (_member == null) ? null : _member.getAnnotation(acls); } @Override public <A extends Annotation> A getContextAnnotation(Class<A> acls) { return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls); } @Override public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) { JsonFormat.Value f = _format; if (f == null) { // not yet looked up, do that"
      },
      {
        "txt": "f = ((intr == null) || (_member == null)) ? null : intr.findFormat(_member); _format = (f == null) ? NO_FORMAT : f; } return (f == NO_FORMAT) ? null : f; } @Override public AnnotatedMember getMember() { return _member; } protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) { propertiesNode.set(getName(), schemaNode); }"
      },
      {
        "txt": "public boolean isVirtual() { return false; } public Object getInternalSetting(Object key) { return (_internalSettings == null) ? null : _internalSettings.get(key); } public Object setInternalSetting(Object key, Object value) { if (_internalSettings == null) { _internalSettings = new HashMap<Object,Object>(); } return _internalSettings.put(key, value); }"
      },
      {
        "txt": "public Object removeInternalSetting(Object key) { Object removed = null; if (_internalSettings != null) { removed = _internalSettings.remove(key); if (_internalSettings.size() == 0) { _internalSettings = null; } } return removed; }"
      },
      {
        "txt": "public SerializableString getSerializedName() { return _name; } public boolean hasSerializer() { return _serializer != null; } public boolean hasNullSerializer() { return _nullSerializer != null; } public TypeSerializer getTypeSerializer() { return _typeSerializer; } public boolean isUnwrapping() { return false; } public boolean willSuppressNulls() { return _suppressNulls; } public boolean wouldConflictWithName(PropertyName name) { if (_wrapperName != null) { return _wrapperName.equals(name); }"
      },
      {
        "txt": "return name.hasSimpleName(_name.getValue()) && !name.hasNamespace(); } public JsonSerializer<Object> getSerializer() { return _serializer; } public JavaType getSerializationType() { return _cfgSerializationType; } public Class<?> getRawSerializationType() { return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass(); } public Class<?> getPropertyType() { return (_accessorMethod != null) ? _accessorMethod.getReturnType() : _field.getType();"
      },
      {
        "txt": "} public Type getGenericPropertyType() { if (_accessorMethod != null) { return _accessorMethod.getGenericReturnType(); } if (_field != null) { return _field.getGenericType(); } return null; }"
      },
      {
        "txt": "public Class<?>[] getViews() { return _includeInViews; } @Override public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); if (value == null) { if (_nullSerializer != null) { gen.writeFieldName(_name); _nullSerializer.serialize(null, gen, prov); }"
      },
      {
        "txt": "return; } JsonSerializer<Object> ser = _serializer; if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap m = _dynamicSerializers; ser = m.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(m, cls, prov); }"
      },
      {
        "txt": "} if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) { if (ser.isEmpty(prov, value)) { return; } } else if (_suppressableValue.equals(value)) { return; } }"
      },
      {
        "txt": "if (value == bean) { if (_handleSelfReference(bean, gen, prov, ser)) { return; } } gen.writeFieldName(_name); if (_typeSerializer == null) { ser.serialize(value, gen, prov); } else { ser.serializeWithType(value, gen, prov, _typeSerializer);"
      },
      {
        "txt": "} } @Override public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { if (!gen.canOmitFields()) { gen.writeOmittedField(_name.getValue()); } } @Override"
      },
      {
        "txt": "public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); if (value == null) { // nulls need specialized handling if (_nullSerializer != null) { _nullSerializer.serialize(null, gen, prov); } else { // can NOT suppress entries in tabular output gen.writeNull(); }"
      },
      {
        "txt": "return; } JsonSerializer<Object> ser = _serializer; if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap map = _dynamicSerializers; ser = map.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(map, cls, prov); }"
      },
      {
        "txt": "} if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) { if (ser.isEmpty(prov, value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, gen, prov); return; } } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, gen, prov); return;"
      },
      {
        "txt": "} } if (value == bean) { if (_handleSelfReference(bean, gen, prov, ser)) { return; } } if (_typeSerializer == null) { ser.serialize(value, gen, prov); } else {"
      },
      {
        "txt": "ser.serializeWithType(value, gen, prov, _typeSerializer); } } @Override public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { if (_nullSerializer != null) { _nullSerializer.serialize(null, gen, prov); } else {"
      },
      {
        "txt": "gen.writeNull(); } } @Override public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException { if (v != null) { if (isRequired()) { v.property(this);"
      },
      {
        "txt": "} else { v.optionalProperty(this); } } } @Override @Deprecated public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException {"
      },
      {
        "txt": "JavaType propType = getSerializationType(); Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass(); JsonNode schemaNode; JsonSerializer<Object> ser = getSerializer(); if (ser == null) { // nope ser = provider.findValueSerializer(getType(), this); } boolean isOptional = !isRequired(); if (ser instanceof SchemaAware) { schemaNode = ((SchemaAware) ser).getSchema(provider, hint, isOptional) ;"
      },
      {
        "txt": "} else { schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); } _depositSchemaProperty(propertiesNode, schemaNode); } protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { PropertySerializerMap.SerializerAndMapResult result; if (_nonTrivialBaseType != null) {"
      },
      {
        "txt": "JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type); result = map.findAndAddPrimarySerializer(t, provider, this); } else { result = map.findAndAddPrimarySerializer(type, provider, this); } if (map != result.map) { _dynamicSerializers = result.map; } return result.serializer; }"
      },
      {
        "txt": "public final Object get(Object bean) throws Exception { return (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); } protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException { if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES) && !ser.usesObjectId()) { if (ser instanceof BeanSerializerBase) { throw new JsonMappingException(\"Direct self-reference leading to cycle\"); }"
      },
      {
        "txt": "} return false; } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"property '\").append(getName()).append(\"' (\"); if (_accessorMethod != null) { sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName()); } else if (_field != null) {"
      },
      {
        "txt": "sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName()); } else { sb.append(\"virtual\"); } if (_serializer == null) { sb.append(\", no static serializer\"); } else { sb.append(\", static serializer of type \"+_serializer.getClass().getName()); } sb.append(')');"
      },
      {
        "txt": "return sb.toString(); }"
      }
    ]
  },
  {
    "id": 1450,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/BeanPropertyWriter.java",
    "start-bug-line": 42,
    "end-bug-line": 42,
    "bug": "",
    "fix": "private static final long serialVersionUID = 4603296144163950020L;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser; import java.lang.annotation.Annotation; import java.lang.reflect.Field; import java.lang.reflect.Method; import java.lang.reflect.Type; import java.util.HashMap; import com.fasterxml.jackson.annotation.JsonFormat; import com.fasterxml.jackson.annotation.JsonInclude; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.SerializableString;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.io.SerializedString; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonObjectFormatVisitor; import com.fasterxml.jackson.databind.jsonschema.SchemaAware; import com.fasterxml.jackson.databind.jsontype.TypeSerializer; import com.fasterxml.jackson.databind.node.ObjectNode; import com.fasterxml.jackson.databind.ser.impl.PropertySerializerMap; import com.fasterxml.jackson.databind.ser.impl.UnwrappingBeanPropertyWriter;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.util.Annotations; import com.fasterxml.jackson.databind.util.NameTransformer; @JacksonStdImpl // since 2.6. NOTE: sub-classes typically are not public class BeanPropertyWriter extends PropertyWriter implements BeanProperty { <extra_id_0> public final static Object MARKER_FOR_EMPTY = JsonInclude.Include.NON_EMPTY; protected final static JsonFormat.Value NO_FORMAT = new JsonFormat.Value(); protected final SerializedString _name; protected final PropertyName _wrapperName; protected final JavaType _declaredType; protected final JavaType _cfgSerializationType;"
      },
      {
        "txt": "protected final JavaType _declaredType; protected final JavaType _cfgSerializationType; protected JavaType _nonTrivialBaseType; protected final transient Annotations _contextAnnotations; protected final PropertyMetadata _metadata; protected transient JsonFormat.Value _format; protected final AnnotatedMember _member; protected transient Method _accessorMethod; protected transient Field _field; protected JsonSerializer<Object> _serializer;"
      },
      {
        "txt": "protected JsonSerializer<Object> _nullSerializer; protected TypeSerializer _typeSerializer; protected transient PropertySerializerMap _dynamicSerializers; protected final boolean _suppressNulls; protected final Object _suppressableValue; protected final Class<?>[] _includeInViews; protected transient HashMap<Object,Object> _internalSettings; @SuppressWarnings(\"unchecked\") public BeanPropertyWriter(BeanPropertyDefinition propDef, AnnotatedMember member, Annotations contextAnnotations,"
      },
      {
        "txt": "JavaType declaredType, JsonSerializer<?> ser, TypeSerializer typeSer, JavaType serType, boolean suppressNulls, Object suppressableValue) { _member = member; _contextAnnotations = contextAnnotations; _name = new SerializedString(propDef.getName()); _wrapperName = propDef.getWrapperName(); _metadata = propDef.getMetadata(); _includeInViews = propDef.findViews();"
      },
      {
        "txt": "_declaredType = declaredType; _serializer = (JsonSerializer<Object>) ser; _dynamicSerializers = (ser == null) ? PropertySerializerMap.emptyForProperties() : null; _typeSerializer = typeSer; _cfgSerializationType = serType; if (member instanceof AnnotatedField) { _accessorMethod = null; _field = (Field) member.getMember(); } else if (member instanceof AnnotatedMethod) { _accessorMethod = (Method) member.getMember();"
      },
      {
        "txt": "_field = null; } else { _accessorMethod = null; _field = null; } _suppressNulls = suppressNulls; _suppressableValue = suppressableValue; _nullSerializer = null; } protected BeanPropertyWriter() {"
      },
      {
        "txt": "_member = null; _contextAnnotations = null; _name = null; _wrapperName = null; _metadata = null; _includeInViews = null; _declaredType = null; _serializer = null; _dynamicSerializers = null; _typeSerializer = null;"
      },
      {
        "txt": "_cfgSerializationType = null; _accessorMethod = null; _field = null; _suppressNulls = false; _suppressableValue = null; _nullSerializer = null; } protected BeanPropertyWriter(BeanPropertyWriter base) { this(base, base._name); }"
      },
      {
        "txt": "protected BeanPropertyWriter(BeanPropertyWriter base, PropertyName name) { _name = new SerializedString(name.getSimpleName()); _wrapperName = base._wrapperName; _contextAnnotations = base._contextAnnotations; _declaredType = base._declaredType; _member = base._member; _accessorMethod = base._accessorMethod; _field = base._field; _serializer = base._serializer;"
      },
      {
        "txt": "_nullSerializer = base._nullSerializer; if (base._internalSettings != null) { _internalSettings = new HashMap<Object,Object>(base._internalSettings); } _cfgSerializationType = base._cfgSerializationType; _dynamicSerializers = base._dynamicSerializers; _suppressNulls = base._suppressNulls; _suppressableValue = base._suppressableValue; _includeInViews = base._includeInViews; _typeSerializer = base._typeSerializer;"
      },
      {
        "txt": "_nonTrivialBaseType = base._nonTrivialBaseType; _metadata = base._metadata; } protected BeanPropertyWriter(BeanPropertyWriter base, SerializedString name) { _name = name; _wrapperName = base._wrapperName; _member = base._member; _contextAnnotations = base._contextAnnotations; _declaredType = base._declaredType; _accessorMethod = base._accessorMethod;"
      },
      {
        "txt": "_field = base._field; _serializer = base._serializer; _nullSerializer = base._nullSerializer; if (base._internalSettings != null) { _internalSettings = new HashMap<Object,Object>(base._internalSettings); } _cfgSerializationType = base._cfgSerializationType; _dynamicSerializers = base._dynamicSerializers; _suppressNulls = base._suppressNulls; _suppressableValue = base._suppressableValue;"
      },
      {
        "txt": "_includeInViews = base._includeInViews; _typeSerializer = base._typeSerializer; _nonTrivialBaseType = base._nonTrivialBaseType; _metadata = base._metadata; } public BeanPropertyWriter rename(NameTransformer transformer) { String newName = transformer.transform(_name.getValue()); if (newName.equals(_name.toString())) { return this; }"
      },
      {
        "txt": "return _new(PropertyName.construct(newName)); } protected BeanPropertyWriter _new(PropertyName newName) { return new BeanPropertyWriter(this, newName); } public void assignTypeSerializer(TypeSerializer typeSer) { _typeSerializer = typeSer; } public void assignSerializer(JsonSerializer<Object> ser) { if (_serializer != null && _serializer != ser) {"
      },
      {
        "txt": "throw new IllegalStateException(\"Can not override serializer\"); } _serializer = ser; } public void assignNullSerializer(JsonSerializer<Object> nullSer) { if (_nullSerializer != null && _nullSerializer != nullSer) { throw new IllegalStateException(\"Can not override null serializer\"); } _nullSerializer = nullSer; }"
      },
      {
        "txt": "public BeanPropertyWriter unwrappingWriter(NameTransformer unwrapper) { return new UnwrappingBeanPropertyWriter(this, unwrapper); } public void setNonTrivialBaseType(JavaType t) { _nonTrivialBaseType = t; } Object readResolve() { if (_member instanceof AnnotatedField) { _accessorMethod = null; _field = (Field) _member.getMember();"
      },
      {
        "txt": "} else if (_member instanceof AnnotatedMethod) { _accessorMethod = (Method) _member.getMember(); _field = null; } if (_serializer == null) { _dynamicSerializers = PropertySerializerMap.emptyForProperties(); } return this; } @Override public String getName() { return _name.getValue(); }"
      },
      {
        "txt": "@Override public PropertyName getFullName() { // !!! TODO: impl properly return new PropertyName(_name.getValue()); } @Override public JavaType getType() { return _declaredType; } @Override public PropertyName getWrapperName() { return _wrapperName; } @Override public boolean isRequired() { return _metadata.isRequired(); } @Override public PropertyMetadata getMetadata() { return _metadata; } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return (_member == null) ? null : _member.getAnnotation(acls);"
      },
      {
        "txt": "} @Override public <A extends Annotation> A getContextAnnotation(Class<A> acls) { return (_contextAnnotations == null) ? null : _contextAnnotations.get(acls); } @Override public JsonFormat.Value findFormatOverrides(AnnotationIntrospector intr) { JsonFormat.Value f = _format; if (f == null) { // not yet looked up, do that f = ((intr == null) || (_member == null)) ? null"
      },
      {
        "txt": ": intr.findFormat(_member); _format = (f == null) ? NO_FORMAT : f; } return (f == NO_FORMAT) ? null : f; } @Override public AnnotatedMember getMember() { return _member; } protected void _depositSchemaProperty(ObjectNode propertiesNode, JsonNode schemaNode) { propertiesNode.set(getName(), schemaNode); } public boolean isVirtual() { return false; }"
      },
      {
        "txt": "public Object getInternalSetting(Object key) { return (_internalSettings == null) ? null : _internalSettings.get(key); } public Object setInternalSetting(Object key, Object value) { if (_internalSettings == null) { _internalSettings = new HashMap<Object,Object>(); } return _internalSettings.put(key, value); } public Object removeInternalSetting(Object key) {"
      },
      {
        "txt": "Object removed = null; if (_internalSettings != null) { removed = _internalSettings.remove(key); if (_internalSettings.size() == 0) { _internalSettings = null; } } return removed; } public SerializableString getSerializedName() { return _name; }"
      },
      {
        "txt": "public boolean hasSerializer() { return _serializer != null; } public boolean hasNullSerializer() { return _nullSerializer != null; } public TypeSerializer getTypeSerializer() { return _typeSerializer; } public boolean isUnwrapping() { return false; } public boolean willSuppressNulls() { return _suppressNulls; } public boolean wouldConflictWithName(PropertyName name) { if (_wrapperName != null) { return _wrapperName.equals(name); } return name.hasSimpleName(_name.getValue())"
      },
      {
        "txt": "&& !name.hasNamespace(); } public JsonSerializer<Object> getSerializer() { return _serializer; } public JavaType getSerializationType() { return _cfgSerializationType; } public Class<?> getRawSerializationType() { return (_cfgSerializationType == null) ? null : _cfgSerializationType.getRawClass(); } public Class<?> getPropertyType() { return (_accessorMethod != null) ? _accessorMethod.getReturnType() : _field.getType(); }"
      },
      {
        "txt": "public Type getGenericPropertyType() { if (_accessorMethod != null) { return _accessorMethod.getGenericReturnType(); } if (_field != null) { return _field.getGenericType(); } return null; } public Class<?>[] getViews() { return _includeInViews; }"
      },
      {
        "txt": "@Override public void serializeAsField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); if (value == null) { if (_nullSerializer != null) { gen.writeFieldName(_name); _nullSerializer.serialize(null, gen, prov); } return;"
      },
      {
        "txt": "} JsonSerializer<Object> ser = _serializer; if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap m = _dynamicSerializers; ser = m.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(m, cls, prov); } }"
      },
      {
        "txt": "if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) { if (ser.isEmpty(prov, value)) { return; } } else if (_suppressableValue.equals(value)) { return; } } if (value == bean) {"
      },
      {
        "txt": "if (_handleSelfReference(bean, gen, prov, ser)) { return; } } gen.writeFieldName(_name); if (_typeSerializer == null) { ser.serialize(value, gen, prov); } else { ser.serializeWithType(value, gen, prov, _typeSerializer); }"
      },
      {
        "txt": "} @Override public void serializeAsOmittedField(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { if (!gen.canOmitFields()) { gen.writeOmittedField(_name.getValue()); } } @Override public void serializeAsElement(Object bean, JsonGenerator gen, SerializerProvider prov)"
      },
      {
        "txt": "throws Exception { final Object value = (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); if (value == null) { // nulls need specialized handling if (_nullSerializer != null) { _nullSerializer.serialize(null, gen, prov); } else { // can NOT suppress entries in tabular output gen.writeNull(); } return;"
      },
      {
        "txt": "} JsonSerializer<Object> ser = _serializer; if (ser == null) { Class<?> cls = value.getClass(); PropertySerializerMap map = _dynamicSerializers; ser = map.serializerFor(cls); if (ser == null) { ser = _findAndAddDynamic(map, cls, prov); } }"
      },
      {
        "txt": "if (_suppressableValue != null) { if (MARKER_FOR_EMPTY == _suppressableValue) { if (ser.isEmpty(prov, value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, gen, prov); return; } } else if (_suppressableValue.equals(value)) { // can NOT suppress entries in tabular output serializeAsPlaceholder(bean, gen, prov); return; }"
      },
      {
        "txt": "} if (value == bean) { if (_handleSelfReference(bean, gen, prov, ser)) { return; } } if (_typeSerializer == null) { ser.serialize(value, gen, prov); } else { ser.serializeWithType(value, gen, prov, _typeSerializer);"
      },
      {
        "txt": "} } @Override public void serializeAsPlaceholder(Object bean, JsonGenerator gen, SerializerProvider prov) throws Exception { if (_nullSerializer != null) { _nullSerializer.serialize(null, gen, prov); } else { gen.writeNull();"
      },
      {
        "txt": "} } @Override public void depositSchemaProperty(JsonObjectFormatVisitor v) throws JsonMappingException { if (v != null) { if (isRequired()) { v.property(this); } else {"
      },
      {
        "txt": "v.optionalProperty(this); } } } @Override @Deprecated public void depositSchemaProperty(ObjectNode propertiesNode, SerializerProvider provider) throws JsonMappingException { JavaType propType = getSerializationType();"
      },
      {
        "txt": "Type hint = (propType == null) ? getGenericPropertyType() : propType.getRawClass(); JsonNode schemaNode; JsonSerializer<Object> ser = getSerializer(); if (ser == null) { // nope ser = provider.findValueSerializer(getType(), this); } boolean isOptional = !isRequired(); if (ser instanceof SchemaAware) { schemaNode = ((SchemaAware) ser).getSchema(provider, hint, isOptional) ; } else {"
      },
      {
        "txt": "schemaNode = com.fasterxml.jackson.databind.jsonschema.JsonSchema.getDefaultSchemaNode(); } _depositSchemaProperty(propertiesNode, schemaNode); } protected JsonSerializer<Object> _findAndAddDynamic(PropertySerializerMap map, Class<?> type, SerializerProvider provider) throws JsonMappingException { PropertySerializerMap.SerializerAndMapResult result; if (_nonTrivialBaseType != null) { JavaType t = provider.constructSpecializedType(_nonTrivialBaseType, type);"
      },
      {
        "txt": "result = map.findAndAddPrimarySerializer(t, provider, this); } else { result = map.findAndAddPrimarySerializer(type, provider, this); } if (map != result.map) { _dynamicSerializers = result.map; } return result.serializer; } public final Object get(Object bean) throws Exception {"
      },
      {
        "txt": "return (_accessorMethod == null) ? _field.get(bean) : _accessorMethod.invoke(bean); } protected boolean _handleSelfReference(Object bean, JsonGenerator gen, SerializerProvider prov, JsonSerializer<?> ser) throws JsonMappingException { if (prov.isEnabled(SerializationFeature.FAIL_ON_SELF_REFERENCES) && !ser.usesObjectId()) { if (ser instanceof BeanSerializerBase) { throw new JsonMappingException(\"Direct self-reference leading to cycle\"); } }"
      },
      {
        "txt": "return false; } @Override public String toString() { StringBuilder sb = new StringBuilder(40); sb.append(\"property '\").append(getName()).append(\"' (\"); if (_accessorMethod != null) { sb.append(\"via method \").append(_accessorMethod.getDeclaringClass().getName()).append(\"#\").append(_accessorMethod.getName()); } else if (_field != null) { sb.append(\"field \\\"\").append(_field.getDeclaringClass().getName()).append(\"#\").append(_field.getName());"
      },
      {
        "txt": "} else { sb.append(\"virtual\"); } if (_serializer == null) { sb.append(\", no static serializer\"); } else { sb.append(\", static serializer of type \"+_serializer.getClass().getName()); } sb.append(')'); return sb.toString();"
      }
    ]
  }
]
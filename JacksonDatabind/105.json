[
  {
    "id": 1786,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
    "start-bug-line": 22,
    "end-bug-line": 22,
    "bug": "ByteBuffer.class",
    "fix": "ByteBuffer.class, Void.class",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.nio.ByteBuffer; import java.util.*; import java.util.concurrent.atomic.AtomicBoolean; import com.fasterxml.jackson.databind.*; public class JdkDeserializers"
      },
      {
        "txt": "private final static HashSet<String> _classNames = new HashSet<String>(); static { Class<?>[] types = new Class<?>[] { UUID.class, AtomicBoolean.class, StackTraceElement.class, <extra_id_0> }; for (Class<?> cls : types) { _classNames.add(cls.getName()); } for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); } } public static JsonDeserializer<?> find(Class<?> rawType, String clsName) {"
      },
      {
        "txt": "public static JsonDeserializer<?> find(Class<?> rawType, String clsName) { if (_classNames.contains(clsName)) { JsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType); if (d != null) { return d; } if (rawType == UUID.class) { return new UUIDDeserializer(); }"
      },
      {
        "txt": "if (rawType == StackTraceElement.class) { return new StackTraceElementDeserializer(); } if (rawType == AtomicBoolean.class) { return new AtomicBooleanDeserializer(); } if (rawType == ByteBuffer.class) { return new ByteBufferDeserializer(); } }"
      },
      {
        "txt": "return null; }"
      }
    ]
  },
  {
    "id": 1787,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/std/JdkDeserializers.java",
    "start-bug-line": 48,
    "end-bug-line": 48,
    "bug": "",
    "fix": "if (rawType == Void.class) { return NullifyingDeserializer.instance; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.std; import java.nio.ByteBuffer; import java.util.*; import java.util.concurrent.atomic.AtomicBoolean; import com.fasterxml.jackson.databind.*; public class JdkDeserializers { private final static HashSet<String> _classNames = new HashSet<String>(); static { Class<?>[] types = new Class<?>[] {"
      },
      {
        "txt": "UUID.class, AtomicBoolean.class, StackTraceElement.class, ByteBuffer.class }; for (Class<?> cls : types) { _classNames.add(cls.getName()); } for (Class<?> cls : FromStringDeserializer.types()) { _classNames.add(cls.getName()); } } public static JsonDeserializer<?> find(Class<?> rawType, String clsName) {"
      },
      {
        "txt": "if (_classNames.contains(clsName)) { JsonDeserializer<?> d = FromStringDeserializer.findDeserializer(rawType); if (d != null) { return d; } if (rawType == UUID.class) { return new UUIDDeserializer(); } if (rawType == StackTraceElement.class) { return new StackTraceElementDeserializer();"
      },
      {
        "txt": "if (rawType == AtomicBoolean.class) { return new AtomicBooleanDeserializer(); } if (rawType == ByteBuffer.class) { return new ByteBufferDeserializer(); } <extra_id_0> return null; } }"
      }
    ]
  }
]
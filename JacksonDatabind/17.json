[
  {
    "id": 1372,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ObjectMapper.java",
    "start-bug-line": 180,
    "end-bug-line": 180,
    "bug": "|| TreeNode.class.isAssignableFrom(t.getRawClass()));",
    "fix": "&& !TreeNode.class.isAssignableFrom(t.getRawClass()));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind; import java.io.*; import java.lang.reflect.Type; import java.net.URL; import java.text.DateFormat; import java.util.*; import java.util.concurrent.ConcurrentHashMap;"
      },
      {
        "txt": "import java.util.concurrent.atomic.AtomicReference; import com.fasterxml.jackson.annotation.*; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.io.CharacterEscapes; import com.fasterxml.jackson.core.io.SegmentedStringWriter; import com.fasterxml.jackson.core.type.ResolvedType; import com.fasterxml.jackson.core.type.TypeReference; import com.fasterxml.jackson.core.util.*; import com.fasterxml.jackson.databind.cfg.BaseSettings; import com.fasterxml.jackson.databind.cfg.ContextAttributes;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.cfg.HandlerInstantiator; import com.fasterxml.jackson.databind.cfg.MapperConfig; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.*; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; import com.fasterxml.jackson.databind.jsontype.*; import com.fasterxml.jackson.databind.jsontype.impl.StdSubtypeResolver; import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder; import com.fasterxml.jackson.databind.node.*; import com.fasterxml.jackson.databind.ser.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.type.*; import com.fasterxml.jackson.databind.util.RootNameLookup; import com.fasterxml.jackson.databind.util.StdDateFormat; import com.fasterxml.jackson.databind.util.TokenBuffer; public class ObjectMapper extends ObjectCodec implements Versioned, java.io.Serializable // as of 2.1 { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "public enum DefaultTyping { JAVA_LANG_OBJECT, OBJECT_AND_NON_CONCRETE, NON_CONCRETE_AND_ARRAYS, NON_FINAL } public static class DefaultTypeResolverBuilder extends StdTypeResolverBuilder implements java.io.Serializable {"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; protected final DefaultTyping _appliesFor; public DefaultTypeResolverBuilder(DefaultTyping t) { _appliesFor = t; } @Override public TypeDeserializer buildTypeDeserializer(DeserializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { return useForType(baseType) ? super.buildTypeDeserializer(config, baseType, subtypes) : null;"
      },
      {
        "txt": "} @Override public TypeSerializer buildTypeSerializer(SerializationConfig config, JavaType baseType, Collection<NamedType> subtypes) { return useForType(baseType) ? super.buildTypeSerializer(config, baseType, subtypes) : null; } public boolean useForType(JavaType t) { switch (_appliesFor) {"
      },
      {
        "txt": "while (t.isArrayType()) { t = t.getContentType(); } case OBJECT_AND_NON_CONCRETE: return (t.getRawClass() == Object.class) || (!t.isConcrete() <extra_id_0> case NON_FINAL: while (t.isArrayType()) { t = t.getContentType(); } return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default:"
      },
      {
        "txt": "return !t.isFinal() && !TreeNode.class.isAssignableFrom(t.getRawClass()); default: return (t.getRawClass() == Object.class); } } } private final static JavaType JSON_NODE_TYPE = SimpleType.constructUnsafe(JsonNode.class); protected final static ClassIntrospector DEFAULT_INTROSPECTOR = BasicClassIntrospector.instance; protected final static AnnotationIntrospector DEFAULT_ANNOTATION_INTROSPECTOR = new JacksonAnnotationIntrospector(); protected final static VisibilityChecker<?> STD_VISIBILITY_CHECKER = VisibilityChecker.Std.defaultInstance();"
      },
      {
        "txt": "protected final static PrettyPrinter _defaultPrettyPrinter = new DefaultPrettyPrinter(); protected final static BaseSettings DEFAULT_BASE = new BaseSettings(DEFAULT_INTROSPECTOR, DEFAULT_ANNOTATION_INTROSPECTOR, STD_VISIBILITY_CHECKER, null, TypeFactory.defaultInstance(), null, StdDateFormat.instance, null, Locale.getDefault(), TimeZone.getTimeZone(\"GMT\"), Base64Variants.getDefaultVariant() // 2.1 ); protected final JsonFactory _jsonFactory; protected TypeFactory _typeFactory;"
      },
      {
        "txt": "protected InjectableValues _injectableValues; protected SubtypeResolver _subtypeResolver; protected final RootNameLookup _rootNames; protected final HashMap<ClassKey,Class<?>> _mixInAnnotations; protected SerializationConfig _serializationConfig; protected DefaultSerializerProvider _serializerProvider; protected SerializerFactory _serializerFactory; protected DeserializationConfig _deserializationConfig; protected DefaultDeserializationContext _deserializationContext; final protected ConcurrentHashMap<JavaType, JsonDeserializer<Object>> _rootDeserializers"
      },
      {
        "txt": "= new ConcurrentHashMap<JavaType, JsonDeserializer<Object>>(64, 0.6f, 2); public ObjectMapper() { this(null, null, null); } public ObjectMapper(JsonFactory jf) { this(jf, null, null); } protected ObjectMapper(ObjectMapper src)"
      },
      {
        "txt": "{ _jsonFactory = src._jsonFactory.copy(); _jsonFactory.setCodec(this); _subtypeResolver = src._subtypeResolver; _rootNames = new RootNameLookup(); _typeFactory = src._typeFactory; HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(src._mixInAnnotations); _mixInAnnotations = mixins; _serializationConfig = new SerializationConfig(src._serializationConfig, mixins); _deserializationConfig = new DeserializationConfig(src._deserializationConfig, mixins);"
      },
      {
        "txt": "_serializerProvider = src._serializerProvider.copy(); _deserializationContext = src._deserializationContext.copy(); _serializerFactory = src._serializerFactory; } public ObjectMapper(JsonFactory jf, DefaultSerializerProvider sp, DefaultDeserializationContext dc) { if (jf == null) { _jsonFactory = new MappingJsonFactory(this); } else {"
      },
      {
        "txt": "_jsonFactory = jf; if (jf.getCodec() == null) { // as per [JACKSON-741] _jsonFactory.setCodec(this); } } _subtypeResolver = new StdSubtypeResolver(); _rootNames = new RootNameLookup(); _typeFactory = TypeFactory.defaultInstance(); HashMap<ClassKey,Class<?>> mixins = new HashMap<ClassKey,Class<?>>(); _mixInAnnotations = mixins;"
      },
      {
        "txt": "_serializationConfig = new SerializationConfig(DEFAULT_BASE, _subtypeResolver, mixins); _deserializationConfig = new DeserializationConfig(DEFAULT_BASE, _subtypeResolver, mixins); final boolean needOrder = _jsonFactory.requiresPropertyOrdering(); if (needOrder ^ _serializationConfig.isEnabled(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY)) { configure(MapperFeature.SORT_PROPERTIES_ALPHABETICALLY, needOrder); } _serializerProvider = (sp == null) ? new DefaultSerializerProvider.Impl() : sp; _deserializationContext = (dc == null) ?"
      },
      {
        "txt": "new DefaultDeserializationContext.Impl(BeanDeserializerFactory.instance) : dc; _serializerFactory = BeanSerializerFactory.instance; } public ObjectMapper copy() { _checkInvalidCopy(ObjectMapper.class); return new ObjectMapper(this); } protected void _checkInvalidCopy(Class<?> exp) {"
      },
      {
        "txt": "if (getClass() != exp) { throw new IllegalStateException(\"Failed copy(): \"+getClass().getName() +\" (version: \"+version()+\") does not override copy(); it has to\"); } } @Override public Version version() { return com.fasterxml.jackson.databind.cfg.PackageVersion.VERSION; } public ObjectMapper registerModule(Module module)"
      },
      {
        "txt": "{ String name = module.getModuleName(); if (name == null) { throw new IllegalArgumentException(\"Module without defined name\"); } Version version = module.version(); if (version == null) { throw new IllegalArgumentException(\"Module without defined version\"); } final ObjectMapper mapper = this;"
      },
      {
        "txt": "module.setupModule(new Module.SetupContext() { @Override public Version getMapperVersion() { return version(); } @SuppressWarnings(\"unchecked\") @Override public <C extends ObjectCodec> C getOwner() { return (C) mapper;"
      },
      {
        "txt": "} @Override public TypeFactory getTypeFactory() { return _typeFactory; } @Override public boolean isEnabled(MapperFeature f) { return mapper.isEnabled(f); } @Override"
      },
      {
        "txt": "public boolean isEnabled(DeserializationFeature f) { return mapper.isEnabled(f); } @Override public boolean isEnabled(SerializationFeature f) { return mapper.isEnabled(f); } @Override public boolean isEnabled(JsonFactory.Feature f) { return mapper.isEnabled(f);"
      },
      {
        "txt": "} @Override public boolean isEnabled(JsonParser.Feature f) { return mapper.isEnabled(f); } @Override public boolean isEnabled(JsonGenerator.Feature f) { return mapper.isEnabled(f); } @Override"
      },
      {
        "txt": "public void addDeserializers(Deserializers d) { DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalDeserializers(d); mapper._deserializationContext = mapper._deserializationContext.with(df); } @Override public void addKeyDeserializers(KeyDeserializers d) { DeserializerFactory df = mapper._deserializationContext._factory.withAdditionalKeyDeserializers(d); mapper._deserializationContext = mapper._deserializationContext.with(df); } @Override"
      },
      {
        "txt": "public void addBeanDeserializerModifier(BeanDeserializerModifier modifier) { DeserializerFactory df = mapper._deserializationContext._factory.withDeserializerModifier(modifier); mapper._deserializationContext = mapper._deserializationContext.with(df); } @Override public void addSerializers(Serializers s) { mapper._serializerFactory = mapper._serializerFactory.withAdditionalSerializers(s); } @Override public void addKeySerializers(Serializers s) {"
      },
      {
        "txt": "mapper._serializerFactory = mapper._serializerFactory.withAdditionalKeySerializers(s); } @Override public void addBeanSerializerModifier(BeanSerializerModifier modifier) { mapper._serializerFactory = mapper._serializerFactory.withSerializerModifier(modifier); } @Override public void addAbstractTypeResolver(AbstractTypeResolver resolver) { DeserializerFactory df = mapper._deserializationContext._factory.withAbstractTypeResolver(resolver); mapper._deserializationContext = mapper._deserializationContext.with(df);"
      },
      {
        "txt": "} @Override public void addTypeModifier(TypeModifier modifier) { TypeFactory f = mapper._typeFactory; f = f.withModifier(modifier); mapper.setTypeFactory(f); } @Override public void addValueInstantiators(ValueInstantiators instantiators) { DeserializerFactory df = mapper._deserializationContext._factory.withValueInstantiators(instantiators);"
      },
      {
        "txt": "mapper._deserializationContext = mapper._deserializationContext.with(df); } @Override public void setClassIntrospector(ClassIntrospector ci) { mapper._deserializationConfig = mapper._deserializationConfig.with(ci); mapper._serializationConfig = mapper._serializationConfig.with(ci); } @Override public void insertAnnotationIntrospector(AnnotationIntrospector ai) { mapper._deserializationConfig = mapper._deserializationConfig.withInsertedAnnotationIntrospector(ai);"
      },
      {
        "txt": "mapper._serializationConfig = mapper._serializationConfig.withInsertedAnnotationIntrospector(ai); } @Override public void appendAnnotationIntrospector(AnnotationIntrospector ai) { mapper._deserializationConfig = mapper._deserializationConfig.withAppendedAnnotationIntrospector(ai); mapper._serializationConfig = mapper._serializationConfig.withAppendedAnnotationIntrospector(ai); } @Override public void registerSubtypes(Class<?>... subtypes) { mapper.registerSubtypes(subtypes);"
      },
      {
        "txt": "} @Override public void registerSubtypes(NamedType... subtypes) { mapper.registerSubtypes(subtypes); } @Override public void setMixInAnnotations(Class<?> target, Class<?> mixinSource) { mapper.addMixInAnnotations(target, mixinSource); } @Override"
      },
      {
        "txt": "public void addDeserializationProblemHandler(DeserializationProblemHandler handler) { mapper.addHandler(handler); } @Override public void setNamingStrategy(PropertyNamingStrategy naming) { mapper.setPropertyNamingStrategy(naming); } }); return this; }"
      },
      {
        "txt": "public ObjectMapper registerModules(Module... modules) { for (Module module : modules) { registerModule(module); } return this; } public ObjectMapper registerModules(Iterable<Module> modules) { for (Module module : modules) {"
      },
      {
        "txt": "registerModule(module); } return this; } public static List<Module> findModules() { return findModules(null); } public static List<Module> findModules(ClassLoader classLoader) { ArrayList<Module> modules = new ArrayList<Module>();"
      },
      {
        "txt": "ServiceLoader<Module> loader = (classLoader == null) ? ServiceLoader.load(Module.class) : ServiceLoader.load(Module.class, classLoader); for (Module module : loader) { modules.add(module); } return modules; } public ObjectMapper findAndRegisterModules() { return registerModules(findModules()); }"
      },
      {
        "txt": "public SerializationConfig getSerializationConfig() { return _serializationConfig; } public DeserializationConfig getDeserializationConfig() { return _deserializationConfig; } public DeserializationContext getDeserializationContext() { return _deserializationContext; } public ObjectMapper setSerializerFactory(SerializerFactory f) {"
      },
      {
        "txt": "_serializerFactory = f; return this; } public SerializerFactory getSerializerFactory() { return _serializerFactory; } public ObjectMapper setSerializerProvider(DefaultSerializerProvider p) { _serializerProvider = p; return this; }"
      },
      {
        "txt": "public SerializerProvider getSerializerProvider() { return _serializerProvider; } public final void setMixInAnnotations(Map<Class<?>, Class<?>> sourceMixins) { _mixInAnnotations.clear(); if (sourceMixins != null && sourceMixins.size() > 0) { for (Map.Entry<Class<?>,Class<?>> en : sourceMixins.entrySet()) { _mixInAnnotations.put(new ClassKey(en.getKey()), en.getValue()); }"
      },
      {
        "txt": "} } public final void addMixInAnnotations(Class<?> target, Class<?> mixinSource) { _mixInAnnotations.put(new ClassKey(target), mixinSource); } public final ObjectMapper addMixIn(Class<?> target, Class<?> mixinSource) { _mixInAnnotations.put(new ClassKey(target), mixinSource); return this;"
      },
      {
        "txt": "} public final Class<?> findMixInClassFor(Class<?> cls) { return (_mixInAnnotations == null) ? null : _mixInAnnotations.get(new ClassKey(cls)); } public final int mixInCount() { return (_mixInAnnotations == null) ? 0 : _mixInAnnotations.size(); } public VisibilityChecker<?> getVisibilityChecker() { return _serializationConfig.getDefaultVisibilityChecker(); }"
      },
      {
        "txt": "public void setVisibilityChecker(VisibilityChecker<?> vc) { _deserializationConfig = _deserializationConfig.with(vc); _serializationConfig = _serializationConfig.with(vc); } public ObjectMapper setVisibility(PropertyAccessor forMethod, JsonAutoDetect.Visibility visibility) { _deserializationConfig = _deserializationConfig.withVisibility(forMethod, visibility); _serializationConfig = _serializationConfig.withVisibility(forMethod, visibility); return this; }"
      },
      {
        "txt": "public SubtypeResolver getSubtypeResolver() { return _subtypeResolver; } public ObjectMapper setSubtypeResolver(SubtypeResolver str) { _subtypeResolver = str; _deserializationConfig = _deserializationConfig.with(str); _serializationConfig = _serializationConfig.with(str); return this; } public ObjectMapper setAnnotationIntrospector(AnnotationIntrospector ai) {"
      },
      {
        "txt": "_serializationConfig = _serializationConfig.with(ai); _deserializationConfig = _deserializationConfig.with(ai); return this; } public ObjectMapper setAnnotationIntrospectors(AnnotationIntrospector serializerAI, AnnotationIntrospector deserializerAI) { _serializationConfig = _serializationConfig.with(serializerAI); _deserializationConfig = _deserializationConfig.with(deserializerAI); return this; }"
      },
      {
        "txt": "public ObjectMapper setPropertyNamingStrategy(PropertyNamingStrategy s) { _serializationConfig = _serializationConfig.with(s); _deserializationConfig = _deserializationConfig.with(s); return this; } public ObjectMapper setSerializationInclusion(JsonInclude.Include incl) { _serializationConfig = _serializationConfig.withSerializationInclusion(incl); return this; } public ObjectMapper enableDefaultTyping() {"
      },
      {
        "txt": "return enableDefaultTyping(DefaultTyping.OBJECT_AND_NON_CONCRETE); } public ObjectMapper enableDefaultTyping(DefaultTyping dti) { return enableDefaultTyping(dti, JsonTypeInfo.As.WRAPPER_ARRAY); } public ObjectMapper enableDefaultTyping(DefaultTyping applicability, JsonTypeInfo.As includeAs) { TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability); typer = typer.init(JsonTypeInfo.Id.CLASS, null); typer = typer.inclusion(includeAs);"
      },
      {
        "txt": "return setDefaultTyping(typer); } public ObjectMapper enableDefaultTypingAsProperty(DefaultTyping applicability, String propertyName) { TypeResolverBuilder<?> typer = new DefaultTypeResolverBuilder(applicability); typer = typer.init(JsonTypeInfo.Id.CLASS, null); typer = typer.inclusion(JsonTypeInfo.As.PROPERTY); typer = typer.typeProperty(propertyName); return setDefaultTyping(typer); }"
      },
      {
        "txt": "public ObjectMapper disableDefaultTyping() { return setDefaultTyping(null); } public ObjectMapper setDefaultTyping(TypeResolverBuilder<?> typer) { _deserializationConfig = _deserializationConfig.with(typer); _serializationConfig = _serializationConfig.with(typer); return this; } public void registerSubtypes(Class<?>... classes) { getSubtypeResolver().registerSubtypes(classes);"
      },
      {
        "txt": "} public void registerSubtypes(NamedType... types) { getSubtypeResolver().registerSubtypes(types); } public TypeFactory getTypeFactory() { return _typeFactory; } public ObjectMapper setTypeFactory(TypeFactory f) { _typeFactory = f;"
      },
      {
        "txt": "_deserializationConfig = _deserializationConfig.with(f); _serializationConfig = _serializationConfig.with(f); return this; } public JavaType constructType(Type t) { return _typeFactory.constructType(t); } public ObjectMapper setNodeFactory(JsonNodeFactory f) { _deserializationConfig = _deserializationConfig.with(f); return this;"
      },
      {
        "txt": "} public ObjectMapper addHandler(DeserializationProblemHandler h) { _deserializationConfig = _deserializationConfig.withHandler(h); return this; } public ObjectMapper clearProblemHandlers() { _deserializationConfig = _deserializationConfig.withNoProblemHandlers(); return this; } public ObjectMapper setConfig(DeserializationConfig config) {"
      },
      {
        "txt": "_deserializationConfig = config; return this; } public void setFilters(FilterProvider filterProvider) { _serializationConfig = _serializationConfig.withFilters(filterProvider); } public ObjectMapper setBase64Variant(Base64Variant v) { _serializationConfig = _serializationConfig.with(v); _deserializationConfig = _deserializationConfig.with(v); return this;"
      },
      {
        "txt": "} public ObjectMapper setConfig(SerializationConfig config) { _serializationConfig = config; return this; } @Override public JsonFactory getFactory() { return _jsonFactory; } @Deprecated @Override public JsonFactory getJsonFactory() { return getFactory(); }"
      },
      {
        "txt": "public ObjectMapper setDateFormat(DateFormat dateFormat) { _deserializationConfig = _deserializationConfig.with(dateFormat); _serializationConfig = _serializationConfig.with(dateFormat); return this; } public Object setHandlerInstantiator(HandlerInstantiator hi) { _deserializationConfig = _deserializationConfig.with(hi); _serializationConfig = _serializationConfig.with(hi);"
      },
      {
        "txt": "return this; } public ObjectMapper setInjectableValues(InjectableValues injectableValues) { _injectableValues = injectableValues; return this; } public ObjectMapper setLocale(Locale l) { _deserializationConfig = _deserializationConfig.with(l); _serializationConfig = _serializationConfig.with(l); return this;"
      },
      {
        "txt": "} public ObjectMapper setTimeZone(TimeZone tz) { _deserializationConfig = _deserializationConfig.with(tz); _serializationConfig = _serializationConfig.with(tz); return this; } public ObjectMapper configure(MapperFeature f, boolean state) { _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f); _deserializationConfig = state ?"
      },
      {
        "txt": "_deserializationConfig.with(f) : _deserializationConfig.without(f); return this; } public ObjectMapper configure(SerializationFeature f, boolean state) { _serializationConfig = state ? _serializationConfig.with(f) : _serializationConfig.without(f); return this; } public ObjectMapper configure(DeserializationFeature f, boolean state) { _deserializationConfig = state ?"
      },
      {
        "txt": "_deserializationConfig.with(f) : _deserializationConfig.without(f); return this; } public ObjectMapper configure(JsonParser.Feature f, boolean state) { _jsonFactory.configure(f, state); return this; } public ObjectMapper configure(JsonGenerator.Feature f, boolean state) { _jsonFactory.configure(f, state); return this;"
      },
      {
        "txt": "} public ObjectMapper enable(MapperFeature... f) { _deserializationConfig = _deserializationConfig.with(f); _serializationConfig = _serializationConfig.with(f); return this; } public ObjectMapper disable(MapperFeature... f) { _deserializationConfig = _deserializationConfig.without(f); _serializationConfig = _serializationConfig.without(f); return this;"
      },
      {
        "txt": "} public ObjectMapper enable(DeserializationFeature feature) { _deserializationConfig = _deserializationConfig.with(feature); return this; } public ObjectMapper enable(DeserializationFeature first, DeserializationFeature... f) { _deserializationConfig = _deserializationConfig.with(first, f); return this; }"
      },
      {
        "txt": "public ObjectMapper disable(DeserializationFeature feature) { _deserializationConfig = _deserializationConfig.without(feature); return this; } public ObjectMapper disable(DeserializationFeature first, DeserializationFeature... f) { _deserializationConfig = _deserializationConfig.without(first, f); return this; } public ObjectMapper enable(SerializationFeature f) {"
      },
      {
        "txt": "_serializationConfig = _serializationConfig.with(f); return this; } public ObjectMapper enable(SerializationFeature first, SerializationFeature... f) { _serializationConfig = _serializationConfig.with(first, f); return this; } public ObjectMapper disable(SerializationFeature f) { _serializationConfig = _serializationConfig.without(f);"
      },
      {
        "txt": "return this; } public ObjectMapper disable(SerializationFeature first, SerializationFeature... f) { _serializationConfig = _serializationConfig.without(first, f); return this; } public boolean isEnabled(MapperFeature f) { return _serializationConfig.isEnabled(f); }"
      },
      {
        "txt": "public boolean isEnabled(SerializationFeature f) { return _serializationConfig.isEnabled(f); } public boolean isEnabled(DeserializationFeature f) { return _deserializationConfig.isEnabled(f); } public boolean isEnabled(JsonFactory.Feature f) { return _jsonFactory.isEnabled(f); } public boolean isEnabled(JsonParser.Feature f) {"
      },
      {
        "txt": "return _jsonFactory.isEnabled(f); } public boolean isEnabled(JsonGenerator.Feature f) { return _jsonFactory.isEnabled(f); } public JsonNodeFactory getNodeFactory() { return _deserializationConfig.getNodeFactory(); } @Override @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(JsonParser jp, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readValue(getDeserializationConfig(), jp, _typeFactory.constructType(valueType)); } @Override @SuppressWarnings(\"unchecked\") public <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readValue(getDeserializationConfig(), jp, _typeFactory.constructType(valueTypeRef)); } @Override @SuppressWarnings(\"unchecked\") public final <T> T readValue(JsonParser jp, ResolvedType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readValue(getDeserializationConfig(), jp, (JavaType) valueType); } @SuppressWarnings(\"unchecked\")"
      },
      {
        "txt": "public <T> T readValue(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readValue(getDeserializationConfig(), jp, valueType); } @Override public <T extends TreeNode> T readTree(JsonParser jp) throws IOException, JsonProcessingException { DeserializationConfig cfg = getDeserializationConfig();"
      },
      {
        "txt": "JsonToken t = jp.getCurrentToken(); if (t == null) { t = jp.nextToken(); if (t == null) { return null; } } JsonNode n = (JsonNode) _readValue(cfg, jp, JSON_NODE_TYPE); if (n == null) { n = getNodeFactory().nullNode();"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") T result = (T) n; return result; } @Override public <T> MappingIterator<T> readValues(JsonParser jp, ResolvedType valueType) throws IOException, JsonProcessingException { return readValues(jp, (JavaType) valueType);"
      },
      {
        "txt": "} public <T> MappingIterator<T> readValues(JsonParser jp, JavaType valueType) throws IOException, JsonProcessingException { DeserializationConfig config = getDeserializationConfig(); DeserializationContext ctxt = createDeserializationContext(jp, config); JsonDeserializer<?> deser = _findRootDeserializer(ctxt, valueType); return new MappingIterator<T>(valueType, jp, ctxt, deser, false, null); }"
      },
      {
        "txt": "@Override public <T> MappingIterator<T> readValues(JsonParser jp, Class<T> valueType) throws IOException, JsonProcessingException { return readValues(jp, _typeFactory.constructType(valueType)); } @Override public <T> MappingIterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef) throws IOException, JsonProcessingException {"
      },
      {
        "txt": "return readValues(jp, _typeFactory.constructType(valueTypeRef)); } public JsonNode readTree(InputStream in) throws IOException, JsonProcessingException { JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(in), JSON_NODE_TYPE); return (n == null) ? NullNode.instance : n; } public JsonNode readTree(Reader r) throws IOException, JsonProcessingException"
      },
      {
        "txt": "{ JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(r), JSON_NODE_TYPE); return (n == null) ? NullNode.instance : n; } public JsonNode readTree(String content) throws IOException, JsonProcessingException { JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE); return (n == null) ? NullNode.instance : n; }"
      },
      {
        "txt": "public JsonNode readTree(byte[] content) throws IOException, JsonProcessingException { JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(content), JSON_NODE_TYPE); return (n == null) ? NullNode.instance : n; } public JsonNode readTree(File file) throws IOException, JsonProcessingException { JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(file), JSON_NODE_TYPE);"
      },
      {
        "txt": "return (n == null) ? NullNode.instance : n; } public JsonNode readTree(URL source) throws IOException, JsonProcessingException { JsonNode n = (JsonNode) _readMapAndClose(_jsonFactory.createParser(source), JSON_NODE_TYPE); return (n == null) ? NullNode.instance : n; } @Override public void writeValue(JsonGenerator jgen, Object value)"
      },
      {
        "txt": "throws IOException, JsonGenerationException, JsonMappingException { SerializationConfig config = getSerializationConfig(); if (config.isEnabled(SerializationFeature.INDENT_OUTPUT)) { jgen.useDefaultPrettyPrinter(); } if (config.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { _writeCloseableValue(jgen, value, config); } else { _serializerProvider(config).serializeValue(jgen, value);"
      },
      {
        "txt": "if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { jgen.flush(); } } } @Override public void writeTree(JsonGenerator jgen, TreeNode rootNode) throws IOException, JsonProcessingException { SerializationConfig config = getSerializationConfig();"
      },
      {
        "txt": "_serializerProvider(config).serializeValue(jgen, rootNode); if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { jgen.flush(); } } public void writeTree(JsonGenerator jgen, JsonNode rootNode) throws IOException, JsonProcessingException { SerializationConfig config = getSerializationConfig(); _serializerProvider(config).serializeValue(jgen, rootNode);"
      },
      {
        "txt": "if (config.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { jgen.flush(); } } @Override public ObjectNode createObjectNode() { return _deserializationConfig.getNodeFactory().objectNode(); } @Override public ArrayNode createArrayNode() {"
      },
      {
        "txt": "return _deserializationConfig.getNodeFactory().arrayNode(); } @Override public JsonParser treeAsTokens(TreeNode n) { return new TreeTraversingParser((JsonNode) n, this); } @SuppressWarnings(\"unchecked\") @Override public <T> T treeToValue(TreeNode n, Class<T> valueType)"
      },
      {
        "txt": "throws JsonProcessingException { try { if (valueType != Object.class && valueType.isAssignableFrom(n.getClass())) { return (T) n; } return readValue(treeAsTokens(n), valueType); } catch (JsonProcessingException e) { throw e; } catch (IOException e) { // should not occur, no real i/o..."
      },
      {
        "txt": "throw new IllegalArgumentException(e.getMessage(), e); } } @SuppressWarnings({ \"unchecked\", \"resource\" }) public <T extends JsonNode> T valueToTree(Object fromValue) throws IllegalArgumentException { if (fromValue == null) return null; TokenBuffer buf = new TokenBuffer(this, false); JsonNode result;"
      },
      {
        "txt": "try { writeValue(buf, fromValue); JsonParser jp = buf.asParser(); result = readTree(jp); jp.close(); } catch (IOException e) { // should not occur, no real i/o... throw new IllegalArgumentException(e.getMessage(), e); } return (T) result; }"
      },
      {
        "txt": "public boolean canSerialize(Class<?> type) { return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, null); } public boolean canSerialize(Class<?> type, AtomicReference<Throwable> cause) { return _serializerProvider(getSerializationConfig()).hasSerializerFor(type, cause); } public boolean canDeserialize(JavaType type) { return createDeserializationContext(null, getDeserializationConfig()).hasValueDeserializerFor(type, null);"
      },
      {
        "txt": "} public boolean canDeserialize(JavaType type, AtomicReference<Throwable> cause) { return createDeserializationContext(null, getDeserializationConfig()).hasValueDeserializerFor(type, cause); } @SuppressWarnings(\"unchecked\") public <T> T readValue(File src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(File src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(File src, JavaType valueType)"
      },
      {
        "txt": "throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); } @SuppressWarnings(\"unchecked\") public <T> T readValue(URL src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); }"
      },
      {
        "txt": "@SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(URL src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(URL src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String content, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueType)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(String content, TypeReference valueTypeRef)"
      },
      {
        "txt": "throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(content), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(String content, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(content), valueType); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(Reader src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(Reader src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(Reader src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); } @SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src, Class<T> valueType)"
      },
      {
        "txt": "throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(InputStream src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T readValue(InputStream src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueType)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int len, Class<T> valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueType)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" })"
      },
      {
        "txt": "public <T> T readValue(byte[] src, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings({ \"unchecked\", \"rawtypes\" }) public <T> T readValue(byte[] src, int offset, int len, TypeReference valueTypeRef) throws IOException, JsonParseException, JsonMappingException {"
      },
      {
        "txt": "return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), _typeFactory.constructType(valueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src), valueType); } @SuppressWarnings(\"unchecked\") public <T> T readValue(byte[] src, int offset, int len,"
      },
      {
        "txt": "JavaType valueType) throws IOException, JsonParseException, JsonMappingException { return (T) _readMapAndClose(_jsonFactory.createParser(src, offset, len), valueType); } public void writeValue(File resultFile, Object value) throws IOException, JsonGenerationException, JsonMappingException { _configAndWriteValue(_jsonFactory.createGenerator(resultFile, JsonEncoding.UTF8), value); }"
      },
      {
        "txt": "public void writeValue(OutputStream out, Object value) throws IOException, JsonGenerationException, JsonMappingException { _configAndWriteValue(_jsonFactory.createGenerator(out, JsonEncoding.UTF8), value); } public void writeValue(Writer w, Object value) throws IOException, JsonGenerationException, JsonMappingException { _configAndWriteValue(_jsonFactory.createGenerator(w), value); }"
      },
      {
        "txt": "@SuppressWarnings(\"resource\") public String writeValueAsString(Object value) throws JsonProcessingException { SegmentedStringWriter sw = new SegmentedStringWriter(_jsonFactory._getBufferRecycler()); try { _configAndWriteValue(_jsonFactory.createGenerator(sw), value); } catch (JsonProcessingException e) { // to support [JACKSON-758] throw e; } catch (IOException e) { // shouldn't really happen, but is declared as possibility so:"
      },
      {
        "txt": "throw JsonMappingException.fromUnexpectedIOE(e); } return sw.getAndClear(); } @SuppressWarnings(\"resource\") public byte[] writeValueAsBytes(Object value) throws JsonProcessingException { ByteArrayBuilder bb = new ByteArrayBuilder(_jsonFactory._getBufferRecycler()); try {"
      },
      {
        "txt": "_configAndWriteValue(_jsonFactory.createGenerator(bb, JsonEncoding.UTF8), value); } catch (JsonProcessingException e) { // to support [JACKSON-758] throw e; } catch (IOException e) { // shouldn't really happen, but is declared as possibility so: throw JsonMappingException.fromUnexpectedIOE(e); } byte[] result = bb.toByteArray(); bb.release(); return result; }"
      },
      {
        "txt": "public ObjectWriter writer() { return new ObjectWriter(this, getSerializationConfig()); } public ObjectWriter writer(SerializationFeature feature) { return new ObjectWriter(this, getSerializationConfig().with(feature)); } public ObjectWriter writer(SerializationFeature first, SerializationFeature... other) { return new ObjectWriter(this, getSerializationConfig().with(first, other)); }"
      },
      {
        "txt": "public ObjectWriter writer(DateFormat df) { return new ObjectWriter(this, getSerializationConfig().with(df)); } public ObjectWriter writerWithView(Class<?> serializationView) { return new ObjectWriter(this, getSerializationConfig().withView(serializationView)); } public ObjectWriter writerWithType(Class<?> rootType) { return new ObjectWriter(this, getSerializationConfig(), ((rootType == null) ? null :_typeFactory.constructType(rootType)), }"
      },
      {
        "txt": "public ObjectWriter writerWithType(TypeReference<?> rootType) { return new ObjectWriter(this, getSerializationConfig(), ((rootType == null) ? null : _typeFactory.constructType(rootType)), } public ObjectWriter writerWithType(JavaType rootType) { return new ObjectWriter(this, getSerializationConfig(), rootType, /*PrettyPrinter*/null); } public ObjectWriter writer(PrettyPrinter pp) { if (pp == null) { // need to use a marker to indicate explicit disabling of pp pp = ObjectWriter.NULL_PRETTY_PRINTER;"
      },
      {
        "txt": "} return new ObjectWriter(this, getSerializationConfig(), /*root type*/ null, pp); } public ObjectWriter writerWithDefaultPrettyPrinter() { return new ObjectWriter(this, getSerializationConfig(), } public ObjectWriter writer(FilterProvider filterProvider) { return new ObjectWriter(this, getSerializationConfig().withFilters(filterProvider)); }"
      },
      {
        "txt": "public ObjectWriter writer(FormatSchema schema) { _verifySchemaType(schema); return new ObjectWriter(this, getSerializationConfig(), schema); } public ObjectWriter writer(Base64Variant defaultBase64) { return new ObjectWriter(this, getSerializationConfig().with(defaultBase64)); } public ObjectWriter writer(CharacterEscapes escapes) { return writer().with(escapes); }"
      },
      {
        "txt": "public ObjectWriter writer(ContextAttributes attrs) { return new ObjectWriter(this, getSerializationConfig().with(attrs)); } public ObjectReader reader() { return new ObjectReader(this, getDeserializationConfig()) .with(_injectableValues); } public ObjectReader reader(DeserializationFeature feature) { return new ObjectReader(this, getDeserializationConfig().with(feature)); }"
      },
      {
        "txt": "public ObjectReader reader(DeserializationFeature first, DeserializationFeature... other) { return new ObjectReader(this, getDeserializationConfig().with(first, other)); } public ObjectReader readerForUpdating(Object valueToUpdate) { JavaType t = _typeFactory.constructType(valueToUpdate.getClass()); return new ObjectReader(this, getDeserializationConfig(), t, valueToUpdate, null, _injectableValues); }"
      },
      {
        "txt": "public ObjectReader reader(JavaType type) { return new ObjectReader(this, getDeserializationConfig(), type, null, null, _injectableValues); } public ObjectReader reader(Class<?> type) { return reader(_typeFactory.constructType(type)); } public ObjectReader reader(TypeReference<?> type)"
      },
      {
        "txt": "{ return reader(_typeFactory.constructType(type)); } public ObjectReader reader(JsonNodeFactory f) { return new ObjectReader(this, getDeserializationConfig()).with(f); } public ObjectReader reader(FormatSchema schema) { _verifySchemaType(schema); return new ObjectReader(this, getDeserializationConfig(), null, null,"
      },
      {
        "txt": "schema, _injectableValues); } public ObjectReader reader(InjectableValues injectableValues) { return new ObjectReader(this, getDeserializationConfig(), null, null, null, injectableValues); } public ObjectReader readerWithView(Class<?> view) { return new ObjectReader(this, getDeserializationConfig().withView(view)); } public ObjectReader reader(Base64Variant defaultBase64) {"
      },
      {
        "txt": "return new ObjectReader(this, getDeserializationConfig().with(defaultBase64)); } public ObjectReader reader(ContextAttributes attrs) { return new ObjectReader(this, getDeserializationConfig().with(attrs)); } @SuppressWarnings(\"unchecked\") public <T> T convertValue(Object fromValue, Class<T> toValueType) throws IllegalArgumentException { if (fromValue == null) return null;"
      },
      {
        "txt": "return (T) _convert(fromValue, _typeFactory.constructType(toValueType)); } @SuppressWarnings(\"unchecked\") public <T> T convertValue(Object fromValue, TypeReference<?> toValueTypeRef) throws IllegalArgumentException { return (T) convertValue(fromValue, _typeFactory.constructType(toValueTypeRef)); } @SuppressWarnings(\"unchecked\") public <T> T convertValue(Object fromValue, JavaType toValueType)"
      },
      {
        "txt": "throws IllegalArgumentException { if (fromValue == null) return null; return (T) _convert(fromValue, toValueType); } @SuppressWarnings(\"resource\") protected Object _convert(Object fromValue, JavaType toValueType) throws IllegalArgumentException { Class<?> targetType = toValueType.getRawClass();"
      },
      {
        "txt": "if (targetType != Object.class && !toValueType.hasGenericTypes() && targetType.isAssignableFrom(fromValue.getClass())) { return fromValue; } TokenBuffer buf = new TokenBuffer(this, false); try { SerializationConfig config = getSerializationConfig().without(SerializationFeature.WRAP_ROOT_VALUE); _serializerProvider(config).serializeValue(buf, fromValue); final JsonParser jp = buf.asParser();"
      },
      {
        "txt": "Object result; final DeserializationConfig deserConfig = getDeserializationConfig(); JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { DeserializationContext ctxt = createDeserializationContext(jp, deserConfig); result = _findRootDeserializer(ctxt, toValueType).getNullValue(); } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = null; } else { // pointing to event other than null DeserializationContext ctxt = createDeserializationContext(jp, deserConfig);"
      },
      {
        "txt": "JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, toValueType); result = deser.deserialize(jp, ctxt); } jp.close(); return result; } catch (IOException e) { // should not occur, no real i/o... throw new IllegalArgumentException(e.getMessage(), e); } } @SuppressWarnings(\"deprecation\")"
      },
      {
        "txt": "public com.fasterxml.jackson.databind.jsonschema.JsonSchema generateJsonSchema(Class<?> t) throws JsonMappingException { return _serializerProvider(getSerializationConfig()).generateJsonSchema(t); } public void acceptJsonFormatVisitor(Class<?> type, JsonFormatVisitorWrapper visitor) throws JsonMappingException { acceptJsonFormatVisitor(_typeFactory.constructType(type), visitor); } public void acceptJsonFormatVisitor(JavaType type, JsonFormatVisitorWrapper visitor)"
      },
      {
        "txt": "throws JsonMappingException { if (type == null) { throw new IllegalArgumentException(\"type must be provided\"); } _serializerProvider(getSerializationConfig()).acceptJsonFormatVisitor(type, visitor); } protected DefaultSerializerProvider _serializerProvider(SerializationConfig config) { return _serializerProvider.createInstance(config, _serializerFactory); }"
      },
      {
        "txt": "protected PrettyPrinter _defaultPrettyPrinter() { return _defaultPrettyPrinter; } protected final void _configAndWriteValue(JsonGenerator jgen, Object value) throws IOException, JsonGenerationException, JsonMappingException { SerializationConfig cfg = getSerializationConfig(); if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) { jgen.useDefaultPrettyPrinter(); }"
      },
      {
        "txt": "if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) { jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); } if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { _configAndWriteCloseable(jgen, value, cfg); return; } boolean closed = false; try { _serializerProvider(cfg).serializeValue(jgen, value);"
      },
      {
        "txt": "closed = true; jgen.close(); } finally { if (!closed) { jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { jgen.close(); } catch (IOException ioe) { } } }"
      },
      {
        "txt": "} protected final void _configAndWriteValue(JsonGenerator jgen, Object value, Class<?> viewClass) throws IOException, JsonGenerationException, JsonMappingException { SerializationConfig cfg = getSerializationConfig().withView(viewClass); if (cfg.isEnabled(SerializationFeature.INDENT_OUTPUT)) { jgen.useDefaultPrettyPrinter(); } if (cfg.isEnabled(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN)) { jgen.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);"
      },
      {
        "txt": "} if (cfg.isEnabled(SerializationFeature.CLOSE_CLOSEABLE) && (value instanceof Closeable)) { _configAndWriteCloseable(jgen, value, cfg); return; } boolean closed = false; try { _serializerProvider(cfg).serializeValue(jgen, value); closed = true; jgen.close();"
      },
      {
        "txt": "} finally { if (!closed) { jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { jgen.close(); } catch (IOException ioe) { } } } } private final void _configAndWriteCloseable(JsonGenerator jgen, Object value, SerializationConfig cfg)"
      },
      {
        "txt": "throws IOException, JsonGenerationException, JsonMappingException { Closeable toClose = (Closeable) value; try { _serializerProvider(cfg).serializeValue(jgen, value); JsonGenerator tmpJgen = jgen; jgen = null; tmpJgen.close(); Closeable tmpToClose = toClose; toClose = null;"
      },
      {
        "txt": "tmpToClose.close(); } finally { if (jgen != null) { jgen.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT); try { jgen.close(); } catch (IOException ioe) { } } if (toClose != null) { try {"
      },
      {
        "txt": "toClose.close(); } catch (IOException ioe) { } } } } private final void _writeCloseableValue(JsonGenerator jgen, Object value, SerializationConfig cfg) throws IOException, JsonGenerationException, JsonMappingException { Closeable toClose = (Closeable) value; try {"
      },
      {
        "txt": "_serializerProvider(cfg).serializeValue(jgen, value); if (cfg.isEnabled(SerializationFeature.FLUSH_AFTER_WRITE_VALUE)) { jgen.flush(); } Closeable tmpToClose = toClose; toClose = null; tmpToClose.close(); } finally { if (toClose != null) { try {"
      },
      {
        "txt": "toClose.close(); } catch (IOException ioe) { } } } } protected DefaultDeserializationContext createDeserializationContext(JsonParser jp, DeserializationConfig cfg) { return _deserializationContext.createInstance(cfg, jp, _injectableValues);"
      },
      {
        "txt": "} protected Object _readValue(DeserializationConfig cfg, JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) { DeserializationContext ctxt = createDeserializationContext(jp, cfg); result = _findRootDeserializer(ctxt, valueType).getNullValue(); } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) {"
      },
      {
        "txt": "result = null; } else { // pointing to event other than null DeserializationContext ctxt = createDeserializationContext(jp, cfg); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType); if (cfg.useRootWrapping()) { result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser); } else { result = deser.deserialize(jp, ctxt); } }"
      },
      {
        "txt": "jp.clearCurrentToken(); return result; } protected Object _readMapAndClose(JsonParser jp, JavaType valueType) throws IOException, JsonParseException, JsonMappingException { try { Object result; JsonToken t = _initForReading(jp); if (t == JsonToken.VALUE_NULL) {"
      },
      {
        "txt": "DeserializationContext ctxt = createDeserializationContext(jp, getDeserializationConfig()); result = _findRootDeserializer(ctxt, valueType).getNullValue(); } else if (t == JsonToken.END_ARRAY || t == JsonToken.END_OBJECT) { result = null; } else { DeserializationConfig cfg = getDeserializationConfig(); DeserializationContext ctxt = createDeserializationContext(jp, cfg); JsonDeserializer<Object> deser = _findRootDeserializer(ctxt, valueType); if (cfg.useRootWrapping()) {"
      },
      {
        "txt": "result = _unwrapAndDeserialize(jp, ctxt, cfg, valueType, deser); } else { result = deser.deserialize(jp, ctxt); } ctxt.checkUnresolvedObjectId(); } jp.clearCurrentToken(); return result; } finally { try {"
      },
      {
        "txt": "jp.close(); } catch (IOException ioe) { } } } protected JsonToken _initForReading(JsonParser jp) throws IOException, JsonParseException, JsonMappingException { JsonToken t = jp.getCurrentToken(); if (t == null) { t = jp.nextToken();"
      },
      {
        "txt": "if (t == null) { throw JsonMappingException.from(jp, \"No content to map due to end-of-input\"); } } return t; } protected Object _unwrapAndDeserialize(JsonParser jp, DeserializationContext ctxt, DeserializationConfig config, JavaType rootType, JsonDeserializer<Object> deser) throws IOException, JsonParseException, JsonMappingException"
      },
      {
        "txt": "{ String expName = config.getRootName(); if (expName == null) { PropertyName pname = _rootNames.findRootName(rootType, config); expName = pname.getSimpleName(); } if (jp.getCurrentToken() != JsonToken.START_OBJECT) { throw JsonMappingException.from(jp, \"Current token not START_OBJECT (needed to unwrap root name '\" +expName+\"'), but \"+jp.getCurrentToken()); }"
      },
      {
        "txt": "if (jp.nextToken() != JsonToken.FIELD_NAME) { throw JsonMappingException.from(jp, \"Current token not FIELD_NAME (to contain expected root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } String actualName = jp.getCurrentName(); if (!expName.equals(actualName)) { throw JsonMappingException.from(jp, \"Root name '\"+actualName+\"' does not match expected ('\" +expName+\"') for type \"+rootType); } jp.nextToken();"
      },
      {
        "txt": "Object result = deser.deserialize(jp, ctxt); if (jp.nextToken() != JsonToken.END_OBJECT) { throw JsonMappingException.from(jp, \"Current token not END_OBJECT (to match wrapper object with root name '\" +expName+\"'), but \"+jp.getCurrentToken()); } return result; } protected JsonDeserializer<Object> _findRootDeserializer(DeserializationContext ctxt, JavaType valueType) throws JsonMappingException"
      },
      {
        "txt": "{ JsonDeserializer<Object> deser = _rootDeserializers.get(valueType); if (deser != null) { return deser; } deser = ctxt.findRootValueDeserializer(valueType); if (deser == null) { // can this happen? throw new JsonMappingException(\"Can not find a deserializer for type \"+valueType); } _rootDeserializers.put(valueType, deser);"
      },
      {
        "txt": "return deser; } protected void _verifySchemaType(FormatSchema schema) { if (schema != null) { if (!_jsonFactory.canUseSchema(schema)) { throw new IllegalArgumentException(\"Can not use FormatSchema of type \"+schema.getClass().getName() +\" for format \"+_jsonFactory.getFormatName()); } }"
      }
    ]
  }
]
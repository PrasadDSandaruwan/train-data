[
  {
    "id": 1509,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 7,
    "end-bug-line": 7,
    "bug": "",
    "fix": "import com.fasterxml.jackson.core.JsonToken;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; <extra_id_0> import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L;"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) { super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader; }"
      },
      {
        "txt": "protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) { super(src, deser); _objectIdReader = src._objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) { super(src, newName); _objectIdReader = src._objectIdReader; } @Override"
      },
      {
        "txt": "public ObjectIdValueProperty withName(PropertyName newName) { return new ObjectIdValueProperty(this, newName); } @Override public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) { return new ObjectIdValueProperty(this, deser); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return null;"
      },
      {
        "txt": "} @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { deserializeSetAndReturn(p, ctxt, instance); } @Override public Object deserializeSetAndReturn(JsonParser p,"
      },
      {
        "txt": "DeserializationContext ctxt, Object instance) throws IOException { Object id = _valueDeserializer.deserialize(p, ctxt); if (id == null) { return null; } ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) {"
      },
      {
        "txt": "return idProp.setAndReturn(instance, id); } return instance; } @Override public void set(Object instance, Object value) throws IOException { setAndReturn(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException"
      },
      {
        "txt": "{ SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); } return idProp.setAndReturn(instance, value); }"
      }
    ]
  },
  {
    "id": 1510,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 78,
    "end-bug-line": 78,
    "bug": "Object id = _valueDeserializer.deserialize(p, ctxt);",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata)"
      },
      {
        "txt": "{ super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) { super(src, deser); _objectIdReader = src._objectIdReader; }"
      },
      {
        "txt": "protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) { super(src, newName); _objectIdReader = src._objectIdReader; } @Override public ObjectIdValueProperty withName(PropertyName newName) { return new ObjectIdValueProperty(this, newName); } @Override public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) {"
      },
      {
        "txt": "return new ObjectIdValueProperty(this, deser); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return null; } @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException"
      },
      {
        "txt": "deserializeSetAndReturn(p, ctxt, instance); } @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { <extra_id_0> if (id == null) { return null; } ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty;"
      },
      {
        "txt": "roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(instance, id); } return instance; } @Override public void set(Object instance, Object value) throws IOException { setAndReturn(instance, value);"
      },
      {
        "txt": "} @Override public Object setAndReturn(Object instance, Object value) throws IOException { SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); } return idProp.setAndReturn(instance, value);"
      }
    ]
  },
  {
    "id": 1511,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 85,
    "end-bug-line": 85,
    "bug": "if (id == null) {",
    "fix": "if (p.hasToken(JsonToken.VALUE_NULL)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) {"
      },
      {
        "txt": "super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) { super(src, deser); _objectIdReader = src._objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) {"
      },
      {
        "txt": "super(src, newName); _objectIdReader = src._objectIdReader; } @Override public ObjectIdValueProperty withName(PropertyName newName) { return new ObjectIdValueProperty(this, newName); } @Override public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) { return new ObjectIdValueProperty(this, deser);"
      },
      {
        "txt": "} @Override public <A extends Annotation> A getAnnotation(Class<A> acls) { return null; } @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException {"
      },
      {
        "txt": "} @Override public Object deserializeSetAndReturn(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { Object id = _valueDeserializer.deserialize(p, ctxt); <extra_id_0> return null; } ReadableObjectId roid = ctxt.findObjectId(id, _objectIdReader.generator, _objectIdReader.resolver); roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) {"
      },
      {
        "txt": "SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(instance, id); } return instance; } @Override public void set(Object instance, Object value) throws IOException { setAndReturn(instance, value); }"
      },
      {
        "txt": "@Override public Object setAndReturn(Object instance, Object value) throws IOException { SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); } return idProp.setAndReturn(instance, value); }"
      }
    ]
  },
  {
    "id": 1512,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/deser/impl/ObjectIdValueProperty.java",
    "start-bug-line": 88,
    "end-bug-line": 88,
    "bug": "",
    "fix": "Object id = _valueDeserializer.deserialize(p, ctxt);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.deser.impl; import java.io.IOException; import java.lang.annotation.Annotation; import com.fasterxml.jackson.core.JsonParser; import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.deser.*; import com.fasterxml.jackson.databind.introspect.AnnotatedMember; public final class ObjectIdValueProperty"
      },
      {
        "txt": "extends SettableBeanProperty { private static final long serialVersionUID = 1L; protected final ObjectIdReader _objectIdReader; public ObjectIdValueProperty(ObjectIdReader objectIdReader, PropertyMetadata metadata) { super(objectIdReader.propertyName, objectIdReader.getIdType(), metadata, objectIdReader.getDeserializer()); _objectIdReader = objectIdReader;"
      },
      {
        "txt": "} protected ObjectIdValueProperty(ObjectIdValueProperty src, JsonDeserializer<?> deser) { super(src, deser); _objectIdReader = src._objectIdReader; } protected ObjectIdValueProperty(ObjectIdValueProperty src, PropertyName newName) { super(src, newName); _objectIdReader = src._objectIdReader; }"
      },
      {
        "txt": "@Override public ObjectIdValueProperty withName(PropertyName newName) { return new ObjectIdValueProperty(this, newName); } @Override public ObjectIdValueProperty withValueDeserializer(JsonDeserializer<?> deser) { return new ObjectIdValueProperty(this, deser); } @Override public <A extends Annotation> A getAnnotation(Class<A> acls) {"
      },
      {
        "txt": "return null; } @Override public AnnotatedMember getMember() { return null; } @Override public void deserializeAndSet(JsonParser p, DeserializationContext ctxt, Object instance) throws IOException { deserializeSetAndReturn(p, ctxt, instance); } @Override"
      },
      {
        "txt": "DeserializationContext ctxt, Object instance) throws IOException { Object id = _valueDeserializer.deserialize(p, ctxt); if (id == null) { return null; } <extra_id_0> roid.bindItem(instance); SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp != null) { return idProp.setAndReturn(instance, id); } return instance;"
      },
      {
        "txt": "} return instance; } @Override public void set(Object instance, Object value) throws IOException { setAndReturn(instance, value); } @Override public Object setAndReturn(Object instance, Object value) throws IOException {"
      },
      {
        "txt": "SettableBeanProperty idProp = _objectIdReader.idProperty; if (idProp == null) { throw new UnsupportedOperationException( \"Should not call set() on ObjectIdProperty that has no SettableBeanProperty\"); } return idProp.setAndReturn(instance, value); }"
      }
    ]
  }
]
[
  {
    "id": 1488,
    "file_path": "src/main/java/com/fasterxml/jackson/databind/ser/std/NumberSerializer.java",
    "start-bug-line": 81,
    "end-bug-line": 81,
    "bug": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER);",
    "fix": "visitFloatFormat(visitor, typeHint, JsonParser.NumberType.BIG_DECIMAL);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.databind.ser.std; import java.io.IOException; import java.lang.reflect.Type; import java.math.BigDecimal; import java.math.BigInteger; import com.fasterxml.jackson.core.JsonGenerator; import com.fasterxml.jackson.core.JsonParser;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.*; import com.fasterxml.jackson.databind.annotation.JacksonStdImpl; import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorWrapper; @JacksonStdImpl @SuppressWarnings(\"serial\") public class NumberSerializer extends StdScalarSerializer<Number> { public final static NumberSerializer instance = new NumberSerializer(Number.class); protected final boolean _isInt;"
      },
      {
        "txt": "public NumberSerializer(Class<? extends Number> rawType) { super(rawType, false); _isInt = (rawType == BigInteger.class); } @Override public void serialize(Number value, JsonGenerator g, SerializerProvider provider) throws IOException { if (value instanceof BigDecimal) { g.writeNumber((BigDecimal) value); } else if (value instanceof BigInteger) {"
      },
      {
        "txt": "g.writeNumber((BigInteger) value); } else if (value instanceof Integer) { g.writeNumber(value.intValue()); } else if (value instanceof Long) { g.writeNumber(value.longValue()); } else if (value instanceof Double) { g.writeNumber(value.doubleValue()); } else if (value instanceof Float) { g.writeNumber(value.floatValue()); } else if ((value instanceof Byte) || (value instanceof Short)) {"
      },
      {
        "txt": "g.writeNumber(value.intValue()); // doesn't need to be cast to smaller numbers } else { g.writeNumber(value.toString()); } } @Override public JsonNode getSchema(SerializerProvider provider, Type typeHint) { return createSchemaNode(_isInt ? \"integer\" : \"number\", true); } @Override"
      },
      {
        "txt": "{ if (_isInt) { visitIntFormat(visitor, typeHint, JsonParser.NumberType.BIG_INTEGER); } else { Class<?> h = handledType(); if (h == BigDecimal.class) { <extra_id_0> } else { } } } }"
      }
    ]
  }
]
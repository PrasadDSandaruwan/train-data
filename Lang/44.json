[
  {
    "id": 2392,
    "file_path": "src/java/org/apache/commons/lang/NumberUtils.java",
    "start-bug-line": 145,
    "end-bug-line": 145,
    "bug": "",
    "fix": "if (val.length() == 1 && !Character.isDigit(val.charAt(0))) { throw new NumberFormatException(val + \" is not a valid number.\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang; import java.math.BigDecimal; import java.math.BigInteger; public final class NumberUtils { public NumberUtils() { super(); }"
      },
      {
        "txt": "public static int stringToInt(String str) { return stringToInt(str, 0); } public static int stringToInt(String str, int defaultValue) { try { return Integer.parseInt(str); } catch (NumberFormatException nfe) { return defaultValue; } }"
      },
      {
        "txt": "if (val == null) { return null; } if (val.length() == 0) { throw new NumberFormatException(\"\\\"\\\" is not a valid number.\"); } <extra_id_0> return null; } if (val.startsWith(\"0x\") || val.startsWith(\"-0x\")) { return createInteger(val); } char lastChar = val.charAt(val.length() - 1);"
      },
      {
        "txt": "} char lastChar = val.charAt(val.length() - 1); String mant; String dec; String exp; int decPos = val.indexOf('.'); int expPos = val.indexOf('e') + val.indexOf('E') + 1; if (decPos > -1) { if (expPos > -1) { if (expPos < decPos) {"
      },
      {
        "txt": "throw new NumberFormatException(val + \" is not a valid number.\"); } dec = val.substring(decPos + 1, expPos); } else { dec = val.substring(decPos + 1); } mant = val.substring(0, decPos); } else { if (expPos > -1) { mant = val.substring(0, expPos);"
      },
      {
        "txt": "} else { mant = val; } dec = null; } if (!Character.isDigit(lastChar)) { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length() - 1); } else { exp = null;"
      },
      {
        "txt": "} String numeric = val.substring(0, val.length() - 1); boolean allZeros = isAllZeros(mant) && isAllZeros(exp); switch (lastChar) { case 'l' : case 'L' : if (dec == null && exp == null && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) { try {"
      },
      {
        "txt": "return createLong(numeric); } catch (NumberFormatException nfe) { } return createBigInteger(numeric); } throw new NumberFormatException(val + \" is not a valid number.\"); case 'f' : case 'F' : try { Float f = NumberUtils.createFloat(numeric);"
      },
      {
        "txt": "if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException e) { } case 'd' : case 'D' : try { Double d = NumberUtils.createDouble(numeric); if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {"
      },
      {
        "txt": "return d; } } catch (NumberFormatException nfe) { } try { return createBigDecimal(numeric); } catch (NumberFormatException e) { } default : throw new NumberFormatException(val + \" is not a valid number.\");"
      },
      {
        "txt": "} } else { if (expPos > -1 && expPos < val.length() - 1) { exp = val.substring(expPos + 1, val.length()); } else { exp = null; } if (dec == null && exp == null) { try { return createInteger(val);"
      },
      {
        "txt": "} catch (NumberFormatException nfe) { } try { return createLong(val); } catch (NumberFormatException nfe) { } return createBigInteger(val); } else { boolean allZeros = isAllZeros(mant) && isAllZeros(exp); try {"
      },
      {
        "txt": "Float f = createFloat(val); if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) { return f; } } catch (NumberFormatException nfe) { } try { Double d = createDouble(val); if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) { return d;"
      },
      {
        "txt": "} } catch (NumberFormatException nfe) { } return createBigDecimal(val); } } } private static boolean isAllZeros(String s) { if (s == null) { return true;"
      },
      {
        "txt": "} for (int i = s.length() - 1; i >= 0; i--) { if (s.charAt(i) != '0') { return false; } } return s.length() > 0; } public static Float createFloat(String val) { return Float.valueOf(val);"
      },
      {
        "txt": "} public static Double createDouble(String val) { return Double.valueOf(val); } public static Integer createInteger(String val) { return Integer.decode(val); } public static Long createLong(String val) { return Long.valueOf(val); }"
      },
      {
        "txt": "public static BigInteger createBigInteger(String val) { BigInteger bi = new BigInteger(val); return bi; } public static BigDecimal createBigDecimal(String val) { BigDecimal bd = new BigDecimal(val); return bd; } public static long minimum(long a, long b, long c) { if (b < a) {"
      },
      {
        "txt": "a = b; } if (c < a) { a = c; } return a; } public static int minimum(int a, int b, int c) { if (b < a) { a = b;"
      },
      {
        "txt": "} if (c < a) { a = c; } return a; } public static long maximum(long a, long b, long c) { if (b > a) { a = b; }"
      },
      {
        "txt": "if (c > a) { a = c; } return a; } public static int maximum(int a, int b, int c) { if (b > a) { a = b; } if (c > a) {"
      },
      {
        "txt": "a = c; } return a; } public static int compare(double lhs, double rhs) { if (lhs < rhs) { return -1; } if (lhs > rhs) { return +1;"
      },
      {
        "txt": "} long lhsBits = Double.doubleToLongBits(lhs); long rhsBits = Double.doubleToLongBits(rhs); if (lhsBits == rhsBits) { return 0; } if (lhsBits < rhsBits) { return -1; } else { return +1;"
      },
      {
        "txt": "} } public static int compare(float lhs, float rhs) { if (lhs < rhs) { return -1; } if (lhs > rhs) { return +1; } int lhsBits = Float.floatToIntBits(lhs);"
      },
      {
        "txt": "int rhsBits = Float.floatToIntBits(rhs); if (lhsBits == rhsBits) { return 0; } if (lhsBits < rhsBits) { return -1; } else { return +1; } }"
      },
      {
        "txt": "public static boolean isDigits(String str) { if ((str == null) || (str.length() == 0)) { return false; } for (int i = 0; i < str.length(); i++) { if (!Character.isDigit(str.charAt(i))) { return false; } } return true;"
      },
      {
        "txt": "} public static boolean isNumber(String str) { if (StringUtils.isEmpty(str)) { return false; } char[] chars = str.toCharArray(); int sz = chars.length; boolean hasExp = false; boolean hasDecPoint = false; boolean allowSigns = false;"
      },
      {
        "txt": "boolean foundDigit = false; int start = (chars[0] == '-') ? 1 : 0; if (sz > start + 1) { if (chars[start] == '0' && chars[start + 1] == 'x') { int i = start + 2; if (i == sz) { return false; // str == \"0x\" } for (; i < chars.length; i++) { if ((chars[i] < '0' || chars[i] > '9')"
      },
      {
        "txt": "&& (chars[i] < 'a' || chars[i] > 'f') && (chars[i] < 'A' || chars[i] > 'F')) { return false; } } return true; } } sz--; // don't want to loop to the last char, check it afterwords int i = start;"
      },
      {
        "txt": "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) { if (chars[i] >= '0' && chars[i] <= '9') { foundDigit = true; allowSigns = false; } else if (chars[i] == '.') { if (hasDecPoint || hasExp) { return false; } hasDecPoint = true; } else if (chars[i] == 'e' || chars[i] == 'E') {"
      },
      {
        "txt": "if (hasExp) { return false; } if (!foundDigit) { return false; } hasExp = true; allowSigns = true; } else if (chars[i] == '+' || chars[i] == '-') { if (!allowSigns) {"
      },
      {
        "txt": "return false; } allowSigns = false; foundDigit = false; // we need a digit after the E } else { return false; } i++; } if (i < chars.length) {"
      },
      {
        "txt": "if (chars[i] >= '0' && chars[i] <= '9') { return true; } if (chars[i] == 'e' || chars[i] == 'E') { return false; } if (!allowSigns && (chars[i] == 'd' || chars[i] == 'D' || chars[i] == 'f'"
      },
      {
        "txt": "|| chars[i] == 'F')) { return foundDigit; } if (chars[i] == 'l' || chars[i] == 'L') { return foundDigit && !hasExp; } return false; } return !allowSigns && foundDigit;"
      }
    ]
  }
]
[
  {
    "id": 2291,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 95,
    "end-bug-line": 95,
    "bug": "pos += Character.charCount(Character.codePointAt(input, pos));",
    "fix": "pos += Character.charCount(Character.codePointAt(input, pt));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException; public final String translate(CharSequence input) { if (input == null) { return null;"
      },
      {
        "txt": "} try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe); } } public final void translate(CharSequence input, Writer out) throws IOException {"
      },
      {
        "txt": "if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = input.length(); while (pos < len) { int consumed = translate(input, pos, out);"
      },
      {
        "txt": "char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); pos+= c.length; continue; } for (int pt = 0; pt < consumed; pt++) { <extra_id_0> } } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this;"
      },
      {
        "txt": "CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  }
]
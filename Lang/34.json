[
  {
    "id": 2371,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
    "start-bug-line": 148,
    "end-bug-line": 148,
    "bug": "return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap();",
    "fix": "return REGISTRY.get();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.io.Serializable;"
      },
      {
        "txt": "import java.lang.reflect.Array; import java.util.Collection; import java.util.Collections; import java.util.Map; import java.util.Set; import java.util.WeakHashMap; import org.apache.commons.lang3.ClassUtils; import org.apache.commons.lang3.ObjectUtils; import org.apache.commons.lang3.SystemUtils; public abstract class ToStringStyle implements Serializable {"
      },
      {
        "txt": "public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle(); public static final ToStringStyle SIMPLE_STYLE = new SimpleToStringStyle(); private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { <extra_id_0> } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); return m.containsKey(value); } static void register(Object value) {"
      },
      {
        "txt": "} static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); }"
      },
      {
        "txt": "} m.put(value, null); } } static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) {"
      },
      {
        "txt": "m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); } } } } } private boolean useFieldNames = true; private boolean useClassName = true;"
      },
      {
        "txt": "private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\"; private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\";"
      },
      {
        "txt": "private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\"; private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super();"
      },
      {
        "txt": "} public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); } public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2);"
      },
      {
        "txt": "if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data); appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) {"
      },
      {
        "txt": "appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) { appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) {"
      },
      {
        "txt": "removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object); } protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true;"
      },
      {
        "txt": "for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break; } } if (match) { buffer.setLength(len - sepLen); } }"
      },
      {
        "txt": "} public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); }"
      },
      {
        "txt": "protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value); return; } register(value); try { if (value instanceof Collection<?>) { if (detail) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); } } else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); }"
      },
      {
        "txt": "} else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else { appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) { appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); } } else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); }"
      },
      {
        "txt": "} else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else { appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) { appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); } } else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); }"
      },
      {
        "txt": "} } finally { unregister(value); } } protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value);"
      },
      {
        "txt": "} protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); } protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass()));"
      },
      {
        "txt": "buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); }"
      },
      {
        "txt": "public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName);"
      },
      {
        "txt": "appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName);"
      },
      {
        "txt": "} protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) {"
      },
      {
        "txt": "buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); }"
      },
      {
        "txt": "public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName);"
      },
      {
        "txt": "appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName);"
      },
      {
        "txt": "} else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) {"
      },
      {
        "txt": "Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } }"
      },
      {
        "txt": "buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart); int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); }"
      },
      {
        "txt": "if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length);"
      },
      {
        "txt": "} public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); }"
      },
      {
        "txt": "appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); }"
      },
      {
        "txt": "buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) {"
      },
      {
        "txt": "buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) {"
      },
      {
        "txt": "appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); }"
      },
      {
        "txt": "protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); }"
      },
      {
        "txt": "protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); }"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) {"
      },
      {
        "txt": "appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart);"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length);"
      },
      {
        "txt": "} public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); }"
      },
      {
        "txt": "appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); }"
      },
      {
        "txt": "buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) {"
      },
      {
        "txt": "buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) {"
      },
      {
        "txt": "appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); }"
      },
      {
        "txt": "protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); }"
      },
      {
        "txt": "protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) { if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName());"
      },
      {
        "txt": "} } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) { if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } }"
      },
      {
        "txt": "protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) { buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) {"
      },
      {
        "txt": "buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) { buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer);"
      },
      {
        "txt": "} protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size); buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; }"
      },
      {
        "txt": "return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls); } protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName;"
      },
      {
        "txt": "} protected boolean isUseShortClassName() { return useShortClassName; } protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; }"
      },
      {
        "txt": "protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() { return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() {"
      },
      {
        "txt": "return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail; } protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail;"
      },
      {
        "txt": "} protected String getArrayStart() { return arrayStart; } protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; }"
      },
      {
        "txt": "protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) { if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() {"
      },
      {
        "txt": "return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) { arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart;"
      },
      {
        "txt": "} protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\"; } this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; }"
      },
      {
        "txt": "protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; } this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {"
      },
      {
        "txt": "if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator; } protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) {"
      },
      {
        "txt": "fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; } protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; }"
      },
      {
        "txt": "protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) {"
      },
      {
        "txt": "if (nullText == null) { nullText = \"\"; } this.nullText = nullText; } protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) {"
      },
      {
        "txt": "sizeStartText = \"\"; } this.sizeStartText = sizeStartText; } protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\";"
      },
      {
        "txt": "} this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() { return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; }"
      },
      {
        "txt": "this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText; } protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText;"
      },
      {
        "txt": "} private static final class DefaultToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; DefaultToStringStyle() { super(); } private Object readResolve() { return ToStringStyle.DEFAULT_STYLE; } }"
      },
      {
        "txt": "private static final class NoFieldNameToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; NoFieldNameToStringStyle() { super(); this.setUseFieldNames(false); } private Object readResolve() { return ToStringStyle.NO_FIELD_NAMES_STYLE; } }"
      },
      {
        "txt": "private static final class ShortPrefixToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; ShortPrefixToStringStyle() { super(); this.setUseShortClassName(true); this.setUseIdentityHashCode(false); } private Object readResolve() { return ToStringStyle.SHORT_PREFIX_STYLE; }"
      },
      {
        "txt": "} private static final class SimpleToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; SimpleToStringStyle() { super(); this.setUseClassName(false); this.setUseIdentityHashCode(false); this.setUseFieldNames(false); this.setContentStart(\"\"); this.setContentEnd(\"\");"
      },
      {
        "txt": "} private Object readResolve() { return ToStringStyle.SIMPLE_STYLE; } } private static final class MultiLineToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; MultiLineToStringStyle() { super(); this.setContentStart(\"[\");"
      },
      {
        "txt": "this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \" \"); this.setFieldSeparatorAtStart(true); this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\"); } private Object readResolve() { return ToStringStyle.MULTI_LINE_STYLE; } }"
      }
    ]
  },
  {
    "id": 2372,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/ToStringStyle.java",
    "start-bug-line": 164,
    "end-bug-line": 164,
    "bug": "return m.containsKey(value);",
    "fix": "return m != null && m.containsKey(value);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.io.Serializable; import java.lang.reflect.Array; import java.util.Collection; import java.util.Collections; import java.util.Map;"
      },
      {
        "txt": "import java.util.Set; import java.util.WeakHashMap; import org.apache.commons.lang3.ClassUtils; import org.apache.commons.lang3.ObjectUtils; import org.apache.commons.lang3.SystemUtils; public abstract class ToStringStyle implements Serializable { public static final ToStringStyle DEFAULT_STYLE = new DefaultToStringStyle(); public static final ToStringStyle MULTI_LINE_STYLE = new MultiLineToStringStyle(); public static final ToStringStyle NO_FIELD_NAMES_STYLE = new NoFieldNameToStringStyle(); public static final ToStringStyle SHORT_PREFIX_STYLE = new ShortPrefixToStringStyle();"
      },
      {
        "txt": "private static final ThreadLocal<WeakHashMap<Object, Object>> REGISTRY = new ThreadLocal<WeakHashMap<Object,Object>>(); static Map<Object, Object> getRegistry() { return REGISTRY.get() != null ? REGISTRY.get() : Collections.<Object, Object>emptyMap(); } static boolean isRegistered(Object value) { Map<Object, Object> m = getRegistry(); <extra_id_0> } static void register(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get();"
      },
      {
        "txt": "synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m == null) { m = new WeakHashMap<Object, Object>(); REGISTRY.set(m); } } m.put(value, null); } }"
      },
      {
        "txt": "static void unregister(Object value) { if (value != null) { WeakHashMap<Object, Object> m; synchronized (ToStringStyle.class) { m = REGISTRY.get(); if (m != null) { m.remove(value); if (m.isEmpty()) { REGISTRY.remove(); }"
      },
      {
        "txt": "} } } } private boolean useFieldNames = true; private boolean useClassName = true; private boolean useShortClassName = false; private boolean useIdentityHashCode = true; private String contentStart = \"[\"; private String contentEnd = \"]\";"
      },
      {
        "txt": "private String fieldNameValueSeparator = \"=\"; private boolean fieldSeparatorAtStart = false; private boolean fieldSeparatorAtEnd = false; private String fieldSeparator = \",\"; private String arrayStart = \"{\"; private String arraySeparator = \",\"; private boolean arrayContentDetail = true; private String arrayEnd = \"}\"; private boolean defaultFullDetail = true; private String nullText = \"<null>\";"
      },
      {
        "txt": "private String sizeStartText = \"<size=\"; private String sizeEndText = \">\"; private String summaryObjectStartText = \"<\"; private String summaryObjectEndText = \">\"; protected ToStringStyle() { super(); } public void appendSuper(StringBuffer buffer, String superToString) { appendToString(buffer, superToString); }"
      },
      {
        "txt": "public void appendToString(StringBuffer buffer, String toString) { if (toString != null) { int pos1 = toString.indexOf(contentStart) + contentStart.length(); int pos2 = toString.lastIndexOf(contentEnd); if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) { String data = toString.substring(pos1, pos2); if (fieldSeparatorAtStart) { removeLastFieldSeparator(buffer); } buffer.append(data);"
      },
      {
        "txt": "appendFieldSeparator(buffer); } } } public void appendStart(StringBuffer buffer, Object object) { if (object != null) { appendClassName(buffer, object); appendIdentityHashCode(buffer, object); appendContentStart(buffer); if (fieldSeparatorAtStart) {"
      },
      {
        "txt": "appendFieldSeparator(buffer); } } } public void appendEnd(StringBuffer buffer, Object object) { if (this.fieldSeparatorAtEnd == false) { removeLastFieldSeparator(buffer); } appendContentEnd(buffer); unregister(object);"
      },
      {
        "txt": "} protected void removeLastFieldSeparator(StringBuffer buffer) { int len = buffer.length(); int sepLen = fieldSeparator.length(); if (len > 0 && sepLen > 0 && len >= sepLen) { boolean match = true; for (int i = 0; i < sepLen; i++) { if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) { match = false; break;"
      },
      {
        "txt": "} } if (match) { buffer.setLength(len - sepLen); } } } public void append(StringBuffer buffer, String fieldName, Object value, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (value == null) {"
      },
      {
        "txt": "appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, value, isFullDetail(fullDetail)); } appendFieldEnd(buffer, fieldName); } protected void appendInternal(StringBuffer buffer, String fieldName, Object value, boolean detail) { if (isRegistered(value) && !(value instanceof Number || value instanceof Boolean || value instanceof Character)) { appendCyclicObject(buffer, fieldName, value);"
      },
      {
        "txt": "return; } register(value); try { if (value instanceof Collection<?>) { if (detail) { appendDetail(buffer, fieldName, (Collection<?>) value); } else { appendSummarySize(buffer, fieldName, ((Collection<?>) value).size()); }"
      },
      {
        "txt": "} else if (value instanceof Map<?, ?>) { if (detail) { appendDetail(buffer, fieldName, (Map<?, ?>) value); } else { appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size()); } } else if (value instanceof long[]) { if (detail) { appendDetail(buffer, fieldName, (long[]) value); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, (long[]) value); } } else if (value instanceof int[]) { if (detail) { appendDetail(buffer, fieldName, (int[]) value); } else { appendSummary(buffer, fieldName, (int[]) value); } } else if (value instanceof short[]) { if (detail) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, (short[]) value); } else { appendSummary(buffer, fieldName, (short[]) value); } } else if (value instanceof byte[]) { if (detail) { appendDetail(buffer, fieldName, (byte[]) value); } else { appendSummary(buffer, fieldName, (byte[]) value); }"
      },
      {
        "txt": "} else if (value instanceof char[]) { if (detail) { appendDetail(buffer, fieldName, (char[]) value); } else { appendSummary(buffer, fieldName, (char[]) value); } } else if (value instanceof double[]) { if (detail) { appendDetail(buffer, fieldName, (double[]) value); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, (double[]) value); } } else if (value instanceof float[]) { if (detail) { appendDetail(buffer, fieldName, (float[]) value); } else { appendSummary(buffer, fieldName, (float[]) value); } } else if (value instanceof boolean[]) { if (detail) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, (boolean[]) value); } else { appendSummary(buffer, fieldName, (boolean[]) value); } } else if (value.getClass().isArray()) { if (detail) { appendDetail(buffer, fieldName, (Object[]) value); } else { appendSummary(buffer, fieldName, (Object[]) value); }"
      },
      {
        "txt": "} else { if (detail) { appendDetail(buffer, fieldName, value); } else { appendSummary(buffer, fieldName, value); } } } finally { unregister(value); }"
      },
      {
        "txt": "} protected void appendCyclicObject(StringBuffer buffer, String fieldName, Object value) { ObjectUtils.identityToString(buffer, value); } protected void appendDetail(StringBuffer buffer, String fieldName, Object value) { buffer.append(value); } protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) { buffer.append(coll); }"
      },
      {
        "txt": "protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) { buffer.append(map); } protected void appendSummary(StringBuffer buffer, String fieldName, Object value) { buffer.append(summaryObjectStartText); buffer.append(getShortClassName(value.getClass())); buffer.append(summaryObjectEndText); } public void append(StringBuffer buffer, String fieldName, long value) { appendFieldStart(buffer, fieldName);"
      },
      {
        "txt": "appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, int value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName);"
      },
      {
        "txt": "} protected void appendDetail(StringBuffer buffer, String fieldName, int value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, short value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short value) {"
      },
      {
        "txt": "buffer.append(value); } public void append(StringBuffer buffer, String fieldName, byte value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, byte value) { buffer.append(value); }"
      },
      {
        "txt": "public void append(StringBuffer buffer, String fieldName, char value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, double value) { appendFieldStart(buffer, fieldName);"
      },
      {
        "txt": "appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, float value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName);"
      },
      {
        "txt": "} protected void appendDetail(StringBuffer buffer, String fieldName, float value) { buffer.append(value); } public void append(StringBuffer buffer, String fieldName, boolean value) { appendFieldStart(buffer, fieldName); appendDetail(buffer, fieldName, value); appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean value) {"
      },
      {
        "txt": "buffer.append(value); } public void append(StringBuffer buffer, String fieldName, Object[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array);"
      },
      {
        "txt": "} appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, Object[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { Object item = array[i]; if (i > 0) { buffer.append(arraySeparator); }"
      },
      {
        "txt": "if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail); } } buffer.append(arrayEnd); } protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) { buffer.append(arrayStart);"
      },
      {
        "txt": "int length = Array.getLength(array); for (int i = 0; i < length; i++) { Object item = Array.get(array, i); if (i > 0) { buffer.append(arraySeparator); } if (item == null) { appendNullText(buffer, fieldName); } else { appendInternal(buffer, fieldName, item, arrayContentDetail);"
      },
      {
        "txt": "} } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, Object[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, long[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) {"
      },
      {
        "txt": "appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, long[] array) { buffer.append(arrayStart);"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, long[] array) { appendSummarySize(buffer, fieldName, array.length);"
      },
      {
        "txt": "} public void append(StringBuffer buffer, String fieldName, int[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); }"
      },
      {
        "txt": "appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, int[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); }"
      },
      {
        "txt": "buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, int[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, short[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, short[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) {"
      },
      {
        "txt": "buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, short[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, byte[] array, Boolean fullDetail) {"
      },
      {
        "txt": "appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); }"
      },
      {
        "txt": "protected void appendDetail(StringBuffer buffer, String fieldName, byte[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); }"
      },
      {
        "txt": "protected void appendSummary(StringBuffer buffer, String fieldName, byte[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, char[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else {"
      },
      {
        "txt": "appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, char[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); }"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, char[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, double[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) {"
      },
      {
        "txt": "appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, double[] array) { buffer.append(arrayStart);"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, double[] array) { appendSummarySize(buffer, fieldName, array.length);"
      },
      {
        "txt": "} public void append(StringBuffer buffer, String fieldName, float[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) { appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); }"
      },
      {
        "txt": "appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, float[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) { buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); }"
      },
      {
        "txt": "buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, float[] array) { appendSummarySize(buffer, fieldName, array.length); } public void append(StringBuffer buffer, String fieldName, boolean[] array, Boolean fullDetail) { appendFieldStart(buffer, fieldName); if (array == null) { appendNullText(buffer, fieldName); } else if (isFullDetail(fullDetail)) {"
      },
      {
        "txt": "appendDetail(buffer, fieldName, array); } else { appendSummary(buffer, fieldName, array); } appendFieldEnd(buffer, fieldName); } protected void appendDetail(StringBuffer buffer, String fieldName, boolean[] array) { buffer.append(arrayStart); for (int i = 0; i < array.length; i++) { if (i > 0) {"
      },
      {
        "txt": "buffer.append(arraySeparator); } appendDetail(buffer, fieldName, array[i]); } buffer.append(arrayEnd); } protected void appendSummary(StringBuffer buffer, String fieldName, boolean[] array) { appendSummarySize(buffer, fieldName, array.length); } protected void appendClassName(StringBuffer buffer, Object object) {"
      },
      {
        "txt": "if (useClassName && object != null) { register(object); if (useShortClassName) { buffer.append(getShortClassName(object.getClass())); } else { buffer.append(object.getClass().getName()); } } } protected void appendIdentityHashCode(StringBuffer buffer, Object object) {"
      },
      {
        "txt": "if (this.isUseIdentityHashCode() && object!=null) { register(object); buffer.append('@'); buffer.append(Integer.toHexString(System.identityHashCode(object))); } } protected void appendContentStart(StringBuffer buffer) { buffer.append(contentStart); } protected void appendContentEnd(StringBuffer buffer) {"
      },
      {
        "txt": "buffer.append(contentEnd); } protected void appendNullText(StringBuffer buffer, String fieldName) { buffer.append(nullText); } protected void appendFieldSeparator(StringBuffer buffer) { buffer.append(fieldSeparator); } protected void appendFieldStart(StringBuffer buffer, String fieldName) { if (useFieldNames && fieldName != null) {"
      },
      {
        "txt": "buffer.append(fieldName); buffer.append(fieldNameValueSeparator); } } protected void appendFieldEnd(StringBuffer buffer, String fieldName) { appendFieldSeparator(buffer); } protected void appendSummarySize(StringBuffer buffer, String fieldName, int size) { buffer.append(sizeStartText); buffer.append(size);"
      },
      {
        "txt": "buffer.append(sizeEndText); } protected boolean isFullDetail(Boolean fullDetailRequest) { if (fullDetailRequest == null) { return defaultFullDetail; } return fullDetailRequest.booleanValue(); } protected String getShortClassName(Class<?> cls) { return ClassUtils.getShortClassName(cls);"
      },
      {
        "txt": "} protected boolean isUseClassName() { return useClassName; } protected void setUseClassName(boolean useClassName) { this.useClassName = useClassName; } protected boolean isUseShortClassName() { return useShortClassName; }"
      },
      {
        "txt": "protected void setUseShortClassName(boolean useShortClassName) { this.useShortClassName = useShortClassName; } protected boolean isUseIdentityHashCode() { return useIdentityHashCode; } protected void setUseIdentityHashCode(boolean useIdentityHashCode) { this.useIdentityHashCode = useIdentityHashCode; } protected boolean isUseFieldNames() {"
      },
      {
        "txt": "return useFieldNames; } protected void setUseFieldNames(boolean useFieldNames) { this.useFieldNames = useFieldNames; } protected boolean isDefaultFullDetail() { return defaultFullDetail; } protected void setDefaultFullDetail(boolean defaultFullDetail) { this.defaultFullDetail = defaultFullDetail;"
      },
      {
        "txt": "} protected boolean isArrayContentDetail() { return arrayContentDetail; } protected void setArrayContentDetail(boolean arrayContentDetail) { this.arrayContentDetail = arrayContentDetail; } protected String getArrayStart() { return arrayStart; }"
      },
      {
        "txt": "protected void setArrayStart(String arrayStart) { if (arrayStart == null) { arrayStart = \"\"; } this.arrayStart = arrayStart; } protected String getArrayEnd() { return arrayEnd; } protected void setArrayEnd(String arrayEnd) {"
      },
      {
        "txt": "if (arrayEnd == null) { arrayEnd = \"\"; } this.arrayEnd = arrayEnd; } protected String getArraySeparator() { return arraySeparator; } protected void setArraySeparator(String arraySeparator) { if (arraySeparator == null) {"
      },
      {
        "txt": "arraySeparator = \"\"; } this.arraySeparator = arraySeparator; } protected String getContentStart() { return contentStart; } protected void setContentStart(String contentStart) { if (contentStart == null) { contentStart = \"\";"
      },
      {
        "txt": "} this.contentStart = contentStart; } protected String getContentEnd() { return contentEnd; } protected void setContentEnd(String contentEnd) { if (contentEnd == null) { contentEnd = \"\"; }"
      },
      {
        "txt": "this.contentEnd = contentEnd; } protected String getFieldNameValueSeparator() { return fieldNameValueSeparator; } protected void setFieldNameValueSeparator(String fieldNameValueSeparator) { if (fieldNameValueSeparator == null) { fieldNameValueSeparator = \"\"; } this.fieldNameValueSeparator = fieldNameValueSeparator;"
      },
      {
        "txt": "} protected String getFieldSeparator() { return fieldSeparator; } protected void setFieldSeparator(String fieldSeparator) { if (fieldSeparator == null) { fieldSeparator = \"\"; } this.fieldSeparator = fieldSeparator; }"
      },
      {
        "txt": "protected boolean isFieldSeparatorAtStart() { return fieldSeparatorAtStart; } protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { this.fieldSeparatorAtStart = fieldSeparatorAtStart; } protected boolean isFieldSeparatorAtEnd() { return fieldSeparatorAtEnd; } protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {"
      },
      {
        "txt": "this.fieldSeparatorAtEnd = fieldSeparatorAtEnd; } protected String getNullText() { return nullText; } protected void setNullText(String nullText) { if (nullText == null) { nullText = \"\"; } this.nullText = nullText;"
      },
      {
        "txt": "} protected String getSizeStartText() { return sizeStartText; } protected void setSizeStartText(String sizeStartText) { if (sizeStartText == null) { sizeStartText = \"\"; } this.sizeStartText = sizeStartText; }"
      },
      {
        "txt": "protected String getSizeEndText() { return sizeEndText; } protected void setSizeEndText(String sizeEndText) { if (sizeEndText == null) { sizeEndText = \"\"; } this.sizeEndText = sizeEndText; } protected String getSummaryObjectStartText() {"
      },
      {
        "txt": "return summaryObjectStartText; } protected void setSummaryObjectStartText(String summaryObjectStartText) { if (summaryObjectStartText == null) { summaryObjectStartText = \"\"; } this.summaryObjectStartText = summaryObjectStartText; } protected String getSummaryObjectEndText() { return summaryObjectEndText;"
      },
      {
        "txt": "} protected void setSummaryObjectEndText(String summaryObjectEndText) { if (summaryObjectEndText == null) { summaryObjectEndText = \"\"; } this.summaryObjectEndText = summaryObjectEndText; } private static final class DefaultToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; DefaultToStringStyle() {"
      },
      {
        "txt": "super(); } private Object readResolve() { return ToStringStyle.DEFAULT_STYLE; } } private static final class NoFieldNameToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; NoFieldNameToStringStyle() { super();"
      },
      {
        "txt": "this.setUseFieldNames(false); } private Object readResolve() { return ToStringStyle.NO_FIELD_NAMES_STYLE; } } private static final class ShortPrefixToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; ShortPrefixToStringStyle() { super();"
      },
      {
        "txt": "this.setUseShortClassName(true); this.setUseIdentityHashCode(false); } private Object readResolve() { return ToStringStyle.SHORT_PREFIX_STYLE; } } private static final class SimpleToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; SimpleToStringStyle() {"
      },
      {
        "txt": "super(); this.setUseClassName(false); this.setUseIdentityHashCode(false); this.setUseFieldNames(false); this.setContentStart(\"\"); this.setContentEnd(\"\"); } private Object readResolve() { return ToStringStyle.SIMPLE_STYLE; }"
      },
      {
        "txt": "} private static final class MultiLineToStringStyle extends ToStringStyle { private static final long serialVersionUID = 1L; MultiLineToStringStyle() { super(); this.setContentStart(\"[\"); this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \" \"); this.setFieldSeparatorAtStart(true); this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\"); }"
      },
      {
        "txt": "private Object readResolve() { return ToStringStyle.MULTI_LINE_STYLE; } }"
      }
    ]
  }
]
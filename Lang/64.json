[
  {
    "id": 2436,
    "file_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
    "start-bug-line": 183,
    "end-bug-line": 183,
    "bug": "",
    "fix": "if (other == this) { return 0; } if (other.getClass() != this.getClass()) { if (other.getClass().getName().equals(this.getClass().getName())) { return iValue - getValueInOtherClassLoader(other); } throw new ClassCastException( \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.enums; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import org.apache.commons.lang.ClassUtils; public abstract class ValuedEnum extends Enum { private static final long serialVersionUID = -7129650521543789085L; private final int iValue; protected ValuedEnum(String name, int value) { super(name); iValue = value; }"
      },
      {
        "txt": "protected static Enum getEnum(Class enumClass, int value) { if (enumClass == null) { throw new IllegalArgumentException(\"The Enum Class must not be null\"); } List list = Enum.getEnumList(enumClass); for (Iterator it = list.iterator(); it.hasNext();) { ValuedEnum enumeration = (ValuedEnum) it.next(); if (enumeration.getValue() == value) { return enumeration; }"
      },
      {
        "txt": "return null; } public final int getValue() { return iValue; } public int compareTo(Object other) { <extra_id_0> } public String toString() { if (iToString == null) { String shortName = ClassUtils.getShortClassName(getEnumClass()); iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; }"
      },
      {
        "txt": "iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; } return iToString; }"
      }
    ]
  },
  {
    "id": 2437,
    "file_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
    "start-bug-line": 192,
    "end-bug-line": 192,
    "bug": "",
    "fix": "private int getValueInOtherClassLoader(Object other) { try { Method mth = other.getClass().getMethod(\"getValue\", null); Integer value = (Integer) mth.invoke(other, null); return value.intValue(); } catch (NoSuchMethodException e) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.enums; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import org.apache.commons.lang.ClassUtils; public abstract class ValuedEnum extends Enum { private static final long serialVersionUID = -7129650521543789085L; private final int iValue; protected ValuedEnum(String name, int value) { super(name); iValue = value; } protected static Enum getEnum(Class enumClass, int value) { if (enumClass == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Enum Class must not be null\"); } List list = Enum.getEnumList(enumClass); for (Iterator it = list.iterator(); it.hasNext();) { ValuedEnum enumeration = (ValuedEnum) it.next(); if (enumeration.getValue() == value) { return enumeration; } } return null;"
      },
      {
        "txt": "public final int getValue() { return iValue; } public int compareTo(Object other) { return iValue - ((ValuedEnum) other).iValue; } <extra_id_0> public String toString() { if (iToString == null) { String shortName = ClassUtils.getShortClassName(getEnumClass()); iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; } return iToString;"
      },
      {
        "txt": "} return iToString; }"
      }
    ]
  },
  {
    "id": 2438,
    "file_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
    "start-bug-line": 193,
    "end-bug-line": 193,
    "bug": "",
    "fix": "} catch (IllegalAccessException e) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.enums; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import org.apache.commons.lang.ClassUtils; public abstract class ValuedEnum extends Enum { private static final long serialVersionUID = -7129650521543789085L; private final int iValue; protected ValuedEnum(String name, int value) { super(name); iValue = value; } protected static Enum getEnum(Class enumClass, int value) { if (enumClass == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Enum Class must not be null\"); } List list = Enum.getEnumList(enumClass); for (Iterator it = list.iterator(); it.hasNext();) { ValuedEnum enumeration = (ValuedEnum) it.next(); if (enumeration.getValue() == value) { return enumeration; } } return null;"
      },
      {
        "txt": "public final int getValue() { return iValue; } public int compareTo(Object other) { return iValue - ((ValuedEnum) other).iValue; } <extra_id_0> public String toString() { if (iToString == null) { String shortName = ClassUtils.getShortClassName(getEnumClass()); iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; } return iToString;"
      },
      {
        "txt": "} return iToString; }"
      }
    ]
  },
  {
    "id": 2439,
    "file_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
    "start-bug-line": 194,
    "end-bug-line": 194,
    "bug": "",
    "fix": "} catch (InvocationTargetException e) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.enums; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import org.apache.commons.lang.ClassUtils; public abstract class ValuedEnum extends Enum { private static final long serialVersionUID = -7129650521543789085L; private final int iValue; protected ValuedEnum(String name, int value) { super(name); iValue = value; } protected static Enum getEnum(Class enumClass, int value) { if (enumClass == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Enum Class must not be null\"); } List list = Enum.getEnumList(enumClass); for (Iterator it = list.iterator(); it.hasNext();) { ValuedEnum enumeration = (ValuedEnum) it.next(); if (enumeration.getValue() == value) { return enumeration; } } return null;"
      },
      {
        "txt": "public final int getValue() { return iValue; } public int compareTo(Object other) { return iValue - ((ValuedEnum) other).iValue; } <extra_id_0> public String toString() { if (iToString == null) { String shortName = ClassUtils.getShortClassName(getEnumClass()); iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; } return iToString;"
      },
      {
        "txt": "} return iToString; }"
      }
    ]
  },
  {
    "id": 2440,
    "file_path": "src/java/org/apache/commons/lang/enums/ValuedEnum.java",
    "start-bug-line": 195,
    "end-bug-line": 195,
    "bug": "",
    "fix": "} throw new IllegalStateException(\"This should not happen\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.enums; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.Method; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import org.apache.commons.lang.ClassUtils; public abstract class ValuedEnum extends Enum { private static final long serialVersionUID = -7129650521543789085L; private final int iValue; protected ValuedEnum(String name, int value) { super(name); iValue = value; } protected static Enum getEnum(Class enumClass, int value) { if (enumClass == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Enum Class must not be null\"); } List list = Enum.getEnumList(enumClass); for (Iterator it = list.iterator(); it.hasNext();) { ValuedEnum enumeration = (ValuedEnum) it.next(); if (enumeration.getValue() == value) { return enumeration; } } return null;"
      },
      {
        "txt": "public final int getValue() { return iValue; } public int compareTo(Object other) { return iValue - ((ValuedEnum) other).iValue; } <extra_id_0> public String toString() { if (iToString == null) { String shortName = ClassUtils.getShortClassName(getEnumClass()); iToString = shortName + \"[\" + getName() + \"=\" + getValue() + \"]\"; } return iToString;"
      },
      {
        "txt": "} return iToString; }"
      }
    ]
  }
]
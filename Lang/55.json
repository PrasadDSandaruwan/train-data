[
  {
    "id": 2421,
    "file_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
    "start-bug-line": 118,
    "end-bug-line": 118,
    "bug": "",
    "fix": "if(this.runningState == STATE_RUNNING) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; public class StopWatch { private static final int STATE_UNSTARTED = 0;"
      },
      {
        "txt": "private static final int STATE_RUNNING = 1; private static final int STATE_STOPPED = 2; private static final int STATE_SUSPENDED = 3; private static final int STATE_UNSPLIT = 10; private static final int STATE_SPLIT = 11; private int runningState = STATE_UNSTARTED; private int splitState = STATE_UNSPLIT; private long startTime = -1; private long stopTime = -1; public StopWatch() {"
      },
      {
        "txt": "super(); } public void start() { if(this.runningState == STATE_STOPPED) { throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \"); } if(this.runningState != STATE_UNSTARTED) { throw new IllegalStateException(\"Stopwatch already started. \"); } stopTime = -1;"
      },
      {
        "txt": "this.runningState = STATE_RUNNING; } public void stop() { if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(\"Stopwatch is not running. \"); } <extra_id_0> this.runningState = STATE_STOPPED; } public void reset() { this.runningState = STATE_UNSTARTED; this.splitState = STATE_UNSPLIT; startTime = -1;"
      },
      {
        "txt": "this.splitState = STATE_UNSPLIT; startTime = -1; stopTime = -1; } public void split() { if(this.runningState != STATE_RUNNING) { throw new IllegalStateException(\"Stopwatch is not running. \"); } stopTime = System.currentTimeMillis(); this.splitState = STATE_SPLIT;"
      },
      {
        "txt": "} public void unsplit() { if(this.splitState != STATE_SPLIT) { throw new IllegalStateException(\"Stopwatch has not been split. \"); } stopTime = -1; this.splitState = STATE_UNSPLIT; } public void suspend() { if(this.runningState != STATE_RUNNING) {"
      },
      {
        "txt": "throw new IllegalStateException(\"Stopwatch must be running to suspend. \"); } stopTime = System.currentTimeMillis(); this.runningState = STATE_SUSPENDED; } public void resume() { if(this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(\"Stopwatch must be suspended to resume. \"); } startTime += (System.currentTimeMillis() - stopTime);"
      },
      {
        "txt": "stopTime = -1; this.runningState = STATE_RUNNING; } public long getTime() { if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) { return this.stopTime - this.startTime; } else if(this.runningState == STATE_UNSTARTED) { return 0; } else"
      },
      {
        "txt": "if(this.runningState == STATE_RUNNING) { return System.currentTimeMillis() - this.startTime; } throw new RuntimeException(\"Illegal running state has occured. \"); } public long getSplitTime() { if(this.splitState != STATE_SPLIT) { throw new IllegalStateException(\"Stopwatch must be split to get the split time. \"); } return this.stopTime - this.startTime;"
      },
      {
        "txt": "} public String toString() { return DurationFormatUtils.formatDurationHMS(getTime()); } public String toSplitString() { return DurationFormatUtils.formatDurationHMS(getSplitTime()); }"
      }
    ]
  },
  {
    "id": 2422,
    "file_path": "src/java/org/apache/commons/lang/time/StopWatch.java",
    "start-bug-line": 119,
    "end-bug-line": 119,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; public class StopWatch { private static final int STATE_UNSTARTED = 0; private static final int STATE_RUNNING = 1;"
      },
      {
        "txt": "private static final int STATE_STOPPED = 2; private static final int STATE_SUSPENDED = 3; private static final int STATE_UNSPLIT = 10; private static final int STATE_SPLIT = 11; private int runningState = STATE_UNSTARTED; private int splitState = STATE_UNSPLIT; private long startTime = -1; private long stopTime = -1; public StopWatch() { super();"
      },
      {
        "txt": "} public void start() { if(this.runningState == STATE_STOPPED) { throw new IllegalStateException(\"Stopwatch must be reset before being restarted. \"); } if(this.runningState != STATE_UNSTARTED) { throw new IllegalStateException(\"Stopwatch already started. \"); } stopTime = -1; startTime = System.currentTimeMillis();"
      },
      {
        "txt": "} public void stop() { if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(\"Stopwatch is not running. \"); } stopTime = System.currentTimeMillis(); <extra_id_0> } public void reset() { this.runningState = STATE_UNSTARTED; this.splitState = STATE_UNSPLIT; startTime = -1; stopTime = -1;"
      },
      {
        "txt": "startTime = -1; stopTime = -1; } public void split() { if(this.runningState != STATE_RUNNING) { throw new IllegalStateException(\"Stopwatch is not running. \"); } stopTime = System.currentTimeMillis(); this.splitState = STATE_SPLIT; }"
      },
      {
        "txt": "public void unsplit() { if(this.splitState != STATE_SPLIT) { throw new IllegalStateException(\"Stopwatch has not been split. \"); } stopTime = -1; this.splitState = STATE_UNSPLIT; } public void suspend() { if(this.runningState != STATE_RUNNING) { throw new IllegalStateException(\"Stopwatch must be running to suspend. \");"
      },
      {
        "txt": "} stopTime = System.currentTimeMillis(); this.runningState = STATE_SUSPENDED; } public void resume() { if(this.runningState != STATE_SUSPENDED) { throw new IllegalStateException(\"Stopwatch must be suspended to resume. \"); } startTime += (System.currentTimeMillis() - stopTime); stopTime = -1;"
      },
      {
        "txt": "this.runningState = STATE_RUNNING; } public long getTime() { if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) { return this.stopTime - this.startTime; } else if(this.runningState == STATE_UNSTARTED) { return 0; } else if(this.runningState == STATE_RUNNING) {"
      },
      {
        "txt": "return System.currentTimeMillis() - this.startTime; } throw new RuntimeException(\"Illegal running state has occured. \"); } public long getSplitTime() { if(this.splitState != STATE_SPLIT) { throw new IllegalStateException(\"Stopwatch must be split to get the split time. \"); } return this.stopTime - this.startTime; }"
      },
      {
        "txt": "public String toString() { return DurationFormatUtils.formatDurationHMS(getTime()); } public String toSplitString() { return DurationFormatUtils.formatDurationHMS(getSplitTime()); }"
      }
    ]
  }
]
[
  {
    "id": 2420,
    "file_path": "src/java/org/apache/commons/lang/LocaleUtils.java",
    "start-bug-line": 114,
    "end-bug-line": 114,
    "bug": "",
    "fix": "if (ch3 == '_') { return new Locale(str.substring(0, 2), \"\", str.substring(4)); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang; import java.util.ArrayList; import java.util.Arrays; import java.util.Collections; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.HashSet; import java.util.List; import java.util.Locale; import java.util.Map; import java.util.Set; public class LocaleUtils { private static final List cAvailableLocaleList; private static Set cAvailableLocaleSet; private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap()); private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());"
      },
      {
        "txt": "static { List list = Arrays.asList(Locale.getAvailableLocales()); cAvailableLocaleList = Collections.unmodifiableList(list); } public LocaleUtils() { super(); } public static Locale toLocale(String str) { if (str == null) { return null;"
      },
      {
        "txt": "} int len = str.length(); if (len != 2 && len != 5 && len < 7) { throw new IllegalArgumentException(\"Invalid locale format: \" + str); } char ch0 = str.charAt(0); char ch1 = str.charAt(1); if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') { throw new IllegalArgumentException(\"Invalid locale format: \" + str); }"
      },
      {
        "txt": "return new Locale(str, \"\"); } else { if (str.charAt(2) != '_') { throw new IllegalArgumentException(\"Invalid locale format: \" + str); } char ch3 = str.charAt(3); <extra_id_0> if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') { throw new IllegalArgumentException(\"Invalid locale format: \" + str); } if (len == 5) { return new Locale(str.substring(0, 2), str.substring(3, 5)); } else {"
      },
      {
        "txt": "return new Locale(str.substring(0, 2), str.substring(3, 5)); } else { if (str.charAt(5) != '_') { throw new IllegalArgumentException(\"Invalid locale format: \" + str); } return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6)); } } } public static List localeLookupList(Locale locale) {"
      },
      {
        "txt": "return localeLookupList(locale, locale); } public static List localeLookupList(Locale locale, Locale defaultLocale) { List list = new ArrayList(4); if (locale != null) { list.add(locale); if (locale.getVariant().length() > 0) { list.add(new Locale(locale.getLanguage(), locale.getCountry())); } if (locale.getCountry().length() > 0) {"
      },
      {
        "txt": "list.add(new Locale(locale.getLanguage(), \"\")); } if (list.contains(defaultLocale) == false) { list.add(defaultLocale); } } return Collections.unmodifiableList(list); } public static List availableLocaleList() { return cAvailableLocaleList;"
      },
      {
        "txt": "} public static Set availableLocaleSet() { Set set = cAvailableLocaleSet; if (set == null) { set = new HashSet(availableLocaleList()); set = Collections.unmodifiableSet(set); cAvailableLocaleSet = set; } return set; }"
      },
      {
        "txt": "public static boolean isAvailableLocale(Locale locale) { return availableLocaleList().contains(locale); } public static List languagesByCountry(String countryCode) { List langs = (List) cLanguagesByCountry.get(countryCode); //syncd if (langs == null) { if (countryCode != null) { langs = new ArrayList(); List locales = availableLocaleList(); for (int i = 0; i < locales.size(); i++) {"
      },
      {
        "txt": "Locale locale = (Locale) locales.get(i); if (countryCode.equals(locale.getCountry()) && locale.getVariant().length() == 0) { langs.add(locale); } } langs = Collections.unmodifiableList(langs); } else { langs = Collections.EMPTY_LIST; }"
      },
      {
        "txt": "cLanguagesByCountry.put(countryCode, langs); //syncd } return langs; } public static List countriesByLanguage(String languageCode) { List countries = (List) cCountriesByLanguage.get(languageCode); //syncd if (countries == null) { if (languageCode != null) { countries = new ArrayList(); List locales = availableLocaleList();"
      },
      {
        "txt": "for (int i = 0; i < locales.size(); i++) { Locale locale = (Locale) locales.get(i); if (languageCode.equals(locale.getLanguage()) && locale.getCountry().length() != 0 && locale.getVariant().length() == 0) { countries.add(locale); } } countries = Collections.unmodifiableList(countries); } else {"
      },
      {
        "txt": "countries = Collections.EMPTY_LIST; } cCountriesByLanguage.put(languageCode, countries); //syncd } return countries; }"
      }
    ]
  }
]
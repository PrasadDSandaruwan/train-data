[
  {
    "id": 2415,
    "file_path": "src/java/org/apache/commons/lang/StringEscapeUtils.java",
    "start-bug-line": 236,
    "end-bug-line": 236,
    "bug": "",
    "fix": "case '/': out.write('\\\\'); out.write('/'); break;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import org.apache.commons.lang.exception.NestableRuntimeException; public class StringEscapeUtils { public StringEscapeUtils() { super(); } public static String escapeJava(String str) {"
      },
      {
        "txt": "return escapeJavaStyleString(str, false); } public static void escapeJava(Writer out, String str) throws IOException { escapeJavaStyleString(out, str, false); } public static String escapeJavaScript(String str) { return escapeJavaStyleString(str, true); } public static void escapeJavaScript(Writer out, String str) throws IOException { escapeJavaStyleString(out, str, true);"
      },
      {
        "txt": "} private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) { if (str == null) { return null; } try { StringWriter writer = new StringWriter(str.length() * 2); escapeJavaStyleString(writer, str, escapeSingleQuotes); return writer.toString(); } catch (IOException ioe) {"
      },
      {
        "txt": "ioe.printStackTrace(); return null; } } private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (str == null) { return;"
      },
      {
        "txt": "} int sz; sz = str.length(); for (int i = 0; i < sz; i++) { char ch = str.charAt(i); if (ch > 0xfff) { out.write(\"\\\\u\" + hex(ch)); } else if (ch > 0xff) { out.write(\"\\\\u0\" + hex(ch)); } else if (ch > 0x7f) {"
      },
      {
        "txt": "out.write(\"\\\\u00\" + hex(ch)); } else if (ch < 32) { switch (ch) { case '\\b': out.write('\\\\'); out.write('b'); break; case '\\n': out.write('\\\\'); out.write('n');"
      },
      {
        "txt": "break; case '\\t': out.write('\\\\'); out.write('t'); break; case '\\f': out.write('\\\\'); out.write('f'); break; case '\\r':"
      },
      {
        "txt": "out.write('\\\\'); out.write('r'); break; default : if (ch > 0xf) { out.write(\"\\\\u00\" + hex(ch)); } else { out.write(\"\\\\u000\" + hex(ch)); } break;"
      },
      {
        "txt": "} } else { switch (ch) { case '\\'': if (escapeSingleQuote) { out.write('\\\\'); } out.write('\\''); break; case '\"':"
      },
      {
        "txt": "out.write('\"'); break; case '\\\\': out.write('\\\\'); out.write('\\\\'); break; <extra_id_0> out.write(ch); break; } } } }"
      },
      {
        "txt": "} } private static String hex(char ch) { return Integer.toHexString(ch).toUpperCase(); } public static String unescapeJava(String str) { if (str == null) { return null; } try {"
      },
      {
        "txt": "StringWriter writer = new StringWriter(str.length()); unescapeJava(writer, str); return writer.toString(); } catch (IOException ioe) { ioe.printStackTrace(); return null; } } public static void unescapeJava(Writer out, String str) throws IOException { if (out == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Writer must not be null\"); } if (str == null) { return; } int sz = str.length(); StringBuffer unicode = new StringBuffer(4); boolean hadSlash = false; boolean inUnicode = false; for (int i = 0; i < sz; i++) {"
      },
      {
        "txt": "char ch = str.charAt(i); if (inUnicode) { unicode.append(ch); if (unicode.length() == 4) { try { int value = Integer.parseInt(unicode.toString(), 16); out.write((char) value); unicode.setLength(0); inUnicode = false; hadSlash = false;"
      },
      {
        "txt": "} catch (NumberFormatException nfe) { throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe); } } continue; } if (hadSlash) { hadSlash = false; switch (ch) { case '\\\\':"
      },
      {
        "txt": "out.write('\\\\'); break; case '\\'': out.write('\\''); break; case '\\\"': out.write('\"'); break; case 'r': out.write('\\r');"
      },
      {
        "txt": "break; case 'f': out.write('\\f'); break; case 't': out.write('\\t'); break; case 'n': out.write('\\n'); break;"
      },
      {
        "txt": "case 'b': out.write('\\b'); break; case 'u': { inUnicode = true; break; } default : out.write(ch);"
      },
      {
        "txt": "break; } continue; } else if (ch == '\\\\') { hadSlash = true; continue; } out.write(ch); } if (hadSlash) {"
      },
      {
        "txt": "out.write('\\\\'); } } public static String unescapeJavaScript(String str) { return unescapeJava(str); } public static void unescapeJavaScript(Writer out, String str) throws IOException { unescapeJava(out, str); } public static String escapeHtml(String str) {"
      },
      {
        "txt": "if (str == null) { return null; } try { StringWriter writer = new StringWriter ((int)(str.length() * 1.5)); escapeHtml(writer, str); return writer.toString(); } catch (IOException e) { e.printStackTrace(); return null;"
      },
      {
        "txt": "} } public static void escapeHtml(Writer writer, String string) throws IOException { if (writer == null ) { throw new IllegalArgumentException (\"The Writer must not be null.\"); } if (string == null) { return; } Entities.HTML40.escape(writer, string);"
      },
      {
        "txt": "} public static String unescapeHtml(String str) { if (str == null) { return null; } try { StringWriter writer = new StringWriter ((int)(str.length() * 1.5)); unescapeHtml(writer, str); return writer.toString(); } catch (IOException e) {"
      },
      {
        "txt": "e.printStackTrace(); return null; } } public static void unescapeHtml(Writer writer, String string) throws IOException { if (writer == null ) { throw new IllegalArgumentException (\"The Writer must not be null.\"); } if (string == null) { return;"
      },
      {
        "txt": "} Entities.HTML40.unescape(writer, string); } public static void escapeXml(Writer writer, String str) throws IOException { if (writer == null ) { throw new IllegalArgumentException (\"The Writer must not be null.\"); } if (str == null) { return; }"
      },
      {
        "txt": "Entities.XML.escape(writer, str); } public static String escapeXml(String str) { if (str == null) { return null; } return Entities.XML.escape(str); } public static void unescapeXml(Writer writer, String str) throws IOException { if (writer == null ) {"
      },
      {
        "txt": "throw new IllegalArgumentException (\"The Writer must not be null.\"); } if (str == null) { return; } Entities.XML.unescape(writer, str); } public static String unescapeXml(String str) { if (str == null) { return null;"
      },
      {
        "txt": "} return Entities.XML.unescape(str); } public static String escapeSql(String str) { if (str == null) { return null; } return StringUtils.replace(str, \"'\", \"''\"); }"
      }
    ]
  }
]
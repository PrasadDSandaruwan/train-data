[
  {
    "id": 2322,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 40,
    "end-bug-line": 40,
    "bug": "if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {",
    "fix": "if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { int seqEnd = input.length(); <extra_id_0> int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true;"
      },
      {
        "txt": "start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try {"
      },
      {
        "txt": "if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); return 0; } if(entityValue > 0xFFFF) {"
      },
      {
        "txt": "char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else { out.write(entityValue); } return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; }"
      }
    ]
  },
  {
    "id": 2323,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 50,
    "end-bug-line": 50,
    "bug": "",
    "fix": "if(start == seqEnd) { return 0; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { int seqEnd = input.length();"
      },
      {
        "txt": "int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; <extra_id_0> int end = start; while(input.charAt(end) != ';') { end++; } int entityValue;"
      },
      {
        "txt": "} int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");"
      },
      {
        "txt": "return 0; } if(entityValue > 0xFFFF) { char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else { out.write(entityValue); } return 2 + (end - start) + (isHex ? 1 : 0) + 1;"
      },
      {
        "txt": "} return 0; }"
      }
    ]
  },
  {
    "id": 2324,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 54,
    "end-bug-line": 54,
    "bug": "while(input.charAt(end) != ';')",
    "fix": "while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') || (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') || (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { int seqEnd = input.length(); if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') { int start = index + 2;"
      },
      {
        "txt": "char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; <extra_id_0> { end++; } int entityValue; try { if(isHex) {"
      },
      {
        "txt": "try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); return 0; }"
      },
      {
        "txt": "if(entityValue > 0xFFFF) { char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else { out.write(entityValue); } return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0;"
      }
    ]
  },
  {
    "id": 2325,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 79,
    "end-bug-line": 79,
    "bug": "",
    "fix": "boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { int seqEnd = input.length(); if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start);"
      },
      {
        "txt": "if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue;"
      },
      {
        "txt": "try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); return 0; }"
      },
      {
        "txt": "char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else { out.write(entityValue); } <extra_id_0> return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } }"
      }
    ]
  },
  {
    "id": 2326,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 80,
    "end-bug-line": 80,
    "bug": "return 2 + (end - start) + (isHex ? 1 : 0) + 1;",
    "fix": "return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { int seqEnd = input.length(); if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start);"
      },
      {
        "txt": "if(firstChar == 'x' || firstChar == 'X') { start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue;"
      },
      {
        "txt": "try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16); } else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\"); return 0; }"
      },
      {
        "txt": "char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else { out.write(entityValue); } <extra_id_0> } return 0; } }"
      }
    ]
  }
]
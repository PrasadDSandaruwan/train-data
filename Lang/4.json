[
  {
    "id": 2285,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
    "start-bug-line": 31,
    "end-bug-line": 31,
    "bug": "private final HashMap<CharSequence, CharSequence> lookupMap;",
    "fix": "private final HashMap<String, CharSequence> lookupMap;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.Writer; import java.util.HashMap; public class LookupTranslator extends CharSequenceTranslator { <extra_id_0> private final int shortest; private final int longest; public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0;"
      },
      {
        "txt": "int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) {"
      },
      {
        "txt": "_longest = sz; } } } shortest = _shortest; longest = _longest; } @Override public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest;"
      },
      {
        "txt": "if (index + longest > input.length()) { max = input.length() - index; } for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; }"
      },
      {
        "txt": "} return 0; }"
      }
    ]
  },
  {
    "id": 2286,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
    "start-bug-line": 46,
    "end-bug-line": 46,
    "bug": "lookupMap = new HashMap<CharSequence, CharSequence>();",
    "fix": "lookupMap = new HashMap<String, CharSequence>();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException;"
      },
      {
        "txt": "import java.util.HashMap; public class LookupTranslator extends CharSequenceTranslator { private final HashMap<CharSequence, CharSequence> lookupMap; private final int shortest; private final int longest; public LookupTranslator(final CharSequence[]... lookup) { <extra_id_0> int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length();"
      },
      {
        "txt": "this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz; } } }"
      },
      {
        "txt": "shortest = _shortest; longest = _longest; } @Override public int translate(final CharSequence input, final int index, final Writer out) throws IOException { int max = longest; if (index + longest > input.length()) { max = input.length() - index; } for (int i = max; i >= shortest; i--) {"
      },
      {
        "txt": "final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i; } } return 0; }"
      }
    ]
  },
  {
    "id": 2287,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
    "start-bug-line": 51,
    "end-bug-line": 51,
    "bug": "this.lookupMap.put(seq[0], seq[1]);",
    "fix": "this.lookupMap.put(seq[0].toString(), seq[1]);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.Writer; import java.util.HashMap; public class LookupTranslator extends CharSequenceTranslator { private final HashMap<CharSequence, CharSequence> lookupMap; private final int shortest;"
      },
      {
        "txt": "public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { <extra_id_0> final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz; } if (sz > _longest) { _longest = sz;"
      },
      {
        "txt": "if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } @Override public int translate(final CharSequence input, final int index, final Writer out) throws IOException {"
      },
      {
        "txt": "int max = longest; if (index + longest > input.length()) { max = input.length() - index; } for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); final CharSequence result = lookupMap.get(subSeq); if (result != null) { out.write(result.toString()); return i;"
      },
      {
        "txt": "} } return 0; }"
      }
    ]
  },
  {
    "id": 2288,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/LookupTranslator.java",
    "start-bug-line": 77,
    "end-bug-line": 77,
    "bug": "final CharSequence result = lookupMap.get(subSeq);",
    "fix": "final CharSequence result = lookupMap.get(subSeq.toString());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.Writer; import java.util.HashMap; public class LookupTranslator extends CharSequenceTranslator { private final HashMap<CharSequence, CharSequence> lookupMap; private final int shortest; private final int longest;"
      },
      {
        "txt": "public LookupTranslator(final CharSequence[]... lookup) { lookupMap = new HashMap<CharSequence, CharSequence>(); int _shortest = Integer.MAX_VALUE; int _longest = 0; if (lookup != null) { for (final CharSequence[] seq : lookup) { this.lookupMap.put(seq[0], seq[1]); final int sz = seq[0].length(); if (sz < _shortest) { _shortest = sz;"
      },
      {
        "txt": "} if (sz > _longest) { _longest = sz; } } } shortest = _shortest; longest = _longest; } @Override"
      },
      {
        "txt": "int max = longest; if (index + longest > input.length()) { max = input.length() - index; } for (int i = max; i >= shortest; i--) { final CharSequence subSeq = input.subSequence(index, index + i); <extra_id_0> if (result != null) { out.write(result.toString()); return i; } } return 0;"
      },
      {
        "txt": "} return 0; }"
      }
    ]
  }
]
[
  {
    "id": 2314,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 83,
    "end-bug-line": 83,
    "bug": "int len = Character.codePointCount(input, 0, input.length());",
    "fix": "int len = input.length();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException; public final String translate(CharSequence input) { if (input == null) { return null;"
      },
      {
        "txt": "} try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe); } } public final void translate(CharSequence input, Writer out) throws IOException {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; <extra_id_0> while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); }"
      },
      {
        "txt": "out.write(c); } else { for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { pos++; } }"
      },
      {
        "txt": "pos--; } pos++; } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray);"
      },
      {
        "txt": "} public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  },
  {
    "id": 2315,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 89,
    "end-bug-line": 89,
    "bug": "",
    "fix": "pos+= c.length; continue;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator {"
      },
      {
        "txt": "public abstract int translate(CharSequence input, int index, Writer out) throws IOException; public final String translate(CharSequence input) { if (input == null) { return null; } try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) {"
      },
      {
        "txt": "throw new RuntimeException(ioe); } } public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; }"
      },
      {
        "txt": "int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); <extra_id_0> else { for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { pos++;"
      },
      {
        "txt": "} else { pos++; } } pos--; } pos++; } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) {"
      },
      {
        "txt": "CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  },
  {
    "id": 2316,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 90,
    "end-bug-line": 90,
    "bug": "else {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException;"
      },
      {
        "txt": "public final String translate(CharSequence input) { if (input == null) { return null; } try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe);"
      },
      {
        "txt": "} } public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0;"
      },
      {
        "txt": "while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } <extra_id_0> for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); } else { pos++; }"
      },
      {
        "txt": "pos++; } } pos--; } pos++; } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];"
      },
      {
        "txt": "newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  },
  {
    "id": 2317,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 94,
    "end-bug-line": 94,
    "bug": "if (pos < len - 2) {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException; public final String translate(CharSequence input) { if (input == null) {"
      },
      {
        "txt": "return null; } try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe); } }"
      },
      {
        "txt": "public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = Character.codePointCount(input, 0, input.length()); while (pos < len) {"
      },
      {
        "txt": "if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } else { for (int pt = 0; pt < consumed; pt++) { <extra_id_0> pos += Character.charCount(Character.codePointAt(input, pos)); } else { pos++; } } pos--;"
      },
      {
        "txt": "} pos--; } pos++; } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length);"
      },
      {
        "txt": "return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  },
  {
    "id": 2318,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 96,
    "end-bug-line": 100,
    "bug": "} else { pos++; } } pos--;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException; public final String translate(CharSequence input) { if (input == null) { return null; }"
      },
      {
        "txt": "try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe); } } public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0; int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) {"
      },
      {
        "txt": "out.write(c); } else { for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) { pos += Character.charCount(Character.codePointAt(input, pos)); <extra_id_0> } pos++; } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];"
      },
      {
        "txt": "public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  },
  {
    "id": 2319,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/CharSequenceTranslator.java",
    "start-bug-line": 102,
    "end-bug-line": 102,
    "bug": "pos++;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException; import java.io.StringWriter; import java.io.Writer; import java.util.Locale; public abstract class CharSequenceTranslator { public abstract int translate(CharSequence input, int index, Writer out) throws IOException;"
      },
      {
        "txt": "public final String translate(CharSequence input) { if (input == null) { return null; } try { StringWriter writer = new StringWriter(input.length() * 2); translate(input, writer); return writer.toString(); } catch (IOException ioe) { throw new RuntimeException(ioe);"
      },
      {
        "txt": "} } public final void translate(CharSequence input, Writer out) throws IOException { if (out == null) { throw new IllegalArgumentException(\"The Writer must not be null\"); } if (input == null) { return; } int pos = 0;"
      },
      {
        "txt": "int len = Character.codePointCount(input, 0, input.length()); while (pos < len) { int consumed = translate(input, pos, out); if (consumed == 0) { char[] c = Character.toChars(Character.codePointAt(input, pos)); out.write(c); } else { for (int pt = 0; pt < consumed; pt++) { if (pos < len - 2) {"
      },
      {
        "txt": "} else { pos++; } } pos--; } <extra_id_0> } } public final CharSequenceTranslator with(CharSequenceTranslator... translators) { CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1]; newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length);"
      },
      {
        "txt": "newArray[0] = this; System.arraycopy(translators, 0, newArray, 1, translators.length); return new AggregateTranslator(newArray); } public static String hex(int codepoint) { return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH); }"
      }
    ]
  }
]
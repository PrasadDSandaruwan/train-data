[
  {
    "id": 2366,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
    "start-bug-line": 104,
    "end-bug-line": 109,
    "bug": "private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() { @Override protected Set<IDKey> initialValue() { return new HashSet<IDKey>(); } };",
    "fix": "private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.lang.reflect.AccessibleObject;"
      },
      {
        "txt": "import java.lang.reflect.Modifier; import java.util.Collection; import java.util.HashSet; import java.util.Set; import org.apache.commons.lang3.ArrayUtils; public class HashCodeBuilder { <extra_id_0> static Set<IDKey> getRegistry() { return REGISTRY.get(); } static boolean isRegistered(Object value) { return getRegistry().contains(new IDKey(value)); }"
      },
      {
        "txt": "return getRegistry().contains(new IDKey(value)); } private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients, String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields();"
      },
      {
        "txt": "AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) {"
      },
      {
        "txt": "throw new InternalError(\"Unexpected IllegalAccessException\"); } } } } finally { unregister(object); } } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null);"
      },
      {
        "txt": "} public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, null); } public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, reflectUpToClass, null);"
      },
      {
        "txt": "} public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException(\"The object to build a hash code for must not be null\"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {"
      },
      {
        "txt": "clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } public static int reflectionHashCode(Object object) { return reflectionHashCode(17, 37, object, false, null, null); } public static int reflectionHashCode(Object object, boolean testTransients) { return reflectionHashCode(17, 37, object, testTransients, null, null);"
      },
      {
        "txt": "} public static int reflectionHashCode(Object object, Collection<String> excludeFields) { return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields)); } public static int reflectionHashCode(Object object, String[] excludeFields) { return reflectionHashCode(17, 37, object, false, null, excludeFields); } static void register(Object value) { getRegistry().add(new IDKey(value)); }"
      },
      {
        "txt": "static void unregister(Object value) { getRegistry().remove(new IDKey(value)); } private final int iConstant; private int iTotal = 0; public HashCodeBuilder() { iConstant = 37; iTotal = 17; } public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {"
      },
      {
        "txt": "if (initialNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\"); } if (initialNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\"); } if (multiplierNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\"); } if (multiplierNonZeroOddNumber % 2 == 0) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\"); } iConstant = multiplierNonZeroOddNumber; iTotal = initialNonZeroOddNumber; } public HashCodeBuilder append(boolean value) { iTotal = iTotal * iConstant + (value ? 0 : 1); return this; } public HashCodeBuilder append(boolean[] array) {"
      },
      {
        "txt": "if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(byte value) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(byte[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); }"
      },
      {
        "txt": "} return this; } public HashCodeBuilder append(char value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(char[] array) { if (array == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(double value) { return append(Double.doubleToLongBits(value)); }"
      },
      {
        "txt": "public HashCodeBuilder append(double[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; }"
      },
      {
        "txt": "public HashCodeBuilder append(float value) { iTotal = iTotal * iConstant + Float.floatToIntBits(value); return this; } public HashCodeBuilder append(float[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]);"
      },
      {
        "txt": "} } return this; } public HashCodeBuilder append(int value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(int[] array) { if (array == null) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(long value) { iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32)));"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(long[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } }"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(Object object) { if (object == null) { iTotal = iTotal * iConstant; } else { if(object.getClass().isArray()) { if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) {"
      },
      {
        "txt": "append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object); } else if (object instanceof byte[]) { append((byte[]) object); } else if (object instanceof double[]) { append((double[]) object); } else if (object instanceof float[]) {"
      },
      {
        "txt": "append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else { append((Object[]) object); } } else { iTotal = iTotal * iConstant + object.hashCode(); } }"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(Object[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } }"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(short value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(short[] array) { if (array == null) { iTotal = iTotal * iConstant; } else {"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder appendSuper(int superHashCode) { iTotal = iTotal * iConstant + superHashCode; return this; }"
      },
      {
        "txt": "public int toHashCode() { return iTotal; } @Override public int hashCode() { return toHashCode(); }"
      }
    ]
  },
  {
    "id": 2367,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
    "start-bug-line": 152,
    "end-bug-line": 152,
    "bug": "return getRegistry().contains(new IDKey(value));",
    "fix": "Set<IDKey> registry = getRegistry(); return registry != null && registry.contains(new IDKey(value));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.lang.reflect.AccessibleObject;"
      },
      {
        "txt": "import java.lang.reflect.Field; import java.lang.reflect.Modifier; import java.util.Collection; import java.util.HashSet; import java.util.Set; import org.apache.commons.lang3.ArrayUtils; public class HashCodeBuilder { private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() { @Override protected Set<IDKey> initialValue() {"
      },
      {
        "txt": "} }; static Set<IDKey> getRegistry() { return REGISTRY.get(); } static boolean isRegistered(Object value) { <extra_id_0> } private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients, String[] excludeFields) { if (isRegistered(object)) { return; }"
      },
      {
        "txt": "return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers()))"
      },
      {
        "txt": "&& (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) { throw new InternalError(\"Unexpected IllegalAccessException\"); } } } } finally {"
      },
      {
        "txt": "unregister(object); } } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null); } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, null);"
      },
      {
        "txt": "} public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, reflectUpToClass, null); } public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");"
      },
      {
        "txt": "} HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); }"
      },
      {
        "txt": "public static int reflectionHashCode(Object object) { return reflectionHashCode(17, 37, object, false, null, null); } public static int reflectionHashCode(Object object, boolean testTransients) { return reflectionHashCode(17, 37, object, testTransients, null, null); } public static int reflectionHashCode(Object object, Collection<String> excludeFields) { return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields)); } public static int reflectionHashCode(Object object, String[] excludeFields) {"
      },
      {
        "txt": "return reflectionHashCode(17, 37, object, false, null, excludeFields); } static void register(Object value) { getRegistry().add(new IDKey(value)); } static void unregister(Object value) { getRegistry().remove(new IDKey(value)); } private final int iConstant; private int iTotal = 0;"
      },
      {
        "txt": "public HashCodeBuilder() { iConstant = 37; iTotal = 17; } public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) { if (initialNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\"); } if (initialNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\");"
      },
      {
        "txt": "} if (multiplierNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\"); } if (multiplierNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\"); } iConstant = multiplierNonZeroOddNumber; iTotal = initialNonZeroOddNumber; }"
      },
      {
        "txt": "public HashCodeBuilder append(boolean value) { iTotal = iTotal * iConstant + (value ? 0 : 1); return this; } public HashCodeBuilder append(boolean[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]);"
      },
      {
        "txt": "} } return this; } public HashCodeBuilder append(byte value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(byte[] array) { if (array == null) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(char value) { iTotal = iTotal * iConstant + value;"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(char[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } }"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(double value) { return append(Double.doubleToLongBits(value)); } public HashCodeBuilder append(double[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) {"
      },
      {
        "txt": "append(array[i]); } } return this; } public HashCodeBuilder append(float value) { iTotal = iTotal * iConstant + Float.floatToIntBits(value); return this; } public HashCodeBuilder append(float[] array) {"
      },
      {
        "txt": "if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(int value) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(int[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); }"
      },
      {
        "txt": "} return this; } public HashCodeBuilder append(long value) { iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32))); return this; } public HashCodeBuilder append(long[] array) { if (array == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(Object object) { if (object == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { if(object.getClass().isArray()) { if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object);"
      },
      {
        "txt": "} else if (object instanceof byte[]) { append((byte[]) object); } else if (object instanceof double[]) { append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else { append((Object[]) object);"
      },
      {
        "txt": "} } else { iTotal = iTotal * iConstant + object.hashCode(); } } return this; } public HashCodeBuilder append(Object[] array) { if (array == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(short value) { iTotal = iTotal * iConstant + value; return this;"
      },
      {
        "txt": "} public HashCodeBuilder append(short[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this;"
      },
      {
        "txt": "} public HashCodeBuilder appendSuper(int superHashCode) { iTotal = iTotal * iConstant + superHashCode; return this; } public int toHashCode() { return iTotal; } @Override public int hashCode() {"
      },
      {
        "txt": "return toHashCode(); }"
      }
    ]
  },
  {
    "id": 2368,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
    "start-bug-line": 522,
    "end-bug-line": 522,
    "bug": "",
    "fix": "synchronized (HashCodeBuilder.class) { if (getRegistry() == null) { REGISTRY.set(new HashSet<IDKey>()); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.lang.reflect.AccessibleObject; import java.lang.reflect.Field; import java.lang.reflect.Modifier; import java.util.Collection; import java.util.HashSet; import java.util.Set; import org.apache.commons.lang3.ArrayUtils; public class HashCodeBuilder { private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {"
      },
      {
        "txt": "@Override protected Set<IDKey> initialValue() { return new HashSet<IDKey>(); } }; static Set<IDKey> getRegistry() { return REGISTRY.get(); } static boolean isRegistered(Object value) { return getRegistry().contains(new IDKey(value));"
      },
      {
        "txt": "} private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients, String[] excludeFields) { if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true);"
      },
      {
        "txt": "for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) { throw new InternalError(\"Unexpected IllegalAccessException\");"
      },
      {
        "txt": "} } } } finally { unregister(object); } } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null); }"
      },
      {
        "txt": "public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null, null); } public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, reflectUpToClass, null); }"
      },
      {
        "txt": "public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) { throw new IllegalArgumentException(\"The object to build a hash code for must not be null\"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass();"
      },
      {
        "txt": "reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode(); } public static int reflectionHashCode(Object object) { return reflectionHashCode(17, 37, object, false, null, null); } public static int reflectionHashCode(Object object, boolean testTransients) { return reflectionHashCode(17, 37, object, testTransients, null, null); }"
      },
      {
        "txt": "return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields)); } public static int reflectionHashCode(Object object, String[] excludeFields) { return reflectionHashCode(17, 37, object, false, null, excludeFields); } static void register(Object value) { <extra_id_0> } static void unregister(Object value) { getRegistry().remove(new IDKey(value)); } private final int iConstant; private int iTotal = 0;"
      },
      {
        "txt": "private final int iConstant; private int iTotal = 0; public HashCodeBuilder() { iConstant = 37; iTotal = 17; } public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) { if (initialNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\"); }"
      },
      {
        "txt": "if (initialNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\"); } if (multiplierNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\"); } if (multiplierNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\"); } iConstant = multiplierNonZeroOddNumber;"
      },
      {
        "txt": "iTotal = initialNonZeroOddNumber; } public HashCodeBuilder append(boolean value) { iTotal = iTotal * iConstant + (value ? 0 : 1); return this; } public HashCodeBuilder append(boolean[] array) { if (array == null) { iTotal = iTotal * iConstant; } else {"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(byte value) { iTotal = iTotal * iConstant + value; return this; }"
      },
      {
        "txt": "public HashCodeBuilder append(byte[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; }"
      },
      {
        "txt": "public HashCodeBuilder append(char value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(char[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]);"
      },
      {
        "txt": "} } return this; } public HashCodeBuilder append(double value) { return append(Double.doubleToLongBits(value)); } public HashCodeBuilder append(double[] array) { if (array == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(float value) { iTotal = iTotal * iConstant + Float.floatToIntBits(value); return this;"
      },
      {
        "txt": "} public HashCodeBuilder append(float[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this;"
      },
      {
        "txt": "} public HashCodeBuilder append(int value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(int[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) {"
      },
      {
        "txt": "append(array[i]); } } return this; } public HashCodeBuilder append(long value) { iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32))); return this; } public HashCodeBuilder append(long[] array) {"
      },
      {
        "txt": "if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(Object object) {"
      },
      {
        "txt": "if (object == null) { iTotal = iTotal * iConstant; } else { if(object.getClass().isArray()) { if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object);"
      },
      {
        "txt": "} else if (object instanceof char[]) { append((char[]) object); } else if (object instanceof byte[]) { append((byte[]) object); } else if (object instanceof double[]) { append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object);"
      },
      {
        "txt": "} else { append((Object[]) object); } } else { iTotal = iTotal * iConstant + object.hashCode(); } } return this; } public HashCodeBuilder append(Object[] array) {"
      },
      {
        "txt": "if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(short value) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(short[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); }"
      },
      {
        "txt": "} return this; } public HashCodeBuilder appendSuper(int superHashCode) { iTotal = iTotal * iConstant + superHashCode; return this; } public int toHashCode() { return iTotal; }"
      },
      {
        "txt": "@Override public int hashCode() { return toHashCode(); }"
      }
    ]
  },
  {
    "id": 2369,
    "file_path": "src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java",
    "start-bug-line": 538,
    "end-bug-line": 538,
    "bug": "getRegistry().remove(new IDKey(value));",
    "fix": "Set<IDKey> s = getRegistry(); if (s != null) { s.remove(new IDKey(value)); synchronized (HashCodeBuilder.class) { if (s.isEmpty()) { REGISTRY.remove(); } } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.builder; import java.lang.reflect.AccessibleObject; import java.lang.reflect.Field;"
      },
      {
        "txt": "import java.lang.reflect.Modifier; import java.util.Collection; import java.util.HashSet; import java.util.Set; import org.apache.commons.lang3.ArrayUtils; public class HashCodeBuilder { private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() { @Override protected Set<IDKey> initialValue() { return new HashSet<IDKey>();"
      },
      {
        "txt": "} }; static Set<IDKey> getRegistry() { return REGISTRY.get(); } static boolean isRegistered(Object value) { return getRegistry().contains(new IDKey(value)); } private static void reflectionAppend(Object object, Class<?> clazz, HashCodeBuilder builder, boolean useTransients, String[] excludeFields) {"
      },
      {
        "txt": "if (isRegistered(object)) { return; } try { register(object); Field[] fields = clazz.getDeclaredFields(); AccessibleObject.setAccessible(fields, true); for (Field field : fields) { if (!ArrayUtils.contains(excludeFields, field.getName()) && (field.getName().indexOf('$') == -1)"
      },
      {
        "txt": "&& (useTransients || !Modifier.isTransient(field.getModifiers())) && (!Modifier.isStatic(field.getModifiers()))) { try { Object fieldValue = field.get(object); builder.append(fieldValue); } catch (IllegalAccessException e) { throw new InternalError(\"Unexpected IllegalAccessException\"); } } }"
      },
      {
        "txt": "} finally { unregister(object); } } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, false, null, null); } public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object, boolean testTransients) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, null,"
      },
      {
        "txt": "null); } public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass) { return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients, reflectUpToClass, null); } public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object, boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) { if (object == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The object to build a hash code for must not be null\"); } HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber); Class<?> clazz = object.getClass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); while (clazz.getSuperclass() != null && clazz != reflectUpToClass) { clazz = clazz.getSuperclass(); reflectionAppend(object, clazz, builder, testTransients, excludeFields); } return builder.toHashCode();"
      },
      {
        "txt": "} public static int reflectionHashCode(Object object) { return reflectionHashCode(17, 37, object, false, null, null); } public static int reflectionHashCode(Object object, boolean testTransients) { return reflectionHashCode(17, 37, object, testTransients, null, null); } public static int reflectionHashCode(Object object, Collection<String> excludeFields) { return reflectionHashCode(object, ReflectionToStringBuilder.toNoNullStringArray(excludeFields)); }"
      },
      {
        "txt": "return reflectionHashCode(17, 37, object, false, null, excludeFields); } static void register(Object value) { getRegistry().add(new IDKey(value)); } static void unregister(Object value) { <extra_id_0> } private final int iConstant; private int iTotal = 0; public HashCodeBuilder() { iConstant = 37; iTotal = 17;"
      },
      {
        "txt": "iConstant = 37; iTotal = 17; } public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) { if (initialNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero initial value\"); } if (initialNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd initial value\"); }"
      },
      {
        "txt": "if (multiplierNonZeroOddNumber == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires a non zero multiplier\"); } if (multiplierNonZeroOddNumber % 2 == 0) { throw new IllegalArgumentException(\"HashCodeBuilder requires an odd multiplier\"); } iConstant = multiplierNonZeroOddNumber; iTotal = initialNonZeroOddNumber; } public HashCodeBuilder append(boolean value) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant + (value ? 0 : 1); return this; } public HashCodeBuilder append(boolean[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); }"
      },
      {
        "txt": "} return this; } public HashCodeBuilder append(byte value) { iTotal = iTotal * iConstant + value; return this; } public HashCodeBuilder append(byte[] array) { if (array == null) { iTotal = iTotal * iConstant;"
      },
      {
        "txt": "} else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(char value) { iTotal = iTotal * iConstant + value; return this;"
      },
      {
        "txt": "} public HashCodeBuilder append(char[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this;"
      },
      {
        "txt": "} public HashCodeBuilder append(double value) { return append(Double.doubleToLongBits(value)); } public HashCodeBuilder append(double[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]);"
      },
      {
        "txt": "} } return this; } public HashCodeBuilder append(float value) { iTotal = iTotal * iConstant + Float.floatToIntBits(value); return this; } public HashCodeBuilder append(float[] array) { if (array == null) {"
      },
      {
        "txt": "iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(int value) { iTotal = iTotal * iConstant + value;"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(int[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } }"
      },
      {
        "txt": "return this; } public HashCodeBuilder append(long value) { iTotal = iTotal * iConstant + ((int) (value ^ (value >> 32))); return this; } public HashCodeBuilder append(long[] array) { if (array == null) { iTotal = iTotal * iConstant; } else {"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(Object object) { if (object == null) { iTotal = iTotal * iConstant; } else {"
      },
      {
        "txt": "if(object.getClass().isArray()) { if (object instanceof long[]) { append((long[]) object); } else if (object instanceof int[]) { append((int[]) object); } else if (object instanceof short[]) { append((short[]) object); } else if (object instanceof char[]) { append((char[]) object); } else if (object instanceof byte[]) {"
      },
      {
        "txt": "append((byte[]) object); } else if (object instanceof double[]) { append((double[]) object); } else if (object instanceof float[]) { append((float[]) object); } else if (object instanceof boolean[]) { append((boolean[]) object); } else { append((Object[]) object); }"
      },
      {
        "txt": "} else { iTotal = iTotal * iConstant + object.hashCode(); } } return this; } public HashCodeBuilder append(Object[] array) { if (array == null) { iTotal = iTotal * iConstant; } else {"
      },
      {
        "txt": "for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; } public HashCodeBuilder append(short value) { iTotal = iTotal * iConstant + value; return this; }"
      },
      {
        "txt": "public HashCodeBuilder append(short[] array) { if (array == null) { iTotal = iTotal * iConstant; } else { for (int i = 0; i < array.length; i++) { append(array[i]); } } return this; }"
      },
      {
        "txt": "public HashCodeBuilder appendSuper(int superHashCode) { iTotal = iTotal * iConstant + superHashCode; return this; } public int toHashCode() { return iTotal; } @Override public int hashCode() { return toHashCode();"
      }
    ]
  }
]
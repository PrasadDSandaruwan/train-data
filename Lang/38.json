[
  {
    "id": 2380,
    "file_path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
    "start-bug-line": 872,
    "end-bug-line": 872,
    "bug": "",
    "fix": "calendar.getTime(); /// LANG-538",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.time; import java.io.IOException;"
      },
      {
        "txt": "import java.io.ObjectInputStream; import java.text.DateFormat; import java.text.DateFormatSymbols; import java.text.FieldPosition; import java.text.Format; import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.ArrayList; import java.util.Calendar; import java.util.Date;"
      },
      {
        "txt": "import java.util.GregorianCalendar; import java.util.HashMap; import java.util.List; import java.util.Locale; import java.util.Map; import java.util.TimeZone; import org.apache.commons.lang3.Validate; public class FastDateFormat extends Format { private static final long serialVersionUID = 1L; public static final int FULL = DateFormat.FULL;"
      },
      {
        "txt": "public static final int LONG = DateFormat.LONG; public static final int MEDIUM = DateFormat.MEDIUM; public static final int SHORT = DateFormat.SHORT; private static String cDefaultPattern; // lazily initialised by getInstance() private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7); private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7); private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7); private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7); private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7); private final String mPattern;"
      },
      {
        "txt": "private final TimeZone mTimeZone; private final boolean mTimeZoneForced; private final Locale mLocale; private final boolean mLocaleForced; private transient Rule[] mRules; private transient int mMaxLengthEstimate; public static FastDateFormat getInstance() { return getInstance(getDefaultPattern(), null, null); } public static FastDateFormat getInstance(String pattern) {"
      },
      {
        "txt": "return getInstance(pattern, null, null); } public static FastDateFormat getInstance(String pattern, TimeZone timeZone) { return getInstance(pattern, timeZone, null); } public static FastDateFormat getInstance(String pattern, Locale locale) { return getInstance(pattern, null, locale); } public static synchronized FastDateFormat getInstance(String pattern, TimeZone timeZone, Locale locale) { FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);"
      },
      {
        "txt": "FastDateFormat format = cInstanceCache.get(emptyFormat); if (format == null) { format = emptyFormat; format.init(); // convert shell format into usable one cInstanceCache.put(format, format); // this is OK! } return format; } public static FastDateFormat getDateInstance(int style) { return getDateInstance(style, null, null);"
      },
      {
        "txt": "} public static FastDateFormat getDateInstance(int style, Locale locale) { return getDateInstance(style, null, locale); } public static FastDateFormat getDateInstance(int style, TimeZone timeZone) { return getDateInstance(style, timeZone, null); } public static synchronized FastDateFormat getDateInstance(int style, TimeZone timeZone, Locale locale) { Object key = Integer.valueOf(style); if (timeZone != null) {"
      },
      {
        "txt": "key = new Pair(key, timeZone); } if (locale == null) { locale = Locale.getDefault(); } key = new Pair(key, locale); FastDateFormat format = cDateInstanceCache.get(key); if (format == null) { try { SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateInstance(style, locale);"
      },
      {
        "txt": "String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cDateInstanceCache.put(key, format); } catch (ClassCastException ex) { throw new IllegalArgumentException(\"No date pattern for locale: \" + locale); } } return format; } public static FastDateFormat getTimeInstance(int style) {"
      },
      {
        "txt": "return getTimeInstance(style, null, null); } public static FastDateFormat getTimeInstance(int style, Locale locale) { return getTimeInstance(style, null, locale); } public static FastDateFormat getTimeInstance(int style, TimeZone timeZone) { return getTimeInstance(style, timeZone, null); } public static synchronized FastDateFormat getTimeInstance(int style, TimeZone timeZone, Locale locale) { Object key = Integer.valueOf(style);"
      },
      {
        "txt": "if (timeZone != null) { key = new Pair(key, timeZone); } if (locale != null) { key = new Pair(key, locale); } FastDateFormat format = cTimeInstanceCache.get(key); if (format == null) { if (locale == null) { locale = Locale.getDefault();"
      },
      {
        "txt": "} try { SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getTimeInstance(style, locale); String pattern = formatter.toPattern(); format = getInstance(pattern, timeZone, locale); cTimeInstanceCache.put(key, format); } catch (ClassCastException ex) { throw new IllegalArgumentException(\"No date pattern for locale: \" + locale); } }"
      },
      {
        "txt": "return format; } public static FastDateFormat getDateTimeInstance( int dateStyle, int timeStyle) { return getDateTimeInstance(dateStyle, timeStyle, null, null); } public static FastDateFormat getDateTimeInstance( int dateStyle, int timeStyle, Locale locale) { return getDateTimeInstance(dateStyle, timeStyle, null, locale); }"
      },
      {
        "txt": "public static FastDateFormat getDateTimeInstance( int dateStyle, int timeStyle, TimeZone timeZone) { return getDateTimeInstance(dateStyle, timeStyle, timeZone, null); } public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) { Object key = new Pair(Integer.valueOf(dateStyle), Integer.valueOf(timeStyle)); if (timeZone != null) { key = new Pair(key, timeZone); }"
      },
      {
        "txt": "if (locale == null) { locale = Locale.getDefault(); } key = new Pair(key, locale); FastDateFormat format = cDateTimeInstanceCache.get(key); if (format == null) { try { SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale); String pattern = formatter.toPattern();"
      },
      {
        "txt": "format = getInstance(pattern, timeZone, locale); cDateTimeInstanceCache.put(key, format); } catch (ClassCastException ex) { throw new IllegalArgumentException(\"No date time pattern for locale: \" + locale); } } return format; } static synchronized String getTimeZoneDisplay(TimeZone tz, boolean daylight, int style, Locale locale) { Object key = new TimeZoneDisplayKey(tz, daylight, style, locale);"
      },
      {
        "txt": "String value = cTimeZoneDisplayCache.get(key); if (value == null) { value = tz.getDisplayName(daylight, style, locale); cTimeZoneDisplayCache.put(key, value); } return value; } private static synchronized String getDefaultPattern() { if (cDefaultPattern == null) { cDefaultPattern = new SimpleDateFormat().toPattern();"
      },
      {
        "txt": "} return cDefaultPattern; } protected FastDateFormat(String pattern, TimeZone timeZone, Locale locale) { super(); if (pattern == null) { throw new IllegalArgumentException(\"The pattern must not be null\"); } mPattern = pattern; mTimeZoneForced = (timeZone != null);"
      },
      {
        "txt": "if (timeZone == null) { timeZone = TimeZone.getDefault(); } mTimeZone = timeZone; mLocaleForced = (locale != null); if (locale == null) { locale = Locale.getDefault(); } mLocale = locale; }"
      },
      {
        "txt": "protected void init() { List<Rule> rulesList = parsePattern(); mRules = rulesList.toArray(new Rule[rulesList.size()]); int len = 0; for (int i=mRules.length; --i >= 0; ) { len += mRules[i].estimateLength(); } mMaxLengthEstimate = len; } protected List<Rule> parsePattern() {"
      },
      {
        "txt": "DateFormatSymbols symbols = new DateFormatSymbols(mLocale); List<Rule> rules = new ArrayList<Rule>(); String[] ERAs = symbols.getEras(); String[] months = symbols.getMonths(); String[] shortMonths = symbols.getShortMonths(); String[] weekdays = symbols.getWeekdays(); String[] shortWeekdays = symbols.getShortWeekdays(); String[] AmPmStrings = symbols.getAmPmStrings(); int length = mPattern.length(); int[] indexRef = new int[1];"
      },
      {
        "txt": "for (int i = 0; i < length; i++) { indexRef[0] = i; String token = parseToken(mPattern, indexRef); i = indexRef[0]; int tokenLen = token.length(); if (tokenLen == 0) { break; } Rule rule; char c = token.charAt(0);"
      },
      {
        "txt": "switch (c) { case 'G': // era designator (text) rule = new TextField(Calendar.ERA, ERAs); break; case 'y': // year (number) if (tokenLen >= 4) { rule = selectNumberRule(Calendar.YEAR, tokenLen); } else { rule = TwoDigitYearField.INSTANCE; }"
      },
      {
        "txt": "break; case 'M': // month in year (text and number) if (tokenLen >= 4) { rule = new TextField(Calendar.MONTH, months); } else if (tokenLen == 3) { rule = new TextField(Calendar.MONTH, shortMonths); } else if (tokenLen == 2) { rule = TwoDigitMonthField.INSTANCE; } else { rule = UnpaddedMonthField.INSTANCE;"
      },
      {
        "txt": "} break; case 'd': // day in month (number) rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen); break; case 'h': // hour in am/pm (number, 1..12) rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen)); break; case 'H': // hour in day (number, 0..23) rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);"
      },
      {
        "txt": "break; case 'm': // minute in hour (number) rule = selectNumberRule(Calendar.MINUTE, tokenLen); break; case 's': // second in minute (number) rule = selectNumberRule(Calendar.SECOND, tokenLen); break; case 'S': // millisecond (number) rule = selectNumberRule(Calendar.MILLISECOND, tokenLen); break;"
      },
      {
        "txt": "case 'E': // day in week (text) rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays); break; case 'D': // day in year (number) rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen); break; case 'F': // day of week in month (number) rule = selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen); break; case 'w': // week in year (number)"
      },
      {
        "txt": "rule = selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen); break; case 'W': // week in month (number) rule = selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen); break; case 'a': // am/pm marker (text) rule = new TextField(Calendar.AM_PM, AmPmStrings); break; case 'k': // hour in day (1..24) rule = new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));"
      },
      {
        "txt": "break; case 'K': // hour in am/pm (0..11) rule = selectNumberRule(Calendar.HOUR, tokenLen); break; case 'z': // time zone (text) if (tokenLen >= 4) { rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG); } else { rule = new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT); }"
      },
      {
        "txt": "break; case 'Z': // time zone (value) if (tokenLen == 1) { rule = TimeZoneNumberRule.INSTANCE_NO_COLON; } else { rule = TimeZoneNumberRule.INSTANCE_COLON; } break; case '\\'': // literal text String sub = token.substring(1);"
      },
      {
        "txt": "if (sub.length() == 1) { rule = new CharacterLiteral(sub.charAt(0)); } else { rule = new StringLiteral(sub); } break; default: throw new IllegalArgumentException(\"Illegal pattern component: \" + token); } rules.add(rule);"
      },
      {
        "txt": "} return rules; } protected String parseToken(String pattern, int[] indexRef) { StringBuilder buf = new StringBuilder(); int i = indexRef[0]; int length = pattern.length(); char c = pattern.charAt(i); if (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z') { buf.append(c);"
      },
      {
        "txt": "while (i + 1 < length) { char peek = pattern.charAt(i + 1); if (peek == c) { buf.append(c); i++; } else { break; } } } else {"
      },
      {
        "txt": "buf.append('\\''); boolean inLiteral = false; for (; i < length; i++) { c = pattern.charAt(i); if (c == '\\'') { if (i + 1 < length && pattern.charAt(i + 1) == '\\'') { i++; buf.append(c); } else { inLiteral = !inLiteral;"
      },
      {
        "txt": "} } else if (!inLiteral && (c >= 'A' && c <= 'Z' || c >= 'a' && c <= 'z')) { i--; break; } else { buf.append(c); } } }"
      },
      {
        "txt": "indexRef[0] = i; return buf.toString(); } protected NumberRule selectNumberRule(int field, int padding) { switch (padding) { case 1: return new UnpaddedNumberField(field); case 2: return new TwoDigitNumberField(field); default:"
      },
      {
        "txt": "return new PaddedNumberField(field, padding); } } @Override public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) { if (obj instanceof Date) { return format((Date) obj, toAppendTo); } else if (obj instanceof Calendar) { return format((Calendar) obj, toAppendTo); } else if (obj instanceof Long) {"
      },
      {
        "txt": "return format(((Long) obj).longValue(), toAppendTo); } else { throw new IllegalArgumentException(\"Unknown class: \" + (obj == null ? \"<null>\" : obj.getClass().getName())); } } public String format(long millis) { return format(new Date(millis)); } public String format(Date date) {"
      },
      {
        "txt": "Calendar c = new GregorianCalendar(mTimeZone); c.setTime(date); return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString(); } public String format(Calendar calendar) { return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString(); } public StringBuffer format(long millis, StringBuffer buf) { return format(new Date(millis), buf); }"
      },
      {
        "txt": "Calendar c = new GregorianCalendar(mTimeZone); c.setTime(date); return applyRules(c, buf); } public StringBuffer format(Calendar calendar, StringBuffer buf) { if (mTimeZoneForced) { <extra_id_0> calendar.setTimeZone(mTimeZone); } return applyRules(calendar, buf); } protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) { Rule[] rules = mRules;"
      },
      {
        "txt": "protected StringBuffer applyRules(Calendar calendar, StringBuffer buf) { Rule[] rules = mRules; int len = mRules.length; for (int i = 0; i < len; i++) { rules[i].appendTo(buf, calendar); } return buf; } @Override public Object parseObject(String source, ParsePosition pos) {"
      },
      {
        "txt": "pos.setIndex(0); pos.setErrorIndex(0); return null; } public String getPattern() { return mPattern; } public TimeZone getTimeZone() { return mTimeZone; }"
      },
      {
        "txt": "public boolean getTimeZoneOverridesCalendar() { return mTimeZoneForced; } public Locale getLocale() { return mLocale; } public int getMaxLengthEstimate() { return mMaxLengthEstimate; } @Override"
      },
      {
        "txt": "public boolean equals(Object obj) { if (obj instanceof FastDateFormat == false) { return false; } FastDateFormat other = (FastDateFormat) obj; if ( (mPattern == other.mPattern || mPattern.equals(other.mPattern)) && (mTimeZone == other.mTimeZone || mTimeZone.equals(other.mTimeZone)) && (mLocale == other.mLocale || mLocale.equals(other.mLocale)) && (mTimeZoneForced == other.mTimeZoneForced) &&"
      },
      {
        "txt": "(mLocaleForced == other.mLocaleForced) ) { return true; } return false; } @Override public int hashCode() { int total = 0; total += mPattern.hashCode();"
      },
      {
        "txt": "total += mTimeZone.hashCode(); total += (mTimeZoneForced ? 1 : 0); total += mLocale.hashCode(); total += (mLocaleForced ? 1 : 0); return total; } @Override public String toString() { return \"FastDateFormat[\" + mPattern + \"]\"; }"
      },
      {
        "txt": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in.defaultReadObject(); init(); } private interface Rule { int estimateLength(); void appendTo(StringBuffer buffer, Calendar calendar); } private interface NumberRule extends Rule { void appendTo(StringBuffer buffer, int value);"
      },
      {
        "txt": "} private static class CharacterLiteral implements Rule { private final char mValue; CharacterLiteral(char value) { mValue = value; } public int estimateLength() { return 1; } public void appendTo(StringBuffer buffer, Calendar calendar) {"
      },
      {
        "txt": "buffer.append(mValue); } } private static class StringLiteral implements Rule { private final String mValue; StringLiteral(String value) { mValue = value; } public int estimateLength() { return mValue.length();"
      },
      {
        "txt": "} public void appendTo(StringBuffer buffer, Calendar calendar) { buffer.append(mValue); } } private static class TextField implements Rule { private final int mField; private final String[] mValues; TextField(int field, String[] values) { mField = field;"
      },
      {
        "txt": "mValues = values; } public int estimateLength() { int max = 0; for (int i=mValues.length; --i >= 0; ) { int len = mValues[i].length(); if (len > max) { max = len; } }"
      },
      {
        "txt": "return max; } public void appendTo(StringBuffer buffer, Calendar calendar) { buffer.append(mValues[calendar.get(mField)]); } } private static class UnpaddedNumberField implements NumberRule { private final int mField; UnpaddedNumberField(int field) { mField = field;"
      },
      {
        "txt": "} public int estimateLength() { return 4; } public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(mField)); } public final void appendTo(StringBuffer buffer, int value) { if (value < 10) { buffer.append((char)(value + '0'));"
      },
      {
        "txt": "} else if (value < 100) { buffer.append((char)(value / 10 + '0')); buffer.append((char)(value % 10 + '0')); } else { buffer.append(Integer.toString(value)); } } } private static class UnpaddedMonthField implements NumberRule { static final UnpaddedMonthField INSTANCE = new UnpaddedMonthField();"
      },
      {
        "txt": "UnpaddedMonthField() { super(); } public int estimateLength() { return 2; } public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(Calendar.MONTH) + 1); } public final void appendTo(StringBuffer buffer, int value) {"
      },
      {
        "txt": "if (value < 10) { buffer.append((char)(value + '0')); } else { buffer.append((char)(value / 10 + '0')); buffer.append((char)(value % 10 + '0')); } } } private static class PaddedNumberField implements NumberRule { private final int mField;"
      },
      {
        "txt": "private final int mSize; PaddedNumberField(int field, int size) { if (size < 3) { throw new IllegalArgumentException(); } mField = field; mSize = size; } public int estimateLength() { return 4;"
      },
      {
        "txt": "} public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(mField)); } public final void appendTo(StringBuffer buffer, int value) { if (value < 100) { for (int i = mSize; --i >= 2; ) { buffer.append('0'); } buffer.append((char)(value / 10 + '0'));"
      },
      {
        "txt": "buffer.append((char)(value % 10 + '0')); } else { int digits; if (value < 1000) { digits = 3; } else { Validate.isTrue(value > -1, \"Negative values should not be possible\", value); digits = Integer.toString(value).length(); } for (int i = mSize; --i >= digits; ) {"
      },
      {
        "txt": "buffer.append('0'); } buffer.append(Integer.toString(value)); } } } private static class TwoDigitNumberField implements NumberRule { private final int mField; TwoDigitNumberField(int field) { mField = field;"
      },
      {
        "txt": "} public int estimateLength() { return 2; } public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(mField)); } public final void appendTo(StringBuffer buffer, int value) { if (value < 100) { buffer.append((char)(value / 10 + '0'));"
      },
      {
        "txt": "buffer.append((char)(value % 10 + '0')); } else { buffer.append(Integer.toString(value)); } } } private static class TwoDigitYearField implements NumberRule { static final TwoDigitYearField INSTANCE = new TwoDigitYearField(); TwoDigitYearField() { super();"
      },
      {
        "txt": "} public int estimateLength() { return 2; } public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(Calendar.YEAR) % 100); } public final void appendTo(StringBuffer buffer, int value) { buffer.append((char)(value / 10 + '0')); buffer.append((char)(value % 10 + '0'));"
      },
      {
        "txt": "} } private static class TwoDigitMonthField implements NumberRule { static final TwoDigitMonthField INSTANCE = new TwoDigitMonthField(); TwoDigitMonthField() { super(); } public int estimateLength() { return 2; }"
      },
      {
        "txt": "public void appendTo(StringBuffer buffer, Calendar calendar) { appendTo(buffer, calendar.get(Calendar.MONTH) + 1); } public final void appendTo(StringBuffer buffer, int value) { buffer.append((char)(value / 10 + '0')); buffer.append((char)(value % 10 + '0')); } } private static class TwelveHourField implements NumberRule { private final NumberRule mRule;"
      },
      {
        "txt": "TwelveHourField(NumberRule rule) { mRule = rule; } public int estimateLength() { return mRule.estimateLength(); } public void appendTo(StringBuffer buffer, Calendar calendar) { int value = calendar.get(Calendar.HOUR); if (value == 0) { value = calendar.getLeastMaximum(Calendar.HOUR) + 1;"
      },
      {
        "txt": "} mRule.appendTo(buffer, value); } public void appendTo(StringBuffer buffer, int value) { mRule.appendTo(buffer, value); } } private static class TwentyFourHourField implements NumberRule { private final NumberRule mRule; TwentyFourHourField(NumberRule rule) {"
      },
      {
        "txt": "mRule = rule; } public int estimateLength() { return mRule.estimateLength(); } public void appendTo(StringBuffer buffer, Calendar calendar) { int value = calendar.get(Calendar.HOUR_OF_DAY); if (value == 0) { value = calendar.getMaximum(Calendar.HOUR_OF_DAY) + 1; }"
      },
      {
        "txt": "mRule.appendTo(buffer, value); } public void appendTo(StringBuffer buffer, int value) { mRule.appendTo(buffer, value); } } private static class TimeZoneNameRule implements Rule { private final TimeZone mTimeZone; private final boolean mTimeZoneForced; private final Locale mLocale;"
      },
      {
        "txt": "private final int mStyle; private final String mStandard; private final String mDaylight; TimeZoneNameRule(TimeZone timeZone, boolean timeZoneForced, Locale locale, int style) { mTimeZone = timeZone; mTimeZoneForced = timeZoneForced; mLocale = locale; mStyle = style; if (timeZoneForced) { mStandard = getTimeZoneDisplay(timeZone, false, style, locale);"
      },
      {
        "txt": "mDaylight = getTimeZoneDisplay(timeZone, true, style, locale); } else { mStandard = null; mDaylight = null; } } public int estimateLength() { if (mTimeZoneForced) { return Math.max(mStandard.length(), mDaylight.length()); } else if (mStyle == TimeZone.SHORT) {"
      },
      {
        "txt": "return 4; } else { return 40; } } public void appendTo(StringBuffer buffer, Calendar calendar) { if (mTimeZoneForced) { if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) { buffer.append(mDaylight); } else {"
      },
      {
        "txt": "buffer.append(mStandard); } } else { TimeZone timeZone = calendar.getTimeZone(); if (timeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) { buffer.append(getTimeZoneDisplay(timeZone, true, mStyle, mLocale)); } else { buffer.append(getTimeZoneDisplay(timeZone, false, mStyle, mLocale)); } }"
      },
      {
        "txt": "} } private static class TimeZoneNumberRule implements Rule { static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true); static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false); final boolean mColon; TimeZoneNumberRule(boolean colon) { mColon = colon; } public int estimateLength() {"
      },
      {
        "txt": "return 5; } public void appendTo(StringBuffer buffer, Calendar calendar) { int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET); if (offset < 0) { buffer.append('-'); offset = -offset; } else { buffer.append('+'); }"
      },
      {
        "txt": "int hours = offset / (60 * 60 * 1000); buffer.append((char)(hours / 10 + '0')); buffer.append((char)(hours % 10 + '0')); if (mColon) { buffer.append(':'); } int minutes = offset / (60 * 1000) - 60 * hours; buffer.append((char)(minutes / 10 + '0')); buffer.append((char)(minutes % 10 + '0')); }"
      },
      {
        "txt": "} private static class TimeZoneDisplayKey { private final TimeZone mTimeZone; private final int mStyle; private final Locale mLocale; TimeZoneDisplayKey(TimeZone timeZone, boolean daylight, int style, Locale locale) { mTimeZone = timeZone; if (daylight) { style |= 0x80000000;"
      },
      {
        "txt": "} mStyle = style; mLocale = locale; } @Override public int hashCode() { return mStyle * 31 + mLocale.hashCode(); } @Override public boolean equals(Object obj) {"
      },
      {
        "txt": "if (this == obj) { return true; } if (obj instanceof TimeZoneDisplayKey) { TimeZoneDisplayKey other = (TimeZoneDisplayKey)obj; return mTimeZone.equals(other.mTimeZone) && mStyle == other.mStyle && mLocale.equals(other.mLocale); }"
      },
      {
        "txt": "return false; } } private static class Pair { private final Object mObj1; private final Object mObj2; public Pair(Object obj1, Object obj2) { mObj1 = obj1; mObj2 = obj2; }"
      },
      {
        "txt": "@Override public boolean equals(Object obj) { if (this == obj) { return true; } if (!(obj instanceof Pair)) { return false; } Pair key = (Pair)obj; return"
      },
      {
        "txt": "(mObj1 == null ? key.mObj1 == null : mObj1.equals(key.mObj1)) && (mObj2 == null ? key.mObj2 == null : mObj2.equals(key.mObj2)); } @Override public int hashCode() { return (mObj1 == null ? 0 : mObj1.hashCode()) + (mObj2 == null ? 0 : mObj2.hashCode());"
      },
      {
        "txt": "} @Override public String toString() { return \"[\" + mObj1 + ':' + mObj2 + ']'; } }"
      }
    ]
  }
]
[
  {
    "id": 2432,
    "file_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
    "start-bug-line": 306,
    "end-bug-line": 306,
    "bug": "days += 31;",
    "fix": "end.add(Calendar.MONTH, -1); days += end.getActualMaximum(Calendar.DAY_OF_MONTH);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; import org.apache.commons.lang.StringUtils; import java.util.Calendar; import java.util.Date; import java.util.TimeZone; public class DurationFormatUtils {"
      },
      {
        "txt": "public DurationFormatUtils() { super(); } public static final String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\"; public static String formatDurationHMS(long durationMillis) { return formatDuration(durationMillis, \"H:mm:ss.SSS\"); } public static String formatDurationISO(long durationMillis) { return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false); }"
      },
      {
        "txt": "public static String formatDuration(long durationMillis, String format) { return formatDuration(durationMillis, format, true); } public static String formatDuration(long durationMillis, String format, boolean padWithZeros) { Token[] tokens = lexx(format); int days = 0; int hours = 0; int minutes = 0; int seconds = 0; int milliseconds = 0;"
      },
      {
        "txt": "if (Token.containsTokenWithValue(tokens, d) ) { days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY); durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY); } if (Token.containsTokenWithValue(tokens, H) ) { hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR); durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR); } if (Token.containsTokenWithValue(tokens, m) ) { minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE);"
      },
      {
        "txt": "durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE); } if (Token.containsTokenWithValue(tokens, s) ) { seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND); durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND); } if (Token.containsTokenWithValue(tokens, S) ) { milliseconds = (int) durationMillis; } return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros);"
      },
      {
        "txt": "} public static String formatDurationWords( long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) { String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\"); if (suppressLeadingZeroElements) { duration = \" \" + duration; String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\"); if (tmp.length() != duration.length()) {"
      },
      {
        "txt": "duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); duration = tmp; if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\"); } }"
      },
      {
        "txt": "} if (duration.length() != 0) { duration = duration.substring(1); } } if (suppressTrailingZeroElements) { String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\");"
      },
      {
        "txt": "if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\"); } } } } duration = \" \" + duration;"
      },
      {
        "txt": "duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\"); duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\"); duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\"); duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\"); return duration.trim(); } public static String formatPeriodISO(long startMillis, long endMillis) { return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format) {"
      },
      {
        "txt": "return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) { long millis = endMillis - startMillis; if (millis < 28 * DateUtils.MILLIS_PER_DAY) { return formatDuration(millis, format, padWithZeros); } Token[] tokens = lexx(format); Calendar start = Calendar.getInstance(timezone);"
      },
      {
        "txt": "start.setTime(new Date(startMillis)); Calendar end = Calendar.getInstance(timezone); end.setTime(new Date(endMillis)); int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND); int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND); int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE); int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY); int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH); int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH); int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);"
      },
      {
        "txt": "while (milliseconds < 0) { milliseconds += 1000; seconds -= 1; } while (seconds < 0) { seconds += 60; minutes -= 1; } while (minutes < 0) { minutes += 60;"
      },
      {
        "txt": "} while (hours < 0) { hours += 24; days -= 1; } while (days < 0) { <extra_id_0> months -= 1; } while (months < 0) { months += 12; years -= 1; }"
      },
      {
        "txt": "years -= 1; } milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds); seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds); minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes); hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours); days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days); months -= reduceAndCorrect(start, end, Calendar.MONTH, months); years -= reduceAndCorrect(start, end, Calendar.YEAR, years); if (!Token.containsTokenWithValue(tokens, y)) {"
      },
      {
        "txt": "if (Token.containsTokenWithValue(tokens, M)) { months += 12 * years; years = 0; } else { days += 365 * years; years = 0; } } if (!Token.containsTokenWithValue(tokens, M)) { days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR);"
      },
      {
        "txt": "months = 0; } if (!Token.containsTokenWithValue(tokens, d)) { hours += 24 * days; days = 0; } if (!Token.containsTokenWithValue(tokens, H)) { minutes += 60 * hours; hours = 0; }"
      },
      {
        "txt": "if (!Token.containsTokenWithValue(tokens, m)) { seconds += 60 * minutes; minutes = 0; } if (!Token.containsTokenWithValue(tokens, s)) { milliseconds += 1000 * seconds; seconds = 0; } return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros); }"
      },
      {
        "txt": "static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) { StringBuffer buffer = new StringBuffer(); boolean lastOutputSeconds = false; int sz = tokens.length; for (int i = 0; i < sz; i++) { Token token = tokens[i]; Object value = token.getValue(); int count = token.getCount(); if (value instanceof StringBuffer) {"
      },
      {
        "txt": "buffer.append(value.toString()); } else { if (value == y) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer .toString(years)); lastOutputSeconds = false; } else if (value == M) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer .toString(months)); lastOutputSeconds = false;"
      },
      {
        "txt": "} else if (value == d) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer .toString(days)); lastOutputSeconds = false; } else if (value == H) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer .toString(hours)); lastOutputSeconds = false; } else if (value == m) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer"
      },
      {
        "txt": ".toString(minutes)); lastOutputSeconds = false; } else if (value == s) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer .toString(seconds)); lastOutputSeconds = true; } else if (value == S) { if (lastOutputSeconds) { milliseconds += 1000; String str = padWithZeros"
      },
      {
        "txt": "? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds); buffer.append(str.substring(1)); } else { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds)); } lastOutputSeconds = false; }"
      },
      {
        "txt": "} } return buffer.toString(); } static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue;"
      },
      {
        "txt": "end.add( field, newdiff ); return newdiff; } else { return 0; } } static final Object y = \"y\"; static final Object M = \"M\"; static final Object d = \"d\"; static final Object H = \"H\";"
      },
      {
        "txt": "static final Object m = \"m\"; static final Object s = \"s\"; static final Object S = \"S\"; static Token[] lexx(String format) { char[] array = format.toCharArray(); java.util.ArrayList list = new java.util.ArrayList(array.length); boolean inLiteral = false; StringBuffer buffer = null; Token previous = null; int sz = array.length;"
      },
      {
        "txt": "for(int i=0; i<sz; i++) { char ch = array[i]; if(inLiteral && ch != '\\'') { buffer.append(ch); continue; } Object value = null; switch(ch) { case '\\'' : if(inLiteral) {"
      },
      {
        "txt": "buffer = null; inLiteral = false; } else { buffer = new StringBuffer(); list.add(new Token(buffer)); inLiteral = true; } break; case 'y' : value = y; break; case 'M' : value = M; break;"
      },
      {
        "txt": "case 'd' : value = d; break; case 'H' : value = H; break; case 'm' : value = m; break; case 's' : value = s; break; case 'S' : value = S; break; default : if(buffer == null) { buffer = new StringBuffer(); list.add(new Token(buffer)); }"
      },
      {
        "txt": "buffer.append(ch); } if(value != null) { if(previous != null && previous.getValue() == value) { previous.increment(); } else { Token token = new Token(value); list.add(token); previous = token; }"
      },
      {
        "txt": "buffer = null; } } return (Token[]) list.toArray( new Token[0] ); } static class Token { static boolean containsTokenWithValue(Token[] tokens, Object value) { int sz = tokens.length; for (int i = 0; i < sz; i++) { if (tokens[i].getValue() == value) {"
      },
      {
        "txt": "return true; } } return false; } private Object value; private int count; Token(Object value) { this.value = value; this.count = 1;"
      },
      {
        "txt": "} Token(Object value, int count) { this.value = value; this.count = count; } void increment() { count++; } int getCount() { return count;"
      },
      {
        "txt": "} Object getValue() { return value; } public boolean equals(Object obj2) { if (obj2 instanceof Token) { Token tok2 = (Token) obj2; if (this.value.getClass() != tok2.value.getClass()) { return false; }"
      },
      {
        "txt": "if (this.count != tok2.count) { return false; } if (this.value instanceof StringBuffer) { return this.value.toString().equals(tok2.value.toString()); } else if (this.value instanceof Number) { return this.value.equals(tok2.value); } else { return this.value == tok2.value; }"
      },
      {
        "txt": "} else { return false; } } public int hashCode() { return this.value.hashCode(); } public String toString() { return StringUtils.repeat(this.value.toString(), this.count); }"
      }
    ]
  },
  {
    "id": 2433,
    "file_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
    "start-bug-line": 313,
    "end-bug-line": 313,
    "bug": "",
    "fix": "end.add(Calendar.MONTH, 1);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; import org.apache.commons.lang.StringUtils; import java.util.Calendar; import java.util.Date; import java.util.TimeZone; public class DurationFormatUtils { public DurationFormatUtils() { super();"
      },
      {
        "txt": "} public static final String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\"; public static String formatDurationHMS(long durationMillis) { return formatDuration(durationMillis, \"H:mm:ss.SSS\"); } public static String formatDurationISO(long durationMillis) { return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false); } public static String formatDuration(long durationMillis, String format) { return formatDuration(durationMillis, format, true);"
      },
      {
        "txt": "} public static String formatDuration(long durationMillis, String format, boolean padWithZeros) { Token[] tokens = lexx(format); int days = 0; int hours = 0; int minutes = 0; int seconds = 0; int milliseconds = 0; if (Token.containsTokenWithValue(tokens, d) ) { days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY);"
      },
      {
        "txt": "durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY); } if (Token.containsTokenWithValue(tokens, H) ) { hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR); durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR); } if (Token.containsTokenWithValue(tokens, m) ) { minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE); durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE); }"
      },
      {
        "txt": "if (Token.containsTokenWithValue(tokens, s) ) { seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND); durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND); } if (Token.containsTokenWithValue(tokens, S) ) { milliseconds = (int) durationMillis; } return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros); } public static String formatDurationWords("
      },
      {
        "txt": "long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) { String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\"); if (suppressLeadingZeroElements) { duration = \" \" + duration; String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\");"
      },
      {
        "txt": "if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); duration = tmp; if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\"); } } } if (duration.length() != 0) {"
      },
      {
        "txt": "duration = duration.substring(1); } } if (suppressTrailingZeroElements) { String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); if (tmp.length() != duration.length()) { duration = tmp;"
      },
      {
        "txt": "tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\"); } } } } duration = \" \" + duration; duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\"); duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\");"
      },
      {
        "txt": "duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\"); duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\"); return duration.trim(); } public static String formatPeriodISO(long startMillis, long endMillis) { return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format) { return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault()); }"
      },
      {
        "txt": "public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) { long millis = endMillis - startMillis; if (millis < 28 * DateUtils.MILLIS_PER_DAY) { return formatDuration(millis, format, padWithZeros); } Token[] tokens = lexx(format); Calendar start = Calendar.getInstance(timezone); start.setTime(new Date(startMillis)); Calendar end = Calendar.getInstance(timezone);"
      },
      {
        "txt": "end.setTime(new Date(endMillis)); int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND); int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND); int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE); int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY); int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH); int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH); int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR); while (milliseconds < 0) { milliseconds += 1000;"
      },
      {
        "txt": "seconds -= 1; } while (seconds < 0) { seconds += 60; minutes -= 1; } while (minutes < 0) { minutes += 60; hours -= 1; }"
      },
      {
        "txt": "hours += 24; days -= 1; } while (days < 0) { days += 31; months -= 1; <extra_id_0> while (months < 0) { months += 12; years -= 1; } milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds); seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);"
      },
      {
        "txt": "milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds); seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds); minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes); hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours); days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days); months -= reduceAndCorrect(start, end, Calendar.MONTH, months); years -= reduceAndCorrect(start, end, Calendar.YEAR, years); if (!Token.containsTokenWithValue(tokens, y)) { if (Token.containsTokenWithValue(tokens, M)) { months += 12 * years;"
      },
      {
        "txt": "years = 0; } else { days += 365 * years; years = 0; } } if (!Token.containsTokenWithValue(tokens, M)) { days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR); months = 0; }"
      },
      {
        "txt": "if (!Token.containsTokenWithValue(tokens, d)) { hours += 24 * days; days = 0; } if (!Token.containsTokenWithValue(tokens, H)) { minutes += 60 * hours; hours = 0; } if (!Token.containsTokenWithValue(tokens, m)) { seconds += 60 * minutes;"
      },
      {
        "txt": "minutes = 0; } if (!Token.containsTokenWithValue(tokens, s)) { milliseconds += 1000 * seconds; seconds = 0; } return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros); } static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) {"
      },
      {
        "txt": "StringBuffer buffer = new StringBuffer(); boolean lastOutputSeconds = false; int sz = tokens.length; for (int i = 0; i < sz; i++) { Token token = tokens[i]; Object value = token.getValue(); int count = token.getCount(); if (value instanceof StringBuffer) { buffer.append(value.toString()); } else {"
      },
      {
        "txt": "if (value == y) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer .toString(years)); lastOutputSeconds = false; } else if (value == M) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer .toString(months)); lastOutputSeconds = false; } else if (value == d) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer"
      },
      {
        "txt": ".toString(days)); lastOutputSeconds = false; } else if (value == H) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer .toString(hours)); lastOutputSeconds = false; } else if (value == m) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer .toString(minutes)); lastOutputSeconds = false;"
      },
      {
        "txt": "} else if (value == s) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer .toString(seconds)); lastOutputSeconds = true; } else if (value == S) { if (lastOutputSeconds) { milliseconds += 1000; String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);"
      },
      {
        "txt": "buffer.append(str.substring(1)); } else { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds)); } lastOutputSeconds = false; } } }"
      },
      {
        "txt": "return buffer.toString(); } static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff;"
      },
      {
        "txt": "} else { return 0; } } static final Object y = \"y\"; static final Object M = \"M\"; static final Object d = \"d\"; static final Object H = \"H\"; static final Object m = \"m\"; static final Object s = \"s\";"
      },
      {
        "txt": "static final Object S = \"S\"; static Token[] lexx(String format) { char[] array = format.toCharArray(); java.util.ArrayList list = new java.util.ArrayList(array.length); boolean inLiteral = false; StringBuffer buffer = null; Token previous = null; int sz = array.length; for(int i=0; i<sz; i++) { char ch = array[i];"
      },
      {
        "txt": "if(inLiteral && ch != '\\'') { buffer.append(ch); continue; } Object value = null; switch(ch) { case '\\'' : if(inLiteral) { buffer = null; inLiteral = false;"
      },
      {
        "txt": "} else { buffer = new StringBuffer(); list.add(new Token(buffer)); inLiteral = true; } break; case 'y' : value = y; break; case 'M' : value = M; break; case 'd' : value = d; break; case 'H' : value = H; break;"
      },
      {
        "txt": "case 'm' : value = m; break; case 's' : value = s; break; case 'S' : value = S; break; default : if(buffer == null) { buffer = new StringBuffer(); list.add(new Token(buffer)); } buffer.append(ch); }"
      },
      {
        "txt": "if(value != null) { if(previous != null && previous.getValue() == value) { previous.increment(); } else { Token token = new Token(value); list.add(token); previous = token; } buffer = null; }"
      },
      {
        "txt": "} return (Token[]) list.toArray( new Token[0] ); } static class Token { static boolean containsTokenWithValue(Token[] tokens, Object value) { int sz = tokens.length; for (int i = 0; i < sz; i++) { if (tokens[i].getValue() == value) { return true; }"
      },
      {
        "txt": "} return false; } private Object value; private int count; Token(Object value) { this.value = value; this.count = 1; } Token(Object value, int count) {"
      },
      {
        "txt": "this.value = value; this.count = count; } void increment() { count++; } int getCount() { return count; } Object getValue() {"
      },
      {
        "txt": "return value; } public boolean equals(Object obj2) { if (obj2 instanceof Token) { Token tok2 = (Token) obj2; if (this.value.getClass() != tok2.value.getClass()) { return false; } if (this.count != tok2.count) { return false;"
      },
      {
        "txt": "} if (this.value instanceof StringBuffer) { return this.value.toString().equals(tok2.value.toString()); } else if (this.value instanceof Number) { return this.value.equals(tok2.value); } else { return this.value == tok2.value; } } else { return false;"
      },
      {
        "txt": "} } public int hashCode() { return this.value.hashCode(); } public String toString() { return StringUtils.repeat(this.value.toString(), this.count); } }"
      }
    ]
  },
  {
    "id": 2434,
    "file_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
    "start-bug-line": 318,
    "end-bug-line": 324,
    "bug": "milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds); seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds); minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes); hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours); days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days); months -= reduceAndCorrect(start, end, Calendar.MONTH, months); years -= reduceAndCorrect(start, end, Calendar.YEAR, years);",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; import org.apache.commons.lang.StringUtils; import java.util.Calendar;"
      },
      {
        "txt": "import java.util.Date; import java.util.TimeZone; public class DurationFormatUtils { public DurationFormatUtils() { super(); } public static final String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\"; public static String formatDurationHMS(long durationMillis) { return formatDuration(durationMillis, \"H:mm:ss.SSS\"); }"
      },
      {
        "txt": "public static String formatDurationISO(long durationMillis) { return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false); } public static String formatDuration(long durationMillis, String format) { return formatDuration(durationMillis, format, true); } public static String formatDuration(long durationMillis, String format, boolean padWithZeros) { Token[] tokens = lexx(format); int days = 0; int hours = 0;"
      },
      {
        "txt": "int minutes = 0; int seconds = 0; int milliseconds = 0; if (Token.containsTokenWithValue(tokens, d) ) { days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY); durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY); } if (Token.containsTokenWithValue(tokens, H) ) { hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR); durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR);"
      },
      {
        "txt": "} if (Token.containsTokenWithValue(tokens, m) ) { minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE); durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE); } if (Token.containsTokenWithValue(tokens, s) ) { seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND); durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND); } if (Token.containsTokenWithValue(tokens, S) ) {"
      },
      {
        "txt": "milliseconds = (int) durationMillis; } return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros); } public static String formatDurationWords( long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) { String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\"); if (suppressLeadingZeroElements) {"
      },
      {
        "txt": "duration = \" \" + duration; String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); duration = tmp; if (tmp.length() != duration.length()) {"
      },
      {
        "txt": "duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\"); } } } if (duration.length() != 0) { duration = duration.substring(1); } } if (suppressTrailingZeroElements) { String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\");"
      },
      {
        "txt": "if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\"); } }"
      },
      {
        "txt": "} } duration = \" \" + duration; duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\"); duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\"); duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\"); duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\"); return duration.trim(); } public static String formatPeriodISO(long startMillis, long endMillis) {"
      },
      {
        "txt": "return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format) { return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) { long millis = endMillis - startMillis; if (millis < 28 * DateUtils.MILLIS_PER_DAY) { return formatDuration(millis, format, padWithZeros);"
      },
      {
        "txt": "} Token[] tokens = lexx(format); Calendar start = Calendar.getInstance(timezone); start.setTime(new Date(startMillis)); Calendar end = Calendar.getInstance(timezone); end.setTime(new Date(endMillis)); int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND); int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND); int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE); int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);"
      },
      {
        "txt": "int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH); int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH); int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR); while (milliseconds < 0) { milliseconds += 1000; seconds -= 1; } while (seconds < 0) { seconds += 60; minutes -= 1;"
      },
      {
        "txt": "} while (minutes < 0) { minutes += 60; hours -= 1; } while (hours < 0) { hours += 24; days -= 1; } while (days < 0) {"
      },
      {
        "txt": "months -= 1; } while (months < 0) { months += 12; years -= 1; } <extra_id_0> if (!Token.containsTokenWithValue(tokens, y)) { if (Token.containsTokenWithValue(tokens, M)) { months += 12 * years; years = 0; } else { days += 365 * years;"
      },
      {
        "txt": "} else { days += 365 * years; years = 0; } } if (!Token.containsTokenWithValue(tokens, M)) { days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR); months = 0; } if (!Token.containsTokenWithValue(tokens, d)) {"
      },
      {
        "txt": "hours += 24 * days; days = 0; } if (!Token.containsTokenWithValue(tokens, H)) { minutes += 60 * hours; hours = 0; } if (!Token.containsTokenWithValue(tokens, m)) { seconds += 60 * minutes; minutes = 0;"
      },
      {
        "txt": "} if (!Token.containsTokenWithValue(tokens, s)) { milliseconds += 1000 * seconds; seconds = 0; } return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros); } static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) { StringBuffer buffer = new StringBuffer();"
      },
      {
        "txt": "boolean lastOutputSeconds = false; int sz = tokens.length; for (int i = 0; i < sz; i++) { Token token = tokens[i]; Object value = token.getValue(); int count = token.getCount(); if (value instanceof StringBuffer) { buffer.append(value.toString()); } else { if (value == y) {"
      },
      {
        "txt": "buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer .toString(years)); lastOutputSeconds = false; } else if (value == M) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer .toString(months)); lastOutputSeconds = false; } else if (value == d) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer .toString(days));"
      },
      {
        "txt": "lastOutputSeconds = false; } else if (value == H) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer .toString(hours)); lastOutputSeconds = false; } else if (value == m) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer .toString(minutes)); lastOutputSeconds = false; } else if (value == s) {"
      },
      {
        "txt": "buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer .toString(seconds)); lastOutputSeconds = true; } else if (value == S) { if (lastOutputSeconds) { milliseconds += 1000; String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds); buffer.append(str.substring(1));"
      },
      {
        "txt": "} else { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds)); } lastOutputSeconds = false; } } } return buffer.toString();"
      },
      {
        "txt": "} static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff; } else {"
      },
      {
        "txt": "return 0; } } static final Object y = \"y\"; static final Object M = \"M\"; static final Object d = \"d\"; static final Object H = \"H\"; static final Object m = \"m\"; static final Object s = \"s\"; static final Object S = \"S\";"
      },
      {
        "txt": "static Token[] lexx(String format) { char[] array = format.toCharArray(); java.util.ArrayList list = new java.util.ArrayList(array.length); boolean inLiteral = false; StringBuffer buffer = null; Token previous = null; int sz = array.length; for(int i=0; i<sz; i++) { char ch = array[i]; if(inLiteral && ch != '\\'') {"
      },
      {
        "txt": "buffer.append(ch); continue; } Object value = null; switch(ch) { case '\\'' : if(inLiteral) { buffer = null; inLiteral = false; } else {"
      },
      {
        "txt": "buffer = new StringBuffer(); list.add(new Token(buffer)); inLiteral = true; } break; case 'y' : value = y; break; case 'M' : value = M; break; case 'd' : value = d; break; case 'H' : value = H; break; case 'm' : value = m; break;"
      },
      {
        "txt": "case 's' : value = s; break; case 'S' : value = S; break; default : if(buffer == null) { buffer = new StringBuffer(); list.add(new Token(buffer)); } buffer.append(ch); } if(value != null) {"
      },
      {
        "txt": "if(previous != null && previous.getValue() == value) { previous.increment(); } else { Token token = new Token(value); list.add(token); previous = token; } buffer = null; } }"
      },
      {
        "txt": "return (Token[]) list.toArray( new Token[0] ); } static class Token { static boolean containsTokenWithValue(Token[] tokens, Object value) { int sz = tokens.length; for (int i = 0; i < sz; i++) { if (tokens[i].getValue() == value) { return true; } }"
      },
      {
        "txt": "return false; } private Object value; private int count; Token(Object value) { this.value = value; this.count = 1; } Token(Object value, int count) { this.value = value;"
      },
      {
        "txt": "this.count = count; } void increment() { count++; } int getCount() { return count; } Object getValue() { return value;"
      },
      {
        "txt": "} public boolean equals(Object obj2) { if (obj2 instanceof Token) { Token tok2 = (Token) obj2; if (this.value.getClass() != tok2.value.getClass()) { return false; } if (this.count != tok2.count) { return false; }"
      },
      {
        "txt": "if (this.value instanceof StringBuffer) { return this.value.toString().equals(tok2.value.toString()); } else if (this.value instanceof Number) { return this.value.equals(tok2.value); } else { return this.value == tok2.value; } } else { return false; }"
      },
      {
        "txt": "} public int hashCode() { return this.value.hashCode(); } public String toString() { return StringUtils.repeat(this.value.toString(), this.count); } }"
      }
    ]
  },
  {
    "id": 2435,
    "file_path": "src/java/org/apache/commons/lang/time/DurationFormatUtils.java",
    "start-bug-line": 432,
    "end-bug-line": 443,
    "bug": "static int reduceAndCorrect(Calendar start, Calendar end, int field, int difference) { end.add( field, -1 * difference ); int endValue = end.get(field); int startValue = start.get(field); if (endValue < startValue) { int newdiff = startValue - endValue; end.add( field, newdiff ); return newdiff; } else { return 0; } }",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang.time; import org.apache.commons.lang.StringUtils; import java.util.Calendar; import java.util.Date; import java.util.TimeZone;"
      },
      {
        "txt": "public class DurationFormatUtils { public DurationFormatUtils() { super(); } public static final String ISO_EXTENDED_FORMAT_PATTERN = \"'P'yyyy'Y'M'M'd'DT'H'H'm'M's.S'S'\"; public static String formatDurationHMS(long durationMillis) { return formatDuration(durationMillis, \"H:mm:ss.SSS\"); } public static String formatDurationISO(long durationMillis) { return formatDuration(durationMillis, ISO_EXTENDED_FORMAT_PATTERN, false);"
      },
      {
        "txt": "} public static String formatDuration(long durationMillis, String format) { return formatDuration(durationMillis, format, true); } public static String formatDuration(long durationMillis, String format, boolean padWithZeros) { Token[] tokens = lexx(format); int days = 0; int hours = 0; int minutes = 0; int seconds = 0;"
      },
      {
        "txt": "int milliseconds = 0; if (Token.containsTokenWithValue(tokens, d) ) { days = (int) (durationMillis / DateUtils.MILLIS_PER_DAY); durationMillis = durationMillis - (days * DateUtils.MILLIS_PER_DAY); } if (Token.containsTokenWithValue(tokens, H) ) { hours = (int) (durationMillis / DateUtils.MILLIS_PER_HOUR); durationMillis = durationMillis - (hours * DateUtils.MILLIS_PER_HOUR); } if (Token.containsTokenWithValue(tokens, m) ) {"
      },
      {
        "txt": "minutes = (int) (durationMillis / DateUtils.MILLIS_PER_MINUTE); durationMillis = durationMillis - (minutes * DateUtils.MILLIS_PER_MINUTE); } if (Token.containsTokenWithValue(tokens, s) ) { seconds = (int) (durationMillis / DateUtils.MILLIS_PER_SECOND); durationMillis = durationMillis - (seconds * DateUtils.MILLIS_PER_SECOND); } if (Token.containsTokenWithValue(tokens, S) ) { milliseconds = (int) durationMillis; }"
      },
      {
        "txt": "return format(tokens, 0, 0, days, hours, minutes, seconds, milliseconds, padWithZeros); } public static String formatDurationWords( long durationMillis, boolean suppressLeadingZeroElements, boolean suppressTrailingZeroElements) { String duration = formatDuration(durationMillis, \"d' days 'H' hours 'm' minutes 's' seconds'\"); if (suppressLeadingZeroElements) { duration = \" \" + duration; String tmp = StringUtils.replaceOnce(duration, \" 0 days\", \"\");"
      },
      {
        "txt": "if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); duration = tmp; if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 seconds\", \"\"); }"
      },
      {
        "txt": "} } if (duration.length() != 0) { duration = duration.substring(1); } } if (suppressTrailingZeroElements) { String tmp = StringUtils.replaceOnce(duration, \" 0 seconds\", \"\"); if (tmp.length() != duration.length()) { duration = tmp;"
      },
      {
        "txt": "tmp = StringUtils.replaceOnce(duration, \" 0 minutes\", \"\"); if (tmp.length() != duration.length()) { duration = tmp; tmp = StringUtils.replaceOnce(duration, \" 0 hours\", \"\"); if (tmp.length() != duration.length()) { duration = StringUtils.replaceOnce(tmp, \" 0 days\", \"\"); } } } }"
      },
      {
        "txt": "duration = \" \" + duration; duration = StringUtils.replaceOnce(duration, \" 1 seconds\", \" 1 second\"); duration = StringUtils.replaceOnce(duration, \" 1 minutes\", \" 1 minute\"); duration = StringUtils.replaceOnce(duration, \" 1 hours\", \" 1 hour\"); duration = StringUtils.replaceOnce(duration, \" 1 days\", \" 1 day\"); return duration.trim(); } public static String formatPeriodISO(long startMillis, long endMillis) { return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault()); }"
      },
      {
        "txt": "public static String formatPeriod(long startMillis, long endMillis, String format) { return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault()); } public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) { long millis = endMillis - startMillis; if (millis < 28 * DateUtils.MILLIS_PER_DAY) { return formatDuration(millis, format, padWithZeros); } Token[] tokens = lexx(format);"
      },
      {
        "txt": "Calendar start = Calendar.getInstance(timezone); start.setTime(new Date(startMillis)); Calendar end = Calendar.getInstance(timezone); end.setTime(new Date(endMillis)); int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND); int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND); int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE); int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY); int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH); int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);"
      },
      {
        "txt": "int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR); while (milliseconds < 0) { milliseconds += 1000; seconds -= 1; } while (seconds < 0) { seconds += 60; minutes -= 1; } while (minutes < 0) {"
      },
      {
        "txt": "minutes += 60; hours -= 1; } while (hours < 0) { hours += 24; days -= 1; } while (days < 0) { days += 31; months -= 1;"
      },
      {
        "txt": "} while (months < 0) { months += 12; years -= 1; } milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds); seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds); minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes); hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours); days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);"
      },
      {
        "txt": "months -= reduceAndCorrect(start, end, Calendar.MONTH, months); years -= reduceAndCorrect(start, end, Calendar.YEAR, years); if (!Token.containsTokenWithValue(tokens, y)) { if (Token.containsTokenWithValue(tokens, M)) { months += 12 * years; years = 0; } else { days += 365 * years; years = 0; }"
      },
      {
        "txt": "} if (!Token.containsTokenWithValue(tokens, M)) { days += end.get(Calendar.DAY_OF_YEAR) - start.get(Calendar.DAY_OF_YEAR); months = 0; } if (!Token.containsTokenWithValue(tokens, d)) { hours += 24 * days; days = 0; } if (!Token.containsTokenWithValue(tokens, H)) {"
      },
      {
        "txt": "minutes += 60 * hours; hours = 0; } if (!Token.containsTokenWithValue(tokens, m)) { seconds += 60 * minutes; minutes = 0; } if (!Token.containsTokenWithValue(tokens, s)) { milliseconds += 1000 * seconds; seconds = 0;"
      },
      {
        "txt": "} return format(tokens, years, months, days, hours, minutes, seconds, milliseconds, padWithZeros); } static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds, int milliseconds, boolean padWithZeros) { StringBuffer buffer = new StringBuffer(); boolean lastOutputSeconds = false; int sz = tokens.length; for (int i = 0; i < sz; i++) { Token token = tokens[i];"
      },
      {
        "txt": "Object value = token.getValue(); int count = token.getCount(); if (value instanceof StringBuffer) { buffer.append(value.toString()); } else { if (value == y) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer .toString(years)); lastOutputSeconds = false; } else if (value == M) {"
      },
      {
        "txt": "buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer .toString(months)); lastOutputSeconds = false; } else if (value == d) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer .toString(days)); lastOutputSeconds = false; } else if (value == H) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer .toString(hours));"
      },
      {
        "txt": "lastOutputSeconds = false; } else if (value == m) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer .toString(minutes)); lastOutputSeconds = false; } else if (value == s) { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer .toString(seconds)); lastOutputSeconds = true; } else if (value == S) {"
      },
      {
        "txt": "if (lastOutputSeconds) { milliseconds += 1000; String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds); buffer.append(str.substring(1)); } else { buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));"
      },
      {
        "txt": "lastOutputSeconds = false; } } } return buffer.toString(); } <extra_id_0> static final Object y = \"y\"; static final Object M = \"M\"; static final Object d = \"d\"; static final Object H = \"H\"; static final Object m = \"m\"; static final Object s = \"s\";"
      },
      {
        "txt": "static final Object m = \"m\"; static final Object s = \"s\"; static final Object S = \"S\"; static Token[] lexx(String format) { char[] array = format.toCharArray(); java.util.ArrayList list = new java.util.ArrayList(array.length); boolean inLiteral = false; StringBuffer buffer = null; Token previous = null; int sz = array.length;"
      },
      {
        "txt": "for(int i=0; i<sz; i++) { char ch = array[i]; if(inLiteral && ch != '\\'') { buffer.append(ch); continue; } Object value = null; switch(ch) { case '\\'' : if(inLiteral) {"
      },
      {
        "txt": "buffer = null; inLiteral = false; } else { buffer = new StringBuffer(); list.add(new Token(buffer)); inLiteral = true; } break; case 'y' : value = y; break; case 'M' : value = M; break;"
      },
      {
        "txt": "case 'd' : value = d; break; case 'H' : value = H; break; case 'm' : value = m; break; case 's' : value = s; break; case 'S' : value = S; break; default : if(buffer == null) { buffer = new StringBuffer(); list.add(new Token(buffer)); }"
      },
      {
        "txt": "buffer.append(ch); } if(value != null) { if(previous != null && previous.getValue() == value) { previous.increment(); } else { Token token = new Token(value); list.add(token); previous = token; }"
      },
      {
        "txt": "buffer = null; } } return (Token[]) list.toArray( new Token[0] ); } static class Token { static boolean containsTokenWithValue(Token[] tokens, Object value) { int sz = tokens.length; for (int i = 0; i < sz; i++) { if (tokens[i].getValue() == value) {"
      },
      {
        "txt": "return true; } } return false; } private Object value; private int count; Token(Object value) { this.value = value; this.count = 1;"
      },
      {
        "txt": "} Token(Object value, int count) { this.value = value; this.count = count; } void increment() { count++; } int getCount() { return count;"
      },
      {
        "txt": "} Object getValue() { return value; } public boolean equals(Object obj2) { if (obj2 instanceof Token) { Token tok2 = (Token) obj2; if (this.value.getClass() != tok2.value.getClass()) { return false; }"
      },
      {
        "txt": "if (this.count != tok2.count) { return false; } if (this.value instanceof StringBuffer) { return this.value.toString().equals(tok2.value.toString()); } else if (this.value instanceof Number) { return this.value.equals(tok2.value); } else { return this.value == tok2.value; }"
      },
      {
        "txt": "} else { return false; } } public int hashCode() { return this.value.hashCode(); } public String toString() { return StringUtils.repeat(this.value.toString(), this.count); }"
      }
    ]
  }
]
[
  {
    "id": 2339,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 63,
    "end-bug-line": 63,
    "bug": "",
    "fix": "if(entityValue > 0xFFFF) { char[] chrs = Character.toChars(entityValue); out.write(chrs[0]); out.write(chrs[1]); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.IOException; import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') {"
      },
      {
        "txt": "start++; isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try { if(isHex) {"
      },
      {
        "txt": "} else { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } <extra_id_0> return 2 + (end - start) + (isHex ? 1 : 0) + 1; } return 0; } }"
      }
    ]
  },
  {
    "id": 2340,
    "file_path": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
    "start-bug-line": 64,
    "end-bug-line": 64,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3.text.translate; import java.io.IOException;"
      },
      {
        "txt": "import java.io.Writer; public class NumericEntityUnescaper extends CharSequenceTranslator { @Override public int translate(CharSequence input, int index, Writer out) throws IOException { if(input.charAt(index) == '&' && input.charAt(index + 1) == '#') { int start = index + 2; boolean isHex = false; char firstChar = input.charAt(start); if(firstChar == 'x' || firstChar == 'X') { start++;"
      },
      {
        "txt": "isHex = true; } int end = start; while(input.charAt(end) != ';') { end++; } int entityValue; try { if(isHex) { entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);"
      },
      {
        "txt": "entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10); } } catch(NumberFormatException nfe) { return 0; } out.write(entityValue); <extra_id_0> } return 0; } }"
      }
    ]
  }
]
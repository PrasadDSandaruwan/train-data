[
  {
    "id": 2305,
    "file_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
    "start-bug-line": 239,
    "end-bug-line": 239,
    "bug": "",
    "fix": "private static final Map<String, Class<?>> primitiveTypes = new HashMap<String, Class<?>>();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.ObjectStreamClass;"
      },
      {
        "txt": "import java.io.OutputStream; import java.io.Serializable; import java.util.HashMap; import java.util.Map; public class SerializationUtils { public SerializationUtils() { super(); } public static <T extends Serializable> T clone(T object) { if (object == null) {"
      },
      {
        "txt": "return null; } byte[] objectData = serialize(object); ByteArrayInputStream bais = new ByteArrayInputStream(objectData); ClassLoaderAwareObjectInputStream in = null; try { in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()); @SuppressWarnings(\"unchecked\") // see above T readObject = (T) in.readObject(); return readObject;"
      },
      {
        "txt": "} catch (ClassNotFoundException ex) { throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex); } catch (IOException ex) { throw new SerializationException(\"IOException while reading cloned object data\", ex); } finally { try { if (in != null) { in.close(); } } catch (IOException ex) {"
      },
      {
        "txt": "throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex); } } } public static void serialize(Serializable obj, OutputStream outputStream) { if (outputStream == null) { throw new IllegalArgumentException(\"The OutputStream must not be null\"); } ObjectOutputStream out = null; try {"
      },
      {
        "txt": "out = new ObjectOutputStream(outputStream); out.writeObject(obj); } catch (IOException ex) { throw new SerializationException(ex); } finally { try { if (out != null) { out.close(); } } catch (IOException ex) { // NOPMD"
      },
      {
        "txt": "} } } public static byte[] serialize(Serializable obj) { ByteArrayOutputStream baos = new ByteArrayOutputStream(512); serialize(obj, baos); return baos.toByteArray(); } public static Object deserialize(InputStream inputStream) { if (inputStream == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The InputStream must not be null\"); } ObjectInputStream in = null; try { in = new ObjectInputStream(inputStream); return in.readObject(); } catch (ClassNotFoundException ex) { throw new SerializationException(ex); } catch (IOException ex) { throw new SerializationException(ex);"
      },
      {
        "txt": "} finally { try { if (in != null) { in.close(); } } catch (IOException ex) { // NOPMD } } } public static Object deserialize(byte[] objectData) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The byte[] must not be null\"); } ByteArrayInputStream bais = new ByteArrayInputStream(objectData); return deserialize(bais); } static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { <extra_id_0> public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException { super(in); this.classLoader = classLoader; } @Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {"
      },
      {
        "txt": "@Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException { String name = desc.getName(); try { return Class.forName(name, false, classLoader); } catch (ClassNotFoundException ex) { return Class.forName(name, false, Thread.currentThread().getContextClassLoader()); } } }"
      }
    ]
  },
  {
    "id": 2306,
    "file_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
    "start-bug-line": 252,
    "end-bug-line": 252,
    "bug": "",
    "fix": "primitiveTypes.put(\"byte\", byte.class); primitiveTypes.put(\"short\", short.class); primitiveTypes.put(\"int\", int.class); primitiveTypes.put(\"long\", long.class); primitiveTypes.put(\"float\", float.class); primitiveTypes.put(\"double\", double.class); primitiveTypes.put(\"boolean\", boolean.class); primitiveTypes.put(\"char\", char.class); primitiveTypes.put(\"void\", void.class);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3; import java.io.ByteArrayInputStream;"
      },
      {
        "txt": "import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.ObjectStreamClass; import java.io.OutputStream; import java.io.Serializable; import java.util.HashMap; import java.util.Map;"
      },
      {
        "txt": "public class SerializationUtils { public SerializationUtils() { super(); } public static <T extends Serializable> T clone(T object) { if (object == null) { return null; } byte[] objectData = serialize(object); ByteArrayInputStream bais = new ByteArrayInputStream(objectData);"
      },
      {
        "txt": "ClassLoaderAwareObjectInputStream in = null; try { in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()); @SuppressWarnings(\"unchecked\") // see above T readObject = (T) in.readObject(); return readObject; } catch (ClassNotFoundException ex) { throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex); } catch (IOException ex) { throw new SerializationException(\"IOException while reading cloned object data\", ex);"
      },
      {
        "txt": "} finally { try { if (in != null) { in.close(); } } catch (IOException ex) { throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex); } } }"
      },
      {
        "txt": "public static void serialize(Serializable obj, OutputStream outputStream) { if (outputStream == null) { throw new IllegalArgumentException(\"The OutputStream must not be null\"); } ObjectOutputStream out = null; try { out = new ObjectOutputStream(outputStream); out.writeObject(obj); } catch (IOException ex) { throw new SerializationException(ex);"
      },
      {
        "txt": "} finally { try { if (out != null) { out.close(); } } catch (IOException ex) { // NOPMD } } } public static byte[] serialize(Serializable obj) {"
      },
      {
        "txt": "ByteArrayOutputStream baos = new ByteArrayOutputStream(512); serialize(obj, baos); return baos.toByteArray(); } public static Object deserialize(InputStream inputStream) { if (inputStream == null) { throw new IllegalArgumentException(\"The InputStream must not be null\"); } ObjectInputStream in = null; try {"
      },
      {
        "txt": "in = new ObjectInputStream(inputStream); return in.readObject(); } catch (ClassNotFoundException ex) { throw new SerializationException(ex); } catch (IOException ex) { throw new SerializationException(ex); } finally { try { if (in != null) { in.close();"
      },
      {
        "txt": "} } catch (IOException ex) { // NOPMD } } } public static Object deserialize(byte[] objectData) { if (objectData == null) { throw new IllegalArgumentException(\"The byte[] must not be null\"); } ByteArrayInputStream bais = new ByteArrayInputStream(objectData);"
      },
      {
        "txt": "} static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { private ClassLoader classLoader; public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException { super(in); this.classLoader = classLoader; <extra_id_0> @Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException { String name = desc.getName(); try { return Class.forName(name, false, classLoader); } catch (ClassNotFoundException ex) {"
      },
      {
        "txt": "return Class.forName(name, false, classLoader); } catch (ClassNotFoundException ex) { return Class.forName(name, false, Thread.currentThread().getContextClassLoader()); } } }"
      }
    ]
  },
  {
    "id": 2307,
    "file_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
    "start-bug-line": 268,
    "end-bug-line": 268,
    "bug": "",
    "fix": "try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.ObjectStreamClass; import java.io.OutputStream;"
      },
      {
        "txt": "import java.io.Serializable; import java.util.HashMap; import java.util.Map; public class SerializationUtils { public SerializationUtils() { super(); } public static <T extends Serializable> T clone(T object) { if (object == null) { return null;"
      },
      {
        "txt": "} byte[] objectData = serialize(object); ByteArrayInputStream bais = new ByteArrayInputStream(objectData); ClassLoaderAwareObjectInputStream in = null; try { in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()); @SuppressWarnings(\"unchecked\") // see above T readObject = (T) in.readObject(); return readObject; } catch (ClassNotFoundException ex) {"
      },
      {
        "txt": "throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex); } catch (IOException ex) { throw new SerializationException(\"IOException while reading cloned object data\", ex); } finally { try { if (in != null) { in.close(); } } catch (IOException ex) { throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex);"
      },
      {
        "txt": "} } } public static void serialize(Serializable obj, OutputStream outputStream) { if (outputStream == null) { throw new IllegalArgumentException(\"The OutputStream must not be null\"); } ObjectOutputStream out = null; try { out = new ObjectOutputStream(outputStream);"
      },
      {
        "txt": "out.writeObject(obj); } catch (IOException ex) { throw new SerializationException(ex); } finally { try { if (out != null) { out.close(); } } catch (IOException ex) { // NOPMD }"
      },
      {
        "txt": "} } public static byte[] serialize(Serializable obj) { ByteArrayOutputStream baos = new ByteArrayOutputStream(512); serialize(obj, baos); return baos.toByteArray(); } public static Object deserialize(InputStream inputStream) { if (inputStream == null) { throw new IllegalArgumentException(\"The InputStream must not be null\");"
      },
      {
        "txt": "} ObjectInputStream in = null; try { in = new ObjectInputStream(inputStream); return in.readObject(); } catch (ClassNotFoundException ex) { throw new SerializationException(ex); } catch (IOException ex) { throw new SerializationException(ex); } finally {"
      },
      {
        "txt": "try { if (in != null) { in.close(); } } catch (IOException ex) { // NOPMD } } } public static Object deserialize(byte[] objectData) { if (objectData == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The byte[] must not be null\"); } ByteArrayInputStream bais = new ByteArrayInputStream(objectData); return deserialize(bais); } static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { private ClassLoader classLoader; public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException { super(in); this.classLoader = classLoader;"
      },
      {
        "txt": "@Override protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException { String name = desc.getName(); try { return Class.forName(name, false, classLoader); } catch (ClassNotFoundException ex) { <extra_id_0> } } } }"
      }
    ]
  },
  {
    "id": 2308,
    "file_path": "src/main/java/org/apache/commons/lang3/SerializationUtils.java",
    "start-bug-line": 269,
    "end-bug-line": 269,
    "bug": "",
    "fix": "} catch (ClassNotFoundException cnfe) { Class<?> cls = primitiveTypes.get(name); if (cls != null) return cls; else throw cnfe; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3; import java.io.ByteArrayInputStream; import java.io.ByteArrayOutputStream; import java.io.IOException; import java.io.InputStream; import java.io.ObjectInputStream; import java.io.ObjectOutputStream; import java.io.ObjectStreamClass; import java.io.OutputStream; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.Map; public class SerializationUtils { public SerializationUtils() { super(); } public static <T extends Serializable> T clone(T object) { if (object == null) { return null; }"
      },
      {
        "txt": "byte[] objectData = serialize(object); ByteArrayInputStream bais = new ByteArrayInputStream(objectData); ClassLoaderAwareObjectInputStream in = null; try { in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader()); @SuppressWarnings(\"unchecked\") // see above T readObject = (T) in.readObject(); return readObject; } catch (ClassNotFoundException ex) { throw new SerializationException(\"ClassNotFoundException while reading cloned object data\", ex);"
      },
      {
        "txt": "} catch (IOException ex) { throw new SerializationException(\"IOException while reading cloned object data\", ex); } finally { try { if (in != null) { in.close(); } } catch (IOException ex) { throw new SerializationException(\"IOException on closing cloned object data InputStream.\", ex); }"
      },
      {
        "txt": "} } public static void serialize(Serializable obj, OutputStream outputStream) { if (outputStream == null) { throw new IllegalArgumentException(\"The OutputStream must not be null\"); } ObjectOutputStream out = null; try { out = new ObjectOutputStream(outputStream); out.writeObject(obj);"
      },
      {
        "txt": "} catch (IOException ex) { throw new SerializationException(ex); } finally { try { if (out != null) { out.close(); } } catch (IOException ex) { // NOPMD } }"
      },
      {
        "txt": "} public static byte[] serialize(Serializable obj) { ByteArrayOutputStream baos = new ByteArrayOutputStream(512); serialize(obj, baos); return baos.toByteArray(); } public static Object deserialize(InputStream inputStream) { if (inputStream == null) { throw new IllegalArgumentException(\"The InputStream must not be null\"); }"
      },
      {
        "txt": "ObjectInputStream in = null; try { in = new ObjectInputStream(inputStream); return in.readObject(); } catch (ClassNotFoundException ex) { throw new SerializationException(ex); } catch (IOException ex) { throw new SerializationException(ex); } finally { try {"
      },
      {
        "txt": "if (in != null) { in.close(); } } catch (IOException ex) { // NOPMD } } } public static Object deserialize(byte[] objectData) { if (objectData == null) { throw new IllegalArgumentException(\"The byte[] must not be null\");"
      },
      {
        "txt": "} ByteArrayInputStream bais = new ByteArrayInputStream(objectData); return deserialize(bais); } static class ClassLoaderAwareObjectInputStream extends ObjectInputStream { private ClassLoader classLoader; public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException { super(in); this.classLoader = classLoader; }"
      },
      {
        "txt": "protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException { String name = desc.getName(); try { return Class.forName(name, false, classLoader); } catch (ClassNotFoundException ex) { return Class.forName(name, false, Thread.currentThread().getContextClassLoader()); <extra_id_0> } } }"
      }
    ]
  }
]
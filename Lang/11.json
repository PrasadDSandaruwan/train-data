[
  {
    "id": 2301,
    "file_path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
    "start-bug-line": 245,
    "end-bug-line": 245,
    "bug": "",
    "fix": "} else { if (end <= start) { throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.lang3; import java.util.Random; public class RandomStringUtils { private static final Random RANDOM = new Random(); public RandomStringUtils() {"
      },
      {
        "txt": "super(); } public static String random(int count) { return random(count, false, false); } public static String randomAscii(int count) { return random(count, 32, 127, false, false); } public static String randomAlphabetic(int count) { return random(count, true, false);"
      },
      {
        "txt": "} public static String randomAlphanumeric(int count) { return random(count, true, true); } public static String randomNumeric(int count) { return random(count, false, true); } public static String random(int count, boolean letters, boolean numbers) { return random(count, 0, 0, letters, numbers); }"
      },
      {
        "txt": "public static String random(int count, int start, int end, boolean letters, boolean numbers) { return random(count, start, end, letters, numbers, null, RANDOM); } public static String random(int count, int start, int end, boolean letters, boolean numbers, char... chars) { return random(count, start, end, letters, numbers, chars, RANDOM); } public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) { if (count == 0) { return \"\";"
      },
      {
        "txt": "} else if (count < 0) { throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\"); } if (chars != null && chars.length == 0) { throw new IllegalArgumentException(\"The chars array must not be empty\"); } if (start == 0 && end == 0) { if (chars != null) { end = chars.length; } else {"
      },
      {
        "txt": "end = Integer.MAX_VALUE; } else { end = 'z' + 1; start = ' '; } } <extra_id_0> char[] buffer = new char[count]; int gap = end - start; while (count-- != 0) { char ch; if (chars == null) { ch = (char) (random.nextInt(gap) + start);"
      },
      {
        "txt": "if (chars == null) { ch = (char) (random.nextInt(gap) + start); } else { ch = chars[random.nextInt(gap) + start]; } if (letters && Character.isLetter(ch) || numbers && Character.isDigit(ch) || !letters && !numbers) { if(ch >= 56320 && ch <= 57343) { if(count == 0) {"
      },
      {
        "txt": "count++; } else { buffer[count] = ch; count--; buffer[count] = (char) (55296 + random.nextInt(128)); } } else if(ch >= 55296 && ch <= 56191) { if(count == 0) { count++; } else {"
      },
      {
        "txt": "buffer[count] = (char) (56320 + random.nextInt(128)); count--; buffer[count] = ch; } } else if(ch >= 56192 && ch <= 56319) { count++; } else { buffer[count] = ch; } } else {"
      },
      {
        "txt": "count++; } } return new String(buffer); } public static String random(int count, String chars) { if (chars == null) { return random(count, 0, 0, false, false, null, RANDOM); } return random(count, chars.toCharArray());"
      },
      {
        "txt": "} public static String random(int count, char... chars) { if (chars == null) { return random(count, 0, 0, false, false, null, RANDOM); } return random(count, 0, chars.length, false, false, chars, RANDOM); }"
      }
    ]
  }
]
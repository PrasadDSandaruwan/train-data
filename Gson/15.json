[
  {
    "id": 1199,
    "file_path": "gson/src/main/java/com/google/gson/stream/JsonWriter.java",
    "start-bug-line": 495,
    "end-bug-line": 495,
    "bug": "if (Double.isNaN(value) || Double.isInfinite(value)) {",
    "fix": "if (!lenient && (Double.isNaN(value) || Double.isInfinite(value))) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.stream; import java.io.Closeable; import java.io.Flushable;"
      },
      {
        "txt": "import java.io.IOException; import java.io.Writer; import static com.google.gson.stream.JsonScope.DANGLING_NAME; import static com.google.gson.stream.JsonScope.EMPTY_ARRAY; import static com.google.gson.stream.JsonScope.EMPTY_DOCUMENT; import static com.google.gson.stream.JsonScope.EMPTY_OBJECT; import static com.google.gson.stream.JsonScope.NONEMPTY_ARRAY; import static com.google.gson.stream.JsonScope.NONEMPTY_DOCUMENT; import static com.google.gson.stream.JsonScope.NONEMPTY_OBJECT; public class JsonWriter implements Closeable, Flushable {"
      },
      {
        "txt": "private static final String[] REPLACEMENT_CHARS; private static final String[] HTML_SAFE_REPLACEMENT_CHARS; static { REPLACEMENT_CHARS = new String[128]; for (int i = 0; i <= 0x1f; i++) { REPLACEMENT_CHARS[i] = String.format(\"\\\\u%04x\", (int) i); } REPLACEMENT_CHARS['\"'] = \"\\\\\\\"\"; REPLACEMENT_CHARS['\\\\'] = \"\\\\\\\\\"; REPLACEMENT_CHARS['\\t'] = \"\\\\t\";"
      },
      {
        "txt": "REPLACEMENT_CHARS['\\b'] = \"\\\\b\"; REPLACEMENT_CHARS['\\n'] = \"\\\\n\"; REPLACEMENT_CHARS['\\r'] = \"\\\\r\"; REPLACEMENT_CHARS['\\f'] = \"\\\\f\"; HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone(); HTML_SAFE_REPLACEMENT_CHARS['<'] = \"\\\\u003c\"; HTML_SAFE_REPLACEMENT_CHARS['>'] = \"\\\\u003e\"; HTML_SAFE_REPLACEMENT_CHARS['&'] = \"\\\\u0026\"; HTML_SAFE_REPLACEMENT_CHARS['='] = \"\\\\u003d\"; HTML_SAFE_REPLACEMENT_CHARS['\\''] = \"\\\\u0027\";"
      },
      {
        "txt": "} private final Writer out; private int[] stack = new int[32]; private int stackSize = 0; { push(EMPTY_DOCUMENT); } private String indent; private String separator = \":\"; private boolean lenient;"
      },
      {
        "txt": "private boolean htmlSafe; private String deferredName; private boolean serializeNulls = true; public JsonWriter(Writer out) { if (out == null) { throw new NullPointerException(\"out == null\"); } this.out = out; } public final void setIndent(String indent) {"
      },
      {
        "txt": "if (indent.length() == 0) { this.indent = null; this.separator = \":\"; } else { this.indent = indent; this.separator = \": \"; } } public final void setLenient(boolean lenient) { this.lenient = lenient;"
      },
      {
        "txt": "} public boolean isLenient() { return lenient; } public final void setHtmlSafe(boolean htmlSafe) { this.htmlSafe = htmlSafe; } public final boolean isHtmlSafe() { return htmlSafe; }"
      },
      {
        "txt": "public final void setSerializeNulls(boolean serializeNulls) { this.serializeNulls = serializeNulls; } public final boolean getSerializeNulls() { return serializeNulls; } public JsonWriter beginArray() throws IOException { writeDeferredName(); return open(EMPTY_ARRAY, \"[\"); }"
      },
      {
        "txt": "public JsonWriter endArray() throws IOException { return close(EMPTY_ARRAY, NONEMPTY_ARRAY, \"]\"); } public JsonWriter beginObject() throws IOException { writeDeferredName(); return open(EMPTY_OBJECT, \"{\"); } public JsonWriter endObject() throws IOException { return close(EMPTY_OBJECT, NONEMPTY_OBJECT, \"}\"); }"
      },
      {
        "txt": "private JsonWriter open(int empty, String openBracket) throws IOException { beforeValue(); push(empty); out.write(openBracket); return this; } private JsonWriter close(int empty, int nonempty, String closeBracket) throws IOException { int context = peek(); if (context != nonempty && context != empty) {"
      },
      {
        "txt": "throw new IllegalStateException(\"Nesting problem.\"); } if (deferredName != null) { throw new IllegalStateException(\"Dangling name: \" + deferredName); } stackSize--; if (context == nonempty) { newline(); } out.write(closeBracket);"
      },
      {
        "txt": "return this; } private void push(int newTop) { if (stackSize == stack.length) { int[] newStack = new int[stackSize * 2]; System.arraycopy(stack, 0, newStack, 0, stackSize); stack = newStack; } stack[stackSize++] = newTop; }"
      },
      {
        "txt": "private int peek() { if (stackSize == 0) { throw new IllegalStateException(\"JsonWriter is closed.\"); } return stack[stackSize - 1]; } private void replaceTop(int topOfStack) { stack[stackSize - 1] = topOfStack; } public JsonWriter name(String name) throws IOException {"
      },
      {
        "txt": "if (name == null) { throw new NullPointerException(\"name == null\"); } if (deferredName != null) { throw new IllegalStateException(); } if (stackSize == 0) { throw new IllegalStateException(\"JsonWriter is closed.\"); } deferredName = name;"
      },
      {
        "txt": "return this; } private void writeDeferredName() throws IOException { if (deferredName != null) { beforeName(); string(deferredName); deferredName = null; } } public JsonWriter value(String value) throws IOException {"
      },
      {
        "txt": "if (value == null) { return nullValue(); } writeDeferredName(); beforeValue(); string(value); return this; } public JsonWriter jsonValue(String value) throws IOException { if (value == null) {"
      },
      {
        "txt": "return nullValue(); } writeDeferredName(); beforeValue(); out.append(value); return this; } public JsonWriter nullValue() throws IOException { if (deferredName != null) { if (serializeNulls) {"
      },
      {
        "txt": "writeDeferredName(); } else { deferredName = null; return this; // skip the name and the value } } beforeValue(); out.write(\"null\"); return this; }"
      },
      {
        "txt": "public JsonWriter value(boolean value) throws IOException { writeDeferredName(); beforeValue(); out.write(value ? \"true\" : \"false\"); return this; } public JsonWriter value(Boolean value) throws IOException { if (value == null) { return nullValue(); }"
      },
      {
        "txt": "beforeValue(); out.write(value ? \"true\" : \"false\"); return this; } public JsonWriter value(double value) throws IOException { writeDeferredName(); <extra_id_0> throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(Double.toString(value)); return this; }"
      },
      {
        "txt": "return this; } public JsonWriter value(long value) throws IOException { writeDeferredName(); beforeValue(); out.write(Long.toString(value)); return this; } public JsonWriter value(Number value) throws IOException { if (value == null) {"
      },
      {
        "txt": "return nullValue(); } writeDeferredName(); String string = value.toString(); if (!lenient && (string.equals(\"-Infinity\") || string.equals(\"Infinity\") || string.equals(\"NaN\"))) { throw new IllegalArgumentException(\"Numeric values must be finite, but was \" + value); } beforeValue(); out.append(string);"
      },
      {
        "txt": "return this; } public void flush() throws IOException { if (stackSize == 0) { throw new IllegalStateException(\"JsonWriter is closed.\"); } out.flush(); } public void close() throws IOException { out.close();"
      },
      {
        "txt": "int size = stackSize; if (size > 1 || size == 1 && stack[size - 1] != NONEMPTY_DOCUMENT) { throw new IOException(\"Incomplete document\"); } stackSize = 0; } private void string(String value) throws IOException { String[] replacements = htmlSafe ? HTML_SAFE_REPLACEMENT_CHARS : REPLACEMENT_CHARS; out.write(\"\\\"\"); int last = 0;"
      },
      {
        "txt": "int length = value.length(); for (int i = 0; i < length; i++) { char c = value.charAt(i); String replacement; if (c < 128) { replacement = replacements[c]; if (replacement == null) { continue; } } else if (c == '\\u2028') {"
      },
      {
        "txt": "replacement = \"\\\\u2028\"; } else if (c == '\\u2029') { replacement = \"\\\\u2029\"; } else { continue; } if (last < i) { out.write(value, last, i - last); } out.write(replacement);"
      },
      {
        "txt": "last = i + 1; } if (last < length) { out.write(value, last, length - last); } out.write(\"\\\"\"); } private void newline() throws IOException { if (indent == null) { return;"
      },
      {
        "txt": "} out.write(\"\\n\"); for (int i = 1, size = stackSize; i < size; i++) { out.write(indent); } } private void beforeName() throws IOException { int context = peek(); if (context == NONEMPTY_OBJECT) { // first in object out.write(',');"
      },
      {
        "txt": "} else if (context != EMPTY_OBJECT) { // not in an object! throw new IllegalStateException(\"Nesting problem.\"); } newline(); replaceTop(DANGLING_NAME); } @SuppressWarnings(\"fallthrough\") private void beforeValue() throws IOException { switch (peek()) { case NONEMPTY_DOCUMENT:"
      },
      {
        "txt": "if (!lenient) { throw new IllegalStateException( \"JSON must have only one top-level value.\"); } case EMPTY_DOCUMENT: // first in document replaceTop(NONEMPTY_DOCUMENT); break; case EMPTY_ARRAY: // first in array replaceTop(NONEMPTY_ARRAY); newline();"
      },
      {
        "txt": "break; case NONEMPTY_ARRAY: // another in array out.append(','); newline(); break; case DANGLING_NAME: // value for name out.append(separator); replaceTop(NONEMPTY_OBJECT); break; default:"
      },
      {
        "txt": "throw new IllegalStateException(\"Nesting problem.\"); } }"
      }
    ]
  }
]
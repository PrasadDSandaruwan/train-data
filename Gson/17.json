[
  {
    "id": 1202,
    "file_path": "gson/src/main/java/com/google/gson/DefaultDateTypeAdapter.java",
    "start-bug-line": 99,
    "end-bug-line": 100,
    "bug": "if (in.peek() != JsonToken.STRING) { throw new JsonParseException(\"The date should be a string value\");",
    "fix": "if (in.peek() == JsonToken.NULL) { in.nextNull(); return null;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.io.IOException; import java.sql.Timestamp;"
      },
      {
        "txt": "import java.text.DateFormat; import java.text.ParseException; import java.text.ParsePosition; import java.text.SimpleDateFormat; import java.util.Date; import java.util.Locale; import com.google.gson.internal.bind.util.ISO8601Utils; import com.google.gson.stream.JsonReader; import com.google.gson.stream.JsonToken; import com.google.gson.stream.JsonWriter;"
      },
      {
        "txt": "final class DefaultDateTypeAdapter extends TypeAdapter<Date> { private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\"; private final Class<? extends Date> dateType; private final DateFormat enUsFormat; private final DateFormat localFormat; DefaultDateTypeAdapter(Class<? extends Date> dateType) { this(dateType, DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US), DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT)); }"
      },
      {
        "txt": "DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern) { this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern)); } DefaultDateTypeAdapter(Class<? extends Date> dateType, int style) { this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style)); } public DefaultDateTypeAdapter(int dateStyle, int timeStyle) { this(Date.class, DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US), DateFormat.getDateTimeInstance(dateStyle, timeStyle));"
      },
      {
        "txt": "} public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle) { this(dateType, DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US), DateFormat.getDateTimeInstance(dateStyle, timeStyle)); } DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) { if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) { throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType); }"
      },
      {
        "txt": "this.dateType = dateType; this.enUsFormat = enUsFormat; this.localFormat = localFormat; } @Override public void write(JsonWriter out, Date value) throws IOException { if (value == null) { out.nullValue(); return; }"
      },
      {
        "txt": "String dateFormatAsString = enUsFormat.format(value); out.value(dateFormatAsString); } } @Override public Date read(JsonReader in) throws IOException { <extra_id_0> } Date date = deserializeToDate(in.nextString()); if (dateType == Date.class) { return date; } else if (dateType == Timestamp.class) { return new Timestamp(date.getTime());"
      },
      {
        "txt": "} else if (dateType == Timestamp.class) { return new Timestamp(date.getTime()); } else if (dateType == java.sql.Date.class) { return new java.sql.Date(date.getTime()); } else { throw new AssertionError(); } } private Date deserializeToDate(String s) { synchronized (localFormat) {"
      },
      {
        "txt": "try { return localFormat.parse(s); } catch (ParseException ignored) {} try { return enUsFormat.parse(s); } catch (ParseException ignored) {} try { return ISO8601Utils.parse(s, new ParsePosition(0)); } catch (ParseException e) { throw new JsonSyntaxException(s, e);"
      },
      {
        "txt": "} } } @Override public String toString() { StringBuilder sb = new StringBuilder(); sb.append(SIMPLE_NAME); sb.append('(').append(localFormat.getClass().getSimpleName()).append(')'); return sb.toString(); }"
      }
    ]
  }
]
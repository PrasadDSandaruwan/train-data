[
  {
    "id": 1149,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 93,
    "end-bug-line": 93,
    "bug": "",
    "fix": "} else if (typeToEvaluate instanceof TypeVariable<?>) { Type theSearchedType = null;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field;"
      },
      {
        "txt": "import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type));"
      },
      {
        "txt": "return new TypeInfoArray(type); } public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {"
      },
      {
        "txt": "if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) {"
      },
      {
        "txt": "GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) {"
      },
      {
        "txt": "TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; <extra_id_0> } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {"
      },
      {
        "txt": "Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) {"
      },
      {
        "txt": "return i; } } throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1150,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 94,
    "end-bug-line": 94,
    "bug": "",
    "fix": "do { theSearchedType = extractTypeForHierarchy(parentType, (TypeVariable<?>) typeToEvaluate); } while ((theSearchedType != null) && (theSearchedType instanceof TypeVariable<?>));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field;"
      },
      {
        "txt": "import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type));"
      },
      {
        "txt": "return new TypeInfoArray(type); } public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {"
      },
      {
        "txt": "if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) {"
      },
      {
        "txt": "GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) {"
      },
      {
        "txt": "TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; <extra_id_0> } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) {"
      },
      {
        "txt": "Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) {"
      },
      {
        "txt": "return i; } } throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1151,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 95,
    "end-bug-line": 95,
    "bug": "",
    "fix": "if (theSearchedType != null) { return theSearchedType; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field;"
      },
      {
        "txt": "import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type));"
      },
      {
        "txt": "return new TypeInfoArray(type); } public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) {"
      },
      {
        "txt": "if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate; } else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) {"
      },
      {
        "txt": "GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType(); Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) {"
      },
      {
        "txt": "TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate; TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; <extra_id_0> throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) { WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);"
      },
      {
        "txt": "WildcardType castedType = (WildcardType) typeToEvaluate; return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments);"
      },
      {
        "txt": "Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i;"
      },
      {
        "txt": "} } throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1152,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 109,
    "end-bug-line": 109,
    "bug": "",
    "fix": "private static Type extractTypeForHierarchy(Type parentType, TypeVariable<?> typeToEvaluate) { Class<?> rawParentType = null; if (parentType instanceof Class<?>) { rawParentType = (Class<?>) parentType; } else if (parentType instanceof ParameterizedType) { ParameterizedType parentTypeAsPT = (ParameterizedType) parentType; rawParentType = (Class<?>) parentTypeAsPT.getRawType(); } else { return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type)); return new TypeInfoArray(type); }"
      },
      {
        "txt": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType();"
      },
      {
        "txt": "Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;"
      },
      {
        "txt": "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) {"
      },
      {
        "txt": "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } <extra_id_0> private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
      },
      {
        "txt": "for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i; }"
      },
      {
        "txt": "} throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1153,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 110,
    "end-bug-line": 110,
    "bug": "",
    "fix": "Type superClass = rawParentType.getGenericSuperclass(); if (superClass instanceof ParameterizedType && ((ParameterizedType) superClass).getRawType() == typeToEvaluate.getGenericDeclaration()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type)); return new TypeInfoArray(type); }"
      },
      {
        "txt": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType();"
      },
      {
        "txt": "Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;"
      },
      {
        "txt": "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) {"
      },
      {
        "txt": "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } <extra_id_0> private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
      },
      {
        "txt": "for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i; }"
      },
      {
        "txt": "} throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1154,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 111,
    "end-bug-line": 111,
    "bug": "",
    "fix": "TypeVariable<?>[] classTypeVariables = ((Class<?>) ((ParameterizedType) superClass).getRawType()).getTypeParameters(); int indexOfActualTypeArgument = getIndex(classTypeVariables, typeToEvaluate);  Type[] actualTypeArguments = null; if (parentType instanceof Class<?>) { actualTypeArguments = ((ParameterizedType) superClass).getActualTypeArguments(); } else if (parentType instanceof ParameterizedType) { actualTypeArguments = ((ParameterizedType) parentType).getActualTypeArguments(); } else { return null; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type)); return new TypeInfoArray(type); }"
      },
      {
        "txt": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType();"
      },
      {
        "txt": "Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;"
      },
      {
        "txt": "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) {"
      },
      {
        "txt": "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } <extra_id_0> private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
      },
      {
        "txt": "for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i; }"
      },
      {
        "txt": "} throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1155,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 112,
    "end-bug-line": 112,
    "bug": "",
    "fix": "return actualTypeArguments[indexOfActualTypeArgument]; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type)); return new TypeInfoArray(type); }"
      },
      {
        "txt": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType();"
      },
      {
        "txt": "Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;"
      },
      {
        "txt": "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) {"
      },
      {
        "txt": "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } <extra_id_0> private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
      },
      {
        "txt": "for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i; }"
      },
      {
        "txt": "} throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  },
  {
    "id": 1156,
    "file_path": "gson/src/main/java/com/google/gson/TypeInfoFactory.java",
    "start-bug-line": 113,
    "end-bug-line": 113,
    "bug": "",
    "fix": "Type searchedType = null; if (superClass != null) { searchedType = extractTypeForHierarchy(superClass, typeToEvaluate); } return searchedType; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson; import java.lang.reflect.Field; import java.lang.reflect.GenericArrayType; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.lang.reflect.TypeVariable; import java.lang.reflect.WildcardType; final class TypeInfoFactory { private TypeInfoFactory() { } public static TypeInfoArray getTypeInfoForArray(Type type) { Preconditions.checkArgument(TypeUtils.isArray(type)); return new TypeInfoArray(type); }"
      },
      {
        "txt": "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF) { Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF); Type type = f.getGenericType(); Type actualType = getActualType(type, typeDefiningF, classDefiningF); return new TypeInfo(actualType); } private static Type getActualType( Type typeToEvaluate, Type parentType, Class<?> rawParentClass) { if (typeToEvaluate instanceof Class<?>) { return typeToEvaluate;"
      },
      {
        "txt": "} else if (typeToEvaluate instanceof ParameterizedType) { ParameterizedType castedType = (ParameterizedType) typeToEvaluate; Type owner = castedType.getOwnerType(); Type[] actualTypeParameters = extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass); Type rawType = castedType.getRawType(); return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner); } else if (typeToEvaluate instanceof GenericArrayType) { GenericArrayType castedType = (GenericArrayType) typeToEvaluate; Type componentType = castedType.getGenericComponentType();"
      },
      {
        "txt": "Type actualType = getActualType(componentType, parentType, rawParentClass); if (componentType.equals(actualType)) { return castedType; } return actualType instanceof Class<?> ? TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType)) : new GenericArrayTypeImpl(actualType); } else if (typeToEvaluate instanceof TypeVariable<?>) { if (parentType instanceof ParameterizedType) { TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;"
      },
      {
        "txt": "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters(); ParameterizedType objParameterizedType = (ParameterizedType) parentType; int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable); Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments(); return actualTypeArguments[indexOfActualTypeArgument]; } throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType + \".\\n Are you missing the use of TypeToken idiom?\\n See \" + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\"); } else if (typeToEvaluate instanceof WildcardType) {"
      },
      {
        "txt": "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass); } else { throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \" + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\"); } } <extra_id_0> private static Type[] extractRealTypes( Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass) { Preconditions.checkNotNull(actualTypeArguments); Type[] retTypes = new Type[actualTypeArguments.length]; for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);"
      },
      {
        "txt": "for (int i = 0; i < actualTypeArguments.length; ++i) { retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass); } return retTypes; } private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type) { for (int i = 0; i < types.length; ++i) { if (type.equals(types[i])) { return i; }"
      },
      {
        "txt": "} throw new IllegalStateException( \"How can the type variable not be present in the class declaration!\"); }"
      }
    ]
  }
]
[
  {
    "id": 1180,
    "file_path": "gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "start-bug-line": 23,
    "end-bug-line": 23,
    "bug": "",
    "fix": "import java.lang.reflect.Modifier;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal; import java.io.ObjectInputStream; import java.io.ObjectStreamClass; import java.lang.reflect.Field; import java.lang.reflect.Method; <extra_id_0> public abstract class UnsafeAllocator { public abstract <T> T newInstance(Class<T> c) throws Exception; public static UnsafeAllocator create() { try { Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\");"
      },
      {
        "txt": "Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); final Object unsafe = f.get(null); final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) allocateInstance.invoke(unsafe, c);"
      },
      {
        "txt": "} }; } catch (Exception ignored) { } try { Method getConstructorId = ObjectStreamClass.class .getDeclaredMethod(\"getConstructorId\", Class.class); getConstructorId.setAccessible(true); final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); final Method newInstance = ObjectStreamClass.class"
      },
      {
        "txt": ".getDeclaredMethod(\"newInstance\", Class.class, int.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, constructorId); } }; } catch (Exception ignored) {"
      },
      {
        "txt": "} try { final Method newInstance = ObjectInputStream.class .getDeclaredMethod(\"newInstance\", Class.class, Class.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, Object.class);"
      },
      {
        "txt": "} }; } catch (Exception ignored) { } return new UnsafeAllocator() { @Override public <T> T newInstance(Class<T> c) { throw new UnsupportedOperationException(\"Cannot allocate \" + c); } };"
      }
    ]
  },
  {
    "id": 1181,
    "file_path": "gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "start-bug-line": 48,
    "end-bug-line": 48,
    "bug": "",
    "fix": "assertInstantiable(c);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ObjectInputStream; import java.io.ObjectStreamClass; import java.lang.reflect.Field; import java.lang.reflect.Method; public abstract class UnsafeAllocator { public abstract <T> T newInstance(Class<T> c) throws Exception; public static UnsafeAllocator create() { try { Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\");"
      },
      {
        "txt": "final Object unsafe = f.get(null); final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { <extra_id_0> } }; } catch (Exception ignored) { } try { Method getConstructorId = ObjectStreamClass.class"
      },
      {
        "txt": "try { Method getConstructorId = ObjectStreamClass.class .getDeclaredMethod(\"getConstructorId\", Class.class); getConstructorId.setAccessible(true); final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); final Method newInstance = ObjectStreamClass.class .getDeclaredMethod(\"newInstance\", Class.class, int.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, constructorId); } }; } catch (Exception ignored) { } try { final Method newInstance = ObjectInputStream.class .getDeclaredMethod(\"newInstance\", Class.class, Class.class);"
      },
      {
        "txt": "newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, Object.class); } }; } catch (Exception ignored) { }"
      },
      {
        "txt": "return new UnsafeAllocator() { @Override public <T> T newInstance(Class<T> c) { throw new UnsupportedOperationException(\"Cannot allocate \" + c); } }; }"
      }
    ]
  },
  {
    "id": 1182,
    "file_path": "gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "start-bug-line": 71,
    "end-bug-line": 71,
    "bug": "",
    "fix": "assertInstantiable(c);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal; import java.io.ObjectInputStream; import java.io.ObjectStreamClass; import java.lang.reflect.Field; import java.lang.reflect.Method; public abstract class UnsafeAllocator { public abstract <T> T newInstance(Class<T> c) throws Exception; public static UnsafeAllocator create() {"
      },
      {
        "txt": "try { Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); final Object unsafe = f.get(null); final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception {"
      },
      {
        "txt": "return (T) allocateInstance.invoke(unsafe, c); } }; } catch (Exception ignored) { } try { Method getConstructorId = ObjectStreamClass.class .getDeclaredMethod(\"getConstructorId\", Class.class); getConstructorId.setAccessible(true); final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);"
      },
      {
        "txt": ".getDeclaredMethod(\"newInstance\", Class.class, int.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { <extra_id_0> } }; } catch (Exception ignored) { } try { final Method newInstance = ObjectInputStream.class"
      },
      {
        "txt": "try { final Method newInstance = ObjectInputStream.class .getDeclaredMethod(\"newInstance\", Class.class, Class.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, Object.class); }"
      },
      {
        "txt": "}; } catch (Exception ignored) { } return new UnsafeAllocator() { @Override public <T> T newInstance(Class<T> c) { throw new UnsupportedOperationException(\"Cannot allocate \" + c); } }; }"
      }
    ]
  },
  {
    "id": 1183,
    "file_path": "gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "start-bug-line": 90,
    "end-bug-line": 90,
    "bug": "",
    "fix": "assertInstantiable(c);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.ObjectInputStream; import java.io.ObjectStreamClass; import java.lang.reflect.Field; import java.lang.reflect.Method; public abstract class UnsafeAllocator { public abstract <T> T newInstance(Class<T> c) throws Exception; public static UnsafeAllocator create() { try { Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\");"
      },
      {
        "txt": "f.setAccessible(true); final Object unsafe = f.get(null); final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) allocateInstance.invoke(unsafe, c); } };"
      },
      {
        "txt": "} catch (Exception ignored) { } try { Method getConstructorId = ObjectStreamClass.class .getDeclaredMethod(\"getConstructorId\", Class.class); getConstructorId.setAccessible(true); final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); final Method newInstance = ObjectStreamClass.class .getDeclaredMethod(\"newInstance\", Class.class, int.class); newInstance.setAccessible(true);"
      },
      {
        "txt": "return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, constructorId); } }; } catch (Exception ignored) { } try {"
      },
      {
        "txt": ".getDeclaredMethod(\"newInstance\", Class.class, Class.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { <extra_id_0> } }; } catch (Exception ignored) { } return new UnsafeAllocator() { @Override"
      },
      {
        "txt": "return new UnsafeAllocator() { @Override public <T> T newInstance(Class<T> c) { throw new UnsupportedOperationException(\"Cannot allocate \" + c); } }; }"
      }
    ]
  },
  {
    "id": 1184,
    "file_path": "gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java",
    "start-bug-line": 110,
    "end-bug-line": 110,
    "bug": "",
    "fix": "private static void assertInstantiable(Class<?> c) { int modifiers = c.getModifiers(); if (Modifier.isInterface(modifiers)) { throw new UnsupportedOperationException(\"Interface can't be instantiated! Interface name: \" + c.getName()); } if (Modifier.isAbstract(modifiers)) { throw new UnsupportedOperationException(\"Abstract class can't be instantiated! Class name: \" + c.getName()); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal; import java.io.ObjectInputStream; import java.io.ObjectStreamClass;"
      },
      {
        "txt": "import java.lang.reflect.Field; import java.lang.reflect.Method; public abstract class UnsafeAllocator { public abstract <T> T newInstance(Class<T> c) throws Exception; public static UnsafeAllocator create() { try { Class<?> unsafeClass = Class.forName(\"sun.misc.Unsafe\"); Field f = unsafeClass.getDeclaredField(\"theUnsafe\"); f.setAccessible(true); final Object unsafe = f.get(null);"
      },
      {
        "txt": "final Method allocateInstance = unsafeClass.getMethod(\"allocateInstance\", Class.class); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) allocateInstance.invoke(unsafe, c); } }; } catch (Exception ignored) { }"
      },
      {
        "txt": "try { Method getConstructorId = ObjectStreamClass.class .getDeclaredMethod(\"getConstructorId\", Class.class); getConstructorId.setAccessible(true); final int constructorId = (Integer) getConstructorId.invoke(null, Object.class); final Method newInstance = ObjectStreamClass.class .getDeclaredMethod(\"newInstance\", Class.class, int.class); newInstance.setAccessible(true); return new UnsafeAllocator() { @Override"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, constructorId); } }; } catch (Exception ignored) { } try { final Method newInstance = ObjectInputStream.class .getDeclaredMethod(\"newInstance\", Class.class, Class.class);"
      },
      {
        "txt": "newInstance.setAccessible(true); return new UnsafeAllocator() { @Override @SuppressWarnings(\"unchecked\") public <T> T newInstance(Class<T> c) throws Exception { return (T) newInstance.invoke(null, c, Object.class); } }; } catch (Exception ignored) { }"
      },
      {
        "txt": "@Override public <T> T newInstance(Class<T> c) { throw new UnsupportedOperationException(\"Cannot allocate \" + c); } }; } <extra_id_0>"
      }
    ]
  }
]
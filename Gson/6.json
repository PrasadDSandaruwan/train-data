[
  {
    "id": 1174,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
    "start-bug-line": 67,
    "end-bug-line": 67,
    "bug": "",
    "fix": "if (typeAdapter != null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import com.google.gson.Gson; import com.google.gson.TypeAdapter; import com.google.gson.TypeAdapterFactory; import com.google.gson.annotations.JsonAdapter; import com.google.gson.internal.ConstructorConstructor; import com.google.gson.reflect.TypeToken; public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory { private final ConstructorConstructor constructorConstructor; public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) { this.constructorConstructor = constructorConstructor;"
      },
      {
        "txt": "} @SuppressWarnings(\"unchecked\") @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) { JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class); if (annotation == null) { return null; } return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation); }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") // Casts guarded by conditionals. static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) { Class<?> value = annotation.value(); TypeAdapter<?> typeAdapter; if (TypeAdapter.class.isAssignableFrom(value)) { Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value; typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct(); } else if (TypeAdapterFactory.class.isAssignableFrom(value)) { Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;"
      },
      {
        "txt": ".construct() .create(gson, fieldType); } else { throw new IllegalArgumentException( \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\"); } <extra_id_0> return typeAdapter; } }"
      }
    ]
  },
  {
    "id": 1175,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java",
    "start-bug-line": 68,
    "end-bug-line": 68,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal.bind; import com.google.gson.Gson;"
      },
      {
        "txt": "import com.google.gson.TypeAdapter; import com.google.gson.TypeAdapterFactory; import com.google.gson.annotations.JsonAdapter; import com.google.gson.internal.ConstructorConstructor; import com.google.gson.reflect.TypeToken; public final class JsonAdapterAnnotationTypeAdapterFactory implements TypeAdapterFactory { private final ConstructorConstructor constructorConstructor; public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) { this.constructorConstructor = constructorConstructor; }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") @Override public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> targetType) { JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class); if (annotation == null) { return null; } return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation); } @SuppressWarnings(\"unchecked\") // Casts guarded by conditionals."
      },
      {
        "txt": "static TypeAdapter<?> getTypeAdapter(ConstructorConstructor constructorConstructor, Gson gson, TypeToken<?> fieldType, JsonAdapter annotation) { Class<?> value = annotation.value(); TypeAdapter<?> typeAdapter; if (TypeAdapter.class.isAssignableFrom(value)) { Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value; typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct(); } else if (TypeAdapterFactory.class.isAssignableFrom(value)) { Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value; typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))"
      },
      {
        "txt": ".create(gson, fieldType); } else { throw new IllegalArgumentException( \"@JsonAdapter value must be TypeAdapter or TypeAdapterFactory reference.\"); } typeAdapter = typeAdapter.nullSafe(); <extra_id_0> } }"
      }
    ]
  }
]
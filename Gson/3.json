[
  {
    "id": 1159,
    "file_path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
    "start-bug-line": 36,
    "end-bug-line": 36,
    "bug": "",
    "fix": "import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.ConcurrentMap; import java.util.concurrent.ConcurrentNavigableMap; import java.util.concurrent.ConcurrentSkipListMap;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.ParameterizedType; import java.lang.reflect.Type; import java.util.ArrayList; import java.util.Collection; import java.util.EnumSet; import java.util.LinkedHashMap; import java.util.LinkedHashSet; import java.util.LinkedList;"
      },
      {
        "txt": "import java.util.Queue; import java.util.Set; import java.util.SortedMap; import java.util.SortedSet; import java.util.TreeMap; import java.util.TreeSet; <extra_id_0> import com.google.gson.InstanceCreator; import com.google.gson.JsonIOException; import com.google.gson.reflect.TypeToken; public final class ConstructorConstructor { private final Map<Type, InstanceCreator<?>> instanceCreators; public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {"
      },
      {
        "txt": "private final Map<Type, InstanceCreator<?>> instanceCreators; public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) { this.instanceCreators = instanceCreators; } public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) { final Type type = typeToken.getType(); final Class<? super T> rawType = typeToken.getRawType(); @SuppressWarnings(\"unchecked\") // types must agree final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type); if (typeCreator != null) {"
      },
      {
        "txt": "return new ObjectConstructor<T>() { @Override public T construct() { return typeCreator.createInstance(type); } }; } @SuppressWarnings(\"unchecked\") // types must agree final InstanceCreator<T> rawTypeCreator = (InstanceCreator<T>) instanceCreators.get(rawType); if (rawTypeCreator != null) {"
      },
      {
        "txt": "return new ObjectConstructor<T>() { @Override public T construct() { return rawTypeCreator.createInstance(type); } }; } ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType); if (defaultConstructor != null) { return defaultConstructor; }"
      },
      {
        "txt": "ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType); if (defaultImplementation != null) { return defaultImplementation; } return newUnsafeAllocator(type, rawType); } private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) { try { final Constructor<? super T> constructor = rawType.getDeclaredConstructor(); if (!constructor.isAccessible()) {"
      },
      {
        "txt": "constructor.setAccessible(true); } return new ObjectConstructor<T>() { @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested @Override public T construct() { try { Object[] args = null; return (T) constructor.newInstance(args); } catch (InstantiationException e) { throw new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\", e);"
      },
      {
        "txt": "} catch (InvocationTargetException e) { throw new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\", e.getTargetException()); } catch (IllegalAccessException e) { throw new AssertionError(e); } } }; } catch (NoSuchMethodException e) { return null;"
      },
      {
        "txt": "} } @SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is private <T> ObjectConstructor<T> newDefaultImplementationConstructor( final Type type, Class<? super T> rawType) { if (Collection.class.isAssignableFrom(rawType)) { if (SortedSet.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new TreeSet<Object>();"
      },
      {
        "txt": "} }; } else if (EnumSet.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @SuppressWarnings(\"rawtypes\") @Override public T construct() { if (type instanceof ParameterizedType) { Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0]; if (elementType instanceof Class) { return (T) EnumSet.noneOf((Class)elementType);"
      },
      {
        "txt": "} else { throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString()); } } else { throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString()); } } }; } else if (Set.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() {"
      },
      {
        "txt": "@Override public T construct() { return (T) new LinkedHashSet<Object>(); } }; } else if (Queue.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedList<Object>(); } };"
      },
      {
        "txt": "} else { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new ArrayList<Object>(); } }; } } if (Map.class.isAssignableFrom(rawType)) { if (SortedMap.class.isAssignableFrom(rawType)) {"
      },
      {
        "txt": "return new ObjectConstructor<T>() { @Override public T construct() { return (T) new TreeMap<Object, Object>(); } }; } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom( TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedHashMap<Object, Object>();"
      },
      {
        "txt": "} }; } else { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedTreeMap<String, Object>(); } }; } }"
      },
      {
        "txt": "return null; } private <T> ObjectConstructor<T> newUnsafeAllocator( final Type type, final Class<? super T> rawType) { return new ObjectConstructor<T>() { private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create(); @SuppressWarnings(\"unchecked\") @Override public T construct() { try { Object newInstance = unsafeAllocator.newInstance(rawType);"
      },
      {
        "txt": "return (T) newInstance; } catch (Exception e) { throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e); } } }; } @Override public String toString() { return instanceCreators.toString();"
      }
    ]
  },
  {
    "id": 1160,
    "file_path": "gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java",
    "start-bug-line": 175,
    "end-bug-line": 175,
    "bug": "if (SortedMap.class.isAssignableFrom(rawType)) {",
    "fix": "if (ConcurrentNavigableMap.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new ConcurrentSkipListMap<Object, Object>(); } }; } else if (ConcurrentMap.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new ConcurrentHashMap<Object, Object>(); } }; } else if (SortedMap.class.isAssignableFrom(rawType)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal; import java.lang.reflect.Constructor; import java.lang.reflect.InvocationTargetException; import java.lang.reflect.ParameterizedType;"
      },
      {
        "txt": "import java.lang.reflect.Type; import java.util.ArrayList; import java.util.Collection; import java.util.EnumSet; import java.util.LinkedHashMap; import java.util.LinkedHashSet; import java.util.LinkedList; import java.util.Map; import java.util.Queue; import java.util.Set;"
      },
      {
        "txt": "import java.util.SortedMap; import java.util.SortedSet; import java.util.TreeMap; import java.util.TreeSet; import com.google.gson.InstanceCreator; import com.google.gson.JsonIOException; import com.google.gson.reflect.TypeToken; public final class ConstructorConstructor { private final Map<Type, InstanceCreator<?>> instanceCreators; public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {"
      },
      {
        "txt": "this.instanceCreators = instanceCreators; } public <T> ObjectConstructor<T> get(TypeToken<T> typeToken) { final Type type = typeToken.getType(); final Class<? super T> rawType = typeToken.getRawType(); @SuppressWarnings(\"unchecked\") // types must agree final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type); if (typeCreator != null) { return new ObjectConstructor<T>() { @Override public T construct() {"
      },
      {
        "txt": "return typeCreator.createInstance(type); } }; } @SuppressWarnings(\"unchecked\") // types must agree final InstanceCreator<T> rawTypeCreator = (InstanceCreator<T>) instanceCreators.get(rawType); if (rawTypeCreator != null) { return new ObjectConstructor<T>() { @Override public T construct() {"
      },
      {
        "txt": "return rawTypeCreator.createInstance(type); } }; } ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType); if (defaultConstructor != null) { return defaultConstructor; } ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType); if (defaultImplementation != null) {"
      },
      {
        "txt": "return defaultImplementation; } return newUnsafeAllocator(type, rawType); } private <T> ObjectConstructor<T> newDefaultConstructor(Class<? super T> rawType) { try { final Constructor<? super T> constructor = rawType.getDeclaredConstructor(); if (!constructor.isAccessible()) { constructor.setAccessible(true); }"
      },
      {
        "txt": "return new ObjectConstructor<T>() { @SuppressWarnings(\"unchecked\") // T is the same raw type as is requested @Override public T construct() { try { Object[] args = null; return (T) constructor.newInstance(args); } catch (InstantiationException e) { throw new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\", e); } catch (InvocationTargetException e) { throw new RuntimeException(\"Failed to invoke \" + constructor + \" with no args\","
      },
      {
        "txt": "e.getTargetException()); } catch (IllegalAccessException e) { throw new AssertionError(e); } } }; } catch (NoSuchMethodException e) { return null; } }"
      },
      {
        "txt": "@SuppressWarnings(\"unchecked\") // use runtime checks to guarantee that 'T' is what it is private <T> ObjectConstructor<T> newDefaultImplementationConstructor( final Type type, Class<? super T> rawType) { if (Collection.class.isAssignableFrom(rawType)) { if (SortedSet.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new TreeSet<Object>(); } };"
      },
      {
        "txt": "} else if (EnumSet.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @SuppressWarnings(\"rawtypes\") @Override public T construct() { if (type instanceof ParameterizedType) { Type elementType = ((ParameterizedType) type).getActualTypeArguments()[0]; if (elementType instanceof Class) { return (T) EnumSet.noneOf((Class)elementType); } else { throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString());"
      },
      {
        "txt": "} } else { throw new JsonIOException(\"Invalid EnumSet type: \" + type.toString()); } } }; } else if (Set.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedHashSet<Object>();"
      },
      {
        "txt": "} }; } else if (Queue.class.isAssignableFrom(rawType)) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedList<Object>(); } }; } else { return new ObjectConstructor<T>() {"
      },
      {
        "txt": "return (T) new ArrayList<Object>(); } }; } } if (Map.class.isAssignableFrom(rawType)) { <extra_id_0> return new ObjectConstructor<T>() { @Override public T construct() { return (T) new TreeMap<Object, Object>(); } }; } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom("
      },
      {
        "txt": "}; } else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom( TypeToken.get(((ParameterizedType) type).getActualTypeArguments()[0]).getRawType()))) { return new ObjectConstructor<T>() { @Override public T construct() { return (T) new LinkedHashMap<Object, Object>(); } }; } else { return new ObjectConstructor<T>() {"
      },
      {
        "txt": "@Override public T construct() { return (T) new LinkedTreeMap<String, Object>(); } }; } } return null; } private <T> ObjectConstructor<T> newUnsafeAllocator( final Type type, final Class<? super T> rawType) {"
      },
      {
        "txt": "return new ObjectConstructor<T>() { private final UnsafeAllocator unsafeAllocator = UnsafeAllocator.create(); @SuppressWarnings(\"unchecked\") @Override public T construct() { try { Object newInstance = unsafeAllocator.newInstance(rawType); return (T) newInstance; } catch (Exception e) { throw new RuntimeException((\"Unable to invoke no-args constructor for \" + type + \". \" + \"Register an InstanceCreator with Gson for this type may fix this problem.\"), e);"
      },
      {
        "txt": "} } }; } @Override public String toString() { return instanceCreators.toString(); }"
      }
    ]
  }
]
[
  {
    "id": 1190,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
    "start-bug-line": 262,
    "end-bug-line": 262,
    "bug": "",
    "fix": "if (stackSize > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal.bind; import com.google.gson.JsonArray; import com.google.gson.JsonElement; import com.google.gson.JsonNull; import com.google.gson.JsonObject; import com.google.gson.JsonPrimitive; import com.google.gson.stream.JsonReader;"
      },
      {
        "txt": "import com.google.gson.stream.JsonToken; import java.io.IOException; import java.io.Reader; import java.util.Iterator; import java.util.Map; public final class JsonTreeReader extends JsonReader { private static final Reader UNREADABLE_READER = new Reader() { @Override public int read(char[] buffer, int offset, int count) throws IOException { throw new AssertionError(); }"
      },
      {
        "txt": "@Override public void close() throws IOException { throw new AssertionError(); } }; private static final Object SENTINEL_CLOSED = new Object(); private Object[] stack = new Object[32]; private int stackSize = 0; private String[] pathNames = new String[32]; private int[] pathIndices = new int[32]; public JsonTreeReader(JsonElement element) {"
      },
      {
        "txt": "super(UNREADABLE_READER); push(element); } @Override public void beginArray() throws IOException { expect(JsonToken.BEGIN_ARRAY); JsonArray array = (JsonArray) peekStack(); push(array.iterator()); pathIndices[stackSize - 1] = 0; } @Override public void endArray() throws IOException {"
      },
      {
        "txt": "expect(JsonToken.END_ARRAY); popStack(); // empty iterator popStack(); // array if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public void beginObject() throws IOException { expect(JsonToken.BEGIN_OBJECT); JsonObject object = (JsonObject) peekStack();"
      },
      {
        "txt": "push(object.entrySet().iterator()); } @Override public void endObject() throws IOException { expect(JsonToken.END_OBJECT); popStack(); // empty iterator popStack(); // object if (stackSize > 0) { pathIndices[stackSize - 1]++; } }"
      },
      {
        "txt": "@Override public boolean hasNext() throws IOException { JsonToken token = peek(); return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY; } @Override public JsonToken peek() throws IOException { if (stackSize == 0) { return JsonToken.END_DOCUMENT; } Object o = peekStack(); if (o instanceof Iterator) {"
      },
      {
        "txt": "boolean isObject = stack[stackSize - 2] instanceof JsonObject; Iterator<?> iterator = (Iterator<?>) o; if (iterator.hasNext()) { if (isObject) { return JsonToken.NAME; } else { push(iterator.next()); return peek(); } } else {"
      },
      {
        "txt": "return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY; } } else if (o instanceof JsonObject) { return JsonToken.BEGIN_OBJECT; } else if (o instanceof JsonArray) { return JsonToken.BEGIN_ARRAY; } else if (o instanceof JsonPrimitive) { JsonPrimitive primitive = (JsonPrimitive) o; if (primitive.isString()) { return JsonToken.STRING;"
      },
      {
        "txt": "} else if (primitive.isBoolean()) { return JsonToken.BOOLEAN; } else if (primitive.isNumber()) { return JsonToken.NUMBER; } else { throw new AssertionError(); } } else if (o instanceof JsonNull) { return JsonToken.NULL; } else if (o == SENTINEL_CLOSED) {"
      },
      {
        "txt": "throw new IllegalStateException(\"JsonReader is closed\"); } else { throw new AssertionError(); } } private Object peekStack() { return stack[stackSize - 1]; } private Object popStack() { Object result = stack[--stackSize];"
      },
      {
        "txt": "stack[stackSize] = null; return result; } private void expect(JsonToken expected) throws IOException { if (peek() != expected) { throw new IllegalStateException( \"Expected \" + expected + \" but was \" + peek() + locationString()); } } @Override public String nextName() throws IOException {"
      },
      {
        "txt": "expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); String result = (String) entry.getKey(); pathNames[stackSize - 1] = result; push(entry.getValue()); return result; } @Override public String nextString() throws IOException { JsonToken token = peek();"
      },
      {
        "txt": "if (token != JsonToken.STRING && token != JsonToken.NUMBER) { throw new IllegalStateException( \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString()); } String result = ((JsonPrimitive) popStack()).getAsString(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; }"
      },
      {
        "txt": "@Override public boolean nextBoolean() throws IOException { expect(JsonToken.BOOLEAN); boolean result = ((JsonPrimitive) popStack()).getAsBoolean(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void nextNull() throws IOException { expect(JsonToken.NULL);"
      },
      {
        "txt": "popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString());"
      },
      {
        "txt": "} double result = ((JsonPrimitive) peekStack()).getAsDouble(); if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) { throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result;"
      },
      {
        "txt": "} @Override public long nextLong() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } long result = ((JsonPrimitive) peekStack()).getAsLong(); popStack(); if (stackSize > 0) {"
      },
      {
        "txt": "pathIndices[stackSize - 1]++; } return result; } @Override public int nextInt() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); }"
      },
      {
        "txt": "int result = ((JsonPrimitive) peekStack()).getAsInt(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void close() throws IOException { stack = new Object[] { SENTINEL_CLOSED }; stackSize = 1;"
      },
      {
        "txt": "@Override public void skipValue() throws IOException { if (peek() == JsonToken.NAME) { nextName(); pathNames[stackSize - 2] = \"null\"; } else { popStack(); <extra_id_0> } pathIndices[stackSize - 1]++; } @Override public String toString() { return getClass().getSimpleName(); }"
      },
      {
        "txt": "return getClass().getSimpleName(); } public void promoteNameToValue() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); push(entry.getValue()); push(new JsonPrimitive((String) entry.getKey())); } private void push(Object newTop) {"
      },
      {
        "txt": "if (stackSize == stack.length) { Object[] newStack = new Object[stackSize * 2]; int[] newPathIndices = new int[stackSize * 2]; String[] newPathNames = new String[stackSize * 2]; System.arraycopy(stack, 0, newStack, 0, stackSize); System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize); System.arraycopy(pathNames, 0, newPathNames, 0, stackSize); stack = newStack; pathIndices = newPathIndices; pathNames = newPathNames;"
      },
      {
        "txt": "} stack[stackSize++] = newTop; } @Override public String getPath() { StringBuilder result = new StringBuilder().append('$'); for (int i = 0; i < stackSize; i++) { if (stack[i] instanceof JsonArray) { if (stack[++i] instanceof Iterator) { result.append('[').append(pathIndices[i]).append(']'); }"
      },
      {
        "txt": "} else if (stack[i] instanceof JsonObject) { if (stack[++i] instanceof Iterator) { result.append('.'); if (pathNames[i] != null) { result.append(pathNames[i]); } } } } return result.toString();"
      },
      {
        "txt": "} private String locationString() { return \" at path \" + getPath(); }"
      }
    ]
  },
  {
    "id": 1191,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
    "start-bug-line": 263,
    "end-bug-line": 263,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal.bind; import com.google.gson.JsonArray; import com.google.gson.JsonElement; import com.google.gson.JsonNull; import com.google.gson.JsonObject; import com.google.gson.JsonPrimitive; import com.google.gson.stream.JsonReader; import com.google.gson.stream.JsonToken;"
      },
      {
        "txt": "import java.io.IOException; import java.io.Reader; import java.util.Iterator; import java.util.Map; public final class JsonTreeReader extends JsonReader { private static final Reader UNREADABLE_READER = new Reader() { @Override public int read(char[] buffer, int offset, int count) throws IOException { throw new AssertionError(); } @Override public void close() throws IOException {"
      },
      {
        "txt": "throw new AssertionError(); } }; private static final Object SENTINEL_CLOSED = new Object(); private Object[] stack = new Object[32]; private int stackSize = 0; private String[] pathNames = new String[32]; private int[] pathIndices = new int[32]; public JsonTreeReader(JsonElement element) { super(UNREADABLE_READER);"
      },
      {
        "txt": "push(element); } @Override public void beginArray() throws IOException { expect(JsonToken.BEGIN_ARRAY); JsonArray array = (JsonArray) peekStack(); push(array.iterator()); pathIndices[stackSize - 1] = 0; } @Override public void endArray() throws IOException { expect(JsonToken.END_ARRAY);"
      },
      {
        "txt": "popStack(); // empty iterator popStack(); // array if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public void beginObject() throws IOException { expect(JsonToken.BEGIN_OBJECT); JsonObject object = (JsonObject) peekStack(); push(object.entrySet().iterator());"
      },
      {
        "txt": "} @Override public void endObject() throws IOException { expect(JsonToken.END_OBJECT); popStack(); // empty iterator popStack(); // object if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public boolean hasNext() throws IOException {"
      },
      {
        "txt": "JsonToken token = peek(); return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY; } @Override public JsonToken peek() throws IOException { if (stackSize == 0) { return JsonToken.END_DOCUMENT; } Object o = peekStack(); if (o instanceof Iterator) { boolean isObject = stack[stackSize - 2] instanceof JsonObject;"
      },
      {
        "txt": "Iterator<?> iterator = (Iterator<?>) o; if (iterator.hasNext()) { if (isObject) { return JsonToken.NAME; } else { push(iterator.next()); return peek(); } } else { return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY;"
      },
      {
        "txt": "} } else if (o instanceof JsonObject) { return JsonToken.BEGIN_OBJECT; } else if (o instanceof JsonArray) { return JsonToken.BEGIN_ARRAY; } else if (o instanceof JsonPrimitive) { JsonPrimitive primitive = (JsonPrimitive) o; if (primitive.isString()) { return JsonToken.STRING; } else if (primitive.isBoolean()) {"
      },
      {
        "txt": "return JsonToken.BOOLEAN; } else if (primitive.isNumber()) { return JsonToken.NUMBER; } else { throw new AssertionError(); } } else if (o instanceof JsonNull) { return JsonToken.NULL; } else if (o == SENTINEL_CLOSED) { throw new IllegalStateException(\"JsonReader is closed\");"
      },
      {
        "txt": "} else { throw new AssertionError(); } } private Object peekStack() { return stack[stackSize - 1]; } private Object popStack() { Object result = stack[--stackSize]; stack[stackSize] = null;"
      },
      {
        "txt": "return result; } private void expect(JsonToken expected) throws IOException { if (peek() != expected) { throw new IllegalStateException( \"Expected \" + expected + \" but was \" + peek() + locationString()); } } @Override public String nextName() throws IOException { expect(JsonToken.NAME);"
      },
      {
        "txt": "Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); String result = (String) entry.getKey(); pathNames[stackSize - 1] = result; push(entry.getValue()); return result; } @Override public String nextString() throws IOException { JsonToken token = peek(); if (token != JsonToken.STRING && token != JsonToken.NUMBER) {"
      },
      {
        "txt": "throw new IllegalStateException( \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString()); } String result = ((JsonPrimitive) popStack()).getAsString(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public boolean nextBoolean() throws IOException {"
      },
      {
        "txt": "expect(JsonToken.BOOLEAN); boolean result = ((JsonPrimitive) popStack()).getAsBoolean(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void nextNull() throws IOException { expect(JsonToken.NULL); popStack();"
      },
      {
        "txt": "if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); }"
      },
      {
        "txt": "double result = ((JsonPrimitive) peekStack()).getAsDouble(); if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) { throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; }"
      },
      {
        "txt": "@Override public long nextLong() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } long result = ((JsonPrimitive) peekStack()).getAsLong(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++;"
      },
      {
        "txt": "} return result; } @Override public int nextInt() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } int result = ((JsonPrimitive) peekStack()).getAsInt();"
      },
      {
        "txt": "popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void close() throws IOException { stack = new Object[] { SENTINEL_CLOSED }; stackSize = 1; }"
      },
      {
        "txt": "if (peek() == JsonToken.NAME) { nextName(); pathNames[stackSize - 2] = \"null\"; } else { popStack(); pathNames[stackSize - 1] = \"null\"; <extra_id_0> pathIndices[stackSize - 1]++; } @Override public String toString() { return getClass().getSimpleName(); } public void promoteNameToValue() throws IOException {"
      },
      {
        "txt": "} public void promoteNameToValue() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); push(entry.getValue()); push(new JsonPrimitive((String) entry.getKey())); } private void push(Object newTop) { if (stackSize == stack.length) {"
      },
      {
        "txt": "Object[] newStack = new Object[stackSize * 2]; int[] newPathIndices = new int[stackSize * 2]; String[] newPathNames = new String[stackSize * 2]; System.arraycopy(stack, 0, newStack, 0, stackSize); System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize); System.arraycopy(pathNames, 0, newPathNames, 0, stackSize); stack = newStack; pathIndices = newPathIndices; pathNames = newPathNames; }"
      },
      {
        "txt": "stack[stackSize++] = newTop; } @Override public String getPath() { StringBuilder result = new StringBuilder().append('$'); for (int i = 0; i < stackSize; i++) { if (stack[i] instanceof JsonArray) { if (stack[++i] instanceof Iterator) { result.append('[').append(pathIndices[i]).append(']'); } } else if (stack[i] instanceof JsonObject) {"
      },
      {
        "txt": "if (stack[++i] instanceof Iterator) { result.append('.'); if (pathNames[i] != null) { result.append(pathNames[i]); } } } } return result.toString(); }"
      },
      {
        "txt": "private String locationString() { return \" at path \" + getPath(); }"
      }
    ]
  },
  {
    "id": 1192,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
    "start-bug-line": 264,
    "end-bug-line": 264,
    "bug": "",
    "fix": "if (stackSize > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal.bind; import com.google.gson.JsonArray; import com.google.gson.JsonElement; import com.google.gson.JsonNull; import com.google.gson.JsonObject; import com.google.gson.JsonPrimitive; import com.google.gson.stream.JsonReader; import com.google.gson.stream.JsonToken; import java.io.IOException;"
      },
      {
        "txt": "import java.io.Reader; import java.util.Iterator; import java.util.Map; public final class JsonTreeReader extends JsonReader { private static final Reader UNREADABLE_READER = new Reader() { @Override public int read(char[] buffer, int offset, int count) throws IOException { throw new AssertionError(); } @Override public void close() throws IOException { throw new AssertionError();"
      },
      {
        "txt": "} }; private static final Object SENTINEL_CLOSED = new Object(); private Object[] stack = new Object[32]; private int stackSize = 0; private String[] pathNames = new String[32]; private int[] pathIndices = new int[32]; public JsonTreeReader(JsonElement element) { super(UNREADABLE_READER); push(element);"
      },
      {
        "txt": "} @Override public void beginArray() throws IOException { expect(JsonToken.BEGIN_ARRAY); JsonArray array = (JsonArray) peekStack(); push(array.iterator()); pathIndices[stackSize - 1] = 0; } @Override public void endArray() throws IOException { expect(JsonToken.END_ARRAY); popStack(); // empty iterator"
      },
      {
        "txt": "popStack(); // array if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public void beginObject() throws IOException { expect(JsonToken.BEGIN_OBJECT); JsonObject object = (JsonObject) peekStack(); push(object.entrySet().iterator()); }"
      },
      {
        "txt": "@Override public void endObject() throws IOException { expect(JsonToken.END_OBJECT); popStack(); // empty iterator popStack(); // object if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public boolean hasNext() throws IOException { JsonToken token = peek();"
      },
      {
        "txt": "return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY; } @Override public JsonToken peek() throws IOException { if (stackSize == 0) { return JsonToken.END_DOCUMENT; } Object o = peekStack(); if (o instanceof Iterator) { boolean isObject = stack[stackSize - 2] instanceof JsonObject; Iterator<?> iterator = (Iterator<?>) o;"
      },
      {
        "txt": "if (iterator.hasNext()) { if (isObject) { return JsonToken.NAME; } else { push(iterator.next()); return peek(); } } else { return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY; }"
      },
      {
        "txt": "} else if (o instanceof JsonObject) { return JsonToken.BEGIN_OBJECT; } else if (o instanceof JsonArray) { return JsonToken.BEGIN_ARRAY; } else if (o instanceof JsonPrimitive) { JsonPrimitive primitive = (JsonPrimitive) o; if (primitive.isString()) { return JsonToken.STRING; } else if (primitive.isBoolean()) { return JsonToken.BOOLEAN;"
      },
      {
        "txt": "} else if (primitive.isNumber()) { return JsonToken.NUMBER; } else { throw new AssertionError(); } } else if (o instanceof JsonNull) { return JsonToken.NULL; } else if (o == SENTINEL_CLOSED) { throw new IllegalStateException(\"JsonReader is closed\"); } else {"
      },
      {
        "txt": "throw new AssertionError(); } } private Object peekStack() { return stack[stackSize - 1]; } private Object popStack() { Object result = stack[--stackSize]; stack[stackSize] = null; return result;"
      },
      {
        "txt": "} private void expect(JsonToken expected) throws IOException { if (peek() != expected) { throw new IllegalStateException( \"Expected \" + expected + \" but was \" + peek() + locationString()); } } @Override public String nextName() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack();"
      },
      {
        "txt": "Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); String result = (String) entry.getKey(); pathNames[stackSize - 1] = result; push(entry.getValue()); return result; } @Override public String nextString() throws IOException { JsonToken token = peek(); if (token != JsonToken.STRING && token != JsonToken.NUMBER) { throw new IllegalStateException("
      },
      {
        "txt": "\"Expected \" + JsonToken.STRING + \" but was \" + token + locationString()); } String result = ((JsonPrimitive) popStack()).getAsString(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public boolean nextBoolean() throws IOException { expect(JsonToken.BOOLEAN);"
      },
      {
        "txt": "boolean result = ((JsonPrimitive) popStack()).getAsBoolean(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void nextNull() throws IOException { expect(JsonToken.NULL); popStack(); if (stackSize > 0) {"
      },
      {
        "txt": "pathIndices[stackSize - 1]++; } } @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } double result = ((JsonPrimitive) peekStack()).getAsDouble();"
      },
      {
        "txt": "if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) { throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public long nextLong() throws IOException {"
      },
      {
        "txt": "JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } long result = ((JsonPrimitive) peekStack()).getAsLong(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; }"
      },
      {
        "txt": "return result; } @Override public int nextInt() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } int result = ((JsonPrimitive) peekStack()).getAsInt(); popStack();"
      },
      {
        "txt": "if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void close() throws IOException { stack = new Object[] { SENTINEL_CLOSED }; stackSize = 1; } @Override public void skipValue() throws IOException {"
      },
      {
        "txt": "nextName(); pathNames[stackSize - 2] = \"null\"; } else { popStack(); pathNames[stackSize - 1] = \"null\"; } <extra_id_0> } @Override public String toString() { return getClass().getSimpleName(); } public void promoteNameToValue() throws IOException { expect(JsonToken.NAME);"
      },
      {
        "txt": "public void promoteNameToValue() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); push(entry.getValue()); push(new JsonPrimitive((String) entry.getKey())); } private void push(Object newTop) { if (stackSize == stack.length) { Object[] newStack = new Object[stackSize * 2];"
      },
      {
        "txt": "int[] newPathIndices = new int[stackSize * 2]; String[] newPathNames = new String[stackSize * 2]; System.arraycopy(stack, 0, newStack, 0, stackSize); System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize); System.arraycopy(pathNames, 0, newPathNames, 0, stackSize); stack = newStack; pathIndices = newPathIndices; pathNames = newPathNames; } stack[stackSize++] = newTop;"
      },
      {
        "txt": "} @Override public String getPath() { StringBuilder result = new StringBuilder().append('$'); for (int i = 0; i < stackSize; i++) { if (stack[i] instanceof JsonArray) { if (stack[++i] instanceof Iterator) { result.append('[').append(pathIndices[i]).append(']'); } } else if (stack[i] instanceof JsonObject) { if (stack[++i] instanceof Iterator) {"
      },
      {
        "txt": "result.append('.'); if (pathNames[i] != null) { result.append(pathNames[i]); } } } } return result.toString(); } private String locationString() {"
      },
      {
        "txt": "return \" at path \" + getPath(); }"
      }
    ]
  },
  {
    "id": 1193,
    "file_path": "gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java",
    "start-bug-line": 265,
    "end-bug-line": 265,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.gson.internal.bind; import com.google.gson.JsonArray; import com.google.gson.JsonElement; import com.google.gson.JsonNull; import com.google.gson.JsonObject; import com.google.gson.JsonPrimitive; import com.google.gson.stream.JsonReader; import com.google.gson.stream.JsonToken; import java.io.IOException; import java.io.Reader;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.Map; public final class JsonTreeReader extends JsonReader { private static final Reader UNREADABLE_READER = new Reader() { @Override public int read(char[] buffer, int offset, int count) throws IOException { throw new AssertionError(); } @Override public void close() throws IOException { throw new AssertionError(); }"
      },
      {
        "txt": "}; private static final Object SENTINEL_CLOSED = new Object(); private Object[] stack = new Object[32]; private int stackSize = 0; private String[] pathNames = new String[32]; private int[] pathIndices = new int[32]; public JsonTreeReader(JsonElement element) { super(UNREADABLE_READER); push(element); }"
      },
      {
        "txt": "@Override public void beginArray() throws IOException { expect(JsonToken.BEGIN_ARRAY); JsonArray array = (JsonArray) peekStack(); push(array.iterator()); pathIndices[stackSize - 1] = 0; } @Override public void endArray() throws IOException { expect(JsonToken.END_ARRAY); popStack(); // empty iterator popStack(); // array"
      },
      {
        "txt": "if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public void beginObject() throws IOException { expect(JsonToken.BEGIN_OBJECT); JsonObject object = (JsonObject) peekStack(); push(object.entrySet().iterator()); } @Override public void endObject() throws IOException {"
      },
      {
        "txt": "expect(JsonToken.END_OBJECT); popStack(); // empty iterator popStack(); // object if (stackSize > 0) { pathIndices[stackSize - 1]++; } } @Override public boolean hasNext() throws IOException { JsonToken token = peek(); return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;"
      },
      {
        "txt": "} @Override public JsonToken peek() throws IOException { if (stackSize == 0) { return JsonToken.END_DOCUMENT; } Object o = peekStack(); if (o instanceof Iterator) { boolean isObject = stack[stackSize - 2] instanceof JsonObject; Iterator<?> iterator = (Iterator<?>) o; if (iterator.hasNext()) {"
      },
      {
        "txt": "if (isObject) { return JsonToken.NAME; } else { push(iterator.next()); return peek(); } } else { return isObject ? JsonToken.END_OBJECT : JsonToken.END_ARRAY; } } else if (o instanceof JsonObject) {"
      },
      {
        "txt": "return JsonToken.BEGIN_OBJECT; } else if (o instanceof JsonArray) { return JsonToken.BEGIN_ARRAY; } else if (o instanceof JsonPrimitive) { JsonPrimitive primitive = (JsonPrimitive) o; if (primitive.isString()) { return JsonToken.STRING; } else if (primitive.isBoolean()) { return JsonToken.BOOLEAN; } else if (primitive.isNumber()) {"
      },
      {
        "txt": "return JsonToken.NUMBER; } else { throw new AssertionError(); } } else if (o instanceof JsonNull) { return JsonToken.NULL; } else if (o == SENTINEL_CLOSED) { throw new IllegalStateException(\"JsonReader is closed\"); } else { throw new AssertionError();"
      },
      {
        "txt": "} } private Object peekStack() { return stack[stackSize - 1]; } private Object popStack() { Object result = stack[--stackSize]; stack[stackSize] = null; return result; }"
      },
      {
        "txt": "private void expect(JsonToken expected) throws IOException { if (peek() != expected) { throw new IllegalStateException( \"Expected \" + expected + \" but was \" + peek() + locationString()); } } @Override public String nextName() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next();"
      },
      {
        "txt": "String result = (String) entry.getKey(); pathNames[stackSize - 1] = result; push(entry.getValue()); return result; } @Override public String nextString() throws IOException { JsonToken token = peek(); if (token != JsonToken.STRING && token != JsonToken.NUMBER) { throw new IllegalStateException( \"Expected \" + JsonToken.STRING + \" but was \" + token + locationString());"
      },
      {
        "txt": "} String result = ((JsonPrimitive) popStack()).getAsString(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public boolean nextBoolean() throws IOException { expect(JsonToken.BOOLEAN); boolean result = ((JsonPrimitive) popStack()).getAsBoolean();"
      },
      {
        "txt": "if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public void nextNull() throws IOException { expect(JsonToken.NULL); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++;"
      },
      {
        "txt": "} } @Override public double nextDouble() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } double result = ((JsonPrimitive) peekStack()).getAsDouble(); if (!isLenient() && (Double.isNaN(result) || Double.isInfinite(result))) {"
      },
      {
        "txt": "throw new NumberFormatException(\"JSON forbids NaN and infinities: \" + result); } popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result; } @Override public long nextLong() throws IOException { JsonToken token = peek();"
      },
      {
        "txt": "if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } long result = ((JsonPrimitive) peekStack()).getAsLong(); popStack(); if (stackSize > 0) { pathIndices[stackSize - 1]++; } return result;"
      },
      {
        "txt": "} @Override public int nextInt() throws IOException { JsonToken token = peek(); if (token != JsonToken.NUMBER && token != JsonToken.STRING) { throw new IllegalStateException( \"Expected \" + JsonToken.NUMBER + \" but was \" + token + locationString()); } int result = ((JsonPrimitive) peekStack()).getAsInt(); popStack(); if (stackSize > 0) {"
      },
      {
        "txt": "pathIndices[stackSize - 1]++; } return result; } @Override public void close() throws IOException { stack = new Object[] { SENTINEL_CLOSED }; stackSize = 1; } @Override public void skipValue() throws IOException { if (peek() == JsonToken.NAME) {"
      },
      {
        "txt": "pathNames[stackSize - 2] = \"null\"; } else { popStack(); pathNames[stackSize - 1] = \"null\"; } pathIndices[stackSize - 1]++; <extra_id_0> @Override public String toString() { return getClass().getSimpleName(); } public void promoteNameToValue() throws IOException { expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack();"
      },
      {
        "txt": "expect(JsonToken.NAME); Iterator<?> i = (Iterator<?>) peekStack(); Map.Entry<?, ?> entry = (Map.Entry<?, ?>) i.next(); push(entry.getValue()); push(new JsonPrimitive((String) entry.getKey())); } private void push(Object newTop) { if (stackSize == stack.length) { Object[] newStack = new Object[stackSize * 2]; int[] newPathIndices = new int[stackSize * 2];"
      },
      {
        "txt": "String[] newPathNames = new String[stackSize * 2]; System.arraycopy(stack, 0, newStack, 0, stackSize); System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize); System.arraycopy(pathNames, 0, newPathNames, 0, stackSize); stack = newStack; pathIndices = newPathIndices; pathNames = newPathNames; } stack[stackSize++] = newTop; }"
      },
      {
        "txt": "@Override public String getPath() { StringBuilder result = new StringBuilder().append('$'); for (int i = 0; i < stackSize; i++) { if (stack[i] instanceof JsonArray) { if (stack[++i] instanceof Iterator) { result.append('[').append(pathIndices[i]).append(']'); } } else if (stack[i] instanceof JsonObject) { if (stack[++i] instanceof Iterator) { result.append('.');"
      },
      {
        "txt": "if (pathNames[i] != null) { result.append(pathNames[i]); } } } } return result.toString(); } private String locationString() { return \" at path \" + getPath();"
      }
    ]
  }
]
[
  {
    "id": 484,
    "file_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
    "start-bug-line": 170,
    "end-bug-line": 170,
    "bug": "if (nextCfgNode == fallThrough) {",
    "fix": "if (nextCfgNode == fallThrough && !inFinally(n.getParent(), n)) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback; import com.google.javascript.jscomp.NodeTraversal.FunctionCallback; import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode; import com.google.javascript.jscomp.graph.GraphReachability; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; import java.util.logging.Level;"
      },
      {
        "txt": "import java.util.logging.Logger; class UnreachableCodeElimination implements CompilerPass { private static final Logger logger = Logger.getLogger(UnreachableCodeElimination.class.getName()); private final AbstractCompiler compiler; private final boolean removeNoOpStatements; private boolean codeChanged; UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler;"
      },
      {
        "txt": "this.removeNoOpStatements = removeNoOpStatements; } @Override public void process(Node externs, Node toplevel) { NodeTraversal.traverseChangedFunctions(compiler, new FunctionCallback() { @Override public void visit(AbstractCompiler compiler, Node root) { ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, root);"
      },
      {
        "txt": "ControlFlowGraph<Node> cfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(cfg) .compute(cfg.getEntry().getValue()); if (root.isFunction()) { root = root.getLastChild(); } do { codeChanged = false; NodeTraversal.traverse(compiler, root, new EliminationPass(cfg)); } while (codeChanged);"
      },
      {
        "txt": "} }); } private class EliminationPass extends AbstractShallowCallback { private final ControlFlowGraph<Node> cfg; private EliminationPass(ControlFlowGraph<Node> cfg) { this.cfg = cfg; } @Override public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "if (parent == null || n.isFunction() || n.isScript()) { return; } DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return; } if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n, compiler))) { removeDeadExprStatementSafely(n);"
      },
      {
        "txt": "return; } tryRemoveUnconditionalBranching(n); } @SuppressWarnings(\"fallthrough\") private void tryRemoveUnconditionalBranching(Node n) { if (n == null) { return; } DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n);"
      },
      {
        "txt": "if (gNode == null) { return; } switch (n.getType()) { case Token.RETURN: if (n.hasChildren()) { break; } case Token.BREAK: case Token.CONTINUE:"
      },
      {
        "txt": "if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) { Preconditions.checkState( outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = computeFollowing(n); Node nextCfgNode = outEdges.get(0).getDestination().getValue(); <extra_id_0> removeNode(n); } } } } private Node computeFollowing(Node n) {"
      },
      {
        "txt": "} private Node computeFollowing(Node n) { Node next = ControlFlowAnalysis.computeFollowNode(n); while (next != null && next.isBlock()) { if (next.hasChildren()) { next = next.getFirstChild(); } else { next = computeFollowing(next); } }"
      },
      {
        "txt": "return next; } private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); if (n.isEmpty() || (n.isBlock() && !n.hasChildren())) { return; } if (NodeUtil.isForIn(parent)) { return; }"
      },
      {
        "txt": "switch (n.getType()) { case Token.DO: return; case Token.BLOCK: if (parent.isTry() && NodeUtil.isTryCatchNodeContainer(n)) { return; } break; case Token.CATCH: Node tryNode = parent.getParent();"
      },
      {
        "txt": "NodeUtil.maybeAddFinally(tryNode); break; } if (n.isVar() && !n.getFirstChild().hasChildren()) { return; } removeNode(n); } private void removeNode(Node n) { codeChanged = true;"
      },
      {
        "txt": "NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine(\"Removing \" + n.toString()); } NodeUtil.removeChild(n.getParent(), n); } }"
      }
    ]
  },
  {
    "id": 485,
    "file_path": "src/com/google/javascript/jscomp/UnreachableCodeElimination.java",
    "start-bug-line": 177,
    "end-bug-line": 177,
    "bug": "",
    "fix": "private boolean inFinally(Node parent, Node child) { if (parent == null || parent.isFunction()) { return false; } else if (NodeUtil.isTryFinallyNode(parent, child)) { return true; } else { return inFinally(parent.getParent(), parent); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback; import com.google.javascript.jscomp.NodeTraversal.FunctionCallback; import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode; import com.google.javascript.jscomp.graph.GraphReachability;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; import java.util.logging.Level; import java.util.logging.Logger; class UnreachableCodeElimination implements CompilerPass { private static final Logger logger = Logger.getLogger(UnreachableCodeElimination.class.getName()); private final AbstractCompiler compiler; private final boolean removeNoOpStatements;"
      },
      {
        "txt": "private boolean codeChanged; UnreachableCodeElimination(AbstractCompiler compiler, boolean removeNoOpStatements) { this.compiler = compiler; this.removeNoOpStatements = removeNoOpStatements; } @Override public void process(Node externs, Node toplevel) { NodeTraversal.traverseChangedFunctions(compiler, new FunctionCallback() { @Override"
      },
      {
        "txt": "public void visit(AbstractCompiler compiler, Node root) { ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false); cfa.process(null, root); ControlFlowGraph<Node> cfg = cfa.getCfg(); new GraphReachability<Node, ControlFlowGraph.Branch>(cfg) .compute(cfg.getEntry().getValue()); if (root.isFunction()) { root = root.getLastChild(); }"
      },
      {
        "txt": "do { codeChanged = false; NodeTraversal.traverse(compiler, root, new EliminationPass(cfg)); } while (codeChanged); } }); } private class EliminationPass extends AbstractShallowCallback { private final ControlFlowGraph<Node> cfg; private EliminationPass(ControlFlowGraph<Node> cfg) {"
      },
      {
        "txt": "this.cfg = cfg; } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (parent == null || n.isFunction() || n.isScript()) { return; } DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n); if (gNode == null) { // Not in CFG. return;"
      },
      {
        "txt": "} if (gNode.getAnnotation() != GraphReachability.REACHABLE || (removeNoOpStatements && !NodeUtil.mayHaveSideEffects(n, compiler))) { removeDeadExprStatementSafely(n); return; } tryRemoveUnconditionalBranching(n); } @SuppressWarnings(\"fallthrough\") private void tryRemoveUnconditionalBranching(Node n) {"
      },
      {
        "txt": "if (n == null) { return; } DiGraphNode<Node, Branch> gNode = cfg.getDirectedGraphNode(n); if (gNode == null) { return; } switch (n.getType()) { case Token.RETURN: if (n.hasChildren()) {"
      },
      {
        "txt": "break; } case Token.BREAK: case Token.CONTINUE: List<DiGraphEdge<Node, Branch>> outEdges = gNode.getOutEdges(); if (outEdges.size() == 1 && (n.getNext() == null || n.getNext().isFunction())) { Preconditions.checkState( outEdges.get(0).getValue() == Branch.UNCOND); Node fallThrough = computeFollowing(n);"
      },
      {
        "txt": "if (nextCfgNode == fallThrough) { removeNode(n); } } } } <extra_id_0> private Node computeFollowing(Node n) { Node next = ControlFlowAnalysis.computeFollowNode(n); while (next != null && next.isBlock()) { if (next.hasChildren()) { next = next.getFirstChild(); } else {"
      },
      {
        "txt": "next = next.getFirstChild(); } else { next = computeFollowing(next); } } return next; } private void removeDeadExprStatementSafely(Node n) { Node parent = n.getParent(); if (n.isEmpty() || (n.isBlock() && !n.hasChildren())) {"
      },
      {
        "txt": "return; } if (NodeUtil.isForIn(parent)) { return; } switch (n.getType()) { case Token.DO: return; case Token.BLOCK: if (parent.isTry() && NodeUtil.isTryCatchNodeContainer(n)) {"
      },
      {
        "txt": "return; } break; case Token.CATCH: Node tryNode = parent.getParent(); NodeUtil.maybeAddFinally(tryNode); break; } if (n.isVar() && !n.getFirstChild().hasChildren()) { return;"
      },
      {
        "txt": "} removeNode(n); } private void removeNode(Node n) { codeChanged = true; NodeUtil.redeclareVarsInsideBranch(n); compiler.reportCodeChange(); if (logger.isLoggable(Level.FINE)) { logger.fine(\"Removing \" + n.toString()); }"
      },
      {
        "txt": "NodeUtil.removeChild(n.getParent(), n); } }"
      }
    ]
  }
]
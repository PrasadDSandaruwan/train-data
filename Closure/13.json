[
  {
    "id": 220,
    "file_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
    "start-bug-line": 126,
    "end-bug-line": 126,
    "bug": "",
    "fix": "Node next = c.getNext();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.javascript.rhino.Node; import java.util.ArrayList; class PeepholeOptimizationsPass"
      },
      {
        "txt": "implements CompilerPass { private AbstractCompiler compiler; private final AbstractPeepholeOptimization[] peepholeOptimizations; private StateStack traversalState = new StateStack(); static private class ScopeState { boolean changed; boolean traverseChildScopes; ScopeState() { reset(); }"
      },
      {
        "txt": "void reset() { changed = false; traverseChildScopes = true; } } static private class StateStack { private ArrayList<ScopeState> states = Lists.newArrayList(); private int currentDepth = 0; StateStack() { states.add(new ScopeState());"
      },
      {
        "txt": "} ScopeState peek() { return states.get(currentDepth); } void push() { currentDepth++; if (states.size() <= currentDepth) { states.add(new ScopeState()); } else { states.get(currentDepth).reset();"
      },
      {
        "txt": "} } void pop() { currentDepth--; } } private class PeepholeChangeHandler implements CodeChangeHandler { @Override public void reportChange() { traversalState.peek().changed = true;"
      },
      {
        "txt": "} } PeepholeOptimizationsPass(AbstractCompiler compiler, AbstractPeepholeOptimization... optimizations) { this.compiler = compiler; this.peepholeOptimizations = optimizations; } public AbstractCompiler getCompiler() { return compiler; }"
      },
      {
        "txt": "@Override public void process(Node externs, Node root) { PeepholeChangeHandler handler = new PeepholeChangeHandler(); compiler.addChangeHandler(handler); beginTraversal(); traverse(root); endTraversal(); compiler.removeChangeHandler(handler); } private void traverse(Node node) {"
      },
      {
        "txt": "return; } int visits = 0; do { Node c = node.getFirstChild(); while(c != null) { <extra_id_0> Node next = c.getNext(); c = next; } visit(node); visits++; Preconditions.checkState(visits < 10000, \"too many interations\");"
      },
      {
        "txt": "visits++; Preconditions.checkState(visits < 10000, \"too many interations\"); } while (shouldRetraverse(node)); exitNode(node); } private boolean shouldRetraverse(Node node) { if (node.getParent() != null && node.isFunction() || node.isScript()) { ScopeState state = traversalState.peek(); if (state.changed) { state.changed = false;"
      },
      {
        "txt": "state.traverseChildScopes = false; return true; } } return false; } private boolean shouldVisit(Node node) { if (node.isFunction() || node.isScript()) { ScopeState previous = traversalState.peek(); if (!previous.traverseChildScopes) {"
      },
      {
        "txt": "return false; } traversalState.push(); } return true; } private void exitNode(Node node) { if (node.isFunction() || node.isScript()) { traversalState.pop(); }"
      },
      {
        "txt": "} public void visit(Node n) { Node currentVersionOfNode = n; boolean somethingChanged = false; do { somethingChanged = false; for (AbstractPeepholeOptimization optimization : peepholeOptimizations) { Node newVersionOfNode = optimization.optimizeSubtree(currentVersionOfNode); if (newVersionOfNode != currentVersionOfNode) {"
      },
      {
        "txt": "somethingChanged = true; currentVersionOfNode = newVersionOfNode; } if (currentVersionOfNode == null) { return; } } } while(somethingChanged); } private void beginTraversal() {"
      },
      {
        "txt": "for (AbstractPeepholeOptimization optimization : peepholeOptimizations) { optimization.beginTraversal(compiler); } } private void endTraversal() { for (AbstractPeepholeOptimization optimization : peepholeOptimizations) { optimization.endTraversal(compiler); } }"
      }
    ]
  },
  {
    "id": 221,
    "file_path": "src/com/google/javascript/jscomp/PeepholeOptimizationsPass.java",
    "start-bug-line": 127,
    "end-bug-line": 127,
    "bug": "Node next = c.getNext();",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.javascript.rhino.Node; import java.util.ArrayList; class PeepholeOptimizationsPass implements CompilerPass {"
      },
      {
        "txt": "private AbstractCompiler compiler; private final AbstractPeepholeOptimization[] peepholeOptimizations; private StateStack traversalState = new StateStack(); static private class ScopeState { boolean changed; boolean traverseChildScopes; ScopeState() { reset(); } void reset() {"
      },
      {
        "txt": "changed = false; traverseChildScopes = true; } } static private class StateStack { private ArrayList<ScopeState> states = Lists.newArrayList(); private int currentDepth = 0; StateStack() { states.add(new ScopeState()); }"
      },
      {
        "txt": "ScopeState peek() { return states.get(currentDepth); } void push() { currentDepth++; if (states.size() <= currentDepth) { states.add(new ScopeState()); } else { states.get(currentDepth).reset(); }"
      },
      {
        "txt": "} void pop() { currentDepth--; } } private class PeepholeChangeHandler implements CodeChangeHandler { @Override public void reportChange() { traversalState.peek().changed = true; }"
      },
      {
        "txt": "} PeepholeOptimizationsPass(AbstractCompiler compiler, AbstractPeepholeOptimization... optimizations) { this.compiler = compiler; this.peepholeOptimizations = optimizations; } public AbstractCompiler getCompiler() { return compiler; } @Override"
      },
      {
        "txt": "public void process(Node externs, Node root) { PeepholeChangeHandler handler = new PeepholeChangeHandler(); compiler.addChangeHandler(handler); beginTraversal(); traverse(root); endTraversal(); compiler.removeChangeHandler(handler); } private void traverse(Node node) { if (!shouldVisit(node)) {"
      },
      {
        "txt": "} int visits = 0; do { Node c = node.getFirstChild(); while(c != null) { traverse(c); <extra_id_0> c = next; } visit(node); visits++; Preconditions.checkState(visits < 10000, \"too many interations\"); } while (shouldRetraverse(node));"
      },
      {
        "txt": "Preconditions.checkState(visits < 10000, \"too many interations\"); } while (shouldRetraverse(node)); exitNode(node); } private boolean shouldRetraverse(Node node) { if (node.getParent() != null && node.isFunction() || node.isScript()) { ScopeState state = traversalState.peek(); if (state.changed) { state.changed = false; state.traverseChildScopes = false;"
      },
      {
        "txt": "return true; } } return false; } private boolean shouldVisit(Node node) { if (node.isFunction() || node.isScript()) { ScopeState previous = traversalState.peek(); if (!previous.traverseChildScopes) { return false;"
      },
      {
        "txt": "} traversalState.push(); } return true; } private void exitNode(Node node) { if (node.isFunction() || node.isScript()) { traversalState.pop(); } }"
      },
      {
        "txt": "public void visit(Node n) { Node currentVersionOfNode = n; boolean somethingChanged = false; do { somethingChanged = false; for (AbstractPeepholeOptimization optimization : peepholeOptimizations) { Node newVersionOfNode = optimization.optimizeSubtree(currentVersionOfNode); if (newVersionOfNode != currentVersionOfNode) { somethingChanged = true;"
      },
      {
        "txt": "currentVersionOfNode = newVersionOfNode; } if (currentVersionOfNode == null) { return; } } } while(somethingChanged); } private void beginTraversal() { for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {"
      },
      {
        "txt": "optimization.beginTraversal(compiler); } } private void endTraversal() { for (AbstractPeepholeOptimization optimization : peepholeOptimizations) { optimization.endTraversal(compiler); } }"
      }
    ]
  }
]
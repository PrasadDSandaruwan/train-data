[
  {
    "id": 259,
    "file_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
    "start-bug-line": 157,
    "end-bug-line": 157,
    "bug": "",
    "fix": "Set<String> validProperties = Sets.newHashSet();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists;"
      },
      {
        "txt": "import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.IR; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; class InlineObjectLiterals implements CompilerPass { public static final String VAR_PREFIX = \"JSCompiler_object_inline_\"; private final AbstractCompiler compiler; private final Supplier<String> safeNameIdSupplier; InlineObjectLiterals( AbstractCompiler compiler,"
      },
      {
        "txt": "Supplier<String> safeNameIdSupplier) { this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; } @Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior()); callback.process(externs, root); }"
      },
      {
        "txt": "private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); if (isVarInlineForbidden(v)) { continue; } ReferenceCollection referenceInfo = referenceMap.getReferences(v);"
      },
      {
        "txt": "if (isInlinableObject(referenceInfo.references)) { staleVars.add(v); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); splitObject(v, declaration, init, referenceInfo); } } } private void blacklistVarReferencesInTree(Node root, final Scope scope) { NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {"
      },
      {
        "txt": "@Override public void visit(Node node) { if (node.isName()) { staleVars.add(scope.getVar(node.getString())); } } }, NodeUtil.MATCH_NOT_FUNCTION); } private boolean isVarInlineForbidden(Var var) { return var.isGlobal()"
      },
      {
        "txt": "|| compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); } private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; <extra_id_0> Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall()"
      },
      {
        "txt": "Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } continue; } if (!isVarOrAssignExprLhs(name)) { return false; }"
      },
      {
        "txt": "Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() ||"
      },
      {
        "txt": "child.isSetterDef()) { return false; } Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; }"
      },
      {
        "txt": "refNode = refNode.getParent(); } } } ret = true; } return ret; } private boolean isVarOrAssignExprLhs(Node n) { Node parent = n.getParent();"
      },
      {
        "txt": "return parent.isVar() || (parent.isAssign() && parent.getFirstChild() == n && parent.getParent().isExprResult()); } private Map<String, String> computeVarList( Var v, ReferenceCollection referenceInfo) { Map<String, String> varmap = Maps.newLinkedHashMap(); for (Reference ref : referenceInfo.references) { if (ref.isLvalue() || ref.isInitializingDeclaration()) {"
      },
      {
        "txt": "Node val = ref.getAssignedValue(); if (val != null) { Preconditions.checkState(val.isObjectLit()); for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { String varname = child.getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" +"
      },
      {
        "txt": "safeNameIdSupplier.get(); varmap.put(varname, var); } } } else if (ref.getParent().isVar()) { } else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.isGetProp()); String varname = getprop.getLastChild().getString(); if (varmap.containsKey(varname)) {"
      },
      {
        "txt": "continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } return varmap; } private void fillInitialValues(Reference init, Map<String, Node> initvals) { Node object = init.getAssignedValue();"
      },
      {
        "txt": "Preconditions.checkState(object.isObjectLit()); for (Node key = object.getFirstChild(); key != null; key = key.getNext()) { initvals.put(key.getString(), key.removeFirstChild()); } } private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) { List<Node> nodes = Lists.newArrayList(); Node val = ref.getAssignedValue();"
      },
      {
        "txt": "blacklistVarReferencesInTree(val, v.scope); Preconditions.checkState(val.isObjectLit()); Set<String> all = Sets.newLinkedHashSet(varmap.keySet()); for (Node key = val.getFirstChild(); key != null; key = key.getNext()) { String var = key.getString(); Node value = key.removeFirstChild(); nodes.add( IR.assign( IR.name(varmap.get(var)),"
      },
      {
        "txt": "value)); all.remove(var); } for (String var : all) { nodes.add( IR.assign( IR.name(varmap.get(var)), NodeUtil.newUndefinedNode(null))); } Node replacement;"
      },
      {
        "txt": "if (nodes.isEmpty()) { replacement = IR.trueNode(); } else { nodes.add(IR.trueNode()); nodes = Lists.reverse(nodes); replacement = new Node(Token.COMMA); Node cur = replacement; int i; for (i = 0; i < nodes.size() - 2; i++) { cur.addChildToFront(nodes.get(i));"
      },
      {
        "txt": "Node t = new Node(Token.COMMA); cur.addChildToFront(t); cur = t; } cur.addChildToFront(nodes.get(i)); cur.addChildToFront(nodes.get(i + 1)); } Node replace = ref.getParent(); replacement.copyInformationFromForTree(replace); if (replace.isVar()) {"
      },
      {
        "txt": "replace.getParent().replaceChild( replace, NodeUtil.newExpr(replacement)); } else { replace.getParent().replaceChild(replace, replacement); } } private void splitObject(Var v, Reference declaration, Reference init, ReferenceCollection referenceInfo) { Map<String, String> varmap = computeVarList(v, referenceInfo);"
      },
      {
        "txt": "Map<String, Node> initvals = Maps.newHashMap(); Node vnode; boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar(); if (defined) { vnode = init.getParent(); fillInitialValues(init, initvals); } else { vnode = v.getScope().getRootNode().getLastChild().getFirstChild(); }"
      },
      {
        "txt": "for (Map.Entry<String, String> entry : varmap.entrySet()) { Node val = initvals.get(entry.getKey()); Node varnode = NodeUtil.newVarNode(entry.getValue(), val); if (val == null) { varnode.copyInformationFromForTree(vnode); } else { blacklistVarReferencesInTree(val, v.scope); } vnode.getParent().addChildBefore(varnode, vnode); }"
      },
      {
        "txt": "if (defined) { vnode.getParent().removeChild(vnode); } for (Reference ref : referenceInfo.references) { if (defined && ref == init) continue; if (ref.isLvalue()) { replaceAssignmentExpression(v, ref, varmap); } else if (ref.getParent().isVar()) { ref.getGrandparent().removeChild(ref.getParent()); } else {"
      },
      {
        "txt": "Node getprop = ref.getParent(); Preconditions.checkState(getprop.isGetProp()); String var = getprop.getChildAtIndex(1).getString(); Preconditions.checkState(varmap.containsKey(var)); Node replacement = IR.name(varmap.get(var)); replacement.copyInformationFrom(getprop); ref.getGrandparent().replaceChild(ref.getParent(), replacement); } } compiler.reportCodeChange();"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 260,
    "file_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
    "start-bug-line": 181,
    "end-bug-line": 181,
    "bug": "",
    "fix": "String propName = parent.getLastChild().getString(); if (!validProperties.contains(propName)) { if (NodeUtil.isVarOrSimpleAssignLhs(parent, gramps)) { validProperties.add(propName); } else { return false; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists;"
      },
      {
        "txt": "import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.IR; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; class InlineObjectLiterals implements CompilerPass { public static final String VAR_PREFIX = \"JSCompiler_object_inline_\"; private final AbstractCompiler compiler; private final Supplier<String> safeNameIdSupplier; InlineObjectLiterals( AbstractCompiler compiler,"
      },
      {
        "txt": "Supplier<String> safeNameIdSupplier) { this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; } @Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior()); callback.process(externs, root); }"
      },
      {
        "txt": "private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); if (isVarInlineForbidden(v)) { continue; } ReferenceCollection referenceInfo = referenceMap.getReferences(v);"
      },
      {
        "txt": "if (isInlinableObject(referenceInfo.references)) { staleVars.add(v); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); splitObject(v, declaration, init, referenceInfo); } } } private void blacklistVarReferencesInTree(Node root, final Scope scope) { NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {"
      },
      {
        "txt": "@Override public void visit(Node node) { if (node.isName()) { staleVars.add(scope.getVar(node.getString())); } } }, NodeUtil.MATCH_NOT_FUNCTION); } private boolean isVarInlineForbidden(Var var) { return var.isGlobal()"
      },
      {
        "txt": "|| var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); } private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent();"
      },
      {
        "txt": "if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } <extra_id_0> } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) {"
      },
      {
        "txt": "Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() ||"
      },
      {
        "txt": "child.isSetterDef()) { return false; } Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; }"
      },
      {
        "txt": "refNode = refNode.getParent(); } } } ret = true; } return ret; } private boolean isVarOrAssignExprLhs(Node n) { Node parent = n.getParent();"
      },
      {
        "txt": "return parent.isVar() || (parent.isAssign() && parent.getFirstChild() == n && parent.getParent().isExprResult()); } private Map<String, String> computeVarList( Var v, ReferenceCollection referenceInfo) { Map<String, String> varmap = Maps.newLinkedHashMap(); for (Reference ref : referenceInfo.references) { if (ref.isLvalue() || ref.isInitializingDeclaration()) {"
      },
      {
        "txt": "Node val = ref.getAssignedValue(); if (val != null) { Preconditions.checkState(val.isObjectLit()); for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { String varname = child.getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" +"
      },
      {
        "txt": "safeNameIdSupplier.get(); varmap.put(varname, var); } } } else if (ref.getParent().isVar()) { } else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.isGetProp()); String varname = getprop.getLastChild().getString(); if (varmap.containsKey(varname)) {"
      },
      {
        "txt": "continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } return varmap; } private void fillInitialValues(Reference init, Map<String, Node> initvals) { Node object = init.getAssignedValue();"
      },
      {
        "txt": "Preconditions.checkState(object.isObjectLit()); for (Node key = object.getFirstChild(); key != null; key = key.getNext()) { initvals.put(key.getString(), key.removeFirstChild()); } } private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) { List<Node> nodes = Lists.newArrayList(); Node val = ref.getAssignedValue();"
      },
      {
        "txt": "blacklistVarReferencesInTree(val, v.scope); Preconditions.checkState(val.isObjectLit()); Set<String> all = Sets.newLinkedHashSet(varmap.keySet()); for (Node key = val.getFirstChild(); key != null; key = key.getNext()) { String var = key.getString(); Node value = key.removeFirstChild(); nodes.add( IR.assign( IR.name(varmap.get(var)),"
      },
      {
        "txt": "value)); all.remove(var); } for (String var : all) { nodes.add( IR.assign( IR.name(varmap.get(var)), NodeUtil.newUndefinedNode(null))); } Node replacement;"
      },
      {
        "txt": "if (nodes.isEmpty()) { replacement = IR.trueNode(); } else { nodes.add(IR.trueNode()); nodes = Lists.reverse(nodes); replacement = new Node(Token.COMMA); Node cur = replacement; int i; for (i = 0; i < nodes.size() - 2; i++) { cur.addChildToFront(nodes.get(i));"
      },
      {
        "txt": "Node t = new Node(Token.COMMA); cur.addChildToFront(t); cur = t; } cur.addChildToFront(nodes.get(i)); cur.addChildToFront(nodes.get(i + 1)); } Node replace = ref.getParent(); replacement.copyInformationFromForTree(replace); if (replace.isVar()) {"
      },
      {
        "txt": "replace.getParent().replaceChild( replace, NodeUtil.newExpr(replacement)); } else { replace.getParent().replaceChild(replace, replacement); } } private void splitObject(Var v, Reference declaration, Reference init, ReferenceCollection referenceInfo) { Map<String, String> varmap = computeVarList(v, referenceInfo);"
      },
      {
        "txt": "Map<String, Node> initvals = Maps.newHashMap(); Node vnode; boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar(); if (defined) { vnode = init.getParent(); fillInitialValues(init, initvals); } else { vnode = v.getScope().getRootNode().getLastChild().getFirstChild(); }"
      },
      {
        "txt": "for (Map.Entry<String, String> entry : varmap.entrySet()) { Node val = initvals.get(entry.getKey()); Node varnode = NodeUtil.newVarNode(entry.getValue(), val); if (val == null) { varnode.copyInformationFromForTree(vnode); } else { blacklistVarReferencesInTree(val, v.scope); } vnode.getParent().addChildBefore(varnode, vnode); }"
      },
      {
        "txt": "if (defined) { vnode.getParent().removeChild(vnode); } for (Reference ref : referenceInfo.references) { if (defined && ref == init) continue; if (ref.isLvalue()) { replaceAssignmentExpression(v, ref, varmap); } else if (ref.getParent().isVar()) { ref.getGrandparent().removeChild(ref.getParent()); } else {"
      },
      {
        "txt": "Node getprop = ref.getParent(); Preconditions.checkState(getprop.isGetProp()); String var = getprop.getChildAtIndex(1).getString(); Preconditions.checkState(varmap.containsKey(var)); Node replacement = IR.name(varmap.get(var)); replacement.copyInformationFrom(getprop); ref.getGrandparent().replaceChild(ref.getParent(), replacement); } } compiler.reportCodeChange();"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 261,
    "file_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
    "start-bug-line": 216,
    "end-bug-line": 216,
    "bug": "",
    "fix": "validProperties.add(child.getString());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.common.base.Supplier; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.IR;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; class InlineObjectLiterals implements CompilerPass { public static final String VAR_PREFIX = \"JSCompiler_object_inline_\"; private final AbstractCompiler compiler; private final Supplier<String> safeNameIdSupplier;"
      },
      {
        "txt": "InlineObjectLiterals( AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) { this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; } @Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior());"
      },
      {
        "txt": "callback.process(externs, root); } private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); if (isVarInlineForbidden(v)) { continue;"
      },
      {
        "txt": "} ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (isInlinableObject(referenceInfo.references)) { staleVars.add(v); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); splitObject(v, declaration, init, referenceInfo); } } }"
      },
      {
        "txt": "private void blacklistVarReferencesInTree(Node root, final Scope scope) { NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() { @Override public void visit(Node node) { if (node.isName()) { staleVars.add(scope.getVar(node.getString())); } } }, NodeUtil.MATCH_NOT_FUNCTION); }"
      },
      {
        "txt": "private boolean isVarInlineForbidden(Var var) { return var.isGlobal() || var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); } private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; for (Reference ref : refs) {"
      },
      {
        "txt": "Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.isGetProp()) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.isCall() && gramps.getFirstChild() == parent) { return false; } continue;"
      },
      {
        "txt": "} if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (!val.isObjectLit()) { return false;"
      },
      {
        "txt": "for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.isGetterDef() || child.isSetterDef()) { return false; } <extra_id_0> Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false;"
      },
      {
        "txt": "if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true; } return ret;"
      },
      {
        "txt": "} private boolean isVarOrAssignExprLhs(Node n) { Node parent = n.getParent(); return parent.isVar() || (parent.isAssign() && parent.getFirstChild() == n && parent.getParent().isExprResult()); } private Map<String, String> computeVarList( Var v, ReferenceCollection referenceInfo) {"
      },
      {
        "txt": "Map<String, String> varmap = Maps.newLinkedHashMap(); for (Reference ref : referenceInfo.references) { if (ref.isLvalue() || ref.isInitializingDeclaration()) { Node val = ref.getAssignedValue(); if (val != null) { Preconditions.checkState(val.isObjectLit()); for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { String varname = child.getString(); if (varmap.containsKey(varname)) {"
      },
      {
        "txt": "continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } } else if (ref.getParent().isVar()) { } else { Node getprop = ref.getParent();"
      },
      {
        "txt": "Preconditions.checkState(getprop.isGetProp()); String varname = getprop.getLastChild().getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } return varmap;"
      },
      {
        "txt": "} private void fillInitialValues(Reference init, Map<String, Node> initvals) { Node object = init.getAssignedValue(); Preconditions.checkState(object.isObjectLit()); for (Node key = object.getFirstChild(); key != null; key = key.getNext()) { initvals.put(key.getString(), key.removeFirstChild()); } } private void replaceAssignmentExpression(Var v, Reference ref,"
      },
      {
        "txt": "Map<String, String> varmap) { List<Node> nodes = Lists.newArrayList(); Node val = ref.getAssignedValue(); blacklistVarReferencesInTree(val, v.scope); Preconditions.checkState(val.isObjectLit()); Set<String> all = Sets.newLinkedHashSet(varmap.keySet()); for (Node key = val.getFirstChild(); key != null; key = key.getNext()) { String var = key.getString(); Node value = key.removeFirstChild();"
      },
      {
        "txt": "nodes.add( IR.assign( IR.name(varmap.get(var)), value)); all.remove(var); } for (String var : all) { nodes.add( IR.assign( IR.name(varmap.get(var)),"
      },
      {
        "txt": "NodeUtil.newUndefinedNode(null))); } Node replacement; if (nodes.isEmpty()) { replacement = IR.trueNode(); } else { nodes.add(IR.trueNode()); nodes = Lists.reverse(nodes); replacement = new Node(Token.COMMA); Node cur = replacement;"
      },
      {
        "txt": "int i; for (i = 0; i < nodes.size() - 2; i++) { cur.addChildToFront(nodes.get(i)); Node t = new Node(Token.COMMA); cur.addChildToFront(t); cur = t; } cur.addChildToFront(nodes.get(i)); cur.addChildToFront(nodes.get(i + 1)); }"
      },
      {
        "txt": "Node replace = ref.getParent(); replacement.copyInformationFromForTree(replace); if (replace.isVar()) { replace.getParent().replaceChild( replace, NodeUtil.newExpr(replacement)); } else { replace.getParent().replaceChild(replace, replacement); } } private void splitObject(Var v, Reference declaration,"
      },
      {
        "txt": "Reference init, ReferenceCollection referenceInfo) { Map<String, String> varmap = computeVarList(v, referenceInfo); Map<String, Node> initvals = Maps.newHashMap(); Node vnode; boolean defined = referenceInfo.isWellDefined() && init.getParent().isVar(); if (defined) { vnode = init.getParent(); fillInitialValues(init, initvals);"
      },
      {
        "txt": "} else { vnode = v.getScope().getRootNode().getLastChild().getFirstChild(); } for (Map.Entry<String, String> entry : varmap.entrySet()) { Node val = initvals.get(entry.getKey()); Node varnode = NodeUtil.newVarNode(entry.getValue(), val); if (val == null) { varnode.copyInformationFromForTree(vnode); } else { blacklistVarReferencesInTree(val, v.scope);"
      },
      {
        "txt": "} vnode.getParent().addChildBefore(varnode, vnode); } if (defined) { vnode.getParent().removeChild(vnode); } for (Reference ref : referenceInfo.references) { if (defined && ref == init) continue; if (ref.isLvalue()) { replaceAssignmentExpression(v, ref, varmap);"
      },
      {
        "txt": "} else if (ref.getParent().isVar()) { ref.getGrandparent().removeChild(ref.getParent()); } else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.isGetProp()); String var = getprop.getChildAtIndex(1).getString(); Preconditions.checkState(varmap.containsKey(var)); Node replacement = IR.name(varmap.get(var)); replacement.copyInformationFrom(getprop); ref.getGrandparent().replaceChild(ref.getParent(), replacement);"
      },
      {
        "txt": "} } compiler.reportCodeChange(); } }"
      }
    ]
  }
]
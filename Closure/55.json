[
  {
    "id": 332,
    "file_path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
    "start-bug-line": 117,
    "end-bug-line": 117,
    "bug": "return NodeUtil.isFunctionExpression(n);",
    "fix": "return NodeUtil.isFunctionExpression(n) && !NodeUtil.isGetOrSetKey(n.getParent());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableList; import com.google.common.collect.Multimap; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Collection;"
      },
      {
        "txt": "import java.util.List; class FunctionRewriter implements CompilerPass { private final AbstractCompiler compiler; private static final int SAVINGS_THRESHOLD = 16; FunctionRewriter(AbstractCompiler compiler) { this.compiler = compiler; } @Override public void process(Node externs, Node root) { List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),"
      },
      {
        "txt": "new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create(); NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap)); for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) {"
      },
      {
        "txt": "continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode); int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings();"
      },
      {
        "txt": "} if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } }"
      },
      {
        "txt": "public Node parseHelperCode(Reducer reducer) { Node root = compiler.parseSyntheticCode( reducer.getClass().toString() + \":helper\", reducer.getHelperSource()); return (root != null) ? root.removeFirstChild() : null; } private static boolean isReduceableFunctionExpression(Node n) { <extra_id_0> } private class Reduction { private final Node parent; private final Node oldChild; private final Node newChild; Reduction(Node parent, Node oldChild, Node newChild) {"
      },
      {
        "txt": "private final Node newChild; Reduction(Node parent, Node oldChild, Node newChild) { this.parent = parent; this.oldChild = oldChild; this.newChild = newChild; } void apply() { parent.replaceChild(oldChild, newChild); compiler.reportCodeChange(); }"
      },
      {
        "txt": "int estimateSavings() { return InlineCostEstimator.getCost(oldChild) - InlineCostEstimator.getCost(newChild); } } private class ReductionGatherer implements Callback { private final List<Reducer> reducers; private final Multimap<Reducer, Reduction> reductions; ReductionGatherer(List<Reducer> reducers, Multimap<Reducer, Reduction> reductions) {"
      },
      {
        "txt": "this.reducers = reducers; this.reductions = reductions; } @Override public boolean shouldTraverse(NodeTraversal raversal, Node node, Node parent) { for (Reducer reducer : reducers) { Node replacement = reducer.reduce(node); if (replacement != node) {"
      },
      {
        "txt": "reductions.put(reducer, new Reduction(parent, node, replacement)); return false; } } return true; } @Override public void visit(NodeTraversal traversal, Node node, Node parent) { } }"
      },
      {
        "txt": "abstract static class Reducer { abstract String getHelperSource(); abstract Node reduce(Node node); protected final Node buildCallNode(String methodName, Node argumentNode, int lineno, int charno) { Node call = new Node(Token.CALL, lineno, charno); call.putBooleanProp(Node.FREE_CALL, true); call.addChildToBack(Node.newString(Token.NAME, methodName)); if (argumentNode != null) { call.addChildToBack(argumentNode.cloneTree());"
      },
      {
        "txt": "} return call; } } private static class EmptyFunctionReducer extends Reducer { static final String FACTORY_METHOD_NAME = \"JSCompiler_emptyFn\"; static final String HELPER_SOURCE = \"function \" + FACTORY_METHOD_NAME + \"() {\" + \" return function() {}\" + \"}\";"
      },
      {
        "txt": "@Override public String getHelperSource() { return HELPER_SOURCE; } @Override public Node reduce(Node node) { if (NodeUtil.isEmptyFunctionExpression(node)) { return buildCallNode(FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno()); } else {"
      },
      {
        "txt": "return node; } } } abstract static class SingleReturnStatementReducer extends Reducer { protected final Node maybeGetSingleReturnRValue(Node functionNode) { Node body = functionNode.getLastChild(); if (!body.hasOneChild()) { return null; }"
      },
      {
        "txt": "Node statement = body.getFirstChild(); if (statement.getType() == Token.RETURN) { return statement.getFirstChild(); } return null; } } private static class IdentityReducer extends SingleReturnStatementReducer { static final String FACTORY_METHOD_NAME = \"JSCompiler_identityFn\"; static final String HELPER_SOURCE ="
      },
      {
        "txt": "\"function \" + FACTORY_METHOD_NAME + \"() {\" + \" return function(\" + FACTORY_METHOD_NAME + \"_value) {\" + \"return \" + FACTORY_METHOD_NAME + \"_value}\" + \"}\"; @Override public String getHelperSource() { return HELPER_SOURCE; } @Override public Node reduce(Node node) {"
      },
      {
        "txt": "if (!isReduceableFunctionExpression(node)) { return node; } if (isIdentityFunction(node)) { return buildCallNode(FACTORY_METHOD_NAME, null, node.getLineno(), node.getCharno()); } else { return node; } }"
      },
      {
        "txt": "private boolean isIdentityFunction(Node functionNode) { Node argList = functionNode.getFirstChild().getNext(); Node paramNode = argList.getFirstChild(); if (paramNode == null) { return false; } Node value = maybeGetSingleReturnRValue(functionNode); if (value != null && NodeUtil.isName(value) && value.getString().equals(paramNode.getString())) {"
      },
      {
        "txt": "return true; } return false; } } private static class ReturnConstantReducer extends SingleReturnStatementReducer { static final String FACTORY_METHOD_NAME = \"JSCompiler_returnArg\"; static final String HELPER_SOURCE = \"function \" + FACTORY_METHOD_NAME +"
      },
      {
        "txt": "\"(\" + FACTORY_METHOD_NAME + \"_value) {\" + \" return function() {return \" + FACTORY_METHOD_NAME + \"_value}\" + \"}\"; @Override public String getHelperSource() { return HELPER_SOURCE; } @Override public Node reduce(Node node) { if (!isReduceableFunctionExpression(node)) {"
      },
      {
        "txt": "return node; } Node valueNode = getValueNode(node); if (valueNode != null) { return buildCallNode(FACTORY_METHOD_NAME, valueNode, node.getLineno(), node.getCharno()); } else { return node; } }"
      },
      {
        "txt": "private Node getValueNode(Node functionNode) { Node value = maybeGetSingleReturnRValue(functionNode); if (value != null && NodeUtil.isImmutableValue(value)) { return value; } return null; } } private static class GetterReducer extends SingleReturnStatementReducer {"
      },
      {
        "txt": "static final String FACTORY_METHOD_NAME = \"JSCompiler_get\"; static final String HELPER_SOURCE = \"function \" + FACTORY_METHOD_NAME + \"(\" + FACTORY_METHOD_NAME + \"_name) {\" + \" return function() {return this[\" + FACTORY_METHOD_NAME + \"_name]}\" + \"}\"; @Override public String getHelperSource() { return HELPER_SOURCE; }"
      },
      {
        "txt": "@Override public Node reduce(Node node) { if (!isReduceableFunctionExpression(node)) { return node; } Node propName = getGetPropertyName(node); if (propName != null) { if (propName.getType() != Token.STRING) { throw new IllegalStateException( \"Expected STRING, got \" + Token.name(propName.getType()));"
      },
      {
        "txt": "} return buildCallNode(FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno()); } else { return node; } } private Node getGetPropertyName(Node functionNode) { Node value = maybeGetSingleReturnRValue(functionNode); if (value != null &&"
      },
      {
        "txt": "NodeUtil.isGetProp(value) && NodeUtil.isThis(value.getFirstChild())) { return value.getLastChild(); } return null; } } private static class SetterReducer extends Reducer { static final String FACTORY_METHOD_NAME = \"JSCompiler_set\"; static final String HELPER_SOURCE ="
      },
      {
        "txt": "\"function \" + FACTORY_METHOD_NAME + \"(\" + FACTORY_METHOD_NAME + \"_name) {\" + \" return function(\" + FACTORY_METHOD_NAME + \"_value) {\" + \"this[\" + FACTORY_METHOD_NAME + \"_name] = \" + FACTORY_METHOD_NAME + \"_value}\" + \"}\"; @Override public String getHelperSource() { return HELPER_SOURCE; }"
      },
      {
        "txt": "@Override public Node reduce(Node node) { if (!isReduceableFunctionExpression(node)) { return node; } Node propName = getSetPropertyName(node); if (propName != null) { if (propName.getType() != Token.STRING) { throw new IllegalStateException( \"Expected STRING, got \" + Token.name(propName.getType()));"
      },
      {
        "txt": "} return buildCallNode(FACTORY_METHOD_NAME, propName, node.getLineno(), node.getCharno()); } else { return node; } } private Node getSetPropertyName(Node functionNode) { Node body = functionNode.getLastChild(); if (!body.hasOneChild()) {"
      },
      {
        "txt": "return null; } Node argList = functionNode.getFirstChild().getNext(); Node paramNode = argList.getFirstChild(); if (paramNode == null) { return null; } Node statement = body.getFirstChild(); if (!NodeUtil.isExprAssign(statement)) { return null;"
      },
      {
        "txt": "} Node assign = statement.getFirstChild(); Node lhs = assign.getFirstChild(); if (NodeUtil.isGetProp(lhs) && NodeUtil.isThis(lhs.getFirstChild())) { Node rhs = assign.getLastChild(); if (NodeUtil.isName(rhs) && rhs.getString().equals(paramNode.getString())) { Node propertyName = lhs.getLastChild(); return propertyName; }"
      },
      {
        "txt": "} return null; } }"
      }
    ]
  }
]
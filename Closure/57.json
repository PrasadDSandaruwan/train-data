[
  {
    "id": 335,
    "file_path": "src/com/google/javascript/jscomp/ClosureCodingConvention.java",
    "start-bug-line": 197,
    "end-bug-line": 197,
    "bug": "if (target != null) {",
    "fix": "if (target != null && target.getType() == Token.STRING) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.common.collect.ImmutableList; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSTypeNative; import com.google.javascript.rhino.jstype.ObjectType; import java.util.Collection; import java.util.List;"
      },
      {
        "txt": "import java.util.Set; public class ClosureCodingConvention extends DefaultCodingConvention { private static final long serialVersionUID = 1L; static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning( \"JSC_REFLECT_OBJECTLIT_EXPECTED\", \"Object literal expected as second argument\"); @Override public void applySubclassRelationship(FunctionType parentCtor, FunctionType childCtor, SubclassType type) { if (type == SubclassType.INHERITS) {"
      },
      {
        "txt": "childCtor.defineDeclaredProperty(\"superClass_\", parentCtor.getPrototype(), parentCtor.getSource()); childCtor.getPrototype().defineDeclaredProperty(\"constructor\", childCtor, parentCtor.getSource()); } } @Override public SubclassRelationship getClassesDefinedByCall(Node callNode) { Node callName = callNode.getFirstChild(); SubclassType type = typeofClassDefiningName(callName);"
      },
      {
        "txt": "if (type != null) { Node subclass = null; Node superclass = callNode.getLastChild(); boolean isDeprecatedCall = callNode.getChildCount() == 2 && callName.getType() == Token.GETPROP; if (isDeprecatedCall) { subclass = callName.getFirstChild(); } else if (callNode.getChildCount() == 3) { subclass = callName.getNext(); } else {"
      },
      {
        "txt": "return null; } if (type == SubclassType.MIXIN) { if (!endsWithPrototype(superclass)) { return null; } if (!isDeprecatedCall) { if (!endsWithPrototype(subclass)) { return null; }"
      },
      {
        "txt": "subclass = subclass.getFirstChild(); } superclass = superclass.getFirstChild(); } if (subclass != null && subclass.isUnscopedQualifiedName() && superclass.isUnscopedQualifiedName()) { return new SubclassRelationship(type, subclass, superclass); } }"
      },
      {
        "txt": "return null; } private SubclassType typeofClassDefiningName(Node callName) { String methodName = null; if (callName.getType() == Token.GETPROP) { methodName = callName.getLastChild().getString(); } else if (callName.getType() == Token.NAME) { String name = callName.getString(); int dollarIndex = name.lastIndexOf('$'); if (dollarIndex != -1) {"
      },
      {
        "txt": "methodName = name.substring(dollarIndex + 1); } } if (methodName != null) { if (methodName.equals(\"inherits\")) { return SubclassType.INHERITS; } else if (methodName.equals(\"mixin\")) { return SubclassType.MIXIN; } }"
      },
      {
        "txt": "return null; } @Override public boolean isSuperClassReference(String propertyName) { return \"superClass_\".equals(propertyName); } private boolean endsWithPrototype(Node qualifiedName) { return qualifiedName.getType() == Token.GETPROP && qualifiedName.getLastChild().getString().equals(\"prototype\"); }"
      },
      {
        "txt": "@Override public String extractClassNameIfProvide(Node node, Node parent){ return extractClassNameIfGoog(node, parent, \"goog.provide\"); } @Override public String extractClassNameIfRequire(Node node, Node parent){ return extractClassNameIfGoog(node, parent, \"goog.require\"); } private static String extractClassNameIfGoog(Node node, Node parent, String functionName){"
      },
      {
        "txt": "if (NodeUtil.isExprCall(parent)) { Node callee = node.getFirstChild(); if (callee != null && callee.getType() == Token.GETPROP) { String qualifiedName = callee.getQualifiedName(); if (functionName.equals(qualifiedName)) { Node target = callee.getNext(); <extra_id_0> className = target.getString(); } } } } return className;"
      },
      {
        "txt": "} return className; } @Override public String getExportPropertyFunction() { return \"goog.exportProperty\"; } @Override public String getExportSymbolFunction() { return \"goog.exportSymbol\";"
      },
      {
        "txt": "} @Override public List<String> identifyTypeDeclarationCall(Node n) { Node callName = n.getFirstChild(); if (\"goog.addDependency\".equals(callName.getQualifiedName()) && n.getChildCount() >= 3) { Node typeArray = callName.getNext().getNext(); if (typeArray.getType() == Token.ARRAYLIT) { List<String> typeNames = Lists.newArrayList(); for (Node name = typeArray.getFirstChild(); name != null;"
      },
      {
        "txt": "name = name.getNext()) { if (name.getType() == Token.STRING) { typeNames.add(name.getString()); } } return typeNames; } } return null; }"
      },
      {
        "txt": "@Override public String getAbstractMethodName() { return \"goog.abstractMethod\"; } @Override public String getSingletonGetterClassName(Node callNode) { Node callArg = callNode.getFirstChild(); String callName = callArg.getQualifiedName(); if (!(\"goog.addSingletonGetter\".equals(callName) || \"goog$addSingletonGetter\".equals(callName)) ||"
      },
      {
        "txt": "callNode.getChildCount() != 2) { return null; } return callArg.getNext().getQualifiedName(); } @Override public void applySingletonGetter(FunctionType functionType, FunctionType getterType, ObjectType objectType) { functionType.defineDeclaredProperty(\"getInstance\", getterType, functionType.getSource());"
      },
      {
        "txt": "functionType.defineDeclaredProperty(\"instance_\", objectType, functionType.getSource()); } @Override public String getGlobalObject() { return \"goog.global\"; } private final Set<String> propertyTestFunctions = ImmutableSet.of( \"goog.isDef\", \"goog.isNull\", \"goog.isDefAndNotNull\", \"goog.isString\", \"goog.isNumber\", \"goog.isBoolean\","
      },
      {
        "txt": "\"goog.isFunction\", \"goog.isArray\", \"goog.isObject\"); @Override public boolean isPropertyTestFunction(Node call) { Preconditions.checkArgument(call.getType() == Token.CALL); return propertyTestFunctions.contains( call.getFirstChild().getQualifiedName()); } @Override public ObjectLiteralCast getObjectLiteralCast(NodeTraversal t, Node callNode) {"
      },
      {
        "txt": "Preconditions.checkArgument(callNode.getType() == Token.CALL); Node callName = callNode.getFirstChild(); if (!\"goog.reflect.object\".equals(callName.getQualifiedName()) || callNode.getChildCount() != 3) { return null; } Node typeNode = callName.getNext(); if (!typeNode.isQualifiedName()) { return null; }"
      },
      {
        "txt": "Node objectNode = typeNode.getNext(); if (objectNode.getType() != Token.OBJECTLIT) { t.getCompiler().report(JSError.make(t.getSourceName(), callNode, OBJECTLIT_EXPECTED)); return null; } return new ObjectLiteralCast(typeNode.getQualifiedName(), typeNode.getNext()); } @Override"
      },
      {
        "txt": "public boolean isOptionalParameter(Node parameter) { return false; } @Override public boolean isVarArgsParameter(Node parameter) { return false; } @Override public boolean isPrivate(String name) { return false;"
      },
      {
        "txt": "} @Override public Collection<AssertionFunctionSpec> getAssertionFunctions() { return ImmutableList.<AssertionFunctionSpec>of( new AssertionFunctionSpec(\"goog.asserts.assert\"), new AssertionFunctionSpec(\"goog.asserts.assertNumber\", JSTypeNative.NUMBER_TYPE), new AssertionFunctionSpec(\"goog.asserts.assertString\", JSTypeNative.STRING_TYPE), new AssertionFunctionSpec(\"goog.asserts.assertFunction\","
      },
      {
        "txt": "JSTypeNative.FUNCTION_INSTANCE_TYPE), new AssertionFunctionSpec(\"goog.asserts.assertObject\", JSTypeNative.OBJECT_TYPE), new AssertionFunctionSpec(\"goog.asserts.assertArray\", JSTypeNative.ARRAY_TYPE), new AssertionFunctionSpec(\"goog.asserts.assertInstanceof\", JSTypeNative.OBJECT_TYPE) ); } @Override"
      },
      {
        "txt": "public Bind describeFunctionBind(Node n) { Bind result = super.describeFunctionBind(n); if (result != null) { return result; } if (n.getType() != Token.CALL) { return null; } Node callTarget = n.getFirstChild(); String name = callTarget.getQualifiedName();"
      },
      {
        "txt": "if (name != null) { if (name.equals(\"goog.bind\") || name.equals(\"goog$bind\")) { Node fn = callTarget.getNext(); if (fn == null) { return null; } Node thisValue = safeNext(fn); Node parameters = safeNext(thisValue); return new Bind(fn, thisValue, parameters);"
      },
      {
        "txt": "} if (name.equals(\"goog.partial\") || name.equals(\"goog$partial\")) { Node fn = callTarget.getNext(); if (fn == null) { return null; } Node thisValue = null; Node parameters = safeNext(fn); return new Bind(fn, thisValue, parameters); }"
      },
      {
        "txt": "} return null; } private Node safeNext(Node n) { if (n != null) { return n.getNext(); } return null; }"
      }
    ]
  }
]
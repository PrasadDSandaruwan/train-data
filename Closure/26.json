[
  {
    "id": 252,
    "file_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
    "start-bug-line": 128,
    "end-bug-line": 128,
    "bug": "",
    "fix": "private Set<String> modulesWithExports = Sets.newHashSet();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Sets;"
      },
      {
        "txt": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.rhino.IR; import com.google.javascript.rhino.Node; import java.io.File; import java.net.URI; import java.net.URISyntaxException; import java.util.Set; import java.util.regex.Pattern; public class ProcessCommonJSModules implements CompilerPass { public static final String DEFAULT_FILENAME_PREFIX = \".\" + File.separator;"
      },
      {
        "txt": "private static final String MODULE_NAME_SEPARATOR = \"\\\\$\"; private static final String MODULE_NAME_PREFIX = \"module$\"; private final AbstractCompiler compiler; private final String filenamePrefix; private final boolean reportDependencies; private JSModule module; ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) { this(compiler, filenamePrefix, true); } ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix,"
      },
      {
        "txt": "boolean reportDependencies) { this.compiler = compiler; this.filenamePrefix = filenamePrefix.endsWith(File.separator) ? filenamePrefix : filenamePrefix + File.separator; this.reportDependencies = reportDependencies; } @Override public void process(Node externs, Node root) { NodeTraversal .traverse(compiler, root, new ProcessCommonJsModulesCallback());"
      },
      {
        "txt": "} String guessCJSModuleName(String filename) { return toModuleName(normalizeSourceName(filename)); } JSModule getModule() { return module; } public static String toModuleName(String filename) { return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\")"
      },
      {
        "txt": ".replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR) .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); } public static String toModuleName(String requiredFilename, String currentFilename) { requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\"); currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\"); if (requiredFilename.startsWith(\".\" + File.separator) || requiredFilename.startsWith(\"..\" + File.separator)) { try {"
      },
      {
        "txt": "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename)) .toString(); } catch (URISyntaxException e) { throw new RuntimeException(e); } } return toModuleName(requiredFilename); } private String normalizeSourceName(String filename) { if (filename.indexOf(filenamePrefix) == 0) {"
      },
      {
        "txt": "} return filename; } private class ProcessCommonJsModulesCallback extends AbstractPostOrderCallback { private int scriptNodeCount = 0; <extra_id_0> @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isCall() && n.getChildCount() == 2 && \"require\".equals(n.getFirstChild().getQualifiedName()) && n.getChildAtIndex(1).isString()) { visitRequireCall(t, n, parent);"
      },
      {
        "txt": "n.getChildAtIndex(1).isString()) { visitRequireCall(t, n, parent); } if (n.isScript()) { scriptNodeCount++; visitScript(t, n); } if (n.isGetProp() && \"module.exports\".equals(n.getQualifiedName())) { visitModuleExports(n);"
      },
      {
        "txt": "} } private void visitRequireCall(NodeTraversal t, Node require, Node parent) { String moduleName = toModuleName(require.getChildAtIndex(1).getString(), normalizeSourceName(t.getSourceName())); Node moduleRef = IR.name(moduleName).srcref(require); parent.replaceChild(require, moduleRef); Node script = getCurrentScriptNode(parent); if (reportDependencies) { t.getInput().addRequire(moduleName);"
      },
      {
        "txt": "} script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")), IR.string(moduleName))).copyInformationFromForTree(require)); compiler.reportCodeChange(); } private void visitScript(NodeTraversal t, Node script) { Preconditions.checkArgument(scriptNodeCount == 1, \"ProcessCommonJSModules supports only one invocation per \" + \"CompilerInput / script node\");"
      },
      {
        "txt": "String moduleName = guessCJSModuleName(normalizeSourceName(script .getSourceFileName())); script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()) .copyInformationFromForTree(script)); if (reportDependencies) { CompilerInput ci = t.getInput(); ci.addProvide(moduleName); JSModule m = new JSModule(moduleName); m.addAndOverrideModule(ci); module = m;"
      },
      {
        "txt": "} script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script)); emitOptionalModuleExportsOverride(script, moduleName); NodeTraversal.traverse(compiler, script, new SuffixVarsCallback( moduleName)); compiler.reportCodeChange(); } private void emitOptionalModuleExportsOverride(Node script,"
      },
      {
        "txt": "String moduleName) { Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\")); script.addChildToBack(IR.ifNode( moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree( script)); } private void visitModuleExports(Node prop) {"
      },
      {
        "txt": "String moduleName = guessCJSModuleName(prop.getSourceFileName()); Node module = prop.getChildAtIndex(0); module.putProp(Node.ORIGINALNAME_PROP, \"module\"); module.setString(moduleName); Node exports = prop.getChildAtIndex(1); exports.putProp(Node.ORIGINALNAME_PROP, \"exports\"); exports.setString(\"module$exports\"); } private Node getCurrentScriptNode(Node n) { while (true) {"
      },
      {
        "txt": "if (n.isScript()) { return n; } n = n.getParent(); } } } private class SuffixVarsCallback extends AbstractPostOrderCallback { private static final String EXPORTS = \"exports\"; private final String suffix;"
      },
      {
        "txt": "SuffixVarsCallback(String suffix) { this.suffix = suffix; } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName()) { String name = n.getString(); if (suffix.equals(name)) { return; }"
      },
      {
        "txt": "if (EXPORTS.equals(name)) { n.setString(suffix); n.putProp(Node.ORIGINALNAME_PROP, EXPORTS); } else { Scope.Var var = t.getScope().getVar(name); if (var != null && var.isGlobal()) { n.setString(name + \"$$\" + suffix); n.putProp(Node.ORIGINALNAME_PROP, name); } }"
      },
      {
        "txt": "} } }"
      }
    ]
  },
  {
    "id": 253,
    "file_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
    "start-bug-line": 207,
    "end-bug-line": 207,
    "bug": "",
    "fix": "if (!modulesWithExports.contains(moduleName)) { return; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.rhino.IR; import com.google.javascript.rhino.Node; import java.io.File; import java.net.URI;"
      },
      {
        "txt": "import java.net.URISyntaxException; import java.util.Set; import java.util.regex.Pattern; public class ProcessCommonJSModules implements CompilerPass { public static final String DEFAULT_FILENAME_PREFIX = \".\" + File.separator; private static final String MODULE_NAME_SEPARATOR = \"\\\\$\"; private static final String MODULE_NAME_PREFIX = \"module$\"; private final AbstractCompiler compiler; private final String filenamePrefix; private final boolean reportDependencies;"
      },
      {
        "txt": "private JSModule module; ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) { this(compiler, filenamePrefix, true); } ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix, boolean reportDependencies) { this.compiler = compiler; this.filenamePrefix = filenamePrefix.endsWith(File.separator) ? filenamePrefix : filenamePrefix + File.separator; this.reportDependencies = reportDependencies;"
      },
      {
        "txt": "} @Override public void process(Node externs, Node root) { NodeTraversal .traverse(compiler, root, new ProcessCommonJsModulesCallback()); } String guessCJSModuleName(String filename) { return toModuleName(normalizeSourceName(filename)); } JSModule getModule() {"
      },
      {
        "txt": "return module; } public static String toModuleName(String filename) { return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\") .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR) .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); } public static String toModuleName(String requiredFilename, String currentFilename) {"
      },
      {
        "txt": "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\"); currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\"); if (requiredFilename.startsWith(\".\" + File.separator) || requiredFilename.startsWith(\"..\" + File.separator)) { try { requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename)) .toString(); } catch (URISyntaxException e) { throw new RuntimeException(e); }"
      },
      {
        "txt": "} return toModuleName(requiredFilename); } private String normalizeSourceName(String filename) { if (filename.indexOf(filenamePrefix) == 0) { filename = filename.substring(filenamePrefix.length()); } return filename; } private class ProcessCommonJsModulesCallback extends"
      },
      {
        "txt": "AbstractPostOrderCallback { private int scriptNodeCount = 0; @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isCall() && n.getChildCount() == 2 && \"require\".equals(n.getFirstChild().getQualifiedName()) && n.getChildAtIndex(1).isString()) { visitRequireCall(t, n, parent); } if (n.isScript()) {"
      },
      {
        "txt": "scriptNodeCount++; visitScript(t, n); } if (n.isGetProp() && \"module.exports\".equals(n.getQualifiedName())) { visitModuleExports(n); } } private void visitRequireCall(NodeTraversal t, Node require, Node parent) { String moduleName = toModuleName(require.getChildAtIndex(1).getString(),"
      },
      {
        "txt": "normalizeSourceName(t.getSourceName())); Node moduleRef = IR.name(moduleName).srcref(require); parent.replaceChild(require, moduleRef); Node script = getCurrentScriptNode(parent); if (reportDependencies) { t.getInput().addRequire(moduleName); } script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")), IR.string(moduleName))).copyInformationFromForTree(require));"
      },
      {
        "txt": "compiler.reportCodeChange(); } private void visitScript(NodeTraversal t, Node script) { Preconditions.checkArgument(scriptNodeCount == 1, \"ProcessCommonJSModules supports only one invocation per \" + \"CompilerInput / script node\"); String moduleName = guessCJSModuleName(normalizeSourceName(script .getSourceFileName())); script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()) .copyInformationFromForTree(script));"
      },
      {
        "txt": "if (reportDependencies) { CompilerInput ci = t.getInput(); ci.addProvide(moduleName); JSModule m = new JSModule(moduleName); m.addAndOverrideModule(ci); module = m; } script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script));"
      },
      {
        "txt": "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback( moduleName)); compiler.reportCodeChange(); } private void emitOptionalModuleExportsOverride(Node script, String moduleName) { <extra_id_0> Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\")); script.addChildToBack(IR.ifNode( moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree("
      },
      {
        "txt": "IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree( script)); } private void visitModuleExports(Node prop) { String moduleName = guessCJSModuleName(prop.getSourceFileName()); Node module = prop.getChildAtIndex(0); module.putProp(Node.ORIGINALNAME_PROP, \"module\"); module.setString(moduleName); Node exports = prop.getChildAtIndex(1);"
      },
      {
        "txt": "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\"); exports.setString(\"module$exports\"); } private Node getCurrentScriptNode(Node n) { while (true) { if (n.isScript()) { return n; } n = n.getParent(); }"
      },
      {
        "txt": "} } private class SuffixVarsCallback extends AbstractPostOrderCallback { private static final String EXPORTS = \"exports\"; private final String suffix; SuffixVarsCallback(String suffix) { this.suffix = suffix; } @Override public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "if (n.isName()) { String name = n.getString(); if (suffix.equals(name)) { return; } if (EXPORTS.equals(name)) { n.setString(suffix); n.putProp(Node.ORIGINALNAME_PROP, EXPORTS); } else { Scope.Var var = t.getScope().getVar(name);"
      },
      {
        "txt": "if (var != null && var.isGlobal()) { n.setString(name + \"$$\" + suffix); n.putProp(Node.ORIGINALNAME_PROP, name); } } } } }"
      }
    ]
  },
  {
    "id": 254,
    "file_path": "src/com/google/javascript/jscomp/ProcessCommonJSModules.java",
    "start-bug-line": 228,
    "end-bug-line": 228,
    "bug": "",
    "fix": "modulesWithExports.add(moduleName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"
      },
      {
        "txt": "import com.google.javascript.rhino.IR; import com.google.javascript.rhino.Node; import java.io.File; import java.net.URI; import java.net.URISyntaxException; import java.util.Set; import java.util.regex.Pattern; public class ProcessCommonJSModules implements CompilerPass { public static final String DEFAULT_FILENAME_PREFIX = \".\" + File.separator; private static final String MODULE_NAME_SEPARATOR = \"\\\\$\";"
      },
      {
        "txt": "private static final String MODULE_NAME_PREFIX = \"module$\"; private final AbstractCompiler compiler; private final String filenamePrefix; private final boolean reportDependencies; private JSModule module; ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix) { this(compiler, filenamePrefix, true); } ProcessCommonJSModules(AbstractCompiler compiler, String filenamePrefix, boolean reportDependencies) {"
      },
      {
        "txt": "this.compiler = compiler; this.filenamePrefix = filenamePrefix.endsWith(File.separator) ? filenamePrefix : filenamePrefix + File.separator; this.reportDependencies = reportDependencies; } @Override public void process(Node externs, Node root) { NodeTraversal .traverse(compiler, root, new ProcessCommonJsModulesCallback()); }"
      },
      {
        "txt": "String guessCJSModuleName(String filename) { return toModuleName(normalizeSourceName(filename)); } JSModule getModule() { return module; } public static String toModuleName(String filename) { return MODULE_NAME_PREFIX + filename.replaceAll(\"^\\\\.\" + Pattern.quote(File.separator), \"\") .replaceAll(Pattern.quote(File.separator), MODULE_NAME_SEPARATOR)"
      },
      {
        "txt": ".replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\"); } public static String toModuleName(String requiredFilename, String currentFilename) { requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\"); currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\"); if (requiredFilename.startsWith(\".\" + File.separator) || requiredFilename.startsWith(\"..\" + File.separator)) { try { requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))"
      },
      {
        "txt": ".toString(); } catch (URISyntaxException e) { throw new RuntimeException(e); } } return toModuleName(requiredFilename); } private String normalizeSourceName(String filename) { if (filename.indexOf(filenamePrefix) == 0) { filename = filename.substring(filenamePrefix.length());"
      },
      {
        "txt": "} return filename; } private class ProcessCommonJsModulesCallback extends AbstractPostOrderCallback { private int scriptNodeCount = 0; @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isCall() && n.getChildCount() == 2 && \"require\".equals(n.getFirstChild().getQualifiedName()) &&"
      },
      {
        "txt": "n.getChildAtIndex(1).isString()) { visitRequireCall(t, n, parent); } if (n.isScript()) { scriptNodeCount++; visitScript(t, n); } if (n.isGetProp() && \"module.exports\".equals(n.getQualifiedName())) { visitModuleExports(n);"
      },
      {
        "txt": "} } private void visitRequireCall(NodeTraversal t, Node require, Node parent) { String moduleName = toModuleName(require.getChildAtIndex(1).getString(), normalizeSourceName(t.getSourceName())); Node moduleRef = IR.name(moduleName).srcref(require); parent.replaceChild(require, moduleRef); Node script = getCurrentScriptNode(parent); if (reportDependencies) { t.getInput().addRequire(moduleName);"
      },
      {
        "txt": "} script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")), IR.string(moduleName))).copyInformationFromForTree(require)); compiler.reportCodeChange(); } private void visitScript(NodeTraversal t, Node script) { Preconditions.checkArgument(scriptNodeCount == 1, \"ProcessCommonJSModules supports only one invocation per \" + \"CompilerInput / script node\");"
      },
      {
        "txt": "String moduleName = guessCJSModuleName(normalizeSourceName(script .getSourceFileName())); script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit()) .copyInformationFromForTree(script)); if (reportDependencies) { CompilerInput ci = t.getInput(); ci.addProvide(moduleName); JSModule m = new JSModule(moduleName); m.addAndOverrideModule(ci); module = m;"
      },
      {
        "txt": "} script.addChildToFront(IR.exprResult( IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")), IR.string(moduleName))).copyInformationFromForTree(script)); emitOptionalModuleExportsOverride(script, moduleName); NodeTraversal.traverse(compiler, script, new SuffixVarsCallback( moduleName)); compiler.reportCodeChange(); } private void emitOptionalModuleExportsOverride(Node script,"
      },
      {
        "txt": "String moduleName) { Node moduleExportsProp = IR.getprop(IR.name(moduleName), IR.string(\"module$exports\")); script.addChildToBack(IR.ifNode( moduleExportsProp, IR.block(IR.exprResult(IR.assign(IR.name(moduleName), moduleExportsProp.cloneTree())))).copyInformationFromForTree( script)); } private void visitModuleExports(Node prop) {"
      },
      {
        "txt": "Node module = prop.getChildAtIndex(0); module.putProp(Node.ORIGINALNAME_PROP, \"module\"); module.setString(moduleName); Node exports = prop.getChildAtIndex(1); exports.putProp(Node.ORIGINALNAME_PROP, \"exports\"); exports.setString(\"module$exports\"); <extra_id_0> private Node getCurrentScriptNode(Node n) { while (true) { if (n.isScript()) { return n; } n = n.getParent();"
      },
      {
        "txt": "} n = n.getParent(); } } } private class SuffixVarsCallback extends AbstractPostOrderCallback { private static final String EXPORTS = \"exports\"; private final String suffix; SuffixVarsCallback(String suffix) { this.suffix = suffix;"
      },
      {
        "txt": "} @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName()) { String name = n.getString(); if (suffix.equals(name)) { return; } if (EXPORTS.equals(name)) { n.setString(suffix);"
      },
      {
        "txt": "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS); } else { Scope.Var var = t.getScope().getVar(name); if (var != null && var.isGlobal()) { n.setString(name + \"$$\" + suffix); n.putProp(Node.ORIGINALNAME_PROP, name); } } } }"
      }
    ]
  }
]
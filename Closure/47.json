[
  {
    "id": 305,
    "file_path": "src/com/google/debugging/sourcemap/SourceMapConsumerV3.java",
    "start-bug-line": 489,
    "end-bug-line": 490,
    "bug": ".setLineNumber(entry.getSourceLine()) .setColumnPosition(entry.getSourceColumn());",
    "fix": ".setLineNumber(entry.getSourceLine() + 1) .setColumnPosition(entry.getSourceColumn() + 1);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.debugging.sourcemap.Base64VLQ.CharIterator; import com.google.debugging.sourcemap.proto.Mapping.OriginalMapping; import com.google.debugging.sourcemap.proto.Mapping.OriginalMapping.Builder; import org.json.JSONArray; import org.json.JSONException; import org.json.JSONObject; import java.io.IOException; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Arrays; import java.util.Collection; import java.util.Collections; import java.util.HashMap; import java.util.Map; public class SourceMapConsumerV3 implements SourceMapConsumer, SourceMappingReversable { static final int UNMAPPED = -1; private String[] sources; private String[] names;"
      },
      {
        "txt": "private int lineCount; private ArrayList<ArrayList<Entry>> lines = null; private Map<String, Map<Integer, Collection<OriginalMapping>>> reverseSourceMapping; public SourceMapConsumerV3() { } static class DefaultSourceMapSupplier implements SourceMapSupplier { @Override public String getSourceMap(String url) { return null;"
      },
      {
        "txt": "} } @Override public void parse(String contents) throws SourceMapParseException { parse(contents, null); } public void parse(String contents, SourceMapSupplier sectionSupplier) throws SourceMapParseException { try { JSONObject sourceMapRoot = new JSONObject(contents);"
      },
      {
        "txt": "parse(sourceMapRoot, sectionSupplier); } catch (JSONException ex) { throw new SourceMapParseException(\"JSON parse exception: \" + ex); } } public void parse(JSONObject sourceMapRoot) throws SourceMapParseException { parse(sourceMapRoot, null); } public void parse(JSONObject sourceMapRoot, SourceMapSupplier sectionSupplier) throws SourceMapParseException {"
      },
      {
        "txt": "try { int version = sourceMapRoot.getInt(\"version\"); if (version != 3) { throw new SourceMapParseException(\"Unknown version: \" + version); } String file = sourceMapRoot.getString(\"file\"); if (file.isEmpty()) { throw new SourceMapParseException(\"File entry is missing or empty\"); } if (sourceMapRoot.has(\"sections\")) {"
      },
      {
        "txt": "parseMetaMap(sourceMapRoot, sectionSupplier); return; } lineCount = sourceMapRoot.getInt(\"lineCount\"); String lineMap = sourceMapRoot.getString(\"mappings\"); sources = getJavaStringArray(sourceMapRoot.getJSONArray(\"sources\")); names = getJavaStringArray(sourceMapRoot.getJSONArray(\"names\")); lines = Lists.newArrayListWithCapacity(lineCount); new MappingBuilder(lineMap).build(); } catch (JSONException ex) {"
      },
      {
        "txt": "throw new SourceMapParseException(\"JSON parse exception: \" + ex); } } private void parseMetaMap( JSONObject sourceMapRoot, SourceMapSupplier sectionSupplier) throws SourceMapParseException { if (sectionSupplier == null) { sectionSupplier = new DefaultSourceMapSupplier(); } try {"
      },
      {
        "txt": "int version = sourceMapRoot.getInt(\"version\"); if (version != 3) { throw new SourceMapParseException(\"Unknown version: \" + version); } String file = sourceMapRoot.getString(\"file\"); if (file.isEmpty()) { throw new SourceMapParseException(\"File entry is missing or empty\"); } if (sourceMapRoot.has(\"lineCount\") || sourceMapRoot.has(\"mappings\")"
      },
      {
        "txt": "|| sourceMapRoot.has(\"sources\") || sourceMapRoot.has(\"names\")) { throw new SourceMapParseException(\"Invalid map format\"); } SourceMapGeneratorV3 generator = new SourceMapGeneratorV3(); JSONArray sections = sourceMapRoot.getJSONArray(\"sections\"); for (int i = 0, count = sections.length(); i < count; i++) { JSONObject section = sections.getJSONObject(i); if (section.has(\"map\") && section.has(\"url\")) { throw new SourceMapParseException("
      },
      {
        "txt": "\"Invalid map format: section may not have both 'map' and 'url'\"); } JSONObject offset = section.getJSONObject(\"offset\"); int line = offset.getInt(\"line\"); int column = offset.getInt(\"column\"); String mapSectionContents; if (section.has(\"url\")) { String url = section.getString(\"url\"); mapSectionContents = sectionSupplier.getSourceMap(url); if (mapSectionContents == null) {"
      },
      {
        "txt": "throw new SourceMapParseException(\"Unable to retrieve: \" + url); } } else if (section.has(\"map\")) { mapSectionContents = section.getString(\"map\"); } else { throw new SourceMapParseException( \"Invalid map format: section must have either 'map' or 'url'\"); } generator.mergeMapSection(line, column, mapSectionContents); }"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); try { generator.appendTo(sb, file); } catch (IOException e) { throw new RuntimeException(e); } parse(sb.toString()); } catch (IOException ex) { throw new SourceMapParseException(\"IO exception: \" + ex); } catch (JSONException ex) {"
      },
      {
        "txt": "throw new SourceMapParseException(\"JSON parse exception: \" + ex); } } @Override public OriginalMapping getMappingForLine(int lineNumber, int column) { lineNumber--; column--; if (lineNumber < 0 || lineNumber >= lines.size()) { return null; }"
      },
      {
        "txt": "Preconditions.checkState(lineNumber >= 0); Preconditions.checkState(column >= 0); if (lines.get(lineNumber) == null) { return getPreviousMapping(lineNumber); } ArrayList<Entry> entries = lines.get(lineNumber); Preconditions.checkState(entries.size() > 0); if (entries.get(0).getGeneratedColumn() > column) { return getPreviousMapping(lineNumber); }"
      },
      {
        "txt": "int index = search(entries, column, 0, entries.size() - 1); Preconditions.checkState(index >= 0, \"unexpected:%s\", index); return getOriginalMappingForEntry(entries.get(index)); } @Override public Collection<String> getOriginalSources() { return Arrays.asList(sources); } @Override public Collection<OriginalMapping> getReverseMapping(String originalFile,"
      },
      {
        "txt": "int line, int column) { if (reverseSourceMapping == null) { createReverseMapping(); } Map<Integer, Collection<OriginalMapping>> sourceLineToCollectionMap = reverseSourceMapping.get(originalFile); if (sourceLineToCollectionMap == null) { return Collections.emptyList(); } else { Collection<OriginalMapping> mappings ="
      },
      {
        "txt": "sourceLineToCollectionMap.get(line); if (mappings == null) { return Collections.emptyList(); } else { return mappings; } } } private String[] getJavaStringArray(JSONArray array) throws JSONException { int len = array.length();"
      },
      {
        "txt": "String[] result = new String[len]; for(int i = 0; i < len; i++) { result[i] = array.getString(i); } return result; } private class MappingBuilder { private static final int MAX_ENTRY_VALUES = 5; private final StringCharIterator content; private int line = 0;"
      },
      {
        "txt": "private int previousCol = 0; private int previousSrcId = 0; private int previousSrcLine = 0; private int previousSrcColumn = 0; private int previousNameId = 0; MappingBuilder(String lineMap) { this.content = new StringCharIterator(lineMap); } void build() { int [] temp = new int[MAX_ENTRY_VALUES];"
      },
      {
        "txt": "ArrayList<Entry> entries = new ArrayList<Entry>(); while (content.hasNext()) { if (tryConsumeToken(';')) { ArrayList<Entry> result; if (entries.size() > 0) { result = entries; entries = new ArrayList<Entry>(); } else { result = null; }"
      },
      {
        "txt": "lines.add(result); entries.clear(); line++; previousCol = 0; } else { int entryValues = 0; while (!entryComplete()) { temp[entryValues] = nextValue(); entryValues++; }"
      },
      {
        "txt": "Entry entry = decodeEntry(temp, entryValues); validateEntry(entry); entries.add(entry); tryConsumeToken(','); } } } private void validateEntry(Entry entry) { Preconditions.checkState(line < lineCount); Preconditions.checkState(entry.getSourceFileId() == UNMAPPED"
      },
      {
        "txt": "|| entry.getSourceFileId() < sources.length); Preconditions.checkState(entry.getNameId() == UNMAPPED || entry.getNameId() < names.length); } private Entry decodeEntry(int[] vals, int entryValues) { Entry entry; switch (entryValues) { case 1: entry = new UnmappedEntry( vals[0] + previousCol);"
      },
      {
        "txt": "previousCol = entry.getGeneratedColumn(); return entry; case 4: entry = new UnnamedEntry( vals[0] + previousCol, vals[1] + previousSrcId, vals[2] + previousSrcLine, vals[3] + previousSrcColumn); previousCol = entry.getGeneratedColumn(); previousSrcId = entry.getSourceFileId();"
      },
      {
        "txt": "previousSrcLine = entry.getSourceLine(); previousSrcColumn = entry.getSourceColumn(); return entry; case 5: entry = new NamedEntry( vals[0] + previousCol, vals[1] + previousSrcId, vals[2] + previousSrcLine, vals[3] + previousSrcColumn, vals[4] + previousNameId);"
      },
      {
        "txt": "previousCol = entry.getGeneratedColumn(); previousSrcId = entry.getSourceFileId(); previousSrcLine = entry.getSourceLine(); previousSrcColumn = entry.getSourceColumn(); previousNameId = entry.getNameId(); return entry; default: throw new IllegalStateException( \"Unexpected number of values for entry:\" + entryValues); }"
      },
      {
        "txt": "} private boolean tryConsumeToken(char token) { if (content.hasNext() && content.peek() == token) { content.next(); return true; } return false; } private boolean entryComplete() { if (!content.hasNext()) {"
      },
      {
        "txt": "return true; } char c = content.peek(); return (c == ';' || c == ','); } private int nextValue() { return Base64VLQ.decode(content); } } private int search(ArrayList<Entry> entries, int target, int start, int end) {"
      },
      {
        "txt": "while (true) { int mid = ((end - start) / 2) + start; int compare = compareEntry(entries, mid, target); if (compare == 0) { return mid; } else if (compare < 0) { start = mid + 1; if (start > end) { return end; }"
      },
      {
        "txt": "} else { end = mid - 1; if (end < start) { return end; } } } } private int compareEntry(ArrayList<Entry> entries, int entry, int target) { return entries.get(entry).getGeneratedColumn() - target;"
      },
      {
        "txt": "} private OriginalMapping getPreviousMapping(int lineNumber) { do { if (lineNumber == 0) { return null; } lineNumber--; } while (lines.get(lineNumber) == null); ArrayList<Entry> entries = lines.get(lineNumber); return getOriginalMappingForEntry(entries.get(entries.size() - 1));"
      },
      {
        "txt": "private OriginalMapping getOriginalMappingForEntry(Entry entry) { if (entry.getSourceFileId() == UNMAPPED) { return null; } else { Builder x = OriginalMapping.newBuilder() .setOriginalFile(sources[entry.getSourceFileId()]) <extra_id_0> if (entry.getNameId() != UNMAPPED) { x.setIdentifier(names[entry.getNameId()]); } return x.build(); } }"
      },
      {
        "txt": "} } private void createReverseMapping() { reverseSourceMapping = new HashMap<String, Map<Integer, Collection<OriginalMapping>>>(); for (int targetLine = 0; targetLine < lines.size(); targetLine++) { ArrayList<Entry> entries = lines.get(targetLine); if (entries != null) { for (Entry entry : entries) { if (entry.getSourceFileId() != UNMAPPED"
      },
      {
        "txt": "&& entry.getSourceLine() != UNMAPPED) { String originalFile = sources[entry.getSourceFileId()]; if (!reverseSourceMapping.containsKey(originalFile)) { reverseSourceMapping.put(originalFile, new HashMap<Integer, Collection<OriginalMapping>>()); } Map<Integer, Collection<OriginalMapping>> lineToCollectionMap = reverseSourceMapping.get(originalFile); int sourceLine = entry.getSourceLine(); if (!lineToCollectionMap.containsKey(sourceLine)) {"
      },
      {
        "txt": "lineToCollectionMap.put(sourceLine, new ArrayList<OriginalMapping>(1)); } Collection<OriginalMapping> mappings = lineToCollectionMap.get(sourceLine); Builder builder = OriginalMapping.newBuilder().setLineNumber( targetLine).setColumnPosition(entry.getGeneratedColumn()); mappings.add(builder.build()); } }"
      },
      {
        "txt": "} } } private static class StringCharIterator implements CharIterator { final String content; final int length; int current = 0; StringCharIterator(String content) { this.content = content; this.length = content.length();"
      },
      {
        "txt": "} @Override public char next() { return content.charAt(current++); } char peek() { return content.charAt(current); } @Override public boolean hasNext() {"
      },
      {
        "txt": "return current < length; } } private interface Entry { int getGeneratedColumn(); int getSourceFileId(); int getSourceLine(); int getSourceColumn(); int getNameId(); }"
      },
      {
        "txt": "private static class UnmappedEntry implements Entry { private final int column; UnmappedEntry(int column) { this.column = column; } @Override public int getGeneratedColumn() { return column; } @Override"
      },
      {
        "txt": "public int getSourceFileId() { return UNMAPPED; } @Override public int getSourceLine() { return UNMAPPED; } @Override public int getSourceColumn() { return UNMAPPED;"
      },
      {
        "txt": "} @Override public int getNameId() { return UNMAPPED; } } private static class UnnamedEntry extends UnmappedEntry { private final int srcFile; private final int srcLine; private final int srcColumn;"
      },
      {
        "txt": "UnnamedEntry(int column, int srcFile, int srcLine, int srcColumn) { super(column); this.srcFile = srcFile; this.srcLine = srcLine; this.srcColumn = srcColumn; } @Override public int getSourceFileId() { return srcFile; }"
      },
      {
        "txt": "@Override public int getSourceLine() { return srcLine; } @Override public int getSourceColumn() { return srcColumn; } @Override public int getNameId() {"
      },
      {
        "txt": "return UNMAPPED; } } private static class NamedEntry extends UnnamedEntry { private final int name; NamedEntry(int column, int srcFile, int srcLine, int srcColumn, int name) { super(column, srcFile, srcLine, srcColumn); this.name = name; } @Override"
      },
      {
        "txt": "public int getNameId() { return name; } } static interface EntryVisitor { void visit(String sourceName, String symbolName, FilePosition sourceStartPosition, FilePosition startPosition, FilePosition endPosition);"
      },
      {
        "txt": "} public void visitMappings(EntryVisitor visitor) { boolean pending = false; String sourceName = null; String symbolName = null; FilePosition sourceStartPosition = null; FilePosition startPosition = null; final int lineCount = lines.size(); for (int i = 0; i < lineCount; i++) { ArrayList<Entry> line = lines.get(i);"
      },
      {
        "txt": "if (line != null) { final int entryCount = line.size(); for (int j = 0; j < entryCount; j++) { Entry entry = line.get(j); if (pending) { FilePosition endPosition = new FilePosition( i, entry.getGeneratedColumn()); visitor.visit( sourceName, symbolName,"
      },
      {
        "txt": "sourceStartPosition, startPosition, endPosition); pending = false; } if (entry.getSourceFileId() != UNMAPPED) { pending = true; sourceName = sources[entry.getSourceFileId()]; symbolName = (entry.getNameId() != UNMAPPED) ? names[entry.getNameId()] : null;"
      },
      {
        "txt": "sourceStartPosition = new FilePosition( entry.getSourceLine(), entry.getSourceColumn()); startPosition = new FilePosition( i, entry.getGeneratedColumn()); } } } } }"
      }
    ]
  },
  {
    "id": 306,
    "file_path": "src/com/google/javascript/jscomp/SourceMap.java",
    "start-bug-line": 138,
    "end-bug-line": 138,
    "bug": "",
    "fix": "int lineBaseOffset = 1; if (generator instanceof SourceMapGeneratorV1 || generator instanceof SourceMapGeneratorV2) { lineBaseOffset = 0; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Predicate; import com.google.common.collect.Maps; import com.google.debugging.sourcemap.FilePosition; import com.google.debugging.sourcemap.SourceMapFormat; import com.google.debugging.sourcemap.SourceMapGenerator; import com.google.debugging.sourcemap.SourceMapGeneratorFactory; import com.google.debugging.sourcemap.SourceMapGeneratorV1;"
      },
      {
        "txt": "import com.google.debugging.sourcemap.SourceMapGeneratorV2; import com.google.javascript.rhino.Node; import java.io.IOException; import java.util.Collections; import java.util.List; import java.util.Map; public class SourceMap { public static enum Format { V1 { @Override SourceMap getInstance() {"
      },
      {
        "txt": "return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V1)); } }, DEFAULT { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.DEFAULT)); } },"
      },
      {
        "txt": "V2 { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V2)); } }, V3 { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3));"
      },
      {
        "txt": "} }; abstract SourceMap getInstance(); } public static enum DetailLevel implements Predicate<Node> { ALL { @Override public boolean apply(Node node) { return true; } },"
      },
      {
        "txt": "SYMBOLS { @Override public boolean apply(Node node) { return node.isCall() || node.isNew() || node.isFunction() || node.isName() || NodeUtil.isGet(node) || NodeUtil.isObjectLitKey(node, node.getParent()) || (node.isString() && NodeUtil.isGet(node.getParent())); }"
      },
      {
        "txt": "}; } public static class LocationMapping { final String prefix; final String replacement; public LocationMapping(String prefix, String replacement) { this.prefix = prefix; this.replacement = replacement; } }"
      },
      {
        "txt": "private final SourceMapGenerator generator; private List<LocationMapping> prefixMappings = Collections.emptyList(); private final Map<String, String> sourceLocationFixupCache = Maps.newHashMap(); private SourceMap(SourceMapGenerator generator) { this.generator = generator; } public void addMapping( Node node, FilePosition outputStartPosition,"
      },
      {
        "txt": "String sourceFile = node.getSourceFileName(); if (sourceFile == null || node.getLineno() < 0) { return; } sourceFile = fixupSourceLocation(sourceFile); String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP); <extra_id_0> generator.addMapping( sourceFile, originalName, new FilePosition(node.getLineno(), node.getCharno()), outputStartPosition, outputEndPosition); } private String fixupSourceLocation(String sourceFile) {"
      },
      {
        "txt": "} private String fixupSourceLocation(String sourceFile) { if (prefixMappings.isEmpty()) { return sourceFile; } String fixed = sourceLocationFixupCache.get(sourceFile); if (fixed != null) { return fixed; } for (LocationMapping mapping : prefixMappings) {"
      },
      {
        "txt": "if (sourceFile.startsWith(mapping.prefix)) { fixed = mapping.replacement + sourceFile.substring( mapping.prefix.length()); break; } } if (fixed == null) { fixed = sourceFile; } sourceLocationFixupCache.put(sourceFile, fixed);"
      },
      {
        "txt": "return fixed; } public void appendTo(Appendable out, String name) throws IOException { generator.appendTo(out, name); } public void reset() { generator.reset(); sourceLocationFixupCache.clear(); } public void setStartingPosition(int offsetLine, int offsetIndex) {"
      },
      {
        "txt": "generator.setStartingPosition(offsetLine, offsetIndex); } public void setWrapperPrefix(String prefix) { generator.setWrapperPrefix(prefix); } public void validate(boolean validate) { generator.validate(validate); } public void setPrefixMappings(List<LocationMapping> sourceMapLocationMappings) { this.prefixMappings = sourceMapLocationMappings;"
      }
    ]
  },
  {
    "id": 307,
    "file_path": "src/com/google/javascript/jscomp/SourceMap.java",
    "start-bug-line": 141,
    "end-bug-line": 141,
    "bug": "new FilePosition(node.getLineno(), node.getCharno()),",
    "fix": "new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Predicate; import com.google.common.collect.Maps; import com.google.debugging.sourcemap.FilePosition; import com.google.debugging.sourcemap.SourceMapFormat; import com.google.debugging.sourcemap.SourceMapGenerator; import com.google.debugging.sourcemap.SourceMapGeneratorFactory; import com.google.debugging.sourcemap.SourceMapGeneratorV1; import com.google.debugging.sourcemap.SourceMapGeneratorV2; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import java.io.IOException; import java.util.Collections; import java.util.List; import java.util.Map; public class SourceMap { public static enum Format { V1 { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V1));"
      },
      {
        "txt": "} }, DEFAULT { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.DEFAULT)); } }, V2 { @Override SourceMap getInstance() {"
      },
      {
        "txt": "return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V2)); } }, V3 { @Override SourceMap getInstance() { return new SourceMap( SourceMapGeneratorFactory.getInstance(SourceMapFormat.V3)); } };"
      },
      {
        "txt": "abstract SourceMap getInstance(); } public static enum DetailLevel implements Predicate<Node> { ALL { @Override public boolean apply(Node node) { return true; } }, SYMBOLS { @Override public boolean apply(Node node) {"
      },
      {
        "txt": "return node.isCall() || node.isNew() || node.isFunction() || node.isName() || NodeUtil.isGet(node) || NodeUtil.isObjectLitKey(node, node.getParent()) || (node.isString() && NodeUtil.isGet(node.getParent())); } }; }"
      },
      {
        "txt": "public static class LocationMapping { final String prefix; final String replacement; public LocationMapping(String prefix, String replacement) { this.prefix = prefix; this.replacement = replacement; } } private final SourceMapGenerator generator; private List<LocationMapping> prefixMappings = Collections.emptyList();"
      },
      {
        "txt": "private final Map<String, String> sourceLocationFixupCache = Maps.newHashMap(); private SourceMap(SourceMapGenerator generator) { this.generator = generator; } public void addMapping( Node node, FilePosition outputStartPosition, FilePosition outputEndPosition) { String sourceFile = node.getSourceFileName();"
      },
      {
        "txt": "return; } sourceFile = fixupSourceLocation(sourceFile); String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP); generator.addMapping( sourceFile, originalName, <extra_id_0> outputStartPosition, outputEndPosition); } private String fixupSourceLocation(String sourceFile) { if (prefixMappings.isEmpty()) { return sourceFile; }"
      },
      {
        "txt": "return sourceFile; } String fixed = sourceLocationFixupCache.get(sourceFile); if (fixed != null) { return fixed; } for (LocationMapping mapping : prefixMappings) { if (sourceFile.startsWith(mapping.prefix)) { fixed = mapping.replacement + sourceFile.substring( mapping.prefix.length());"
      },
      {
        "txt": "break; } } if (fixed == null) { fixed = sourceFile; } sourceLocationFixupCache.put(sourceFile, fixed); return fixed; } public void appendTo(Appendable out, String name) throws IOException {"
      },
      {
        "txt": "generator.appendTo(out, name); } public void reset() { generator.reset(); sourceLocationFixupCache.clear(); } public void setStartingPosition(int offsetLine, int offsetIndex) { generator.setStartingPosition(offsetLine, offsetIndex); } public void setWrapperPrefix(String prefix) {"
      },
      {
        "txt": "generator.setWrapperPrefix(prefix); } public void validate(boolean validate) { generator.validate(validate); } public void setPrefixMappings(List<LocationMapping> sourceMapLocationMappings) { this.prefixMappings = sourceMapLocationMappings; }"
      }
    ]
  }
]
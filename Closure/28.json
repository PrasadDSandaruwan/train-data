[
  {
    "id": 258,
    "file_path": "src/com/google/javascript/jscomp/InlineCostEstimator.java",
    "start-bug-line": 102,
    "end-bug-line": 102,
    "bug": "",
    "fix": "@Override void addConstant(String newcode) { add(\"0\"); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.javascript.rhino.Node; class InlineCostEstimator {"
      },
      {
        "txt": "private static final String ESTIMATED_IDENTIFIER = \"ab\"; static final int ESTIMATED_IDENTIFIER_COST = ESTIMATED_IDENTIFIER.length(); private InlineCostEstimator() { } static int getCost(Node root) { return getCost(root, Integer.MAX_VALUE); } static int getCost(Node root, int costThreshhold) { CompiledSizeEstimator estimator = new CompiledSizeEstimator(costThreshhold); estimator.add(root);"
      },
      {
        "txt": "return estimator.getCost(); } private static class CompiledSizeEstimator extends CodeConsumer { private int maxCost; private int cost = 0; private char last = '\\0'; private boolean continueProcessing = true; CompiledSizeEstimator(int costThreshhold) { this.maxCost = costThreshhold; }"
      },
      {
        "txt": "void add(Node root) { CodeGenerator cg = new CodeGenerator(this); cg.add(root); } int getCost() { return cost; } @Override boolean continueProcessing() { return continueProcessing;"
      },
      {
        "txt": "} @Override char getLastChar() { return last; } @Override void append(String str){ last = str.charAt(str.length() - 1); cost += str.length(); if (maxCost <= cost) {"
      },
      {
        "txt": "} } @Override void addIdentifier(String identifier) { add(ESTIMATED_IDENTIFIER); } <extra_id_0> }"
      }
    ]
  }
]
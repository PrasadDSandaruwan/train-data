[
  {
    "id": 213,
    "file_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
    "start-bug-line": 204,
    "end-bug-line": 204,
    "bug": "",
    "fix": "&& !isNamedParameter(var)",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; import java.util.Set;"
      },
      {
        "txt": "class CollapseVariableDeclarations implements CompilerPass { private final AbstractCompiler compiler; private static class Collapse { final Node startNode; final Node endNode; final Node parent; Collapse(Node startNode, Node endNode, Node parent) { this.startNode = startNode; this.endNode = endNode; this.parent = parent;"
      },
      {
        "txt": "} } private final List<Collapse> collapses = Lists.newArrayList(); private final Set<Node> nodesToCollapse = Sets.newHashSet(); CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); this.compiler = compiler; } @Override public void process(Node externs, Node root) {"
      },
      {
        "txt": "collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses()); if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } private class GatherCollapses extends AbstractPostOrderCallback { private final Set<Var> blacklistedVars = Sets.newHashSet();"
      },
      {
        "txt": "@Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isVar()) { blacklistStubVars(t, n); } if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return; if (nodesToCollapse.contains(n)) return; if (parent.isIf()) return; Node varNode = n; boolean hasVar = n.isVar();"
      },
      {
        "txt": "n = n.getNext(); boolean hasNodesToCollapse = false; while (n != null && (n.isVar() || canBeRedeclared(n, t.getScope()))) { if (n.isVar()) { blacklistStubVars(t, n); hasVar = true; } nodesToCollapse.add(n); hasNodesToCollapse = true;"
      },
      {
        "txt": "n = n.getNext(); } if (hasNodesToCollapse && hasVar) { nodesToCollapse.add(varNode); collapses.add(new Collapse(varNode, n, parent)); } } private void blacklistStubVars(NodeTraversal t, Node varNode) { for (Node child = varNode.getFirstChild(); child != null; child = child.getNext()) {"
      },
      {
        "txt": "if (child.getFirstChild() == null) { blacklistedVars.add(t.getScope().getVar(child.getString())); } } } private boolean canBeRedeclared(Node n, Scope s) { if (!NodeUtil.isExprAssign(n)) { return false; } Node assign = n.getFirstChild();"
      },
      {
        "txt": "if (!lhs.isName()) { return false; } Var var = s.getVar(lhs.getString()); return var != null && var.getScope() == s <extra_id_0> } } private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode);"
      },
      {
        "txt": "Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) {"
      },
      {
        "txt": "var.addChildToBack(n.removeFirstChild()); } } else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true;"
      },
      {
        "txt": "} n = next; } if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression(\"duplicate\"); var.setJSDocInfo(info); } } }"
      }
    ]
  },
  {
    "id": 214,
    "file_path": "src/com/google/javascript/jscomp/CollapseVariableDeclarations.java",
    "start-bug-line": 208,
    "end-bug-line": 208,
    "bug": "",
    "fix": "private boolean isNamedParameter(Var v) { return v.getParentNode().isParamList(); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.common.collect.Sets;"
      },
      {
        "txt": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; import java.util.Set; class CollapseVariableDeclarations implements CompilerPass { private final AbstractCompiler compiler; private static class Collapse {"
      },
      {
        "txt": "final Node startNode; final Node endNode; final Node parent; Collapse(Node startNode, Node endNode, Node parent) { this.startNode = startNode; this.endNode = endNode; this.parent = parent; } } private final List<Collapse> collapses = Lists.newArrayList();"
      },
      {
        "txt": "private final Set<Node> nodesToCollapse = Sets.newHashSet(); CollapseVariableDeclarations(AbstractCompiler compiler) { Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized()); this.compiler = compiler; } @Override public void process(Node externs, Node root) { collapses.clear(); nodesToCollapse.clear(); NodeTraversal.traverse(compiler, root, new GatherCollapses());"
      },
      {
        "txt": "if (!collapses.isEmpty()) { applyCollapses(); compiler.reportCodeChange(); } } private class GatherCollapses extends AbstractPostOrderCallback { private final Set<Var> blacklistedVars = Sets.newHashSet(); @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isVar()) {"
      },
      {
        "txt": "blacklistStubVars(t, n); } if (!n.isVar() && !canBeRedeclared(n, t.getScope())) return; if (nodesToCollapse.contains(n)) return; if (parent.isIf()) return; Node varNode = n; boolean hasVar = n.isVar(); n = n.getNext(); boolean hasNodesToCollapse = false; while (n != null &&"
      },
      {
        "txt": "(n.isVar() || canBeRedeclared(n, t.getScope()))) { if (n.isVar()) { blacklistStubVars(t, n); hasVar = true; } nodesToCollapse.add(n); hasNodesToCollapse = true; n = n.getNext(); } if (hasNodesToCollapse && hasVar) {"
      },
      {
        "txt": "nodesToCollapse.add(varNode); collapses.add(new Collapse(varNode, n, parent)); } } private void blacklistStubVars(NodeTraversal t, Node varNode) { for (Node child = varNode.getFirstChild(); child != null; child = child.getNext()) { if (child.getFirstChild() == null) { blacklistedVars.add(t.getScope().getVar(child.getString())); }"
      },
      {
        "txt": "} } private boolean canBeRedeclared(Node n, Scope s) { if (!NodeUtil.isExprAssign(n)) { return false; } Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); if (!lhs.isName()) { return false;"
      },
      {
        "txt": "Var var = s.getVar(lhs.getString()); return var != null && var.getScope() == s && !blacklistedVars.contains(var); } } <extra_id_0> private void applyCollapses() { for (Collapse collapse : collapses) { Node var = new Node(Token.VAR); var.copyInformationFrom(collapse.startNode); collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false;"
      },
      {
        "txt": "collapse.parent.addChildBefore(var, collapse.startNode); boolean redeclaration = false; for (Node n = collapse.startNode; n != collapse.endNode;) { Node next = n.getNext(); Preconditions.checkState(var.getNext() == n); collapse.parent.removeChildAfter(var); if (n.isVar()) { while(n.hasChildren()) { var.addChildToBack(n.removeFirstChild()); }"
      },
      {
        "txt": "} else { Node assign = n.getFirstChild(); Node lhs = assign.getFirstChild(); Preconditions.checkState(lhs.isName()); Node rhs = assign.getLastChild(); lhs.addChildToBack(rhs.detachFromParent()); var.addChildToBack(lhs.detachFromParent()); redeclaration = true; } n = next;"
      },
      {
        "txt": "} if (redeclaration) { JSDocInfo info = new JSDocInfo(); info.addSuppression(\"duplicate\"); var.setJSDocInfo(info); } } }"
      }
    ]
  }
]
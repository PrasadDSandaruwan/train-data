[
  {
    "id": 381,
    "file_path": "src/com/google/javascript/jscomp/Normalize.java",
    "start-bug-line": 122,
    "end-bug-line": 122,
    "bug": ".traverse(root);",
    "fix": ".traverseRoots(externs, root);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.AbstractCompiler.LifeCycleStage;"
      },
      {
        "txt": "import com.google.javascript.jscomp.MakeDeclaredNamesUnique.BoilerplateRenamer; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Map; import java.util.Set; class Normalize implements CompilerPass {"
      },
      {
        "txt": "private final AbstractCompiler compiler; private final boolean assertOnChange; private static final boolean CONVERT_WHILE_TO_FOR = true; static final boolean MAKE_LOCAL_NAMES_UNIQUE = true; public static final DiagnosticType CATCH_BLOCK_VAR_ERROR = DiagnosticType.error( \"JSC_CATCH_BLOCK_VAR_ERROR\", \"The use of scope variable {0} is not allowed within a catch block \" + \"with a catch exception of the same name.\"); Normalize(AbstractCompiler compiler, boolean assertOnChange) {"
      },
      {
        "txt": "this.compiler = compiler; this.assertOnChange = assertOnChange; } static Node parseAndNormalizeSyntheticCode( AbstractCompiler compiler, String code, String prefix) { Node js = compiler.parseSyntheticCode(code); NodeTraversal.traverse(compiler, js, new Normalize.NormalizeStatements(compiler, false)); NodeTraversal.traverse( compiler, js,"
      },
      {
        "txt": "new MakeDeclaredNamesUnique( new BoilerplateRenamer( compiler.getUniqueNameIdSupplier(), prefix))); return js; } static Node parseAndNormalizeTestCode( AbstractCompiler compiler, String code, String prefix) { Node js = compiler.parseTestCode(code); NodeTraversal.traverse(compiler, js,"
      },
      {
        "txt": "new Normalize.NormalizeStatements(compiler, false)); NodeTraversal.traverse( compiler, js, new MakeDeclaredNamesUnique()); return js; } private void reportCodeChange(String changeDescription) { if (assertOnChange) { throw new IllegalStateException( \"Normalize constraints violated:\\n\" + changeDescription);"
      },
      {
        "txt": "compiler.reportCodeChange(); } @Override public void process(Node externs, Node root) { new NodeTraversal( compiler, new NormalizeStatements(compiler, assertOnChange)) <extra_id_0> if (MAKE_LOCAL_NAMES_UNIQUE) { MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique(); NodeTraversal t = new NodeTraversal(compiler, renamer); t.traverseRoots(externs, root); } removeDuplicateDeclarations(externs, root);"
      },
      {
        "txt": "} removeDuplicateDeclarations(externs, root); new PropagateConstantAnnotationsOverVars(compiler, assertOnChange) .process(externs, root); if (!compiler.getLifeCycleStage().isNormalized()) { compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED); } } static class PropagateConstantAnnotationsOverVars extends AbstractPostOrderCallback"
      },
      {
        "txt": "implements CompilerPass { private final AbstractCompiler compiler; private final boolean assertOnChange; PropagateConstantAnnotationsOverVars( AbstractCompiler compiler, boolean forbidChanges) { this.compiler = compiler; this.assertOnChange = forbidChanges; } @Override public void process(Node externs, Node root) {"
      },
      {
        "txt": "new NodeTraversal(compiler, this).traverseRoots(externs, root); } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.NAME) { if (n.getString().isEmpty()) { return; } JSDocInfo info = null; Var var = t.getScope().getVar(n.getString());"
      },
      {
        "txt": "if (var != null) { info = var.getJSDocInfo(); } boolean shouldBeConstant = (info != null && info.isConstant()) || NodeUtil.isConstantByConvention( compiler.getCodingConvention(), n, parent); boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME); if (shouldBeConstant && !isMarkedConstant) { if (assertOnChange) {"
      },
      {
        "txt": "String name = n.getString(); throw new IllegalStateException( \"Unexpected const change.\\n\" + \" name: \"+ name + \"\\n\" + \" parent:\" + n.getParent().toStringTree()); } n.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } }"
      },
      {
        "txt": "} static class VerifyConstants extends AbstractPostOrderCallback implements CompilerPass { final private AbstractCompiler compiler; final private boolean checkUserDeclarations; VerifyConstants(AbstractCompiler compiler, boolean checkUserDeclarations) { this.compiler = compiler; this.checkUserDeclarations = checkUserDeclarations; } @Override"
      },
      {
        "txt": "public void process(Node externs, Node root) { Node externsAndJs = root.getParent(); Preconditions.checkState(externsAndJs != null); Preconditions.checkState(externsAndJs.hasChild(externs)); NodeTraversal.traverseRoots( compiler, Lists.newArrayList(externs, root), this); } private Map<String, Boolean> constantMap = Maps.newHashMap(); @Override public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "if (n.getType() == Token.NAME) { String name = n.getString(); if (n.getString().isEmpty()) { return; } boolean isConst = n.getBooleanProp(Node.IS_CONSTANT_NAME); if (checkUserDeclarations) { boolean expectedConst = false; CodingConvention convention = compiler.getCodingConvention(); if (NodeUtil.isConstantName(n)"
      },
      {
        "txt": "|| NodeUtil.isConstantByConvention(convention, n, parent)) { expectedConst = true; } else { expectedConst = false; JSDocInfo info = null; Var var = t.getScope().getVar(n.getString()); if (var != null) { info = var.getJSDocInfo(); } if (info != null && info.isConstant()) {"
      },
      {
        "txt": "expectedConst = true; } else { expectedConst = false; } } if (expectedConst) { Preconditions.checkState(expectedConst == isConst, \"The name \" + name + \" is not annotated as constant.\"); } else { Preconditions.checkState(expectedConst == isConst,"
      },
      {
        "txt": "\"The name \" + name + \" should not be annotated as constant.\"); } } Boolean value = constantMap.get(name); if (value == null) { constantMap.put(name, isConst); } else { Preconditions.checkState(value.booleanValue() == isConst, \"The name \" + name + \" is not consistently annotated as \" + \"constant.\");"
      },
      {
        "txt": "} } } } static class NormalizeStatements implements Callback { private final AbstractCompiler compiler; private final boolean assertOnChange; NormalizeStatements(AbstractCompiler compiler, boolean assertOnChange) { this.compiler = compiler; this.assertOnChange = assertOnChange;"
      },
      {
        "txt": "} private void reportCodeChange(String changeDescription) { if (assertOnChange) { throw new IllegalStateException( \"Normalize constraints violated:\\n\" + changeDescription); } compiler.reportCodeChange(); } @Override public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "doStatementNormalizations(t, n, parent); return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.WHILE: if (CONVERT_WHILE_TO_FOR) { Node expr = n.getFirstChild(); n.setType(Token.FOR);"
      },
      {
        "txt": "Node empty = new Node(Token.EMPTY); empty.copyInformationFrom(n); n.addChildBefore(empty, expr); n.addChildAfter(empty.cloneNode(), expr); reportCodeChange(\"WHILE node\"); } break; case Token.FUNCTION: normalizeFunctionDeclaration(n); break;"
      },
      {
        "txt": "case Token.NAME: case Token.STRING: case Token.GET: case Token.SET: if (!compiler.getLifeCycleStage().isNormalizedObfuscated()) { annotateConstantsByConvention(n, parent); } break; } }"
      },
      {
        "txt": "private void annotateConstantsByConvention(Node n, Node parent) { Preconditions.checkState( n.getType() == Token.NAME || n.getType() == Token.STRING || n.getType() == Token.GET || n.getType() == Token.SET); boolean isObjLitKey = NodeUtil.isObjectLitKey(n, parent); boolean isProperty = isObjLitKey || (parent.getType() == Token.GETPROP && parent.getLastChild() == n);"
      },
      {
        "txt": "if (n.getType() == Token.NAME || isProperty) { boolean isMarkedConstant = n.getBooleanProp(Node.IS_CONSTANT_NAME); if (!isMarkedConstant && NodeUtil.isConstantByConvention( compiler.getCodingConvention(), n, parent)) { if (assertOnChange) { String name = n.getString(); throw new IllegalStateException( \"Unexpected const change.\\n\" + \" name: \"+ name + \"\\n\" +"
      },
      {
        "txt": "\" parent:\" + n.getParent().toStringTree()); } n.putBooleanProp(Node.IS_CONSTANT_NAME, true); } } } private void normalizeFunctionDeclaration(Node n) { Preconditions.checkState(n.getType() == Token.FUNCTION); if (!NodeUtil.isFunctionExpression(n) && !NodeUtil.isHoistedFunctionDeclaration(n)) {"
      },
      {
        "txt": "rewriteFunctionDeclaration(n); } } private void rewriteFunctionDeclaration(Node n) { Node oldNameNode = n.getFirstChild(); Node fnNameNode = oldNameNode.cloneNode(); Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno()); var.copyInformationFrom(n); oldNameNode.setString(\"\"); Node parent = n.getParent();"
      },
      {
        "txt": "parent.replaceChild(n, var); fnNameNode.addChildToFront(n); reportCodeChange(\"Function declaration\"); } private void doStatementNormalizations( NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.LABEL) { normalizeLabels(n); } if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {"
      },
      {
        "txt": "extractForInitializer(n, null, null); } if (NodeUtil.isStatementBlock(n)) { splitVarDeclarations(n); } if (n.getType() == Token.FUNCTION) { moveNamedFunctions(n.getLastChild()); } } private void normalizeLabels(Node n) {"
      },
      {
        "txt": "Preconditions.checkArgument(n.getType() == Token.LABEL); Node last = n.getLastChild(); switch (last.getType()) { case Token.LABEL: case Token.BLOCK: case Token.FOR: case Token.WHILE: case Token.DO: return; default:"
      },
      {
        "txt": "Node block = new Node(Token.BLOCK); block.copyInformationFrom(last); n.replaceChild(last, block); block.addChildToFront(last); reportCodeChange(\"LABEL normalization\"); return; } } private void extractForInitializer( Node n, Node before, Node beforeParent) {"
      },
      {
        "txt": "for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); Node insertBefore = (before == null) ? c : before; Node insertBeforeParent = (before == null) ? n : beforeParent; switch (c.getType()) { case Token.LABEL: extractForInitializer(c, insertBefore, insertBeforeParent); break; case Token.FOR: if (NodeUtil.isForIn(c)) {"
      },
      {
        "txt": "Node first = c.getFirstChild(); if (first.getType() == Token.VAR) { Node newStatement = first.cloneTree(); Node name = first.removeFirstChild(); first.getParent().replaceChild(first, name); insertBeforeParent.addChildBefore(newStatement, insertBefore); reportCodeChange(\"FOR-IN var declaration\"); } } else if (c.getFirstChild().getType() != Token.EMPTY) { Node init = c.getFirstChild();"
      },
      {
        "txt": "Node empty = new Node(Token.EMPTY); empty.copyInformationFrom(c); c.replaceChild(init, empty); Node newStatement; if (init.getType() == Token.VAR) { newStatement = init; } else { newStatement = NodeUtil.newExpr(init); } insertBeforeParent.addChildBefore(newStatement, insertBefore);"
      },
      {
        "txt": "reportCodeChange(\"FOR initializer\"); } break; } } } private void splitVarDeclarations(Node n) { for (Node next, c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); if (c.getType() == Token.VAR) {"
      },
      {
        "txt": "if (assertOnChange && !c.hasChildren()) { throw new IllegalStateException(\"Empty VAR node.\"); } while (c.getFirstChild() != c.getLastChild()) { Node name = c.getFirstChild(); c.removeChild(name); Node newVar = new Node( Token.VAR, name, n.getLineno(), n.getCharno()); n.addChildBefore(newVar, c); reportCodeChange(\"VAR with multiple children\");"
      },
      {
        "txt": "} } } } private void moveNamedFunctions(Node functionBody) { Preconditions.checkState( functionBody.getParent().getType() == Token.FUNCTION); Node previous = null; Node current = functionBody.getFirstChild(); while (current != null && NodeUtil.isFunctionDeclaration(current)) {"
      },
      {
        "txt": "previous = current; current = current.getNext(); } Node insertAfter = previous; while (current != null) { Node next = current.getNext(); if (NodeUtil.isFunctionDeclaration(current)) { Preconditions.checkNotNull(previous); functionBody.removeChildAfter(previous); insertAfter = addToFront(functionBody, current, insertAfter);"
      },
      {
        "txt": "reportCodeChange(\"Move function declaration not at top of function\"); } else { previous = current; } current = next; } } private Node addToFront(Node parent, Node newChild, Node after) { if (after == null) { parent.addChildToFront(newChild);"
      },
      {
        "txt": "} else { parent.addChildAfter(newChild, after); } return newChild; } } private void removeDuplicateDeclarations(Node externs, Node root) { Callback tickler = new ScopeTicklingCallback(); ScopeCreator scopeCreator = new SyntacticScopeCreator( compiler, new DuplicateDeclarationHandler());"
      },
      {
        "txt": "NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator); t.traverseRoots(externs, root); } private final class DuplicateDeclarationHandler implements SyntacticScopeCreator.RedeclarationHandler { private Set<Var> hasOkDuplicateDeclaration = Sets.newHashSet(); @Override public void onRedeclaration( Scope s, String name, Node n, CompilerInput input) { Preconditions.checkState(n.getType() == Token.NAME);"
      },
      {
        "txt": "Node parent = n.getParent(); Var v = s.getVar(name); if (v != null && s.isGlobal()) { if (v.isExtern() && !input.isExtern()) { if (hasOkDuplicateDeclaration.add(v)) { return; } } } if (v != null && v.getParentNode().getType() == Token.CATCH) {"
      },
      {
        "txt": "name = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName( name); compiler.report( JSError.make( input.getName(), n, CATCH_BLOCK_VAR_ERROR, name)); } else if (v != null && parent.getType() == Token.FUNCTION) { if (v.getParentNode().getType() == Token.VAR) { s.undeclare(v); s.declare(name, n, n.getJSType(), v.input);"
      },
      {
        "txt": "replaceVarWithAssignment(v.getNameNode(), v.getParentNode(), v.getParentNode().getParent()); } } else if (parent.getType() == Token.VAR) { Preconditions.checkState(parent.hasOneChild()); replaceVarWithAssignment(n, parent, parent.getParent()); } } private void replaceVarWithAssignment(Node n, Node parent, Node gramps) { if (n.hasChildren()) {"
      },
      {
        "txt": "parent.removeChild(n); Node value = n.getFirstChild(); n.removeChild(value); Node replacement = new Node(Token.ASSIGN, n, value); replacement.copyInformationFrom(parent); gramps.replaceChild(parent, NodeUtil.newExpr(replacement)); } else { if (NodeUtil.isStatementBlock(gramps)) { gramps.removeChild(parent); } else if (gramps.getType() == Token.FOR) {"
      },
      {
        "txt": "parent.removeChild(n); gramps.replaceChild(parent, n); } else { Preconditions.checkState(gramps.getType() == Token.LABEL); throw new IllegalStateException(\"Unexpected LABEL\"); } } reportCodeChange(\"Duplicate VAR declaration\"); } }"
      },
      {
        "txt": "private final class ScopeTicklingCallback implements NodeTraversal.ScopedCallback { @Override public void enterScope(NodeTraversal t) { t.getScope(); } @Override public void exitScope(NodeTraversal t) { } @Override"
      },
      {
        "txt": "public boolean shouldTraverse( NodeTraversal nodeTraversal, Node n, Node parent) { return true; } @Override public void visit(NodeTraversal t, Node n, Node parent) { } }"
      }
    ]
  },
  {
    "id": 382,
    "file_path": "src/com/google/javascript/jscomp/VarCheck.java",
    "start-bug-line": 221,
    "end-bug-line": 221,
    "bug": "",
    "fix": "compiler.reportCodeChange();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.collect.Lists; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Set; class VarCheck extends AbstractPostOrderCallback implements CompilerPass { static final DiagnosticType UNDEFINED_VAR_ERROR = DiagnosticType.error( \"JSC_UNDEFINED_VARIABLE\", \"variable {0} is undefined\"); static final DiagnosticType VIOLATED_MODULE_DEP_ERROR = DiagnosticType.error( \"JSC_VIOLATED_MODULE_DEPENDENCY\", \"module {0} cannot reference {2}, defined in \" +"
      },
      {
        "txt": "\"module {1}, since {1} loads after {0}\"); static final DiagnosticType MISSING_MODULE_DEP_ERROR = DiagnosticType.warning( \"JSC_MISSING_MODULE_DEPENDENCY\", \"missing module dependency; module {0} should depend \" + \"on module {1} because it references {2}\"); static final DiagnosticType STRICT_MODULE_DEP_ERROR = DiagnosticType.disabled( \"JSC_STRICT_MODULE_DEPENDENCY\", \"module {0} cannot reference {2}, defined in \" + \"module {1}\"); static final DiagnosticType NAME_REFERENCE_IN_EXTERNS_ERROR ="
      },
      {
        "txt": "DiagnosticType.warning( \"JSC_NAME_REFERENCE_IN_EXTERNS\", \"accessing name {0} in externs has no effect\"); static final DiagnosticType UNDEFINED_EXTERN_VAR_ERROR = DiagnosticType.warning( \"JSC_UNDEFINED_EXTERN_VAR_ERROR\", \"name {0} is not undefined in the externs.\"); static final DiagnosticType INVALID_FUNCTION_DECL = DiagnosticType.error(\"JSC_INVALID_FUNCTION_DECL\", \"Syntax error: function declaration must have a name\");"
      },
      {
        "txt": "private CompilerInput synthesizedExternsInput = null; private Node synthesizedExternsRoot = null; private Set<String> varsToDeclareInExterns = Sets.newHashSet(); private final AbstractCompiler compiler; private final boolean sanityCheck; private boolean strictExternCheck; VarCheck(AbstractCompiler compiler) { this(compiler, false); } VarCheck(AbstractCompiler compiler, boolean sanityCheck) {"
      },
      {
        "txt": "this.compiler = compiler; this.strictExternCheck = compiler.getErrorLevel( JSError.make(\"\", 0, 0, UNDEFINED_EXTERN_VAR_ERROR)) == CheckLevel.ERROR; this.sanityCheck = sanityCheck; } @Override public void process(Node externs, Node root) { if (!sanityCheck) { NodeTraversal.traverse(compiler, externs, new NameRefInExternsCheck()); }"
      },
      {
        "txt": "NodeTraversal.traverseRoots( compiler, Lists.newArrayList(externs, root), this); for (String varName : varsToDeclareInExterns) { createSynthesizedExternVar(varName); } } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() != Token.NAME) { return;"
      },
      {
        "txt": "} String varName = n.getString(); if (varName.isEmpty()) { Preconditions.checkState(NodeUtil.isFunction(parent)); if (!NodeUtil.isFunctionExpression(parent)) { t.report(n, INVALID_FUNCTION_DECL); } return; } if ((parent.getType() == Token.VAR ||"
      },
      {
        "txt": "NodeUtil.isFunctionDeclaration(parent)) && varsToDeclareInExterns.contains(varName)) { createSynthesizedExternVar(varName); n.addSuppression(\"duplicate\"); } Scope scope = t.getScope(); Scope.Var var = scope.getVar(varName); if (var == null) { if (NodeUtil.isFunctionExpression(parent)) { } else {"
      },
      {
        "txt": "if (!strictExternCheck || !t.getInput().isExtern()) { t.report(n, UNDEFINED_VAR_ERROR, varName); } if (sanityCheck) { throw new IllegalStateException(\"Unexpected variable \" + varName); } else { createSynthesizedExternVar(varName); scope.getGlobalScope().declare(varName, n, null, getSynthesizedExternsInput()); }"
      },
      {
        "txt": "} return; } CompilerInput currInput = t.getInput(); CompilerInput varInput = var.input; if (currInput == varInput || currInput == null || varInput == null) { return; } JSModule currModule = currInput.getModule(); JSModule varModule = varInput.getModule();"
      },
      {
        "txt": "JSModuleGraph moduleGraph = compiler.getModuleGraph(); if (varModule != currModule && varModule != null && currModule != null) { if (moduleGraph.dependsOn(currModule, varModule)) { } else { if (!sanityCheck && scope.isGlobal()) { if (moduleGraph.dependsOn(varModule, currModule)) { t.report(n, VIOLATED_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName); } else { t.report(n, MISSING_MODULE_DEP_ERROR,"
      },
      {
        "txt": "currModule.getName(), varModule.getName(), varName); } } else { t.report(n, STRICT_MODULE_DEP_ERROR, currModule.getName(), varModule.getName(), varName); } } } } private void createSynthesizedExternVar(String varName) {"
      },
      {
        "txt": "if (compiler.getCodingConvention().isConstant(varName)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } getSynthesizedExternsRoot().addChildToBack( new Node(Token.VAR, nameNode)); varsToDeclareInExterns.remove(varName); <extra_id_0> private class NameRefInExternsCheck extends AbstractPostOrderCallback { public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.NAME) { switch (parent.getType()) { case Token.VAR: case Token.FUNCTION:"
      },
      {
        "txt": "case Token.VAR: case Token.FUNCTION: case Token.LP: break; case Token.GETPROP: if (n == parent.getFirstChild()) { Scope scope = t.getScope(); Scope.Var var = scope.getVar(n.getString()); if (var == null) { t.report(n, UNDEFINED_EXTERN_VAR_ERROR, n.getString());"
      },
      {
        "txt": "varsToDeclareInExterns.add(n.getString()); } } break; default: t.report(n, NAME_REFERENCE_IN_EXTERNS_ERROR, n.getString()); Scope scope = t.getScope(); Scope.Var var = scope.getVar(n.getString()); if (var == null) { varsToDeclareInExterns.add(n.getString());"
      },
      {
        "txt": "} break; } } } } private CompilerInput getSynthesizedExternsInput() { if (synthesizedExternsInput == null) { synthesizedExternsInput = compiler.newExternInput(\"{SyntheticVarsDeclar}\");"
      },
      {
        "txt": "} return synthesizedExternsInput; } private Node getSynthesizedExternsRoot() { if (synthesizedExternsRoot == null) { CompilerInput synthesizedExterns = getSynthesizedExternsInput(); synthesizedExternsRoot = synthesizedExterns.getAstRoot(compiler); } return synthesizedExternsRoot; }"
      }
    ]
  }
]
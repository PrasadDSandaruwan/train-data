[
  {
    "id": 506,
    "file_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
    "start-bug-line": 102,
    "end-bug-line": 102,
    "bug": "boolean signatureAdded = false;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.HashMultimap; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.NodeTraversal.Callback;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; import java.util.Set; abstract class MethodCompilerPass implements CompilerPass { final Set<String> externMethods = Sets.newHashSet(); final Set<String> externMethodsWithoutSignatures = Sets.newHashSet(); final Set<String> nonMethodProperties = Sets.newHashSet(); final Multimap<String, Node> methodDefinitions = HashMultimap.create();"
      },
      {
        "txt": "final AbstractCompiler compiler; interface SignatureStore { public void reset(); public void addSignature( String functionName, Node functionNode, String sourceFile); public void removeSignature(String functionName); } MethodCompilerPass(AbstractCompiler compiler) { this.compiler = compiler; }"
      },
      {
        "txt": "public void process(Node externs, Node root) { externMethods.clear(); externMethodsWithoutSignatures.clear(); getSignatureStore().reset(); methodDefinitions.clear(); if (externs != null) { NodeTraversal.traverse(compiler, externs, new GetExternMethods()); } List<Node> externsAndJs = Lists.newArrayList(externs, root); NodeTraversal.traverseRoots("
      },
      {
        "txt": "NodeTraversal.traverseRoots( compiler, externsAndJs, getActingCallback()); } abstract Callback getActingCallback(); abstract SignatureStore getSignatureStore(); private void addPossibleSignature(String name, Node node, NodeTraversal t) { <extra_id_0> if (node.getType() == Token.FUNCTION) { addSignature(name, node, t.getSourceName()); signatureAdded = true; } else if (node.getType() == Token.NAME) { String functionName = node.getString(); Scope.Var v = t.getScope().getVar(functionName);"
      },
      {
        "txt": "String functionName = node.getString(); Scope.Var v = t.getScope().getVar(functionName); if (v == null) { if (compiler.isIdeMode()) { return; } else { throw new IllegalStateException( \"VarCheck should have caught this undefined function\"); } }"
      },
      {
        "txt": "Node function = v.getInitialValue(); if (function != null && function.getType() == Token.FUNCTION) { addSignature(name, function, v.getInputName()); signatureAdded = true; } } if (!signatureAdded) { nonMethodProperties.add(name); }"
      },
      {
        "txt": "} private void addSignature(String name, Node function, String fnSourceName) { if (externMethodsWithoutSignatures.contains(name)) { return; } getSignatureStore().addSignature(name, function, fnSourceName); methodDefinitions.put(name, function); } private class GetExternMethods extends AbstractPostOrderCallback { public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "switch (n.getType()) { case Token.GETPROP: case Token.GETELEM: { Node dest = n.getFirstChild().getNext(); if (dest.getType() != Token.STRING) { return; } String name = dest.getString(); if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n &&"
      },
      {
        "txt": "n.getNext().getType() == Token.FUNCTION) { addSignature(name, n.getNext(), t.getSourceName()); } else { getSignatureStore().removeSignature(name); externMethodsWithoutSignatures.add(name); } externMethods.add(name); } break; case Token.OBJECTLIT: { for (Node key = n.getFirstChild();"
      },
      {
        "txt": "key != null; key = key.getNext().getNext()) { if (key.getType() == Token.STRING) { Node value = key.getNext(); String name = key.getString(); if (value.getType() == Token.FUNCTION) { addSignature(name, value, t.getSourceName()); } else { getSignatureStore().removeSignature(name); externMethodsWithoutSignatures.add(name); }"
      },
      {
        "txt": "externMethods.add(name); } } } break; } } } private class GatherSignatures extends AbstractPostOrderCallback { public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) {"
      },
      {
        "txt": "case Token.GETPROP: case Token.GETELEM: Node dest = n.getFirstChild().getNext(); if (dest.getType() == Token.STRING) { if (dest.getString().equals(\"prototype\")) { processPrototypeParent(t, parent); } else { if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) { addPossibleSignature(dest.getString(), n.getNext(), t);"
      },
      {
        "txt": "} } } break; case Token.OBJECTLIT: for (Node key = n.getFirstChild(); key != null; key = key.getNext().getNext()) { if (key.getType() == Token.STRING) { Node value = key.getNext(); addPossibleSignature(key.getString(), value, t);"
      },
      {
        "txt": "} } break; } } private void processPrototypeParent(NodeTraversal t, Node n) { switch (n.getType()) { case Token.GETPROP: case Token.GETELEM: Node dest = n.getFirstChild().getNext();"
      },
      {
        "txt": "Node parent = n.getParent().getParent(); if (dest.getType() == Token.STRING && parent.getType() == Token.ASSIGN) { Node assignee = parent.getFirstChild().getNext(); addPossibleSignature(dest.getString(), assignee, t); } break; } } }"
      }
    ]
  },
  {
    "id": 507,
    "file_path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
    "start-bug-line": 106,
    "end-bug-line": 125,
    "bug": "signatureAdded = true; } else if (node.getType() == Token.NAME) { String functionName = node.getString(); Scope.Var v = t.getScope().getVar(functionName); if (v == null) { if (compiler.isIdeMode()) { return; } else { throw new IllegalStateException( \"VarCheck should have caught this undefined function\"); } } Node function = v.getInitialValue(); if (function != null && function.getType() == Token.FUNCTION) { addSignature(name, function, v.getInputName()); signatureAdded = true; } } if (!signatureAdded) {",
    "fix": "} else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.HashMultimap; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List;"
      },
      {
        "txt": "import java.util.Set; abstract class MethodCompilerPass implements CompilerPass { final Set<String> externMethods = Sets.newHashSet(); final Set<String> externMethodsWithoutSignatures = Sets.newHashSet(); final Set<String> nonMethodProperties = Sets.newHashSet(); final Multimap<String, Node> methodDefinitions = HashMultimap.create(); final AbstractCompiler compiler; interface SignatureStore { public void reset();"
      },
      {
        "txt": "public void addSignature( String functionName, Node functionNode, String sourceFile); public void removeSignature(String functionName); } MethodCompilerPass(AbstractCompiler compiler) { this.compiler = compiler; } public void process(Node externs, Node root) { externMethods.clear(); externMethodsWithoutSignatures.clear();"
      },
      {
        "txt": "getSignatureStore().reset(); methodDefinitions.clear(); if (externs != null) { NodeTraversal.traverse(compiler, externs, new GetExternMethods()); } List<Node> externsAndJs = Lists.newArrayList(externs, root); NodeTraversal.traverseRoots( compiler, Lists.newArrayList(externs, root), new GatherSignatures()); NodeTraversal.traverseRoots( compiler, externsAndJs, getActingCallback());"
      },
      {
        "txt": "abstract Callback getActingCallback(); abstract SignatureStore getSignatureStore(); private void addPossibleSignature(String name, Node node, NodeTraversal t) { boolean signatureAdded = false; if (node.getType() == Token.FUNCTION) { addSignature(name, node, t.getSourceName()); <extra_id_0> nonMethodProperties.add(name); } } private void addSignature(String name, Node function, String fnSourceName) { if (externMethodsWithoutSignatures.contains(name)) { return;"
      },
      {
        "txt": "if (externMethodsWithoutSignatures.contains(name)) { return; } getSignatureStore().addSignature(name, function, fnSourceName); methodDefinitions.put(name, function); } private class GetExternMethods extends AbstractPostOrderCallback { public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.GETPROP:"
      },
      {
        "txt": "case Token.GETELEM: { Node dest = n.getFirstChild().getNext(); if (dest.getType() != Token.STRING) { return; } String name = dest.getString(); if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n && n.getNext().getType() == Token.FUNCTION) { addSignature(name, n.getNext(), t.getSourceName());"
      },
      {
        "txt": "} else { getSignatureStore().removeSignature(name); externMethodsWithoutSignatures.add(name); } externMethods.add(name); } break; case Token.OBJECTLIT: { for (Node key = n.getFirstChild(); key != null; key = key.getNext().getNext()) { if (key.getType() == Token.STRING) {"
      },
      {
        "txt": "Node value = key.getNext(); String name = key.getString(); if (value.getType() == Token.FUNCTION) { addSignature(name, value, t.getSourceName()); } else { getSignatureStore().removeSignature(name); externMethodsWithoutSignatures.add(name); } externMethods.add(name); }"
      },
      {
        "txt": "} } break; } } } private class GatherSignatures extends AbstractPostOrderCallback { public void visit(NodeTraversal t, Node n, Node parent) { switch (n.getType()) { case Token.GETPROP: case Token.GETELEM:"
      },
      {
        "txt": "Node dest = n.getFirstChild().getNext(); if (dest.getType() == Token.STRING) { if (dest.getString().equals(\"prototype\")) { processPrototypeParent(t, parent); } else { if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) { addPossibleSignature(dest.getString(), n.getNext(), t); } }"
      },
      {
        "txt": "} break; case Token.OBJECTLIT: for (Node key = n.getFirstChild(); key != null; key = key.getNext().getNext()) { if (key.getType() == Token.STRING) { Node value = key.getNext(); addPossibleSignature(key.getString(), value, t); } }"
      },
      {
        "txt": "break; } } private void processPrototypeParent(NodeTraversal t, Node n) { switch (n.getType()) { case Token.GETPROP: case Token.GETELEM: Node dest = n.getFirstChild().getNext(); Node parent = n.getParent().getParent(); if (dest.getType() == Token.STRING &&"
      },
      {
        "txt": "parent.getType() == Token.ASSIGN) { Node assignee = parent.getFirstChild().getNext(); addPossibleSignature(dest.getString(), assignee, t); } break; } } }"
      }
    ]
  },
  {
    "id": 508,
    "file_path": "src/com/google/javascript/jscomp/RenameVars.java",
    "start-bug-line": 203,
    "end-bug-line": 203,
    "bug": "",
    "fix": "if (local) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import javax.annotation.Nullable; import com.google.common.base.Preconditions; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.Token; import java.util.*; final class RenameVars implements CompilerPass { private final AbstractCompiler compiler; private final ArrayList<Node> globalNameNodes = new ArrayList<Node>(); private final ArrayList<Node> localNameNodes = new ArrayList<Node>(); private final ArrayList<String> localTempNames = new ArrayList<String>(); private final Set<String> externNames = new HashSet<String>(); private final Set<String> reservedNames; private final Map<String, String> renameMap = new HashMap<String, String>();"
      },
      {
        "txt": "private final VariableMap prevUsedRenameMap; private final String prefix; private int assignmentCount = 0; private StringBuilder assignmentLog; class Assignment { final CompilerInput input; final String oldName; final int orderOfOccurrence; String newName; int count; // Number of times this is referenced"
      },
      {
        "txt": "Assignment(String name, CompilerInput input) { this.input = input; this.oldName = name; this.newName = null; this.count = 0; this.orderOfOccurrence = assignmentCount++; } void setNewName(String newName) { Preconditions.checkState(this.newName == null); this.newName = newName;"
      },
      {
        "txt": "} } private final SortedMap<String, Assignment> assignments = new TreeMap<String, Assignment>(); private final boolean localRenamingOnly; private boolean preserveAnonymousFunctionNames; private boolean generatePseudoNames; private final char[] reservedCharacters; private static final String LOCAL_VAR_PREFIX = \"L \"; RenameVars(AbstractCompiler compiler,"
      },
      {
        "txt": "String prefix, boolean localRenamingOnly, boolean preserveAnonymousFunctionNames, boolean generatePseudoNames, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set<String> reservedNames) { this.compiler = compiler; this.prefix = prefix == null ? \"\" : prefix; this.localRenamingOnly = localRenamingOnly;"
      },
      {
        "txt": "this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames; this.generatePseudoNames = generatePseudoNames; this.prevUsedRenameMap = prevUsedRenameMap; this.reservedCharacters = reservedCharacters; if (reservedNames == null) { this.reservedNames = Sets.newHashSet(); } else { this.reservedNames = Sets.newHashSet(reservedNames); } }"
      },
      {
        "txt": "class ProcessVars extends AbstractPostOrderCallback { private final boolean isExternsPass_; ProcessVars(boolean isExterns) { isExternsPass_ = isExterns; } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() != Token.NAME) { return; }"
      },
      {
        "txt": "String name = n.getString(); if (name.length() == 0) { return; } Scope.Var var = t.getScope().getVar(name); boolean local = (var != null) && var.isLocal(); if (!local && localRenamingOnly) { reservedNames.add(name); return; }"
      },
      {
        "txt": "&& var != null && NodeUtil.isAnonymousFunction(var.getParentNode())) { reservedNames.add(name); return; } if (!okToRenameVar(name, local)) { <extra_id_0> return; } if (isExternsPass_) { if (!local) { externNames.add(name); }"
      },
      {
        "txt": "externNames.add(name); } return; } if (local) { String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex(); incCount(tempName, null); localNameNodes.add(n); localTempNames.add(tempName); } else if (var != null) { // Not an extern"
      },
      {
        "txt": "incCount(name, var.input); globalNameNodes.add(n); } } void incCount(String name, CompilerInput input) { Assignment s = assignments.get(name); if (s == null) { s = new Assignment(name, input); assignments.put(name, s); }"
      },
      {
        "txt": "s.count++; } } private static final Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment>() { public int compare(Assignment a1, Assignment a2) { if (a1.count != a2.count) { return a2.count - a1.count; } return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2);"
      },
      {
        "txt": "} }; private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR = new Comparator<Assignment>() { public int compare(Assignment a1, Assignment a2) { return a1.orderOfOccurrence - a2.orderOfOccurrence; } }; public void process(Node externs, Node root) { assignmentLog = new StringBuilder();"
      },
      {
        "txt": "NodeTraversal.traverse(compiler, externs, new ProcessVars(true)); NodeTraversal.traverse(compiler, root, new ProcessVars(false)); reservedNames.addAll(externNames); SortedSet<Assignment> varsByFrequency = new TreeSet<Assignment>(FREQUENCY_COMPARATOR); varsByFrequency.addAll(assignments.values()); if (prevUsedRenameMap != null) { reusePreviouslyUsedVariableMap(); } assignNames(varsByFrequency);"
      },
      {
        "txt": "boolean changed = false; for (Node n : globalNameNodes) { String newName = getNewGlobalName(n); if (newName != null) { n.setString(newName); changed = true; } } int count = 0; for (Node n : localNameNodes) {"
      },
      {
        "txt": "String newName = getNewLocalName(n, count); if (newName != null) { n.setString(newName); changed = true; } count++; } if (changed) { compiler.reportCodeChange(); }"
      },
      {
        "txt": "compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog); assignmentLog = null; } private String getNewGlobalName(Node n) { String oldName = n.getString(); Assignment a = assignments.get(oldName); if (a.newName != null && !a.newName.equals(oldName)) { if (generatePseudoNames) { return getPseudoName(oldName); }"
      },
      {
        "txt": "return a.newName; } else { return null; } } private String getNewLocalName(Node n, int index) { String oldTempName = localTempNames.get(index); Assignment a = assignments.get(oldTempName); if (!a.newName.equals(oldTempName)) { if (generatePseudoNames) {"
      },
      {
        "txt": "return getPseudoName(n.getString()); } return a.newName; } return null; } private String getPseudoName(String s) { Preconditions.checkState(generatePseudoNames); return '$' + s + \"$$\"; }"
      },
      {
        "txt": "private void reusePreviouslyUsedVariableMap() { for (Assignment a : assignments.values()) { String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName); if (prevNewName == null || reservedNames.contains(prevNewName)) { continue; } if (a.oldName.startsWith(LOCAL_VAR_PREFIX) || (!externNames.contains(a.oldName) && prevNewName.startsWith(prefix))) { reservedNames.add(prevNewName);"
      },
      {
        "txt": "finalizeNameAssignment(a, prevNewName); } } } private void assignNames(Set<Assignment> varsToRename) { NameGenerator globalNameGenerator = new NameGenerator(reservedNames, prefix, reservedCharacters); NameGenerator localNameGenerator = prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters);"
      },
      {
        "txt": "List<Assignment> pendingAssignments = new ArrayList<Assignment>(); List<String> generatedNamesForAssignments = new ArrayList<String>(); for (Assignment a : varsToRename) { if (a.newName != null) { continue; } if (externNames.contains(a.oldName)) { continue; } String newName;"
      },
      {
        "txt": "if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) { newName = localNameGenerator.generateNextName(); finalizeNameAssignment(a, newName); } else { newName = globalNameGenerator.generateNextName(); pendingAssignments.add(a); generatedNamesForAssignments.add(newName); } reservedNames.add(newName); }"
      },
      {
        "txt": "int numPendingAssignments = generatedNamesForAssignments.size(); for (int i = 0; i < numPendingAssignments;) { SortedSet<Assignment> varsByOrderOfOccurrence = new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR); int len = generatedNamesForAssignments.get(i).length(); for (int j = i; j < numPendingAssignments && generatedNamesForAssignments.get(j).length() == len; j++) { varsByOrderOfOccurrence.add(pendingAssignments.get(j));"
      },
      {
        "txt": "} for (Assignment a : varsByOrderOfOccurrence) { finalizeNameAssignment(a, generatedNamesForAssignments.get(i)); ++i; } } } private void finalizeNameAssignment(Assignment a, String newName) { a.setNewName(newName); renameMap.put(a.oldName, newName);"
      },
      {
        "txt": "assignmentLog.append(a.oldName).append(\" => \").append(newName). append('\\n'); } VariableMap getVariableMap() { return new VariableMap(renameMap); } private boolean okToRenameVar(String name, boolean isLocal) { return !compiler.getCodingConvention().isExported(name, isLocal); }"
      }
    ]
  },
  {
    "id": 509,
    "file_path": "src/com/google/javascript/jscomp/RenameVars.java",
    "start-bug-line": 204,
    "end-bug-line": 204,
    "bug": "",
    "fix": "String newName = MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName( name); if (!newName.equals(name)) { n.setString(newName); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import javax.annotation.Nullable; import com.google.common.base.Preconditions; import com.google.common.collect.Sets; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.Token; import java.util.*; final class RenameVars implements CompilerPass { private final AbstractCompiler compiler; private final ArrayList<Node> globalNameNodes = new ArrayList<Node>(); private final ArrayList<Node> localNameNodes = new ArrayList<Node>(); private final ArrayList<String> localTempNames = new ArrayList<String>(); private final Set<String> externNames = new HashSet<String>(); private final Set<String> reservedNames; private final Map<String, String> renameMap = new HashMap<String, String>();"
      },
      {
        "txt": "private final VariableMap prevUsedRenameMap; private final String prefix; private int assignmentCount = 0; private StringBuilder assignmentLog; class Assignment { final CompilerInput input; final String oldName; final int orderOfOccurrence; String newName; int count; // Number of times this is referenced"
      },
      {
        "txt": "Assignment(String name, CompilerInput input) { this.input = input; this.oldName = name; this.newName = null; this.count = 0; this.orderOfOccurrence = assignmentCount++; } void setNewName(String newName) { Preconditions.checkState(this.newName == null); this.newName = newName;"
      },
      {
        "txt": "} } private final SortedMap<String, Assignment> assignments = new TreeMap<String, Assignment>(); private final boolean localRenamingOnly; private boolean preserveAnonymousFunctionNames; private boolean generatePseudoNames; private final char[] reservedCharacters; private static final String LOCAL_VAR_PREFIX = \"L \"; RenameVars(AbstractCompiler compiler,"
      },
      {
        "txt": "String prefix, boolean localRenamingOnly, boolean preserveAnonymousFunctionNames, boolean generatePseudoNames, VariableMap prevUsedRenameMap, @Nullable char[] reservedCharacters, @Nullable Set<String> reservedNames) { this.compiler = compiler; this.prefix = prefix == null ? \"\" : prefix; this.localRenamingOnly = localRenamingOnly;"
      },
      {
        "txt": "this.preserveAnonymousFunctionNames = preserveAnonymousFunctionNames; this.generatePseudoNames = generatePseudoNames; this.prevUsedRenameMap = prevUsedRenameMap; this.reservedCharacters = reservedCharacters; if (reservedNames == null) { this.reservedNames = Sets.newHashSet(); } else { this.reservedNames = Sets.newHashSet(reservedNames); } }"
      },
      {
        "txt": "class ProcessVars extends AbstractPostOrderCallback { private final boolean isExternsPass_; ProcessVars(boolean isExterns) { isExternsPass_ = isExterns; } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() != Token.NAME) { return; }"
      },
      {
        "txt": "String name = n.getString(); if (name.length() == 0) { return; } Scope.Var var = t.getScope().getVar(name); boolean local = (var != null) && var.isLocal(); if (!local && localRenamingOnly) { reservedNames.add(name); return; }"
      },
      {
        "txt": "&& var != null && NodeUtil.isAnonymousFunction(var.getParentNode())) { reservedNames.add(name); return; } if (!okToRenameVar(name, local)) { <extra_id_0> } if (isExternsPass_) { if (!local) { externNames.add(name); } return;"
      },
      {
        "txt": "} return; } if (local) { String tempName = LOCAL_VAR_PREFIX + var.getLocalVarIndex(); incCount(tempName, null); localNameNodes.add(n); localTempNames.add(tempName); } else if (var != null) { // Not an extern incCount(name, var.input);"
      },
      {
        "txt": "globalNameNodes.add(n); } } void incCount(String name, CompilerInput input) { Assignment s = assignments.get(name); if (s == null) { s = new Assignment(name, input); assignments.put(name, s); } s.count++;"
      },
      {
        "txt": "} } private static final Comparator<Assignment> FREQUENCY_COMPARATOR = new Comparator<Assignment>() { public int compare(Assignment a1, Assignment a2) { if (a1.count != a2.count) { return a2.count - a1.count; } return ORDER_OF_OCCURRENCE_COMPARATOR.compare(a1, a2); }"
      },
      {
        "txt": "}; private static final Comparator<Assignment> ORDER_OF_OCCURRENCE_COMPARATOR = new Comparator<Assignment>() { public int compare(Assignment a1, Assignment a2) { return a1.orderOfOccurrence - a2.orderOfOccurrence; } }; public void process(Node externs, Node root) { assignmentLog = new StringBuilder(); NodeTraversal.traverse(compiler, externs, new ProcessVars(true));"
      },
      {
        "txt": "NodeTraversal.traverse(compiler, root, new ProcessVars(false)); reservedNames.addAll(externNames); SortedSet<Assignment> varsByFrequency = new TreeSet<Assignment>(FREQUENCY_COMPARATOR); varsByFrequency.addAll(assignments.values()); if (prevUsedRenameMap != null) { reusePreviouslyUsedVariableMap(); } assignNames(varsByFrequency); boolean changed = false;"
      },
      {
        "txt": "for (Node n : globalNameNodes) { String newName = getNewGlobalName(n); if (newName != null) { n.setString(newName); changed = true; } } int count = 0; for (Node n : localNameNodes) { String newName = getNewLocalName(n, count);"
      },
      {
        "txt": "if (newName != null) { n.setString(newName); changed = true; } count++; } if (changed) { compiler.reportCodeChange(); } compiler.addToDebugLog(\"JS var assignments:\\n\" + assignmentLog);"
      },
      {
        "txt": "assignmentLog = null; } private String getNewGlobalName(Node n) { String oldName = n.getString(); Assignment a = assignments.get(oldName); if (a.newName != null && !a.newName.equals(oldName)) { if (generatePseudoNames) { return getPseudoName(oldName); } return a.newName;"
      },
      {
        "txt": "} else { return null; } } private String getNewLocalName(Node n, int index) { String oldTempName = localTempNames.get(index); Assignment a = assignments.get(oldTempName); if (!a.newName.equals(oldTempName)) { if (generatePseudoNames) { return getPseudoName(n.getString());"
      },
      {
        "txt": "} return a.newName; } return null; } private String getPseudoName(String s) { Preconditions.checkState(generatePseudoNames); return '$' + s + \"$$\"; } private void reusePreviouslyUsedVariableMap() {"
      },
      {
        "txt": "for (Assignment a : assignments.values()) { String prevNewName = prevUsedRenameMap.lookupNewName(a.oldName); if (prevNewName == null || reservedNames.contains(prevNewName)) { continue; } if (a.oldName.startsWith(LOCAL_VAR_PREFIX) || (!externNames.contains(a.oldName) && prevNewName.startsWith(prefix))) { reservedNames.add(prevNewName); finalizeNameAssignment(a, prevNewName);"
      },
      {
        "txt": "} } } private void assignNames(Set<Assignment> varsToRename) { NameGenerator globalNameGenerator = new NameGenerator(reservedNames, prefix, reservedCharacters); NameGenerator localNameGenerator = prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters); List<Assignment> pendingAssignments = new ArrayList<Assignment>();"
      },
      {
        "txt": "List<String> generatedNamesForAssignments = new ArrayList<String>(); for (Assignment a : varsToRename) { if (a.newName != null) { continue; } if (externNames.contains(a.oldName)) { continue; } String newName; if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {"
      },
      {
        "txt": "newName = localNameGenerator.generateNextName(); finalizeNameAssignment(a, newName); } else { newName = globalNameGenerator.generateNextName(); pendingAssignments.add(a); generatedNamesForAssignments.add(newName); } reservedNames.add(newName); } int numPendingAssignments = generatedNamesForAssignments.size();"
      },
      {
        "txt": "for (int i = 0; i < numPendingAssignments;) { SortedSet<Assignment> varsByOrderOfOccurrence = new TreeSet<Assignment>(ORDER_OF_OCCURRENCE_COMPARATOR); int len = generatedNamesForAssignments.get(i).length(); for (int j = i; j < numPendingAssignments && generatedNamesForAssignments.get(j).length() == len; j++) { varsByOrderOfOccurrence.add(pendingAssignments.get(j)); }"
      },
      {
        "txt": "for (Assignment a : varsByOrderOfOccurrence) { finalizeNameAssignment(a, generatedNamesForAssignments.get(i)); ++i; } } } private void finalizeNameAssignment(Assignment a, String newName) { a.setNewName(newName); renameMap.put(a.oldName, newName); assignmentLog.append(a.oldName).append(\" => \").append(newName)."
      },
      {
        "txt": "append('\\n'); } VariableMap getVariableMap() { return new VariableMap(renameMap); } private boolean okToRenameVar(String name, boolean isLocal) { return !compiler.getCodingConvention().isExported(name, isLocal); }"
      }
    ]
  }
]
[
  {
    "id": 762,
    "file_path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
    "start-bug-line": 1283,
    "end-bug-line": 1283,
    "bug": "",
    "fix": "if (isAssignmentTarget(n)) { return n; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.javascript.jscomp.mozilla.rhino.ScriptRuntime; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.TernaryValue;"
      },
      {
        "txt": "class PeepholeFoldConstants extends AbstractPeepholeOptimization { static final DiagnosticType INVALID_GETELEM_INDEX_ERROR = DiagnosticType.error( \"JSC_INVALID_GETELEM_INDEX_ERROR\", \"Array index not integer: {0}\"); static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR = DiagnosticType.error( \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\", \"Array index out of bounds: {0}\"); static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR ="
      },
      {
        "txt": "DiagnosticType.error( \"JSC_NEGATING_A_NON_NUMBER_ERROR\", \"Can't negate non-numeric value: {0}\"); static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE = DiagnosticType.error( \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\", \"Operand out of range, bitwise operation will lose information: {0}\"); static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error( \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\", \"Shift amount out of bounds: {0}\");"
      },
      {
        "txt": "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error( \"JSC_FRACTIONAL_BITWISE_OPERAND\", \"Fractional bitwise operand: {0}\"); private static final double MAX_FOLD_NUMBER = Math.pow(2, 53); @Override Node optimizeSubtree(Node subtree) { switch(subtree.getType()) { case Token.NEW: return tryFoldCtorCall(subtree); case Token.TYPEOF:"
      },
      {
        "txt": "return tryFoldTypeof(subtree); case Token.NOT: case Token.POS: case Token.NEG: case Token.BITNOT: tryReduceOperandsForOp(subtree); return tryFoldUnaryOperator(subtree); case Token.VOID: return tryReduceVoid(subtree); default:"
      },
      {
        "txt": "tryReduceOperandsForOp(subtree); return tryFoldBinaryOperator(subtree); } } private Node tryFoldBinaryOperator(Node subtree) { Node left = subtree.getFirstChild(); if (left == null) { return subtree; } Node right = left.getNext();"
      },
      {
        "txt": "if (right == null) { return subtree; } switch(subtree.getType()) { case Token.GETPROP: return tryFoldGetProp(subtree, left, right); case Token.GETELEM: return tryFoldGetElem(subtree, left, right); case Token.INSTANCEOF: return tryFoldInstanceof(subtree, left, right);"
      },
      {
        "txt": "case Token.AND: case Token.OR: return tryFoldAndOr(subtree, left, right); case Token.LSH: case Token.RSH: case Token.URSH: return tryFoldShift(subtree, left, right); case Token.ASSIGN: return tryFoldAssign(subtree, left, right); case Token.ADD:"
      },
      {
        "txt": "return tryFoldAdd(subtree, left, right); case Token.SUB: case Token.DIV: case Token.MOD: return tryFoldArithmeticOp(subtree, left, right); case Token.MUL: case Token.BITAND: case Token.BITOR: case Token.BITXOR: Node result = tryFoldArithmeticOp(subtree, left, right);"
      },
      {
        "txt": "if (result != subtree) { return result; } return tryFoldLeftChildOp(subtree, left, right); case Token.LT: case Token.GT: case Token.LE: case Token.GE: case Token.EQ: case Token.NE:"
      },
      {
        "txt": "case Token.SHEQ: case Token.SHNE: return tryFoldComparison(subtree, left, right); default: return subtree; } } private Node tryReduceVoid(Node n) { Node child = n.getFirstChild(); if (child.getType() != Token.NUMBER || child.getDouble() != 0.0) {"
      },
      {
        "txt": "if (!mayHaveSideEffects(n)) { n.replaceChild(child, Node.newNumber(0)); reportCodeChange(); } } return n; } private void tryReduceOperandsForOp(Node n) { switch (n.getType()) { case Token.ADD:"
      },
      {
        "txt": "Node left = n.getFirstChild(); Node right = n.getLastChild(); if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) { tryConvertOperandsToNumber(n); } break; case Token.ASSIGN_BITOR: case Token.ASSIGN_BITXOR: case Token.ASSIGN_BITAND: case Token.ASSIGN_LSH:"
      },
      {
        "txt": "case Token.ASSIGN_RSH: case Token.ASSIGN_URSH: case Token.ASSIGN_SUB: case Token.ASSIGN_MUL: case Token.ASSIGN_MOD: case Token.ASSIGN_DIV: tryConvertToNumber(n.getLastChild()); break; case Token.BITNOT: case Token.BITOR:"
      },
      {
        "txt": "case Token.BITXOR: case Token.BITAND: case Token.LSH: case Token.RSH: case Token.URSH: case Token.SUB: case Token.MUL: case Token.MOD: case Token.DIV: case Token.POS:"
      },
      {
        "txt": "case Token.NEG: tryConvertOperandsToNumber(n); break; } } private void tryConvertOperandsToNumber(Node n) { Node next; for (Node c = n.getFirstChild(); c != null; c = next) { next = c.getNext(); tryConvertToNumber(c);"
      },
      {
        "txt": "} } private void tryConvertToNumber(Node n) { switch (n.getType()) { case Token.NUMBER: return; case Token.AND: case Token.OR: case Token.COMMA: tryConvertToNumber(n.getLastChild());"
      },
      {
        "txt": "return; case Token.HOOK: tryConvertToNumber(n.getChildAtIndex(1)); tryConvertToNumber(n.getLastChild()); return; case Token.NAME: if (!NodeUtil.isUndefined(n)) { return; } break;"
      },
      {
        "txt": "} Double result = NodeUtil.getNumberValue(n); if (result == null) { return; } double value = result; Node replacement; if (Double.isNaN(value)) { replacement = Node.newString(Token.NAME, \"NaN\"); } else if (value == Double.POSITIVE_INFINITY) {"
      },
      {
        "txt": "replacement = Node.newString(Token.NAME, \"Infinity\"); } else if (value == Double.NEGATIVE_INFINITY) { replacement = new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\")); replacement.copyInformationFromForTree(n); } else { replacement = Node.newNumber(value); } n.getParent().replaceChild(n, replacement); reportCodeChange(); }"
      },
      {
        "txt": "private Node tryFoldTypeof(Node originalTypeofNode) { Preconditions.checkArgument(originalTypeofNode.getType() == Token.TYPEOF); Node argumentNode = originalTypeofNode.getFirstChild(); if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true)) { return originalTypeofNode; } String typeNameString = null; switch (argumentNode.getType()) { case Token.FUNCTION: typeNameString = \"function\";"
      },
      {
        "txt": "break; case Token.STRING: typeNameString = \"string\"; break; case Token.NUMBER: typeNameString = \"number\"; break; case Token.TRUE: case Token.FALSE: typeNameString = \"boolean\";"
      },
      {
        "txt": "break; case Token.NULL: case Token.OBJECTLIT: case Token.ARRAYLIT: typeNameString = \"object\"; break; case Token.VOID: typeNameString = \"undefined\"; break; case Token.NAME:"
      },
      {
        "txt": "if (\"undefined\".equals(argumentNode.getString())) { typeNameString = \"undefined\"; } break; } if (typeNameString != null) { Node newNode = Node.newString(typeNameString); originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode); reportCodeChange(); return newNode;"
      },
      {
        "txt": "} return originalTypeofNode; } private Node tryFoldUnaryOperator(Node n) { Preconditions.checkState(n.hasOneChild()); Node left = n.getFirstChild(); Node parent = n.getParent(); if (left == null) { return n; }"
      },
      {
        "txt": "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left); if (leftVal == TernaryValue.UNKNOWN) { return n; } switch (n.getType()) { case Token.NOT: if (left.getType() == Token.NUMBER) { double numValue = left.getDouble(); if (numValue == 0 || numValue == 1) { return n;"
      },
      {
        "txt": "} } int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE; Node replacementNode = new Node(result); parent.replaceChild(n, replacementNode); reportCodeChange(); return replacementNode; case Token.POS: if (NodeUtil.isNumericResult(left)) { parent.replaceChild(n, left.detachFromParent());"
      },
      {
        "txt": "reportCodeChange(); return left; } return n; case Token.NEG: try { if (left.getType() == Token.NAME) { if (left.getString().equals(\"Infinity\")) { return n; } else if (left.getString().equals(\"NaN\")) {"
      },
      {
        "txt": "n.removeChild(left); parent.replaceChild(n, left); reportCodeChange(); return left; } } double negNum = -left.getDouble(); Node negNumNode = Node.newNumber(negNum); parent.replaceChild(n, negNumNode); reportCodeChange();"
      },
      {
        "txt": "return negNumNode; } catch (UnsupportedOperationException ex) { error(NEGATING_A_NON_NUMBER_ERROR, left); return n; } case Token.BITNOT: try { double val = left.getDouble(); if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) { int intVal = (int) val;"
      },
      {
        "txt": "if (intVal == val) { Node notIntValNode = Node.newNumber(~intVal); parent.replaceChild(n, notIntValNode); reportCodeChange(); return notIntValNode; } else { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } } else {"
      },
      {
        "txt": "error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } } catch (UnsupportedOperationException ex) { error(NEGATING_A_NON_NUMBER_ERROR, left); return n; } default: return n; }"
      },
      {
        "txt": "} private Node tryFoldInstanceof(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.INSTANCEOF); if (NodeUtil.isLiteralValue(left, true) && !mayHaveSideEffects(right)) { Node replacementNode = null; if (NodeUtil.isImmutableValue(left)) { replacementNode = new Node(Token.FALSE); } else if (right.getType() == Token.NAME && \"Object\".equals(right.getString())) {"
      },
      {
        "txt": "replacementNode = new Node(Token.TRUE); } if (replacementNode != null) { n.getParent().replaceChild(n, replacementNode); reportCodeChange(); return replacementNode; } } return n; }"
      },
      {
        "txt": "private Node tryFoldAssign(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.ASSIGN); if (!right.hasChildren() || right.getFirstChild().getNext() != right.getLastChild()) { return n; } if (mayHaveSideEffects(left)) { return n; } Node newRight;"
      },
      {
        "txt": "if (areNodesEqualForInlining(left, right.getFirstChild())) { newRight = right.getLastChild(); } else if (NodeUtil.isCommutative(right.getType()) && areNodesEqualForInlining(left, right.getLastChild())) { newRight = right.getFirstChild(); } else { return n; } int newType = -1; switch (right.getType()) {"
      },
      {
        "txt": "case Token.ADD: newType = Token.ASSIGN_ADD; break; case Token.BITAND: newType = Token.ASSIGN_BITAND; break; case Token.BITOR: newType = Token.ASSIGN_BITOR; break; case Token.BITXOR:"
      },
      {
        "txt": "newType = Token.ASSIGN_BITXOR; break; case Token.DIV: newType = Token.ASSIGN_DIV; break; case Token.LSH: newType = Token.ASSIGN_LSH; break; case Token.MOD: newType = Token.ASSIGN_MOD;"
      },
      {
        "txt": "break; case Token.MUL: newType = Token.ASSIGN_MUL; break; case Token.RSH: newType = Token.ASSIGN_RSH; break; case Token.SUB: newType = Token.ASSIGN_SUB; break;"
      },
      {
        "txt": "case Token.URSH: newType = Token.ASSIGN_URSH; break; default: return n; } Node newNode = new Node(newType, left.detachFromParent(), newRight.detachFromParent()); n.getParent().replaceChild(n, newNode); reportCodeChange();"
      },
      {
        "txt": "return newNode; } private Node tryFoldAndOr(Node n, Node left, Node right) { Node parent = n.getParent(); Node result = null; int type = n.getType(); TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left); if (leftVal != TernaryValue.UNKNOWN) { boolean lval = leftVal.toBoolean(true); if (lval && type == Token.OR ||"
      },
      {
        "txt": "!lval && type == Token.AND) { result = left; } else if (!mayHaveSideEffects(left)) { result = right; } } if (result != null) { n.removeChild(result); parent.replaceChild(n, result); reportCodeChange();"
      },
      {
        "txt": "return result; } else { return n; } } private Node tryFoldChildAddString(Node n, Node left, Node right) { if (NodeUtil.isLiteralValue(right, false) && left.getType() == Token.ADD) { Node ll = left.getFirstChild(); Node lr = ll.getNext();"
      },
      {
        "txt": "if (lr.getType() == Token.STRING) { String leftString = NodeUtil.getStringValue(lr); String rightString = NodeUtil.getStringValue(right); if (leftString != null && rightString != null) { left.removeChild(ll); String result = leftString + rightString; n.replaceChild(left, ll); n.replaceChild(right, Node.newString(result)); reportCodeChange(); return n;"
      },
      {
        "txt": "} } } if (NodeUtil.isLiteralValue(left, false) && right.getType() == Token.ADD) { Node rl = right.getFirstChild(); Node rr = right.getLastChild(); if (rl.getType() == Token.STRING) { String leftString = NodeUtil.getStringValue(left); String rightString = NodeUtil.getStringValue(rl);"
      },
      {
        "txt": "if (leftString != null && rightString != null) { right.removeChild(rr); String result = leftString + rightString; n.replaceChild(right, rr); n.replaceChild(left, Node.newString(result)); reportCodeChange(); return n; } } }"
      },
      {
        "txt": "return n; } private Node tryFoldAddConstantString(Node n, Node left, Node right) { if (left.getType() == Token.STRING || right.getType() == Token.STRING) { String leftString = NodeUtil.getStringValue(left); String rightString = NodeUtil.getStringValue(right); if (leftString != null && rightString != null) { Node newStringNode = Node.newString(leftString + rightString); n.getParent().replaceChild(n, newStringNode);"
      },
      {
        "txt": "reportCodeChange(); return newStringNode; } } return n; } private Node tryFoldArithmeticOp(Node n, Node left, Node right) { Node result = performArithmeticOp(n.getType(), left, right); if (result != null) { result.copyInformationFromForTree(n);"
      },
      {
        "txt": "n.getParent().replaceChild(n, result); reportCodeChange(); return result; } return n; } private Node performArithmeticOp(int opType, Node left, Node right) { if (opType == Token.ADD && (NodeUtil.mayBeString(left, false) || NodeUtil.mayBeString(right, false))) {"
      },
      {
        "txt": "return null; } double result; Double lValObj = NodeUtil.getNumberValue(left); if (lValObj == null) { return null; } Double rValObj = NodeUtil.getNumberValue(right); if (rValObj == null) { return null;"
      },
      {
        "txt": "} double lval = lValObj; double rval = rValObj; switch (opType) { case Token.BITAND: result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval); break; case Token.BITOR: result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval); break;"
      },
      {
        "txt": "case Token.BITXOR: result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval); break; case Token.ADD: result = lval + rval; break; case Token.SUB: result = lval - rval; break; case Token.MUL:"
      },
      {
        "txt": "result = lval * rval; break; case Token.MOD: if (rval == 0) { return null; } result = lval % rval; break; case Token.DIV: if (rval == 0) {"
      },
      {
        "txt": "return null; } result = lval / rval; break; default: throw new Error(\"Unexpected arithmetic operator\"); } if (String.valueOf(result).length() <= String.valueOf(lval).length() + String.valueOf(rval).length() + 1 && Math.abs(result) <= MAX_FOLD_NUMBER) {"
      },
      {
        "txt": "Node newNumber = Node.newNumber(result); return newNumber; } else if (Double.isNaN(result)) { return Node.newString(Token.NAME, \"NaN\"); } else if (result == Double.POSITIVE_INFINITY) { return Node.newString(Token.NAME, \"Infinity\"); } else if (result == Double.NEGATIVE_INFINITY) { return new Node(Token.NEG, Node.newString(Token.NAME, \"Infinity\")); } return null;"
      },
      {
        "txt": "} private Node tryFoldLeftChildOp(Node n, Node left, Node right) { int opType = n.getType(); Preconditions.checkState( (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType)) || n.getType() == Token.ADD); Preconditions.checkState( n.getType() != Token.ADD || !NodeUtil.mayBeString(n)); Double rightValObj = NodeUtil.getNumberValue(right); if (rightValObj != null && left.getType() == opType) {"
      },
      {
        "txt": "Preconditions.checkState(left.getChildCount() == 2); Node ll = left.getFirstChild(); Node lr = ll.getNext(); Node valueToCombine = ll; Node replacement = performArithmeticOp(opType, valueToCombine, right); if (replacement == null) { valueToCombine = lr; replacement = performArithmeticOp(opType, valueToCombine, right); } if (replacement != null) {"
      },
      {
        "txt": "left.removeChild(valueToCombine); n.replaceChild(left, left.removeFirstChild()); replacement.copyInformationFromForTree(right); n.replaceChild(right, replacement); reportCodeChange(); } } return n; } private Node tryFoldAdd(Node node, Node left, Node right) {"
      },
      {
        "txt": "Preconditions.checkArgument(node.getType() == Token.ADD); if (NodeUtil.mayBeString(node, true)) { if (NodeUtil.isLiteralValue(left, false) && NodeUtil.isLiteralValue(right, false)) { return tryFoldAddConstantString(node, left, right); } else { return tryFoldChildAddString(node, left, right); } } else { Node result = tryFoldArithmeticOp(node, left, right);"
      },
      {
        "txt": "if (result != node) { return result; } return tryFoldLeftChildOp(node, left, right); } } private Node tryFoldShift(Node n, Node left, Node right) { if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) { double result;"
      },
      {
        "txt": "double lval = left.getDouble(); double rval = right.getDouble(); if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) { error(BITWISE_OPERAND_OUT_OF_RANGE, left); return n; } if (!(rval >= 0 && rval < 32)) { error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right); return n; }"
      },
      {
        "txt": "int lvalInt = (int) lval; if (lvalInt != lval) { error(FRACTIONAL_BITWISE_OPERAND, left); return n; } int rvalInt = (int) rval; if (rvalInt != rval) { error(FRACTIONAL_BITWISE_OPERAND, right); return n; }"
      },
      {
        "txt": "switch (n.getType()) { case Token.LSH: result = lvalInt << rvalInt; break; case Token.RSH: result = lvalInt >> rvalInt; break; case Token.URSH: long lvalLong = lvalInt & 0xffffffffL; result = lvalLong >>> rvalInt;"
      },
      {
        "txt": "break; default: throw new AssertionError(\"Unknown shift operator: \" + Node.tokenToName(n.getType())); } Node newNumber = Node.newNumber(result); n.getParent().replaceChild(n, newNumber); reportCodeChange(); return newNumber; }"
      },
      {
        "txt": "return n; } @SuppressWarnings(\"fallthrough\") private Node tryFoldComparison(Node n, Node left, Node right) { if (!NodeUtil.isLiteralValue(left, false) || !NodeUtil.isLiteralValue(right, false)) { if (n.getType() != Token.GT && n.getType() != Token.LT) { return n; } }"
      },
      {
        "txt": "int op = n.getType(); boolean result; boolean rightLiteral = NodeUtil.isLiteralValue(right, false); boolean undefinedRight = ((Token.NAME == right.getType() && right.getString().equals(\"undefined\")) || (Token.VOID == right.getType() && NodeUtil.isLiteralValue(right.getFirstChild(), false))); int lhType = getNormalizedNodeType(left); int rhType = getNormalizedNodeType(right); switch (lhType) {"
      },
      {
        "txt": "case Token.VOID: if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) { return n; } else if (!rightLiteral) { return n; } else { result = compareToUndefined(right, op); } break; case Token.NULL:"
      },
      {
        "txt": "case Token.TRUE: case Token.FALSE: if (undefinedRight) { result = compareToUndefined(left, op); break; } if (rhType != Token.TRUE && rhType != Token.FALSE && rhType != Token.NULL) { return n;"
      },
      {
        "txt": "} switch (op) { case Token.SHEQ: case Token.EQ: result = lhType == rhType; break; case Token.SHNE: case Token.NE: result = lhType != rhType; break;"
      },
      {
        "txt": "case Token.GE: case Token.LE: case Token.GT: case Token.LT: Boolean compareResult = compareAsNumbers(op, left, right); if (compareResult != null) { result = compareResult; } else { return n; }"
      },
      {
        "txt": "break; default: return n; // we only handle == and != here } break; case Token.THIS: if (right.getType() != Token.THIS) { return n; } switch (op) {"
      },
      {
        "txt": "case Token.SHEQ: case Token.EQ: result = true; break; case Token.SHNE: case Token.NE: result = false; break; default: return n;"
      },
      {
        "txt": "} break; case Token.STRING: if (undefinedRight) { result = compareToUndefined(left, op); break; } if (Token.STRING != right.getType()) { return n; // Only eval if they are the same type }"
      },
      {
        "txt": "switch (op) { case Token.SHEQ: case Token.EQ: result = left.getString().equals(right.getString()); break; case Token.SHNE: case Token.NE: result = !left.getString().equals(right.getString()); break; default:"
      },
      {
        "txt": "return n; // we only handle == and != here } break; case Token.NUMBER: if (undefinedRight) { result = compareToUndefined(left, op); break; } if (Token.NUMBER != right.getType()) { return n; // Only eval if they are the same type"
      },
      {
        "txt": "} Boolean compareResult = compareAsNumbers(op, left, right); if (compareResult != null) { result = compareResult; } else { return null; } break; case Token.NAME: if (undefinedRight) {"
      },
      {
        "txt": "result = compareToUndefined(left, op); break; } if (rightLiteral) { boolean undefinedLeft = (left.getString().equals(\"undefined\")); if (undefinedLeft) { result = compareToUndefined(right, op); break; } }"
      },
      {
        "txt": "if (Token.NAME != right.getType()) { return n; // Only eval if they are the same type } String ln = left.getString(); String rn = right.getString(); if (!ln.equals(rn)) { return n; // Not the same value name. } switch (op) { case Token.LT:"
      },
      {
        "txt": "case Token.GT: result = false; break; default: return n; // don't handle that op } break; default: return n; }"
      },
      {
        "txt": "Node newNode = new Node(result ? Token.TRUE : Token.FALSE); n.getParent().replaceChild(n, newNode); reportCodeChange(); return newNode; } private int getNormalizedNodeType(Node n) { int type = n.getType(); if (type == Token.NOT) { TernaryValue value = NodeUtil.getPureBooleanValue(n); switch (value) {"
      },
      {
        "txt": "case TRUE: return Token.TRUE; case FALSE: return Token.FALSE; } } return type; } private Boolean compareAsNumbers(int op, Node left, Node right) { Double leftValue = NodeUtil.getNumberValue(left);"
      },
      {
        "txt": "if (leftValue == null) { return null; } Double rightValue = NodeUtil.getNumberValue(right); if (rightValue == null) { return null; } double lv = leftValue; double rv = rightValue; Boolean result;"
      },
      {
        "txt": "switch (op) { case Token.SHEQ: case Token.EQ: Preconditions.checkState( left.getType() == Token.NUMBER && right.getType() == Token.NUMBER); result = lv == rv; break; case Token.SHNE: case Token.NE: Preconditions.checkState("
      },
      {
        "txt": "left.getType() == Token.NUMBER && right.getType() == Token.NUMBER); result = lv != rv; break; case Token.LE: result = lv <= rv; break; case Token.LT: result = lv < rv; break; case Token.GE: result = lv >= rv; break; case Token.GT: result = lv > rv; break; default: return null; // don't handle that op }"
      },
      {
        "txt": "return result; } private boolean compareToUndefined(Node value, int op) { boolean valueUndefined = ((Token.NAME == value.getType() && value.getString().equals(\"undefined\")) || (Token.VOID == value.getType() && NodeUtil.isLiteralValue(value.getFirstChild(), false))); boolean valueNull = (Token.NULL == value.getType()); boolean equivalent = valueUndefined || valueNull; switch (op) {"
      },
      {
        "txt": "case Token.EQ: return equivalent; case Token.NE: return !equivalent; case Token.SHEQ: return valueUndefined; case Token.SHNE: return !valueUndefined; case Token.LT: case Token.GT:"
      },
      {
        "txt": "case Token.LE: case Token.GE: return false; default: throw new IllegalStateException(\"unexpected.\"); } } private Node tryFoldCtorCall(Node n) { Preconditions.checkArgument(n.getType() == Token.NEW); if (inForcedStringContext(n)) {"
      },
      {
        "txt": "return tryFoldInForcedStringContext(n); } return n; } private boolean inForcedStringContext(Node n) { return n.getParent().getType() == Token.GETELEM && n.getParent().getLastChild() == n; } private Node tryFoldInForcedStringContext(Node n) { Preconditions.checkArgument(n.getType() == Token.NEW);"
      },
      {
        "txt": "Node objectType = n.getFirstChild(); if (objectType.getType() != Token.NAME) { return n; } if (objectType.getString().equals(\"String\")) { Node value = objectType.getNext(); String stringValue = null; if (value == null) { stringValue = \"\"; } else {"
      },
      {
        "txt": "if (!NodeUtil.isImmutableValue(value)) { return n; } stringValue = NodeUtil.getStringValue(value); } if (stringValue == null) { return n; } Node parent = n.getParent(); Node newString = Node.newString(stringValue);"
      },
      {
        "txt": "parent.replaceChild(n, newString); newString.copyInformationFrom(parent); reportCodeChange(); return newString; } return n; } private Node tryFoldGetElem(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.GETELEM); if (left.getType() == Token.OBJECTLIT) {"
      },
      {
        "txt": "return tryFoldObjectPropAccess(n, left, right); } if (left.getType() == Token.ARRAYLIT) { return tryFoldArrayAccess(n, left, right); } return n; } private Node tryFoldGetProp(Node n, Node left, Node right) { Preconditions.checkArgument(n.getType() == Token.GETPROP); if (left.getType() == Token.OBJECTLIT) {"
      },
      {
        "txt": "return tryFoldObjectPropAccess(n, left, right); } if (right.getType() == Token.STRING && right.getString().equals(\"length\")) { int knownLength = -1; switch (left.getType()) { case Token.ARRAYLIT: if (mayHaveSideEffects(left)) { return n; }"
      },
      {
        "txt": "knownLength = left.getChildCount(); break; case Token.STRING: knownLength = left.getString().length(); break; default: return n; } Preconditions.checkState(knownLength != -1); Node lengthNode = Node.newNumber(knownLength);"
      },
      {
        "txt": "n.getParent().replaceChild(n, lengthNode); reportCodeChange(); return lengthNode; } return n; } private boolean isAssignmentTarget(Node n) { Node parent = n.getParent(); if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n) || parent.getType() == Token.INC"
      },
      {
        "txt": "return true; } return false; } private Node tryFoldArrayAccess(Node n, Node left, Node right) { Node parent = n.getParent(); <extra_id_0> if (right.getType() != Token.NUMBER) { return n; } double index = right.getDouble(); int intIndex = (int) index; if (intIndex != index) {"
      },
      {
        "txt": "int intIndex = (int) index; if (intIndex != index) { error(INVALID_GETELEM_INDEX_ERROR, right); return n; } if (intIndex < 0) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } Node elem = left.getFirstChild();"
      },
      {
        "txt": "for (int i = 0; elem != null && i < intIndex; i++) { elem = elem.getNext(); } if (elem == null) { error(INDEX_OUT_OF_BOUNDS_ERROR, right); return n; } if (elem.getType() == Token.EMPTY) { elem = NodeUtil.newUndefinedNode(elem); } else {"
      },
      {
        "txt": "left.removeChild(elem); } n.getParent().replaceChild(n, elem); reportCodeChange(); return elem; } private Node tryFoldObjectPropAccess(Node n, Node left, Node right) { Preconditions.checkArgument(NodeUtil.isGet(n)); if (left.getType() != Token.OBJECTLIT || right.getType() != Token.STRING) { return n;"
      },
      {
        "txt": "} if (isAssignmentTarget(n)) { return n; } Node key = null; Node value = null; for (Node c = left.getFirstChild(); c != null; c = c.getNext()) { if (c.getString().equals(right.getString())) { switch (c.getType()) { case Token.SET:"
      },
      {
        "txt": "continue; case Token.GET: case Token.STRING: if (value != null && mayHaveSideEffects(value)) { return n; } key = c; value = key.getFirstChild(); break; default:"
      },
      {
        "txt": "throw new IllegalStateException(); } } else if (mayHaveSideEffects(c.getFirstChild())) { return n; } } if (value == null) { return n; } if (value.getType() == Token.FUNCTION && NodeUtil.referencesThis(value)) {"
      },
      {
        "txt": "return n; } Node replacement = value.detachFromParent(); if (key.getType() == Token.GET){ replacement = new Node(Token.CALL, replacement); replacement.putBooleanProp(Node.FREE_CALL, true); } n.getParent().replaceChild(n, replacement); reportCodeChange(); return n;"
      }
    ]
  }
]
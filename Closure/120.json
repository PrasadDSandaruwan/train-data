[
  {
    "id": 475,
    "file_path": "src/com/google/javascript/jscomp/ReferenceCollectingCallback.java",
    "start-bug-line": 431,
    "end-bug-line": 431,
    "bug": "",
    "fix": "if (ref.getSymbol().getScope() != ref.scope) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Preconditions; import com.google.common.base.Predicate; import com.google.common.base.Predicates; import com.google.common.collect.ImmutableSet;"
      },
      {
        "txt": "import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.NodeTraversal.ScopedCallback; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.InputId; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.StaticReference; import com.google.javascript.rhino.jstype.StaticSourceFile;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.StaticSymbolTable; import java.util.ArrayDeque; import java.util.Deque; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; class ReferenceCollectingCallback implements ScopedCallback, HotSwapCompilerPass, StaticSymbolTable<Var, ReferenceCollectingCallback.Reference> {"
      },
      {
        "txt": "private final Map<Var, ReferenceCollection> referenceMap = Maps.newHashMap(); private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>(); private final Behavior behavior; private final AbstractCompiler compiler; private final Predicate<Var> varFilter; ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior) { this(compiler, behavior, Predicates.<Var>alwaysTrue()); } ReferenceCollectingCallback(AbstractCompiler compiler, Behavior behavior,"
      },
      {
        "txt": "Predicate<Var> varFilter) { this.compiler = compiler; this.behavior = behavior; this.varFilter = varFilter; } @Override public void process(Node externs, Node root) { NodeTraversal.traverseRoots( compiler, Lists.newArrayList(externs, root), this); }"
      },
      {
        "txt": "@Override public void hotSwapScript(Node scriptRoot, Node originalRoot) { NodeTraversal.traverse(compiler, scriptRoot, this); } @Override public Iterable<Var> getAllSymbols() { return referenceMap.keySet(); } @Override public Scope getScope(Var var) {"
      },
      {
        "txt": "return var.scope; } @Override public ReferenceCollection getReferences(Var v) { return referenceMap.get(v); } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (n.isName()) { Var v;"
      },
      {
        "txt": "if (n.getString().equals(\"arguments\")) { v = t.getScope().getArgumentsVar(); } else { v = t.getScope().getVar(n.getString()); } if (v != null && varFilter.apply(v)) { addReference(v, new Reference(n, t, blockStack.peek())); } } if (isBlockBoundary(n, parent)) {"
      },
      {
        "txt": "blockStack.pop(); } } @Override public void enterScope(NodeTraversal t) { Node n = t.getScope().getRootNode(); BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek(); blockStack.push(new BasicBlock(parent, n)); } @Override"
      },
      {
        "txt": "public void exitScope(NodeTraversal t) { blockStack.pop(); if (t.getScope().isGlobal()) { compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot()); behavior.afterExitScope(t, compiler.getGlobalVarReferences()); } else { behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap)); } } @Override"
      },
      {
        "txt": "public boolean shouldTraverse(NodeTraversal nodeTraversal, Node n, Node parent) { if (isBlockBoundary(n, parent)) { blockStack.push(new BasicBlock(blockStack.peek(), n)); } return true; } private static boolean isBlockBoundary(Node n, Node parent) { if (parent != null) { switch (parent.getType()) {"
      },
      {
        "txt": "case Token.DO: case Token.FOR: case Token.TRY: case Token.WHILE: case Token.WITH: return true; case Token.AND: case Token.HOOK: case Token.IF: case Token.OR:"
      },
      {
        "txt": "return n != parent.getFirstChild(); } } return n.isCase(); } private void addReference(Var v, Reference reference) { ReferenceCollection referenceInfo = referenceMap.get(v); if (referenceInfo == null) { referenceInfo = new ReferenceCollection(); referenceMap.put(v, referenceInfo);"
      },
      {
        "txt": "} referenceInfo.add(reference); } interface ReferenceMap { ReferenceCollection getReferences(Var var); } private static class ReferenceMapWrapper implements ReferenceMap { private final Map<Var, ReferenceCollection> referenceMap; public ReferenceMapWrapper(Map<Var, ReferenceCollection> referenceMap) { this.referenceMap = referenceMap;"
      },
      {
        "txt": "} @Override public ReferenceCollection getReferences(Var var) { return referenceMap.get(var); } } interface Behavior { void afterExitScope(NodeTraversal t, ReferenceMap referenceMap); } static final Behavior DO_NOTHING_BEHAVIOR = new Behavior() {"
      },
      {
        "txt": "@Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {} }; static class ReferenceCollection implements Iterable<Reference> { List<Reference> references = Lists.newArrayList(); @Override public Iterator<Reference> iterator() { return references.iterator(); } void add(Reference reference) {"
      },
      {
        "txt": "references.add(reference); } protected boolean isWellDefined() { int size = references.size(); if (size == 0) { return false; } Reference init = getInitializingReference(); if (init == null) { return false;"
      },
      {
        "txt": "} Preconditions.checkState(references.get(0).isDeclaration()); BasicBlock initBlock = init.getBasicBlock(); for (int i = 1; i < size; i++) { if (!initBlock.provablyExecutesBefore( references.get(i).getBasicBlock())) { return false; } } return true;"
      },
      {
        "txt": "} boolean isEscaped() { Scope scope = null; for (Reference ref : references) { if (scope == null) { scope = ref.scope; } else if (scope != ref.scope) { return true; } }"
      },
      {
        "txt": "return false; } private boolean isInitializingDeclarationAt(int index) { Reference maybeInit = references.get(index); if (maybeInit.isInitializingDeclaration()) { return true; } return false; } private boolean isInitializingAssignmentAt(int index) {"
      },
      {
        "txt": "if (index < references.size() && index > 0) { Reference maybeDecl = references.get(index - 1); if (maybeDecl.isVarDeclaration()) { Preconditions.checkState(!maybeDecl.isInitializingDeclaration()); Reference maybeInit = references.get(index); if (maybeInit.isSimpleAssignmentToName()) { return true; } } }"
      },
      {
        "txt": "return false; } Reference getInitializingReference() { if (isInitializingDeclarationAt(0)) { return references.get(0); } else if (isInitializingAssignmentAt(1)) { return references.get(1); } return null; }"
      },
      {
        "txt": "Reference getInitializingReferenceForConstants() { int size = references.size(); for (int i = 0; i < size; i++) { if (isInitializingDeclarationAt(i) || isInitializingAssignmentAt(i)) { return references.get(i); } } return null; } boolean isAssignedOnceInLifetime() {"
      },
      {
        "txt": "if (ref == null) { return false; } for (BasicBlock block = ref.getBasicBlock(); block != null; block = block.getParent()) { if (block.isFunction) { <extra_id_0> } else if (block.isLoop) { return false; } } return true; }"
      },
      {
        "txt": "return true; } private Reference getOneAndOnlyAssignment() { Reference assignment = null; int size = references.size(); for (int i = 0; i < size; i++) { Reference ref = references.get(i); if (ref.isLvalue() || ref.isInitializingDeclaration()) { if (assignment == null) { assignment = ref;"
      },
      {
        "txt": "} else { return null; } } } return assignment; } boolean isNeverAssigned() { int size = references.size(); for (int i = 0; i < size; i++) {"
      },
      {
        "txt": "Reference ref = references.get(i); if (ref.isLvalue() || ref.isInitializingDeclaration()) { return false; } } return true; } boolean firstReferenceIsAssigningDeclaration() { int size = references.size(); if (size > 0 && references.get(0).isInitializingDeclaration()) {"
      },
      {
        "txt": "return true; } return false; } } static final class Reference implements StaticReference<JSType> { private static final Set<Integer> DECLARATION_PARENTS = ImmutableSet.of(Token.VAR, Token.FUNCTION, Token.CATCH); private final Node nameNode; private final BasicBlock basicBlock;"
      },
      {
        "txt": "private final Scope scope; private final InputId inputId; private final StaticSourceFile sourceFile; Reference(Node nameNode, NodeTraversal t, BasicBlock basicBlock) { this(nameNode, basicBlock, t.getScope(), t.getInput().getInputId()); } static Reference newBleedingFunction(NodeTraversal t, BasicBlock basicBlock, Node func) { return new Reference(func.getFirstChild(),"
      },
      {
        "txt": "basicBlock, t.getScope(), t.getInput().getInputId()); } @VisibleForTesting static Reference createRefForTest(CompilerInput input) { return new Reference(new Node(Token.NAME), null, null, input.getInputId()); } private Reference(Node nameNode, BasicBlock basicBlock, Scope scope, InputId inputId) { this.nameNode = nameNode;"
      },
      {
        "txt": "this.basicBlock = basicBlock; this.scope = scope; this.inputId = inputId; this.sourceFile = nameNode.getStaticSourceFile(); } Reference cloneWithNewScope(Scope newScope) { return new Reference(nameNode, basicBlock, newScope, inputId); } @Override public Var getSymbol() {"
      },
      {
        "txt": "return scope.getVar(nameNode.getString()); } @Override public Node getNode() { return nameNode; } public InputId getInputId() { return inputId; } @Override"
      },
      {
        "txt": "public StaticSourceFile getSourceFile() { return sourceFile; } boolean isDeclaration() { Node parent = getParent(); Node grandparent = parent.getParent(); return DECLARATION_PARENTS.contains(parent.getType()) || parent.isParamList() && grandparent.isFunction(); }"
      },
      {
        "txt": "boolean isVarDeclaration() { return getParent().isVar(); } boolean isHoistedFunction() { return NodeUtil.isHoistedFunctionDeclaration(getParent()); } boolean isInitializingDeclaration() { return isDeclaration() && !getParent().isVar() || nameNode.getFirstChild() != null;"
      },
      {
        "txt": "} Node getAssignedValue() { Node parent = getParent(); return (parent.isFunction()) ? parent : NodeUtil.getAssignedValue(nameNode); } BasicBlock getBasicBlock() { return basicBlock; } Node getParent() {"
      },
      {
        "txt": "return getNode().getParent(); } Node getGrandparent() { Node parent = getParent(); return parent == null ? null : parent.getParent(); } private static boolean isLhsOfForInExpression(Node n) { Node parent = n.getParent(); if (parent.isVar()) { return isLhsOfForInExpression(parent);"
      },
      {
        "txt": "} return NodeUtil.isForIn(parent) && parent.getFirstChild() == n; } boolean isSimpleAssignmentToName() { Node parent = getParent(); return parent.isAssign() && parent.getFirstChild() == nameNode; } boolean isLvalue() { Node parent = getParent();"
      },
      {
        "txt": "int parentType = parent.getType(); return (parentType == Token.VAR && nameNode.getFirstChild() != null) || parentType == Token.INC || parentType == Token.DEC || (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == nameNode) || isLhsOfForInExpression(nameNode); } Scope getScope() { return scope;"
      },
      {
        "txt": "} } static final class BasicBlock { private final BasicBlock parent; private final boolean isHoisted; private final boolean isFunction; private final boolean isLoop; BasicBlock(BasicBlock parent, Node root) { this.parent = parent; this.isHoisted = NodeUtil.isHoistedFunctionDeclaration(root);"
      },
      {
        "txt": "this.isFunction = root.isFunction(); if (root.getParent() != null) { int pType = root.getParent().getType(); this.isLoop = pType == Token.DO || pType == Token.WHILE || pType == Token.FOR; } else { this.isLoop = false; } }"
      },
      {
        "txt": "BasicBlock getParent() { return parent; } boolean isGlobalScopeBlock() { return getParent() == null; } boolean provablyExecutesBefore(BasicBlock thatBlock) { BasicBlock currentBlock; for (currentBlock = thatBlock; currentBlock != null && currentBlock != this;"
      },
      {
        "txt": "currentBlock = currentBlock.getParent()) { if (currentBlock.isHoisted) { return false; } } if (currentBlock == this) { return true; } if (isGlobalScopeBlock() && thatBlock.isGlobalScopeBlock()) { return true;"
      },
      {
        "txt": "} return false; } }"
      }
    ]
  }
]
[
  {
    "id": 402,
    "file_path": "src/com/google/javascript/jscomp/CollapseProperties.java",
    "start-bug-line": 484,
    "end-bug-line": 484,
    "bug": "",
    "fix": "if (rvalue != null && rvalue.getType() == Token.FUNCTION) { checkForHosedThisReferences(rvalue, refName.docInfo, refName); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Predicates; import com.google.common.collect.Lists; import com.google.common.collect.Sets; import com.google.javascript.jscomp.GlobalNamespace.Name;"
      },
      {
        "txt": "import com.google.javascript.jscomp.GlobalNamespace.Ref; import com.google.javascript.jscomp.GlobalNamespace.Ref.Type; import com.google.javascript.jscomp.ReferenceCollectingCallback; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.Scope; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream;"
      },
      {
        "txt": "import java.util.ArrayDeque; import java.util.Deque; import java.util.List; import java.util.Map; import java.util.Set; class CollapseProperties implements CompilerPass { static final DiagnosticType UNSAFE_NAMESPACE_WARNING = DiagnosticType.warning( \"JSC_UNSAFE_NAMESPACE\", \"incomplete alias created for namespace {0}\");"
      },
      {
        "txt": "static final DiagnosticType NAMESPACE_REDEFINED_WARNING = DiagnosticType.warning( \"JSC_NAMESPACE_REDEFINED\", \"namespace {0} should not be redefined\"); static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning( \"JSC_UNSAFE_THIS\", \"dangerous use of 'this' in static method {0}\"); private AbstractCompiler compiler; private List<Name> globalNames; private Map<String, Name> nameMap;"
      },
      {
        "txt": "private final boolean collapsePropertiesOnExternTypes; private final boolean inlineAliases; CollapseProperties(AbstractCompiler compiler, boolean collapsePropertiesOnExternTypes, boolean inlineAliases) { this.compiler = compiler; this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes; this.inlineAliases = inlineAliases; } @Override public void process(Node externs, Node root) {"
      },
      {
        "txt": "GlobalNamespace namespace; if (collapsePropertiesOnExternTypes) { namespace = new GlobalNamespace(compiler, externs, root); } else { namespace = new GlobalNamespace(compiler, root); } if (inlineAliases) { inlineAliases(namespace); } nameMap = namespace.getNameIndex();"
      },
      {
        "txt": "globalNames = namespace.getNameForest(); checkNamespaces(); for (Name n : globalNames) { flattenReferencesToCollapsibleDescendantNames(n, n.name); } for (Name n : globalNames) { collapseDeclarationOfNameAndDescendants(n, n.name); } } private void inlineAliases(GlobalNamespace namespace) {"
      },
      {
        "txt": "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest()); while (!workList.isEmpty()) { Name name = workList.pop(); if (name.globalSets == 1 && name.localSets == 0 && name.aliasingGets > 0) { List<Ref> refs = Lists.newArrayList(name.refs); for (Ref ref : refs) { if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) { if (inlineAliasIfPossible(ref, namespace)) { name.removeRef(ref);"
      },
      {
        "txt": "} } } } if ((name.type == Name.Type.OBJECTLIT || name.type == Name.Type.FUNCTION) && name.aliasingGets == 0 && name.props != null) { workList.addAll(name.props); } }"
      },
      {
        "txt": "} private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace) { Node aliasParent = alias.node.getParent(); if (aliasParent.getType() == Token.NAME) { Scope scope = alias.scope; Var aliasVar = scope.getVar(aliasParent.getString()); ReferenceCollectingCallback collector = new ReferenceCollectingCallback(compiler, ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR, Predicates.<Var>equalTo(aliasVar));"
      },
      {
        "txt": "(new NodeTraversal(compiler, collector)).traverseAtScope(scope); ReferenceCollection aliasRefs = collector.getReferenceCollection(aliasVar); if (aliasRefs.isWellDefined() && aliasRefs.firstReferenceIsAssigningDeclaration() && aliasRefs.isAssignedOnceInLifetime()) { int size = aliasRefs.references.size(); Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1); for (int i = 1; i < size; i++) { ReferenceCollectingCallback.Reference aliasRef ="
      },
      {
        "txt": "aliasRefs.references.get(i); Node newNode = alias.node.cloneTree(); aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode); newNodes.add(newNode); } aliasParent.replaceChild(alias.node, new Node(Token.NULL)); compiler.reportCodeChange(); namespace.scanNewNodes(alias.scope, newNodes); return true; }"
      },
      {
        "txt": "} return false; } private void checkNamespaces() { for (Name name : nameMap.values()) { if (name.isNamespace() && name.refs != null && (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) { boolean initialized = name.declaration != null; for (Ref ref : name.refs) { if (ref.type == Ref.Type.SET_FROM_GLOBAL ||"
      },
      {
        "txt": "ref.type == Ref.Type.SET_FROM_LOCAL) { if (initialized) { warnAboutNamespaceRedefinition(name, ref); } initialized = true; } else if (ref.type == Ref.Type.ALIASING_GET) { warnAboutNamespaceAliasing(name, ref); } } }"
      },
      {
        "txt": "} } private void warnAboutNamespaceAliasing(Name nameObj, Ref ref) { compiler.report( JSError.make(ref.sourceName, ref.node, UNSAFE_NAMESPACE_WARNING, nameObj.fullName())); } private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref) { compiler.report( JSError.make(ref.sourceName, ref.node,"
      },
      {
        "txt": "NAMESPACE_REDEFINED_WARNING, nameObj.fullName())); } private void flattenReferencesToCollapsibleDescendantNames( Name n, String alias) { if (n.props == null) return; for (Name p : n.props) { String propAlias = appendPropForAlias(alias, p.name); if (p.canCollapse()) { flattenReferencesTo(p, propAlias); }"
      },
      {
        "txt": "flattenReferencesToCollapsibleDescendantNames(p, propAlias); } } private void flattenReferencesTo(Name n, String alias) { if (n.refs != null) { String originalName = n.fullName(); for (Ref r : n.refs) { Node rParent = r.node.getParent(); if (!NodeUtil.isObjectLitKey(r.node, rParent) && (r.getTwin() == null || r.isSet())) {"
      },
      {
        "txt": "flattenNameRef(alias, r.node, rParent, originalName); } } } if (n.props != null) { for (Name p : n.props) { flattenPrefixes(alias, p, 1); } } }"
      },
      {
        "txt": "private void flattenPrefixes(String alias, Name n, int depth) { String originalName = n.fullName(); if (n.declaration != null && n.declaration.node != null && n.declaration.node.getType() == Token.GETPROP) { flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName); } if (n.refs != null) { for (Ref r : n.refs) { if (r.getTwin() == null || r.isSet()) { flattenNameRefAtDepth(alias, r.node, depth, originalName);"
      },
      {
        "txt": "} } } if (n.props != null) { for (Name p : n.props) { flattenPrefixes(alias, p, depth + 1); } } } private void flattenNameRefAtDepth(String alias, Node n, int depth,"
      },
      {
        "txt": "String originalName) { int nType = n.getType(); boolean isQName = nType == Token.NAME || nType == Token.GETPROP; boolean isObjKey = nType == Token.STRING || nType == Token.NUMBER; Preconditions.checkState(isObjKey || isQName); if (isQName) { for (int i = 1; i < depth && n.hasChildren(); i++) { n = n.getFirstChild(); } if (n.hasChildren()) {"
      },
      {
        "txt": "flattenNameRef(alias, n.getFirstChild(), n, originalName); } } } private void flattenNameRef(String alias, Node n, Node parent, String originalName) { Node ref = NodeUtil.newName( compiler.getCodingConvention(), alias, n, originalName); NodeUtil.copyNameAnnotations(n.getLastChild(), ref); parent.replaceChild(n, ref);"
      },
      {
        "txt": "compiler.reportCodeChange(); } private void collapseDeclarationOfNameAndDescendants(Name n, String alias) { boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames(); if (n.canCollapse() && canCollapseChildNames) { updateObjLitOrFunctionDeclaration(n, alias); } if (n.props != null) { for (Name p : n.props) { collapseDeclarationOfNameAndDescendants("
      },
      {
        "txt": "p, appendPropForAlias(alias, p.name)); if (!p.inExterns && canCollapseChildNames && p.declaration != null && p.declaration.node != null && p.declaration.node.getParent() != null && p.declaration.node.getParent().getType() == Token.ASSIGN) { updateSimpleDeclaration( appendPropForAlias(alias, p.name), p, p.declaration); } } }"
      },
      {
        "txt": "private void updateSimpleDeclaration(String alias, Name refName, Ref ref) { Node rvalue = ref.node.getNext(); Node parent = ref.node.getParent(); Node gramps = parent.getParent(); Node greatGramps = gramps.getParent(); Node greatGreatGramps = greatGramps.getParent(); <extra_id_0> Node nameNode = NodeUtil.newName( compiler.getCodingConvention(), alias, gramps.getFirstChild(), refName.fullName()); NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode); if (gramps.getType() == Token.EXPR_RESULT) { parent.removeChild(rvalue);"
      },
      {
        "txt": "if (gramps.getType() == Token.EXPR_RESULT) { parent.removeChild(rvalue); nameNode.addChildToFront(rvalue); Node varNode = new Node(Token.VAR, nameNode); greatGramps.replaceChild(gramps, varNode); } else { Preconditions.checkNotNull(ref.getTwin()); Node current = gramps; Node currentParent = gramps.getParent(); for (; currentParent.getType() != Token.SCRIPT &&"
      },
      {
        "txt": "currentParent.getType() != Token.BLOCK; current = currentParent, currentParent = currentParent.getParent()) {} Node stubVar = new Node(Token.VAR, nameNode.cloneTree()) .copyInformationFrom(nameNode); currentParent.addChildBefore(stubVar, current); parent.replaceChild(ref.node, nameNode); } compiler.reportCodeChange(); }"
      },
      {
        "txt": "private void updateObjLitOrFunctionDeclaration(Name n, String alias) { switch (n.declaration.node.getParent().getType()) { case Token.ASSIGN: updateObjLitOrFunctionDeclarationAtAssignNode(n, alias); break; case Token.VAR: updateObjLitOrFunctionDeclarationAtVarNode(n); break; case Token.FUNCTION: updateFunctionDeclarationAtFunctionNode(n);"
      },
      {
        "txt": "break; } } private void updateObjLitOrFunctionDeclarationAtAssignNode( Name n, String alias) { Ref ref = n.declaration; Node rvalue = ref.node.getNext(); Node varNode = new Node(Token.VAR); Node varParent = ref.node.getAncestor(3); Node gramps = ref.node.getAncestor(2);"
      },
      {
        "txt": "boolean isObjLit = rvalue.getType() == Token.OBJECTLIT; if (isObjLit && n.canEliminate()) { varParent.replaceChild(gramps, varNode); ref.node = null; } else { if (rvalue.getType() == Token.FUNCTION) { checkForHosedThisReferences(rvalue, n.docInfo, n); } ref.node.getParent().removeChild(rvalue); Node nameNode = NodeUtil.newName("
      },
      {
        "txt": "compiler.getCodingConvention(), alias, ref.node.getAncestor(2), n.fullName()); if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } varNode.addChildToBack(nameNode); nameNode.addChildToFront(rvalue); varParent.replaceChild(gramps, varNode); ref.node = nameNode; }"
      },
      {
        "txt": "if (isObjLit) { declareVarsForObjLitValues( n, alias, rvalue, varNode, varParent.getChildBefore(varNode), varParent); } addStubsForUndeclaredProperties(n, alias, varParent, varNode); if (!varNode.hasChildren()) { varParent.removeChild(varNode); } compiler.reportCodeChange();"
      },
      {
        "txt": "} private void checkForHosedThisReferences(Node function, JSDocInfo docInfo, final Name name) { if (docInfo == null || (!docInfo.isConstructor() && !docInfo.hasThisType())) { NodeTraversal.traverse(compiler, function.getLastChild(), new NodeTraversal.AbstractShallowCallback() { public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.THIS) { compiler.report("
      },
      {
        "txt": "JSError.make(name.declaration.sourceName, n, UNSAFE_THIS, name.fullName())); } } }); } } private void updateObjLitOrFunctionDeclarationAtVarNode(Name n) { Ref ref = n.declaration; String name = ref.node.getString();"
      },
      {
        "txt": "Node rvalue = ref.node.getFirstChild(); Node varNode = ref.node.getParent(); Node gramps = varNode.getParent(); boolean isObjLit = rvalue.getType() == Token.OBJECTLIT; int numChanges = 0; if (isObjLit) { numChanges += declareVarsForObjLitValues( n, name, rvalue, varNode, gramps.getChildBefore(varNode), gramps); }"
      },
      {
        "txt": "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode); if (isObjLit && n.canEliminate()) { varNode.removeChild(ref.node); if (!varNode.hasChildren()) { gramps.removeChild(varNode); } numChanges++; ref.node = null; } if (numChanges > 0) {"
      },
      {
        "txt": "compiler.reportCodeChange(); } } private void updateFunctionDeclarationAtFunctionNode(Name n) { Ref ref = n.declaration; String fnName = ref.node.getString(); addStubsForUndeclaredProperties( n, fnName, ref.node.getAncestor(2), ref.node.getParent()); } private int declareVarsForObjLitValues("
      },
      {
        "txt": "Name objlitName, String alias, Node objlit, Node varNode, Node nameToAddAfter, Node varParent) { int numVars = 0; int arbitraryNameCounter = 0; boolean discardKeys = !objlitName.shouldKeepKeys(); for (Node key = objlit.getFirstChild(), nextKey; key != null; key = nextKey) { Node value = key.getFirstChild(); nextKey = key.getNext(); boolean isJsIdentifier = key.getType() != Token.NUMBER &&"
      },
      {
        "txt": "TokenStream.isJSIdentifier(key.getString()); String propName = isJsIdentifier ? key.getString() : String.valueOf(++arbitraryNameCounter); String propAlias = appendPropForAlias(alias, propName); String qName = objlitName.fullName() + '.' + propName; Node refNode = null; if (discardKeys) { objlit.removeChild(key); value.detachFromParent(); } else {"
      },
      {
        "txt": "refNode = Node.newString(Token.NAME, propAlias); if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) { refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } key.replaceChild(value, refNode); } Node nameNode = Node.newString(Token.NAME, propAlias); nameNode.addChildToFront(value); if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);"
      },
      {
        "txt": "} Node newVar = new Node(Token.VAR, nameNode) .copyInformationFromForTree(key); if (nameToAddAfter != null) { varParent.addChildAfter(newVar, nameToAddAfter); } else { varParent.addChildBefore(newVar, varNode); } compiler.reportCodeChange(); nameToAddAfter = newVar;"
      },
      {
        "txt": "if (isJsIdentifier) { Name p = nameMap.get(qName); if (p != null) { if (!discardKeys) { Ref newAlias = p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET); newAlias.node = refNode; p.addRef(newAlias); } p.declaration.node = nameNode;"
      },
      {
        "txt": "if (value.getType() == Token.FUNCTION) { checkForHosedThisReferences(value, value.getJSDocInfo(), p); } } } numVars++; } return numVars; } private int addStubsForUndeclaredProperties("
      },
      {
        "txt": "Name n, String alias, Node parent, Node addAfter) { Preconditions.checkArgument(NodeUtil.isStatementBlock(parent)); Preconditions.checkNotNull(addAfter); int numStubs = 0; if (n.props != null) { for (Name p : n.props) { if (p.needsToBeStubbed()) { String propAlias = appendPropForAlias(alias, p.name); Node nameNode = Node.newString(Token.NAME, propAlias); Node newVar = new Node(Token.VAR, nameNode)"
      },
      {
        "txt": ".copyInformationFromForTree(addAfter); parent.addChildAfter(newVar, addAfter); addAfter = newVar; numStubs++; compiler.reportCodeChange(); if (p.refs.get(0).node.getLastChild().getBooleanProp( Node.IS_CONSTANT_NAME)) { nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true); } }"
      },
      {
        "txt": "} } return numStubs; } private static String appendPropForAlias(String root, String prop) { if (prop.indexOf('$') != -1) { prop = prop.replaceAll(\"\\\\$\", \"\\\\$0\"); } return root + '$' + prop; }"
      }
    ]
  },
  {
    "id": 403,
    "file_path": "src/com/google/javascript/jscomp/GlobalNamespace.java",
    "start-bug-line": 920,
    "end-bug-line": 920,
    "bug": "if (type != Type.FUNCTION && aliasingGets > 0) {",
    "fix": "if (aliasingGets > 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Predicate; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.LinkedList; import java.util.List; import java.util.Map; import java.util.Set; class GlobalNamespace { private AbstractCompiler compiler; private final Node root; private final Node externsRoot; private boolean inExterns;"
      },
      {
        "txt": "private Scope externsScope; private boolean generated = false; private List<Name> globalNames = new ArrayList<Name>(); private Map<String, Name> nameMap = new HashMap<String, Name>(); GlobalNamespace(AbstractCompiler compiler, Node root) { this(compiler, null, root); } GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) { this.compiler = compiler; this.externsRoot = externsRoot;"
      },
      {
        "txt": "this.root = root; } List<Name> getNameForest() { if (!generated) { process(); } return globalNames; } Map<String, Name> getNameIndex() { if (!generated) {"
      },
      {
        "txt": "process(); } return nameMap; } void scanNewNodes(Scope scope, Set<Node> newNodes) { NodeTraversal t = new NodeTraversal(compiler, new BuildGlobalNamespace(new NodeFilter(newNodes))); t.traverseAtScope(scope); } private static class NodeFilter implements Predicate<Node> {"
      },
      {
        "txt": "private final Set<Node> newNodes; NodeFilter(Set<Node> newNodes) { this.newNodes = newNodes; } public boolean apply(Node n) { if (!n.isQualifiedName()) { return false; } Node current; for (current = n;"
      },
      {
        "txt": "current.getType() == Token.GETPROP; current = current.getFirstChild()) { if (newNodes.contains(current)) { return true; } } return current.getType() == Token.NAME && newNodes.contains(current); } } private void process() {"
      },
      {
        "txt": "if (externsRoot != null) { inExterns = true; NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace()); } inExterns = false; NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace()); generated = true; } private boolean isGlobalNameReference(String name, Scope s) { String topVarName = getTopVarName(name);"
      },
      {
        "txt": "return isGlobalVarReference(topVarName, s); } private String getTopVarName(String name) { int firstDotIndex = name.indexOf('.'); return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex); } private boolean isGlobalVarReference(String name, Scope s) { Scope.Var v = s.getVar(name); if (v == null && externsScope != null) { v = externsScope.getVar(name);"
      },
      {
        "txt": "} return v != null && !v.isLocal(); } private boolean isGlobalScope(Scope s) { return s.getParent() == null; } private class BuildGlobalNamespace extends AbstractPostOrderCallback { private final Predicate<Node> nodeFilter; BuildGlobalNamespace() { this(null);"
      },
      {
        "txt": "} BuildGlobalNamespace(Predicate<Node> nodeFilter) { this.nodeFilter = nodeFilter; } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (nodeFilter != null && !nodeFilter.apply(n)) { return; } if (externsRoot != null && n == externsRoot) {"
      },
      {
        "txt": "externsScope = t.getScope(); } String name; boolean isSet = false; Name.Type type = Name.Type.OTHER; boolean isPropAssign = false; switch (n.getType()) { case Token.STRING: name = null; if (parent != null && parent.getType() == Token.OBJECTLIT) {"
      },
      {
        "txt": "name = getNameForObjLitKey(n); } if (name == null) return; isSet = true; type = getValueType(n.getFirstChild()); break; case Token.NAME: if (parent != null) { switch (parent.getType()) { case Token.VAR:"
      },
      {
        "txt": "isSet = true; Node rvalue = n.getFirstChild(); type = rvalue == null ? Name.Type.OTHER : getValueType(rvalue); break; case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext()); } break;"
      },
      {
        "txt": "case Token.GETPROP: return; case Token.FUNCTION: Node gramps = parent.getParent(); if (gramps == null || NodeUtil.isFunctionExpression(parent)) return; isSet = true; type = Name.Type.FUNCTION; break; }"
      },
      {
        "txt": "} name = n.getString(); break; case Token.GETPROP: if (parent != null) { switch (parent.getType()) { case Token.ASSIGN: if (parent.getFirstChild() == n) { isSet = true; type = getValueType(n.getNext());"
      },
      {
        "txt": "isPropAssign = true; } break; case Token.GETPROP: return; } } name = n.getQualifiedName(); if (name == null) return; break;"
      },
      {
        "txt": "default: return; } Scope scope = t.getScope(); if (!isGlobalNameReference(name, scope)) { return; } if (isSet) { if (isGlobalScope(scope)) { handleSetFromGlobal(t, n, parent, name, isPropAssign, type);"
      },
      {
        "txt": "} else { handleSetFromLocal(t, n, parent, name); } } else { handleGet(t, n, parent, name); } } String getNameForObjLitKey(Node n) { Node parent = n.getParent(); Preconditions.checkState(parent.getType() == Token.OBJECTLIT);"
      },
      {
        "txt": "Node gramps = parent.getParent(); if (gramps == null) { return null; } Node greatGramps = gramps.getParent(); String name; switch (gramps.getType()) { case Token.NAME: if (greatGramps == null || greatGramps.getType() != Token.VAR) {"
      },
      {
        "txt": "return null; } name = gramps.getString(); break; case Token.ASSIGN: Node lvalue = gramps.getFirstChild(); name = lvalue.getQualifiedName(); break; case Token.STRING: if (greatGramps != null &&"
      },
      {
        "txt": "greatGramps.getType() == Token.OBJECTLIT) { name = getNameForObjLitKey(gramps); } else { return null; } break; default: return null; } if (name != null) {"
      },
      {
        "txt": "String key = n.getString(); if (TokenStream.isJSIdentifier(key)) { return name + '.' + key; } } return null; } Name.Type getValueType(Node n) { switch (n.getType()) { case Token.OBJECTLIT:"
      },
      {
        "txt": "return Name.Type.OBJECTLIT; case Token.FUNCTION: return Name.Type.FUNCTION; case Token.OR: return getValueType(n.getLastChild()); case Token.HOOK: Node second = n.getFirstChild().getNext(); Name.Type t = getValueType(second); if (t != Name.Type.OTHER) return t; Node third = second.getNext();"
      },
      {
        "txt": "return getValueType(third); } return Name.Type.OTHER; } void handleSetFromGlobal(NodeTraversal t, Node n, Node parent, String name, boolean isPropAssign, Name.Type type) { if (maybeHandlePrototypePrefix(t, n, parent, name)) return; Name nameObj = getOrCreateName(name); nameObj.type = type; Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL);"
      },
      {
        "txt": "nameObj.addRef(set); if (isNestedAssign(parent)) { Ref get = new Ref(t, n, Ref.Type.ALIASING_GET); nameObj.addRef(get); Ref.markTwins(set, get); } else if (isConstructorOrEnumDeclaration(n, parent)) { nameObj.setIsClassOrEnum(); } } private boolean isConstructorOrEnumDeclaration(Node n, Node parent) {"
      },
      {
        "txt": "JSDocInfo info; int valueNodeType; switch (parent.getType()) { case Token.ASSIGN: info = parent.getJSDocInfo(); valueNodeType = n.getNext().getType(); break; case Token.VAR: info = n.getJSDocInfo(); if (info == null) {"
      },
      {
        "txt": "info = parent.getJSDocInfo(); } Node valueNode = n.getFirstChild(); valueNodeType = valueNode != null ? valueNode.getType() : Token.VOID; break; default: return false; } return info != null && (info.isConstructor() && valueNodeType == Token.FUNCTION ||"
      },
      {
        "txt": "info.hasEnumParameterType() && valueNodeType == Token.OBJECTLIT); } void handleSetFromLocal(NodeTraversal t, Node n, Node parent, String name) { if (maybeHandlePrototypePrefix(t, n, parent, name)) return; Name node = getOrCreateName(name); Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL); node.addRef(set); if (isNestedAssign(parent)) { Ref get = new Ref(t, n, Ref.Type.ALIASING_GET);"
      },
      {
        "txt": "node.addRef(get); Ref.markTwins(set, get); } } void handleGet(NodeTraversal t, Node n, Node parent, String name) { if (maybeHandlePrototypePrefix(t, n, parent, name)) return; Ref.Type type = Ref.Type.DIRECT_GET; if (parent != null) { switch (parent.getType()) { case Token.IF:"
      },
      {
        "txt": "case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: case Token.NEG: break; case Token.CALL: type = n == parent.getFirstChild() ? Ref.Type.CALL_GET"
      },
      {
        "txt": ": Ref.Type.ALIASING_GET; break; case Token.NEW: type = n == parent.getFirstChild() ? Ref.Type.DIRECT_GET : Ref.Type.ALIASING_GET; break; case Token.OR: case Token.AND: type = determineGetTypeForHookOrBooleanExpr(t, parent, name);"
      },
      {
        "txt": "break; case Token.HOOK: if (n != parent.getFirstChild()) { type = determineGetTypeForHookOrBooleanExpr(t, parent, name); } break; default: type = Ref.Type.ALIASING_GET; break; }"
      },
      {
        "txt": "} handleGet(t, n, parent, name, type); } Ref.Type determineGetTypeForHookOrBooleanExpr( NodeTraversal t, Node parent, String name) { Node prev = parent; for (Node anc : parent.getAncestors()) { switch (anc.getType()) { case Token.EXPR_RESULT: case Token.VAR:"
      },
      {
        "txt": "case Token.IF: case Token.WHILE: case Token.FOR: case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS: case Token.NEG: return Ref.Type.DIRECT_GET;"
      },
      {
        "txt": "case Token.HOOK: if (anc.getFirstChild() == prev) { return Ref.Type.DIRECT_GET; } break; case Token.ASSIGN: if (!name.equals(anc.getFirstChild().getQualifiedName())) { return Ref.Type.ALIASING_GET; } break;"
      },
      {
        "txt": "case Token.NAME: // a variable declaration if (!name.equals(anc.getString())) { return Ref.Type.ALIASING_GET; } break; case Token.CALL: if (anc.getFirstChild() != prev) { return Ref.Type.ALIASING_GET; } break;"
      },
      {
        "txt": "} prev = anc; } return Ref.Type.ALIASING_GET; } void handleGet(NodeTraversal t, Node n, Node parent, String name, Ref.Type type) { Name node = getOrCreateName(name); node.addRef(new Ref(t, n, type)); }"
      },
      {
        "txt": "boolean maybeHandlePrototypePrefix(NodeTraversal t, Node n, Node parent, String name) { int numLevelsToRemove; String prefix; if (name.endsWith(\".prototype\")) { numLevelsToRemove = 1; prefix = name.substring(0, name.length() - 10); } else { int i = name.indexOf(\".prototype.\"); if (i == -1) {"
      },
      {
        "txt": "return false; } prefix = name.substring(0, i); numLevelsToRemove = 2; i = name.indexOf('.', i + 11); while (i >= 0) { numLevelsToRemove++; i = name.indexOf('.', i + 1); } }"
      },
      {
        "txt": "if (parent != null && NodeUtil.isObjectLitKey(n, parent)) { return true; } for (int i = 0; i < numLevelsToRemove; i++) { parent = n; n = n.getFirstChild(); } handleGet(t, n, parent, prefix, Ref.Type.PROTOTYPE_GET); return true; }"
      },
      {
        "txt": "boolean isNestedAssign(Node parent) { return parent.getType() == Token.ASSIGN && !NodeUtil.isExpressionNode(parent.getParent()); } Name getOrCreateName(String name) { Name node = nameMap.get(name); if (node == null) { int i = name.lastIndexOf('.'); if (i >= 0) { String parentName = name.substring(0, i);"
      },
      {
        "txt": "Name parent = getOrCreateName(parentName); node = parent.addProperty(name.substring(i + 1), inExterns); } else { node = new Name(name, null, inExterns); globalNames.add(node); } nameMap.put(name, node); } return node; }"
      },
      {
        "txt": "} static class Name { enum Type { OBJECTLIT, FUNCTION, OTHER, } final String name; final Name parent; List<Name> props;"
      },
      {
        "txt": "Ref declaration; List<Ref> refs; Type type; private boolean isClassOrEnum = false; private boolean hasClassOrEnumDescendant = false; int globalSets = 0; int localSets = 0; int aliasingGets = 0; int totalGets = 0; int callGets = 0;"
      },
      {
        "txt": "boolean inExterns; JSDocInfo docInfo = null; Name(String name, Name parent, boolean inExterns) { this.name = name; this.parent = parent; this.type = Type.OTHER; this.inExterns = inExterns; } Name addProperty(String name, boolean inExterns) { if (props == null) {"
      },
      {
        "txt": "props = new ArrayList<Name>(); } Name node = new Name(name, this, inExterns); props.add(node); return node; } void addRef(Ref ref) { switch (ref.type) { case SET_FROM_GLOBAL: if (declaration == null) {"
      },
      {
        "txt": "declaration = ref; docInfo = getDocInfoForDeclaration(ref); } else { addRefInternal(ref); } globalSets++; break; case SET_FROM_LOCAL: addRefInternal(ref); localSets++;"
      },
      {
        "txt": "break; case PROTOTYPE_GET: case DIRECT_GET: addRefInternal(ref); totalGets++; break; case ALIASING_GET: addRefInternal(ref); aliasingGets++; totalGets++;"
      },
      {
        "txt": "break; case CALL_GET: addRefInternal(ref); callGets++; totalGets++; break; default: throw new IllegalStateException(); } }"
      },
      {
        "txt": "void removeRef(Ref ref) { if (ref == declaration || (refs != null && refs.remove(ref))) { if (ref == declaration) { declaration = null; if (refs != null) { for (Ref maybeNewDecl : refs) { if (maybeNewDecl.type == Ref.Type.SET_FROM_GLOBAL) { declaration = maybeNewDecl; refs.remove(declaration);"
      },
      {
        "txt": "break; } } } } switch (ref.type) { case SET_FROM_GLOBAL: globalSets--; break; case SET_FROM_LOCAL:"
      },
      {
        "txt": "localSets--; break; case PROTOTYPE_GET: case DIRECT_GET: totalGets--; break; case ALIASING_GET: aliasingGets--; totalGets--; break;"
      },
      {
        "txt": "case CALL_GET: callGets--; totalGets--; break; default: throw new IllegalStateException(); } } } void addRefInternal(Ref ref) {"
      },
      {
        "txt": "if (refs == null) { refs = new LinkedList<Ref>(); } refs.add(ref); } boolean canEliminate() { if (!canCollapseUnannotatedChildNames() || totalGets > 0) { return false; } if (props != null) {"
      },
      {
        "txt": "for (Name n : props) { if (!n.canCollapse()) { return false; } } } return true; } boolean canCollapse() { return !inExterns && (isClassOrEnum ||"
      },
      {
        "txt": "(parent == null || parent.canCollapseUnannotatedChildNames()) && (globalSets > 0 || localSets > 0)); } boolean canCollapseUnannotatedChildNames() { if (type == Type.OTHER || globalSets != 1 || localSets != 0) { return false; } Preconditions.checkNotNull(declaration); if (declaration.getTwin() != null) { return false;"
      },
      {
        "txt": "if (isClassOrEnum) { return true; } if (parent != null && parent.shouldKeepKeys()) { return false; } <extra_id_0> return false; } return (parent == null || parent.canCollapseUnannotatedChildNames()); } boolean shouldKeepKeys() { return type == Type.OBJECTLIT && aliasingGets > 0;"
      },
      {
        "txt": "boolean shouldKeepKeys() { return type == Type.OBJECTLIT && aliasingGets > 0; } boolean needsToBeStubbed() { return globalSets == 0 && localSets > 0; } void setIsClassOrEnum() { isClassOrEnum = true; for (Name ancestor = parent; ancestor != null; ancestor = ancestor.parent) {"
      },
      {
        "txt": "ancestor.hasClassOrEnumDescendant = true; } } boolean isNamespace() { return hasClassOrEnumDescendant && type == Type.OBJECTLIT; } boolean isSimpleName() { return parent == null; } @Override public String toString() {"
      },
      {
        "txt": "return fullName() + \" (\" + type + \"): globalSets=\" + globalSets + \", localSets=\" + localSets + \", totalGets=\" + totalGets + \", aliasingGets=\" + aliasingGets + \", callGets=\" + callGets; } String fullName() { return parent == null ? name : parent.fullName() + '.' + name; } private static JSDocInfo getDocInfoForDeclaration(Ref ref) { if (ref.node != null) { Node refParent = ref.node.getParent();"
      },
      {
        "txt": "switch (refParent.getType()) { case Token.FUNCTION: case Token.ASSIGN: return refParent.getJSDocInfo(); case Token.VAR: return ref.node == refParent.getFirstChild() ? refParent.getJSDocInfo() : ref.node.getJSDocInfo(); } } return null;"
      },
      {
        "txt": "} } static class Ref { enum Type { SET_FROM_GLOBAL, SET_FROM_LOCAL, PROTOTYPE_GET, ALIASING_GET, // Prevents a name's properties from being collapsed DIRECT_GET, // Prevents a name from being completely eliminated CALL_GET, // Prevents a name from being collapsed if never set"
      },
      {
        "txt": "} Node node; final Type type; final String sourceName; final Scope scope; final JSModule module; private Ref twin = null; Ref(NodeTraversal t, Node name, Type type) { this.node = name; this.sourceName = t.getSourceName();"
      },
      {
        "txt": "this.type = type; this.scope = t.getScope(); this.module = t.getModule(); } private Ref(Ref original, Type type) { this.node = original.node; this.sourceName = original.sourceName; this.type = type; this.scope = original.scope; this.module = original.module;"
      },
      {
        "txt": "} private Ref(Type type) { this.type = type; this.sourceName = \"source\"; this.scope = null; this.module = null; } Ref getTwin() { return twin; }"
      },
      {
        "txt": "boolean isSet() { return type == Type.SET_FROM_GLOBAL || type == Type.SET_FROM_LOCAL; } static void markTwins(Ref a, Ref b) { Preconditions.checkArgument( (a.type == Type.ALIASING_GET || b.type == Type.ALIASING_GET) && (a.type == Type.SET_FROM_GLOBAL || a.type == Type.SET_FROM_LOCAL || b.type == Type.SET_FROM_GLOBAL || b.type == Type.SET_FROM_LOCAL)); a.twin = b; b.twin = a;"
      },
      {
        "txt": "} Ref cloneAndReclassify(Type type) { return new Ref(this, type); } static Ref createRefForTesting(Type type) { return new Ref(type); } }"
      }
    ]
  }
]
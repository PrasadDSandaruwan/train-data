[
  {
    "id": 540,
    "file_path": "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
    "start-bug-line": 208,
    "end-bug-line": 208,
    "bug": "if (paramType != null) {",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.Token.CALL;"
      },
      {
        "txt": "import static com.google.javascript.rhino.Token.GETPROP; import static com.google.javascript.rhino.Token.NAME; import static com.google.javascript.rhino.Token.STRING; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE; import com.google.common.base.Function; import com.google.common.collect.ImmutableMap; import com.google.javascript.rhino.jstype.JSType;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.ObjectType; import com.google.javascript.rhino.jstype.Visitor; import com.google.javascript.rhino.Node; import java.util.Map; class ClosureReverseAbstractInterpreter extends ChainableReverseAbstractInterpreter { private final Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor() {"
      },
      {
        "txt": "@Override protected JSType caseTopType(JSType topType) { return topType; } @Override public JSType caseObjectType(ObjectType type) { JSType arrayType = getNativeType(ARRAY_TYPE); return arrayType.isSubtype(type) ? arrayType : null; } };"
      },
      {
        "txt": "private final Visitor<JSType> restrictToNotArrayVisitor = new RestrictByFalseTypeOfResultVisitor() { @Override public JSType caseObjectType(ObjectType type) { return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type; } }; private final Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor() { @Override"
      },
      {
        "txt": "protected JSType caseTopType(JSType topType) { return getNativeType(NO_OBJECT_TYPE); } @Override public JSType caseObjectType(ObjectType type) { return type; } @Override public JSType caseFunctionType(FunctionType type) { return type;"
      },
      {
        "txt": "} }; private final Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor() { @Override public JSType caseObjectType(ObjectType type) { return null; } @Override public JSType caseFunctionType(FunctionType type) {"
      },
      {
        "txt": "return null; } }; private Map<String, Function<TypeRestriction, JSType>> restricters; ClosureReverseAbstractInterpreter(CodingConvention convention, final JSTypeRegistry typeRegistry) { super(convention, typeRegistry); this.restricters = new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>() .put(\"isDef\", new Function<TypeRestriction, JSType>() {"
      },
      {
        "txt": "public JSType apply(TypeRestriction p) { if (p.outcome) { return getRestrictedWithoutUndefined(p.type); } else { return null; } } }) .put(\"isNull\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) {"
      },
      {
        "txt": "if (p.outcome) { return getNativeType(NULL_TYPE); } else { return getRestrictedWithoutNull(p.type); } } }) .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.outcome) {"
      },
      {
        "txt": "return getRestrictedWithoutUndefined( getRestrictedWithoutNull(p.type)); } else { return null; } } }) .put(\"isString\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);"
      },
      {
        "txt": "} }) .put(\"isBoolean\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome); } }) .put(\"isNumber\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);"
      },
      {
        "txt": "} }) .put(\"isFunction\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome); } }) .put(\"isArray\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.type == null) {"
      },
      {
        "txt": "return p.outcome ? getNativeType(ARRAY_TYPE) : null; } Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor; return p.type.visit(visitor); } }) .put(\"isObject\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.type == null) {"
      },
      {
        "txt": "return p.outcome ? getNativeType(OBJECT_TYPE) : null; } Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor; return p.type.visit(visitor); } }) .build(); } @Override"
      },
      {
        "txt": "FlowScope blindScope, boolean outcome) { if (condition.getType() == CALL && condition.getChildCount() == 2) { Node callee = condition.getFirstChild(); Node param = condition.getLastChild(); if (callee.getType() == GETPROP && param.isQualifiedName()) { JSType paramType = getTypeIfRefinable(param, blindScope); <extra_id_0> Node left = callee.getFirstChild(); Node right = callee.getLastChild(); if (left.getType() == NAME && \"goog\".equals(left.getString()) && right.getType() == STRING) { Function<TypeRestriction, JSType> restricter = restricters.get(right.getString());"
      },
      {
        "txt": "Function<TypeRestriction, JSType> restricter = restricters.get(right.getString()); if (restricter != null) { return restrictParameter(param, paramType, blindScope, restricter, outcome); } } } } }"
      },
      {
        "txt": "return nextPreciserScopeKnowingConditionOutcome( condition, blindScope, outcome); } private FlowScope restrictParameter(Node parameter, JSType type, FlowScope blindScope, Function<TypeRestriction, JSType> restriction, boolean outcome) { type = restriction.apply(new TypeRestriction(type, outcome)); if (type != null) { FlowScope informed = blindScope.createChildFlowScope(); declareNameInScope(informed, parameter, type);"
      },
      {
        "txt": "return informed; } else { return blindScope; } } private static class TypeRestriction { private final JSType type; private final boolean outcome; private TypeRestriction(JSType type, boolean outcome) { this.type = type;"
      },
      {
        "txt": "this.outcome = outcome; } }"
      }
    ]
  },
  {
    "id": 541,
    "file_path": "src/com/google/javascript/jscomp/ClosureReverseAbstractInterpreter.java",
    "start-bug-line": 218,
    "end-bug-line": 218,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.Token.CALL;"
      },
      {
        "txt": "import static com.google.javascript.rhino.Token.GETPROP; import static com.google.javascript.rhino.Token.NAME; import static com.google.javascript.rhino.Token.STRING; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NO_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_TYPE; import com.google.common.base.Function; import com.google.common.collect.ImmutableMap; import com.google.javascript.rhino.jstype.JSType;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.ObjectType; import com.google.javascript.rhino.jstype.Visitor; import com.google.javascript.rhino.Node; import java.util.Map; class ClosureReverseAbstractInterpreter extends ChainableReverseAbstractInterpreter { private final Visitor<JSType> restrictToArrayVisitor = new RestrictByTrueTypeOfResultVisitor() {"
      },
      {
        "txt": "@Override protected JSType caseTopType(JSType topType) { return topType; } @Override public JSType caseObjectType(ObjectType type) { JSType arrayType = getNativeType(ARRAY_TYPE); return arrayType.isSubtype(type) ? arrayType : null; } };"
      },
      {
        "txt": "private final Visitor<JSType> restrictToNotArrayVisitor = new RestrictByFalseTypeOfResultVisitor() { @Override public JSType caseObjectType(ObjectType type) { return type.isSubtype(getNativeType(ARRAY_TYPE)) ? null : type; } }; private final Visitor<JSType> restrictToObjectVisitor = new RestrictByTrueTypeOfResultVisitor() { @Override"
      },
      {
        "txt": "protected JSType caseTopType(JSType topType) { return getNativeType(NO_OBJECT_TYPE); } @Override public JSType caseObjectType(ObjectType type) { return type; } @Override public JSType caseFunctionType(FunctionType type) { return type;"
      },
      {
        "txt": "} }; private final Visitor<JSType> restrictToNotObjectVisitor = new RestrictByFalseTypeOfResultVisitor() { @Override public JSType caseObjectType(ObjectType type) { return null; } @Override public JSType caseFunctionType(FunctionType type) {"
      },
      {
        "txt": "return null; } }; private Map<String, Function<TypeRestriction, JSType>> restricters; ClosureReverseAbstractInterpreter(CodingConvention convention, final JSTypeRegistry typeRegistry) { super(convention, typeRegistry); this.restricters = new ImmutableMap.Builder<String, Function<TypeRestriction, JSType>>() .put(\"isDef\", new Function<TypeRestriction, JSType>() {"
      },
      {
        "txt": "public JSType apply(TypeRestriction p) { if (p.outcome) { return getRestrictedWithoutUndefined(p.type); } else { return null; } } }) .put(\"isNull\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) {"
      },
      {
        "txt": "if (p.outcome) { return getNativeType(NULL_TYPE); } else { return getRestrictedWithoutNull(p.type); } } }) .put(\"isDefAndNotNull\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.outcome) {"
      },
      {
        "txt": "return getRestrictedWithoutUndefined( getRestrictedWithoutNull(p.type)); } else { return null; } } }) .put(\"isString\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"string\", p.outcome);"
      },
      {
        "txt": "} }) .put(\"isBoolean\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"boolean\", p.outcome); } }) .put(\"isNumber\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"number\", p.outcome);"
      },
      {
        "txt": "} }) .put(\"isFunction\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { return getRestrictedByTypeOfResult(p.type, \"function\", p.outcome); } }) .put(\"isArray\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.type == null) {"
      },
      {
        "txt": "return p.outcome ? getNativeType(ARRAY_TYPE) : null; } Visitor<JSType> visitor = p.outcome ? restrictToArrayVisitor : restrictToNotArrayVisitor; return p.type.visit(visitor); } }) .put(\"isObject\", new Function<TypeRestriction, JSType>() { public JSType apply(TypeRestriction p) { if (p.type == null) {"
      },
      {
        "txt": "return p.outcome ? getNativeType(OBJECT_TYPE) : null; } Visitor<JSType> visitor = p.outcome ? restrictToObjectVisitor : restrictToNotObjectVisitor; return p.type.visit(visitor); } }) .build(); } @Override"
      },
      {
        "txt": "public FlowScope getPreciserScopeKnowingConditionOutcome(Node condition, FlowScope blindScope, boolean outcome) { if (condition.getType() == CALL && condition.getChildCount() == 2) { Node callee = condition.getFirstChild(); Node param = condition.getLastChild(); if (callee.getType() == GETPROP && param.isQualifiedName()) { JSType paramType = getTypeIfRefinable(param, blindScope); if (paramType != null) { Node left = callee.getFirstChild(); Node right = callee.getLastChild();"
      },
      {
        "txt": "right.getType() == STRING) { Function<TypeRestriction, JSType> restricter = restricters.get(right.getString()); if (restricter != null) { return restrictParameter(param, paramType, blindScope, restricter, outcome); <extra_id_0> } } } } return nextPreciserScopeKnowingConditionOutcome( condition, blindScope, outcome);"
      },
      {
        "txt": "return nextPreciserScopeKnowingConditionOutcome( condition, blindScope, outcome); } private FlowScope restrictParameter(Node parameter, JSType type, FlowScope blindScope, Function<TypeRestriction, JSType> restriction, boolean outcome) { type = restriction.apply(new TypeRestriction(type, outcome)); if (type != null) { FlowScope informed = blindScope.createChildFlowScope(); declareNameInScope(informed, parameter, type);"
      },
      {
        "txt": "return informed; } else { return blindScope; } } private static class TypeRestriction { private final JSType type; private final boolean outcome; private TypeRestriction(JSType type, boolean outcome) { this.type = type;"
      },
      {
        "txt": "this.outcome = outcome; } }"
      }
    ]
  },
  {
    "id": 542,
    "file_path": "src/com/google/javascript/jscomp/TypeInference.java",
    "start-bug-line": 632,
    "end-bug-line": 633,
    "bug": "if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) {",
    "fix": "if (var != null) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE;"
      },
      {
        "txt": "import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE; import com.google.common.base.Preconditions; import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets;"
      },
      {
        "txt": "import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.BooleanLiteralSet; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.JSTypeNative;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.ObjectType; import com.google.javascript.rhino.jstype.StaticSlot; import com.google.javascript.rhino.jstype.UnionType; import java.util.Collection; import java.util.Iterator; import java.util.List; import java.util.Set; class TypeInference extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> {"
      },
      {
        "txt": "static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\", \"The template type must be an object type\"); static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\", \"A function type with the template type as the type of this must be a \" + \"parameter type\"); private final AbstractCompiler compiler;"
      },
      {
        "txt": "private final JSTypeRegistry registry; private final ReverseAbstractInterpreter reverseInterpreter; private final Scope syntacticScope; private final FlowScope functionScope; private final FlowScope bottomScope; private final Multimap<Scope, Var> assignedOuterLocalVars = HashMultimap.create(); private final Set<String> unflowableVarNames = Sets.newHashSet(); TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter,"
      },
      {
        "txt": "Scope functionScope) { this(compiler, cfg, reverseInterpreter, functionScope, ImmutableSet.<Var>of()); } TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars) { super(cfg, new LinkedFlowScope.FlowScopeJoinOp()); this.compiler = compiler; this.registry = compiler.getTypeRegistry();"
      },
      {
        "txt": "this.reverseInterpreter = reverseInterpreter; this.syntacticScope = functionScope; this.functionScope = LinkedFlowScope.createEntryLattice(functionScope); for (Var unflowableVar : unflowableVars) { String name = unflowableVar.getName(); if (functionScope.getVar(name) == unflowableVar) { this.unflowableVarNames.add(name); } } Iterator<Var> varIt = functionScope.getVars();"
      },
      {
        "txt": "while (varIt.hasNext()) { Var var = varIt.next(); if (this.unflowableVarNames.contains(var.getName())) { continue; } if (var.getParentNode() != null && var.getType() == null && // no declared type var.getParentNode().getType() == Token.VAR && !var.isExtern()) { this.functionScope.inferSlotType("
      },
      {
        "txt": "var.getName(), getNativeType(VOID_TYPE)); } } this.bottomScope = LinkedFlowScope.createEntryLattice( new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis())); } @Override FlowScope createInitialEstimateLattice() { return bottomScope; }"
      },
      {
        "txt": "@Override FlowScope createEntryLattice() { return functionScope; } Multimap<Scope, Var> getAssignedOuterLocalVars() { return assignedOuterLocalVars; } @Override FlowScope flowThrough(Node n, FlowScope input) { if (input == bottomScope) {"
      },
      {
        "txt": "return input; } FlowScope output = input.createChildFlowScope(); output = traverse(n, output); return output; } @Override @SuppressWarnings(\"fallthrough\") List<FlowScope> branchedFlowThrough(Node source, FlowScope input) { FlowScope output = flowThrough(source, input);"
      },
      {
        "txt": "Node condition = null; FlowScope conditionFlowScope = null; BooleanOutcomePair conditionOutcomes = null; List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source); List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size()); for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) { Branch branch = branchEdge.getValue(); FlowScope newScope = output; switch (branch) { case ON_TRUE:"
      },
      {
        "txt": "if (NodeUtil.isForIn(source)) { Node item = source.getFirstChild(); if (item.getType() == Token.VAR) { item = item.getFirstChild(); } if (item.getType() == Token.NAME) { FlowScope informed = output.createChildFlowScope(); redeclare(informed, item.getString(), getNativeType(STRING_TYPE)); newScope = informed;"
      },
      {
        "txt": "} break; } case ON_FALSE: if (condition == null) { condition = NodeUtil.getConditionExpression(source); if (condition == null && source.getType() == Token.CASE) { condition = source; if (conditionFlowScope == null) { conditionFlowScope = traverse("
      },
      {
        "txt": "condition.getFirstChild(), output.createChildFlowScope()); } } } if (condition != null) { if (condition.getType() == Token.AND || condition.getType() == Token.OR) { if (conditionOutcomes == null) { conditionOutcomes = condition.getType() == Token.AND ? traverseAnd(condition, output.createChildFlowScope()) :"
      },
      {
        "txt": "traverseOr(condition, output.createChildFlowScope()); } newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionOutcomes.getOutcomeFlowScope( condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE); } else { if (conditionFlowScope == null) {"
      },
      {
        "txt": "conditionFlowScope = traverse(condition, output.createChildFlowScope()); } newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionFlowScope, branch == Branch.ON_TRUE); } } break; }"
      },
      {
        "txt": "result.add(newScope.optimize()); } return result; } private FlowScope traverse(Node n, FlowScope scope) { switch (n.getType()) { case Token.ASSIGN: scope = traverseAssign(n, scope); break; case Token.NAME:"
      },
      {
        "txt": "scope = traverseName(n, scope); break; case Token.GETPROP: scope = traverseGetProp(n, scope); break; case Token.AND: scope = traverseAnd(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.OR:"
      },
      {
        "txt": "scope = traverseOr(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.HOOK: scope = traverseHook(n, scope); break; case Token.OBJECTLIT: scope = traverseObjectLiteral(n, scope); break; case Token.CALL:"
      },
      {
        "txt": "scope = traverseCall(n, scope); break; case Token.NEW: scope = traverseNew(n, scope); break; case Token.ASSIGN_ADD: case Token.ADD: scope = traverseAdd(n, scope); break; case Token.POS:"
      },
      {
        "txt": "case Token.NEG: scope = traverse(n.getFirstChild(), scope); // Find types. n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.NULL: n.setJSType(getNativeType(NULL_TYPE)); break; case Token.VOID: n.setJSType(getNativeType(VOID_TYPE)); break;"
      },
      {
        "txt": "case Token.ARRAYLIT: scope = traverseArrayLiteral(n, scope); break; case Token.REF_SPECIAL: n.setJSType(getNativeType(UNKNOWN_TYPE)); break; case Token.REGEXP: n.setJSType(getNativeType(REGEXP_TYPE)); break; case Token.THIS:"
      },
      {
        "txt": "n.setJSType(scope.getTypeOfThis()); break; case Token.ASSIGN_LSH: case Token.ASSIGN_RSH: case Token.LSH: case Token.RSH: case Token.ASSIGN_URSH: case Token.URSH: case Token.ASSIGN_DIV: case Token.ASSIGN_MOD:"
      },
      {
        "txt": "case Token.ASSIGN_BITAND: case Token.ASSIGN_BITXOR: case Token.ASSIGN_BITOR: case Token.ASSIGN_MUL: case Token.ASSIGN_SUB: case Token.DIV: case Token.MOD: case Token.BITAND: case Token.BITXOR: case Token.BITOR:"
      },
      {
        "txt": "case Token.MUL: case Token.SUB: case Token.DEC: case Token.INC: case Token.BITNOT: case Token.NUMBER: scope = traverseChildren(n, scope); n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.LP:"
      },
      {
        "txt": "case Token.GET_REF: scope = traverse(n.getFirstChild(), scope); n.setJSType(getJSType(n.getFirstChild())); break; case Token.COMMA: scope = traverseChildren(n, scope); n.setJSType(getJSType(n.getLastChild())); break; case Token.STRING: case Token.TYPEOF:"
      },
      {
        "txt": "scope = traverseChildren(n, scope); n.setJSType(getNativeType(STRING_TYPE)); break; case Token.LT: case Token.LE: case Token.GT: case Token.GE: case Token.NOT: case Token.EQ: case Token.NE:"
      },
      {
        "txt": "case Token.SHEQ: case Token.SHNE: case Token.INSTANCEOF: case Token.IN: case Token.TRUE: case Token.FALSE: scope = traverseChildren(n, scope); n.setJSType(getNativeType(BOOLEAN_TYPE)); break; case Token.GETELEM:"
      },
      {
        "txt": "scope = traverseGetElem(n, scope); break; case Token.EXPR_RESULT: scope = traverseChildren(n, scope); if (n.getFirstChild().getType() == Token.GETPROP) { ensurePropertyDeclared(n.getFirstChild()); } break; case Token.SWITCH: scope = traverse(n.getFirstChild(), scope);"
      },
      {
        "txt": "break; case Token.VAR: case Token.RETURN: case Token.THROW: scope = traverseChildren(n, scope); break; case Token.CATCH: scope = traverseCatch(n, scope); break; }"
      },
      {
        "txt": "if (n.getType() != Token.FUNCTION) { JSDocInfo info = n.getJSDocInfo(); if (info != null && info.hasType()) { JSType castType = info.getType().evaluate(syntacticScope); if (n.isQualifiedName() && n.getParent().getType() == Token.EXPR_RESULT) { updateScopeForTypeChange(scope, n, n.getJSType(), castType); } n.setJSType(castType); }"
      },
      {
        "txt": "} return scope; } private FlowScope traverseCatch(Node n, FlowScope scope) { Node name = n.getFirstChild(); JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE); name.setJSType(type); redeclare(scope, name.getString(), type); return scope; }"
      },
      {
        "txt": "private FlowScope traverseAssign(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = n.getLastChild(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = getJSType(right); n.setJSType(rightType); updateScopeForTypeChange(scope, left, leftType, rightType); return scope; }"
      },
      {
        "txt": "private void updateScopeForTypeChange( FlowScope scope, Node left, JSType leftType, JSType resultType) { Preconditions.checkNotNull(resultType); switch (left.getType()) { case Token.NAME: String varName = left.getString(); Var var = syntacticScope.getVar(varName); if (var != null && var.isLocal() && var.getScope() != syntacticScope) { assignedOuterLocalVars.put(var.getScope(), var); }"
      },
      {
        "txt": "boolean isVarDeclaration = left.hasChildren(); if (!isVarDeclaration || var == null || var.isTypeInferred()) { redeclare(scope, varName, resultType); } left.setJSType(isVarDeclaration || leftType == null ? resultType : null); if (var != null && var.isTypeInferred()) { JSType oldType = var.getType(); var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType));"
      },
      {
        "txt": "} break; case Token.GETPROP: String qualifiedName = left.getQualifiedName(); if (qualifiedName != null) { scope.inferQualifiedSlot(qualifiedName, leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType); } left.setJSType(resultType);"
      },
      {
        "txt": "ensurePropertyDefined(left, resultType); break; } } private void ensurePropertyDefined(Node getprop, JSType rightType) { ObjectType objectType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (objectType != null) { if (ensurePropertyDeclaredHelper(getprop, objectType)) { return;"
      },
      {
        "txt": "} String propName = getprop.getLastChild().getString(); if (!objectType.isPropertyTypeDeclared(propName)) { if (objectType.hasProperty(propName) || !objectType.isInstanceType()) { if (\"prototype\".equals(propName)) { objectType.defineDeclaredProperty(propName, rightType, false); } else { objectType.defineInferredProperty(propName, rightType, false); }"
      },
      {
        "txt": "} else { if (getprop.getFirstChild().getType() == Token.THIS && getJSType(syntacticScope.getRootNode()).isConstructor()) { objectType.defineInferredProperty(propName, rightType, false); } else { registry.registerPropertyOnType(propName, objectType); } } } }"
      },
      {
        "txt": "} private void ensurePropertyDeclared(Node getprop) { ObjectType ownerType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (ownerType != null) { ensurePropertyDeclaredHelper(getprop, ownerType); } } private boolean ensurePropertyDeclaredHelper( Node getprop, ObjectType objectType) {"
      },
      {
        "txt": "String propName = getprop.getLastChild().getString(); String qName = getprop.getQualifiedName(); if (qName != null) { Var var = syntacticScope.getVar(qName); if (var != null && !var.isTypeInferred()) { if (propName.equals(\"prototype\") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))) { return objectType.defineDeclaredProperty("
      },
      {
        "txt": "propName, var.getType(), var.isExtern()); } } } return false; } private FlowScope traverseName(Node n, FlowScope scope) { String varName = n.getString(); Node value = n.getFirstChild(); JSType type = n.getJSType();"
      },
      {
        "txt": "scope = traverse(value, scope); updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */, getJSType(value)); return scope; } else { StaticSlot<JSType> var = scope.getSlot(varName); <extra_id_0> type = var.getType(); if (type == null) { type = getNativeType(UNKNOWN_TYPE); } } }"
      },
      {
        "txt": "} } n.setJSType(type); return scope; } private FlowScope traverseArrayLiteral(Node n, FlowScope scope) { scope = traverseChildren(n, scope); n.setJSType(getNativeType(ARRAY_TYPE)); return scope; }"
      },
      {
        "txt": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) { if (n.getJSType() != null) { return scope; } ObjectType objectType = registry.createAnonymousObjectType(); for (Node name = n.getFirstChild(); name != null; name = name.getNext().getNext()) { Node value = name.getNext(); scope = traverse(name, scope); scope = traverse(value, scope);"
      },
      {
        "txt": "String memberName = NodeUtil.getStringValue(name); if (memberName != null) { objectType.defineInferredProperty(memberName, getJSType(value), false); } else { n.setJSType(getNativeType(UNKNOWN_TYPE)); return scope; } } n.setJSType(objectType); return scope;"
      },
      {
        "txt": "} private FlowScope traverseAdd(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = left.getNext(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = right.getJSType(); JSType type = getNativeType(UNKNOWN_TYPE); if (leftType != null && rightType != null) { boolean leftIsUnknown = leftType.isUnknownType();"
      },
      {
        "txt": "boolean rightIsUnknown = rightType.isUnknownType(); if (leftIsUnknown && rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if ((!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString())) { type = getNativeType(STRING_TYPE); } else if (leftIsUnknown || rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) { type = getNativeType(NUMBER_TYPE);"
      },
      {
        "txt": "} else { type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE); } } n.setJSType(type); if (n.getType() == Token.ASSIGN_ADD) { updateScopeForTypeChange(scope, left, leftType, type); } return scope; }"
      },
      {
        "txt": "private boolean isAddedAsNumber(JSType type) { return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE)); } private FlowScope traverseHook(Node n, FlowScope scope) { Node condition = n.getFirstChild(); Node trueNode = condition.getNext(); Node falseNode = n.getLastChild(); scope = traverse(condition, scope); FlowScope trueScope = reverseInterpreter."
      },
      {
        "txt": "getPreciserScopeKnowingConditionOutcome( condition, scope, true); FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( condition, scope, false); traverse(trueNode, trueScope.createChildFlowScope()); traverse(falseNode, falseScope.createChildFlowScope()); JSType trueType = trueNode.getJSType(); JSType falseType = falseNode.getJSType(); if (trueType != null && falseType != null) {"
      },
      {
        "txt": "n.setJSType(trueType.getLeastSupertype(falseType)); } else { n.setJSType(null); } return scope.createChildFlowScope(); } private FlowScope traverseCall(Node n, FlowScope scope) { scope = traverseChildren(n, scope); Node left = n.getFirstChild(); JSType functionType = getJSType(left).restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (functionType != null) { if (functionType instanceof FunctionType) { FunctionType fnType = (FunctionType) functionType; n.setJSType(fnType.getReturnType()); updateTypeOfParametersOnClosure(n, fnType); updateTypeOfThisOnClosure(n, fnType); } else if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) { n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)); } }"
      },
      {
        "txt": "return scope; } private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) { int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = iParameter.getJSType(); if (iParameterType instanceof FunctionType) { FunctionType iParameterFnType = (FunctionType) iParameterType; if (i + 1 >= n.getChildCount()) { return;"
      },
      {
        "txt": "} Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgument.getType() == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo() == null) { iArgument.setJSType(iParameterFnType); } } i++;"
      },
      {
        "txt": "} } private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) { if (fnType.getTemplateTypeName() == null) { return; } int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = getJSType(iParameter); iParameterType = iParameterType.restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (iParameterType.isTemplateType()) { if (i + 1 >= n.getChildCount()) { return; } Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgumentType != null) { iArgumentType = iArgumentType.restrictByNotNullOrUndefined(); if (!(iArgumentType instanceof ObjectType)) { compiler.report("
      },
      {
        "txt": "JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE)); return; } boolean foundTemplateTypeOfThisParameter = false; int j = 0; for (Node jParameter : fnType.getParameters()) { JSType jParameterType = getJSType(jParameter); if (jParameterType instanceof FunctionType) { FunctionType jParameterFnType = (FunctionType) jParameterType;"
      },
      {
        "txt": "if (jParameterFnType.getTypeOfThis().equals(iParameterType)) { foundTemplateTypeOfThisParameter = true; if (j + 1 >= n.getChildCount()) { return; } Node jArgument = n.getChildAtIndex(j + 1); JSType jArgumentType = getJSType(jArgument); if (jArgument.getType() == Token.FUNCTION && jArgumentType instanceof FunctionType) { FunctionType jArgumentFnType =(FunctionType) jArgumentType;"
      },
      {
        "txt": "if (jArgumentFnType.getTypeOfThis().isUnknownType()) { jArgument.setJSType( new FunctionType( registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType)); } }"
      },
      {
        "txt": "} } j++; } if (!foundTemplateTypeOfThisParameter) { Node source = fnType.getSource(); compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED)); return; }"
      },
      {
        "txt": "} } i++; } } private FlowScope traverseNew(Node n, FlowScope scope) { Node constructor = n.getFirstChild(); scope = traverse(constructor, scope); JSType constructorType = constructor.getJSType(); JSType type = null;"
      },
      {
        "txt": "if (constructorType != null) { constructorType = constructorType.restrictByNotNullOrUndefined(); if (constructorType.isUnknownType()) { type = getNativeType(UNKNOWN_TYPE); } else if (constructorType instanceof FunctionType) { FunctionType ct = (FunctionType) constructorType; if (ct.isConstructor()) { type = ct.getInstanceType(); } }"
      },
      {
        "txt": "} n.setJSType(type); for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { scope = traverse(arg, scope); } return scope; } private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, true); }"
      },
      {
        "txt": "private FlowScope traverseChildren(Node n, FlowScope scope) { for (Node el = n.getFirstChild(); el != null; el = el.getNext()) { scope = traverse(el, scope); } return scope; } private FlowScope traverseGetElem(Node n, FlowScope scope) { scope = traverseChildren(n, scope); ObjectType objType = ObjectType.cast( getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());"
      },
      {
        "txt": "if (objType != null) { JSType type = objType.getParameterType(); if (type != null) { n.setJSType(type); } } return dereferencePointer(n.getFirstChild(), scope); } private FlowScope traverseGetProp(Node n, FlowScope scope) { Node objNode = n.getFirstChild();"
      },
      {
        "txt": "Node property = n.getLastChild(); scope = traverseChildren(n, scope); n.setJSType( getPropertyType( objNode.getJSType(), property.getString(), n, scope)); return dereferencePointer(n.getFirstChild(), scope); } private FlowScope dereferencePointer(Node n, FlowScope scope) { if (n.getType() == Token.NAME) { JSType type = getJSType(n);"
      },
      {
        "txt": "JSType narrowed = type.restrictByNotNullOrUndefined(); if (type != narrowed) { scope = scope.createChildFlowScope(); redeclare(scope, n.getString(), narrowed); } } return scope; } private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {"
      },
      {
        "txt": "String qualifiedName = n.getQualifiedName(); StaticSlot<JSType> var = scope.getSlot(qualifiedName); if (var != null) { JSType varType = var.getType(); if (varType != null) { if (varType.equals(getNativeType(UNKNOWN_TYPE)) && var != syntacticScope.getSlot(qualifiedName)) { return getNativeType(CHECKED_UNKNOWN_TYPE); } else { return varType;"
      },
      {
        "txt": "} } } JSType propertyType = null; if (objType != null) { propertyType = objType.findPropertyType(propName); } if ((propertyType == null || propertyType.isUnknownType()) && qualifiedName != null) { ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));"
      },
      {
        "txt": "if (regType != null) { propertyType = regType.getConstructor(); } } return propertyType; } private BooleanOutcomePair traverseOr(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, false); } private BooleanOutcomePair traverseShortCircuitingBinOp("
      },
      {
        "txt": "Node n, FlowScope scope, boolean condition) { Node left = n.getFirstChild(); Node right = n.getLastChild(); BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope()); JSType leftType = left.getJSType(); FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),"
      },
      {
        "txt": "condition); BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp( right, rightScope.createChildFlowScope()); JSType rightType = right.getJSType(); JSType type; BooleanOutcomePair literals; if (leftType != null && rightType != null) { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition); if (leftLiterals.toBooleanOutcomes =="
      },
      {
        "txt": "BooleanLiteralSet.get(!condition)) { type = leftType; literals = leftLiterals; } else { type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } if (literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type)) {"
      },
      {
        "txt": "if (type instanceof UnionType) { type = ((UnionType) type).getRestrictedUnion( getNativeType(BOOLEAN_TYPE)); } } } else { type = null; literals = new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(),"
      },
      {
        "txt": "rightLiterals.getJoinedFlowScope()); } n.setJSType(type); return literals; } private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n, FlowScope scope) { switch (n.getType()) { case Token.AND: return traverseAnd(n, scope);"
      },
      {
        "txt": "case Token.OR: return traverseOr(n, scope); default: scope = traverse(n, scope); return newBooleanOutcomePair(n.getJSType(), scope); } } BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left, BooleanOutcomePair right, boolean condition) { return new BooleanOutcomePair("
      },
      {
        "txt": "getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes, condition), getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope()); } static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition) { return right.union(left.intersection(BooleanLiteralSet.get(!condition))); } private final class BooleanOutcomePair {"
      },
      {
        "txt": "final BooleanLiteralSet toBooleanOutcomes; final BooleanLiteralSet booleanValues; final FlowScope leftScope; final FlowScope rightScope; FlowScope joinedScope = null; BooleanOutcomePair( BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues, FlowScope leftScope, FlowScope rightScope) { this.toBooleanOutcomes = toBooleanOutcomes; this.booleanValues = booleanValues;"
      },
      {
        "txt": "this.leftScope = leftScope; this.rightScope = rightScope; } FlowScope getJoinedFlowScope() { if (joinedScope == null) { if (leftScope == rightScope) { joinedScope = rightScope; } else { joinedScope = join(leftScope, rightScope); }"
      },
      {
        "txt": "} return joinedScope; } FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) { if (nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome) { return rightScope; } else { return getJoinedFlowScope(); }"
      },
      {
        "txt": "} } private BooleanOutcomePair newBooleanOutcomePair( JSType jsType, FlowScope flowScope) { if (jsType == null) { return new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope); } return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?"
      },
      {
        "txt": "BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope); } private void redeclare(FlowScope scope, String varName, JSType varType) { if (varType == null) { varType = getNativeType(JSTypeNative.UNKNOWN_TYPE); } if (unflowableVarNames.contains(varName)) { return; }"
      },
      {
        "txt": "scope.inferSlotType(varName, varType); } private JSType getJSType(Node n) { JSType jsType = n.getJSType(); if (jsType == null) { return getNativeType(UNKNOWN_TYPE); } else { return jsType; } }"
      },
      {
        "txt": "private JSType getNativeType(JSTypeNative typeId) { return registry.getNativeType(typeId); }"
      }
    ]
  },
  {
    "id": 543,
    "file_path": "src/com/google/javascript/jscomp/TypeInference.java",
    "start-bug-line": 639,
    "end-bug-line": 639,
    "bug": "",
    "fix": "boolean isInferred = var.isTypeInferred(); boolean unflowable = isInferred && unflowableVarNames.contains(varName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;"
      },
      {
        "txt": "import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE; import com.google.common.base.Preconditions; import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.Scope.Var;"
      },
      {
        "txt": "import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.BooleanLiteralSet; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.JSTypeNative; import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.ObjectType;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.StaticSlot; import com.google.javascript.rhino.jstype.UnionType; import java.util.Collection; import java.util.Iterator; import java.util.List; import java.util.Set; class TypeInference extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> { static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\", \"The template type must be an object type\"); static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\", \"A function type with the template type as the type of this must be a \" + \"parameter type\"); private final AbstractCompiler compiler; private final JSTypeRegistry registry; private final ReverseAbstractInterpreter reverseInterpreter;"
      },
      {
        "txt": "private final Scope syntacticScope; private final FlowScope functionScope; private final FlowScope bottomScope; private final Multimap<Scope, Var> assignedOuterLocalVars = HashMultimap.create(); private final Set<String> unflowableVarNames = Sets.newHashSet(); TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope) { this(compiler, cfg, reverseInterpreter, functionScope,"
      },
      {
        "txt": "ImmutableSet.<Var>of()); } TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars) { super(cfg, new LinkedFlowScope.FlowScopeJoinOp()); this.compiler = compiler; this.registry = compiler.getTypeRegistry(); this.reverseInterpreter = reverseInterpreter; this.syntacticScope = functionScope;"
      },
      {
        "txt": "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope); for (Var unflowableVar : unflowableVars) { String name = unflowableVar.getName(); if (functionScope.getVar(name) == unflowableVar) { this.unflowableVarNames.add(name); } } Iterator<Var> varIt = functionScope.getVars(); while (varIt.hasNext()) { Var var = varIt.next();"
      },
      {
        "txt": "if (this.unflowableVarNames.contains(var.getName())) { continue; } if (var.getParentNode() != null && var.getType() == null && // no declared type var.getParentNode().getType() == Token.VAR && !var.isExtern()) { this.functionScope.inferSlotType( var.getName(), getNativeType(VOID_TYPE)); }"
      },
      {
        "txt": "} this.bottomScope = LinkedFlowScope.createEntryLattice( new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis())); } @Override FlowScope createInitialEstimateLattice() { return bottomScope; } @Override FlowScope createEntryLattice() {"
      },
      {
        "txt": "return functionScope; } Multimap<Scope, Var> getAssignedOuterLocalVars() { return assignedOuterLocalVars; } @Override FlowScope flowThrough(Node n, FlowScope input) { if (input == bottomScope) { return input; }"
      },
      {
        "txt": "FlowScope output = input.createChildFlowScope(); output = traverse(n, output); return output; } @Override @SuppressWarnings(\"fallthrough\") List<FlowScope> branchedFlowThrough(Node source, FlowScope input) { FlowScope output = flowThrough(source, input); Node condition = null; FlowScope conditionFlowScope = null;"
      },
      {
        "txt": "BooleanOutcomePair conditionOutcomes = null; List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source); List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size()); for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) { Branch branch = branchEdge.getValue(); FlowScope newScope = output; switch (branch) { case ON_TRUE: if (NodeUtil.isForIn(source)) { Node item = source.getFirstChild();"
      },
      {
        "txt": "if (item.getType() == Token.VAR) { item = item.getFirstChild(); } if (item.getType() == Token.NAME) { FlowScope informed = output.createChildFlowScope(); redeclare(informed, item.getString(), getNativeType(STRING_TYPE)); newScope = informed; } break;"
      },
      {
        "txt": "} case ON_FALSE: if (condition == null) { condition = NodeUtil.getConditionExpression(source); if (condition == null && source.getType() == Token.CASE) { condition = source; if (conditionFlowScope == null) { conditionFlowScope = traverse( condition.getFirstChild(), output.createChildFlowScope()); }"
      },
      {
        "txt": "} } if (condition != null) { if (condition.getType() == Token.AND || condition.getType() == Token.OR) { if (conditionOutcomes == null) { conditionOutcomes = condition.getType() == Token.AND ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope()); }"
      },
      {
        "txt": "newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionOutcomes.getOutcomeFlowScope( condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE); } else { if (conditionFlowScope == null) { conditionFlowScope = traverse(condition, output.createChildFlowScope());"
      },
      {
        "txt": "} newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionFlowScope, branch == Branch.ON_TRUE); } } break; } result.add(newScope.optimize()); }"
      },
      {
        "txt": "return result; } private FlowScope traverse(Node n, FlowScope scope) { switch (n.getType()) { case Token.ASSIGN: scope = traverseAssign(n, scope); break; case Token.NAME: scope = traverseName(n, scope); break;"
      },
      {
        "txt": "case Token.GETPROP: scope = traverseGetProp(n, scope); break; case Token.AND: scope = traverseAnd(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.OR: scope = traverseOr(n, scope).getJoinedFlowScope() .createChildFlowScope();"
      },
      {
        "txt": "break; case Token.HOOK: scope = traverseHook(n, scope); break; case Token.OBJECTLIT: scope = traverseObjectLiteral(n, scope); break; case Token.CALL: scope = traverseCall(n, scope); break;"
      },
      {
        "txt": "case Token.NEW: scope = traverseNew(n, scope); break; case Token.ASSIGN_ADD: case Token.ADD: scope = traverseAdd(n, scope); break; case Token.POS: case Token.NEG: scope = traverse(n.getFirstChild(), scope); // Find types."
      },
      {
        "txt": "n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.NULL: n.setJSType(getNativeType(NULL_TYPE)); break; case Token.VOID: n.setJSType(getNativeType(VOID_TYPE)); break; case Token.ARRAYLIT: scope = traverseArrayLiteral(n, scope);"
      },
      {
        "txt": "break; case Token.REF_SPECIAL: n.setJSType(getNativeType(UNKNOWN_TYPE)); break; case Token.REGEXP: n.setJSType(getNativeType(REGEXP_TYPE)); break; case Token.THIS: n.setJSType(scope.getTypeOfThis()); break;"
      },
      {
        "txt": "case Token.ASSIGN_LSH: case Token.ASSIGN_RSH: case Token.LSH: case Token.RSH: case Token.ASSIGN_URSH: case Token.URSH: case Token.ASSIGN_DIV: case Token.ASSIGN_MOD: case Token.ASSIGN_BITAND: case Token.ASSIGN_BITXOR:"
      },
      {
        "txt": "case Token.ASSIGN_BITOR: case Token.ASSIGN_MUL: case Token.ASSIGN_SUB: case Token.DIV: case Token.MOD: case Token.BITAND: case Token.BITXOR: case Token.BITOR: case Token.MUL: case Token.SUB:"
      },
      {
        "txt": "case Token.DEC: case Token.INC: case Token.BITNOT: case Token.NUMBER: scope = traverseChildren(n, scope); n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.LP: case Token.GET_REF: scope = traverse(n.getFirstChild(), scope);"
      },
      {
        "txt": "n.setJSType(getJSType(n.getFirstChild())); break; case Token.COMMA: scope = traverseChildren(n, scope); n.setJSType(getJSType(n.getLastChild())); break; case Token.STRING: case Token.TYPEOF: scope = traverseChildren(n, scope); n.setJSType(getNativeType(STRING_TYPE));"
      },
      {
        "txt": "break; case Token.LT: case Token.LE: case Token.GT: case Token.GE: case Token.NOT: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE:"
      },
      {
        "txt": "case Token.INSTANCEOF: case Token.IN: case Token.TRUE: case Token.FALSE: scope = traverseChildren(n, scope); n.setJSType(getNativeType(BOOLEAN_TYPE)); break; case Token.GETELEM: scope = traverseGetElem(n, scope); break;"
      },
      {
        "txt": "case Token.EXPR_RESULT: scope = traverseChildren(n, scope); if (n.getFirstChild().getType() == Token.GETPROP) { ensurePropertyDeclared(n.getFirstChild()); } break; case Token.SWITCH: scope = traverse(n.getFirstChild(), scope); break; case Token.VAR:"
      },
      {
        "txt": "case Token.RETURN: case Token.THROW: scope = traverseChildren(n, scope); break; case Token.CATCH: scope = traverseCatch(n, scope); break; } if (n.getType() != Token.FUNCTION) { JSDocInfo info = n.getJSDocInfo();"
      },
      {
        "txt": "if (info != null && info.hasType()) { JSType castType = info.getType().evaluate(syntacticScope); if (n.isQualifiedName() && n.getParent().getType() == Token.EXPR_RESULT) { updateScopeForTypeChange(scope, n, n.getJSType(), castType); } n.setJSType(castType); } } return scope;"
      },
      {
        "txt": "} private FlowScope traverseCatch(Node n, FlowScope scope) { Node name = n.getFirstChild(); JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE); name.setJSType(type); redeclare(scope, name.getString(), type); return scope; } private FlowScope traverseAssign(Node n, FlowScope scope) { Node left = n.getFirstChild();"
      },
      {
        "txt": "Node right = n.getLastChild(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = getJSType(right); n.setJSType(rightType); updateScopeForTypeChange(scope, left, leftType, rightType); return scope; } private void updateScopeForTypeChange( FlowScope scope, Node left, JSType leftType, JSType resultType) {"
      },
      {
        "txt": "Preconditions.checkNotNull(resultType); switch (left.getType()) { case Token.NAME: String varName = left.getString(); Var var = syntacticScope.getVar(varName); if (var != null && var.isLocal() && var.getScope() != syntacticScope) { assignedOuterLocalVars.put(var.getScope(), var); } boolean isVarDeclaration = left.hasChildren(); if (!isVarDeclaration || var == null || var.isTypeInferred()) {"
      },
      {
        "txt": "redeclare(scope, varName, resultType); } left.setJSType(isVarDeclaration || leftType == null ? resultType : null); if (var != null && var.isTypeInferred()) { JSType oldType = var.getType(); var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType)); } break;"
      },
      {
        "txt": "case Token.GETPROP: String qualifiedName = left.getQualifiedName(); if (qualifiedName != null) { scope.inferQualifiedSlot(qualifiedName, leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType); } left.setJSType(resultType); ensurePropertyDefined(left, resultType); break;"
      },
      {
        "txt": "} } private void ensurePropertyDefined(Node getprop, JSType rightType) { ObjectType objectType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (objectType != null) { if (ensurePropertyDeclaredHelper(getprop, objectType)) { return; } String propName = getprop.getLastChild().getString();"
      },
      {
        "txt": "if (!objectType.isPropertyTypeDeclared(propName)) { if (objectType.hasProperty(propName) || !objectType.isInstanceType()) { if (\"prototype\".equals(propName)) { objectType.defineDeclaredProperty(propName, rightType, false); } else { objectType.defineInferredProperty(propName, rightType, false); } } else { if (getprop.getFirstChild().getType() == Token.THIS &&"
      },
      {
        "txt": "getJSType(syntacticScope.getRootNode()).isConstructor()) { objectType.defineInferredProperty(propName, rightType, false); } else { registry.registerPropertyOnType(propName, objectType); } } } } } private void ensurePropertyDeclared(Node getprop) {"
      },
      {
        "txt": "ObjectType ownerType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (ownerType != null) { ensurePropertyDeclaredHelper(getprop, ownerType); } } private boolean ensurePropertyDeclaredHelper( Node getprop, ObjectType objectType) { String propName = getprop.getLastChild().getString(); String qName = getprop.getQualifiedName();"
      },
      {
        "txt": "if (qName != null) { Var var = syntacticScope.getVar(qName); if (var != null && !var.isTypeInferred()) { if (propName.equals(\"prototype\") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))) { return objectType.defineDeclaredProperty( propName, var.getType(), var.isExtern()); }"
      },
      {
        "txt": "} } return false; } private FlowScope traverseName(Node n, FlowScope scope) { String varName = n.getString(); Node value = n.getFirstChild(); JSType type = n.getJSType(); if (value != null) { scope = traverse(value, scope);"
      },
      {
        "txt": "getJSType(value)); return scope; } else { StaticSlot<JSType> var = scope.getSlot(varName); if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) { <extra_id_0> type = var.getType(); if (type == null) { type = getNativeType(UNKNOWN_TYPE); } } }"
      },
      {
        "txt": "} } n.setJSType(type); return scope; } private FlowScope traverseArrayLiteral(Node n, FlowScope scope) { scope = traverseChildren(n, scope); n.setJSType(getNativeType(ARRAY_TYPE)); return scope; }"
      },
      {
        "txt": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) { if (n.getJSType() != null) { return scope; } ObjectType objectType = registry.createAnonymousObjectType(); for (Node name = n.getFirstChild(); name != null; name = name.getNext().getNext()) { Node value = name.getNext(); scope = traverse(name, scope); scope = traverse(value, scope);"
      },
      {
        "txt": "String memberName = NodeUtil.getStringValue(name); if (memberName != null) { objectType.defineInferredProperty(memberName, getJSType(value), false); } else { n.setJSType(getNativeType(UNKNOWN_TYPE)); return scope; } } n.setJSType(objectType); return scope;"
      },
      {
        "txt": "} private FlowScope traverseAdd(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = left.getNext(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = right.getJSType(); JSType type = getNativeType(UNKNOWN_TYPE); if (leftType != null && rightType != null) { boolean leftIsUnknown = leftType.isUnknownType();"
      },
      {
        "txt": "boolean rightIsUnknown = rightType.isUnknownType(); if (leftIsUnknown && rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if ((!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString())) { type = getNativeType(STRING_TYPE); } else if (leftIsUnknown || rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) { type = getNativeType(NUMBER_TYPE);"
      },
      {
        "txt": "} else { type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE); } } n.setJSType(type); if (n.getType() == Token.ASSIGN_ADD) { updateScopeForTypeChange(scope, left, leftType, type); } return scope; }"
      },
      {
        "txt": "private boolean isAddedAsNumber(JSType type) { return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE)); } private FlowScope traverseHook(Node n, FlowScope scope) { Node condition = n.getFirstChild(); Node trueNode = condition.getNext(); Node falseNode = n.getLastChild(); scope = traverse(condition, scope); FlowScope trueScope = reverseInterpreter."
      },
      {
        "txt": "getPreciserScopeKnowingConditionOutcome( condition, scope, true); FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( condition, scope, false); traverse(trueNode, trueScope.createChildFlowScope()); traverse(falseNode, falseScope.createChildFlowScope()); JSType trueType = trueNode.getJSType(); JSType falseType = falseNode.getJSType(); if (trueType != null && falseType != null) {"
      },
      {
        "txt": "n.setJSType(trueType.getLeastSupertype(falseType)); } else { n.setJSType(null); } return scope.createChildFlowScope(); } private FlowScope traverseCall(Node n, FlowScope scope) { scope = traverseChildren(n, scope); Node left = n.getFirstChild(); JSType functionType = getJSType(left).restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (functionType != null) { if (functionType instanceof FunctionType) { FunctionType fnType = (FunctionType) functionType; n.setJSType(fnType.getReturnType()); updateTypeOfParametersOnClosure(n, fnType); updateTypeOfThisOnClosure(n, fnType); } else if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) { n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)); } }"
      },
      {
        "txt": "return scope; } private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) { int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = iParameter.getJSType(); if (iParameterType instanceof FunctionType) { FunctionType iParameterFnType = (FunctionType) iParameterType; if (i + 1 >= n.getChildCount()) { return;"
      },
      {
        "txt": "} Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgument.getType() == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo() == null) { iArgument.setJSType(iParameterFnType); } } i++;"
      },
      {
        "txt": "} } private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) { if (fnType.getTemplateTypeName() == null) { return; } int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = getJSType(iParameter); iParameterType = iParameterType.restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (iParameterType.isTemplateType()) { if (i + 1 >= n.getChildCount()) { return; } Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgumentType != null) { iArgumentType = iArgumentType.restrictByNotNullOrUndefined(); if (!(iArgumentType instanceof ObjectType)) { compiler.report("
      },
      {
        "txt": "JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE)); return; } boolean foundTemplateTypeOfThisParameter = false; int j = 0; for (Node jParameter : fnType.getParameters()) { JSType jParameterType = getJSType(jParameter); if (jParameterType instanceof FunctionType) { FunctionType jParameterFnType = (FunctionType) jParameterType;"
      },
      {
        "txt": "if (jParameterFnType.getTypeOfThis().equals(iParameterType)) { foundTemplateTypeOfThisParameter = true; if (j + 1 >= n.getChildCount()) { return; } Node jArgument = n.getChildAtIndex(j + 1); JSType jArgumentType = getJSType(jArgument); if (jArgument.getType() == Token.FUNCTION && jArgumentType instanceof FunctionType) { FunctionType jArgumentFnType =(FunctionType) jArgumentType;"
      },
      {
        "txt": "if (jArgumentFnType.getTypeOfThis().isUnknownType()) { jArgument.setJSType( new FunctionType( registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType)); } }"
      },
      {
        "txt": "} } j++; } if (!foundTemplateTypeOfThisParameter) { Node source = fnType.getSource(); compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED)); return; }"
      },
      {
        "txt": "} } i++; } } private FlowScope traverseNew(Node n, FlowScope scope) { Node constructor = n.getFirstChild(); scope = traverse(constructor, scope); JSType constructorType = constructor.getJSType(); JSType type = null;"
      },
      {
        "txt": "if (constructorType != null) { constructorType = constructorType.restrictByNotNullOrUndefined(); if (constructorType.isUnknownType()) { type = getNativeType(UNKNOWN_TYPE); } else if (constructorType instanceof FunctionType) { FunctionType ct = (FunctionType) constructorType; if (ct.isConstructor()) { type = ct.getInstanceType(); } }"
      },
      {
        "txt": "} n.setJSType(type); for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { scope = traverse(arg, scope); } return scope; } private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, true); }"
      },
      {
        "txt": "private FlowScope traverseChildren(Node n, FlowScope scope) { for (Node el = n.getFirstChild(); el != null; el = el.getNext()) { scope = traverse(el, scope); } return scope; } private FlowScope traverseGetElem(Node n, FlowScope scope) { scope = traverseChildren(n, scope); ObjectType objType = ObjectType.cast( getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());"
      },
      {
        "txt": "if (objType != null) { JSType type = objType.getParameterType(); if (type != null) { n.setJSType(type); } } return dereferencePointer(n.getFirstChild(), scope); } private FlowScope traverseGetProp(Node n, FlowScope scope) { Node objNode = n.getFirstChild();"
      },
      {
        "txt": "Node property = n.getLastChild(); scope = traverseChildren(n, scope); n.setJSType( getPropertyType( objNode.getJSType(), property.getString(), n, scope)); return dereferencePointer(n.getFirstChild(), scope); } private FlowScope dereferencePointer(Node n, FlowScope scope) { if (n.getType() == Token.NAME) { JSType type = getJSType(n);"
      },
      {
        "txt": "JSType narrowed = type.restrictByNotNullOrUndefined(); if (type != narrowed) { scope = scope.createChildFlowScope(); redeclare(scope, n.getString(), narrowed); } } return scope; } private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {"
      },
      {
        "txt": "String qualifiedName = n.getQualifiedName(); StaticSlot<JSType> var = scope.getSlot(qualifiedName); if (var != null) { JSType varType = var.getType(); if (varType != null) { if (varType.equals(getNativeType(UNKNOWN_TYPE)) && var != syntacticScope.getSlot(qualifiedName)) { return getNativeType(CHECKED_UNKNOWN_TYPE); } else { return varType;"
      },
      {
        "txt": "} } } JSType propertyType = null; if (objType != null) { propertyType = objType.findPropertyType(propName); } if ((propertyType == null || propertyType.isUnknownType()) && qualifiedName != null) { ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));"
      },
      {
        "txt": "if (regType != null) { propertyType = regType.getConstructor(); } } return propertyType; } private BooleanOutcomePair traverseOr(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, false); } private BooleanOutcomePair traverseShortCircuitingBinOp("
      },
      {
        "txt": "Node n, FlowScope scope, boolean condition) { Node left = n.getFirstChild(); Node right = n.getLastChild(); BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope()); JSType leftType = left.getJSType(); FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),"
      },
      {
        "txt": "condition); BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp( right, rightScope.createChildFlowScope()); JSType rightType = right.getJSType(); JSType type; BooleanOutcomePair literals; if (leftType != null && rightType != null) { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition); if (leftLiterals.toBooleanOutcomes =="
      },
      {
        "txt": "BooleanLiteralSet.get(!condition)) { type = leftType; literals = leftLiterals; } else { type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } if (literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type)) {"
      },
      {
        "txt": "if (type instanceof UnionType) { type = ((UnionType) type).getRestrictedUnion( getNativeType(BOOLEAN_TYPE)); } } } else { type = null; literals = new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(),"
      },
      {
        "txt": "rightLiterals.getJoinedFlowScope()); } n.setJSType(type); return literals; } private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n, FlowScope scope) { switch (n.getType()) { case Token.AND: return traverseAnd(n, scope);"
      },
      {
        "txt": "case Token.OR: return traverseOr(n, scope); default: scope = traverse(n, scope); return newBooleanOutcomePair(n.getJSType(), scope); } } BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left, BooleanOutcomePair right, boolean condition) { return new BooleanOutcomePair("
      },
      {
        "txt": "getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes, condition), getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope()); } static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition) { return right.union(left.intersection(BooleanLiteralSet.get(!condition))); } private final class BooleanOutcomePair {"
      },
      {
        "txt": "final BooleanLiteralSet toBooleanOutcomes; final BooleanLiteralSet booleanValues; final FlowScope leftScope; final FlowScope rightScope; FlowScope joinedScope = null; BooleanOutcomePair( BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues, FlowScope leftScope, FlowScope rightScope) { this.toBooleanOutcomes = toBooleanOutcomes; this.booleanValues = booleanValues;"
      },
      {
        "txt": "this.leftScope = leftScope; this.rightScope = rightScope; } FlowScope getJoinedFlowScope() { if (joinedScope == null) { if (leftScope == rightScope) { joinedScope = rightScope; } else { joinedScope = join(leftScope, rightScope); }"
      },
      {
        "txt": "} return joinedScope; } FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) { if (nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome) { return rightScope; } else { return getJoinedFlowScope(); }"
      },
      {
        "txt": "} } private BooleanOutcomePair newBooleanOutcomePair( JSType jsType, FlowScope flowScope) { if (jsType == null) { return new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope); } return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?"
      },
      {
        "txt": "BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope); } private void redeclare(FlowScope scope, String varName, JSType varType) { if (varType == null) { varType = getNativeType(JSTypeNative.UNKNOWN_TYPE); } if (unflowableVarNames.contains(varName)) { return; }"
      },
      {
        "txt": "scope.inferSlotType(varName, varType); } private JSType getJSType(Node n) { JSType jsType = n.getJSType(); if (jsType == null) { return getNativeType(UNKNOWN_TYPE); } else { return jsType; } }"
      },
      {
        "txt": "private JSType getNativeType(JSTypeNative typeId) { return registry.getNativeType(typeId); }"
      }
    ]
  },
  {
    "id": 544,
    "file_path": "src/com/google/javascript/jscomp/TypeInference.java",
    "start-bug-line": 643,
    "end-bug-line": 643,
    "bug": "",
    "fix": "boolean nonLocalInferredSlot = isInferred && syntacticScope.getParent() != null && var == syntacticScope.getParent().getSlot(varName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;"
      },
      {
        "txt": "import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE; import com.google.common.base.Preconditions; import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.Scope.Var;"
      },
      {
        "txt": "import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.BooleanLiteralSet; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.JSTypeNative; import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.ObjectType;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.StaticSlot; import com.google.javascript.rhino.jstype.UnionType; import java.util.Collection; import java.util.Iterator; import java.util.List; import java.util.Set; class TypeInference extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> { static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\", \"The template type must be an object type\"); static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\", \"A function type with the template type as the type of this must be a \" + \"parameter type\"); private final AbstractCompiler compiler; private final JSTypeRegistry registry; private final ReverseAbstractInterpreter reverseInterpreter;"
      },
      {
        "txt": "private final Scope syntacticScope; private final FlowScope functionScope; private final FlowScope bottomScope; private final Multimap<Scope, Var> assignedOuterLocalVars = HashMultimap.create(); private final Set<String> unflowableVarNames = Sets.newHashSet(); TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope) { this(compiler, cfg, reverseInterpreter, functionScope,"
      },
      {
        "txt": "ImmutableSet.<Var>of()); } TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars) { super(cfg, new LinkedFlowScope.FlowScopeJoinOp()); this.compiler = compiler; this.registry = compiler.getTypeRegistry(); this.reverseInterpreter = reverseInterpreter; this.syntacticScope = functionScope;"
      },
      {
        "txt": "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope); for (Var unflowableVar : unflowableVars) { String name = unflowableVar.getName(); if (functionScope.getVar(name) == unflowableVar) { this.unflowableVarNames.add(name); } } Iterator<Var> varIt = functionScope.getVars(); while (varIt.hasNext()) { Var var = varIt.next();"
      },
      {
        "txt": "if (this.unflowableVarNames.contains(var.getName())) { continue; } if (var.getParentNode() != null && var.getType() == null && // no declared type var.getParentNode().getType() == Token.VAR && !var.isExtern()) { this.functionScope.inferSlotType( var.getName(), getNativeType(VOID_TYPE)); }"
      },
      {
        "txt": "} this.bottomScope = LinkedFlowScope.createEntryLattice( new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis())); } @Override FlowScope createInitialEstimateLattice() { return bottomScope; } @Override FlowScope createEntryLattice() {"
      },
      {
        "txt": "return functionScope; } Multimap<Scope, Var> getAssignedOuterLocalVars() { return assignedOuterLocalVars; } @Override FlowScope flowThrough(Node n, FlowScope input) { if (input == bottomScope) { return input; }"
      },
      {
        "txt": "FlowScope output = input.createChildFlowScope(); output = traverse(n, output); return output; } @Override @SuppressWarnings(\"fallthrough\") List<FlowScope> branchedFlowThrough(Node source, FlowScope input) { FlowScope output = flowThrough(source, input); Node condition = null; FlowScope conditionFlowScope = null;"
      },
      {
        "txt": "BooleanOutcomePair conditionOutcomes = null; List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source); List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size()); for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) { Branch branch = branchEdge.getValue(); FlowScope newScope = output; switch (branch) { case ON_TRUE: if (NodeUtil.isForIn(source)) { Node item = source.getFirstChild();"
      },
      {
        "txt": "if (item.getType() == Token.VAR) { item = item.getFirstChild(); } if (item.getType() == Token.NAME) { FlowScope informed = output.createChildFlowScope(); redeclare(informed, item.getString(), getNativeType(STRING_TYPE)); newScope = informed; } break;"
      },
      {
        "txt": "} case ON_FALSE: if (condition == null) { condition = NodeUtil.getConditionExpression(source); if (condition == null && source.getType() == Token.CASE) { condition = source; if (conditionFlowScope == null) { conditionFlowScope = traverse( condition.getFirstChild(), output.createChildFlowScope()); }"
      },
      {
        "txt": "} } if (condition != null) { if (condition.getType() == Token.AND || condition.getType() == Token.OR) { if (conditionOutcomes == null) { conditionOutcomes = condition.getType() == Token.AND ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope()); }"
      },
      {
        "txt": "newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionOutcomes.getOutcomeFlowScope( condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE); } else { if (conditionFlowScope == null) { conditionFlowScope = traverse(condition, output.createChildFlowScope());"
      },
      {
        "txt": "} newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionFlowScope, branch == Branch.ON_TRUE); } } break; } result.add(newScope.optimize()); }"
      },
      {
        "txt": "return result; } private FlowScope traverse(Node n, FlowScope scope) { switch (n.getType()) { case Token.ASSIGN: scope = traverseAssign(n, scope); break; case Token.NAME: scope = traverseName(n, scope); break;"
      },
      {
        "txt": "case Token.GETPROP: scope = traverseGetProp(n, scope); break; case Token.AND: scope = traverseAnd(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.OR: scope = traverseOr(n, scope).getJoinedFlowScope() .createChildFlowScope();"
      },
      {
        "txt": "break; case Token.HOOK: scope = traverseHook(n, scope); break; case Token.OBJECTLIT: scope = traverseObjectLiteral(n, scope); break; case Token.CALL: scope = traverseCall(n, scope); break;"
      },
      {
        "txt": "case Token.NEW: scope = traverseNew(n, scope); break; case Token.ASSIGN_ADD: case Token.ADD: scope = traverseAdd(n, scope); break; case Token.POS: case Token.NEG: scope = traverse(n.getFirstChild(), scope); // Find types."
      },
      {
        "txt": "n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.NULL: n.setJSType(getNativeType(NULL_TYPE)); break; case Token.VOID: n.setJSType(getNativeType(VOID_TYPE)); break; case Token.ARRAYLIT: scope = traverseArrayLiteral(n, scope);"
      },
      {
        "txt": "break; case Token.REF_SPECIAL: n.setJSType(getNativeType(UNKNOWN_TYPE)); break; case Token.REGEXP: n.setJSType(getNativeType(REGEXP_TYPE)); break; case Token.THIS: n.setJSType(scope.getTypeOfThis()); break;"
      },
      {
        "txt": "case Token.ASSIGN_LSH: case Token.ASSIGN_RSH: case Token.LSH: case Token.RSH: case Token.ASSIGN_URSH: case Token.URSH: case Token.ASSIGN_DIV: case Token.ASSIGN_MOD: case Token.ASSIGN_BITAND: case Token.ASSIGN_BITXOR:"
      },
      {
        "txt": "case Token.ASSIGN_BITOR: case Token.ASSIGN_MUL: case Token.ASSIGN_SUB: case Token.DIV: case Token.MOD: case Token.BITAND: case Token.BITXOR: case Token.BITOR: case Token.MUL: case Token.SUB:"
      },
      {
        "txt": "case Token.DEC: case Token.INC: case Token.BITNOT: case Token.NUMBER: scope = traverseChildren(n, scope); n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.LP: case Token.GET_REF: scope = traverse(n.getFirstChild(), scope);"
      },
      {
        "txt": "n.setJSType(getJSType(n.getFirstChild())); break; case Token.COMMA: scope = traverseChildren(n, scope); n.setJSType(getJSType(n.getLastChild())); break; case Token.STRING: case Token.TYPEOF: scope = traverseChildren(n, scope); n.setJSType(getNativeType(STRING_TYPE));"
      },
      {
        "txt": "break; case Token.LT: case Token.LE: case Token.GT: case Token.GE: case Token.NOT: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE:"
      },
      {
        "txt": "case Token.INSTANCEOF: case Token.IN: case Token.TRUE: case Token.FALSE: scope = traverseChildren(n, scope); n.setJSType(getNativeType(BOOLEAN_TYPE)); break; case Token.GETELEM: scope = traverseGetElem(n, scope); break;"
      },
      {
        "txt": "case Token.EXPR_RESULT: scope = traverseChildren(n, scope); if (n.getFirstChild().getType() == Token.GETPROP) { ensurePropertyDeclared(n.getFirstChild()); } break; case Token.SWITCH: scope = traverse(n.getFirstChild(), scope); break; case Token.VAR:"
      },
      {
        "txt": "case Token.RETURN: case Token.THROW: scope = traverseChildren(n, scope); break; case Token.CATCH: scope = traverseCatch(n, scope); break; } if (n.getType() != Token.FUNCTION) { JSDocInfo info = n.getJSDocInfo();"
      },
      {
        "txt": "if (info != null && info.hasType()) { JSType castType = info.getType().evaluate(syntacticScope); if (n.isQualifiedName() && n.getParent().getType() == Token.EXPR_RESULT) { updateScopeForTypeChange(scope, n, n.getJSType(), castType); } n.setJSType(castType); } } return scope;"
      },
      {
        "txt": "} private FlowScope traverseCatch(Node n, FlowScope scope) { Node name = n.getFirstChild(); JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE); name.setJSType(type); redeclare(scope, name.getString(), type); return scope; } private FlowScope traverseAssign(Node n, FlowScope scope) { Node left = n.getFirstChild();"
      },
      {
        "txt": "Node right = n.getLastChild(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = getJSType(right); n.setJSType(rightType); updateScopeForTypeChange(scope, left, leftType, rightType); return scope; } private void updateScopeForTypeChange( FlowScope scope, Node left, JSType leftType, JSType resultType) {"
      },
      {
        "txt": "Preconditions.checkNotNull(resultType); switch (left.getType()) { case Token.NAME: String varName = left.getString(); Var var = syntacticScope.getVar(varName); if (var != null && var.isLocal() && var.getScope() != syntacticScope) { assignedOuterLocalVars.put(var.getScope(), var); } boolean isVarDeclaration = left.hasChildren(); if (!isVarDeclaration || var == null || var.isTypeInferred()) {"
      },
      {
        "txt": "redeclare(scope, varName, resultType); } left.setJSType(isVarDeclaration || leftType == null ? resultType : null); if (var != null && var.isTypeInferred()) { JSType oldType = var.getType(); var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType)); } break;"
      },
      {
        "txt": "case Token.GETPROP: String qualifiedName = left.getQualifiedName(); if (qualifiedName != null) { scope.inferQualifiedSlot(qualifiedName, leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType); } left.setJSType(resultType); ensurePropertyDefined(left, resultType); break;"
      },
      {
        "txt": "} } private void ensurePropertyDefined(Node getprop, JSType rightType) { ObjectType objectType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (objectType != null) { if (ensurePropertyDeclaredHelper(getprop, objectType)) { return; } String propName = getprop.getLastChild().getString();"
      },
      {
        "txt": "if (!objectType.isPropertyTypeDeclared(propName)) { if (objectType.hasProperty(propName) || !objectType.isInstanceType()) { if (\"prototype\".equals(propName)) { objectType.defineDeclaredProperty(propName, rightType, false); } else { objectType.defineInferredProperty(propName, rightType, false); } } else { if (getprop.getFirstChild().getType() == Token.THIS &&"
      },
      {
        "txt": "getJSType(syntacticScope.getRootNode()).isConstructor()) { objectType.defineInferredProperty(propName, rightType, false); } else { registry.registerPropertyOnType(propName, objectType); } } } } } private void ensurePropertyDeclared(Node getprop) {"
      },
      {
        "txt": "ObjectType ownerType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (ownerType != null) { ensurePropertyDeclaredHelper(getprop, ownerType); } } private boolean ensurePropertyDeclaredHelper( Node getprop, ObjectType objectType) { String propName = getprop.getLastChild().getString(); String qName = getprop.getQualifiedName();"
      },
      {
        "txt": "if (qName != null) { Var var = syntacticScope.getVar(qName); if (var != null && !var.isTypeInferred()) { if (propName.equals(\"prototype\") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))) { return objectType.defineDeclaredProperty( propName, var.getType(), var.isExtern()); }"
      },
      {
        "txt": "} } return false; } private FlowScope traverseName(Node n, FlowScope scope) { String varName = n.getString(); Node value = n.getFirstChild(); JSType type = n.getJSType(); if (value != null) { scope = traverse(value, scope);"
      },
      {
        "txt": "getJSType(value)); return scope; } else { StaticSlot<JSType> var = scope.getSlot(varName); if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) { <extra_id_0> type = var.getType(); if (type == null) { type = getNativeType(UNKNOWN_TYPE); } } }"
      },
      {
        "txt": "} } n.setJSType(type); return scope; } private FlowScope traverseArrayLiteral(Node n, FlowScope scope) { scope = traverseChildren(n, scope); n.setJSType(getNativeType(ARRAY_TYPE)); return scope; }"
      },
      {
        "txt": "private FlowScope traverseObjectLiteral(Node n, FlowScope scope) { if (n.getJSType() != null) { return scope; } ObjectType objectType = registry.createAnonymousObjectType(); for (Node name = n.getFirstChild(); name != null; name = name.getNext().getNext()) { Node value = name.getNext(); scope = traverse(name, scope); scope = traverse(value, scope);"
      },
      {
        "txt": "String memberName = NodeUtil.getStringValue(name); if (memberName != null) { objectType.defineInferredProperty(memberName, getJSType(value), false); } else { n.setJSType(getNativeType(UNKNOWN_TYPE)); return scope; } } n.setJSType(objectType); return scope;"
      },
      {
        "txt": "} private FlowScope traverseAdd(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = left.getNext(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = right.getJSType(); JSType type = getNativeType(UNKNOWN_TYPE); if (leftType != null && rightType != null) { boolean leftIsUnknown = leftType.isUnknownType();"
      },
      {
        "txt": "boolean rightIsUnknown = rightType.isUnknownType(); if (leftIsUnknown && rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if ((!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString())) { type = getNativeType(STRING_TYPE); } else if (leftIsUnknown || rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) { type = getNativeType(NUMBER_TYPE);"
      },
      {
        "txt": "} else { type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE); } } n.setJSType(type); if (n.getType() == Token.ASSIGN_ADD) { updateScopeForTypeChange(scope, left, leftType, type); } return scope; }"
      },
      {
        "txt": "private boolean isAddedAsNumber(JSType type) { return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE)); } private FlowScope traverseHook(Node n, FlowScope scope) { Node condition = n.getFirstChild(); Node trueNode = condition.getNext(); Node falseNode = n.getLastChild(); scope = traverse(condition, scope); FlowScope trueScope = reverseInterpreter."
      },
      {
        "txt": "getPreciserScopeKnowingConditionOutcome( condition, scope, true); FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( condition, scope, false); traverse(trueNode, trueScope.createChildFlowScope()); traverse(falseNode, falseScope.createChildFlowScope()); JSType trueType = trueNode.getJSType(); JSType falseType = falseNode.getJSType(); if (trueType != null && falseType != null) {"
      },
      {
        "txt": "n.setJSType(trueType.getLeastSupertype(falseType)); } else { n.setJSType(null); } return scope.createChildFlowScope(); } private FlowScope traverseCall(Node n, FlowScope scope) { scope = traverseChildren(n, scope); Node left = n.getFirstChild(); JSType functionType = getJSType(left).restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (functionType != null) { if (functionType instanceof FunctionType) { FunctionType fnType = (FunctionType) functionType; n.setJSType(fnType.getReturnType()); updateTypeOfParametersOnClosure(n, fnType); updateTypeOfThisOnClosure(n, fnType); } else if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) { n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)); } }"
      },
      {
        "txt": "return scope; } private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) { int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = iParameter.getJSType(); if (iParameterType instanceof FunctionType) { FunctionType iParameterFnType = (FunctionType) iParameterType; if (i + 1 >= n.getChildCount()) { return;"
      },
      {
        "txt": "} Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgument.getType() == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo() == null) { iArgument.setJSType(iParameterFnType); } } i++;"
      },
      {
        "txt": "} } private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) { if (fnType.getTemplateTypeName() == null) { return; } int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = getJSType(iParameter); iParameterType = iParameterType.restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (iParameterType.isTemplateType()) { if (i + 1 >= n.getChildCount()) { return; } Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgumentType != null) { iArgumentType = iArgumentType.restrictByNotNullOrUndefined(); if (!(iArgumentType instanceof ObjectType)) { compiler.report("
      },
      {
        "txt": "JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE)); return; } boolean foundTemplateTypeOfThisParameter = false; int j = 0; for (Node jParameter : fnType.getParameters()) { JSType jParameterType = getJSType(jParameter); if (jParameterType instanceof FunctionType) { FunctionType jParameterFnType = (FunctionType) jParameterType;"
      },
      {
        "txt": "if (jParameterFnType.getTypeOfThis().equals(iParameterType)) { foundTemplateTypeOfThisParameter = true; if (j + 1 >= n.getChildCount()) { return; } Node jArgument = n.getChildAtIndex(j + 1); JSType jArgumentType = getJSType(jArgument); if (jArgument.getType() == Token.FUNCTION && jArgumentType instanceof FunctionType) { FunctionType jArgumentFnType =(FunctionType) jArgumentType;"
      },
      {
        "txt": "if (jArgumentFnType.getTypeOfThis().isUnknownType()) { jArgument.setJSType( new FunctionType( registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType)); } }"
      },
      {
        "txt": "} } j++; } if (!foundTemplateTypeOfThisParameter) { Node source = fnType.getSource(); compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED)); return; }"
      },
      {
        "txt": "} } i++; } } private FlowScope traverseNew(Node n, FlowScope scope) { Node constructor = n.getFirstChild(); scope = traverse(constructor, scope); JSType constructorType = constructor.getJSType(); JSType type = null;"
      },
      {
        "txt": "if (constructorType != null) { constructorType = constructorType.restrictByNotNullOrUndefined(); if (constructorType.isUnknownType()) { type = getNativeType(UNKNOWN_TYPE); } else if (constructorType instanceof FunctionType) { FunctionType ct = (FunctionType) constructorType; if (ct.isConstructor()) { type = ct.getInstanceType(); } }"
      },
      {
        "txt": "} n.setJSType(type); for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { scope = traverse(arg, scope); } return scope; } private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, true); }"
      },
      {
        "txt": "private FlowScope traverseChildren(Node n, FlowScope scope) { for (Node el = n.getFirstChild(); el != null; el = el.getNext()) { scope = traverse(el, scope); } return scope; } private FlowScope traverseGetElem(Node n, FlowScope scope) { scope = traverseChildren(n, scope); ObjectType objType = ObjectType.cast( getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());"
      },
      {
        "txt": "if (objType != null) { JSType type = objType.getParameterType(); if (type != null) { n.setJSType(type); } } return dereferencePointer(n.getFirstChild(), scope); } private FlowScope traverseGetProp(Node n, FlowScope scope) { Node objNode = n.getFirstChild();"
      },
      {
        "txt": "Node property = n.getLastChild(); scope = traverseChildren(n, scope); n.setJSType( getPropertyType( objNode.getJSType(), property.getString(), n, scope)); return dereferencePointer(n.getFirstChild(), scope); } private FlowScope dereferencePointer(Node n, FlowScope scope) { if (n.getType() == Token.NAME) { JSType type = getJSType(n);"
      },
      {
        "txt": "JSType narrowed = type.restrictByNotNullOrUndefined(); if (type != narrowed) { scope = scope.createChildFlowScope(); redeclare(scope, n.getString(), narrowed); } } return scope; } private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) {"
      },
      {
        "txt": "String qualifiedName = n.getQualifiedName(); StaticSlot<JSType> var = scope.getSlot(qualifiedName); if (var != null) { JSType varType = var.getType(); if (varType != null) { if (varType.equals(getNativeType(UNKNOWN_TYPE)) && var != syntacticScope.getSlot(qualifiedName)) { return getNativeType(CHECKED_UNKNOWN_TYPE); } else { return varType;"
      },
      {
        "txt": "} } } JSType propertyType = null; if (objType != null) { propertyType = objType.findPropertyType(propName); } if ((propertyType == null || propertyType.isUnknownType()) && qualifiedName != null) { ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));"
      },
      {
        "txt": "if (regType != null) { propertyType = regType.getConstructor(); } } return propertyType; } private BooleanOutcomePair traverseOr(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, false); } private BooleanOutcomePair traverseShortCircuitingBinOp("
      },
      {
        "txt": "Node n, FlowScope scope, boolean condition) { Node left = n.getFirstChild(); Node right = n.getLastChild(); BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope()); JSType leftType = left.getJSType(); FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),"
      },
      {
        "txt": "condition); BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp( right, rightScope.createChildFlowScope()); JSType rightType = right.getJSType(); JSType type; BooleanOutcomePair literals; if (leftType != null && rightType != null) { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition); if (leftLiterals.toBooleanOutcomes =="
      },
      {
        "txt": "BooleanLiteralSet.get(!condition)) { type = leftType; literals = leftLiterals; } else { type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } if (literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type)) {"
      },
      {
        "txt": "if (type instanceof UnionType) { type = ((UnionType) type).getRestrictedUnion( getNativeType(BOOLEAN_TYPE)); } } } else { type = null; literals = new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(),"
      },
      {
        "txt": "rightLiterals.getJoinedFlowScope()); } n.setJSType(type); return literals; } private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n, FlowScope scope) { switch (n.getType()) { case Token.AND: return traverseAnd(n, scope);"
      },
      {
        "txt": "case Token.OR: return traverseOr(n, scope); default: scope = traverse(n, scope); return newBooleanOutcomePair(n.getJSType(), scope); } } BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left, BooleanOutcomePair right, boolean condition) { return new BooleanOutcomePair("
      },
      {
        "txt": "getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes, condition), getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope()); } static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition) { return right.union(left.intersection(BooleanLiteralSet.get(!condition))); } private final class BooleanOutcomePair {"
      },
      {
        "txt": "final BooleanLiteralSet toBooleanOutcomes; final BooleanLiteralSet booleanValues; final FlowScope leftScope; final FlowScope rightScope; FlowScope joinedScope = null; BooleanOutcomePair( BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues, FlowScope leftScope, FlowScope rightScope) { this.toBooleanOutcomes = toBooleanOutcomes; this.booleanValues = booleanValues;"
      },
      {
        "txt": "this.leftScope = leftScope; this.rightScope = rightScope; } FlowScope getJoinedFlowScope() { if (joinedScope == null) { if (leftScope == rightScope) { joinedScope = rightScope; } else { joinedScope = join(leftScope, rightScope); }"
      },
      {
        "txt": "} return joinedScope; } FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) { if (nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome) { return rightScope; } else { return getJoinedFlowScope(); }"
      },
      {
        "txt": "} } private BooleanOutcomePair newBooleanOutcomePair( JSType jsType, FlowScope flowScope) { if (jsType == null) { return new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope); } return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?"
      },
      {
        "txt": "BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope); } private void redeclare(FlowScope scope, String varName, JSType varType) { if (varType == null) { varType = getNativeType(JSTypeNative.UNKNOWN_TYPE); } if (unflowableVarNames.contains(varName)) { return; }"
      },
      {
        "txt": "scope.inferSlotType(varName, varType); } private JSType getJSType(Node n) { JSType jsType = n.getJSType(); if (jsType == null) { return getNativeType(UNKNOWN_TYPE); } else { return jsType; } }"
      },
      {
        "txt": "private JSType getNativeType(JSTypeNative typeId) { return registry.getNativeType(typeId); }"
      }
    ]
  },
  {
    "id": 545,
    "file_path": "src/com/google/javascript/jscomp/TypeInference.java",
    "start-bug-line": 644,
    "end-bug-line": 644,
    "bug": "",
    "fix": "if (!unflowable && !nonLocalInferredSlot) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE;"
      },
      {
        "txt": "import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE; import com.google.common.base.Preconditions; import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.Scope.Var;"
      },
      {
        "txt": "import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.BooleanLiteralSet; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.JSTypeNative; import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.ObjectType;"
      },
      {
        "txt": "import com.google.javascript.rhino.jstype.StaticSlot; import com.google.javascript.rhino.jstype.UnionType; import java.util.Collection; import java.util.Iterator; import java.util.List; import java.util.Set; class TypeInference extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> { static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\", \"The template type must be an object type\"); static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\", \"A function type with the template type as the type of this must be a \" + \"parameter type\"); private final AbstractCompiler compiler; private final JSTypeRegistry registry; private final ReverseAbstractInterpreter reverseInterpreter;"
      },
      {
        "txt": "private final Scope syntacticScope; private final FlowScope functionScope; private final FlowScope bottomScope; private final Multimap<Scope, Var> assignedOuterLocalVars = HashMultimap.create(); private final Set<String> unflowableVarNames = Sets.newHashSet(); TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope) { this(compiler, cfg, reverseInterpreter, functionScope,"
      },
      {
        "txt": "ImmutableSet.<Var>of()); } TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars) { super(cfg, new LinkedFlowScope.FlowScopeJoinOp()); this.compiler = compiler; this.registry = compiler.getTypeRegistry(); this.reverseInterpreter = reverseInterpreter; this.syntacticScope = functionScope;"
      },
      {
        "txt": "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope); for (Var unflowableVar : unflowableVars) { String name = unflowableVar.getName(); if (functionScope.getVar(name) == unflowableVar) { this.unflowableVarNames.add(name); } } Iterator<Var> varIt = functionScope.getVars(); while (varIt.hasNext()) { Var var = varIt.next();"
      },
      {
        "txt": "if (this.unflowableVarNames.contains(var.getName())) { continue; } if (var.getParentNode() != null && var.getType() == null && // no declared type var.getParentNode().getType() == Token.VAR && !var.isExtern()) { this.functionScope.inferSlotType( var.getName(), getNativeType(VOID_TYPE)); }"
      },
      {
        "txt": "} this.bottomScope = LinkedFlowScope.createEntryLattice( new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis())); } @Override FlowScope createInitialEstimateLattice() { return bottomScope; } @Override FlowScope createEntryLattice() {"
      },
      {
        "txt": "return functionScope; } Multimap<Scope, Var> getAssignedOuterLocalVars() { return assignedOuterLocalVars; } @Override FlowScope flowThrough(Node n, FlowScope input) { if (input == bottomScope) { return input; }"
      },
      {
        "txt": "FlowScope output = input.createChildFlowScope(); output = traverse(n, output); return output; } @Override @SuppressWarnings(\"fallthrough\") List<FlowScope> branchedFlowThrough(Node source, FlowScope input) { FlowScope output = flowThrough(source, input); Node condition = null; FlowScope conditionFlowScope = null;"
      },
      {
        "txt": "BooleanOutcomePair conditionOutcomes = null; List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source); List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size()); for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) { Branch branch = branchEdge.getValue(); FlowScope newScope = output; switch (branch) { case ON_TRUE: if (NodeUtil.isForIn(source)) { Node item = source.getFirstChild();"
      },
      {
        "txt": "if (item.getType() == Token.VAR) { item = item.getFirstChild(); } if (item.getType() == Token.NAME) { FlowScope informed = output.createChildFlowScope(); redeclare(informed, item.getString(), getNativeType(STRING_TYPE)); newScope = informed; } break;"
      },
      {
        "txt": "} case ON_FALSE: if (condition == null) { condition = NodeUtil.getConditionExpression(source); if (condition == null && source.getType() == Token.CASE) { condition = source; if (conditionFlowScope == null) { conditionFlowScope = traverse( condition.getFirstChild(), output.createChildFlowScope()); }"
      },
      {
        "txt": "} } if (condition != null) { if (condition.getType() == Token.AND || condition.getType() == Token.OR) { if (conditionOutcomes == null) { conditionOutcomes = condition.getType() == Token.AND ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope()); }"
      },
      {
        "txt": "newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionOutcomes.getOutcomeFlowScope( condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE); } else { if (conditionFlowScope == null) { conditionFlowScope = traverse(condition, output.createChildFlowScope());"
      },
      {
        "txt": "} newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition, conditionFlowScope, branch == Branch.ON_TRUE); } } break; } result.add(newScope.optimize()); }"
      },
      {
        "txt": "return result; } private FlowScope traverse(Node n, FlowScope scope) { switch (n.getType()) { case Token.ASSIGN: scope = traverseAssign(n, scope); break; case Token.NAME: scope = traverseName(n, scope); break;"
      },
      {
        "txt": "case Token.GETPROP: scope = traverseGetProp(n, scope); break; case Token.AND: scope = traverseAnd(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.OR: scope = traverseOr(n, scope).getJoinedFlowScope() .createChildFlowScope();"
      },
      {
        "txt": "break; case Token.HOOK: scope = traverseHook(n, scope); break; case Token.OBJECTLIT: scope = traverseObjectLiteral(n, scope); break; case Token.CALL: scope = traverseCall(n, scope); break;"
      },
      {
        "txt": "case Token.NEW: scope = traverseNew(n, scope); break; case Token.ASSIGN_ADD: case Token.ADD: scope = traverseAdd(n, scope); break; case Token.POS: case Token.NEG: scope = traverse(n.getFirstChild(), scope); // Find types."
      },
      {
        "txt": "n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.NULL: n.setJSType(getNativeType(NULL_TYPE)); break; case Token.VOID: n.setJSType(getNativeType(VOID_TYPE)); break; case Token.ARRAYLIT: scope = traverseArrayLiteral(n, scope);"
      },
      {
        "txt": "break; case Token.REF_SPECIAL: n.setJSType(getNativeType(UNKNOWN_TYPE)); break; case Token.REGEXP: n.setJSType(getNativeType(REGEXP_TYPE)); break; case Token.THIS: n.setJSType(scope.getTypeOfThis()); break;"
      },
      {
        "txt": "case Token.ASSIGN_LSH: case Token.ASSIGN_RSH: case Token.LSH: case Token.RSH: case Token.ASSIGN_URSH: case Token.URSH: case Token.ASSIGN_DIV: case Token.ASSIGN_MOD: case Token.ASSIGN_BITAND: case Token.ASSIGN_BITXOR:"
      },
      {
        "txt": "case Token.ASSIGN_BITOR: case Token.ASSIGN_MUL: case Token.ASSIGN_SUB: case Token.DIV: case Token.MOD: case Token.BITAND: case Token.BITXOR: case Token.BITOR: case Token.MUL: case Token.SUB:"
      },
      {
        "txt": "case Token.DEC: case Token.INC: case Token.BITNOT: case Token.NUMBER: scope = traverseChildren(n, scope); n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.LP: case Token.GET_REF: scope = traverse(n.getFirstChild(), scope);"
      },
      {
        "txt": "n.setJSType(getJSType(n.getFirstChild())); break; case Token.COMMA: scope = traverseChildren(n, scope); n.setJSType(getJSType(n.getLastChild())); break; case Token.STRING: case Token.TYPEOF: scope = traverseChildren(n, scope); n.setJSType(getNativeType(STRING_TYPE));"
      },
      {
        "txt": "break; case Token.LT: case Token.LE: case Token.GT: case Token.GE: case Token.NOT: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE:"
      },
      {
        "txt": "case Token.INSTANCEOF: case Token.IN: case Token.TRUE: case Token.FALSE: scope = traverseChildren(n, scope); n.setJSType(getNativeType(BOOLEAN_TYPE)); break; case Token.GETELEM: scope = traverseGetElem(n, scope); break;"
      },
      {
        "txt": "case Token.EXPR_RESULT: scope = traverseChildren(n, scope); if (n.getFirstChild().getType() == Token.GETPROP) { ensurePropertyDeclared(n.getFirstChild()); } break; case Token.SWITCH: scope = traverse(n.getFirstChild(), scope); break; case Token.VAR:"
      },
      {
        "txt": "case Token.RETURN: case Token.THROW: scope = traverseChildren(n, scope); break; case Token.CATCH: scope = traverseCatch(n, scope); break; } if (n.getType() != Token.FUNCTION) { JSDocInfo info = n.getJSDocInfo();"
      },
      {
        "txt": "if (info != null && info.hasType()) { JSType castType = info.getType().evaluate(syntacticScope); if (n.isQualifiedName() && n.getParent().getType() == Token.EXPR_RESULT) { updateScopeForTypeChange(scope, n, n.getJSType(), castType); } n.setJSType(castType); } } return scope;"
      },
      {
        "txt": "} private FlowScope traverseCatch(Node n, FlowScope scope) { Node name = n.getFirstChild(); JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE); name.setJSType(type); redeclare(scope, name.getString(), type); return scope; } private FlowScope traverseAssign(Node n, FlowScope scope) { Node left = n.getFirstChild();"
      },
      {
        "txt": "Node right = n.getLastChild(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = getJSType(right); n.setJSType(rightType); updateScopeForTypeChange(scope, left, leftType, rightType); return scope; } private void updateScopeForTypeChange( FlowScope scope, Node left, JSType leftType, JSType resultType) {"
      },
      {
        "txt": "Preconditions.checkNotNull(resultType); switch (left.getType()) { case Token.NAME: String varName = left.getString(); Var var = syntacticScope.getVar(varName); if (var != null && var.isLocal() && var.getScope() != syntacticScope) { assignedOuterLocalVars.put(var.getScope(), var); } boolean isVarDeclaration = left.hasChildren(); if (!isVarDeclaration || var == null || var.isTypeInferred()) {"
      },
      {
        "txt": "redeclare(scope, varName, resultType); } left.setJSType(isVarDeclaration || leftType == null ? resultType : null); if (var != null && var.isTypeInferred()) { JSType oldType = var.getType(); var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType)); } break;"
      },
      {
        "txt": "case Token.GETPROP: String qualifiedName = left.getQualifiedName(); if (qualifiedName != null) { scope.inferQualifiedSlot(qualifiedName, leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType); } left.setJSType(resultType); ensurePropertyDefined(left, resultType); break;"
      },
      {
        "txt": "} } private void ensurePropertyDefined(Node getprop, JSType rightType) { ObjectType objectType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (objectType != null) { if (ensurePropertyDeclaredHelper(getprop, objectType)) { return; } String propName = getprop.getLastChild().getString();"
      },
      {
        "txt": "if (!objectType.isPropertyTypeDeclared(propName)) { if (objectType.hasProperty(propName) || !objectType.isInstanceType()) { if (\"prototype\".equals(propName)) { objectType.defineDeclaredProperty(propName, rightType, false); } else { objectType.defineInferredProperty(propName, rightType, false); } } else { if (getprop.getFirstChild().getType() == Token.THIS &&"
      },
      {
        "txt": "getJSType(syntacticScope.getRootNode()).isConstructor()) { objectType.defineInferredProperty(propName, rightType, false); } else { registry.registerPropertyOnType(propName, objectType); } } } } } private void ensurePropertyDeclared(Node getprop) {"
      },
      {
        "txt": "ObjectType ownerType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (ownerType != null) { ensurePropertyDeclaredHelper(getprop, ownerType); } } private boolean ensurePropertyDeclaredHelper( Node getprop, ObjectType objectType) { String propName = getprop.getLastChild().getString(); String qName = getprop.getQualifiedName();"
      },
      {
        "txt": "if (qName != null) { Var var = syntacticScope.getVar(qName); if (var != null && !var.isTypeInferred()) { if (propName.equals(\"prototype\") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))) { return objectType.defineDeclaredProperty( propName, var.getType(), var.isExtern()); }"
      },
      {
        "txt": "} } return false; } private FlowScope traverseName(Node n, FlowScope scope) { String varName = n.getString(); Node value = n.getFirstChild(); JSType type = n.getJSType(); if (value != null) { scope = traverse(value, scope);"
      },
      {
        "txt": "getJSType(value)); return scope; } else { StaticSlot<JSType> var = scope.getSlot(varName); if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) { <extra_id_0> if (type == null) { type = getNativeType(UNKNOWN_TYPE); } } } n.setJSType(type);"
      },
      {
        "txt": "} n.setJSType(type); return scope; } private FlowScope traverseArrayLiteral(Node n, FlowScope scope) { scope = traverseChildren(n, scope); n.setJSType(getNativeType(ARRAY_TYPE)); return scope; } private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {"
      },
      {
        "txt": "if (n.getJSType() != null) { return scope; } ObjectType objectType = registry.createAnonymousObjectType(); for (Node name = n.getFirstChild(); name != null; name = name.getNext().getNext()) { Node value = name.getNext(); scope = traverse(name, scope); scope = traverse(value, scope); String memberName = NodeUtil.getStringValue(name);"
      },
      {
        "txt": "if (memberName != null) { objectType.defineInferredProperty(memberName, getJSType(value), false); } else { n.setJSType(getNativeType(UNKNOWN_TYPE)); return scope; } } n.setJSType(objectType); return scope; }"
      },
      {
        "txt": "private FlowScope traverseAdd(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = left.getNext(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = right.getJSType(); JSType type = getNativeType(UNKNOWN_TYPE); if (leftType != null && rightType != null) { boolean leftIsUnknown = leftType.isUnknownType(); boolean rightIsUnknown = rightType.isUnknownType();"
      },
      {
        "txt": "if (leftIsUnknown && rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if ((!leftIsUnknown && leftType.isString()) || (!rightIsUnknown && rightType.isString())) { type = getNativeType(STRING_TYPE); } else if (leftIsUnknown || rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) { type = getNativeType(NUMBER_TYPE); } else {"
      },
      {
        "txt": "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE); } } n.setJSType(type); if (n.getType() == Token.ASSIGN_ADD) { updateScopeForTypeChange(scope, left, leftType, type); } return scope; } private boolean isAddedAsNumber(JSType type) {"
      },
      {
        "txt": "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE)); } private FlowScope traverseHook(Node n, FlowScope scope) { Node condition = n.getFirstChild(); Node trueNode = condition.getNext(); Node falseNode = n.getLastChild(); scope = traverse(condition, scope); FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome("
      },
      {
        "txt": "condition, scope, true); FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( condition, scope, false); traverse(trueNode, trueScope.createChildFlowScope()); traverse(falseNode, falseScope.createChildFlowScope()); JSType trueType = trueNode.getJSType(); JSType falseType = falseNode.getJSType(); if (trueType != null && falseType != null) { n.setJSType(trueType.getLeastSupertype(falseType));"
      },
      {
        "txt": "} else { n.setJSType(null); } return scope.createChildFlowScope(); } private FlowScope traverseCall(Node n, FlowScope scope) { scope = traverseChildren(n, scope); Node left = n.getFirstChild(); JSType functionType = getJSType(left).restrictByNotNullOrUndefined(); if (functionType != null) {"
      },
      {
        "txt": "if (functionType instanceof FunctionType) { FunctionType fnType = (FunctionType) functionType; n.setJSType(fnType.getReturnType()); updateTypeOfParametersOnClosure(n, fnType); updateTypeOfThisOnClosure(n, fnType); } else if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) { n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)); } } return scope;"
      },
      {
        "txt": "} private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) { int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = iParameter.getJSType(); if (iParameterType instanceof FunctionType) { FunctionType iParameterFnType = (FunctionType) iParameterType; if (i + 1 >= n.getChildCount()) { return; }"
      },
      {
        "txt": "Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgument.getType() == Token.FUNCTION && iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo() == null) { iArgument.setJSType(iParameterFnType); } } i++; }"
      },
      {
        "txt": "} private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) { if (fnType.getTemplateTypeName() == null) { return; } int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = getJSType(iParameter); iParameterType = iParameterType.restrictByNotNullOrUndefined(); if (iParameterType.isTemplateType()) {"
      },
      {
        "txt": "if (i + 1 >= n.getChildCount()) { return; } Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgumentType != null) { iArgumentType = iArgumentType.restrictByNotNullOrUndefined(); if (!(iArgumentType instanceof ObjectType)) { compiler.report( JSError.make(NodeUtil.getSourceName(iArgument), iArgument,"
      },
      {
        "txt": "TEMPLATE_TYPE_NOT_OBJECT_TYPE)); return; } boolean foundTemplateTypeOfThisParameter = false; int j = 0; for (Node jParameter : fnType.getParameters()) { JSType jParameterType = getJSType(jParameter); if (jParameterType instanceof FunctionType) { FunctionType jParameterFnType = (FunctionType) jParameterType; if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {"
      },
      {
        "txt": "foundTemplateTypeOfThisParameter = true; if (j + 1 >= n.getChildCount()) { return; } Node jArgument = n.getChildAtIndex(j + 1); JSType jArgumentType = getJSType(jArgument); if (jArgument.getType() == Token.FUNCTION && jArgumentType instanceof FunctionType) { FunctionType jArgumentFnType =(FunctionType) jArgumentType; if (jArgumentFnType.getTypeOfThis().isUnknownType()) {"
      },
      {
        "txt": "jArgument.setJSType( new FunctionType( registry, jArgumentFnType.getReferenceName(), jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType)); } } }"
      },
      {
        "txt": "} j++; } if (!foundTemplateTypeOfThisParameter) { Node source = fnType.getSource(); compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED)); return; } }"
      },
      {
        "txt": "} i++; } } private FlowScope traverseNew(Node n, FlowScope scope) { Node constructor = n.getFirstChild(); scope = traverse(constructor, scope); JSType constructorType = constructor.getJSType(); JSType type = null; if (constructorType != null) {"
      },
      {
        "txt": "constructorType = constructorType.restrictByNotNullOrUndefined(); if (constructorType.isUnknownType()) { type = getNativeType(UNKNOWN_TYPE); } else if (constructorType instanceof FunctionType) { FunctionType ct = (FunctionType) constructorType; if (ct.isConstructor()) { type = ct.getInstanceType(); } } }"
      },
      {
        "txt": "n.setJSType(type); for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { scope = traverse(arg, scope); } return scope; } private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, true); } private FlowScope traverseChildren(Node n, FlowScope scope) {"
      },
      {
        "txt": "for (Node el = n.getFirstChild(); el != null; el = el.getNext()) { scope = traverse(el, scope); } return scope; } private FlowScope traverseGetElem(Node n, FlowScope scope) { scope = traverseChildren(n, scope); ObjectType objType = ObjectType.cast( getJSType(n.getFirstChild()).restrictByNotNullOrUndefined()); if (objType != null) {"
      },
      {
        "txt": "JSType type = objType.getParameterType(); if (type != null) { n.setJSType(type); } } return dereferencePointer(n.getFirstChild(), scope); } private FlowScope traverseGetProp(Node n, FlowScope scope) { Node objNode = n.getFirstChild(); Node property = n.getLastChild();"
      },
      {
        "txt": "scope = traverseChildren(n, scope); n.setJSType( getPropertyType( objNode.getJSType(), property.getString(), n, scope)); return dereferencePointer(n.getFirstChild(), scope); } private FlowScope dereferencePointer(Node n, FlowScope scope) { if (n.getType() == Token.NAME) { JSType type = getJSType(n); JSType narrowed = type.restrictByNotNullOrUndefined();"
      },
      {
        "txt": "if (type != narrowed) { scope = scope.createChildFlowScope(); redeclare(scope, n.getString(), narrowed); } } return scope; } private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) { String qualifiedName = n.getQualifiedName();"
      },
      {
        "txt": "StaticSlot<JSType> var = scope.getSlot(qualifiedName); if (var != null) { JSType varType = var.getType(); if (varType != null) { if (varType.equals(getNativeType(UNKNOWN_TYPE)) && var != syntacticScope.getSlot(qualifiedName)) { return getNativeType(CHECKED_UNKNOWN_TYPE); } else { return varType; }"
      },
      {
        "txt": "} } JSType propertyType = null; if (objType != null) { propertyType = objType.findPropertyType(propName); } if ((propertyType == null || propertyType.isUnknownType()) && qualifiedName != null) { ObjectType regType = ObjectType.cast(registry.getType(qualifiedName)); if (regType != null) {"
      },
      {
        "txt": "propertyType = regType.getConstructor(); } } return propertyType; } private BooleanOutcomePair traverseOr(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, false); } private BooleanOutcomePair traverseShortCircuitingBinOp( Node n, FlowScope scope, boolean condition) {"
      },
      {
        "txt": "Node left = n.getFirstChild(); Node right = n.getLastChild(); BooleanOutcomePair leftLiterals = traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope()); JSType leftType = left.getJSType(); FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( left, leftLiterals.getOutcomeFlowScope(left.getType(), condition), condition);"
      },
      {
        "txt": "BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp( right, rightScope.createChildFlowScope()); JSType rightType = right.getJSType(); JSType type; BooleanOutcomePair literals; if (leftType != null && rightType != null) { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition); if (leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get(!condition)) {"
      },
      {
        "txt": "type = leftType; literals = leftLiterals; } else { type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } if (literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type)) { if (type instanceof UnionType) {"
      },
      {
        "txt": "type = ((UnionType) type).getRestrictedUnion( getNativeType(BOOLEAN_TYPE)); } } } else { type = null; literals = new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(), rightLiterals.getJoinedFlowScope());"
      },
      {
        "txt": "} n.setJSType(type); return literals; } private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n, FlowScope scope) { switch (n.getType()) { case Token.AND: return traverseAnd(n, scope); case Token.OR:"
      },
      {
        "txt": "return traverseOr(n, scope); default: scope = traverse(n, scope); return newBooleanOutcomePair(n.getJSType(), scope); } } BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left, BooleanOutcomePair right, boolean condition) { return new BooleanOutcomePair( getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,"
      },
      {
        "txt": "condition), getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope()); } static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition) { return right.union(left.intersection(BooleanLiteralSet.get(!condition))); } private final class BooleanOutcomePair { final BooleanLiteralSet toBooleanOutcomes;"
      },
      {
        "txt": "final BooleanLiteralSet booleanValues; final FlowScope leftScope; final FlowScope rightScope; FlowScope joinedScope = null; BooleanOutcomePair( BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues, FlowScope leftScope, FlowScope rightScope) { this.toBooleanOutcomes = toBooleanOutcomes; this.booleanValues = booleanValues; this.leftScope = leftScope;"
      },
      {
        "txt": "this.rightScope = rightScope; } FlowScope getJoinedFlowScope() { if (joinedScope == null) { if (leftScope == rightScope) { joinedScope = rightScope; } else { joinedScope = join(leftScope, rightScope); } }"
      },
      {
        "txt": "return joinedScope; } FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) { if (nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome) { return rightScope; } else { return getJoinedFlowScope(); } }"
      },
      {
        "txt": "} private BooleanOutcomePair newBooleanOutcomePair( JSType jsType, FlowScope flowScope) { if (jsType == null) { return new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope); } return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,"
      },
      {
        "txt": "flowScope, flowScope); } private void redeclare(FlowScope scope, String varName, JSType varType) { if (varType == null) { varType = getNativeType(JSTypeNative.UNKNOWN_TYPE); } if (unflowableVarNames.contains(varName)) { return; } scope.inferSlotType(varName, varType);"
      },
      {
        "txt": "} private JSType getJSType(Node n) { JSType jsType = n.getJSType(); if (jsType == null) { return getNativeType(UNKNOWN_TYPE); } else { return jsType; } } private JSType getNativeType(JSTypeNative typeId) {"
      },
      {
        "txt": "return registry.getNativeType(typeId); }"
      }
    ]
  },
  {
    "id": 546,
    "file_path": "src/com/google/javascript/jscomp/TypeInference.java",
    "start-bug-line": 647,
    "end-bug-line": 647,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import static com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_TYPE;"
      },
      {
        "txt": "import static com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.CHECKED_UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NULL_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.REGEXP_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.STRING_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE; import static com.google.javascript.rhino.jstype.JSTypeNative.VOID_TYPE; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.common.collect.HashMultimap; import com.google.common.collect.ImmutableSet; import com.google.common.collect.Lists; import com.google.common.collect.Multimap; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ControlFlowGraph.Branch; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.Token; import com.google.javascript.rhino.jstype.BooleanLiteralSet; import com.google.javascript.rhino.jstype.FunctionType; import com.google.javascript.rhino.jstype.JSType; import com.google.javascript.rhino.jstype.JSTypeNative; import com.google.javascript.rhino.jstype.JSTypeRegistry; import com.google.javascript.rhino.jstype.ObjectType; import com.google.javascript.rhino.jstype.StaticSlot; import com.google.javascript.rhino.jstype.UnionType; import java.util.Collection;"
      },
      {
        "txt": "import java.util.Iterator; import java.util.List; import java.util.Set; class TypeInference extends DataFlowAnalysis.BranchedForwardDataFlowAnalysis<Node, FlowScope> { static final DiagnosticType TEMPLATE_TYPE_NOT_OBJECT_TYPE = DiagnosticType.error( \"JSC_TEMPLATE_TYPE_NOT_OBJECT_TYPE\", \"The template type must be an object type\"); static final DiagnosticType TEMPLATE_TYPE_OF_THIS_EXPECTED ="
      },
      {
        "txt": "DiagnosticType.error( \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\", \"A function type with the template type as the type of this must be a \" + \"parameter type\"); private final AbstractCompiler compiler; private final JSTypeRegistry registry; private final ReverseAbstractInterpreter reverseInterpreter; private final Scope syntacticScope; private final FlowScope functionScope; private final FlowScope bottomScope;"
      },
      {
        "txt": "private final Multimap<Scope, Var> assignedOuterLocalVars = HashMultimap.create(); private final Set<String> unflowableVarNames = Sets.newHashSet(); TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg, ReverseAbstractInterpreter reverseInterpreter, Scope functionScope) { this(compiler, cfg, reverseInterpreter, functionScope, ImmutableSet.<Var>of()); } TypeInference(AbstractCompiler compiler, ControlFlowGraph<Node> cfg,"
      },
      {
        "txt": "ReverseAbstractInterpreter reverseInterpreter, Scope functionScope, Collection<Var> unflowableVars) { super(cfg, new LinkedFlowScope.FlowScopeJoinOp()); this.compiler = compiler; this.registry = compiler.getTypeRegistry(); this.reverseInterpreter = reverseInterpreter; this.syntacticScope = functionScope; this.functionScope = LinkedFlowScope.createEntryLattice(functionScope); for (Var unflowableVar : unflowableVars) { String name = unflowableVar.getName();"
      },
      {
        "txt": "if (functionScope.getVar(name) == unflowableVar) { this.unflowableVarNames.add(name); } } Iterator<Var> varIt = functionScope.getVars(); while (varIt.hasNext()) { Var var = varIt.next(); if (this.unflowableVarNames.contains(var.getName())) { continue; }"
      },
      {
        "txt": "if (var.getParentNode() != null && var.getType() == null && // no declared type var.getParentNode().getType() == Token.VAR && !var.isExtern()) { this.functionScope.inferSlotType( var.getName(), getNativeType(VOID_TYPE)); } } this.bottomScope = LinkedFlowScope.createEntryLattice( new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));"
      },
      {
        "txt": "} @Override FlowScope createInitialEstimateLattice() { return bottomScope; } @Override FlowScope createEntryLattice() { return functionScope; } Multimap<Scope, Var> getAssignedOuterLocalVars() {"
      },
      {
        "txt": "return assignedOuterLocalVars; } @Override FlowScope flowThrough(Node n, FlowScope input) { if (input == bottomScope) { return input; } FlowScope output = input.createChildFlowScope(); output = traverse(n, output); return output;"
      },
      {
        "txt": "} @Override @SuppressWarnings(\"fallthrough\") List<FlowScope> branchedFlowThrough(Node source, FlowScope input) { FlowScope output = flowThrough(source, input); Node condition = null; FlowScope conditionFlowScope = null; BooleanOutcomePair conditionOutcomes = null; List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source); List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());"
      },
      {
        "txt": "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges) { Branch branch = branchEdge.getValue(); FlowScope newScope = output; switch (branch) { case ON_TRUE: if (NodeUtil.isForIn(source)) { Node item = source.getFirstChild(); if (item.getType() == Token.VAR) { item = item.getFirstChild(); }"
      },
      {
        "txt": "if (item.getType() == Token.NAME) { FlowScope informed = output.createChildFlowScope(); redeclare(informed, item.getString(), getNativeType(STRING_TYPE)); newScope = informed; } break; } case ON_FALSE: if (condition == null) {"
      },
      {
        "txt": "condition = NodeUtil.getConditionExpression(source); if (condition == null && source.getType() == Token.CASE) { condition = source; if (conditionFlowScope == null) { conditionFlowScope = traverse( condition.getFirstChild(), output.createChildFlowScope()); } } } if (condition != null) {"
      },
      {
        "txt": "if (condition.getType() == Token.AND || condition.getType() == Token.OR) { if (conditionOutcomes == null) { conditionOutcomes = condition.getType() == Token.AND ? traverseAnd(condition, output.createChildFlowScope()) : traverseOr(condition, output.createChildFlowScope()); } newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome( condition,"
      },
      {
        "txt": "conditionOutcomes.getOutcomeFlowScope( condition.getType(), branch == Branch.ON_TRUE), branch == Branch.ON_TRUE); } else { if (conditionFlowScope == null) { conditionFlowScope = traverse(condition, output.createChildFlowScope()); } newScope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome("
      },
      {
        "txt": "condition, conditionFlowScope, branch == Branch.ON_TRUE); } } break; } result.add(newScope.optimize()); } return result; } private FlowScope traverse(Node n, FlowScope scope) {"
      },
      {
        "txt": "switch (n.getType()) { case Token.ASSIGN: scope = traverseAssign(n, scope); break; case Token.NAME: scope = traverseName(n, scope); break; case Token.GETPROP: scope = traverseGetProp(n, scope); break;"
      },
      {
        "txt": "case Token.AND: scope = traverseAnd(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.OR: scope = traverseOr(n, scope).getJoinedFlowScope() .createChildFlowScope(); break; case Token.HOOK: scope = traverseHook(n, scope);"
      },
      {
        "txt": "break; case Token.OBJECTLIT: scope = traverseObjectLiteral(n, scope); break; case Token.CALL: scope = traverseCall(n, scope); break; case Token.NEW: scope = traverseNew(n, scope); break;"
      },
      {
        "txt": "case Token.ASSIGN_ADD: case Token.ADD: scope = traverseAdd(n, scope); break; case Token.POS: case Token.NEG: scope = traverse(n.getFirstChild(), scope); // Find types. n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.NULL:"
      },
      {
        "txt": "n.setJSType(getNativeType(NULL_TYPE)); break; case Token.VOID: n.setJSType(getNativeType(VOID_TYPE)); break; case Token.ARRAYLIT: scope = traverseArrayLiteral(n, scope); break; case Token.REF_SPECIAL: n.setJSType(getNativeType(UNKNOWN_TYPE));"
      },
      {
        "txt": "break; case Token.REGEXP: n.setJSType(getNativeType(REGEXP_TYPE)); break; case Token.THIS: n.setJSType(scope.getTypeOfThis()); break; case Token.ASSIGN_LSH: case Token.ASSIGN_RSH: case Token.LSH:"
      },
      {
        "txt": "case Token.RSH: case Token.ASSIGN_URSH: case Token.URSH: case Token.ASSIGN_DIV: case Token.ASSIGN_MOD: case Token.ASSIGN_BITAND: case Token.ASSIGN_BITXOR: case Token.ASSIGN_BITOR: case Token.ASSIGN_MUL: case Token.ASSIGN_SUB:"
      },
      {
        "txt": "case Token.DIV: case Token.MOD: case Token.BITAND: case Token.BITXOR: case Token.BITOR: case Token.MUL: case Token.SUB: case Token.DEC: case Token.INC: case Token.BITNOT:"
      },
      {
        "txt": "case Token.NUMBER: scope = traverseChildren(n, scope); n.setJSType(getNativeType(NUMBER_TYPE)); break; case Token.LP: case Token.GET_REF: scope = traverse(n.getFirstChild(), scope); n.setJSType(getJSType(n.getFirstChild())); break; case Token.COMMA:"
      },
      {
        "txt": "scope = traverseChildren(n, scope); n.setJSType(getJSType(n.getLastChild())); break; case Token.STRING: case Token.TYPEOF: scope = traverseChildren(n, scope); n.setJSType(getNativeType(STRING_TYPE)); break; case Token.LT: case Token.LE:"
      },
      {
        "txt": "case Token.GT: case Token.GE: case Token.NOT: case Token.EQ: case Token.NE: case Token.SHEQ: case Token.SHNE: case Token.INSTANCEOF: case Token.IN: case Token.TRUE:"
      },
      {
        "txt": "case Token.FALSE: scope = traverseChildren(n, scope); n.setJSType(getNativeType(BOOLEAN_TYPE)); break; case Token.GETELEM: scope = traverseGetElem(n, scope); break; case Token.EXPR_RESULT: scope = traverseChildren(n, scope); if (n.getFirstChild().getType() == Token.GETPROP) {"
      },
      {
        "txt": "ensurePropertyDeclared(n.getFirstChild()); } break; case Token.SWITCH: scope = traverse(n.getFirstChild(), scope); break; case Token.VAR: case Token.RETURN: case Token.THROW: scope = traverseChildren(n, scope);"
      },
      {
        "txt": "break; case Token.CATCH: scope = traverseCatch(n, scope); break; } if (n.getType() != Token.FUNCTION) { JSDocInfo info = n.getJSDocInfo(); if (info != null && info.hasType()) { JSType castType = info.getType().evaluate(syntacticScope); if (n.isQualifiedName() &&"
      },
      {
        "txt": "n.getParent().getType() == Token.EXPR_RESULT) { updateScopeForTypeChange(scope, n, n.getJSType(), castType); } n.setJSType(castType); } } return scope; } private FlowScope traverseCatch(Node n, FlowScope scope) { Node name = n.getFirstChild();"
      },
      {
        "txt": "JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE); name.setJSType(type); redeclare(scope, name.getString(), type); return scope; } private FlowScope traverseAssign(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = n.getLastChild(); scope = traverseChildren(n, scope); JSType leftType = left.getJSType();"
      },
      {
        "txt": "JSType rightType = getJSType(right); n.setJSType(rightType); updateScopeForTypeChange(scope, left, leftType, rightType); return scope; } private void updateScopeForTypeChange( FlowScope scope, Node left, JSType leftType, JSType resultType) { Preconditions.checkNotNull(resultType); switch (left.getType()) { case Token.NAME:"
      },
      {
        "txt": "String varName = left.getString(); Var var = syntacticScope.getVar(varName); if (var != null && var.isLocal() && var.getScope() != syntacticScope) { assignedOuterLocalVars.put(var.getScope(), var); } boolean isVarDeclaration = left.hasChildren(); if (!isVarDeclaration || var == null || var.isTypeInferred()) { redeclare(scope, varName, resultType); } left.setJSType(isVarDeclaration || leftType == null ?"
      },
      {
        "txt": "resultType : null); if (var != null && var.isTypeInferred()) { JSType oldType = var.getType(); var.setType(oldType == null ? resultType : oldType.getLeastSupertype(resultType)); } break; case Token.GETPROP: String qualifiedName = left.getQualifiedName(); if (qualifiedName != null) {"
      },
      {
        "txt": "scope.inferQualifiedSlot(qualifiedName, leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType, resultType); } left.setJSType(resultType); ensurePropertyDefined(left, resultType); break; } } private void ensurePropertyDefined(Node getprop, JSType rightType) {"
      },
      {
        "txt": "ObjectType objectType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (objectType != null) { if (ensurePropertyDeclaredHelper(getprop, objectType)) { return; } String propName = getprop.getLastChild().getString(); if (!objectType.isPropertyTypeDeclared(propName)) { if (objectType.hasProperty(propName) || !objectType.isInstanceType()) {"
      },
      {
        "txt": "if (\"prototype\".equals(propName)) { objectType.defineDeclaredProperty(propName, rightType, false); } else { objectType.defineInferredProperty(propName, rightType, false); } } else { if (getprop.getFirstChild().getType() == Token.THIS && getJSType(syntacticScope.getRootNode()).isConstructor()) { objectType.defineInferredProperty(propName, rightType, false); } else {"
      },
      {
        "txt": "registry.registerPropertyOnType(propName, objectType); } } } } } private void ensurePropertyDeclared(Node getprop) { ObjectType ownerType = ObjectType.cast( getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined()); if (ownerType != null) {"
      },
      {
        "txt": "ensurePropertyDeclaredHelper(getprop, ownerType); } } private boolean ensurePropertyDeclaredHelper( Node getprop, ObjectType objectType) { String propName = getprop.getLastChild().getString(); String qName = getprop.getQualifiedName(); if (qName != null) { Var var = syntacticScope.getVar(qName); if (var != null && !var.isTypeInferred()) {"
      },
      {
        "txt": "if (propName.equals(\"prototype\") || (!objectType.hasOwnProperty(propName) && (!objectType.isInstanceType() || (var.isExtern() && !objectType.isNativeObjectType())))) { return objectType.defineDeclaredProperty( propName, var.getType(), var.isExtern()); } } } return false;"
      },
      {
        "txt": "} private FlowScope traverseName(Node n, FlowScope scope) { String varName = n.getString(); Node value = n.getFirstChild(); JSType type = n.getJSType(); if (value != null) { scope = traverse(value, scope); updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */, getJSType(value)); return scope;"
      },
      {
        "txt": "StaticSlot<JSType> var = scope.getSlot(varName); if (var != null && !(var.isTypeInferred() && unflowableVarNames.contains(varName))) { type = var.getType(); if (type == null) { type = getNativeType(UNKNOWN_TYPE); <extra_id_0> } } n.setJSType(type); return scope; } private FlowScope traverseArrayLiteral(Node n, FlowScope scope) {"
      },
      {
        "txt": "} private FlowScope traverseArrayLiteral(Node n, FlowScope scope) { scope = traverseChildren(n, scope); n.setJSType(getNativeType(ARRAY_TYPE)); return scope; } private FlowScope traverseObjectLiteral(Node n, FlowScope scope) { if (n.getJSType() != null) { return scope; }"
      },
      {
        "txt": "ObjectType objectType = registry.createAnonymousObjectType(); for (Node name = n.getFirstChild(); name != null; name = name.getNext().getNext()) { Node value = name.getNext(); scope = traverse(name, scope); scope = traverse(value, scope); String memberName = NodeUtil.getStringValue(name); if (memberName != null) { objectType.defineInferredProperty(memberName, getJSType(value), false); } else {"
      },
      {
        "txt": "n.setJSType(getNativeType(UNKNOWN_TYPE)); return scope; } } n.setJSType(objectType); return scope; } private FlowScope traverseAdd(Node n, FlowScope scope) { Node left = n.getFirstChild(); Node right = left.getNext();"
      },
      {
        "txt": "scope = traverseChildren(n, scope); JSType leftType = left.getJSType(); JSType rightType = right.getJSType(); JSType type = getNativeType(UNKNOWN_TYPE); if (leftType != null && rightType != null) { boolean leftIsUnknown = leftType.isUnknownType(); boolean rightIsUnknown = rightType.isUnknownType(); if (leftIsUnknown && rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if ((!leftIsUnknown && leftType.isString()) ||"
      },
      {
        "txt": "(!rightIsUnknown && rightType.isString())) { type = getNativeType(STRING_TYPE); } else if (leftIsUnknown || rightIsUnknown) { type = getNativeType(UNKNOWN_TYPE); } else if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType)) { type = getNativeType(NUMBER_TYPE); } else { type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE); } }"
      },
      {
        "txt": "n.setJSType(type); if (n.getType() == Token.ASSIGN_ADD) { updateScopeForTypeChange(scope, left, leftType, type); } return scope; } private boolean isAddedAsNumber(JSType type) { return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE)); }"
      },
      {
        "txt": "private FlowScope traverseHook(Node n, FlowScope scope) { Node condition = n.getFirstChild(); Node trueNode = condition.getNext(); Node falseNode = n.getLastChild(); scope = traverse(condition, scope); FlowScope trueScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( condition, scope, true); FlowScope falseScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome("
      },
      {
        "txt": "condition, scope, false); traverse(trueNode, trueScope.createChildFlowScope()); traverse(falseNode, falseScope.createChildFlowScope()); JSType trueType = trueNode.getJSType(); JSType falseType = falseNode.getJSType(); if (trueType != null && falseType != null) { n.setJSType(trueType.getLeastSupertype(falseType)); } else { n.setJSType(null); }"
      },
      {
        "txt": "return scope.createChildFlowScope(); } private FlowScope traverseCall(Node n, FlowScope scope) { scope = traverseChildren(n, scope); Node left = n.getFirstChild(); JSType functionType = getJSType(left).restrictByNotNullOrUndefined(); if (functionType != null) { if (functionType instanceof FunctionType) { FunctionType fnType = (FunctionType) functionType; n.setJSType(fnType.getReturnType());"
      },
      {
        "txt": "updateTypeOfParametersOnClosure(n, fnType); updateTypeOfThisOnClosure(n, fnType); } else if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE))) { n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE)); } } return scope; } private void updateTypeOfParametersOnClosure(Node n, FunctionType fnType) { int i = 0;"
      },
      {
        "txt": "for (Node iParameter : fnType.getParameters()) { JSType iParameterType = iParameter.getJSType(); if (iParameterType instanceof FunctionType) { FunctionType iParameterFnType = (FunctionType) iParameterType; if (i + 1 >= n.getChildCount()) { return; } Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgument.getType() == Token.FUNCTION &&"
      },
      {
        "txt": "iArgumentType instanceof FunctionType && iArgumentType.getJSDocInfo() == null) { iArgument.setJSType(iParameterFnType); } } i++; } } private void updateTypeOfThisOnClosure(Node n, FunctionType fnType) { if (fnType.getTemplateTypeName() == null) {"
      },
      {
        "txt": "return; } int i = 0; for (Node iParameter : fnType.getParameters()) { JSType iParameterType = getJSType(iParameter); iParameterType = iParameterType.restrictByNotNullOrUndefined(); if (iParameterType.isTemplateType()) { if (i + 1 >= n.getChildCount()) { return; }"
      },
      {
        "txt": "Node iArgument = n.getChildAtIndex(i + 1); JSType iArgumentType = getJSType(iArgument); if (iArgumentType != null) { iArgumentType = iArgumentType.restrictByNotNullOrUndefined(); if (!(iArgumentType instanceof ObjectType)) { compiler.report( JSError.make(NodeUtil.getSourceName(iArgument), iArgument, TEMPLATE_TYPE_NOT_OBJECT_TYPE)); return; }"
      },
      {
        "txt": "boolean foundTemplateTypeOfThisParameter = false; int j = 0; for (Node jParameter : fnType.getParameters()) { JSType jParameterType = getJSType(jParameter); if (jParameterType instanceof FunctionType) { FunctionType jParameterFnType = (FunctionType) jParameterType; if (jParameterFnType.getTypeOfThis().equals(iParameterType)) { foundTemplateTypeOfThisParameter = true; if (j + 1 >= n.getChildCount()) { return;"
      },
      {
        "txt": "} Node jArgument = n.getChildAtIndex(j + 1); JSType jArgumentType = getJSType(jArgument); if (jArgument.getType() == Token.FUNCTION && jArgumentType instanceof FunctionType) { FunctionType jArgumentFnType =(FunctionType) jArgumentType; if (jArgumentFnType.getTypeOfThis().isUnknownType()) { jArgument.setJSType( new FunctionType( registry, jArgumentFnType.getReferenceName(),"
      },
      {
        "txt": "jArgumentFnType.getSource(), jArgumentFnType.getParametersNode(), jArgumentFnType.getReturnType(), (ObjectType) iArgumentType)); } } } } j++; }"
      },
      {
        "txt": "if (!foundTemplateTypeOfThisParameter) { Node source = fnType.getSource(); compiler.report(JSError.make(NodeUtil.getSourceName(source), source, TEMPLATE_TYPE_OF_THIS_EXPECTED)); return; } } } i++; }"
      },
      {
        "txt": "} private FlowScope traverseNew(Node n, FlowScope scope) { Node constructor = n.getFirstChild(); scope = traverse(constructor, scope); JSType constructorType = constructor.getJSType(); JSType type = null; if (constructorType != null) { constructorType = constructorType.restrictByNotNullOrUndefined(); if (constructorType.isUnknownType()) { type = getNativeType(UNKNOWN_TYPE);"
      },
      {
        "txt": "} else if (constructorType instanceof FunctionType) { FunctionType ct = (FunctionType) constructorType; if (ct.isConstructor()) { type = ct.getInstanceType(); } } } n.setJSType(type); for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) { scope = traverse(arg, scope);"
      },
      {
        "txt": "} return scope; } private BooleanOutcomePair traverseAnd(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, true); } private FlowScope traverseChildren(Node n, FlowScope scope) { for (Node el = n.getFirstChild(); el != null; el = el.getNext()) { scope = traverse(el, scope); }"
      },
      {
        "txt": "return scope; } private FlowScope traverseGetElem(Node n, FlowScope scope) { scope = traverseChildren(n, scope); ObjectType objType = ObjectType.cast( getJSType(n.getFirstChild()).restrictByNotNullOrUndefined()); if (objType != null) { JSType type = objType.getParameterType(); if (type != null) { n.setJSType(type);"
      },
      {
        "txt": "} } return dereferencePointer(n.getFirstChild(), scope); } private FlowScope traverseGetProp(Node n, FlowScope scope) { Node objNode = n.getFirstChild(); Node property = n.getLastChild(); scope = traverseChildren(n, scope); n.setJSType( getPropertyType("
      },
      {
        "txt": "objNode.getJSType(), property.getString(), n, scope)); return dereferencePointer(n.getFirstChild(), scope); } private FlowScope dereferencePointer(Node n, FlowScope scope) { if (n.getType() == Token.NAME) { JSType type = getJSType(n); JSType narrowed = type.restrictByNotNullOrUndefined(); if (type != narrowed) { scope = scope.createChildFlowScope(); redeclare(scope, n.getString(), narrowed);"
      },
      {
        "txt": "} } return scope; } private JSType getPropertyType(JSType objType, String propName, Node n, FlowScope scope) { String qualifiedName = n.getQualifiedName(); StaticSlot<JSType> var = scope.getSlot(qualifiedName); if (var != null) { JSType varType = var.getType();"
      },
      {
        "txt": "if (varType != null) { if (varType.equals(getNativeType(UNKNOWN_TYPE)) && var != syntacticScope.getSlot(qualifiedName)) { return getNativeType(CHECKED_UNKNOWN_TYPE); } else { return varType; } } } JSType propertyType = null;"
      },
      {
        "txt": "if (objType != null) { propertyType = objType.findPropertyType(propName); } if ((propertyType == null || propertyType.isUnknownType()) && qualifiedName != null) { ObjectType regType = ObjectType.cast(registry.getType(qualifiedName)); if (regType != null) { propertyType = regType.getConstructor(); } }"
      },
      {
        "txt": "return propertyType; } private BooleanOutcomePair traverseOr(Node n, FlowScope scope) { return traverseShortCircuitingBinOp(n, scope, false); } private BooleanOutcomePair traverseShortCircuitingBinOp( Node n, FlowScope scope, boolean condition) { Node left = n.getFirstChild(); Node right = n.getLastChild(); BooleanOutcomePair leftLiterals ="
      },
      {
        "txt": "traverseWithinShortCircuitingBinOp(left, scope.createChildFlowScope()); JSType leftType = left.getJSType(); FlowScope rightScope = reverseInterpreter. getPreciserScopeKnowingConditionOutcome( left, leftLiterals.getOutcomeFlowScope(left.getType(), condition), condition); BooleanOutcomePair rightLiterals = traverseWithinShortCircuitingBinOp( right, rightScope.createChildFlowScope());"
      },
      {
        "txt": "JSType rightType = right.getJSType(); JSType type; BooleanOutcomePair literals; if (leftType != null && rightType != null) { leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition); if (leftLiterals.toBooleanOutcomes == BooleanLiteralSet.get(!condition)) { type = leftType; literals = leftLiterals; } else {"
      },
      {
        "txt": "type = leftType.getLeastSupertype(rightType); literals = getBooleanOutcomePair(leftLiterals, rightLiterals, condition); } if (literals.booleanValues == BooleanLiteralSet.EMPTY && getNativeType(BOOLEAN_TYPE).isSubtype(type)) { if (type instanceof UnionType) { type = ((UnionType) type).getRestrictedUnion( getNativeType(BOOLEAN_TYPE)); }"
      },
      {
        "txt": "} } else { type = null; literals = new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, leftLiterals.getJoinedFlowScope(), rightLiterals.getJoinedFlowScope()); } n.setJSType(type); return literals;"
      },
      {
        "txt": "} private BooleanOutcomePair traverseWithinShortCircuitingBinOp(Node n, FlowScope scope) { switch (n.getType()) { case Token.AND: return traverseAnd(n, scope); case Token.OR: return traverseOr(n, scope); default: scope = traverse(n, scope);"
      },
      {
        "txt": "return newBooleanOutcomePair(n.getJSType(), scope); } } BooleanOutcomePair getBooleanOutcomePair(BooleanOutcomePair left, BooleanOutcomePair right, boolean condition) { return new BooleanOutcomePair( getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes, condition), getBooleanOutcomes(left.booleanValues, right.booleanValues, condition), left.getJoinedFlowScope(), right.getJoinedFlowScope());"
      },
      {
        "txt": "} static BooleanLiteralSet getBooleanOutcomes(BooleanLiteralSet left, BooleanLiteralSet right, boolean condition) { return right.union(left.intersection(BooleanLiteralSet.get(!condition))); } private final class BooleanOutcomePair { final BooleanLiteralSet toBooleanOutcomes; final BooleanLiteralSet booleanValues; final FlowScope leftScope; final FlowScope rightScope;"
      },
      {
        "txt": "FlowScope joinedScope = null; BooleanOutcomePair( BooleanLiteralSet toBooleanOutcomes, BooleanLiteralSet booleanValues, FlowScope leftScope, FlowScope rightScope) { this.toBooleanOutcomes = toBooleanOutcomes; this.booleanValues = booleanValues; this.leftScope = leftScope; this.rightScope = rightScope; } FlowScope getJoinedFlowScope() {"
      },
      {
        "txt": "if (joinedScope == null) { if (leftScope == rightScope) { joinedScope = rightScope; } else { joinedScope = join(leftScope, rightScope); } } return joinedScope; } FlowScope getOutcomeFlowScope(int nodeType, boolean outcome) {"
      },
      {
        "txt": "if (nodeType == Token.AND && outcome || nodeType == Token.OR && !outcome) { return rightScope; } else { return getJoinedFlowScope(); } } } private BooleanOutcomePair newBooleanOutcomePair( JSType jsType, FlowScope flowScope) {"
      },
      {
        "txt": "if (jsType == null) { return new BooleanOutcomePair( BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope); } return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(), registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ? BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY, flowScope, flowScope); } private void redeclare(FlowScope scope, String varName, JSType varType) {"
      },
      {
        "txt": "if (varType == null) { varType = getNativeType(JSTypeNative.UNKNOWN_TYPE); } if (unflowableVarNames.contains(varName)) { return; } scope.inferSlotType(varName, varType); } private JSType getJSType(Node n) { JSType jsType = n.getJSType();"
      },
      {
        "txt": "if (jsType == null) { return getNativeType(UNKNOWN_TYPE); } else { return jsType; } } private JSType getNativeType(JSTypeNative typeId) { return registry.getNativeType(typeId); }"
      }
    ]
  }
]
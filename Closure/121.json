[
  {
    "id": 476,
    "file_path": "src/com/google/javascript/jscomp/InlineVariables.java",
    "start-bug-line": 304,
    "end-bug-line": 304,
    "bug": "referenceInfo.isAssignedOnceInLifetime()) {",
    "fix": "referenceInfo.isAssignedOnceInLifetime() &&",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Predicate; import com.google.common.base.Predicates; import com.google.common.collect.Maps;"
      },
      {
        "txt": "import com.google.common.collect.Sets; import com.google.javascript.jscomp.CodingConvention.SubclassRelationship; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.Node; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "import java.util.Map; import java.util.Set; class InlineVariables implements CompilerPass { private final AbstractCompiler compiler; enum Mode { CONSTANTS_ONLY, LOCALS_ONLY, ALL } private final Mode mode;"
      },
      {
        "txt": "private final boolean inlineAllStrings; private final IdentifyConstants identifyConstants = new IdentifyConstants(); InlineVariables( AbstractCompiler compiler, Mode mode, boolean inlineAllStrings) { this.compiler = compiler; this.mode = mode; this.inlineAllStrings = inlineAllStrings; }"
      },
      {
        "txt": "@Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior(), getFilterForMode()); callback.process(externs, root); } private Predicate<Var> getFilterForMode() { switch (mode) { case ALL: return Predicates.<Var>alwaysTrue();"
      },
      {
        "txt": "case LOCALS_ONLY: return new IdentifyLocals(); case CONSTANTS_ONLY: return new IdentifyConstants(); default: throw new IllegalStateException(); } } private class IdentifyConstants implements Predicate<Var> { @Override"
      },
      {
        "txt": "public boolean apply(Var var) { return var.isConst(); } } private class IdentifyLocals implements Predicate<Var> { @Override public boolean apply(Var var) { return var.scope.isLocal(); } }"
      },
      {
        "txt": "private static class AliasCandidate { private final Var alias; private final ReferenceCollection refInfo; AliasCandidate(Var alias, ReferenceCollection refInfo) { this.alias = alias; this.refInfo = refInfo; } } private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet();"
      },
      {
        "txt": "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { collectAliasCandidates(t, referenceMap); doInlinesForScope(t, referenceMap); } private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) { if (mode != Mode.CONSTANTS_ONLY) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {"
      },
      {
        "txt": "Var v = it.next(); ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (referenceInfo != null && referenceInfo.references.size() >= 2 && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) { Reference init = referenceInfo.getInitializingReference(); Node value = init.getAssignedValue(); if (value != null && value.isName()) { aliasCandidates.put(value, new AliasCandidate(v, referenceInfo)); }"
      },
      {
        "txt": "} } } } private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) { boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap); for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); ReferenceCollection referenceInfo = referenceMap.getReferences(v);"
      },
      {
        "txt": "if (referenceInfo == null || isVarInlineForbidden(v)) { continue; } else if (isInlineableDeclaredConstant(v, referenceInfo)) { Reference init = referenceInfo.getInitializingReferenceForConstants(); Node value = init.getAssignedValue(); inlineDeclaredConstant(v, value, referenceInfo.references); staleVars.add(v); } else if (mode == Mode.CONSTANTS_ONLY) { continue; } else {"
      },
      {
        "txt": "inlineNonConstants(v, referenceInfo, maybeModifiedArguments); } } } private boolean maybeEscapedOrModifiedArguments( Scope scope, ReferenceMap referenceMap) { if (scope.isLocal()) { Var arguments = scope.getArgumentsVar(); ReferenceCollection refs = referenceMap.getReferences(arguments); if (refs != null && !refs.references.isEmpty()) {"
      },
      {
        "txt": "for (Reference ref : refs.references) { Node refNode = ref.getNode(); Node refParent = ref.getParent(); if (!(NodeUtil.isGet(refParent) && refNode == ref.getParent().getFirstChild() && !isLValue(refParent))) { return true; } } }"
      },
      {
        "txt": "} return false; } private boolean isLValue(Node n) { Node parent = n.getParent(); return (parent.isInc() || parent.isDec() || (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)); }"
      },
      {
        "txt": "private void inlineNonConstants( Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) { int refCount = referenceInfo.references.size(); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); int firstRefAfterInit = (declaration == init) ? 2 : 3; if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) { Node value;"
      },
      {
        "txt": "if (init != null) { value = init.getAssignedValue(); } else { Node srcLocation = declaration.getNode(); value = NodeUtil.newUndefinedNode(srcLocation); } Preconditions.checkNotNull(value); inlineWellDefinedVariable(v, value, referenceInfo.references); staleVars.add(v); } else if (refCount == firstRefAfterInit) {"
      },
      {
        "txt": "Reference reference = referenceInfo.references.get( firstRefAfterInit - 1); if (canInline(declaration, init, reference)) { inline(v, declaration, init, reference); staleVars.add(v); } } else if (declaration != init && refCount == 2) { if (isValidDeclaration(declaration) && isValidInitialization(init)) { Node value = init.getAssignedValue(); Preconditions.checkNotNull(value);"
      },
      {
        "txt": "staleVars.add(v); } } if (!maybeModifiedArguments && !staleVars.contains(v) && referenceInfo.isWellDefined() && <extra_id_0> List<Reference> refs = referenceInfo.references; for (int i = 1 /* start from a read */; i < refs.size(); i++) { Node nameNode = refs.get(i).getNode(); if (aliasCandidates.containsKey(nameNode)) { AliasCandidate candidate = aliasCandidates.get(nameNode); if (!staleVars.contains(candidate.alias) &&"
      },
      {
        "txt": "AliasCandidate candidate = aliasCandidates.get(nameNode); if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference(); Node value = aliasInit.getAssignedValue(); Preconditions.checkNotNull(value); inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references);"
      },
      {
        "txt": "staleVars.add(candidate.alias); } } } } } private void blacklistVarReferencesInTree(Node root, Scope scope) { for (Node c = root.getFirstChild(); c != null; c = c.getNext()) { blacklistVarReferencesInTree(c, scope); }"
      },
      {
        "txt": "if (root.isName()) { staleVars.add(scope.getVar(root.getString())); } } private boolean isVarInlineForbidden(Var var) { return var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); }"
      },
      {
        "txt": "private void inline(Var v, Reference decl, Reference init, Reference ref) { Node value = init.getAssignedValue(); Preconditions.checkState(value != null); boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value); compiler.reportChangeToEnclosingScope(ref.getNode()); inlineValue(v, ref, value.detachFromParent()); if (decl != init) { Node expressRoot = init.getGrandparent(); Preconditions.checkState(expressRoot.isExprResult()); NodeUtil.removeChild(expressRoot.getParent(), expressRoot);"
      },
      {
        "txt": "} if (!isFunctionDeclaration) { compiler.reportChangeToEnclosingScope(decl.getNode()); removeDeclaration(decl); } } private void inlineWellDefinedVariable(Var v, Node value, List<Reference> refSet) { Reference decl = refSet.get(0); for (int i = 1; i < refSet.size(); i++) {"
      },
      {
        "txt": "inlineValue(v, refSet.get(i), value.cloneTree()); } removeDeclaration(decl); } private void inlineDeclaredConstant(Var v, Node value, List<Reference> refSet) { Reference decl = null; for (Reference r : refSet) { if (r.getNode() == v.getNameNode()) { decl = r;"
      },
      {
        "txt": "} else { inlineValue(v, r, value.cloneTree()); } } removeDeclaration(decl); } private void removeDeclaration(Reference decl) { Node varNode = decl.getParent(); Node grandparent = decl.getGrandparent(); compiler.reportChangeToEnclosingScope(decl.getNode());"
      },
      {
        "txt": "varNode.removeChild(decl.getNode()); if (!varNode.hasChildren()) { Preconditions.checkState(varNode.isVar()); NodeUtil.removeChild(grandparent, varNode); } } private void inlineValue(Var v, Reference ref, Node value) { compiler.reportChangeToEnclosingScope(ref.getNode()); if (ref.isSimpleAssignmentToName()) { ref.getGrandparent().replaceChild(ref.getParent(), value);"
      },
      {
        "txt": "} else { ref.getParent().replaceChild(ref.getNode(), value); } blacklistVarReferencesInTree(value, v.scope); } private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) { if (!identifyConstants.apply(var)) { return false; }"
      },
      {
        "txt": "if (!refInfo.isAssignedOnceInLifetime()) { return false; } Reference init = refInfo.getInitializingReferenceForConstants(); if (init == null) { return false; } Node value = init.getAssignedValue(); if (value == null) { return false;"
      },
      {
        "txt": "} if (!NodeUtil.isImmutableValue(value)) { return false; } return !value.isString() || isStringWorthInlining(var, refInfo.references); } private boolean isStringWorthInlining(Var var, List<Reference> refs) { if (!inlineAllStrings && !var.isDefine()) { int len = var.getInitialValue().getString().length() + \"''\".length();"
      },
      {
        "txt": "int noInlineBytes = \"var xx=;\".length() + len + 4 * (refs.size() - 1); int inlineBytes = (len - 1) * (refs.size() - 1); return noInlineBytes >= inlineBytes; } return true; } private boolean canInline( Reference declaration, Reference initialization,"
      },
      {
        "txt": "Reference reference) { if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; }"
      },
      {
        "txt": "if (declaration.getBasicBlock() != initialization.getBasicBlock() || declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false;"
      },
      {
        "txt": "} if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; }"
      },
      {
        "txt": "if (convention.getSingletonGetterClassName(callNode) != null) { return false; } } } return canMoveAggressively(value) || canMoveModerately(initialization, reference); } private boolean canMoveAggressively(Node value) { return NodeUtil.isLiteralValue(value, true)"
      },
      {
        "txt": "|| value.isFunction(); } private boolean canMoveModerately( Reference initialization, Reference reference) { Iterator<Node> it; if (initialization.getParent().isVar()) { it = NodeIterators.LocalVarMotion.forVar( initialization.getNode(), // NAME initialization.getParent(), // VAR"
      },
      {
        "txt": "initialization.getGrandparent()); // VAR container } else if (initialization.getParent().isAssign()) { Preconditions.checkState( initialization.getGrandparent().isExprResult()); it = NodeIterators.LocalVarMotion.forAssign( initialization.getNode(), // NAME initialization.getParent(), // ASSIGN initialization.getGrandparent(), // EXPR_RESULT initialization.getGrandparent().getParent()); // EXPR container } else {"
      },
      {
        "txt": "throw new IllegalStateException(\"Unexpected initialization parent \" + initialization.getParent().toStringTree()); } Node targetName = reference.getNode(); while (it.hasNext()) { Node curNode = it.next(); if (curNode == targetName) { return true; } }"
      },
      {
        "txt": "return false; } private boolean isValidDeclaration(Reference declaration) { return (declaration.getParent().isVar() && !declaration.getGrandparent().isFor()) || NodeUtil.isFunctionDeclaration(declaration.getParent()); } private boolean isValidInitialization(Reference initialization) { if (initialization == null) { return false;"
      },
      {
        "txt": "} else if (initialization.isDeclaration()) { if (!NodeUtil.isFunctionDeclaration(initialization.getParent()) && initialization.getNode().getFirstChild() == null) { return false; } } else { Node parent = initialization.getParent(); Preconditions.checkState( parent.isAssign() && parent.getFirstChild() == initialization.getNode());"
      },
      {
        "txt": "} Node n = initialization.getAssignedValue(); if (n.isFunction()) { return compiler.getCodingConvention().isInlinableFunction(n); } return true; } private boolean isValidReference(Reference reference) { return !reference.isDeclaration() && !reference.isLvalue(); }"
      },
      {
        "txt": "private boolean isImmutableAndWellDefinedVariable(Var v, ReferenceCollection refInfo) { List<Reference> refSet = refInfo.references; int startingReadRef = 1; Reference refDecl = refSet.get(0); if (!isValidDeclaration(refDecl)) { return false; } boolean isNeverAssigned = refInfo.isNeverAssigned(); if (!isNeverAssigned) {"
      },
      {
        "txt": "Reference refInit = refInfo.getInitializingReference(); if (!isValidInitialization(refInit)) { return false; } if (refDecl != refInit) { Preconditions.checkState(refInit == refSet.get(1)); startingReadRef = 2; } if (!refInfo.isWellDefined()) { return false;"
      },
      {
        "txt": "} Node value = refInit.getAssignedValue(); Preconditions.checkNotNull(value); boolean isImmutableValueWorthInlining = NodeUtil.isImmutableValue(value) && (!value.isString() || isStringWorthInlining(v, refInfo.references)); boolean isInlinableThisAlias = value.isThis() && !refInfo.isEscaped();"
      },
      {
        "txt": "if (!isImmutableValueWorthInlining && !isInlinableThisAlias) { return false; } } for (int i = startingReadRef; i < refSet.size(); i++) { Reference ref = refSet.get(i); if (!isValidReference(ref)) { return false; } }"
      },
      {
        "txt": "return true; } }"
      }
    ]
  },
  {
    "id": 477,
    "file_path": "src/com/google/javascript/jscomp/InlineVariables.java",
    "start-bug-line": 308,
    "end-bug-line": 308,
    "bug": "",
    "fix": "(isInlineableDeclaredConstant(v, referenceInfo) || referenceInfo.isOnlyAssignmentSameScopeAsDeclaration())) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Predicate; import com.google.common.base.Predicates; import com.google.common.collect.Maps; import com.google.common.collect.Sets;"
      },
      {
        "txt": "import com.google.javascript.jscomp.CodingConvention.SubclassRelationship; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.Node; import java.util.Iterator; import java.util.List; import java.util.Map;"
      },
      {
        "txt": "import java.util.Set; class InlineVariables implements CompilerPass { private final AbstractCompiler compiler; enum Mode { CONSTANTS_ONLY, LOCALS_ONLY, ALL } private final Mode mode; private final boolean inlineAllStrings;"
      },
      {
        "txt": "private final IdentifyConstants identifyConstants = new IdentifyConstants(); InlineVariables( AbstractCompiler compiler, Mode mode, boolean inlineAllStrings) { this.compiler = compiler; this.mode = mode; this.inlineAllStrings = inlineAllStrings; } @Override"
      },
      {
        "txt": "public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior(), getFilterForMode()); callback.process(externs, root); } private Predicate<Var> getFilterForMode() { switch (mode) { case ALL: return Predicates.<Var>alwaysTrue(); case LOCALS_ONLY:"
      },
      {
        "txt": "return new IdentifyLocals(); case CONSTANTS_ONLY: return new IdentifyConstants(); default: throw new IllegalStateException(); } } private class IdentifyConstants implements Predicate<Var> { @Override public boolean apply(Var var) {"
      },
      {
        "txt": "return var.isConst(); } } private class IdentifyLocals implements Predicate<Var> { @Override public boolean apply(Var var) { return var.scope.isLocal(); } } private static class AliasCandidate {"
      },
      {
        "txt": "private final Var alias; private final ReferenceCollection refInfo; AliasCandidate(Var alias, ReferenceCollection refInfo) { this.alias = alias; this.refInfo = refInfo; } } private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();"
      },
      {
        "txt": "@Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { collectAliasCandidates(t, referenceMap); doInlinesForScope(t, referenceMap); } private void collectAliasCandidates(NodeTraversal t, ReferenceMap referenceMap) { if (mode != Mode.CONSTANTS_ONLY) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next();"
      },
      {
        "txt": "ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (referenceInfo != null && referenceInfo.references.size() >= 2 && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) { Reference init = referenceInfo.getInitializingReference(); Node value = init.getAssignedValue(); if (value != null && value.isName()) { aliasCandidates.put(value, new AliasCandidate(v, referenceInfo)); } }"
      },
      {
        "txt": "} } } private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap) { boolean maybeModifiedArguments = maybeEscapedOrModifiedArguments(t.getScope(), referenceMap); for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (referenceInfo == null || isVarInlineForbidden(v)) {"
      },
      {
        "txt": "continue; } else if (isInlineableDeclaredConstant(v, referenceInfo)) { Reference init = referenceInfo.getInitializingReferenceForConstants(); Node value = init.getAssignedValue(); inlineDeclaredConstant(v, value, referenceInfo.references); staleVars.add(v); } else if (mode == Mode.CONSTANTS_ONLY) { continue; } else { inlineNonConstants(v, referenceInfo, maybeModifiedArguments);"
      },
      {
        "txt": "} } } private boolean maybeEscapedOrModifiedArguments( Scope scope, ReferenceMap referenceMap) { if (scope.isLocal()) { Var arguments = scope.getArgumentsVar(); ReferenceCollection refs = referenceMap.getReferences(arguments); if (refs != null && !refs.references.isEmpty()) { for (Reference ref : refs.references) {"
      },
      {
        "txt": "Node refNode = ref.getNode(); Node refParent = ref.getParent(); if (!(NodeUtil.isGet(refParent) && refNode == ref.getParent().getFirstChild() && !isLValue(refParent))) { return true; } } } }"
      },
      {
        "txt": "return false; } private boolean isLValue(Node n) { Node parent = n.getParent(); return (parent.isInc() || parent.isDec() || (NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)); } private void inlineNonConstants("
      },
      {
        "txt": "Var v, ReferenceCollection referenceInfo, boolean maybeModifiedArguments) { int refCount = referenceInfo.references.size(); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); int firstRefAfterInit = (declaration == init) ? 2 : 3; if (refCount > 1 && isImmutableAndWellDefinedVariable(v, referenceInfo)) { Node value; if (init != null) {"
      },
      {
        "txt": "value = init.getAssignedValue(); } else { Node srcLocation = declaration.getNode(); value = NodeUtil.newUndefinedNode(srcLocation); } Preconditions.checkNotNull(value); inlineWellDefinedVariable(v, value, referenceInfo.references); staleVars.add(v); } else if (refCount == firstRefAfterInit) { Reference reference = referenceInfo.references.get("
      },
      {
        "txt": "firstRefAfterInit - 1); if (canInline(declaration, init, reference)) { inline(v, declaration, init, reference); staleVars.add(v); } } else if (declaration != init && refCount == 2) { if (isValidDeclaration(declaration) && isValidInitialization(init)) { Node value = init.getAssignedValue(); Preconditions.checkNotNull(value); inlineWellDefinedVariable(v, value, referenceInfo.references);"
      },
      {
        "txt": "} } if (!maybeModifiedArguments && !staleVars.contains(v) && referenceInfo.isWellDefined() && referenceInfo.isAssignedOnceInLifetime()) { <extra_id_0> for (int i = 1 /* start from a read */; i < refs.size(); i++) { Node nameNode = refs.get(i).getNode(); if (aliasCandidates.containsKey(nameNode)) { AliasCandidate candidate = aliasCandidates.get(nameNode); if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) {"
      },
      {
        "txt": "if (!staleVars.contains(candidate.alias) && !isVarInlineForbidden(candidate.alias)) { Reference aliasInit; aliasInit = candidate.refInfo.getInitializingReference(); Node value = aliasInit.getAssignedValue(); Preconditions.checkNotNull(value); inlineWellDefinedVariable(candidate.alias, value, candidate.refInfo.references); staleVars.add(candidate.alias);"
      },
      {
        "txt": "} } } } } private void blacklistVarReferencesInTree(Node root, Scope scope) { for (Node c = root.getFirstChild(); c != null; c = c.getNext()) { blacklistVarReferencesInTree(c, scope); } if (root.isName()) {"
      },
      {
        "txt": "staleVars.add(scope.getVar(root.getString())); } } private boolean isVarInlineForbidden(Var var) { return var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); } private void inline(Var v, Reference decl, Reference init, Reference ref) {"
      },
      {
        "txt": "Node value = init.getAssignedValue(); Preconditions.checkState(value != null); boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value); compiler.reportChangeToEnclosingScope(ref.getNode()); inlineValue(v, ref, value.detachFromParent()); if (decl != init) { Node expressRoot = init.getGrandparent(); Preconditions.checkState(expressRoot.isExprResult()); NodeUtil.removeChild(expressRoot.getParent(), expressRoot); }"
      },
      {
        "txt": "if (!isFunctionDeclaration) { compiler.reportChangeToEnclosingScope(decl.getNode()); removeDeclaration(decl); } } private void inlineWellDefinedVariable(Var v, Node value, List<Reference> refSet) { Reference decl = refSet.get(0); for (int i = 1; i < refSet.size(); i++) { inlineValue(v, refSet.get(i), value.cloneTree());"
      },
      {
        "txt": "} removeDeclaration(decl); } private void inlineDeclaredConstant(Var v, Node value, List<Reference> refSet) { Reference decl = null; for (Reference r : refSet) { if (r.getNode() == v.getNameNode()) { decl = r; } else {"
      },
      {
        "txt": "inlineValue(v, r, value.cloneTree()); } } removeDeclaration(decl); } private void removeDeclaration(Reference decl) { Node varNode = decl.getParent(); Node grandparent = decl.getGrandparent(); compiler.reportChangeToEnclosingScope(decl.getNode()); varNode.removeChild(decl.getNode());"
      },
      {
        "txt": "if (!varNode.hasChildren()) { Preconditions.checkState(varNode.isVar()); NodeUtil.removeChild(grandparent, varNode); } } private void inlineValue(Var v, Reference ref, Node value) { compiler.reportChangeToEnclosingScope(ref.getNode()); if (ref.isSimpleAssignmentToName()) { ref.getGrandparent().replaceChild(ref.getParent(), value); } else {"
      },
      {
        "txt": "ref.getParent().replaceChild(ref.getNode(), value); } blacklistVarReferencesInTree(value, v.scope); } private boolean isInlineableDeclaredConstant(Var var, ReferenceCollection refInfo) { if (!identifyConstants.apply(var)) { return false; } if (!refInfo.isAssignedOnceInLifetime()) {"
      },
      {
        "txt": "return false; } Reference init = refInfo.getInitializingReferenceForConstants(); if (init == null) { return false; } Node value = init.getAssignedValue(); if (value == null) { return false; }"
      },
      {
        "txt": "if (!NodeUtil.isImmutableValue(value)) { return false; } return !value.isString() || isStringWorthInlining(var, refInfo.references); } private boolean isStringWorthInlining(Var var, List<Reference> refs) { if (!inlineAllStrings && !var.isDefine()) { int len = var.getInitialValue().getString().length() + \"''\".length(); int noInlineBytes = \"var xx=;\".length() + len +"
      },
      {
        "txt": "4 * (refs.size() - 1); int inlineBytes = (len - 1) * (refs.size() - 1); return noInlineBytes >= inlineBytes; } return true; } private boolean canInline( Reference declaration, Reference initialization, Reference reference) {"
      },
      {
        "txt": "if (!isValidDeclaration(declaration) || !isValidInitialization(initialization) || !isValidReference(reference)) { return false; } if (declaration != initialization && !initialization.getGrandparent().isExprResult()) { return false; } if (declaration.getBasicBlock() != initialization.getBasicBlock()"
      },
      {
        "txt": "|| declaration.getBasicBlock() != reference.getBasicBlock()) { return false; } Node value = initialization.getAssignedValue(); Preconditions.checkState(value != null); if (value.isGetProp() && reference.getParent().isCall() && reference.getParent().getFirstChild() == reference.getNode()) { return false; }"
      },
      {
        "txt": "if (value.isFunction()) { Node callNode = reference.getParent(); if (reference.getParent().isCall()) { CodingConvention convention = compiler.getCodingConvention(); SubclassRelationship relationship = convention.getClassesDefinedByCall(callNode); if (relationship != null) { return false; } if (convention.getSingletonGetterClassName(callNode) != null) {"
      },
      {
        "txt": "return false; } } } return canMoveAggressively(value) || canMoveModerately(initialization, reference); } private boolean canMoveAggressively(Node value) { return NodeUtil.isLiteralValue(value, true) || value.isFunction();"
      },
      {
        "txt": "} private boolean canMoveModerately( Reference initialization, Reference reference) { Iterator<Node> it; if (initialization.getParent().isVar()) { it = NodeIterators.LocalVarMotion.forVar( initialization.getNode(), // NAME initialization.getParent(), // VAR initialization.getGrandparent()); // VAR container"
      },
      {
        "txt": "} else if (initialization.getParent().isAssign()) { Preconditions.checkState( initialization.getGrandparent().isExprResult()); it = NodeIterators.LocalVarMotion.forAssign( initialization.getNode(), // NAME initialization.getParent(), // ASSIGN initialization.getGrandparent(), // EXPR_RESULT initialization.getGrandparent().getParent()); // EXPR container } else { throw new IllegalStateException(\"Unexpected initialization parent \" +"
      },
      {
        "txt": "initialization.getParent().toStringTree()); } Node targetName = reference.getNode(); while (it.hasNext()) { Node curNode = it.next(); if (curNode == targetName) { return true; } } return false;"
      },
      {
        "txt": "} private boolean isValidDeclaration(Reference declaration) { return (declaration.getParent().isVar() && !declaration.getGrandparent().isFor()) || NodeUtil.isFunctionDeclaration(declaration.getParent()); } private boolean isValidInitialization(Reference initialization) { if (initialization == null) { return false; } else if (initialization.isDeclaration()) {"
      },
      {
        "txt": "if (!NodeUtil.isFunctionDeclaration(initialization.getParent()) && initialization.getNode().getFirstChild() == null) { return false; } } else { Node parent = initialization.getParent(); Preconditions.checkState( parent.isAssign() && parent.getFirstChild() == initialization.getNode()); }"
      },
      {
        "txt": "Node n = initialization.getAssignedValue(); if (n.isFunction()) { return compiler.getCodingConvention().isInlinableFunction(n); } return true; } private boolean isValidReference(Reference reference) { return !reference.isDeclaration() && !reference.isLvalue(); } private boolean isImmutableAndWellDefinedVariable(Var v,"
      },
      {
        "txt": "ReferenceCollection refInfo) { List<Reference> refSet = refInfo.references; int startingReadRef = 1; Reference refDecl = refSet.get(0); if (!isValidDeclaration(refDecl)) { return false; } boolean isNeverAssigned = refInfo.isNeverAssigned(); if (!isNeverAssigned) { Reference refInit = refInfo.getInitializingReference();"
      },
      {
        "txt": "if (!isValidInitialization(refInit)) { return false; } if (refDecl != refInit) { Preconditions.checkState(refInit == refSet.get(1)); startingReadRef = 2; } if (!refInfo.isWellDefined()) { return false; }"
      },
      {
        "txt": "Node value = refInit.getAssignedValue(); Preconditions.checkNotNull(value); boolean isImmutableValueWorthInlining = NodeUtil.isImmutableValue(value) && (!value.isString() || isStringWorthInlining(v, refInfo.references)); boolean isInlinableThisAlias = value.isThis() && !refInfo.isEscaped(); if (!isImmutableValueWorthInlining && !isInlinableThisAlias) {"
      },
      {
        "txt": "return false; } } for (int i = startingReadRef; i < refSet.size(); i++) { Reference ref = refSet.get(i); if (!isValidReference(ref)) { return false; } } return true;"
      },
      {
        "txt": "} }"
      }
    ]
  }
]
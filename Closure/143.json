[
  {
    "id": 567,
    "file_path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
    "start-bug-line": 871,
    "end-bug-line": 871,
    "bug": ")) {",
    "fix": "|| (defValue.charAt(0) == '\\\"' && defValue.charAt(defValue.length() - 1) == '\\\"'))) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.annotations.VisibleForTesting; import com.google.common.base.Charsets; import com.google.common.base.Joiner;"
      },
      {
        "txt": "import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.TokenStream; import com.google.protobuf.CodedOutputStream; import java.io.File; import java.io.FileOutputStream; import java.io.IOException;"
      },
      {
        "txt": "import java.io.PrintStream; import java.nio.charset.Charset; import java.util.ArrayList; import java.util.Collections; import java.util.List; import java.util.Map; import java.util.logging.Level; abstract class AbstractCommandLineRunner<A extends Compiler, B extends CompilerOptions> { private final CommandLineConfig config;"
      },
      {
        "txt": "private PrintStream out; private final PrintStream err; private A compiler; private static Charset inputCharset; private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100; private final RunTimeStats runTimeStats = new RunTimeStats(); AbstractCommandLineRunner() { this(System.out, System.err); } AbstractCommandLineRunner(PrintStream out, PrintStream err) {"
      },
      {
        "txt": "this.config = new CommandLineConfig(); this.out = out; this.err = err; } protected CommandLineConfig getCommandLineConfig() { return config; } protected abstract A createCompiler(); protected abstract B createOptions(); protected DiagnosticGroups getDiagnosticGroups() {"
      },
      {
        "txt": "return new DiagnosticGroups(); } protected void initOptionsFromFlags(CompilerOptions options) { DiagnosticGroups diagnosticGroups = getDiagnosticGroups(); diagnosticGroups.setWarningLevels( options, config.jscompError, CheckLevel.ERROR); diagnosticGroups.setWarningLevels( options, config.jscompWarning, CheckLevel.WARNING); diagnosticGroups.setWarningLevels( options, config.jscompOff, CheckLevel.OFF);"
      },
      {
        "txt": "createDefineReplacements(config.define, options); } final protected A getCompiler() { return compiler; } final protected void setRunOptions(B options) throws IOException, FlagUsageException { if (config.jsOutputFile.length() > 0) { options.jsOutputFile = config.jsOutputFile; }"
      },
      {
        "txt": "if (config.createSourceMap.length() > 0) { options.sourceMapOutputPath = config.createSourceMap; } if (!config.variableMapInputFile.equals(\"\")) { options.inputVariableMapSerialized = VariableMap.load(config.variableMapInputFile).toBytes(); } if (!config.propertyMapInputFile.equals(\"\")) { options.inputPropertyMapSerialized = VariableMap.load(config.propertyMapInputFile).toBytes();"
      },
      {
        "txt": "} options.setCodingConvention(config.codingConvention); options.setSummaryDetailLevel(config.summaryDetailLevel); inputCharset = getInputCharset(); } final public void run() { int result = 0; int runs = 1; if (config.computePhaseOrdering) { runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;"
      },
      {
        "txt": "PhaseOptimizer.randomizeLoops(); } try { for (int i = 0; i < runs && result == 0; i++) { runTimeStats.recordStartRun(); result = doRun(); runTimeStats.recordEndRun(); } } catch (AbstractCommandLineRunner.FlagUsageException e) { System.err.println(e.getMessage());"
      },
      {
        "txt": "result = -1; } catch (Throwable t) { t.printStackTrace(); result = -2; } if (config.computePhaseOrdering) { runTimeStats.outputBestPhaseOrdering(); } System.exit(result); }"
      },
      {
        "txt": "protected PrintStream getErrorPrintStream() { return err; } protected static class FlagUsageException extends Exception { private static final long serialVersionUID = 1L; FlagUsageException(String message) { super(message); } } private static List<JSSourceFile> createInputs(List<String> files,"
      },
      {
        "txt": "boolean allowStdIn) throws FlagUsageException, IOException { List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size()); boolean usingStdin = false; for (String filename : files) { if (!\"-\".equals(filename)) { JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset); inputs.add(newFile); } else { if (!allowStdIn) { throw new FlagUsageException(\"Can't specify stdin.\");"
      },
      {
        "txt": "} if (usingStdin) { throw new FlagUsageException(\"Can't specify stdin twice.\"); } inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in)); usingStdin = true; } } return inputs; }"
      },
      {
        "txt": "private static List<JSSourceFile> createSourceInputs(List<String> files) throws FlagUsageException, IOException { if (files.isEmpty()) { files = Collections.singletonList(\"-\"); } try { return createInputs(files, true); } catch (FlagUsageException e) { throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage()); }"
      },
      {
        "txt": "} private static List<JSSourceFile> createExternInputs(List<String> files) throws FlagUsageException, IOException { if (files.isEmpty()) { return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\")); } try { return createInputs(files, false); } catch (FlagUsageException e) { throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());"
      },
      {
        "txt": "} } static JSModule[] createJsModules(List<String> specs, List<String> jsFiles) throws FlagUsageException, IOException { Preconditions.checkState(specs != null); Preconditions.checkState(!specs.isEmpty()); Preconditions.checkState(jsFiles != null); final int totalNumJsFiles = jsFiles.size(); int nextJsFileIndex = 0; Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();"
      },
      {
        "txt": "for (String spec : specs) { String[] parts = spec.split(\":\"); if (parts.length < 2 || parts.length > 4) { throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \" + \"module spec: \" + spec); } String name = parts[0]; if (!TokenStream.isJSIdentifier(name)) { throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\"); }"
      },
      {
        "txt": "if (modulesByName.containsKey(name)) { throw new FlagUsageException(\"Duplicate module name: \" + name); } JSModule module = new JSModule(name); int numJsFiles = -1; try { numJsFiles = Integer.parseInt(parts[1]); } catch (NumberFormatException ignored) { numJsFiles = -1; }"
      },
      {
        "txt": "if (numJsFiles < 0) { throw new FlagUsageException(\"Invalid js file count '\" + parts[1] + \"' for module: \" + name); } if (nextJsFileIndex + numJsFiles > totalNumJsFiles) { throw new FlagUsageException(\"Not enough js files specified. Expected \" + (nextJsFileIndex + numJsFiles - totalNumJsFiles) + \" more in module:\" + name); } List<String> moduleJsFiles ="
      },
      {
        "txt": "jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles); for (JSSourceFile input : createInputs(moduleJsFiles, false)) { module.add(input); } nextJsFileIndex += numJsFiles; if (parts.length > 2) { String depList = parts[2]; if (depList.length() > 0) { String[] deps = depList.split(\",\"); for (String dep : deps) {"
      },
      {
        "txt": "JSModule other = modulesByName.get(dep); if (other == null) { throw new FlagUsageException(\"Module '\" + name + \"' depends on unknown module '\" + dep + \"'. Be sure to list modules in dependency order.\"); } module.addDependency(other); } } }"
      },
      {
        "txt": "modulesByName.put(name, module); } if (nextJsFileIndex < totalNumJsFiles) { throw new FlagUsageException(\"Too many js files specified. Expected \" + nextJsFileIndex + \" but found \" + totalNumJsFiles); } return modulesByName.values().toArray(new JSModule[modulesByName.size()]); } static Map<String, String> parseModuleWrappers(List<String> specs, JSModule[] modules) throws FlagUsageException {"
      },
      {
        "txt": "Preconditions.checkState(specs != null); Map<String, String> wrappers = Maps.newHashMapWithExpectedSize(modules.length); for (JSModule m : modules) { wrappers.put(m.getName(), \"\"); } for (String spec : specs) { int pos = spec.indexOf(':'); if (pos == -1) { throw new FlagUsageException(\"Expected module wrapper to have \""
      },
      {
        "txt": "+ \"<name>:<wrapper> format: \" + spec); } String name = spec.substring(0, pos); if (!wrappers.containsKey(name)) { throw new FlagUsageException(\"Unknown module: '\" + name + \"'\"); } String wrapper = spec.substring(pos + 1); if (!wrapper.contains(\"%s\")) { throw new FlagUsageException(\"No %s placeholder in module wrapper: '\" + wrapper + \"'\");"
      },
      {
        "txt": "} wrappers.put(name, wrapper); } return wrappers; } static void writeOutput(PrintStream out, Compiler compiler, String code, String wrapper, String codePlaceholder) { int pos = wrapper.indexOf(codePlaceholder); if (pos != -1) { String prefix = \"\";"
      },
      {
        "txt": "if (pos > 0) { prefix = wrapper.substring(0, pos); out.print(prefix); } out.print(code); int suffixStart = pos + codePlaceholder.length(); if (suffixStart == wrapper.length()) { out.println(); } else { out.println(wrapper.substring(suffixStart));"
      },
      {
        "txt": "} if (compiler != null && compiler.getSourceMap() != null) { compiler.getSourceMap().setWrapperPrefix(prefix); } } else { out.println(code); } } private static void maybeCreateDirsForPath(String pathPrefix) { if (pathPrefix.length() > 0) {"
      },
      {
        "txt": "String dirName = pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File( pathPrefix).getParent(); if (dirName != null) { new File(dirName).mkdirs(); } } } protected int doRun() throws FlagUsageException, IOException {"
      },
      {
        "txt": "Compiler.setLoggingLevel(Level.parse(config.loggingLevel)); List<JSSourceFile> externsList = createExterns(); JSSourceFile[] externs = new JSSourceFile[externsList.size()]; externsList.toArray(externs); compiler = createCompiler(); B options = createOptions(); JSModule[] modules = null; Result result; setRunOptions(options); if (inputCharset == Charsets.UTF_8) {"
      },
      {
        "txt": "options.outputCharset = Charsets.US_ASCII; } else { options.outputCharset = inputCharset; } if (!options.jsOutputFile.isEmpty()) { out = new PrintStream(options.jsOutputFile, inputCharset.name()); } List<String> jsFiles = config.js; List<String> moduleSpecs = config.module; if (!moduleSpecs.isEmpty()) {"
      },
      {
        "txt": "modules = createJsModules(moduleSpecs, jsFiles); result = compiler.compile(externs, modules, options); } else { List<JSSourceFile> inputList = createSourceInputs(jsFiles); JSSourceFile[] inputs = new JSSourceFile[inputList.size()]; inputList.toArray(inputs); result = compiler.compile(externs, inputs, options); } return processResults(result, modules, options); }"
      },
      {
        "txt": "int processResults(Result result, JSModule[] modules, B options) throws FlagUsageException, IOException { if (config.computePhaseOrdering) { return 0; } if (config.printPassGraph) { if (compiler.getRoot() == null) { return 1; } else { out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));"
      },
      {
        "txt": "out.println(); return 0; } } if (config.printAst) { if (compiler.getRoot() == null) { return 1; } else { ControlFlowGraph<Node> cfg = compiler.computeCFG(); DotFormatter.appendDot(compiler.getRoot(), cfg, out);"
      },
      {
        "txt": "out.println(); return 0; } } if (config.printTree) { if (compiler.getRoot() == null) { out.println(\"Code contains errors; no tree was generated.\"); return 1; } else { compiler.getRoot().appendStringTree(out);"
      },
      {
        "txt": "out.println(\"\"); return 0; } } if (result.success) { if (modules == null) { writeOutput(out, compiler, compiler.toSource(), config.outputWrapper, config.outputWrapperMarker); outputSourceMap(options, options.jsOutputFile); } else {"
      },
      {
        "txt": "String moduleFilePrefix = config.moduleOutputPathPrefix; maybeCreateDirsForPath(moduleFilePrefix); Map<String, String> moduleWrappers = parseModuleWrappers(config.moduleWrapper, modules); PrintStream mapOut = null; if (!shouldGenerateMapPerModule(options)) { mapOut = openSourceMapStream(options, moduleFilePrefix); } for (JSModule m : modules) { if (shouldGenerateMapPerModule(options)) {"
      },
      {
        "txt": "mapOut = openSourceMapStream( options, moduleFilePrefix + m.getName() + \".js\"); } PrintStream ps = new PrintStream(new FileOutputStream(moduleFilePrefix + m.getName() + \".js\")); if (options.sourceMapOutputPath != null) { compiler.getSourceMap().reset(); } writeOutput(ps, compiler, compiler.toSource(m), moduleWrappers.get("
      },
      {
        "txt": "m.getName()), \"%s\"); if (options.sourceMapOutputPath != null) { compiler.getSourceMap().appendTo(mapOut, m.getName()); } ps.close(); if (shouldGenerateMapPerModule(options) && mapOut != null) { mapOut.close(); mapOut = null; } }"
      },
      {
        "txt": "if (mapOut != null) { mapOut.close(); } } if (options.externExportsPath != null) { PrintStream eeOut = openExternExportsStream(options, options.jsOutputFile); eeOut.append(result.externExport); eeOut.close(); }"
      },
      {
        "txt": "outputNameMaps(options); } return Math.min(result.errors.length, 0x7f); } private Charset getInputCharset() throws FlagUsageException { if (!config.charset.isEmpty()) { if (!Charset.isSupported(config.charset)) { throw new FlagUsageException(config.charset + \" is not a valid charset name.\"); }"
      },
      {
        "txt": "return Charset.forName(config.charset); } return Charsets.UTF_8; } protected List<JSSourceFile> createExterns() throws FlagUsageException, IOException { return createExternInputs(config.externs); } private boolean shouldGenerateMapPerModule(B options) { return options.sourceMapOutputPath != null"
      },
      {
        "txt": "&& options.sourceMapOutputPath.contains(\"%outname%\"); } private PrintStream openExternExportsStream(B options, String path) throws IOException { if (options.externExportsPath == null) { return null; } String exPath = options.externExportsPath; if (!exPath.contains(File.separator)) { File outputFile = new File(path);"
      },
      {
        "txt": "exPath = outputFile.getParent() + File.separatorChar + exPath; } return new PrintStream(new FileOutputStream(exPath)); } private PrintStream openSourceMapStream(B options, String path) throws IOException { if (options.sourceMapOutputPath == null) { return null; } String sourceMapPath = options.sourceMapOutputPath;"
      },
      {
        "txt": "sourceMapPath = sourceMapPath.replace(\"%outname%\", path); String mapPath = null; if (sourceMapPath.contains(\"/\") || sourceMapPath.contains(\"\\\\\")) { mapPath = sourceMapPath; } else { File outputFile = new File(path); mapPath = outputFile.getParent() + File.separatorChar + sourceMapPath; } return new PrintStream(new FileOutputStream(mapPath)); }"
      },
      {
        "txt": "private void outputSourceMap(B options, String path) throws IOException { if (options.sourceMapOutputPath == null) { return; } File outputFile = new File(path); PrintStream out = openSourceMapStream(options, path); compiler.getSourceMap().appendTo(out, outputFile.getName()); out.close(); }"
      },
      {
        "txt": "private String getMapPath(String outputFile) { String basePath = \"\"; if (outputFile.equals(\"\")) { if (!config.moduleOutputPathPrefix.equals(\"\")) { basePath = config.moduleOutputPathPrefix; } else { basePath = \"jscompiler\"; } } else { File file = new File(outputFile);"
      },
      {
        "txt": "String outputFileName = file.getName(); if (outputFileName.endsWith(\".js\")) { outputFileName = outputFileName.substring(0, outputFileName.length() - 3); } basePath = file.getParent() + File.separatorChar + outputFileName; } return basePath; } private void outputNameMaps(B options) throws FlagUsageException,"
      },
      {
        "txt": "IOException { String propertyMapOutputPath = null; String variableMapOutputPath = null; String functionInformationMapOutputPath = null; if (config.createNameMapFiles) { String basePath = getMapPath(options.jsOutputFile); propertyMapOutputPath = basePath + \"_props_map.out\"; variableMapOutputPath = basePath + \"_vars_map.out\"; functionInformationMapOutputPath = basePath + \"_functions_map.out\"; }"
      },
      {
        "txt": "if (!config.variableMapOutputFile.equals(\"\")) { if (variableMapOutputPath != null) { throw new FlagUsageException(\"The flags variable_map_output_file and \" + \"create_name_map_files cannot both be used simultaniously.\"); } variableMapOutputPath = config.variableMapOutputFile; } if (!config.propertyMapOutputFile.equals(\"\")) { if (propertyMapOutputPath != null) { throw new FlagUsageException(\"The flags property_map_output_file and \""
      },
      {
        "txt": "+ \"create_name_map_files cannot both be used simultaniously.\"); } propertyMapOutputPath = config.propertyMapOutputFile; } if (variableMapOutputPath != null) { if (compiler.getVariableMap() != null) { compiler.getVariableMap().save(variableMapOutputPath); } } if (propertyMapOutputPath != null) {"
      },
      {
        "txt": "if (compiler.getPropertyMap() != null) { compiler.getPropertyMap().save(propertyMapOutputPath); } } if (functionInformationMapOutputPath != null) { if (compiler.getFunctionalInformationMap() != null) { FileOutputStream file = new FileOutputStream(functionInformationMapOutputPath); CodedOutputStream outputStream = CodedOutputStream.newInstance(file); compiler.getFunctionalInformationMap().writeTo(outputStream);"
      },
      {
        "txt": "outputStream.flush(); file.flush(); file.close(); } } } @VisibleForTesting static void createDefineReplacements(List<String> definitions, CompilerOptions options) { for (String override : definitions) {"
      },
      {
        "txt": "String[] assignment = override.split(\"=\", 2); String defName = assignment[0]; if (defName.length() > 0) { if (assignment.length == 1) { options.setDefineToBooleanLiteral(defName, true); continue; } else { String defValue = assignment[1]; if (defValue.equals(\"true\")) { options.setDefineToBooleanLiteral(defName, true);"
      },
      {
        "txt": "} else if (defValue.equals(\"false\")) { options.setDefineToBooleanLiteral(defName, false); continue; } else if (defValue.length() > 1 && ((defValue.charAt(0) == '\\'' && defValue.charAt(defValue.length() - 1) == '\\'') <extra_id_0> String maybeStringVal = defValue.substring(1, defValue.length() - 1); if (maybeStringVal.indexOf(defValue.charAt(0)) == -1) { options.setDefineToStringLiteral(defName, maybeStringVal); continue; }"
      },
      {
        "txt": "continue; } } else { try { options.setDefineToDoubleLiteral(defName, Double.parseDouble(defValue)); continue; } catch (NumberFormatException e) { } }"
      },
      {
        "txt": "} } throw new RuntimeException( \"--define flag syntax invalid: \" + override); } } private class RunTimeStats { private long bestRunTime = Long.MAX_VALUE; private long worstRunTime = Long.MIN_VALUE; private long lastStartTime = 0;"
      },
      {
        "txt": "private List<List<String>> loopedPassesInBestRun = null; private void recordStartRun() { lastStartTime = System.currentTimeMillis(); PhaseOptimizer.clearLoopsRun(); } private void recordEndRun() { long endTime = System.currentTimeMillis(); long length = endTime - lastStartTime; worstRunTime = Math.max(length, worstRunTime); if (length < bestRunTime) {"
      },
      {
        "txt": "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun(); bestRunTime = length; } } private void outputBestPhaseOrdering() { out.println(\"Best time: \" + bestRunTime); out.println(\"Worst time: \" + worstRunTime); int i = 1; for (List<String> loop : loopedPassesInBestRun) { out.println(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop));"
      },
      {
        "txt": "i++; } } } static class CommandLineConfig { private boolean printTree = false; CommandLineConfig setPrintTree(boolean printTree) { this.printTree = printTree; return this; }"
      },
      {
        "txt": "private boolean computePhaseOrdering = false; CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering) { this.computePhaseOrdering = computePhaseOrdering; return this; } private boolean printAst = false; CommandLineConfig setPrintAst(boolean printAst) { this.printAst = printAst; return this; }"
      },
      {
        "txt": "private boolean printPassGraph = false; CommandLineConfig setPrintPassGraph(boolean printPassGraph) { this.printPassGraph = printPassGraph; return this; } private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF; CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode) { this.jscompDevMode = jscompDevMode; return this; }"
      },
      {
        "txt": "private String loggingLevel = Level.WARNING.getName(); CommandLineConfig setLoggingLevel(String loggingLevel) { this.loggingLevel = loggingLevel; return this; } private final List<String> externs = Lists.newArrayList(); CommandLineConfig setExterns(List<String> externs) { this.externs.clear(); this.externs.addAll(externs); return this;"
      },
      {
        "txt": "} private final List<String> js = Lists.newArrayList(); CommandLineConfig setJs(List<String> js) { this.js.clear(); this.js.addAll(js); return this; } private String jsOutputFile = \"\"; CommandLineConfig setJsOutputFile(String jsOutputFile) { this.jsOutputFile = jsOutputFile;"
      },
      {
        "txt": "return this; } private final List<String> module = Lists.newArrayList(); CommandLineConfig setModule(List<String> module) { this.module.clear(); this.module.addAll(module); return this; } private String variableMapInputFile = \"\"; CommandLineConfig setVariableMapInputFile(String variableMapInputFile) {"
      },
      {
        "txt": "this.variableMapInputFile = variableMapInputFile; return this; } private String propertyMapInputFile = \"\"; CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile) { this.propertyMapInputFile = propertyMapInputFile; return this; } private String variableMapOutputFile = \"\"; CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile) {"
      },
      {
        "txt": "this.variableMapOutputFile = variableMapOutputFile; return this; } private boolean createNameMapFiles = false; CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles) { this.createNameMapFiles = createNameMapFiles; return this; } private String propertyMapOutputFile = \"\"; CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile) {"
      },
      {
        "txt": "this.propertyMapOutputFile = propertyMapOutputFile; return this; } private CodingConvention codingConvention = new DefaultCodingConvention(); CommandLineConfig setCodingConvention(CodingConvention codingConvention) { this.codingConvention = codingConvention; return this; } private int summaryDetailLevel = 1; CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel) {"
      },
      {
        "txt": "this.summaryDetailLevel = summaryDetailLevel; return this; } private String outputWrapper = \"\"; CommandLineConfig setOutputWrapper(String outputWrapper) { this.outputWrapper = outputWrapper; return this; } private String outputWrapperMarker = \"\"; CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker) {"
      },
      {
        "txt": "this.outputWrapperMarker = outputWrapperMarker; return this; } private final List<String> moduleWrapper = Lists.newArrayList(); CommandLineConfig setModuleWrapper(List<String> moduleWrapper) { this.moduleWrapper.clear(); this.moduleWrapper.addAll(moduleWrapper); return this; } private String moduleOutputPathPrefix = \"\";"
      },
      {
        "txt": "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix) { this.moduleOutputPathPrefix = moduleOutputPathPrefix; return this; } private String createSourceMap = \"\"; CommandLineConfig setCreateSourceMap(String createSourceMap) { this.createSourceMap = createSourceMap; return this; } private final List<String> jscompError = Lists.newArrayList();"
      },
      {
        "txt": "CommandLineConfig setJscompError(List<String> jscompError) { this.jscompError.clear(); this.jscompError.addAll(jscompError); return this; } private final List<String> jscompWarning = Lists.newArrayList(); CommandLineConfig setJscompWarning(List<String> jscompWarning) { this.jscompWarning.clear(); this.jscompWarning.addAll(jscompWarning); return this;"
      },
      {
        "txt": "} private final List<String> jscompOff = Lists.newArrayList(); CommandLineConfig setJscompOff(List<String> jscompOff) { this.jscompOff.clear(); this.jscompOff.addAll(jscompOff); return this; } private final List<String> define = Lists.newArrayList(); CommandLineConfig setDefine(List<String> define) { this.define.clear();"
      },
      {
        "txt": "this.define.addAll(define); return this; } private String charset = \"\"; CommandLineConfig setCharset(String charset) { this.charset = charset; return this; } }"
      }
    ]
  },
  {
    "id": 568,
    "file_path": "src/com/google/javascript/jscomp/RemoveConstantExpressions.java",
    "start-bug-line": 91,
    "end-bug-line": 91,
    "bug": ") {",
    "fix": "|| exprBody.getType() == Token.NEW || exprBody.getType() == Token.CALL) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.Lists; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.ParallelCompilerPass.Result; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.List; final class RemoveConstantExpressions implements CompilerPass { private final AbstractCompiler compiler;"
      },
      {
        "txt": "RemoveConstantExpressions(AbstractCompiler compiler) { this.compiler = compiler; } @Override public void process(Node externs, Node root) { RemoveConstantRValuesCallback cb = new RemoveConstantRValuesCallback(); NodeTraversal.traverse(null, root, cb); cb.getResult().notifyCompiler(compiler); } static class RemoveConstantRValuesCallback extends AbstractPostOrderCallback {"
      },
      {
        "txt": "private final AstChangeProxy changeProxy; private final Result result = new Result(); RemoveConstantRValuesCallback() { this.changeProxy = new AstChangeProxy(); this.changeProxy.registerListener( new ReportCodeHasChangedListener(result)); } @Override public void visit(NodeTraversal traversal, Node node, Node parent) { trySimplify(parent, node);"
      },
      {
        "txt": "private void trySimplify(Node parent, Node node) { if (node.getType() != Token.EXPR_RESULT) { return; } Node exprBody = node.getFirstChild(); if (!NodeUtil.nodeTypeMayHaveSideEffects(exprBody) <extra_id_0> changeProxy.replaceWith(parent, node, getSideEffectNodes(exprBody)); } } private List<Node> getSideEffectNodes(Node node) { List<Node> subexpressions = Lists.newArrayList(); NodeTraversal.traverse("
      },
      {
        "txt": "List<Node> subexpressions = Lists.newArrayList(); NodeTraversal.traverse( null, node, new GatherSideEffectSubexpressionsCallback( null, new GatherSideEffectSubexpressionsCallback. CopySideEffectSubexpressions(null, subexpressions))); List<Node> replacements = Lists.newArrayList(); for (Node subexpression : subexpressions) { replacements.add(new Node(Token.EXPR_RESULT, subexpression));"
      },
      {
        "txt": "} return replacements; } public Result getResult() { return result; } } private static class ReportCodeHasChangedListener implements AstChangeProxy.ChangeListener { private final Result result;"
      },
      {
        "txt": "private ReportCodeHasChangedListener(Result result) { this.result = result; } @Override public void nodeRemoved(Node node) { result.changed = true; } }"
      }
    ]
  }
]
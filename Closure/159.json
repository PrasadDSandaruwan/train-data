[
  {
    "id": 758,
    "file_path": "src/com/google/javascript/jscomp/InlineFunctions.java",
    "start-bug-line": 777,
    "end-bug-line": 780,
    "bug": "if (node.getType() == Token.CALL) { Node child = node.getFirstChild(); if (child.getType() == Token.NAME) { changed.add(child.getString());",
    "fix": "if (node.getType() == Token.NAME) { if (isCandidateUsage(node)) { changed.add(node.getString());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.FunctionInjector.CanInlineResult; import com.google.javascript.jscomp.FunctionInjector.InliningMode; import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.Token; import java.util.Collection; import java.util.Collections; import java.util.Iterator; import java.util.Map; import java.util.Map.Entry; import java.util.Set; class InlineFunctions implements SpecializationAwareCompilerPass { private final Map<String, FunctionState> fns = Maps.newHashMap(); private final Map<Node, String> anonFns = Maps.newHashMap();"
      },
      {
        "txt": "private final AbstractCompiler compiler; private final FunctionInjector injector; private final boolean blockFunctionInliningEnabled; private final boolean inlineGlobalFunctions; private final boolean inlineLocalFunctions; private SpecializeModule.SpecializationState specializationState; InlineFunctions(AbstractCompiler compiler, Supplier<String> safeNameIdSupplier, boolean inlineGlobalFunctions, boolean inlineLocalFunctions,"
      },
      {
        "txt": "boolean blockFunctionInliningEnabled) { Preconditions.checkArgument(compiler != null); Preconditions.checkArgument(safeNameIdSupplier != null); this.compiler = compiler; this.inlineGlobalFunctions = inlineGlobalFunctions; this.inlineLocalFunctions = inlineLocalFunctions; this.blockFunctionInliningEnabled = blockFunctionInliningEnabled; this.injector = new FunctionInjector(compiler, safeNameIdSupplier, true); } FunctionState getOrCreateFunctionState(String fnName) {"
      },
      {
        "txt": "FunctionState fs = fns.get(fnName); if (fs == null) { fs = new FunctionState(); fns.put(fnName, fs); } return fs; } public void enableSpecialization(SpecializeModule.SpecializationState specializationState) { this.specializationState = specializationState;"
      },
      {
        "txt": "} @Override public void process(Node externs, Node root) { Preconditions.checkState(compiler.getLifeCycleStage().isNormalized()); NodeTraversal.traverse(compiler, root, new FindCandidateFunctions()); if (fns.isEmpty()) { return; // Nothing left to do. } NodeTraversal.traverse(compiler, root, new FindCandidatesReferences(fns, anonFns));"
      },
      {
        "txt": "trimCanidatesNotMeetingMinimumRequirements(); if (fns.isEmpty()) { return; // Nothing left to do. } Set<String> fnNames = Sets.newHashSet(fns.keySet()); injector.setKnownConstants(fnNames); trimCanidatesUsingOnCost(); if (fns.isEmpty()) { return; // Nothing left to do. }"
      },
      {
        "txt": "resolveInlineConflicts(); decomposeExpressions(fnNames); NodeTraversal.traverse(compiler, root, new CallVisitor( fns, anonFns, new Inline(injector, specializationState))); removeInlinedFunctions(); } private class FindCandidateFunctions implements Callback { private int callsSeen = 0; @Override"
      },
      {
        "txt": "public boolean shouldTraverse( NodeTraversal nodeTraversal, Node n, Node parent) { return inlineLocalFunctions || nodeTraversal.inGlobalScope(); } public void visit(NodeTraversal t, Node n, Node parent) { if ((t.inGlobalScope() && inlineGlobalFunctions) || (!t.inGlobalScope() && inlineLocalFunctions)) { findNamedFunctions(t, n, parent); findFunctionExpressions(t, n); }"
      },
      {
        "txt": "} public void findNamedFunctions(NodeTraversal t, Node n, Node parent) { if (!NodeUtil.isStatement(n)) { return; } switch (n.getType()) { case Token.VAR: Preconditions.checkState(n.hasOneChild()); Node nameNode = n.getFirstChild(); if (nameNode.getType() == Token.NAME && nameNode.hasChildren()"
      },
      {
        "txt": "&& nameNode.getFirstChild().getType() == Token.FUNCTION) { maybeAddFunction(new FunctionVar(n), t.getModule()); } break; case Token.FUNCTION: Preconditions.checkState(NodeUtil.isStatementBlock(parent) || parent.getType() == Token.LABEL); if (!NodeUtil.isFunctionExpression(n)) { Function fn = new NamedFunction(n); maybeAddFunction(fn, t.getModule());"
      },
      {
        "txt": "} break; } } public void findFunctionExpressions(NodeTraversal t, Node n) { switch (n.getType()) { case Token.CALL: Node fnNode = null; if (n.getFirstChild().getType() == Token.FUNCTION) { fnNode = n.getFirstChild();"
      },
      {
        "txt": "} else if (NodeUtil.isFunctionObjectCall(n)) { Node fnIdentifingNode = n.getFirstChild().getFirstChild(); if (fnIdentifingNode.getType() == Token.FUNCTION) { fnNode = fnIdentifingNode; } } if (fnNode != null) { Function fn = new FunctionExpression(fnNode, callsSeen++); maybeAddFunction(fn, t.getModule()); anonFns.put(fnNode, fn.getName());"
      },
      {
        "txt": "} break; } } } private void maybeAddFunction(Function fn, JSModule module) { String name = fn.getName(); FunctionState fs = getOrCreateFunctionState(name); if (fs.hasExistingFunctionDefinition()) { fs.setInline(false);"
      },
      {
        "txt": "} else { if (fs.canInline()) { fs.setFn(fn); if (injector.isDirectCallNodeReplacementPossible( fn.getFunctionNode())) { fs.inlineDirectly(true); } if (!isCandidateFunction(fn)) { fs.setInline(false); }"
      },
      {
        "txt": "if (fs.canInline()) { fs.setModule(module); Node fnNode = fn.getFunctionNode(); Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters(fnNode); if (!namesToAlias.isEmpty()) { fs.inlineDirectly(false); fs.setNamesToAlias(namesToAlias); } Node block = NodeUtil.getFunctionBody(fnNode);"
      },
      {
        "txt": "if (NodeUtil.referencesThis(block)) { fs.setReferencesThis(true); } if (NodeUtil.containsFunction(block)) { fs.setHasInnerFunctions(true); if (hasLocalNames(fnNode)) { fs.setInline(false); } } }"
      },
      {
        "txt": "if (fs.canInline() && !fs.canInlineDirectly()) { if (!blockFunctionInliningEnabled) { fs.setInline(false); } } } } } private boolean hasLocalNames(Node fnNode) { Node block = NodeUtil.getFunctionBody(fnNode);"
      },
      {
        "txt": "return NodeUtil.getFnParameters(fnNode).hasChildren() || NodeUtil.has( block, new NodeUtil.MatchDeclaration(), new NodeUtil.MatchShallowStatement()); } private static Node getContainingFunction(NodeTraversal t) { return (t.inGlobalScope()) ? null : t.getScopeRoot(); } private boolean isCandidateFunction(Function fn) {"
      },
      {
        "txt": "String fnName = fn.getName(); if (compiler.getCodingConvention().isExported(fnName)) { return false; } if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) { return false; } if (specializationState != null && !specializationState.canFixupFunction(fn.getFunctionNode())) { return false;"
      },
      {
        "txt": "} Node fnNode = fn.getFunctionNode(); return injector.doesFunctionMeetMinimumRequirements(fnName, fnNode); } private interface CallVisitorCallback { public void visitCallSite( NodeTraversal t, Node callNode, Node parent, FunctionState fs); } private static class CallVisitor extends AbstractPostOrderCallback { protected CallVisitorCallback callback;"
      },
      {
        "txt": "private Map<String, FunctionState> functionMap; private Map<Node, String> anonFunctionMap; CallVisitor(Map<String, FunctionState> fns, Map<Node, String> anonFns, CallVisitorCallback callback) { this.functionMap = fns; this.anonFunctionMap = anonFns; this.callback = callback; } public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "switch (n.getType()) { case Token.CALL: Node child = n.getFirstChild(); String name = null; if (child.getType() == Token.NAME) { name = child.getString(); } else if (child.getType() == Token.FUNCTION) { name = anonFunctionMap.get(child); } else if (NodeUtil.isFunctionObjectCall(n)) { Preconditions.checkState(NodeUtil.isGet(child));"
      },
      {
        "txt": "Node fnIdentifingNode = child.getFirstChild(); if (fnIdentifingNode.getType() == Token.NAME) { name = fnIdentifingNode.getString(); } else if (fnIdentifingNode.getType() == Token.FUNCTION) { name = anonFunctionMap.get(fnIdentifingNode); } } if (name != null) { FunctionState fs = functionMap.get(name); if (fs != null) {"
      },
      {
        "txt": "callback.visitCallSite(t, n, parent, fs); } } break; } } } static boolean isCandidateUsage(Node name) { Node parent = name.getParent(); Preconditions.checkState(name.getType() == Token.NAME);"
      },
      {
        "txt": "if (parent.getType() == Token.VAR || parent.getType() == Token.FUNCTION) { return true; } if (parent.getType() == Token.CALL && parent.getFirstChild() == name) { return true; } if (NodeUtil.isGet(parent) && name == parent.getFirstChild() && name.getNext().getType() == Token.STRING && name.getNext().getString().equals(\"call\")) {"
      },
      {
        "txt": "Node gramps = name.getAncestor(2); if (gramps.getType() == Token.CALL && gramps.getFirstChild() == parent) { return true; } } return false; } private class FindCandidatesReferences extends CallVisitor"
      },
      {
        "txt": "implements CallVisitorCallback { FindCandidatesReferences( Map<String, FunctionState> fns, Map<Node, String> anonFns) { super(fns, anonFns, null); this.callback = this; } @Override public void visit(NodeTraversal t, Node n, Node parent) { super.visit(t, n, parent);"
      },
      {
        "txt": "if (n.getType() == Token.NAME) { checkNameUsage(t, n, parent); } } public void visitCallSite( NodeTraversal t, Node callNode, Node parent, FunctionState fs) { maybeAddReference(t, fs, callNode, t.getModule()); } void maybeAddReference(NodeTraversal t, FunctionState fs, Node callNode, JSModule module) {"
      },
      {
        "txt": "if (!fs.canInline()) { return; } boolean referenceAdded = false; InliningMode mode = fs.canInlineDirectly() ? InliningMode.DIRECT : InliningMode.BLOCK; referenceAdded = maybeAddReferenceUsingMode( t, fs, callNode, module, mode); if (!referenceAdded && mode == InliningMode.DIRECT && blockFunctionInliningEnabled) {"
      },
      {
        "txt": "mode = InliningMode.BLOCK; referenceAdded = maybeAddReferenceUsingMode( t, fs, callNode, module, mode); } if (!referenceAdded) { fs.setRemove(false); } } private boolean maybeAddReferenceUsingMode( NodeTraversal t, FunctionState fs, Node callNode,"
      },
      {
        "txt": "JSModule module, InliningMode mode) { if (specializationState != null) { Node containingFunction = getContainingFunction(t); if (containingFunction != null && !specializationState.canFixupFunction( containingFunction)) { return false; } } CanInlineResult result = injector.canInlineReferenceToFunction( t, callNode, fs.getFn().getFunctionNode(),"
      },
      {
        "txt": "fs.getNamesToAlias(), mode, fs.getReferencesThis(), fs.hasInnerFunctions()); if (result != CanInlineResult.NO) { boolean decompose = (result == CanInlineResult.AFTER_DECOMPOSITION); fs.addReference(new Reference(callNode, module, mode, decompose)); return true; } return false; }"
      },
      {
        "txt": "private void checkNameUsage(NodeTraversal t, Node n, Node parent) { Preconditions.checkState(n.getType() == Token.NAME); if (isCandidateUsage(n)) { return; } String name = n.getString(); FunctionState fs = fns.get(name); if (fs == null) { return; }"
      },
      {
        "txt": "if (parent.getType() == Token.NEW) { Node target = parent.getFirstChild(); if (target.getType() == Token.NAME && target.getString().equals( ObjectPropertyStringPreprocess.EXTERN_OBJECT_PROPERTY_STRING)) { fs.setInline(false); } } if (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) { fs.setInline(false); } else {"
      },
      {
        "txt": "fs.setRemove(false); } } } private static class Inline implements CallVisitorCallback { private final FunctionInjector injector; private final SpecializeModule.SpecializationState specializationState; Inline(FunctionInjector injector, SpecializeModule.SpecializationState specializationState) { this.injector = injector;"
      },
      {
        "txt": "this.specializationState = specializationState; } public void visitCallSite( NodeTraversal t, Node callNode, Node parent, FunctionState fs) { Preconditions.checkState(fs.hasExistingFunctionDefinition()); if (fs.canInline()) { Reference ref = fs.getReference(callNode); if (ref != null) { if (specializationState != null) { Node containingFunction = getContainingFunction(t);"
      },
      {
        "txt": "if (containingFunction != null) { specializationState.reportSpecializedFunction(containingFunction); } } inlineFunction(t, callNode, fs, ref.mode); ref.inlined = true; } } } private void inlineFunction("
      },
      {
        "txt": "NodeTraversal t, Node callNode, FunctionState fs, InliningMode mode) { Function fn = fs.getFn(); String fnName = fn.getName(); Node fnNode = fs.getSafeFnNode(); Node newCode = injector.inline(t, callNode, fnName, fnNode, mode); t.getCompiler().reportCodeChange(); t.getCompiler().addToDebugLog(\"Inlined function: \" + fn.getName()); } } private void trimCanidatesNotMeetingMinimumRequirements() {"
      },
      {
        "txt": "Iterator<Entry<String, FunctionState>> i; for (i = fns.entrySet().iterator(); i.hasNext();) { FunctionState fs = i.next().getValue(); if (!fs.hasExistingFunctionDefinition() || !fs.canInline()) { i.remove(); } } } void trimCanidatesUsingOnCost() { Iterator<Entry<String, FunctionState>> i;"
      },
      {
        "txt": "for (i = fns.entrySet().iterator(); i.hasNext();) { FunctionState fs = i.next().getValue(); if (fs.hasReferences()) { boolean lowersCost = mimimizeCost(fs); if (!lowersCost) { i.remove(); } } else if (!fs.canRemove()) { i.remove(); }"
      },
      {
        "txt": "} } private boolean mimimizeCost(FunctionState fs) { if (!inliningLowersCost(fs)) { if (fs.hasBlockInliningReferences()) { fs.setRemove(false); fs.removeBlockInliningReferences(); if (!fs.hasReferences() || !inliningLowersCost(fs)) { return false; }"
      },
      {
        "txt": "} else { return false; } } return true; } private boolean inliningLowersCost(FunctionState fs) { return injector.inliningLowersCost( fs.getModule(), fs.getFn().getFunctionNode(),"
      },
      {
        "txt": "fs.getReferences(), fs.getNamesToAlias(), fs.canRemove(), fs.getReferencesThis()); } private void resolveInlineConflicts() { for (FunctionState fs : fns.values()) { resolveInlineConflictsForFunction(fs); } }"
      },
      {
        "txt": "private void resolveInlineConflictsForFunction(FunctionState fs) { if (!fs.hasReferences()) { return; } Node fnNode = fs.getFn().getFunctionNode(); Set<String> names = findCalledFunctions(fnNode); if (!names.isEmpty()) { for (String name : names) { FunctionState fsCalled = fns.get(name); if (fsCalled != null && fsCalled.canRemove()) {"
      },
      {
        "txt": "fsCalled.setRemove(false); if (!mimimizeCost(fsCalled)) { fsCalled.setInline(false); } } } fs.setSafeFnNode(fs.getFn().getFunctionNode().cloneTree()); } } private Set<String> findCalledFunctions(Node node) {"
      },
      {
        "txt": "findCalledFunctions(NodeUtil.getFunctionBody(node), changed); return changed; } private void findCalledFunctions( Node node, Set<String> changed) { Preconditions.checkArgument(changed != null); <extra_id_0> } } for (Node c = node.getFirstChild(); c != null; c = c.getNext()) { findCalledFunctions(c, changed); } }"
      },
      {
        "txt": "} } private void decomposeExpressions(Set<String> fnNames) { ExpressionDecomposer decomposer = new ExpressionDecomposer( compiler, compiler.getUniqueNameIdSupplier(), fnNames); for (FunctionState fs : fns.values()) { if (fs.canInline()) { for (Reference ref : fs.getReferences()) { if (ref.requiresDecomposition) { decomposer.maybeDecomposeExpression(ref.callNode);"
      },
      {
        "txt": "} } } } } void removeInlinedFunctions() { for (FunctionState fs : fns.values()) { if (fs.canRemove()) { Function fn = fs.getFn(); Preconditions.checkState(fs.canInline());"
      },
      {
        "txt": "Preconditions.checkState(fn != null); verifyAllReferencesInlined(fs); if (specializationState != null) { specializationState.reportRemovedFunction( fn.getFunctionNode(), fn.getDeclaringBlock()); } fn.remove(); compiler.reportCodeChange(); } }"
      },
      {
        "txt": "} void verifyAllReferencesInlined(FunctionState fs) { for (Reference ref : fs.getReferences()) { if (!ref.inlined) { throw new IllegalStateException(\"Call site missed.\\n call: \" + ref.callNode.toStringTree() + \"\\n parent: \" + ref.callNode.getParent().toStringTree()); } } }"
      },
      {
        "txt": "private static class FunctionState { private Function fn = null; private Node safeFnNode = null; private boolean inline = true; private boolean remove = true; private boolean inlineDirectly = false; private boolean referencesThis = false; private boolean hasInnerFunctions = false; private Map<Node, Reference> references = null; private JSModule module = null;"
      },
      {
        "txt": "private Set<String> namesToAlias = null; boolean hasExistingFunctionDefinition() { return (fn != null); } public void setReferencesThis(boolean referencesThis) { this.referencesThis = referencesThis; } public boolean getReferencesThis() { return this.referencesThis; }"
      },
      {
        "txt": "public void setHasInnerFunctions(boolean hasInnerFunctions) { this.hasInnerFunctions = hasInnerFunctions; } public boolean hasInnerFunctions() { return hasInnerFunctions; } void removeBlockInliningReferences() { Iterator<Entry<Node, Reference>> i; for (i = getReferencesInternal().entrySet().iterator(); i.hasNext();) { Entry<Node, Reference> entry = i.next();"
      },
      {
        "txt": "if (entry.getValue().mode == InliningMode.BLOCK) { i.remove(); } } } public boolean hasBlockInliningReferences() { for (Reference r : getReferencesInternal().values()) { if (r.mode == InliningMode.BLOCK) { return true; }"
      },
      {
        "txt": "} return false; } public Function getFn() { return fn; } public void setFn(Function fn) { Preconditions.checkState(this.fn == null); this.fn = fn; }"
      },
      {
        "txt": "public Node getSafeFnNode() { return (safeFnNode != null) ? safeFnNode : fn.getFunctionNode(); } public void setSafeFnNode(Node safeFnNode) { this.safeFnNode = safeFnNode; } public boolean canInline() { return inline; } public void setInline(boolean inline) {"
      },
      {
        "txt": "this.inline = inline; if (inline == false) { references = null; remove = false; } } public boolean canRemove() { return remove; } public void setRemove(boolean remove) {"
      },
      {
        "txt": "this.remove = remove; } public boolean canInlineDirectly() { return inlineDirectly; } public void inlineDirectly(boolean directReplacement) { this.inlineDirectly = directReplacement; } public boolean hasReferences() { return (references != null && !references.isEmpty());"
      },
      {
        "txt": "} private Map<Node, Reference> getReferencesInternal() { if (references == null) { return Collections.emptyMap(); } return references; } public void addReference(Reference ref) { if (references == null) { references = Maps.newHashMap();"
      },
      {
        "txt": "} references.put(ref.callNode, ref); } public Collection<Reference> getReferences() { return getReferencesInternal().values(); } public Reference getReference(Node n) { return getReferencesInternal().get(n); } public Set<String> getNamesToAlias() {"
      },
      {
        "txt": "if (namesToAlias == null) { return Collections.emptySet(); } return Collections.unmodifiableSet(namesToAlias); } public void setNamesToAlias(Set<String> names) { namesToAlias = names; } public void setModule(JSModule module) { this.module = module;"
      },
      {
        "txt": "} public JSModule getModule() { return module; } } private static interface Function { public String getName(); public Node getFunctionNode(); public void remove(); public Node getDeclaringBlock();"
      },
      {
        "txt": "} private static class NamedFunction implements Function { private final Node fn; public NamedFunction(Node fn) { this.fn = fn; } public String getName() { return fn.getFirstChild().getString(); } public Node getFunctionNode() {"
      },
      {
        "txt": "return fn; } public void remove() { NodeUtil.removeChild(fn.getParent(), fn); } @Override public Node getDeclaringBlock() { return fn.getParent(); } }"
      },
      {
        "txt": "private static class FunctionVar implements Function { private final Node var; public FunctionVar(Node var) { this.var = var; } public String getName() { return var.getFirstChild().getString(); } public Node getFunctionNode() { return var.getFirstChild().getFirstChild();"
      },
      {
        "txt": "} public void remove() { NodeUtil.removeChild(var.getParent(), var); } @Override public Node getDeclaringBlock() { return var.getParent(); } } private static class FunctionExpression implements Function {"
      },
      {
        "txt": "private final Node fn; private final String fakeName; public FunctionExpression(Node fn, int index) { this.fn = fn; this.fakeName = String.valueOf(index); } public String getName() { return fakeName; } public Node getFunctionNode() {"
      },
      {
        "txt": "return fn; } public void remove() { } @Override public Node getDeclaringBlock() { return null; } } class Reference extends FunctionInjector.Reference {"
      },
      {
        "txt": "final boolean requiresDecomposition; boolean inlined = false; Reference( Node callNode, JSModule module, InliningMode mode, boolean decompose) { super(callNode, module, mode); this.requiresDecomposition = decompose; } }"
      }
    ]
  }
]
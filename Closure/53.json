[
  {
    "id": 325,
    "file_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
    "start-bug-line": 331,
    "end-bug-line": 331,
    "bug": "",
    "fix": "if (nodes.isEmpty()) { replacement = new Node(Token.TRUE); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior;"
      },
      {
        "txt": "import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set;"
      },
      {
        "txt": "class InlineObjectLiterals implements CompilerPass { public static final String VAR_PREFIX = \"JSCompiler_object_inline_\"; private final AbstractCompiler compiler; private final Supplier<String> safeNameIdSupplier; InlineObjectLiterals( AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) { this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; }"
      },
      {
        "txt": "@Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback( compiler, new InliningBehavior()); callback.process(externs, root); } private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) {"
      },
      {
        "txt": "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); if (isVarInlineForbidden(v)) { continue; } ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (isInlinableObject(referenceInfo.references)) { staleVars.add(v); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference();"
      },
      {
        "txt": "splitObject(v, declaration, init, referenceInfo); } } } private void blacklistVarReferencesInTree(Node root, final Scope scope) { NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() { @Override public void visit(Node node) { if (node.getType() == Token.NAME) { staleVars.add(scope.getVar(node.getString()));"
      },
      {
        "txt": "} } }, NodeUtil.MATCH_NOT_FUNCTION); } private boolean isVarInlineForbidden(Var var) { return var.isGlobal() || var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var);"
      },
      {
        "txt": "} private boolean isInlinableObject(List<Reference> refs) { boolean ret = false; for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.getType() == Token.GETPROP) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.getType() == Token.CALL"
      },
      {
        "txt": "&& gramps.getFirstChild() == parent) { return false; } continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) {"
      },
      {
        "txt": "continue; } if (val.getType() != Token.OBJECTLIT) { return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.getType() == Token.GET || child.getType() == Token.SET) { return false;"
      },
      {
        "txt": "} Node childVal = child.getFirstChild(); for (Reference t : refs) { Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); }"
      },
      {
        "txt": "} } ret = true; } return ret; } private boolean isVarOrAssignExprLhs(Node n) { Node parent = n.getParent(); return parent.getType() == Token.VAR || (parent.getType() == Token.ASSIGN"
      },
      {
        "txt": "&& parent.getFirstChild() == n && parent.getParent().getType() == Token.EXPR_RESULT); } private Map<String, String> computeVarList( Var v, ReferenceCollection referenceInfo) { Map<String, String> varmap = Maps.newLinkedHashMap(); for (Reference ref : referenceInfo.references) { if (ref.isLvalue() || ref.isInitializingDeclaration()) { Node val = ref.getAssignedValue(); if (val != null) {"
      },
      {
        "txt": "Preconditions.checkState(val.getType() == Token.OBJECTLIT); for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { String varname = child.getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var);"
      },
      {
        "txt": "} } } else if (ref.getParent().getType() == Token.VAR) { } else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.getType() == Token.GETPROP); String varname = getprop.getLastChild().getString(); if (varmap.containsKey(varname)) { continue; }"
      },
      {
        "txt": "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } return varmap; } private void fillInitialValues(Reference init, Map<String, Node> initvals) { Node object = init.getAssignedValue(); Preconditions.checkState(object.getType() == Token.OBJECTLIT); for (Node key = object.getFirstChild(); key != null;"
      },
      {
        "txt": "key = key.getNext()) { initvals.put(key.getString(), key.removeFirstChild()); } } private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) { List<Node> nodes = Lists.newArrayList(); Node val = ref.getAssignedValue(); blacklistVarReferencesInTree(val, v.scope); Preconditions.checkState(val.getType() == Token.OBJECTLIT);"
      },
      {
        "txt": "Set<String> all = Sets.newLinkedHashSet(varmap.keySet()); for (Node key = val.getFirstChild(); key != null; key = key.getNext()) { String var = key.getString(); Node value = key.removeFirstChild(); nodes.add( new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value)); all.remove(var); }"
      },
      {
        "txt": "nodes.add( new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), NodeUtil.newUndefinedNode(null))); } Node replacement; <extra_id_0> nodes.add(new Node(Token.TRUE)); nodes = Lists.reverse(nodes); replacement = new Node(Token.COMMA); Node cur = replacement; int i; for (i = 0; i < nodes.size() - 2; i++) {"
      },
      {
        "txt": "int i; for (i = 0; i < nodes.size() - 2; i++) { cur.addChildToFront(nodes.get(i)); Node t = new Node(Token.COMMA); cur.addChildToFront(t); cur = t; } cur.addChildToFront(nodes.get(i)); cur.addChildToFront(nodes.get(i + 1)); Node replace = ref.getParent();"
      },
      {
        "txt": "replacement.copyInformationFromForTree(replace); if (replace.getType() == Token.VAR) { replace.getParent().replaceChild( replace, NodeUtil.newExpr(replacement)); } else { replace.getParent().replaceChild(replace, replacement); } } private void splitObject(Var v, Reference declaration, Reference init,"
      },
      {
        "txt": "ReferenceCollection referenceInfo) { Map<String, String> varmap = computeVarList(v, referenceInfo); Map<String, Node> initvals = Maps.newHashMap(); Node vnode; boolean defined = referenceInfo.isWellDefined() && init.getParent().getType() == Token.VAR; if (defined) { vnode = init.getParent(); fillInitialValues(init, initvals); } else {"
      },
      {
        "txt": "vnode = v.getScope().getRootNode().getLastChild().getFirstChild(); } for (Map.Entry<String, String> entry : varmap.entrySet()) { Node val = initvals.get(entry.getKey()); Node varnode = NodeUtil.newVarNode(entry.getValue(), val); if (val == null) { varnode.copyInformationFromForTree(vnode); } else { blacklistVarReferencesInTree(val, v.scope); }"
      },
      {
        "txt": "vnode.getParent().addChildBefore(varnode, vnode); } if (defined) { vnode.getParent().removeChild(vnode); } for (Reference ref : referenceInfo.references) { if (defined && ref == init) continue; if (ref.isLvalue()) { replaceAssignmentExpression(v, ref, varmap); } else if (ref.getParent().getType() == Token.VAR) {"
      },
      {
        "txt": "ref.getGrandparent().removeChild(ref.getParent()); } else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.getType() == Token.GETPROP); String var = getprop.getChildAtIndex(1).getString(); Preconditions.checkState(varmap.containsKey(var)); Node replacement = Node.newString(Token.NAME, varmap.get(var)); replacement.copyInformationFrom(getprop); ref.getGrandparent().replaceChild(ref.getParent(), replacement); }"
      },
      {
        "txt": "} compiler.reportCodeChange(); } }"
      }
    ]
  },
  {
    "id": 326,
    "file_path": "src/com/google/javascript/jscomp/InlineObjectLiterals.java",
    "start-bug-line": 350,
    "end-bug-line": 350,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior; import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection; import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceMap;"
      },
      {
        "txt": "import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Set; class InlineObjectLiterals implements CompilerPass { public static final String VAR_PREFIX = \"JSCompiler_object_inline_\"; private final AbstractCompiler compiler;"
      },
      {
        "txt": "private final Supplier<String> safeNameIdSupplier; InlineObjectLiterals( AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) { this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; } @Override public void process(Node externs, Node root) { ReferenceCollectingCallback callback = new ReferenceCollectingCallback("
      },
      {
        "txt": "compiler, new InliningBehavior()); callback.process(externs, root); } private class InliningBehavior implements Behavior { private final Set<Var> staleVars = Sets.newHashSet(); @Override public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap) { for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) { Var v = it.next(); if (isVarInlineForbidden(v)) {"
      },
      {
        "txt": "continue; } ReferenceCollection referenceInfo = referenceMap.getReferences(v); if (isInlinableObject(referenceInfo.references)) { staleVars.add(v); Reference declaration = referenceInfo.references.get(0); Reference init = referenceInfo.getInitializingReference(); splitObject(v, declaration, init, referenceInfo); } }"
      },
      {
        "txt": "} private void blacklistVarReferencesInTree(Node root, final Scope scope) { NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() { @Override public void visit(Node node) { if (node.getType() == Token.NAME) { staleVars.add(scope.getVar(node.getString())); } } }, NodeUtil.MATCH_NOT_FUNCTION);"
      },
      {
        "txt": "} private boolean isVarInlineForbidden(Var var) { return var.isGlobal() || var.isExtern() || compiler.getCodingConvention().isExported(var.name) || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name) || staleVars.contains(var); } private boolean isInlinableObject(List<Reference> refs) { boolean ret = false;"
      },
      {
        "txt": "for (Reference ref : refs) { Node name = ref.getNode(); Node parent = ref.getParent(); Node gramps = ref.getGrandparent(); if (parent.getType() == Token.GETPROP) { Preconditions.checkState(parent.getFirstChild() == name); if (gramps.getType() == Token.CALL && gramps.getFirstChild() == parent) { return false; }"
      },
      {
        "txt": "continue; } if (!isVarOrAssignExprLhs(name)) { return false; } Node val = ref.getAssignedValue(); if (val == null) { continue; } if (val.getType() != Token.OBJECTLIT) {"
      },
      {
        "txt": "return false; } for (Node child = val.getFirstChild(); child != null; child = child.getNext()) { if (child.getType() == Token.GET || child.getType() == Token.SET) { return false; } Node childVal = child.getFirstChild(); for (Reference t : refs) {"
      },
      {
        "txt": "Node refNode = t.getParent(); while (!NodeUtil.isStatementBlock(refNode)) { if (refNode == childVal) { return false; } refNode = refNode.getParent(); } } } ret = true;"
      },
      {
        "txt": "} return ret; } private boolean isVarOrAssignExprLhs(Node n) { Node parent = n.getParent(); return parent.getType() == Token.VAR || (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n && parent.getParent().getType() == Token.EXPR_RESULT); }"
      },
      {
        "txt": "private Map<String, String> computeVarList( Var v, ReferenceCollection referenceInfo) { Map<String, String> varmap = Maps.newLinkedHashMap(); for (Reference ref : referenceInfo.references) { if (ref.isLvalue() || ref.isInitializingDeclaration()) { Node val = ref.getAssignedValue(); if (val != null) { Preconditions.checkState(val.getType() == Token.OBJECTLIT); for (Node child = val.getFirstChild(); child != null; child = child.getNext()) {"
      },
      {
        "txt": "String varname = child.getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); } } } else if (ref.getParent().getType() == Token.VAR) {"
      },
      {
        "txt": "} else { Node getprop = ref.getParent(); Preconditions.checkState(getprop.getType() == Token.GETPROP); String varname = getprop.getLastChild().getString(); if (varmap.containsKey(varname)) { continue; } String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get(); varmap.put(varname, var); }"
      },
      {
        "txt": "} return varmap; } private void fillInitialValues(Reference init, Map<String, Node> initvals) { Node object = init.getAssignedValue(); Preconditions.checkState(object.getType() == Token.OBJECTLIT); for (Node key = object.getFirstChild(); key != null; key = key.getNext()) { initvals.put(key.getString(), key.removeFirstChild()); }"
      },
      {
        "txt": "} private void replaceAssignmentExpression(Var v, Reference ref, Map<String, String> varmap) { List<Node> nodes = Lists.newArrayList(); Node val = ref.getAssignedValue(); blacklistVarReferencesInTree(val, v.scope); Preconditions.checkState(val.getType() == Token.OBJECTLIT); Set<String> all = Sets.newLinkedHashSet(varmap.keySet()); for (Node key = val.getFirstChild(); key != null; key = key.getNext()) {"
      },
      {
        "txt": "String var = key.getString(); Node value = key.removeFirstChild(); nodes.add( new Node(Token.ASSIGN, Node.newString(Token.NAME, varmap.get(var)), value)); all.remove(var); } for (String var : all) { nodes.add( new Node(Token.ASSIGN,"
      },
      {
        "txt": "Node.newString(Token.NAME, varmap.get(var)), NodeUtil.newUndefinedNode(null))); } Node replacement; nodes.add(new Node(Token.TRUE)); nodes = Lists.reverse(nodes); replacement = new Node(Token.COMMA); Node cur = replacement; int i; for (i = 0; i < nodes.size() - 2; i++) {"
      },
      {
        "txt": "Node t = new Node(Token.COMMA); cur.addChildToFront(t); cur = t; } cur.addChildToFront(nodes.get(i)); cur.addChildToFront(nodes.get(i + 1)); <extra_id_0> Node replace = ref.getParent(); replacement.copyInformationFromForTree(replace); if (replace.getType() == Token.VAR) { replace.getParent().replaceChild( replace, NodeUtil.newExpr(replacement)); } else {"
      },
      {
        "txt": "replace, NodeUtil.newExpr(replacement)); } else { replace.getParent().replaceChild(replace, replacement); } } private void splitObject(Var v, Reference declaration, Reference init, ReferenceCollection referenceInfo) { Map<String, String> varmap = computeVarList(v, referenceInfo); Map<String, Node> initvals = Maps.newHashMap();"
      },
      {
        "txt": "Node vnode; boolean defined = referenceInfo.isWellDefined() && init.getParent().getType() == Token.VAR; if (defined) { vnode = init.getParent(); fillInitialValues(init, initvals); } else { vnode = v.getScope().getRootNode().getLastChild().getFirstChild(); } for (Map.Entry<String, String> entry : varmap.entrySet()) {"
      },
      {
        "txt": "Node val = initvals.get(entry.getKey()); Node varnode = NodeUtil.newVarNode(entry.getValue(), val); if (val == null) { varnode.copyInformationFromForTree(vnode); } else { blacklistVarReferencesInTree(val, v.scope); } vnode.getParent().addChildBefore(varnode, vnode); } if (defined) {"
      },
      {
        "txt": "vnode.getParent().removeChild(vnode); } for (Reference ref : referenceInfo.references) { if (defined && ref == init) continue; if (ref.isLvalue()) { replaceAssignmentExpression(v, ref, varmap); } else if (ref.getParent().getType() == Token.VAR) { ref.getGrandparent().removeChild(ref.getParent()); } else { Node getprop = ref.getParent();"
      },
      {
        "txt": "Preconditions.checkState(getprop.getType() == Token.GETPROP); String var = getprop.getChildAtIndex(1).getString(); Preconditions.checkState(varmap.containsKey(var)); Node replacement = Node.newString(Token.NAME, varmap.get(var)); replacement.copyInformationFrom(getprop); ref.getGrandparent().replaceChild(ref.getParent(), replacement); } } compiler.reportCodeChange(); }"
      }
    ]
  }
]
[
  {
    "id": 285,
    "file_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "start-bug-line": 380,
    "end-bug-line": 380,
    "bug": "sb.append(getPropertyType(property).toString());",
    "fix": "sb.append(getPropertyType(property).toStringHelper(forAnnotations));",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.rhino.jstype; import static com.google.common.base.Preconditions.checkState; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.rhino.ErrorReporter; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import java.util.Map; import java.util.Set; class PrototypeObjectType extends ObjectType { private static final long serialVersionUID = 1L; private final String className; private final Map<String, Property> properties; private final boolean nativeType; private ObjectType implicitPrototypeFallback; private FunctionType ownerFunction = null; private boolean prettyPrint = false;"
      },
      {
        "txt": "private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4; PrototypeObjectType(JSTypeRegistry registry, String className, ObjectType implicitPrototype) { this(registry, className, implicitPrototype, false); } PrototypeObjectType(JSTypeRegistry registry, String className, ObjectType implicitPrototype, boolean nativeType) { super(registry); this.properties = Maps.newTreeMap(); this.className = className;"
      },
      {
        "txt": "this.nativeType = nativeType; if (nativeType || implicitPrototype != null) { setImplicitPrototype(implicitPrototype); } else { setImplicitPrototype( registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE)); } } @Override public Property getSlot(String name) {"
      },
      {
        "txt": "if (properties.containsKey(name)) { return properties.get(name); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { Property prop = implicitPrototype.getSlot(name); if (prop != null) { return prop; } }"
      },
      {
        "txt": "for (ObjectType interfaceType : getCtorExtendedInterfaces()) { Property prop = interfaceType.getSlot(name); if (prop != null) { return prop; } } return null; } @Override public int getPropertiesCount() {"
      },
      {
        "txt": "ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype == null) { return this.properties.size(); } int localCount = 0; for (String property : properties.keySet()) { if (!implicitPrototype.hasProperty(property)) { localCount++; } }"
      },
      {
        "txt": "return implicitPrototype.getPropertiesCount() + localCount; } @Override public boolean hasProperty(String propertyName) { return isUnknownType() || getSlot(propertyName) != null; } @Override public boolean hasOwnProperty(String propertyName) { return properties.get(propertyName) != null; }"
      },
      {
        "txt": "@Override public Set<String> getOwnPropertyNames() { return properties.keySet(); } @Override public boolean isPropertyTypeDeclared(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; }"
      },
      {
        "txt": "return !slot.isTypeInferred(); } @Override void collectPropertyNames(Set<String> props) { for (String prop : properties.keySet()) { props.add(prop); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototype.collectPropertyNames(props);"
      },
      {
        "txt": "} } @Override public boolean isPropertyTypeInferred(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; } return slot.isTypeInferred(); }"
      },
      {
        "txt": "@Override public JSType getPropertyType(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return getNativeType(JSTypeNative.UNKNOWN_TYPE); } return slot.getType(); } @Override public boolean isPropertyInExterns(String propertyName) {"
      },
      {
        "txt": "Property p = properties.get(propertyName); if (p != null) { return p.isFromExterns(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.isPropertyInExterns(propertyName); } return false; }"
      },
      {
        "txt": "@Override boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) { if (hasOwnDeclaredProperty(name)) { return false; } Property newProp = new Property( name, type, inferred, propertyNode); Property oldProp = properties.get(name); if (oldProp != null) {"
      },
      {
        "txt": "newProp.setJSDocInfo(oldProp.getJSDocInfo()); } properties.put(name, newProp); return true; } @Override public boolean removeProperty(String name) { return properties.remove(name) != null; } @Override"
      },
      {
        "txt": "public Node getPropertyNode(String propertyName) { Property p = properties.get(propertyName); if (p != null) { return p.getNode(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.getPropertyNode(propertyName); } return null;"
      },
      {
        "txt": "} @Override public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) { Property p = properties.get(propertyName); if (p != null) { return p.getJSDocInfo(); } return null; } @Override"
      },
      {
        "txt": "public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) { if (info != null) { if (!properties.containsKey(propertyName)) { defineInferredProperty(propertyName, getPropertyType(propertyName), null); } Property property = properties.get(propertyName); if (property != null) { property.setJSDocInfo(info); }"
      },
      {
        "txt": "} } @Override public boolean matchesNumberContext() { return isNumberObjectType() || isDateType() || isBooleanObjectType() || isStringObjectType() || hasOverridenNativeProperty(\"valueOf\"); } @Override public boolean matchesStringContext() { return isTheObjectType() || isStringObjectType() || isDateType() ||"
      },
      {
        "txt": "isRegexpType() || isArrayType() || isNumberObjectType() || isBooleanObjectType() || hasOverridenNativeProperty(\"toString\"); } private boolean hasOverridenNativeProperty(String propertyName) { if (isNativeObjectType()) { return false; } JSType propertyType = getPropertyType(propertyName); ObjectType nativeType = this.isFunctionType() ?"
      },
      {
        "txt": "registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE); JSType nativePropertyType = nativeType.getPropertyType(propertyName); return propertyType != nativePropertyType; } @Override public JSType unboxesTo() { if (isStringObjectType()) { return getNativeType(JSTypeNative.STRING_TYPE); } else if (isBooleanObjectType()) {"
      },
      {
        "txt": "return getNativeType(JSTypeNative.BOOLEAN_TYPE); } else if (isNumberObjectType()) { return getNativeType(JSTypeNative.NUMBER_TYPE); } else { return super.unboxesTo(); } } @Override public boolean matchesObjectContext() { return true;"
      },
      {
        "txt": "} @Override public boolean canBeCalled() { return isRegexpType(); } @Override String toStringHelper(boolean forAnnotations) { if (hasReferenceName()) { return getReferenceName(); } else if (prettyPrint) {"
      },
      {
        "txt": "prettyPrint = false; Set<String> propertyNames = Sets.newTreeSet(); for (ObjectType current = this; current != null && !current.isNativeObjectType() && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES; current = current.getImplicitPrototype()) { propertyNames.addAll(current.getOwnPropertyNames()); } StringBuilder sb = new StringBuilder(); sb.append(\"{\");"
      },
      {
        "txt": "for (String property : propertyNames) { if (i > 0) { sb.append(\", \"); } sb.append(property); sb.append(\": \"); <extra_id_0> ++i; if (i == MAX_PRETTY_PRINTED_PROPERTIES) { sb.append(\", ...\"); break; } }"
      },
      {
        "txt": "} } sb.append(\"}\"); prettyPrint = true; return sb.toString(); } else { return \"{...}\"; } } void setPrettyPrint(boolean prettyPrint) {"
      },
      {
        "txt": "this.prettyPrint = prettyPrint; } boolean isPrettyPrint() { return prettyPrint; } @Override public FunctionType getConstructor() { return null; } @Override"
      },
      {
        "txt": "public ObjectType getImplicitPrototype() { return implicitPrototypeFallback; } final void setImplicitPrototype(ObjectType implicitPrototype) { checkState(!hasCachedValues()); this.implicitPrototypeFallback = implicitPrototype; } @Override public String getReferenceName() { if (className != null) {"
      },
      {
        "txt": "return className; } else if (ownerFunction != null) { return ownerFunction.getReferenceName() + \".prototype\"; } else { return null; } } @Override public boolean hasReferenceName() { return className != null || ownerFunction != null;"
      },
      {
        "txt": "} @Override public boolean isSubtype(JSType that) { if (JSType.isSubtypeHelper(this, that)) { return true; } if (that.isUnionType()) { return false; } if (that.isRecordType()) {"
      },
      {
        "txt": "return RecordType.isSubtype(this, that.toMaybeRecordType()); } ObjectType thatObj = that.toObjectType(); ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor(); if (thatCtor != null && thatCtor.isInterface()) { Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces(); for (ObjectType thisInterface : thisInterfaces) { if (thisInterface.isSubtype(that)) { return true; }"
      },
      {
        "txt": "} } if (getConstructor() != null && getConstructor().isInterface()) { for (ObjectType thisInterface : getCtorExtendedInterfaces()) { if (thisInterface.isSubtype(that)) { return true; } } } if (isUnknownType() || implicitPrototypeChainIsUnknown()) {"
      },
      {
        "txt": "return true; } return this.isImplicitPrototype(thatObj); } private boolean implicitPrototypeChainIsUnknown() { ObjectType p = getImplicitPrototype(); while (p != null) { if (p.isUnknownType()) { return true; }"
      },
      {
        "txt": "p = p.getImplicitPrototype(); } return false; } @Override public boolean hasCachedValues() { return super.hasCachedValues(); } @Override public boolean isNativeObjectType() {"
      },
      {
        "txt": "return nativeType; } void setOwnerFunction(FunctionType type) { Preconditions.checkState(ownerFunction == null || type == null); ownerFunction = type; } @Override public FunctionType getOwnerFunction() { return ownerFunction; }"
      },
      {
        "txt": "@Override public Iterable<ObjectType> getCtorImplementedInterfaces() { return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : ImmutableList.<ObjectType>of(); } @Override public Iterable<ObjectType> getCtorExtendedInterfaces() { return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces()"
      },
      {
        "txt": ": ImmutableList.<ObjectType>of(); } @Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototypeFallback = (ObjectType) implicitPrototype.resolve(t, scope); }"
      },
      {
        "txt": "for (Property prop : properties.values()) { prop.setType(safeResolve(prop.getType(), t, scope)); } return this; }"
      }
    ]
  },
  {
    "id": 286,
    "file_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "start-bug-line": 383,
    "end-bug-line": 383,
    "bug": "if (i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "fix": "if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import static com.google.common.base.Preconditions.checkState; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.rhino.ErrorReporter; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import java.util.Map; import java.util.Set;"
      },
      {
        "txt": "class PrototypeObjectType extends ObjectType { private static final long serialVersionUID = 1L; private final String className; private final Map<String, Property> properties; private final boolean nativeType; private ObjectType implicitPrototypeFallback; private FunctionType ownerFunction = null; private boolean prettyPrint = false; private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4; PrototypeObjectType(JSTypeRegistry registry, String className,"
      },
      {
        "txt": "ObjectType implicitPrototype) { this(registry, className, implicitPrototype, false); } PrototypeObjectType(JSTypeRegistry registry, String className, ObjectType implicitPrototype, boolean nativeType) { super(registry); this.properties = Maps.newTreeMap(); this.className = className; this.nativeType = nativeType; if (nativeType || implicitPrototype != null) {"
      },
      {
        "txt": "setImplicitPrototype(implicitPrototype); } else { setImplicitPrototype( registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE)); } } @Override public Property getSlot(String name) { if (properties.containsKey(name)) { return properties.get(name);"
      },
      {
        "txt": "} ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { Property prop = implicitPrototype.getSlot(name); if (prop != null) { return prop; } } for (ObjectType interfaceType : getCtorExtendedInterfaces()) { Property prop = interfaceType.getSlot(name);"
      },
      {
        "txt": "if (prop != null) { return prop; } } return null; } @Override public int getPropertiesCount() { ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype == null) {"
      },
      {
        "txt": "return this.properties.size(); } int localCount = 0; for (String property : properties.keySet()) { if (!implicitPrototype.hasProperty(property)) { localCount++; } } return implicitPrototype.getPropertiesCount() + localCount; }"
      },
      {
        "txt": "@Override public boolean hasProperty(String propertyName) { return isUnknownType() || getSlot(propertyName) != null; } @Override public boolean hasOwnProperty(String propertyName) { return properties.get(propertyName) != null; } @Override public Set<String> getOwnPropertyNames() {"
      },
      {
        "txt": "return properties.keySet(); } @Override public boolean isPropertyTypeDeclared(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; } return !slot.isTypeInferred(); }"
      },
      {
        "txt": "@Override void collectPropertyNames(Set<String> props) { for (String prop : properties.keySet()) { props.add(prop); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototype.collectPropertyNames(props); } }"
      },
      {
        "txt": "@Override public boolean isPropertyTypeInferred(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; } return slot.isTypeInferred(); } @Override public JSType getPropertyType(String property) {"
      },
      {
        "txt": "StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return getNativeType(JSTypeNative.UNKNOWN_TYPE); } return slot.getType(); } @Override public boolean isPropertyInExterns(String propertyName) { Property p = properties.get(propertyName); if (p != null) {"
      },
      {
        "txt": "return p.isFromExterns(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.isPropertyInExterns(propertyName); } return false; } @Override boolean defineProperty(String name, JSType type, boolean inferred,"
      },
      {
        "txt": "Node propertyNode) { if (hasOwnDeclaredProperty(name)) { return false; } Property newProp = new Property( name, type, inferred, propertyNode); Property oldProp = properties.get(name); if (oldProp != null) { newProp.setJSDocInfo(oldProp.getJSDocInfo()); }"
      },
      {
        "txt": "properties.put(name, newProp); return true; } @Override public boolean removeProperty(String name) { return properties.remove(name) != null; } @Override public Node getPropertyNode(String propertyName) { Property p = properties.get(propertyName);"
      },
      {
        "txt": "if (p != null) { return p.getNode(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.getPropertyNode(propertyName); } return null; } @Override"
      },
      {
        "txt": "public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) { Property p = properties.get(propertyName); if (p != null) { return p.getJSDocInfo(); } return null; } @Override public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) { if (info != null) {"
      },
      {
        "txt": "if (!properties.containsKey(propertyName)) { defineInferredProperty(propertyName, getPropertyType(propertyName), null); } Property property = properties.get(propertyName); if (property != null) { property.setJSDocInfo(info); } } }"
      },
      {
        "txt": "@Override public boolean matchesNumberContext() { return isNumberObjectType() || isDateType() || isBooleanObjectType() || isStringObjectType() || hasOverridenNativeProperty(\"valueOf\"); } @Override public boolean matchesStringContext() { return isTheObjectType() || isStringObjectType() || isDateType() || isRegexpType() || isArrayType() || isNumberObjectType() || isBooleanObjectType() || hasOverridenNativeProperty(\"toString\");"
      },
      {
        "txt": "} private boolean hasOverridenNativeProperty(String propertyName) { if (isNativeObjectType()) { return false; } JSType propertyType = getPropertyType(propertyName); ObjectType nativeType = this.isFunctionType() ? registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) : registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE);"
      },
      {
        "txt": "JSType nativePropertyType = nativeType.getPropertyType(propertyName); return propertyType != nativePropertyType; } @Override public JSType unboxesTo() { if (isStringObjectType()) { return getNativeType(JSTypeNative.STRING_TYPE); } else if (isBooleanObjectType()) { return getNativeType(JSTypeNative.BOOLEAN_TYPE); } else if (isNumberObjectType()) {"
      },
      {
        "txt": "return getNativeType(JSTypeNative.NUMBER_TYPE); } else { return super.unboxesTo(); } } @Override public boolean matchesObjectContext() { return true; } @Override"
      },
      {
        "txt": "public boolean canBeCalled() { return isRegexpType(); } @Override String toStringHelper(boolean forAnnotations) { if (hasReferenceName()) { return getReferenceName(); } else if (prettyPrint) { prettyPrint = false; Set<String> propertyNames = Sets.newTreeSet();"
      },
      {
        "txt": "for (ObjectType current = this; current != null && !current.isNativeObjectType() && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES; current = current.getImplicitPrototype()) { propertyNames.addAll(current.getOwnPropertyNames()); } StringBuilder sb = new StringBuilder(); sb.append(\"{\"); int i = 0; for (String property : propertyNames) {"
      },
      {
        "txt": "sb.append(\", \"); } sb.append(property); sb.append(\": \"); sb.append(getPropertyType(property).toString()); ++i; <extra_id_0> sb.append(\", ...\"); break; } } sb.append(\"}\"); prettyPrint = true;"
      },
      {
        "txt": "sb.append(\"}\"); prettyPrint = true; return sb.toString(); } else { return \"{...}\"; } } void setPrettyPrint(boolean prettyPrint) { this.prettyPrint = prettyPrint; }"
      },
      {
        "txt": "boolean isPrettyPrint() { return prettyPrint; } @Override public FunctionType getConstructor() { return null; } @Override public ObjectType getImplicitPrototype() { return implicitPrototypeFallback;"
      },
      {
        "txt": "} final void setImplicitPrototype(ObjectType implicitPrototype) { checkState(!hasCachedValues()); this.implicitPrototypeFallback = implicitPrototype; } @Override public String getReferenceName() { if (className != null) { return className; } else if (ownerFunction != null) {"
      },
      {
        "txt": "return ownerFunction.getReferenceName() + \".prototype\"; } else { return null; } } @Override public boolean hasReferenceName() { return className != null || ownerFunction != null; } @Override"
      },
      {
        "txt": "public boolean isSubtype(JSType that) { if (JSType.isSubtypeHelper(this, that)) { return true; } if (that.isUnionType()) { return false; } if (that.isRecordType()) { return RecordType.isSubtype(this, that.toMaybeRecordType()); }"
      },
      {
        "txt": "ObjectType thatObj = that.toObjectType(); ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor(); if (thatCtor != null && thatCtor.isInterface()) { Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces(); for (ObjectType thisInterface : thisInterfaces) { if (thisInterface.isSubtype(that)) { return true; } } }"
      },
      {
        "txt": "if (getConstructor() != null && getConstructor().isInterface()) { for (ObjectType thisInterface : getCtorExtendedInterfaces()) { if (thisInterface.isSubtype(that)) { return true; } } } if (isUnknownType() || implicitPrototypeChainIsUnknown()) { return true; }"
      },
      {
        "txt": "return this.isImplicitPrototype(thatObj); } private boolean implicitPrototypeChainIsUnknown() { ObjectType p = getImplicitPrototype(); while (p != null) { if (p.isUnknownType()) { return true; } p = p.getImplicitPrototype(); }"
      },
      {
        "txt": "return false; } @Override public boolean hasCachedValues() { return super.hasCachedValues(); } @Override public boolean isNativeObjectType() { return nativeType; }"
      },
      {
        "txt": "void setOwnerFunction(FunctionType type) { Preconditions.checkState(ownerFunction == null || type == null); ownerFunction = type; } @Override public FunctionType getOwnerFunction() { return ownerFunction; } @Override public Iterable<ObjectType> getCtorImplementedInterfaces() {"
      },
      {
        "txt": "return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : ImmutableList.<ObjectType>of(); } @Override public Iterable<ObjectType> getCtorExtendedInterfaces() { return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : ImmutableList.<ObjectType>of(); }"
      },
      {
        "txt": "@Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototypeFallback = (ObjectType) implicitPrototype.resolve(t, scope); } for (Property prop : properties.values()) { prop.setType(safeResolve(prop.getType(), t, scope));"
      },
      {
        "txt": "} return this; }"
      }
    ]
  },
  {
    "id": 287,
    "file_path": "src/com/google/javascript/rhino/jstype/PrototypeObjectType.java",
    "start-bug-line": 394,
    "end-bug-line": 394,
    "bug": "return \"{...}\";",
    "fix": "return forAnnotations ? \"?\" : \"{...}\";",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.rhino.jstype; import static com.google.common.base.Preconditions.checkState; import com.google.common.base.Preconditions; import com.google.common.collect.ImmutableList; import com.google.common.collect.Maps; import com.google.common.collect.Sets; import com.google.javascript.rhino.ErrorReporter; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import java.util.Map;"
      },
      {
        "txt": "import java.util.Set; class PrototypeObjectType extends ObjectType { private static final long serialVersionUID = 1L; private final String className; private final Map<String, Property> properties; private final boolean nativeType; private ObjectType implicitPrototypeFallback; private FunctionType ownerFunction = null; private boolean prettyPrint = false; private static final int MAX_PRETTY_PRINTED_PROPERTIES = 4;"
      },
      {
        "txt": "PrototypeObjectType(JSTypeRegistry registry, String className, ObjectType implicitPrototype) { this(registry, className, implicitPrototype, false); } PrototypeObjectType(JSTypeRegistry registry, String className, ObjectType implicitPrototype, boolean nativeType) { super(registry); this.properties = Maps.newTreeMap(); this.className = className; this.nativeType = nativeType;"
      },
      {
        "txt": "if (nativeType || implicitPrototype != null) { setImplicitPrototype(implicitPrototype); } else { setImplicitPrototype( registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE)); } } @Override public Property getSlot(String name) { if (properties.containsKey(name)) {"
      },
      {
        "txt": "return properties.get(name); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { Property prop = implicitPrototype.getSlot(name); if (prop != null) { return prop; } } for (ObjectType interfaceType : getCtorExtendedInterfaces()) {"
      },
      {
        "txt": "Property prop = interfaceType.getSlot(name); if (prop != null) { return prop; } } return null; } @Override public int getPropertiesCount() { ObjectType implicitPrototype = getImplicitPrototype();"
      },
      {
        "txt": "if (implicitPrototype == null) { return this.properties.size(); } int localCount = 0; for (String property : properties.keySet()) { if (!implicitPrototype.hasProperty(property)) { localCount++; } } return implicitPrototype.getPropertiesCount() + localCount;"
      },
      {
        "txt": "} @Override public boolean hasProperty(String propertyName) { return isUnknownType() || getSlot(propertyName) != null; } @Override public boolean hasOwnProperty(String propertyName) { return properties.get(propertyName) != null; } @Override"
      },
      {
        "txt": "public Set<String> getOwnPropertyNames() { return properties.keySet(); } @Override public boolean isPropertyTypeDeclared(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; } return !slot.isTypeInferred();"
      },
      {
        "txt": "} @Override void collectPropertyNames(Set<String> props) { for (String prop : properties.keySet()) { props.add(prop); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototype.collectPropertyNames(props); }"
      },
      {
        "txt": "} @Override public boolean isPropertyTypeInferred(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return false; } return slot.isTypeInferred(); } @Override"
      },
      {
        "txt": "public JSType getPropertyType(String property) { StaticSlot<JSType> slot = getSlot(property); if (slot == null) { return getNativeType(JSTypeNative.UNKNOWN_TYPE); } return slot.getType(); } @Override public boolean isPropertyInExterns(String propertyName) { Property p = properties.get(propertyName);"
      },
      {
        "txt": "if (p != null) { return p.isFromExterns(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.isPropertyInExterns(propertyName); } return false; } @Override"
      },
      {
        "txt": "boolean defineProperty(String name, JSType type, boolean inferred, Node propertyNode) { if (hasOwnDeclaredProperty(name)) { return false; } Property newProp = new Property( name, type, inferred, propertyNode); Property oldProp = properties.get(name); if (oldProp != null) { newProp.setJSDocInfo(oldProp.getJSDocInfo());"
      },
      {
        "txt": "} properties.put(name, newProp); return true; } @Override public boolean removeProperty(String name) { return properties.remove(name) != null; } @Override public Node getPropertyNode(String propertyName) {"
      },
      {
        "txt": "Property p = properties.get(propertyName); if (p != null) { return p.getNode(); } ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { return implicitPrototype.getPropertyNode(propertyName); } return null; }"
      },
      {
        "txt": "@Override public JSDocInfo getOwnPropertyJSDocInfo(String propertyName) { Property p = properties.get(propertyName); if (p != null) { return p.getJSDocInfo(); } return null; } @Override public void setPropertyJSDocInfo(String propertyName, JSDocInfo info) {"
      },
      {
        "txt": "if (info != null) { if (!properties.containsKey(propertyName)) { defineInferredProperty(propertyName, getPropertyType(propertyName), null); } Property property = properties.get(propertyName); if (property != null) { property.setJSDocInfo(info); } }"
      },
      {
        "txt": "} @Override public boolean matchesNumberContext() { return isNumberObjectType() || isDateType() || isBooleanObjectType() || isStringObjectType() || hasOverridenNativeProperty(\"valueOf\"); } @Override public boolean matchesStringContext() { return isTheObjectType() || isStringObjectType() || isDateType() || isRegexpType() || isArrayType() || isNumberObjectType() ||"
      },
      {
        "txt": "isBooleanObjectType() || hasOverridenNativeProperty(\"toString\"); } private boolean hasOverridenNativeProperty(String propertyName) { if (isNativeObjectType()) { return false; } JSType propertyType = getPropertyType(propertyName); ObjectType nativeType = this.isFunctionType() ? registry.getNativeObjectType(JSTypeNative.FUNCTION_PROTOTYPE) :"
      },
      {
        "txt": "registry.getNativeObjectType(JSTypeNative.OBJECT_PROTOTYPE); JSType nativePropertyType = nativeType.getPropertyType(propertyName); return propertyType != nativePropertyType; } @Override public JSType unboxesTo() { if (isStringObjectType()) { return getNativeType(JSTypeNative.STRING_TYPE); } else if (isBooleanObjectType()) { return getNativeType(JSTypeNative.BOOLEAN_TYPE);"
      },
      {
        "txt": "} else if (isNumberObjectType()) { return getNativeType(JSTypeNative.NUMBER_TYPE); } else { return super.unboxesTo(); } } @Override public boolean matchesObjectContext() { return true; }"
      },
      {
        "txt": "@Override public boolean canBeCalled() { return isRegexpType(); } @Override String toStringHelper(boolean forAnnotations) { if (hasReferenceName()) { return getReferenceName(); } else if (prettyPrint) { prettyPrint = false;"
      },
      {
        "txt": "Set<String> propertyNames = Sets.newTreeSet(); for (ObjectType current = this; current != null && !current.isNativeObjectType() && propertyNames.size() <= MAX_PRETTY_PRINTED_PROPERTIES; current = current.getImplicitPrototype()) { propertyNames.addAll(current.getOwnPropertyNames()); } StringBuilder sb = new StringBuilder(); sb.append(\"{\"); int i = 0;"
      },
      {
        "txt": "for (String property : propertyNames) { if (i > 0) { sb.append(\", \"); } sb.append(property); sb.append(\": \"); sb.append(getPropertyType(property).toString()); ++i; if (i == MAX_PRETTY_PRINTED_PROPERTIES) { sb.append(\", ...\");"
      },
      {
        "txt": "} } sb.append(\"}\"); prettyPrint = true; return sb.toString(); } else { <extra_id_0> } } void setPrettyPrint(boolean prettyPrint) { this.prettyPrint = prettyPrint; } boolean isPrettyPrint() {"
      },
      {
        "txt": "} boolean isPrettyPrint() { return prettyPrint; } @Override public FunctionType getConstructor() { return null; } @Override public ObjectType getImplicitPrototype() {"
      },
      {
        "txt": "return implicitPrototypeFallback; } final void setImplicitPrototype(ObjectType implicitPrototype) { checkState(!hasCachedValues()); this.implicitPrototypeFallback = implicitPrototype; } @Override public String getReferenceName() { if (className != null) { return className;"
      },
      {
        "txt": "} else if (ownerFunction != null) { return ownerFunction.getReferenceName() + \".prototype\"; } else { return null; } } @Override public boolean hasReferenceName() { return className != null || ownerFunction != null; }"
      },
      {
        "txt": "@Override public boolean isSubtype(JSType that) { if (JSType.isSubtypeHelper(this, that)) { return true; } if (that.isUnionType()) { return false; } if (that.isRecordType()) { return RecordType.isSubtype(this, that.toMaybeRecordType());"
      },
      {
        "txt": "} ObjectType thatObj = that.toObjectType(); ObjectType thatCtor = thatObj == null ? null : thatObj.getConstructor(); if (thatCtor != null && thatCtor.isInterface()) { Iterable<ObjectType> thisInterfaces = getCtorImplementedInterfaces(); for (ObjectType thisInterface : thisInterfaces) { if (thisInterface.isSubtype(that)) { return true; } }"
      },
      {
        "txt": "} if (getConstructor() != null && getConstructor().isInterface()) { for (ObjectType thisInterface : getCtorExtendedInterfaces()) { if (thisInterface.isSubtype(that)) { return true; } } } if (isUnknownType() || implicitPrototypeChainIsUnknown()) { return true;"
      },
      {
        "txt": "} return this.isImplicitPrototype(thatObj); } private boolean implicitPrototypeChainIsUnknown() { ObjectType p = getImplicitPrototype(); while (p != null) { if (p.isUnknownType()) { return true; } p = p.getImplicitPrototype();"
      },
      {
        "txt": "} return false; } @Override public boolean hasCachedValues() { return super.hasCachedValues(); } @Override public boolean isNativeObjectType() { return nativeType;"
      },
      {
        "txt": "} void setOwnerFunction(FunctionType type) { Preconditions.checkState(ownerFunction == null || type == null); ownerFunction = type; } @Override public FunctionType getOwnerFunction() { return ownerFunction; } @Override"
      },
      {
        "txt": "public Iterable<ObjectType> getCtorImplementedInterfaces() { return isFunctionPrototypeType() ? getOwnerFunction().getImplementedInterfaces() : ImmutableList.<ObjectType>of(); } @Override public Iterable<ObjectType> getCtorExtendedInterfaces() { return isFunctionPrototypeType() ? getOwnerFunction().getExtendedInterfaces() : ImmutableList.<ObjectType>of();"
      },
      {
        "txt": "} @Override JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) { setResolvedTypeInternal(this); ObjectType implicitPrototype = getImplicitPrototype(); if (implicitPrototype != null) { implicitPrototypeFallback = (ObjectType) implicitPrototype.resolve(t, scope); } for (Property prop : properties.values()) {"
      },
      {
        "txt": "prop.setType(safeResolve(prop.getType(), t, scope)); } return this; }"
      }
    ]
  }
]
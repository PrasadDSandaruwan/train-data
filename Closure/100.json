[
  {
    "id": 426,
    "file_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
    "start-bug-line": 99,
    "end-bug-line": 99,
    "bug": "",
    "fix": "int pType = parent.getType(); if (!(pType == Token.BLOCK || pType == Token.SCRIPT || pType == Token.NAME || pType == Token.ASSIGN)) { return false; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.javascript.jscomp.CheckLevel; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token;"
      },
      {
        "txt": "final class CheckGlobalThis implements Callback { static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning( \"JSC_USED_GLOBAL_THIS\", \"dangerous use of the global 'this' object\"); private final AbstractCompiler compiler; private final CheckLevel level; private Node assignLhsChild = null; CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) { this.compiler = compiler; this.level = level;"
      },
      {
        "txt": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.FUNCTION) { JSDocInfo jsDoc = getFunctionJsDocInfo(n); if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) { return false; } <extra_id_0> if (parent != null && parent.getType() == Token.ASSIGN) { Node lhs = parent.getFirstChild(); Node rhs = lhs.getNext(); if (n == lhs) { if (assignLhsChild == null) { assignLhsChild = lhs;"
      },
      {
        "txt": "if (assignLhsChild == null) { assignLhsChild = lhs; } } else { if (lhs.getType() == Token.GETPROP) { if (lhs.getLastChild().getString().equals(\"prototype\")) { return false; } String leftName = lhs.getQualifiedName(); if (leftName != null && leftName.contains(\".prototype.\")) {"
      },
      {
        "txt": "return false; } } } } return true; } public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.THIS && shouldReportThis(n, parent)) { compiler.report(t.makeError(n, level, GLOBAL_THIS));"
      },
      {
        "txt": "} if (n == assignLhsChild) { assignLhsChild = null; } } private boolean shouldReportThis(Node n, Node parent) { if (assignLhsChild != null) { return true; } return false;"
      },
      {
        "txt": "} private JSDocInfo getFunctionJsDocInfo(Node n) { JSDocInfo jsDoc = n.getJSDocInfo(); Node parent = n.getParent(); if (jsDoc == null) { int parentType = parent.getType(); if (parentType == Token.NAME || parentType == Token.ASSIGN) { jsDoc = parent.getJSDocInfo(); if (jsDoc == null && parentType == Token.NAME) { Node gramps = parent.getParent();"
      },
      {
        "txt": "if (gramps.getType() == Token.VAR) { jsDoc = gramps.getJSDocInfo(); } } } } return jsDoc; }"
      }
    ]
  },
  {
    "id": 427,
    "file_path": "src/com/google/javascript/jscomp/CheckGlobalThis.java",
    "start-bug-line": 146,
    "end-bug-line": 146,
    "bug": "return false;",
    "fix": "return parent != null && NodeUtil.isGet(parent);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.javascript.jscomp.CheckLevel; import com.google.javascript.jscomp.NodeTraversal.Callback; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; final class CheckGlobalThis implements Callback { static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning( \"JSC_USED_GLOBAL_THIS\", \"dangerous use of the global 'this' object\");"
      },
      {
        "txt": "private final AbstractCompiler compiler; private final CheckLevel level; private Node assignLhsChild = null; CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) { this.compiler = compiler; this.level = level; } public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.FUNCTION) { JSDocInfo jsDoc = getFunctionJsDocInfo(n);"
      },
      {
        "txt": "if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) { return false; } } if (parent != null && parent.getType() == Token.ASSIGN) { Node lhs = parent.getFirstChild(); Node rhs = lhs.getNext(); if (n == lhs) { if (assignLhsChild == null) { assignLhsChild = lhs;"
      },
      {
        "txt": "} } else { if (lhs.getType() == Token.GETPROP) { if (lhs.getLastChild().getString().equals(\"prototype\")) { return false; } String leftName = lhs.getQualifiedName(); if (leftName != null && leftName.contains(\".prototype.\")) { return false; }"
      },
      {
        "txt": "} } } return true; } public void visit(NodeTraversal t, Node n, Node parent) { if (n.getType() == Token.THIS && shouldReportThis(n, parent)) { compiler.report(t.makeError(n, level, GLOBAL_THIS)); } if (n == assignLhsChild) {"
      },
      {
        "txt": "} } private boolean shouldReportThis(Node n, Node parent) { if (assignLhsChild != null) { return true; } <extra_id_0> } private JSDocInfo getFunctionJsDocInfo(Node n) { JSDocInfo jsDoc = n.getJSDocInfo(); Node parent = n.getParent(); if (jsDoc == null) { int parentType = parent.getType();"
      },
      {
        "txt": "if (jsDoc == null) { int parentType = parent.getType(); if (parentType == Token.NAME || parentType == Token.ASSIGN) { jsDoc = parent.getJSDocInfo(); if (jsDoc == null && parentType == Token.NAME) { Node gramps = parent.getParent(); if (gramps.getType() == Token.VAR) { jsDoc = gramps.getJSDocInfo(); } }"
      },
      {
        "txt": "} } return jsDoc; }"
      }
    ]
  }
]
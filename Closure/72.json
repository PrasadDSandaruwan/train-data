[
  {
    "id": 359,
    "file_path": "src/com/google/javascript/jscomp/FunctionToBlockMutator.java",
    "start-bug-line": 152,
    "end-bug-line": 152,
    "bug": "",
    "fix": "new RenameLabels(compiler, new LabelNameSupplier(idSupplier), false) .process(null, fnNode);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.MakeDeclaredNamesUnique.InlineRenamer; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token;"
      },
      {
        "txt": "import java.util.LinkedHashMap; import java.util.List; import java.util.Map; import java.util.Set; import java.util.Map.Entry; class FunctionToBlockMutator { private AbstractCompiler compiler; private Supplier<String> safeNameIdSupplier; FunctionToBlockMutator( AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) {"
      },
      {
        "txt": "this.compiler = compiler; this.safeNameIdSupplier = safeNameIdSupplier; } Node mutate(String fnName, Node fnNode, Node callNode, String resultName, boolean needsDefaultResult, boolean isCallInLoop) { Node newFnNode = fnNode.cloneTree(); makeLocalNamesUnique(newFnNode, isCallInLoop); Set<String> namesToAlias = FunctionArgumentInjector.findModifiedParameters(newFnNode); LinkedHashMap<String, Node> args ="
      },
      {
        "txt": "FunctionArgumentInjector.getFunctionCallParameterMap( newFnNode, callNode, this.safeNameIdSupplier); boolean hasArgs = !args.isEmpty(); if (hasArgs) { FunctionArgumentInjector.maybeAddTempsForCallArguments( newFnNode, args, namesToAlias, compiler.getCodingConvention()); } Node newBlock = NodeUtil.getFunctionBody(newFnNode); newBlock.detachFromParent(); if (hasArgs) {"
      },
      {
        "txt": "Node inlineResult = aliasAndInlineArguments(newBlock, args, namesToAlias); Preconditions.checkState(newBlock == inlineResult); } if (isCallInLoop) { fixUnitializedVarDeclarations(newBlock); } String labelName = getLabelNameForFunction(fnName); Node injectableBlock = replaceReturns( newBlock, resultName, labelName, needsDefaultResult);"
      },
      {
        "txt": "Preconditions.checkState(injectableBlock != null); return injectableBlock; } private void fixUnitializedVarDeclarations(Node n) { if (NodeUtil.isLoopStructure(n)) { return; } if (NodeUtil.isVar(n)) { Node name = n.getFirstChild(); if (!name.hasChildren()) {"
      },
      {
        "txt": "Node srcLocation = name; name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation)); } return; } for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { fixUnitializedVarDeclarations(c); } } private void makeLocalNamesUnique(Node fnNode, boolean isCallInLoop) {"
      },
      {
        "txt": "NodeTraversal.traverse( compiler, fnNode, new MakeDeclaredNamesUnique( new InlineRenamer( idSupplier, \"inline_\", isCallInLoop))); <extra_id_0> static class LabelNameSupplier implements Supplier<String> { final Supplier<String> idSupplier; LabelNameSupplier(Supplier<String> idSupplier) { this.idSupplier = idSupplier; } @Override"
      },
      {
        "txt": "} @Override public String get() { return \"JSCompiler_inline_label_\" + idSupplier.get(); } } private String getLabelNameForFunction(String fnName){ String name = (fnName == null || fnName.isEmpty()) ? \"anon\" : fnName; return \"JSCompiler_inline_label_\" + name + \"_\" + safeNameIdSupplier.get(); }"
      },
      {
        "txt": "private Node aliasAndInlineArguments( Node fnTemplateRoot, LinkedHashMap<String, Node> argMap, Set<String> namesToAlias) { if (namesToAlias == null || namesToAlias.isEmpty()) { Node result = FunctionArgumentInjector.inject( fnTemplateRoot, null, argMap); Preconditions.checkState(result == fnTemplateRoot); return result; } else { Map<String, Node> newArgMap = Maps.newHashMap(argMap);"
      },
      {
        "txt": "List<Node> newVars = Lists.newLinkedList(); for (Entry<String, Node> entry : argMap.entrySet()) { String name = entry.getKey(); if (namesToAlias.contains(name)) { Node newValue = entry.getValue().cloneTree(); Node newNode = NodeUtil.newVarNode(name, newValue) .copyInformationFromForTree(newValue); newVars.add(0, newNode); newArgMap.remove(name); }"
      },
      {
        "txt": "} Node result = FunctionArgumentInjector.inject( fnTemplateRoot, null, newArgMap); Preconditions.checkState(result == fnTemplateRoot); for (Node n : newVars) { fnTemplateRoot.addChildToFront(n); } return result; } }"
      },
      {
        "txt": "private static Node replaceReturns( Node block, String resultName, String labelName, boolean resultMustBeSet) { Preconditions.checkNotNull(block); Preconditions.checkNotNull(labelName); Node root = block; boolean hasReturnAtExit = false; int returnCount = NodeUtil.getNodeTypeReferenceCount( block, Token.RETURN, new NodeUtil.MatchShallowStatement()); if (returnCount > 0) {"
      },
      {
        "txt": "hasReturnAtExit = hasReturnAtExit(block); if (hasReturnAtExit) { convertLastReturnToStatement(block, resultName); returnCount--; } if (returnCount > 0) { replaceReturnWithBreak(block, null, resultName, labelName); Node label = new Node(Token.LABEL).copyInformationFrom(block); Node name = Node.newString(Token.LABEL_NAME, labelName) .copyInformationFrom(block);"
      },
      {
        "txt": "label.addChildToFront(name); label.addChildToBack(block); Node newRoot = new Node(Token.BLOCK).copyInformationFrom(block); newRoot.addChildrenToBack(label); root = newRoot; } } if (resultMustBeSet && !hasReturnAtExit && resultName != null) { addDummyAssignment(block, resultName); }"
      },
      {
        "txt": "return root; } private static void addDummyAssignment(Node node, String resultName) { Preconditions.checkArgument(node.getType() == Token.BLOCK); Node srcLocation = node; Node retVal = NodeUtil.newUndefinedNode(srcLocation); Node resultNode = createAssignStatementNode(resultName, retVal); resultNode.copyInformationFromForTree(node); node.addChildrenToBack(resultNode); }"
      },
      {
        "txt": "private static void convertLastReturnToStatement( Node block, String resultName) { Node ret = block.getLastChild(); Preconditions.checkArgument(ret.getType() == Token.RETURN); Node resultNode = getReplacementReturnStatement(ret, resultName); if (resultNode == null) { block.removeChild(ret); } else { resultNode.copyInformationFromForTree(ret); block.replaceChild(ret, resultNode);"
      },
      {
        "txt": "} } private static Node createAssignStatementNode(String name, Node expression) { Node nameNode = Node.newString(Token.NAME, name); Node assign = new Node(Token.ASSIGN, nameNode, expression); return NodeUtil.newExpr(assign); } private static Node getReplacementReturnStatement( Node node, String resultName) { Node resultNode = null;"
      },
      {
        "txt": "Node retVal = null; if (node.hasChildren()) { retVal = node.getFirstChild().cloneTree(); } if (resultName == null) { if (retVal != null) { resultNode = NodeUtil.newExpr(retVal); // maybe null. } } else { if (retVal == null) {"
      },
      {
        "txt": "Node srcLocation = node; retVal = NodeUtil.newUndefinedNode(srcLocation); } resultNode = createAssignStatementNode(resultName, retVal); } return resultNode; } private static boolean hasReturnAtExit(Node block) { return (block.getLastChild().getType() == Token.RETURN); }"
      },
      {
        "txt": "private static Node replaceReturnWithBreak(Node current, Node parent, String resultName, String labelName) { if (current.getType() == Token.FUNCTION || current.getType() == Token.EXPR_RESULT) { return current; } if (current.getType() == Token.RETURN) { Preconditions.checkState(NodeUtil.isStatementBlock(parent)); Node resultNode = getReplacementReturnStatement(current, resultName); Node name = Node.newString(Token.LABEL_NAME, labelName);"
      },
      {
        "txt": "Node breakNode = new Node(Token.BREAK, name); breakNode.copyInformationFromForTree(current); parent.replaceChild(current, breakNode); if (resultNode != null) { resultNode.copyInformationFromForTree(current); parent.addChildBefore(resultNode, breakNode); } current = breakNode; } else { for (Node c = current.getFirstChild(); c != null; c = c.getNext()) {"
      },
      {
        "txt": "c = replaceReturnWithBreak(c, current, resultName, labelName); } } return current; }"
      }
    ]
  },
  {
    "id": 360,
    "file_path": "src/com/google/javascript/jscomp/RenameLabels.java",
    "start-bug-line": 215,
    "end-bug-line": 215,
    "bug": "if (li.referenced) {",
    "fix": "if (li.referenced || !removeUnused) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import com.google.common.base.Preconditions; import com.google.common.base.Supplier; import com.google.common.collect.Lists; import com.google.javascript.jscomp.NodeTraversal.ScopedCallback; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import java.util.ArrayList; import java.util.Deque; import java.util.HashMap; import java.util.HashSet;"
      },
      {
        "txt": "import java.util.Map; final class RenameLabels implements CompilerPass { private final AbstractCompiler compiler; private final Supplier<String> nameSupplier; private final boolean removeUnused; RenameLabels(AbstractCompiler compiler) { this(compiler, new DefaultNameSupplier(), true); } RenameLabels( AbstractCompiler compiler,"
      },
      {
        "txt": "Supplier<String> supplier, boolean removeUnused) { this.compiler = compiler; this.nameSupplier = supplier; this.removeUnused = removeUnused; } static class DefaultNameSupplier implements Supplier<String> { final NameGenerator nameGenerator = new NameGenerator(new HashSet<String>(), \"\", null); @Override"
      },
      {
        "txt": "public String get() { return nameGenerator.generateNextName(); } } class ProcessLabels implements ScopedCallback { ProcessLabels() { namespaceStack.push(new LabelNamespace()); } final Deque<LabelNamespace> namespaceStack = Lists.newLinkedList(); final ArrayList<String> names = new ArrayList<String>();"
      },
      {
        "txt": "@Override public void enterScope(NodeTraversal nodeTraversal) { namespaceStack.push(new LabelNamespace()); } @Override public void exitScope(NodeTraversal nodeTraversal) { namespaceStack.pop(); } public boolean shouldTraverse(NodeTraversal nodeTraversal, Node node, Node parent) {"
      },
      {
        "txt": "if (node.getType() == Token.LABEL) { LabelNamespace current = namespaceStack.peek(); int currentDepth = current.renameMap.size() + 1; String name = node.getFirstChild().getString(); LabelInfo li = new LabelInfo(currentDepth); Preconditions.checkState(!current.renameMap.containsKey(name)); current.renameMap.put(name, li); if (names.size() < currentDepth) { names.add(nameSupplier.get()); }"
      },
      {
        "txt": "String newName = getNameForId(currentDepth); compiler.addToDebugLog(\"label renamed: \" + name + \" => \" + newName); } return true; } public void visit(NodeTraversal nodeTraversal, Node node, Node parent) { switch (node.getType()) { case Token.LABEL: visitLabel(node, parent); break;"
      },
      {
        "txt": "case Token.BREAK: case Token.CONTINUE: visitBreakOrContinue(node); break; } } private void visitBreakOrContinue(Node node) { Node nameNode = node.getFirstChild(); if (nameNode != null) { String name = nameNode.getString();"
      },
      {
        "txt": "Preconditions.checkState(name.length() != 0); LabelInfo li = getLabelInfo(name); if (li != null) { String newName = getNameForId(li.id); li.referenced = true; if (!name.equals(newName)) { nameNode.setString(newName); compiler.reportCodeChange(); } }"
      },
      {
        "txt": "} private void visitLabel(Node node, Node parent) { Node nameNode = node.getFirstChild(); Preconditions.checkState(nameNode != null); String name = nameNode.getString(); LabelInfo li = getLabelInfo(name); <extra_id_0> String newName = getNameForId(li.id); if (!name.equals(newName)) { nameNode.setString(newName); compiler.reportCodeChange(); } } else {"
      },
      {
        "txt": "} } else { Node newChild = node.getLastChild(); node.removeChild(newChild); parent.replaceChild(node, newChild); if (newChild.getType() == Token.BLOCK) { NodeUtil.tryMergeBlock(newChild); } compiler.reportCodeChange(); }"
      },
      {
        "txt": "namespaceStack.peek().renameMap.remove(name); } String getNameForId(int id) { return names.get(id - 1); } LabelInfo getLabelInfo(String name) { return namespaceStack.peek().renameMap.get(name); } } @Override"
      },
      {
        "txt": "public void process(Node externs, Node root) { NodeTraversal.traverse(compiler, root, new ProcessLabels()); } private static class LabelInfo { boolean referenced = false; final int id; LabelInfo(int id) { this.id = id; } }"
      },
      {
        "txt": "private static class LabelNamespace { final Map<String, LabelInfo> renameMap = new HashMap<String, LabelInfo>(); }"
      }
    ]
  }
]
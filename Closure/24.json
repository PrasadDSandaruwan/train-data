[
  {
    "id": 244,
    "file_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "start-bug-line": 278,
    "end-bug-line": 279,
    "bug": "if (parent.isVar()) { if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {",
    "fix": "if (parent.isVar() && n.hasChildren() && n.getFirstChild().isQualifiedName()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.CompilerOptions.AliasTransformation; import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.SourcePosition; import com.google.javascript.rhino.Token;"
      },
      {
        "txt": "import java.util.Collection; import java.util.List; import java.util.Map; import javax.annotation.Nullable; class ScopedAliases implements HotSwapCompilerPass { static final String SCOPING_METHOD_NAME = \"goog.scope\"; private final AbstractCompiler compiler; private final PreprocessorSymbolTable preprocessorSymbolTable; private final AliasTransformationHandler transformationHandler; static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_GOOG_SCOPE_USED_IMPROPERLY\", \"The call to goog.scope must be alone in a single statement.\"); static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS = DiagnosticType.error( \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\", \"The call to goog.scope must take only a single parameter. It must\" + \" be an anonymous function that itself takes no parameters.\"); static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error( \"JSC_GOOG_SCOPE_REFERENCES_THIS\", \"The body of a goog.scope function cannot reference 'this'.\");"
      },
      {
        "txt": "static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_RETURN\", \"The body of a goog.scope function cannot use 'return'.\"); static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_THROW\", \"The body of a goog.scope function cannot use 'throw'.\"); static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error( \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\", \"The alias {0} is assigned a value more than once.\"); static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\", \"The local variable {0} is in a goog.scope and is not an alias.\"); ScopedAliases(AbstractCompiler compiler, @Nullable PreprocessorSymbolTable preprocessorSymbolTable, AliasTransformationHandler transformationHandler) { this.compiler = compiler; this.preprocessorSymbolTable = preprocessorSymbolTable; this.transformationHandler = transformationHandler; } @Override"
      },
      {
        "txt": "public void process(Node externs, Node root) { hotSwapScript(root, null); } @Override public void hotSwapScript(Node root, Node originalRoot) { Traversal traversal = new Traversal(); NodeTraversal.traverse(compiler, root, traversal); if (!traversal.hasErrors()) { for (AliasUsage aliasUsage : traversal.getAliasUsages()) { aliasUsage.applyAlias();"
      },
      {
        "txt": "} for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) { if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) { aliasDefinition.getParent().detachFromParent(); } else { aliasDefinition.detachFromParent(); } } for (Node scopeCall : traversal.getScopeCalls()) {"
      },
      {
        "txt": "Node expressionWithScopeCall = scopeCall.getParent(); Node scopeClosureBlock = scopeCall.getLastChild().getLastChild(); scopeClosureBlock.detachFromParent(); expressionWithScopeCall.getParent().replaceChild( expressionWithScopeCall, scopeClosureBlock); NodeUtil.tryMergeBlock(scopeClosureBlock); } if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 ||"
      },
      {
        "txt": "traversal.getScopeCalls().size() > 0) { compiler.reportCodeChange(); } } } private interface AliasUsage { public void applyAlias(); } private class AliasedNode implements AliasUsage { private final Node aliasReference;"
      },
      {
        "txt": "private final Node aliasDefinition; AliasedNode(Node aliasReference, Node aliasDefinition) { this.aliasReference = aliasReference; this.aliasDefinition = aliasDefinition; } @Override public void applyAlias() { aliasReference.getParent().replaceChild( aliasReference, aliasDefinition.cloneTree()); }"
      },
      {
        "txt": "} private class AliasedTypeNode implements AliasUsage { private final Node aliasReference; private final String correctedType; AliasedTypeNode(Node aliasReference, String correctedType) { this.aliasReference = aliasReference; this.correctedType = correctedType; } @Override public void applyAlias() {"
      },
      {
        "txt": "aliasReference.setString(correctedType); } } private class Traversal implements NodeTraversal.ScopedCallback { private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList(); private final List<Node> scopeCalls = Lists.newArrayList(); private final List<AliasUsage> aliasUsages = Lists.newArrayList(); private final Map<String, Var> aliases = Maps.newHashMap(); private boolean hasErrors = false; private AliasTransformation transformation = null;"
      },
      {
        "txt": "Collection<Node> getAliasDefinitionsInOrder() { return aliasDefinitionsInOrder; } private List<AliasUsage> getAliasUsages() { return aliasUsages; } List<Node> getScopeCalls() { return scopeCalls; } boolean hasErrors() {"
      },
      {
        "txt": "return hasErrors; } private boolean isCallToScopeMethod(Node n) { return n.isCall() && SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName()); } @Override public void enterScope(NodeTraversal t) { Node n = t.getCurrentNode().getParent(); if (n != null && isCallToScopeMethod(n)) {"
      },
      {
        "txt": "transformation = transformationHandler.logAliasTransformation( n.getSourceFileName(), getSourceRegion(n)); findAliases(t); } } @Override public void exitScope(NodeTraversal t) { if (t.getScopeDepth() == 2) { aliases.clear(); transformation = null;"
      },
      {
        "txt": "} } @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.isFunction() && t.inGlobalScope()) { if (parent == null || !isCallToScopeMethod(parent)) { return false; } } return true;"
      },
      {
        "txt": "} private SourcePosition<AliasTransformation> getSourceRegion(Node n) { Node testNode = n; Node next = null; for (; next != null || testNode.isScript();) { next = testNode.getNext(); testNode = testNode.getParent(); } int endLine = next == null ? Integer.MAX_VALUE : next.getLineno(); int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();"
      },
      {
        "txt": "SourcePosition<AliasTransformation> pos = new SourcePosition<AliasTransformation>() {}; pos.setPositionInformation( n.getLineno(), n.getCharno(), endLine, endChar); return pos; } private void report(NodeTraversal t, Node n, DiagnosticType error, String... arguments) { compiler.report(t.makeError(n, error, arguments)); hasErrors = true;"
      },
      {
        "txt": "private void findAliases(NodeTraversal t) { Scope scope = t.getScope(); for (Var v : scope.getVarIterable()) { Node n = v.getNode(); int type = n.getType(); Node parent = n.getParent(); <extra_id_0> String name = n.getString(); Var aliasVar = scope.getVar(name); aliases.put(name, aliasVar); String qualifiedName = aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName);"
      },
      {
        "txt": "aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName); } else { report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString()); } } } } private void validateScopeCall(NodeTraversal t, Node n, Node parent) { if (preprocessorSymbolTable != null) {"
      },
      {
        "txt": "preprocessorSymbolTable.addReference(n.getFirstChild()); } if (!parent.isExprResult()) { report(t, n, GOOG_SCOPE_USED_IMPROPERLY); } if (n.getChildCount() != 2) { report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { Node anonymousFnNode = n.getChildAtIndex(1); if (!anonymousFnNode.isFunction() ||"
      },
      {
        "txt": "NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) { report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { scopeCalls.add(n); } } } @Override public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "if (isCallToScopeMethod(n)) { validateScopeCall(t, n, n.getParent()); } if (t.getScopeDepth() < 2) { return; } int type = n.getType(); Var aliasVar = null; if (type == Token.NAME) { String name = n.getString();"
      },
      {
        "txt": "Var lexicalVar = t.getScope().getVar(n.getString()); if (lexicalVar != null && lexicalVar == aliases.get(name)) { aliasVar = lexicalVar; } } if (t.getScopeDepth() == 2) { if (aliasVar != null && NodeUtil.isLValue(n)) { if (aliasVar.getNode() == n) { aliasDefinitionsInOrder.add(n); return;"
      },
      {
        "txt": "} else { report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString()); } } if (type == Token.RETURN) { report(t, n, GOOG_SCOPE_USES_RETURN); } else if (type == Token.THIS) { report(t, n, GOOG_SCOPE_REFERENCES_THIS); } else if (type == Token.THROW) { report(t, n, GOOG_SCOPE_USES_THROW);"
      },
      {
        "txt": "} } if (t.getScopeDepth() >= 2) { if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedNode(n, aliasedNode)); } JSDocInfo info = n.getJSDocInfo(); if (info != null) { for (Node node : info.getTypeNodes()) {"
      },
      {
        "txt": "fixTypeNode(node); } } } } private void fixTypeNode(Node typeNode) { if (typeNode.isString()) { String name = typeNode.getString(); int endIndex = name.indexOf('.'); if (endIndex == -1) {"
      },
      {
        "txt": "endIndex = name.length(); } String baseName = name.substring(0, endIndex); Var aliasVar = aliases.get(baseName); if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex))); } }"
      },
      {
        "txt": "for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) { fixTypeNode(child); } } }"
      }
    ]
  },
  {
    "id": 245,
    "file_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "start-bug-line": 287,
    "end-bug-line": 287,
    "bug": "",
    "fix": "} else if (v.isBleedingFunction()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.CompilerOptions.AliasTransformation; import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.SourcePosition; import com.google.javascript.rhino.Token; import java.util.Collection; import java.util.List; import java.util.Map; import javax.annotation.Nullable; class ScopedAliases implements HotSwapCompilerPass { static final String SCOPING_METHOD_NAME = \"goog.scope\"; private final AbstractCompiler compiler; private final PreprocessorSymbolTable preprocessorSymbolTable;"
      },
      {
        "txt": "private final AliasTransformationHandler transformationHandler; static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error( \"JSC_GOOG_SCOPE_USED_IMPROPERLY\", \"The call to goog.scope must be alone in a single statement.\"); static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS = DiagnosticType.error( \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\", \"The call to goog.scope must take only a single parameter. It must\" + \" be an anonymous function that itself takes no parameters.\"); static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_GOOG_SCOPE_REFERENCES_THIS\", \"The body of a goog.scope function cannot reference 'this'.\"); static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_RETURN\", \"The body of a goog.scope function cannot use 'return'.\"); static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_THROW\", \"The body of a goog.scope function cannot use 'throw'.\"); static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error( \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\","
      },
      {
        "txt": "\"The alias {0} is assigned a value more than once.\"); static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error( \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\", \"The local variable {0} is in a goog.scope and is not an alias.\"); ScopedAliases(AbstractCompiler compiler, @Nullable PreprocessorSymbolTable preprocessorSymbolTable, AliasTransformationHandler transformationHandler) { this.compiler = compiler; this.preprocessorSymbolTable = preprocessorSymbolTable; this.transformationHandler = transformationHandler;"
      },
      {
        "txt": "} @Override public void process(Node externs, Node root) { hotSwapScript(root, null); } @Override public void hotSwapScript(Node root, Node originalRoot) { Traversal traversal = new Traversal(); NodeTraversal.traverse(compiler, root, traversal); if (!traversal.hasErrors()) {"
      },
      {
        "txt": "for (AliasUsage aliasUsage : traversal.getAliasUsages()) { aliasUsage.applyAlias(); } for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) { if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) { aliasDefinition.getParent().detachFromParent(); } else { aliasDefinition.detachFromParent(); }"
      },
      {
        "txt": "} for (Node scopeCall : traversal.getScopeCalls()) { Node expressionWithScopeCall = scopeCall.getParent(); Node scopeClosureBlock = scopeCall.getLastChild().getLastChild(); scopeClosureBlock.detachFromParent(); expressionWithScopeCall.getParent().replaceChild( expressionWithScopeCall, scopeClosureBlock); NodeUtil.tryMergeBlock(scopeClosureBlock); }"
      },
      {
        "txt": "if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 || traversal.getScopeCalls().size() > 0) { compiler.reportCodeChange(); } } } private interface AliasUsage { public void applyAlias(); }"
      },
      {
        "txt": "private class AliasedNode implements AliasUsage { private final Node aliasReference; private final Node aliasDefinition; AliasedNode(Node aliasReference, Node aliasDefinition) { this.aliasReference = aliasReference; this.aliasDefinition = aliasDefinition; } @Override public void applyAlias() { aliasReference.getParent().replaceChild("
      },
      {
        "txt": "aliasReference, aliasDefinition.cloneTree()); } } private class AliasedTypeNode implements AliasUsage { private final Node aliasReference; private final String correctedType; AliasedTypeNode(Node aliasReference, String correctedType) { this.aliasReference = aliasReference; this.correctedType = correctedType; }"
      },
      {
        "txt": "@Override public void applyAlias() { aliasReference.setString(correctedType); } } private class Traversal implements NodeTraversal.ScopedCallback { private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList(); private final List<Node> scopeCalls = Lists.newArrayList(); private final List<AliasUsage> aliasUsages = Lists.newArrayList(); private final Map<String, Var> aliases = Maps.newHashMap();"
      },
      {
        "txt": "private boolean hasErrors = false; private AliasTransformation transformation = null; Collection<Node> getAliasDefinitionsInOrder() { return aliasDefinitionsInOrder; } private List<AliasUsage> getAliasUsages() { return aliasUsages; } List<Node> getScopeCalls() { return scopeCalls;"
      },
      {
        "txt": "} boolean hasErrors() { return hasErrors; } private boolean isCallToScopeMethod(Node n) { return n.isCall() && SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName()); } @Override public void enterScope(NodeTraversal t) {"
      },
      {
        "txt": "Node n = t.getCurrentNode().getParent(); if (n != null && isCallToScopeMethod(n)) { transformation = transformationHandler.logAliasTransformation( n.getSourceFileName(), getSourceRegion(n)); findAliases(t); } } @Override public void exitScope(NodeTraversal t) { if (t.getScopeDepth() == 2) {"
      },
      {
        "txt": "aliases.clear(); transformation = null; } } @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.isFunction() && t.inGlobalScope()) { if (parent == null || !isCallToScopeMethod(parent)) { return false; }"
      },
      {
        "txt": "} return true; } private SourcePosition<AliasTransformation> getSourceRegion(Node n) { Node testNode = n; Node next = null; for (; next != null || testNode.isScript();) { next = testNode.getNext(); testNode = testNode.getParent(); }"
      },
      {
        "txt": "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno(); int endChar = next == null ? Integer.MAX_VALUE : next.getCharno(); SourcePosition<AliasTransformation> pos = new SourcePosition<AliasTransformation>() {}; pos.setPositionInformation( n.getLineno(), n.getCharno(), endLine, endChar); return pos; } private void report(NodeTraversal t, Node n, DiagnosticType error, String... arguments) {"
      },
      {
        "txt": "compiler.report(t.makeError(n, error, arguments)); hasErrors = true; } private void findAliases(NodeTraversal t) { Scope scope = t.getScope(); for (Var v : scope.getVarIterable()) { Node n = v.getNode(); int type = n.getType(); Node parent = n.getParent(); if (parent.isVar()) {"
      },
      {
        "txt": "String name = n.getString(); Var aliasVar = scope.getVar(name); aliases.put(name, aliasVar); String qualifiedName = aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName); <extra_id_0> } else { report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString()); } } } }"
      },
      {
        "txt": "} } private void validateScopeCall(NodeTraversal t, Node n, Node parent) { if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n.getFirstChild()); } if (!parent.isExprResult()) { report(t, n, GOOG_SCOPE_USED_IMPROPERLY); } if (n.getChildCount() != 2) {"
      },
      {
        "txt": "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { Node anonymousFnNode = n.getChildAtIndex(1); if (!anonymousFnNode.isFunction() || NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) { report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { scopeCalls.add(n); }"
      },
      {
        "txt": "} } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (isCallToScopeMethod(n)) { validateScopeCall(t, n, n.getParent()); } if (t.getScopeDepth() < 2) { return; }"
      },
      {
        "txt": "int type = n.getType(); Var aliasVar = null; if (type == Token.NAME) { String name = n.getString(); Var lexicalVar = t.getScope().getVar(n.getString()); if (lexicalVar != null && lexicalVar == aliases.get(name)) { aliasVar = lexicalVar; } } if (t.getScopeDepth() == 2) {"
      },
      {
        "txt": "if (aliasVar != null && NodeUtil.isLValue(n)) { if (aliasVar.getNode() == n) { aliasDefinitionsInOrder.add(n); return; } else { report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString()); } } if (type == Token.RETURN) { report(t, n, GOOG_SCOPE_USES_RETURN);"
      },
      {
        "txt": "} else if (type == Token.THIS) { report(t, n, GOOG_SCOPE_REFERENCES_THIS); } else if (type == Token.THROW) { report(t, n, GOOG_SCOPE_USES_THROW); } } if (t.getScopeDepth() >= 2) { if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedNode(n, aliasedNode));"
      },
      {
        "txt": "} JSDocInfo info = n.getJSDocInfo(); if (info != null) { for (Node node : info.getTypeNodes()) { fixTypeNode(node); } } } } private void fixTypeNode(Node typeNode) {"
      },
      {
        "txt": "if (typeNode.isString()) { String name = typeNode.getString(); int endIndex = name.indexOf('.'); if (endIndex == -1) { endIndex = name.length(); } String baseName = name.substring(0, endIndex); Var aliasVar = aliases.get(baseName); if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue();"
      },
      {
        "txt": "aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex))); } } for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) { fixTypeNode(child); } } }"
      }
    ]
  },
  {
    "id": 246,
    "file_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "start-bug-line": 289,
    "end-bug-line": 289,
    "bug": "",
    "fix": "} else if (parent.getType() == Token.LP) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.CompilerOptions.AliasTransformation; import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.SourcePosition; import com.google.javascript.rhino.Token; import java.util.Collection; import java.util.List; import java.util.Map; import javax.annotation.Nullable; class ScopedAliases implements HotSwapCompilerPass { static final String SCOPING_METHOD_NAME = \"goog.scope\"; private final AbstractCompiler compiler; private final PreprocessorSymbolTable preprocessorSymbolTable;"
      },
      {
        "txt": "private final AliasTransformationHandler transformationHandler; static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error( \"JSC_GOOG_SCOPE_USED_IMPROPERLY\", \"The call to goog.scope must be alone in a single statement.\"); static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS = DiagnosticType.error( \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\", \"The call to goog.scope must take only a single parameter. It must\" + \" be an anonymous function that itself takes no parameters.\"); static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_GOOG_SCOPE_REFERENCES_THIS\", \"The body of a goog.scope function cannot reference 'this'.\"); static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_RETURN\", \"The body of a goog.scope function cannot use 'return'.\"); static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_THROW\", \"The body of a goog.scope function cannot use 'throw'.\"); static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error( \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\","
      },
      {
        "txt": "\"The alias {0} is assigned a value more than once.\"); static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error( \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\", \"The local variable {0} is in a goog.scope and is not an alias.\"); ScopedAliases(AbstractCompiler compiler, @Nullable PreprocessorSymbolTable preprocessorSymbolTable, AliasTransformationHandler transformationHandler) { this.compiler = compiler; this.preprocessorSymbolTable = preprocessorSymbolTable; this.transformationHandler = transformationHandler;"
      },
      {
        "txt": "} @Override public void process(Node externs, Node root) { hotSwapScript(root, null); } @Override public void hotSwapScript(Node root, Node originalRoot) { Traversal traversal = new Traversal(); NodeTraversal.traverse(compiler, root, traversal); if (!traversal.hasErrors()) {"
      },
      {
        "txt": "for (AliasUsage aliasUsage : traversal.getAliasUsages()) { aliasUsage.applyAlias(); } for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) { if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) { aliasDefinition.getParent().detachFromParent(); } else { aliasDefinition.detachFromParent(); }"
      },
      {
        "txt": "} for (Node scopeCall : traversal.getScopeCalls()) { Node expressionWithScopeCall = scopeCall.getParent(); Node scopeClosureBlock = scopeCall.getLastChild().getLastChild(); scopeClosureBlock.detachFromParent(); expressionWithScopeCall.getParent().replaceChild( expressionWithScopeCall, scopeClosureBlock); NodeUtil.tryMergeBlock(scopeClosureBlock); }"
      },
      {
        "txt": "if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 || traversal.getScopeCalls().size() > 0) { compiler.reportCodeChange(); } } } private interface AliasUsage { public void applyAlias(); }"
      },
      {
        "txt": "private class AliasedNode implements AliasUsage { private final Node aliasReference; private final Node aliasDefinition; AliasedNode(Node aliasReference, Node aliasDefinition) { this.aliasReference = aliasReference; this.aliasDefinition = aliasDefinition; } @Override public void applyAlias() { aliasReference.getParent().replaceChild("
      },
      {
        "txt": "aliasReference, aliasDefinition.cloneTree()); } } private class AliasedTypeNode implements AliasUsage { private final Node aliasReference; private final String correctedType; AliasedTypeNode(Node aliasReference, String correctedType) { this.aliasReference = aliasReference; this.correctedType = correctedType; }"
      },
      {
        "txt": "@Override public void applyAlias() { aliasReference.setString(correctedType); } } private class Traversal implements NodeTraversal.ScopedCallback { private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList(); private final List<Node> scopeCalls = Lists.newArrayList(); private final List<AliasUsage> aliasUsages = Lists.newArrayList(); private final Map<String, Var> aliases = Maps.newHashMap();"
      },
      {
        "txt": "private boolean hasErrors = false; private AliasTransformation transformation = null; Collection<Node> getAliasDefinitionsInOrder() { return aliasDefinitionsInOrder; } private List<AliasUsage> getAliasUsages() { return aliasUsages; } List<Node> getScopeCalls() { return scopeCalls;"
      },
      {
        "txt": "} boolean hasErrors() { return hasErrors; } private boolean isCallToScopeMethod(Node n) { return n.isCall() && SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName()); } @Override public void enterScope(NodeTraversal t) {"
      },
      {
        "txt": "Node n = t.getCurrentNode().getParent(); if (n != null && isCallToScopeMethod(n)) { transformation = transformationHandler.logAliasTransformation( n.getSourceFileName(), getSourceRegion(n)); findAliases(t); } } @Override public void exitScope(NodeTraversal t) { if (t.getScopeDepth() == 2) {"
      },
      {
        "txt": "aliases.clear(); transformation = null; } } @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.isFunction() && t.inGlobalScope()) { if (parent == null || !isCallToScopeMethod(parent)) { return false; }"
      },
      {
        "txt": "} return true; } private SourcePosition<AliasTransformation> getSourceRegion(Node n) { Node testNode = n; Node next = null; for (; next != null || testNode.isScript();) { next = testNode.getNext(); testNode = testNode.getParent(); }"
      },
      {
        "txt": "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno(); int endChar = next == null ? Integer.MAX_VALUE : next.getCharno(); SourcePosition<AliasTransformation> pos = new SourcePosition<AliasTransformation>() {}; pos.setPositionInformation( n.getLineno(), n.getCharno(), endLine, endChar); return pos; } private void report(NodeTraversal t, Node n, DiagnosticType error, String... arguments) {"
      },
      {
        "txt": "compiler.report(t.makeError(n, error, arguments)); hasErrors = true; } private void findAliases(NodeTraversal t) { Scope scope = t.getScope(); for (Var v : scope.getVarIterable()) { Node n = v.getNode(); int type = n.getType(); Node parent = n.getParent(); if (parent.isVar()) {"
      },
      {
        "txt": "String name = n.getString(); Var aliasVar = scope.getVar(name); aliases.put(name, aliasVar); String qualifiedName = aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName); <extra_id_0> } else { report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString()); } } } }"
      },
      {
        "txt": "} } private void validateScopeCall(NodeTraversal t, Node n, Node parent) { if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n.getFirstChild()); } if (!parent.isExprResult()) { report(t, n, GOOG_SCOPE_USED_IMPROPERLY); } if (n.getChildCount() != 2) {"
      },
      {
        "txt": "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { Node anonymousFnNode = n.getChildAtIndex(1); if (!anonymousFnNode.isFunction() || NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) { report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { scopeCalls.add(n); }"
      },
      {
        "txt": "} } @Override public void visit(NodeTraversal t, Node n, Node parent) { if (isCallToScopeMethod(n)) { validateScopeCall(t, n, n.getParent()); } if (t.getScopeDepth() < 2) { return; }"
      },
      {
        "txt": "int type = n.getType(); Var aliasVar = null; if (type == Token.NAME) { String name = n.getString(); Var lexicalVar = t.getScope().getVar(n.getString()); if (lexicalVar != null && lexicalVar == aliases.get(name)) { aliasVar = lexicalVar; } } if (t.getScopeDepth() == 2) {"
      },
      {
        "txt": "if (aliasVar != null && NodeUtil.isLValue(n)) { if (aliasVar.getNode() == n) { aliasDefinitionsInOrder.add(n); return; } else { report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString()); } } if (type == Token.RETURN) { report(t, n, GOOG_SCOPE_USES_RETURN);"
      },
      {
        "txt": "} else if (type == Token.THIS) { report(t, n, GOOG_SCOPE_REFERENCES_THIS); } else if (type == Token.THROW) { report(t, n, GOOG_SCOPE_USES_THROW); } } if (t.getScopeDepth() >= 2) { if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedNode(n, aliasedNode));"
      },
      {
        "txt": "} JSDocInfo info = n.getJSDocInfo(); if (info != null) { for (Node node : info.getTypeNodes()) { fixTypeNode(node); } } } } private void fixTypeNode(Node typeNode) {"
      },
      {
        "txt": "if (typeNode.isString()) { String name = typeNode.getString(); int endIndex = name.indexOf('.'); if (endIndex == -1) { endIndex = name.length(); } String baseName = name.substring(0, endIndex); Var aliasVar = aliases.get(baseName); if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue();"
      },
      {
        "txt": "aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex))); } } for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) { fixTypeNode(child); } } }"
      }
    ]
  },
  {
    "id": 247,
    "file_path": "src/com/google/javascript/jscomp/ScopedAliases.java",
    "start-bug-line": 295,
    "end-bug-line": 295,
    "bug": "}",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import com.google.common.collect.Lists; import com.google.common.collect.Maps; import com.google.javascript.jscomp.CompilerOptions.AliasTransformation; import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler; import com.google.javascript.jscomp.Scope.Var; import com.google.javascript.rhino.JSDocInfo; import com.google.javascript.rhino.Node; import com.google.javascript.rhino.SourcePosition; import com.google.javascript.rhino.Token; import java.util.Collection;"
      },
      {
        "txt": "import java.util.List; import java.util.Map; import javax.annotation.Nullable; class ScopedAliases implements HotSwapCompilerPass { static final String SCOPING_METHOD_NAME = \"goog.scope\"; private final AbstractCompiler compiler; private final PreprocessorSymbolTable preprocessorSymbolTable; private final AliasTransformationHandler transformationHandler; static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error( \"JSC_GOOG_SCOPE_USED_IMPROPERLY\","
      },
      {
        "txt": "\"The call to goog.scope must be alone in a single statement.\"); static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS = DiagnosticType.error( \"JSC_GOOG_SCOPE_HAS_BAD_PARAMETERS\", \"The call to goog.scope must take only a single parameter. It must\" + \" be an anonymous function that itself takes no parameters.\"); static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error( \"JSC_GOOG_SCOPE_REFERENCES_THIS\", \"The body of a goog.scope function cannot reference 'this'.\"); static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error("
      },
      {
        "txt": "\"JSC_GOOG_SCOPE_USES_RETURN\", \"The body of a goog.scope function cannot use 'return'.\"); static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error( \"JSC_GOOG_SCOPE_USES_THROW\", \"The body of a goog.scope function cannot use 'throw'.\"); static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error( \"JSC_GOOG_SCOPE_ALIAS_REDEFINED\", \"The alias {0} is assigned a value more than once.\"); static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error( \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\","
      },
      {
        "txt": "\"The local variable {0} is in a goog.scope and is not an alias.\"); ScopedAliases(AbstractCompiler compiler, @Nullable PreprocessorSymbolTable preprocessorSymbolTable, AliasTransformationHandler transformationHandler) { this.compiler = compiler; this.preprocessorSymbolTable = preprocessorSymbolTable; this.transformationHandler = transformationHandler; } @Override public void process(Node externs, Node root) {"
      },
      {
        "txt": "hotSwapScript(root, null); } @Override public void hotSwapScript(Node root, Node originalRoot) { Traversal traversal = new Traversal(); NodeTraversal.traverse(compiler, root, traversal); if (!traversal.hasErrors()) { for (AliasUsage aliasUsage : traversal.getAliasUsages()) { aliasUsage.applyAlias(); }"
      },
      {
        "txt": "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) { if (aliasDefinition.getParent().isVar() && aliasDefinition.getParent().hasOneChild()) { aliasDefinition.getParent().detachFromParent(); } else { aliasDefinition.detachFromParent(); } } for (Node scopeCall : traversal.getScopeCalls()) { Node expressionWithScopeCall = scopeCall.getParent();"
      },
      {
        "txt": "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild(); scopeClosureBlock.detachFromParent(); expressionWithScopeCall.getParent().replaceChild( expressionWithScopeCall, scopeClosureBlock); NodeUtil.tryMergeBlock(scopeClosureBlock); } if (traversal.getAliasUsages().size() > 0 || traversal.getAliasDefinitionsInOrder().size() > 0 || traversal.getScopeCalls().size() > 0) {"
      },
      {
        "txt": "compiler.reportCodeChange(); } } } private interface AliasUsage { public void applyAlias(); } private class AliasedNode implements AliasUsage { private final Node aliasReference; private final Node aliasDefinition;"
      },
      {
        "txt": "AliasedNode(Node aliasReference, Node aliasDefinition) { this.aliasReference = aliasReference; this.aliasDefinition = aliasDefinition; } @Override public void applyAlias() { aliasReference.getParent().replaceChild( aliasReference, aliasDefinition.cloneTree()); } }"
      },
      {
        "txt": "private class AliasedTypeNode implements AliasUsage { private final Node aliasReference; private final String correctedType; AliasedTypeNode(Node aliasReference, String correctedType) { this.aliasReference = aliasReference; this.correctedType = correctedType; } @Override public void applyAlias() { aliasReference.setString(correctedType);"
      },
      {
        "txt": "} } private class Traversal implements NodeTraversal.ScopedCallback { private final List<Node> aliasDefinitionsInOrder = Lists.newArrayList(); private final List<Node> scopeCalls = Lists.newArrayList(); private final List<AliasUsage> aliasUsages = Lists.newArrayList(); private final Map<String, Var> aliases = Maps.newHashMap(); private boolean hasErrors = false; private AliasTransformation transformation = null; Collection<Node> getAliasDefinitionsInOrder() {"
      },
      {
        "txt": "return aliasDefinitionsInOrder; } private List<AliasUsage> getAliasUsages() { return aliasUsages; } List<Node> getScopeCalls() { return scopeCalls; } boolean hasErrors() { return hasErrors;"
      },
      {
        "txt": "} private boolean isCallToScopeMethod(Node n) { return n.isCall() && SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName()); } @Override public void enterScope(NodeTraversal t) { Node n = t.getCurrentNode().getParent(); if (n != null && isCallToScopeMethod(n)) { transformation = transformationHandler.logAliasTransformation("
      },
      {
        "txt": "n.getSourceFileName(), getSourceRegion(n)); findAliases(t); } } @Override public void exitScope(NodeTraversal t) { if (t.getScopeDepth() == 2) { aliases.clear(); transformation = null; }"
      },
      {
        "txt": "} @Override public final boolean shouldTraverse(NodeTraversal t, Node n, Node parent) { if (n.isFunction() && t.inGlobalScope()) { if (parent == null || !isCallToScopeMethod(parent)) { return false; } } return true; }"
      },
      {
        "txt": "private SourcePosition<AliasTransformation> getSourceRegion(Node n) { Node testNode = n; Node next = null; for (; next != null || testNode.isScript();) { next = testNode.getNext(); testNode = testNode.getParent(); } int endLine = next == null ? Integer.MAX_VALUE : next.getLineno(); int endChar = next == null ? Integer.MAX_VALUE : next.getCharno(); SourcePosition<AliasTransformation> pos ="
      },
      {
        "txt": "new SourcePosition<AliasTransformation>() {}; pos.setPositionInformation( n.getLineno(), n.getCharno(), endLine, endChar); return pos; } private void report(NodeTraversal t, Node n, DiagnosticType error, String... arguments) { compiler.report(t.makeError(n, error, arguments)); hasErrors = true; }"
      },
      {
        "txt": "private void findAliases(NodeTraversal t) { Scope scope = t.getScope(); for (Var v : scope.getVarIterable()) { Node n = v.getNode(); int type = n.getType(); Node parent = n.getParent(); if (parent.isVar()) { if (n.hasChildren() && n.getFirstChild().isQualifiedName()) { String name = n.getString(); Var aliasVar = scope.getVar(name);"
      },
      {
        "txt": "String qualifiedName = aliasVar.getInitialValue().getQualifiedName(); transformation.addAlias(name, qualifiedName); } else { report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString()); } <extra_id_0> } } private void validateScopeCall(NodeTraversal t, Node n, Node parent) { if (preprocessorSymbolTable != null) { preprocessorSymbolTable.addReference(n.getFirstChild()); }"
      },
      {
        "txt": "preprocessorSymbolTable.addReference(n.getFirstChild()); } if (!parent.isExprResult()) { report(t, n, GOOG_SCOPE_USED_IMPROPERLY); } if (n.getChildCount() != 2) { report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { Node anonymousFnNode = n.getChildAtIndex(1); if (!anonymousFnNode.isFunction() ||"
      },
      {
        "txt": "NodeUtil.getFunctionName(anonymousFnNode) != null || NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren()) { report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS); } else { scopeCalls.add(n); } } } @Override public void visit(NodeTraversal t, Node n, Node parent) {"
      },
      {
        "txt": "if (isCallToScopeMethod(n)) { validateScopeCall(t, n, n.getParent()); } if (t.getScopeDepth() < 2) { return; } int type = n.getType(); Var aliasVar = null; if (type == Token.NAME) { String name = n.getString();"
      },
      {
        "txt": "Var lexicalVar = t.getScope().getVar(n.getString()); if (lexicalVar != null && lexicalVar == aliases.get(name)) { aliasVar = lexicalVar; } } if (t.getScopeDepth() == 2) { if (aliasVar != null && NodeUtil.isLValue(n)) { if (aliasVar.getNode() == n) { aliasDefinitionsInOrder.add(n); return;"
      },
      {
        "txt": "} else { report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString()); } } if (type == Token.RETURN) { report(t, n, GOOG_SCOPE_USES_RETURN); } else if (type == Token.THIS) { report(t, n, GOOG_SCOPE_REFERENCES_THIS); } else if (type == Token.THROW) { report(t, n, GOOG_SCOPE_USES_THROW);"
      },
      {
        "txt": "} } if (t.getScopeDepth() >= 2) { if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedNode(n, aliasedNode)); } JSDocInfo info = n.getJSDocInfo(); if (info != null) { for (Node node : info.getTypeNodes()) {"
      },
      {
        "txt": "fixTypeNode(node); } } } } private void fixTypeNode(Node typeNode) { if (typeNode.isString()) { String name = typeNode.getString(); int endIndex = name.indexOf('.'); if (endIndex == -1) {"
      },
      {
        "txt": "endIndex = name.length(); } String baseName = name.substring(0, endIndex); Var aliasVar = aliases.get(baseName); if (aliasVar != null) { Node aliasedNode = aliasVar.getInitialValue(); aliasUsages.add(new AliasedTypeNode(typeNode, aliasedNode.getQualifiedName() + name.substring(endIndex))); } }"
      },
      {
        "txt": "for (Node child = typeNode.getFirstChild(); child != null; child = child.getNext()) { fixTypeNode(child); } } }"
      }
    ]
  }
]
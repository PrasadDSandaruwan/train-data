[
  {
    "id": 580,
    "file_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
    "start-bug-line": 709,
    "end-bug-line": 709,
    "bug": "",
    "fix": "if (n.getType() == Token.LABEL) { Node labeledStatement = n.getLastChild(); if (labeledStatement.getType() != Token.BLOCK) { return isOneExactlyFunctionOrDo(labeledStatement); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Charsets; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream; import java.io.IOException; import java.nio.charset.Charset; import java.nio.charset.CharsetEncoder; class CodeGenerator { private static final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };"
      },
      {
        "txt": "private final CodeConsumer cc; private final CharsetEncoder outputCharsetEncoder; CodeGenerator( CodeConsumer consumer, Charset outputCharset) { cc = consumer; if (outputCharset == null || outputCharset == Charsets.US_ASCII) { this.outputCharsetEncoder = null; } else { this.outputCharsetEncoder = outputCharset.newEncoder(); }"
      },
      {
        "txt": "} CodeGenerator(CodeConsumer consumer) { this(consumer, null); } void add(String str) { cc.add(str); } private void addIdentifier(String identifier) { cc.addIdentifier(identifierEscape(identifier)); }"
      },
      {
        "txt": "void add(Node n) { add(n, Context.OTHER); } void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount();"
      },
      {
        "txt": "Node first = n.getFirstChild(); Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); addLeftExpr(first, p, context); cc.addOp(opstr, true);"
      },
      {
        "txt": "Context rhsContext = getContextForNoInOperator(context); if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(last, p, rhsContext); } else { addExpr(last, p + 1, rhsContext); } return;"
      },
      {
        "txt": "} cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().getType() == Token.BLOCK && first.getNext().getChildCount() <= 1); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild();"
      },
      {
        "txt": "if (catchblock != null) { add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); if (first.getNext().getType() != Token.EMPTY) { throw new Error(\"Catch conditions not suppored because I think\" + \" that it may be a netscape only feature.\"); } add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break;"
      },
      {
        "txt": "case Token.THROW: Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first);"
      },
      {
        "txt": "} else { Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); }"
      },
      {
        "txt": "break; case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.getType() == Token.EMPTY) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1);"
      },
      {
        "txt": "addIdentifier(n.getString()); cc.addOp(\"=\", true); if (first.getType() == Token.COMMA) { addExpr(first, NodeUtil.precedence(Token.ASSIGN)); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT:"
      },
      {
        "txt": "add(\"[\"); addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP)); add(\"]\"); break; case Token.LP: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA:"
      },
      {
        "txt": "addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT:"
      },
      {
        "txt": "case Token.POS: case Token.NEG: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type);"
      },
      {
        "txt": "addLeftExpr(first, p + 1, context); cc.addOp(\"?\", true); addExpr(first.getNext(), 1); cc.addOp(\":\", true); addExpr(last, 1); break; } case Token.REGEXP: if (first.getType() != Token.STRING || last.getType() != Token.STRING) {"
      },
      {
        "txt": "throw new Error(\"Expected children to be strings\"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break;"
      },
      {
        "txt": "case Token.GET_REF: add(first); break; case Token.REF_SPECIAL: Preconditions.checkState(childCount == 1); add(first); add(\".\"); add((String) n.getProp(Node.NAME_PROP)); break; case Token.FUNCTION:"
      },
      {
        "txt": "if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first);"
      },
      {
        "txt": "add(first.getNext()); add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) {"
      },
      {
        "txt": "throw new Error(\"Unexpected Node subclass.\"); } boolean stripBlock = n.isSyntheticBlock() || ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2)); if (!stripBlock) { cc.beginBlock(); } for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.getType() == Token.VAR) {"
      },
      {
        "txt": "cc.endStatement(); } if (c.getType() == Token.FUNCTION) { cc.maybeLineBreak(); } if (type == Token.SCRIPT) { cc.notePreferredLineBreak(); } } if (!stripBlock) {"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.getType() == Token.VAR) { add(first, Context.IN_FOR_INIT_CLAUSE); } else {"
      },
      {
        "txt": "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else {"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } break;"
      },
      {
        "txt": "case Token.DO: Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyExpression(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); add(\"while(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break;"
      },
      {
        "txt": "case Token.GETPROP: { Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.getType() == Token.STRING, \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.getType() == Token.NUMBER); if (needsParens) { add(\"(\");"
      },
      {
        "txt": "} addLeftExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } add(\".\"); addIdentifier(last.getString()); break; } case Token.GETELEM:"
      },
      {
        "txt": "Preconditions.checkState( childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addLeftExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"with(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\";"
      },
      {
        "txt": "int postProp = n.getIntProp(Node.INCRDECR_PROP); if (postProp != 0) { addLeftExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; }"
      },
      {
        "txt": "case Token.CALL: if (first.getType() == Token.NAME && \"eval\".equals(first.getString()) && !first.getBooleanProp(Node.DIRECT_EVAL)) { add(\"(0,eval)\"); } else { addLeftExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext());"
      },
      {
        "txt": "add(\")\"); break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\");"
      },
      {
        "txt": "add(first); add(\")\"); if (hasElse) { addNonEmptyExpression( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyExpression(first.getNext(), Context.OTHER, false);"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); } if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: case Token.THIS: case Token.FALSE: case Token.TRUE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 0); add(Node.tokenToName(type)); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); }"
      },
      {
        "txt": "add(\" \"); add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break;"
      },
      {
        "txt": "case Token.BREAK: Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); }"
      },
      {
        "txt": "cc.endStatement(); break; case Token.EXPR_VOID: throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\"); case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW:"
      },
      {
        "txt": "add(\"new \"); int precedence = NodeUtil.precedence(type); if (NodeUtil.containsCall(first)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next);"
      },
      {
        "txt": "add(\")\"); } break; case Token.STRING: Preconditions.checkState(childCount == 0); add(jsString(n.getString(), outputCharsetEncoder)); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \");"
      },
      {
        "txt": "add(first); break; case Token.OBJECTLIT: { Preconditions.checkState(childCount % 2 == 0); boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext().getNext()) {"
      },
      {
        "txt": "if (c != first) { cc.listSeparator(); } if (c.getType() == Token.STRING && !TokenStream.isKeyword(c.getString()) && TokenStream.isJSIdentifier(c.getString()) && NodeUtil.isLatin(c.getString())) { add(c.getString()); } else { addExpr(c, 1);"
      },
      {
        "txt": "} add(\":\"); addExpr(c.getNext(), 1); } add(\"}\"); if (needsParens) { add(\")\"); } break; }"
      },
      {
        "txt": "case Token.SWITCH: add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"case \"); add(first); addCaseBody(last); break; case Token.DEFAULT: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), true); break; case Token.SETNAME:"
      },
      {
        "txt": "break; default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); } private void addNonEmptyExpression( Node n, Context context, boolean allowNonBlockChild) { Node nodeToProcess = n; if (!allowNonBlockChild && n.getType() != Token.BLOCK) {"
      },
      {
        "txt": "throw new Error(\"Missing BLOCK child.\"); } if (n.getType() == Token.BLOCK ) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true);"
      },
      {
        "txt": "} return; } if (count == 1) { Node firstAndOnlyChild = getFirstNonEmptyChild(n); boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks(); if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) { cc.beginBlock(); add(firstAndOnlyChild, Context.STATEMENT); cc.maybeLineBreak();"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); return; } else { nodeToProcess = firstAndOnlyChild; } } } if (nodeToProcess.getType() == Token.EMPTY) { cc.endStatement(true); } else {"
      },
      {
        "txt": "if (nodeToProcess.getType() == Token.VAR) { cc.endStatement(); } } } private boolean isOneExactlyFunctionOrDo(Node n) { <extra_id_0> return (n.getType() == Token.FUNCTION || n.getType() == Token.DO); } void addLeftExpr(Node n, int minPrecedence, Context context) { addExpr(n, minPrecedence, context); } void addExpr(Node n, int minPrecedence) {"
      },
      {
        "txt": "} void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); } private void addExpr(Node n, int minPrecedence, Context context) { if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && (n.getType() == Token.IN))){ add(\"(\"); add(n, clearContextForNoInOperator(context));"
      },
      {
        "txt": "add(\")\"); } else { add(n, context); } } void addList(Node firstInList) { addList(firstInList, true, Context.OTHER); } void addList(Node firstInList, boolean isArrayOrFunctionArgument) { addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);"
      },
      {
        "txt": "} void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); addExpr(n, isArrayOrFunctionArgument ? 1 : 0);"
      },
      {
        "txt": "} } } void addList(Node firstInList, int[] skipIndexes) { int nextSlot = 0; int nextSkipSlot = 0; for (Node n = firstInList; n != null; n = n.getNext()) { while (skipIndexes != null && nextSkipSlot < skipIndexes.length) { if (nextSlot == skipIndexes[nextSkipSlot]) { cc.listSeparator();"
      },
      {
        "txt": "nextSlot++; nextSkipSlot++; } else { break; } } if (n != firstInList) { cc.listSeparator(); } addExpr(n, 1);"
      },
      {
        "txt": "nextSlot++; } } void addCaseBody(Node caseBody) { cc.beginCaseBody(); add(caseBody); cc.endCaseBody(); } void addAllSiblings(Node n) { for (Node c = n; c != null; c = c.getNext()) {"
      },
      {
        "txt": "add(c); } } static String jsString(String s, CharsetEncoder outputCharsetEncoder) { int singleq = 0, doubleq = 0; for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '\"': doubleq++; break; case '\\'': singleq++; break; }"
      },
      {
        "txt": "} String doublequote, singlequote; char quote; if (singleq < doubleq) { quote = '\\''; doublequote = \"\\\"\"; singlequote = \"\\\\\\'\"; } else { quote = '\\\"'; doublequote = \"\\\\\\\"\";"
      },
      {
        "txt": "singlequote = \"\\'\"; } return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder); } static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) { return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder); } static String escapeToDoubleQuotedJsString(String s) { return strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);"
      },
      {
        "txt": "} they want Latin/ASCII characters only. static String regexpEscape(String s) { return regexpEscape(s, null); } static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break;"
      },
      {
        "txt": "case '\\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\\> or ]]> into ]]\\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break;"
      },
      {
        "txt": "case '<': // Break </script into <\\/script final String END_SCRIPT = \"/script\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default:"
      },
      {
        "txt": "if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else {"
      },
      {
        "txt": "appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } static String identifierEscape(String s) { if (NodeUtil.isLatin(s)) {"
      },
      {
        "txt": "return s; } StringBuilder sb = new StringBuilder(); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 0x1F && c < 0x7F) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); }"
      },
      {
        "txt": "} return sb.toString(); } private static int getNonEmptyChildCount(Node n, int maxCount) { int i = 0; Node c = n.getFirstChild(); for (; c != null && i < maxCount; c = c.getNext()) { if (c.getType() != Token.EMPTY) { i++; }"
      },
      {
        "txt": "} return i; } private static Node getFirstNonEmptyChild(Node n) { for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.getType() != Token.EMPTY) { return c; } } return null;"
      },
      {
        "txt": "} enum Context { STATEMENT, BEFORE_DANGLING_ELSE, // a hack to resolve the else-clause ambiguity START_OF_EXPR, PRESERVE_BLOCK, IN_FOR_INIT_CLAUSE, OTHER } private Context getContextForNonEmptyExpression(Context currentContext) {"
      },
      {
        "txt": "return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER; } private Context getContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER); } private Context clearContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context);"
      },
      {
        "txt": "} private static void appendHexJavaScriptRepresentation( StringBuilder sb, char c) { try { appendHexJavaScriptRepresentation(c, sb); } catch (IOException ex) { throw new RuntimeException(ex); } } private static void appendHexJavaScriptRepresentation("
      },
      {
        "txt": "int codePoint, Appendable out) throws IOException { if (Character.isSupplementaryCodePoint(codePoint)) { char[] surrogates = Character.toChars(codePoint); appendHexJavaScriptRepresentation(surrogates[0], out); appendHexJavaScriptRepresentation(surrogates[1], out); return; } out.append(\"\\\\u\") .append(HEX_CHARS[(codePoint >>> 12) & 0xf])"
      },
      {
        "txt": ".append(HEX_CHARS[(codePoint >>> 8) & 0xf]) .append(HEX_CHARS[(codePoint >>> 4) & 0xf]) .append(HEX_CHARS[codePoint & 0xf]); }"
      }
    ]
  },
  {
    "id": 581,
    "file_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
    "start-bug-line": 712,
    "end-bug-line": 712,
    "bug": "",
    "fix": "if (getNonEmptyChildCount(n, 2) == 1) { return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n)); } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Charsets; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream; import java.io.IOException; import java.nio.charset.Charset; import java.nio.charset.CharsetEncoder; class CodeGenerator { private static final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };"
      },
      {
        "txt": "private final CodeConsumer cc; private final CharsetEncoder outputCharsetEncoder; CodeGenerator( CodeConsumer consumer, Charset outputCharset) { cc = consumer; if (outputCharset == null || outputCharset == Charsets.US_ASCII) { this.outputCharsetEncoder = null; } else { this.outputCharsetEncoder = outputCharset.newEncoder(); }"
      },
      {
        "txt": "} CodeGenerator(CodeConsumer consumer) { this(consumer, null); } void add(String str) { cc.add(str); } private void addIdentifier(String identifier) { cc.addIdentifier(identifierEscape(identifier)); }"
      },
      {
        "txt": "void add(Node n) { add(n, Context.OTHER); } void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount();"
      },
      {
        "txt": "Node first = n.getFirstChild(); Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); addLeftExpr(first, p, context); cc.addOp(opstr, true);"
      },
      {
        "txt": "Context rhsContext = getContextForNoInOperator(context); if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(last, p, rhsContext); } else { addExpr(last, p + 1, rhsContext); } return;"
      },
      {
        "txt": "} cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().getType() == Token.BLOCK && first.getNext().getChildCount() <= 1); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild();"
      },
      {
        "txt": "if (catchblock != null) { add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); if (first.getNext().getType() != Token.EMPTY) { throw new Error(\"Catch conditions not suppored because I think\" + \" that it may be a netscape only feature.\"); } add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break;"
      },
      {
        "txt": "case Token.THROW: Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first);"
      },
      {
        "txt": "} else { Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); }"
      },
      {
        "txt": "break; case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.getType() == Token.EMPTY) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1);"
      },
      {
        "txt": "addIdentifier(n.getString()); cc.addOp(\"=\", true); if (first.getType() == Token.COMMA) { addExpr(first, NodeUtil.precedence(Token.ASSIGN)); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT:"
      },
      {
        "txt": "add(\"[\"); addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP)); add(\"]\"); break; case Token.LP: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA:"
      },
      {
        "txt": "addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT:"
      },
      {
        "txt": "case Token.POS: case Token.NEG: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type);"
      },
      {
        "txt": "addLeftExpr(first, p + 1, context); cc.addOp(\"?\", true); addExpr(first.getNext(), 1); cc.addOp(\":\", true); addExpr(last, 1); break; } case Token.REGEXP: if (first.getType() != Token.STRING || last.getType() != Token.STRING) {"
      },
      {
        "txt": "throw new Error(\"Expected children to be strings\"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break;"
      },
      {
        "txt": "case Token.GET_REF: add(first); break; case Token.REF_SPECIAL: Preconditions.checkState(childCount == 1); add(first); add(\".\"); add((String) n.getProp(Node.NAME_PROP)); break; case Token.FUNCTION:"
      },
      {
        "txt": "if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first);"
      },
      {
        "txt": "add(first.getNext()); add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) {"
      },
      {
        "txt": "throw new Error(\"Unexpected Node subclass.\"); } boolean stripBlock = n.isSyntheticBlock() || ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2)); if (!stripBlock) { cc.beginBlock(); } for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.getType() == Token.VAR) {"
      },
      {
        "txt": "cc.endStatement(); } if (c.getType() == Token.FUNCTION) { cc.maybeLineBreak(); } if (type == Token.SCRIPT) { cc.notePreferredLineBreak(); } } if (!stripBlock) {"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.getType() == Token.VAR) { add(first, Context.IN_FOR_INIT_CLAUSE); } else {"
      },
      {
        "txt": "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else {"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } break;"
      },
      {
        "txt": "case Token.DO: Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyExpression(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); add(\"while(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break;"
      },
      {
        "txt": "case Token.GETPROP: { Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.getType() == Token.STRING, \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.getType() == Token.NUMBER); if (needsParens) { add(\"(\");"
      },
      {
        "txt": "} addLeftExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } add(\".\"); addIdentifier(last.getString()); break; } case Token.GETELEM:"
      },
      {
        "txt": "Preconditions.checkState( childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addLeftExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"with(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\";"
      },
      {
        "txt": "int postProp = n.getIntProp(Node.INCRDECR_PROP); if (postProp != 0) { addLeftExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; }"
      },
      {
        "txt": "case Token.CALL: if (first.getType() == Token.NAME && \"eval\".equals(first.getString()) && !first.getBooleanProp(Node.DIRECT_EVAL)) { add(\"(0,eval)\"); } else { addLeftExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext());"
      },
      {
        "txt": "add(\")\"); break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\");"
      },
      {
        "txt": "add(first); add(\")\"); if (hasElse) { addNonEmptyExpression( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyExpression(first.getNext(), Context.OTHER, false);"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); } if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: case Token.THIS: case Token.FALSE: case Token.TRUE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 0); add(Node.tokenToName(type)); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); }"
      },
      {
        "txt": "add(\" \"); add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break;"
      },
      {
        "txt": "case Token.BREAK: Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); }"
      },
      {
        "txt": "cc.endStatement(); break; case Token.EXPR_VOID: throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\"); case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW:"
      },
      {
        "txt": "add(\"new \"); int precedence = NodeUtil.precedence(type); if (NodeUtil.containsCall(first)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next);"
      },
      {
        "txt": "add(\")\"); } break; case Token.STRING: Preconditions.checkState(childCount == 0); add(jsString(n.getString(), outputCharsetEncoder)); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \");"
      },
      {
        "txt": "add(first); break; case Token.OBJECTLIT: { Preconditions.checkState(childCount % 2 == 0); boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext().getNext()) {"
      },
      {
        "txt": "if (c != first) { cc.listSeparator(); } if (c.getType() == Token.STRING && !TokenStream.isKeyword(c.getString()) && TokenStream.isJSIdentifier(c.getString()) && NodeUtil.isLatin(c.getString())) { add(c.getString()); } else { addExpr(c, 1);"
      },
      {
        "txt": "} add(\":\"); addExpr(c.getNext(), 1); } add(\"}\"); if (needsParens) { add(\")\"); } break; }"
      },
      {
        "txt": "case Token.SWITCH: add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"case \"); add(first); addCaseBody(last); break; case Token.DEFAULT: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), true); break; case Token.SETNAME:"
      },
      {
        "txt": "break; default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); } private void addNonEmptyExpression( Node n, Context context, boolean allowNonBlockChild) { Node nodeToProcess = n; if (!allowNonBlockChild && n.getType() != Token.BLOCK) {"
      },
      {
        "txt": "throw new Error(\"Missing BLOCK child.\"); } if (n.getType() == Token.BLOCK ) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true);"
      },
      {
        "txt": "} return; } if (count == 1) { Node firstAndOnlyChild = getFirstNonEmptyChild(n); boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks(); if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) { cc.beginBlock(); add(firstAndOnlyChild, Context.STATEMENT); cc.maybeLineBreak();"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); return; } else { nodeToProcess = firstAndOnlyChild; } } } if (nodeToProcess.getType() == Token.EMPTY) { cc.endStatement(true); } else {"
      },
      {
        "txt": "if (nodeToProcess.getType() == Token.VAR) { cc.endStatement(); } } } private boolean isOneExactlyFunctionOrDo(Node n) { <extra_id_0> return (n.getType() == Token.FUNCTION || n.getType() == Token.DO); } void addLeftExpr(Node n, int minPrecedence, Context context) { addExpr(n, minPrecedence, context); } void addExpr(Node n, int minPrecedence) {"
      },
      {
        "txt": "} void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); } private void addExpr(Node n, int minPrecedence, Context context) { if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && (n.getType() == Token.IN))){ add(\"(\"); add(n, clearContextForNoInOperator(context));"
      },
      {
        "txt": "add(\")\"); } else { add(n, context); } } void addList(Node firstInList) { addList(firstInList, true, Context.OTHER); } void addList(Node firstInList, boolean isArrayOrFunctionArgument) { addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);"
      },
      {
        "txt": "} void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); addExpr(n, isArrayOrFunctionArgument ? 1 : 0);"
      },
      {
        "txt": "} } } void addList(Node firstInList, int[] skipIndexes) { int nextSlot = 0; int nextSkipSlot = 0; for (Node n = firstInList; n != null; n = n.getNext()) { while (skipIndexes != null && nextSkipSlot < skipIndexes.length) { if (nextSlot == skipIndexes[nextSkipSlot]) { cc.listSeparator();"
      },
      {
        "txt": "nextSlot++; nextSkipSlot++; } else { break; } } if (n != firstInList) { cc.listSeparator(); } addExpr(n, 1);"
      },
      {
        "txt": "nextSlot++; } } void addCaseBody(Node caseBody) { cc.beginCaseBody(); add(caseBody); cc.endCaseBody(); } void addAllSiblings(Node n) { for (Node c = n; c != null; c = c.getNext()) {"
      },
      {
        "txt": "add(c); } } static String jsString(String s, CharsetEncoder outputCharsetEncoder) { int singleq = 0, doubleq = 0; for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '\"': doubleq++; break; case '\\'': singleq++; break; }"
      },
      {
        "txt": "} String doublequote, singlequote; char quote; if (singleq < doubleq) { quote = '\\''; doublequote = \"\\\"\"; singlequote = \"\\\\\\'\"; } else { quote = '\\\"'; doublequote = \"\\\\\\\"\";"
      },
      {
        "txt": "singlequote = \"\\'\"; } return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder); } static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) { return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder); } static String escapeToDoubleQuotedJsString(String s) { return strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);"
      },
      {
        "txt": "} they want Latin/ASCII characters only. static String regexpEscape(String s) { return regexpEscape(s, null); } static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break;"
      },
      {
        "txt": "case '\\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\\> or ]]> into ]]\\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break;"
      },
      {
        "txt": "case '<': // Break </script into <\\/script final String END_SCRIPT = \"/script\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default:"
      },
      {
        "txt": "if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else {"
      },
      {
        "txt": "appendHexJavaScriptRepresentation(sb, c); } } } } sb.append(quote); return sb.toString(); } static String identifierEscape(String s) { if (NodeUtil.isLatin(s)) {"
      },
      {
        "txt": "return s; } StringBuilder sb = new StringBuilder(); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 0x1F && c < 0x7F) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); }"
      },
      {
        "txt": "} return sb.toString(); } private static int getNonEmptyChildCount(Node n, int maxCount) { int i = 0; Node c = n.getFirstChild(); for (; c != null && i < maxCount; c = c.getNext()) { if (c.getType() != Token.EMPTY) { i++; }"
      },
      {
        "txt": "} return i; } private static Node getFirstNonEmptyChild(Node n) { for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.getType() != Token.EMPTY) { return c; } } return null;"
      },
      {
        "txt": "} enum Context { STATEMENT, BEFORE_DANGLING_ELSE, // a hack to resolve the else-clause ambiguity START_OF_EXPR, PRESERVE_BLOCK, IN_FOR_INIT_CLAUSE, OTHER } private Context getContextForNonEmptyExpression(Context currentContext) {"
      },
      {
        "txt": "return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER; } private Context getContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER); } private Context clearContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context);"
      },
      {
        "txt": "} private static void appendHexJavaScriptRepresentation( StringBuilder sb, char c) { try { appendHexJavaScriptRepresentation(c, sb); } catch (IOException ex) { throw new RuntimeException(ex); } } private static void appendHexJavaScriptRepresentation("
      },
      {
        "txt": "int codePoint, Appendable out) throws IOException { if (Character.isSupplementaryCodePoint(codePoint)) { char[] surrogates = Character.toChars(codePoint); appendHexJavaScriptRepresentation(surrogates[0], out); appendHexJavaScriptRepresentation(surrogates[1], out); return; } out.append(\"\\\\u\") .append(HEX_CHARS[(codePoint >>> 12) & 0xf])"
      },
      {
        "txt": ".append(HEX_CHARS[(codePoint >>> 8) & 0xf]) .append(HEX_CHARS[(codePoint >>> 4) & 0xf]) .append(HEX_CHARS[codePoint & 0xf]); }"
      }
    ]
  },
  {
    "id": 582,
    "file_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
    "start-bug-line": 714,
    "end-bug-line": 714,
    "bug": "",
    "fix": "return false; } } } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Charsets; import com.google.common.base.Preconditions;"
      },
      {
        "txt": "import com.google.javascript.rhino.Node; import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream; import java.io.IOException; import java.nio.charset.Charset; import java.nio.charset.CharsetEncoder; class CodeGenerator { private static final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };"
      },
      {
        "txt": "private final CodeConsumer cc; private final CharsetEncoder outputCharsetEncoder; CodeGenerator( CodeConsumer consumer, Charset outputCharset) { cc = consumer; if (outputCharset == null || outputCharset == Charsets.US_ASCII) { this.outputCharsetEncoder = null; } else { this.outputCharsetEncoder = outputCharset.newEncoder(); }"
      },
      {
        "txt": "} CodeGenerator(CodeConsumer consumer) { this(consumer, null); } void add(String str) { cc.add(str); } private void addIdentifier(String identifier) { cc.addIdentifier(identifierEscape(identifier)); }"
      },
      {
        "txt": "void add(Node n) { add(n, Context.OTHER); } void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount();"
      },
      {
        "txt": "Node first = n.getFirstChild(); Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); addLeftExpr(first, p, context); cc.addOp(opstr, true);"
      },
      {
        "txt": "Context rhsContext = getContextForNoInOperator(context); if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(last, p, rhsContext); } else { addExpr(last, p + 1, rhsContext); } return;"
      },
      {
        "txt": "} cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().getType() == Token.BLOCK && first.getNext().getChildCount() <= 1); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild();"
      },
      {
        "txt": "if (catchblock != null) { add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); if (first.getNext().getType() != Token.EMPTY) { throw new Error(\"Catch conditions not suppored because I think\" + \" that it may be a netscape only feature.\"); } add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break;"
      },
      {
        "txt": "case Token.THROW: Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first);"
      },
      {
        "txt": "} else { Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); }"
      },
      {
        "txt": "break; case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.getType() == Token.EMPTY) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1);"
      },
      {
        "txt": "addIdentifier(n.getString()); cc.addOp(\"=\", true); if (first.getType() == Token.COMMA) { addExpr(first, NodeUtil.precedence(Token.ASSIGN)); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT:"
      },
      {
        "txt": "add(\"[\"); addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP)); add(\"]\"); break; case Token.LP: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA:"
      },
      {
        "txt": "addList(first, false, context); break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT:"
      },
      {
        "txt": "case Token.POS: case Token.NEG: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type);"
      },
      {
        "txt": "addLeftExpr(first, p + 1, context); cc.addOp(\"?\", true); addExpr(first.getNext(), 1); cc.addOp(\":\", true); addExpr(last, 1); break; } case Token.REGEXP: if (first.getType() != Token.STRING || last.getType() != Token.STRING) {"
      },
      {
        "txt": "throw new Error(\"Expected children to be strings\"); } String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break;"
      },
      {
        "txt": "case Token.GET_REF: add(first); break; case Token.REF_SPECIAL: Preconditions.checkState(childCount == 1); add(first); add(\".\"); add((String) n.getProp(Node.NAME_PROP)); break; case Token.FUNCTION:"
      },
      {
        "txt": "if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first);"
      },
      {
        "txt": "add(first.getNext()); add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) {"
      },
      {
        "txt": "throw new Error(\"Unexpected Node subclass.\"); } boolean stripBlock = n.isSyntheticBlock() || ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2)); if (!stripBlock) { cc.beginBlock(); } for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.getType() == Token.VAR) {"
      },
      {
        "txt": "cc.endStatement(); } if (c.getType() == Token.FUNCTION) { cc.maybeLineBreak(); } if (type == Token.SCRIPT) { cc.notePreferredLineBreak(); } } if (!stripBlock) {"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.getType() == Token.VAR) { add(first, Context.IN_FOR_INIT_CLAUSE); } else {"
      },
      {
        "txt": "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE); } add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else {"
      },
      {
        "txt": "Preconditions.checkState(childCount == 3); add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } break;"
      },
      {
        "txt": "case Token.DO: Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyExpression(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); add(\"while(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break;"
      },
      {
        "txt": "case Token.GETPROP: { Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.getType() == Token.STRING, \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.getType() == Token.NUMBER); if (needsParens) { add(\"(\");"
      },
      {
        "txt": "} addLeftExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } add(\".\"); addIdentifier(last.getString()); break; } case Token.GETELEM:"
      },
      {
        "txt": "Preconditions.checkState( childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addLeftExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"with(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\";"
      },
      {
        "txt": "int postProp = n.getIntProp(Node.INCRDECR_PROP); if (postProp != 0) { addLeftExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; }"
      },
      {
        "txt": "case Token.CALL: if (first.getType() == Token.NAME && \"eval\".equals(first.getString()) && !first.getBooleanProp(Node.DIRECT_EVAL)) { add(\"(0,eval)\"); } else { addLeftExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext());"
      },
      {
        "txt": "add(\")\"); break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\");"
      },
      {
        "txt": "add(first); add(\")\"); if (hasElse) { addNonEmptyExpression( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyExpression(first.getNext(), Context.OTHER, false);"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); } if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: case Token.THIS: case Token.FALSE: case Token.TRUE:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 0); add(Node.tokenToName(type)); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); }"
      },
      {
        "txt": "add(\" \"); add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break;"
      },
      {
        "txt": "case Token.BREAK: Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); }"
      },
      {
        "txt": "cc.endStatement(); break; case Token.EXPR_VOID: throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\"); case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW:"
      },
      {
        "txt": "add(\"new \"); int precedence = NodeUtil.precedence(type); if (NodeUtil.containsCall(first)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next);"
      },
      {
        "txt": "add(\")\"); } break; case Token.STRING: Preconditions.checkState(childCount == 0); add(jsString(n.getString(), outputCharsetEncoder)); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \");"
      },
      {
        "txt": "add(first); break; case Token.OBJECTLIT: { Preconditions.checkState(childCount % 2 == 0); boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext().getNext()) {"
      },
      {
        "txt": "if (c != first) { cc.listSeparator(); } if (c.getType() == Token.STRING && !TokenStream.isKeyword(c.getString()) && TokenStream.isJSIdentifier(c.getString()) && NodeUtil.isLatin(c.getString())) { add(c.getString()); } else { addExpr(c, 1);"
      },
      {
        "txt": "} add(\":\"); addExpr(c.getNext(), 1); } add(\"}\"); if (needsParens) { add(\")\"); } break; }"
      },
      {
        "txt": "case Token.SWITCH: add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"case \"); add(first); addCaseBody(last); break; case Token.DEFAULT: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), true); break; case Token.SETNAME:"
      },
      {
        "txt": "break; default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); } private void addNonEmptyExpression( Node n, Context context, boolean allowNonBlockChild) { Node nodeToProcess = n; if (!allowNonBlockChild && n.getType() != Token.BLOCK) {"
      },
      {
        "txt": "throw new Error(\"Missing BLOCK child.\"); } if (n.getType() == Token.BLOCK ) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true);"
      },
      {
        "txt": "} return; } if (count == 1) { Node firstAndOnlyChild = getFirstNonEmptyChild(n); boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks(); if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) { cc.beginBlock(); add(firstAndOnlyChild, Context.STATEMENT); cc.maybeLineBreak();"
      },
      {
        "txt": "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); return; } else { nodeToProcess = firstAndOnlyChild; } } } if (nodeToProcess.getType() == Token.EMPTY) { cc.endStatement(true); } else {"
      },
      {
        "txt": "if (nodeToProcess.getType() == Token.VAR) { cc.endStatement(); } } } private boolean isOneExactlyFunctionOrDo(Node n) { <extra_id_0> } void addLeftExpr(Node n, int minPrecedence, Context context) { addExpr(n, minPrecedence, context); } void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER);"
      },
      {
        "txt": "void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); } private void addExpr(Node n, int minPrecedence, Context context) { if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && (n.getType() == Token.IN))){ add(\"(\"); add(n, clearContextForNoInOperator(context)); add(\")\");"
      },
      {
        "txt": "} else { add(n, context); } } void addList(Node firstInList) { addList(firstInList, true, Context.OTHER); } void addList(Node firstInList, boolean isArrayOrFunctionArgument) { addList(firstInList, isArrayOrFunctionArgument, Context.OTHER); }"
      },
      {
        "txt": "void addList(Node firstInList, boolean isArrayOrFunctionArgument, Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); addExpr(n, isArrayOrFunctionArgument ? 1 : 0); }"
      },
      {
        "txt": "} } void addList(Node firstInList, int[] skipIndexes) { int nextSlot = 0; int nextSkipSlot = 0; for (Node n = firstInList; n != null; n = n.getNext()) { while (skipIndexes != null && nextSkipSlot < skipIndexes.length) { if (nextSlot == skipIndexes[nextSkipSlot]) { cc.listSeparator(); nextSlot++;"
      },
      {
        "txt": "nextSkipSlot++; } else { break; } } if (n != firstInList) { cc.listSeparator(); } addExpr(n, 1); nextSlot++;"
      },
      {
        "txt": "} } void addCaseBody(Node caseBody) { cc.beginCaseBody(); add(caseBody); cc.endCaseBody(); } void addAllSiblings(Node n) { for (Node c = n; c != null; c = c.getNext()) { add(c);"
      },
      {
        "txt": "} } static String jsString(String s, CharsetEncoder outputCharsetEncoder) { int singleq = 0, doubleq = 0; for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '\"': doubleq++; break; case '\\'': singleq++; break; } }"
      },
      {
        "txt": "String doublequote, singlequote; char quote; if (singleq < doubleq) { quote = '\\''; doublequote = \"\\\"\"; singlequote = \"\\\\\\'\"; } else { quote = '\\\"'; doublequote = \"\\\\\\\"\"; singlequote = \"\\'\";"
      },
      {
        "txt": "} return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder); } static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) { return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder); } static String escapeToDoubleQuotedJsString(String s) { return strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null); }"
      },
      {
        "txt": "they want Latin/ASCII characters only. static String regexpEscape(String s) { return regexpEscape(s, null); } static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder();"
      },
      {
        "txt": "sb.append(quote); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break;"
      },
      {
        "txt": "case '>': // Break --> into --\\> or ]]> into ]]\\> if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': // Break </script into <\\/script"
      },
      {
        "txt": "final String END_SCRIPT = \"/script\"; if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) {"
      },
      {
        "txt": "if (outputCharsetEncoder.canEncode(c)) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c);"
      },
      {
        "txt": "} } } } sb.append(quote); return sb.toString(); } static String identifierEscape(String s) { if (NodeUtil.isLatin(s)) { return s;"
      },
      {
        "txt": "} StringBuilder sb = new StringBuilder(); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 0x1F && c < 0x7F) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } }"
      },
      {
        "txt": "return sb.toString(); } private static int getNonEmptyChildCount(Node n, int maxCount) { int i = 0; Node c = n.getFirstChild(); for (; c != null && i < maxCount; c = c.getNext()) { if (c.getType() != Token.EMPTY) { i++; } }"
      },
      {
        "txt": "return i; } private static Node getFirstNonEmptyChild(Node n) { for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.getType() != Token.EMPTY) { return c; } } return null; }"
      },
      {
        "txt": "enum Context { STATEMENT, BEFORE_DANGLING_ELSE, // a hack to resolve the else-clause ambiguity START_OF_EXPR, PRESERVE_BLOCK, IN_FOR_INIT_CLAUSE, OTHER } private Context getContextForNonEmptyExpression(Context currentContext) { return currentContext == Context.BEFORE_DANGLING_ELSE ?"
      },
      {
        "txt": "Context.BEFORE_DANGLING_ELSE : Context.OTHER; } private Context getContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER); } private Context clearContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context); }"
      },
      {
        "txt": "private static void appendHexJavaScriptRepresentation( StringBuilder sb, char c) { try { appendHexJavaScriptRepresentation(c, sb); } catch (IOException ex) { throw new RuntimeException(ex); } } private static void appendHexJavaScriptRepresentation( int codePoint, Appendable out)"
      },
      {
        "txt": "throws IOException { if (Character.isSupplementaryCodePoint(codePoint)) { char[] surrogates = Character.toChars(codePoint); appendHexJavaScriptRepresentation(surrogates[0], out); appendHexJavaScriptRepresentation(surrogates[1], out); return; } out.append(\"\\\\u\") .append(HEX_CHARS[(codePoint >>> 12) & 0xf]) .append(HEX_CHARS[(codePoint >>> 8) & 0xf])"
      },
      {
        "txt": ".append(HEX_CHARS[(codePoint >>> 4) & 0xf]) .append(HEX_CHARS[codePoint & 0xf]); }"
      }
    ]
  },
  {
    "id": 583,
    "file_path": "src/com/google/javascript/jscomp/CodeGenerator.java",
    "start-bug-line": 715,
    "end-bug-line": 715,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.google.javascript.jscomp; import com.google.common.base.Charsets; import com.google.common.base.Preconditions; import com.google.javascript.rhino.Node;"
      },
      {
        "txt": "import com.google.javascript.rhino.Token; import com.google.javascript.rhino.TokenStream; import java.io.IOException; import java.nio.charset.Charset; import java.nio.charset.CharsetEncoder; class CodeGenerator { private static final char[] HEX_CHARS = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' }; private final CodeConsumer cc;"
      },
      {
        "txt": "private final CharsetEncoder outputCharsetEncoder; CodeGenerator( CodeConsumer consumer, Charset outputCharset) { cc = consumer; if (outputCharset == null || outputCharset == Charsets.US_ASCII) { this.outputCharsetEncoder = null; } else { this.outputCharsetEncoder = outputCharset.newEncoder(); } }"
      },
      {
        "txt": "CodeGenerator(CodeConsumer consumer) { this(consumer, null); } void add(String str) { cc.add(str); } private void addIdentifier(String identifier) { cc.addIdentifier(identifierEscape(identifier)); } void add(Node n) {"
      },
      {
        "txt": "add(n, Context.OTHER); } void add(Node n, Context context) { if (!cc.continueProcessing()) { return; } int type = n.getType(); String opstr = NodeUtil.opToStr(type); int childCount = n.getChildCount(); Node first = n.getFirstChild();"
      },
      {
        "txt": "Node last = n.getLastChild(); if (opstr != null && first != last) { Preconditions.checkState( childCount == 2, \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\", opstr, childCount); int p = NodeUtil.precedence(type); addLeftExpr(first, p, context); cc.addOp(opstr, true); Context rhsContext = getContextForNoInOperator(context);"
      },
      {
        "txt": "if (last.getType() == type && NodeUtil.isAssociative(type)) { addExpr(last, p, rhsContext); } else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) { addExpr(last, p, rhsContext); } else { addExpr(last, p + 1, rhsContext); } return; }"
      },
      {
        "txt": "cc.startSourceMapping(n); switch (type) { case Token.TRY: { Preconditions.checkState(first.getNext().getType() == Token.BLOCK && first.getNext().getChildCount() <= 1); Preconditions.checkState(childCount >= 2 && childCount <= 3); add(\"try\"); add(first, Context.PRESERVE_BLOCK); Node catchblock = first.getNext().getFirstChild(); if (catchblock != null) {"
      },
      {
        "txt": "add(catchblock); } if (childCount == 3) { add(\"finally\"); add(last, Context.PRESERVE_BLOCK); } break; } case Token.CATCH: Preconditions.checkState(childCount == 3);"
      },
      {
        "txt": "if (first.getNext().getType() != Token.EMPTY) { throw new Error(\"Catch conditions not suppored because I think\" + \" that it may be a netscape only feature.\"); } add(\"catch(\"); add(first); add(\")\"); add(last, Context.PRESERVE_BLOCK); break; case Token.THROW:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 1); add(\"throw\"); add(first); cc.endStatement(true); break; case Token.RETURN: add(\"return\"); if (childCount == 1) { add(first); } else {"
      },
      {
        "txt": "Preconditions.checkState(childCount == 0); } cc.endStatement(); break; case Token.VAR: if (first != null) { add(\"var \"); addList(first, false, getContextForNoInOperator(context)); } break;"
      },
      {
        "txt": "case Token.LABEL_NAME: Preconditions.checkState(!n.getString().isEmpty()); addIdentifier(n.getString()); break; case Token.NAME: if (first == null || first.getType() == Token.EMPTY) { addIdentifier(n.getString()); } else { Preconditions.checkState(childCount == 1); addIdentifier(n.getString());"
      },
      {
        "txt": "cc.addOp(\"=\", true); if (first.getType() == Token.COMMA) { addExpr(first, NodeUtil.precedence(Token.ASSIGN)); } else { addExpr(first, 0, getContextForNoInOperator(context)); } } break; case Token.ARRAYLIT: add(\"[\");"
      },
      {
        "txt": "addList(first, (int[]) n.getProp(Node.SKIP_INDEXES_PROP)); add(\"]\"); break; case Token.LP: add(\"(\"); addList(first); add(\")\"); break; case Token.COMMA: addList(first, false, context);"
      },
      {
        "txt": "break; case Token.NUMBER: Preconditions.checkState(childCount == 0); cc.addNumber(n.getDouble()); break; case Token.TYPEOF: case Token.VOID: case Token.NOT: case Token.BITNOT: case Token.POS:"
      },
      {
        "txt": "case Token.NEG: { Preconditions.checkState(childCount == 1); cc.addOp(NodeUtil.opToStrNoFail(type), false); addExpr(first, NodeUtil.precedence(type)); break; } case Token.HOOK: { Preconditions.checkState(childCount == 3); int p = NodeUtil.precedence(type); addLeftExpr(first, p + 1, context);"
      },
      {
        "txt": "cc.addOp(\"?\", true); addExpr(first.getNext(), 1); cc.addOp(\":\", true); addExpr(last, 1); break; } case Token.REGEXP: if (first.getType() != Token.STRING || last.getType() != Token.STRING) { throw new Error(\"Expected children to be strings\");"
      },
      {
        "txt": "} String regexp = regexpEscape(first.getString(), outputCharsetEncoder); if (childCount == 2) { add(regexp + last.getString()); } else { Preconditions.checkState(childCount == 1); add(regexp); } break; case Token.GET_REF:"
      },
      {
        "txt": "add(first); break; case Token.REF_SPECIAL: Preconditions.checkState(childCount == 1); add(first); add(\".\"); add((String) n.getProp(Node.NAME_PROP)); break; case Token.FUNCTION: if (n.getClass() != Node.class) {"
      },
      {
        "txt": "throw new Error(\"Unexpected Node subclass.\"); } Preconditions.checkState(childCount == 3); boolean funcNeedsParens = (context == Context.START_OF_EXPR); if (funcNeedsParens) { add(\"(\"); } add(\"function\"); add(first); add(first.getNext());"
      },
      {
        "txt": "add(last, Context.PRESERVE_BLOCK); cc.endFunction(context == Context.STATEMENT); if (funcNeedsParens) { add(\")\"); } break; case Token.SCRIPT: case Token.BLOCK: { if (n.getClass() != Node.class) { throw new Error(\"Unexpected Node subclass.\");"
      },
      {
        "txt": "} boolean stripBlock = n.isSyntheticBlock() || ((context != Context.PRESERVE_BLOCK) && (n.getChildCount() < 2)); if (!stripBlock) { cc.beginBlock(); } for (Node c = first; c != null; c = c.getNext()) { add(c, Context.STATEMENT); if (c.getType() == Token.VAR) { cc.endStatement();"
      },
      {
        "txt": "} if (c.getType() == Token.FUNCTION) { cc.maybeLineBreak(); } if (type == Token.SCRIPT) { cc.notePreferredLineBreak(); } } if (!stripBlock) { cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));"
      },
      {
        "txt": "} break; } case Token.FOR: if (childCount == 4) { add(\"for(\"); if (first.getType() == Token.VAR) { add(first, Context.IN_FOR_INIT_CLAUSE); } else { addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);"
      },
      {
        "txt": "} add(\";\"); add(first.getNext()); add(\";\"); add(first.getNext().getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else { Preconditions.checkState(childCount == 3);"
      },
      {
        "txt": "add(\"for(\"); add(first); add(\"in\"); add(first.getNext()); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } break; case Token.DO:"
      },
      {
        "txt": "Preconditions.checkState(childCount == 2); add(\"do\"); addNonEmptyExpression(first, Context.OTHER, false); add(\"while(\"); add(last); add(\")\"); cc.endStatement(); break; case Token.WHILE: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "add(\"while(\"); add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.EMPTY: Preconditions.checkState(childCount == 0); break; case Token.GETPROP: {"
      },
      {
        "txt": "Preconditions.checkState( childCount == 2, \"Bad GETPROP: expected 2 children, but got %s\", childCount); Preconditions.checkState( last.getType() == Token.STRING, \"Bad GETPROP: RHS should be STRING\"); boolean needsParens = (first.getType() == Token.NUMBER); if (needsParens) { add(\"(\"); }"
      },
      {
        "txt": "addLeftExpr(first, NodeUtil.precedence(type), context); if (needsParens) { add(\")\"); } add(\".\"); addIdentifier(last.getString()); break; } case Token.GETELEM: Preconditions.checkState("
      },
      {
        "txt": "childCount == 2, \"Bad GETELEM: expected 2 children but got %s\", childCount); addLeftExpr(first, NodeUtil.precedence(type), context); add(\"[\"); add(first.getNext()); add(\"]\"); break; case Token.WITH: Preconditions.checkState(childCount == 2); add(\"with(\");"
      },
      {
        "txt": "add(first); add(\")\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); break; case Token.INC: case Token.DEC: { Preconditions.checkState(childCount == 1); String o = type == Token.INC ? \"++\" : \"--\"; int postProp = n.getIntProp(Node.INCRDECR_PROP);"
      },
      {
        "txt": "if (postProp != 0) { addLeftExpr(first, NodeUtil.precedence(type), context); cc.addOp(o, false); } else { cc.addOp(o, false); add(first); } break; } case Token.CALL:"
      },
      {
        "txt": "if (first.getType() == Token.NAME && \"eval\".equals(first.getString()) && !first.getBooleanProp(Node.DIRECT_EVAL)) { add(\"(0,eval)\"); } else { addLeftExpr(first, NodeUtil.precedence(type), context); } add(\"(\"); addList(first.getNext()); add(\")\");"
      },
      {
        "txt": "break; case Token.IF: boolean hasElse = childCount == 3; boolean ambiguousElseClause = context == Context.BEFORE_DANGLING_ELSE && !hasElse; if (ambiguousElseClause) { cc.beginBlock(); } add(\"if(\"); add(first);"
      },
      {
        "txt": "add(\")\"); if (hasElse) { addNonEmptyExpression( first.getNext(), Context.BEFORE_DANGLING_ELSE, false); add(\"else\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), false); } else { addNonEmptyExpression(first.getNext(), Context.OTHER, false); Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "} if (ambiguousElseClause) { cc.endBlock(); } break; case Token.NULL: case Token.THIS: case Token.FALSE: case Token.TRUE: Preconditions.checkState(childCount == 0);"
      },
      {
        "txt": "add(Node.tokenToName(type)); break; case Token.CONTINUE: Preconditions.checkState(childCount <= 1); add(\"continue\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \");"
      },
      {
        "txt": "add(first); } cc.endStatement(); break; case Token.DEBUGGER: Preconditions.checkState(childCount == 0); add(\"debugger\"); cc.endStatement(); break; case Token.BREAK:"
      },
      {
        "txt": "Preconditions.checkState(childCount <= 1); add(\"break\"); if (childCount == 1) { if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(\" \"); add(first); } cc.endStatement();"
      },
      {
        "txt": "break; case Token.EXPR_VOID: throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\"); case Token.EXPR_RESULT: Preconditions.checkState(childCount == 1); add(first, Context.START_OF_EXPR); cc.endStatement(); break; case Token.NEW: add(\"new \");"
      },
      {
        "txt": "int precedence = NodeUtil.precedence(type); if (NodeUtil.containsCall(first)) { precedence = NodeUtil.precedence(first.getType()) + 1; } addExpr(first, precedence); Node next = first.getNext(); if (next != null) { add(\"(\"); addList(next); add(\")\");"
      },
      {
        "txt": "} break; case Token.STRING: Preconditions.checkState(childCount == 0); add(jsString(n.getString(), outputCharsetEncoder)); break; case Token.DELPROP: Preconditions.checkState(childCount == 1); add(\"delete \"); add(first);"
      },
      {
        "txt": "break; case Token.OBJECTLIT: { Preconditions.checkState(childCount % 2 == 0); boolean needsParens = (context == Context.START_OF_EXPR); if (needsParens) { add(\"(\"); } add(\"{\"); for (Node c = first; c != null; c = c.getNext().getNext()) { if (c != first) {"
      },
      {
        "txt": "cc.listSeparator(); } if (c.getType() == Token.STRING && !TokenStream.isKeyword(c.getString()) && TokenStream.isJSIdentifier(c.getString()) && NodeUtil.isLatin(c.getString())) { add(c.getString()); } else { addExpr(c, 1); }"
      },
      {
        "txt": "add(\":\"); addExpr(c.getNext(), 1); } add(\"}\"); if (needsParens) { add(\")\"); } break; } case Token.SWITCH:"
      },
      {
        "txt": "add(\"switch(\"); add(first); add(\")\"); cc.beginBlock(); addAllSiblings(first.getNext()); cc.endBlock(context == Context.STATEMENT); break; case Token.CASE: Preconditions.checkState(childCount == 2); add(\"case \");"
      },
      {
        "txt": "add(first); addCaseBody(last); break; case Token.DEFAULT: Preconditions.checkState(childCount == 1); add(\"default\"); addCaseBody(first); break; case Token.LABEL: Preconditions.checkState(childCount == 2);"
      },
      {
        "txt": "if (first.getType() != Token.LABEL_NAME) { throw new Error(\"Unexpected token type. Should be LABEL_NAME.\"); } add(first); add(\":\"); addNonEmptyExpression( last, getContextForNonEmptyExpression(context), true); break; case Token.SETNAME: break;"
      },
      {
        "txt": "default: throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree()); } cc.endSourceMapping(n); } private void addNonEmptyExpression( Node n, Context context, boolean allowNonBlockChild) { Node nodeToProcess = n; if (!allowNonBlockChild && n.getType() != Token.BLOCK) { throw new Error(\"Missing BLOCK child.\");"
      },
      {
        "txt": "} if (n.getType() == Token.BLOCK ) { int count = getNonEmptyChildCount(n, 2); if (count == 0) { if (cc.shouldPreserveExtraBlocks()) { cc.beginBlock(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT)); } else { cc.endStatement(true); }"
      },
      {
        "txt": "return; } if (count == 1) { Node firstAndOnlyChild = getFirstNonEmptyChild(n); boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks(); if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild)) { cc.beginBlock(); add(firstAndOnlyChild, Context.STATEMENT); cc.maybeLineBreak(); cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));"
      },
      {
        "txt": "return; } else { nodeToProcess = firstAndOnlyChild; } } } if (nodeToProcess.getType() == Token.EMPTY) { cc.endStatement(true); } else { add(nodeToProcess, context);"
      },
      {
        "txt": "cc.endStatement(); } } } private boolean isOneExactlyFunctionOrDo(Node n) { return (n.getType() == Token.FUNCTION || n.getType() == Token.DO); <extra_id_0> void addLeftExpr(Node n, int minPrecedence, Context context) { addExpr(n, minPrecedence, context); } void addExpr(Node n, int minPrecedence) { addExpr(n, minPrecedence, Context.OTHER); }"
      },
      {
        "txt": "addExpr(n, minPrecedence, Context.OTHER); } private void addExpr(Node n, int minPrecedence, Context context) { if ((NodeUtil.precedence(n.getType()) < minPrecedence) || ((context == Context.IN_FOR_INIT_CLAUSE) && (n.getType() == Token.IN))){ add(\"(\"); add(n, clearContextForNoInOperator(context)); add(\")\"); } else {"
      },
      {
        "txt": "add(n, context); } } void addList(Node firstInList) { addList(firstInList, true, Context.OTHER); } void addList(Node firstInList, boolean isArrayOrFunctionArgument) { addList(firstInList, isArrayOrFunctionArgument, Context.OTHER); } void addList(Node firstInList, boolean isArrayOrFunctionArgument,"
      },
      {
        "txt": "Context lhsContext) { for (Node n = firstInList; n != null; n = n.getNext()) { boolean isFirst = n == firstInList; if (isFirst) { addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext); } else { cc.listSeparator(); addExpr(n, isArrayOrFunctionArgument ? 1 : 0); } }"
      },
      {
        "txt": "} void addList(Node firstInList, int[] skipIndexes) { int nextSlot = 0; int nextSkipSlot = 0; for (Node n = firstInList; n != null; n = n.getNext()) { while (skipIndexes != null && nextSkipSlot < skipIndexes.length) { if (nextSlot == skipIndexes[nextSkipSlot]) { cc.listSeparator(); nextSlot++; nextSkipSlot++;"
      },
      {
        "txt": "} else { break; } } if (n != firstInList) { cc.listSeparator(); } addExpr(n, 1); nextSlot++; }"
      },
      {
        "txt": "} void addCaseBody(Node caseBody) { cc.beginCaseBody(); add(caseBody); cc.endCaseBody(); } void addAllSiblings(Node n) { for (Node c = n; c != null; c = c.getNext()) { add(c); }"
      },
      {
        "txt": "} static String jsString(String s, CharsetEncoder outputCharsetEncoder) { int singleq = 0, doubleq = 0; for (int i = 0; i < s.length(); i++) { switch (s.charAt(i)) { case '\"': doubleq++; break; case '\\'': singleq++; break; } } String doublequote, singlequote;"
      },
      {
        "txt": "char quote; if (singleq < doubleq) { quote = '\\''; doublequote = \"\\\"\"; singlequote = \"\\\\\\'\"; } else { quote = '\\\"'; doublequote = \"\\\\\\\"\"; singlequote = \"\\'\"; }"
      },
      {
        "txt": "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\", outputCharsetEncoder); } static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) { return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder); } static String escapeToDoubleQuotedJsString(String s) { return strEscape(s, '\"', \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null); } they want Latin/ASCII characters only."
      },
      {
        "txt": "static String regexpEscape(String s) { return regexpEscape(s, null); } static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) { StringBuilder sb = new StringBuilder(); sb.append(quote);"
      },
      {
        "txt": "for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); switch (c) { case '\\n': sb.append(\"\\\\n\"); break; case '\\r': sb.append(\"\\\\r\"); break; case '\\t': sb.append(\"\\\\t\"); break; case '\\\\': sb.append(backslashEscape); break; case '\\\"': sb.append(doublequoteEscape); break; case '\\'': sb.append(singlequoteEscape); break; case '>': // Break --> into --\\> or ]]> into ]]\\>"
      },
      {
        "txt": "if (i >= 2 && ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') || (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) { sb.append(\"\\\\>\"); } else { sb.append(c); } break; case '<': // Break </script into <\\/script final String END_SCRIPT = \"/script\";"
      },
      {
        "txt": "if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) { sb.append(\"<\\\\\"); } else { sb.append(c); } break; default: if (outputCharsetEncoder != null) { if (outputCharsetEncoder.canEncode(c)) {"
      },
      {
        "txt": "sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } else { if (c > 0x1f && c <= 0x7f) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); }"
      },
      {
        "txt": "} } } sb.append(quote); return sb.toString(); } static String identifierEscape(String s) { if (NodeUtil.isLatin(s)) { return s; }"
      },
      {
        "txt": "StringBuilder sb = new StringBuilder(); for (int i = 0; i < s.length(); i++) { char c = s.charAt(i); if (c > 0x1F && c < 0x7F) { sb.append(c); } else { appendHexJavaScriptRepresentation(sb, c); } } return sb.toString();"
      },
      {
        "txt": "} private static int getNonEmptyChildCount(Node n, int maxCount) { int i = 0; Node c = n.getFirstChild(); for (; c != null && i < maxCount; c = c.getNext()) { if (c.getType() != Token.EMPTY) { i++; } } return i;"
      },
      {
        "txt": "} private static Node getFirstNonEmptyChild(Node n) { for (Node c = n.getFirstChild(); c != null; c = c.getNext()) { if (c.getType() != Token.EMPTY) { return c; } } return null; } enum Context {"
      },
      {
        "txt": "STATEMENT, BEFORE_DANGLING_ELSE, // a hack to resolve the else-clause ambiguity START_OF_EXPR, PRESERVE_BLOCK, IN_FOR_INIT_CLAUSE, OTHER } private Context getContextForNonEmptyExpression(Context currentContext) { return currentContext == Context.BEFORE_DANGLING_ELSE ? Context.BEFORE_DANGLING_ELSE : Context.OTHER;"
      },
      {
        "txt": "} private Context getContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER); } private Context clearContextForNoInOperator(Context context) { return (context == Context.IN_FOR_INIT_CLAUSE ? Context.OTHER : context); } private static void appendHexJavaScriptRepresentation("
      },
      {
        "txt": "StringBuilder sb, char c) { try { appendHexJavaScriptRepresentation(c, sb); } catch (IOException ex) { throw new RuntimeException(ex); } } private static void appendHexJavaScriptRepresentation( int codePoint, Appendable out) throws IOException {"
      },
      {
        "txt": "if (Character.isSupplementaryCodePoint(codePoint)) { char[] surrogates = Character.toChars(codePoint); appendHexJavaScriptRepresentation(surrogates[0], out); appendHexJavaScriptRepresentation(surrogates[1], out); return; } out.append(\"\\\\u\") .append(HEX_CHARS[(codePoint >>> 12) & 0xf]) .append(HEX_CHARS[(codePoint >>> 8) & 0xf]) .append(HEX_CHARS[(codePoint >>> 4) & 0xf])"
      },
      {
        "txt": ".append(HEX_CHARS[codePoint & 0xf]); }"
      }
    ]
  }
]
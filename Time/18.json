[
  {
    "id": 2947,
    "file_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
    "start-bug-line": 364,
    "end-bug-line": 364,
    "bug": "",
    "fix": "try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time.chrono; import java.util.ArrayList; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.joda.time.Chronology;"
      },
      {
        "txt": "import org.joda.time.DateTimeField; import org.joda.time.DateTimeUtils; import org.joda.time.DateTimeZone; import org.joda.time.DurationField; import org.joda.time.IllegalFieldValueException; import org.joda.time.Instant; import org.joda.time.ReadableInstant; import org.joda.time.ReadablePartial; import org.joda.time.field.BaseDateTimeField; import org.joda.time.field.DecoratedDurationField;"
      },
      {
        "txt": "import org.joda.time.format.DateTimeFormatter; import org.joda.time.format.ISODateTimeFormat; public final class GJChronology extends AssembledChronology { private static final long serialVersionUID = -2545574827706931671L; private static long convertByYear(long instant, Chronology from, Chronology to) { return to.getDateTimeMillis (from.year().get(instant), from.monthOfYear().get(instant), from.dayOfMonth().get(instant), from.millisOfDay().get(instant));"
      },
      {
        "txt": "} private static long convertByWeekyear(final long instant, Chronology from, Chronology to) { long newInstant; newInstant = to.weekyear().set(0, from.weekyear().get(instant)); newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant)); newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant)); newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant)); return newInstant; } static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L);"
      },
      {
        "txt": "private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>(); public static GJChronology getInstanceUTC() { return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4); } public static GJChronology getInstance() { return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4); } public static GJChronology getInstance(DateTimeZone zone) { return getInstance(zone, DEFAULT_CUTOVER, 4); }"
      },
      {
        "txt": "public static GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover) { return getInstance(zone, gregorianCutover, 4); } public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone);"
      },
      {
        "txt": "Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER; } else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2);"
      },
      {
        "txt": "cCache.put(zone, chronos); } else { for (int i=chronos.size(); --i>=0; ) { chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } }"
      },
      {
        "txt": "if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek), GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology,"
      },
      {
        "txt": "chrono.iGregorianChronology, chrono.iCutoverInstant); } chronos.add(chrono); return chrono; } public static GJChronology getInstance( DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek) {"
      },
      {
        "txt": "Instant cutoverInstant; if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) { cutoverInstant = null; } else { cutoverInstant = new Instant(gregorianCutover); } return getInstance(zone, cutoverInstant, minDaysInFirstWeek); } private JulianChronology iJulianChronology; private GregorianChronology iGregorianChronology;"
      },
      {
        "txt": "private Instant iCutoverInstant; private long iCutoverMillis; private long iGapDuration; private GJChronology(JulianChronology julian, GregorianChronology gregorian, Instant cutoverInstant) { super(null, new Object[] {julian, gregorian, cutoverInstant}); } private GJChronology(Chronology base, JulianChronology julian,"
      },
      {
        "txt": "GregorianChronology gregorian, Instant cutoverInstant) { super(base, new Object[] {julian, gregorian, cutoverInstant}); } private Object readResolve() { return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek()); } public DateTimeZone getZone() { Chronology base; if ((base = getBase()) != null) {"
      },
      {
        "txt": "return base.getZone(); } return DateTimeZone.UTC; } public Chronology withUTC() { return withZone(DateTimeZone.UTC); } public Chronology withZone(DateTimeZone zone) { if (zone == null) { zone = DateTimeZone.getDefault();"
      },
      {
        "txt": "} if (zone == getZone()) { return this; } return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek()); } public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException {"
      },
      {
        "txt": "Chronology base; if ((base = getBase()) != null) { return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay); } long instant = iGregorianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, millisOfDay); if (instant < iCutoverMillis) { instant = iJulianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, millisOfDay); if (instant >= iCutoverMillis) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Specified date does not exist\"); } } return instant; } public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException {"
      },
      {
        "txt": "if ((base = getBase()) != null) { return base.getDateTimeMillis (year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); } long instant; <extra_id_0> (year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); if (instant < iCutoverMillis) { instant = iJulianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);"
      },
      {
        "txt": "(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); if (instant >= iCutoverMillis) { throw new IllegalArgumentException(\"Specified date does not exist\"); } } return instant; } public Instant getGregorianCutover() { return iCutoverInstant;"
      },
      {
        "txt": "} public int getMinimumDaysInFirstWeek() { return iGregorianChronology.getMinimumDaysInFirstWeek(); } public boolean equals(Object obj) { return super.equals(obj); } public int hashCode() { return \"GJ\".hashCode() * 11 + iJulianChronology.hashCode() + iGregorianChronology.hashCode() + iCutoverInstant.hashCode();"
      },
      {
        "txt": "} public String toString() { StringBuffer sb = new StringBuffer(60); sb.append(\"GJChronology\"); sb.append('['); sb.append(getZone().getID()); if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) { sb.append(\",cutover=\"); DateTimeFormatter printer; if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) {"
      },
      {
        "txt": "printer = ISODateTimeFormat.date(); } else { printer = ISODateTimeFormat.dateTime(); } printer.withChronology(withUTC()).printTo(sb, iCutoverMillis); } if (getMinimumDaysInFirstWeek() != 4) { sb.append(\",mdfw=\"); sb.append(getMinimumDaysInFirstWeek()); }"
      },
      {
        "txt": "sb.append(']'); return sb.toString(); } protected void assemble(Fields fields) { Object[] params = (Object[])getParam(); JulianChronology julian = (JulianChronology)params[0]; GregorianChronology gregorian = (GregorianChronology)params[1]; Instant cutoverInstant = (Instant)params[2]; iCutoverMillis = cutoverInstant.getMillis(); iJulianChronology = julian;"
      },
      {
        "txt": "iGregorianChronology = gregorian; iCutoverInstant = cutoverInstant; if (getBase() != null) { return; } if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) { throw new IllegalArgumentException(); } iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis); fields.copyFieldsFrom(gregorian);"
      },
      {
        "txt": "if (gregorian.millisOfDay().get(iCutoverMillis) == 0) { fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis); fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis); fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis); fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis); fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis); fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis); fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis); fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis); fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);"
      },
      {
        "txt": "fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis); fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis); } { fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis); } { long cutover = gregorian.year().roundCeiling(iCutoverMillis); fields.dayOfYear = new CutoverField("
      },
      {
        "txt": "julian.dayOfYear(), fields.dayOfYear, cutover); } { long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis); fields.weekOfWeekyear = new CutoverField( julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true); } { fields.year = new ImpreciseCutoverField( julian.year(), fields.year, iCutoverMillis);"
      },
      {
        "txt": "fields.years = fields.year.getDurationField(); fields.yearOfEra = new ImpreciseCutoverField( julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis); fields.yearOfCentury = new ImpreciseCutoverField( julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis); fields.centuryOfEra = new ImpreciseCutoverField( julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis); fields.centuries = fields.centuryOfEra.getDurationField(); fields.monthOfYear = new ImpreciseCutoverField( julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);"
      },
      {
        "txt": "fields.months = fields.monthOfYear.getDurationField(); fields.weekyear = new ImpreciseCutoverField( julian.weekyear(), fields.weekyear, null, iCutoverMillis, true); fields.weekyearOfCentury = new ImpreciseCutoverField( julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis); fields.weekyears = fields.weekyear.getDurationField(); } { CutoverField cf = new CutoverField (julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);"
      },
      {
        "txt": "cf.iRangeDurationField = fields.months; fields.dayOfMonth = cf; } } long julianToGregorianByYear(long instant) { return convertByYear(instant, iJulianChronology, iGregorianChronology); } long gregorianToJulianByYear(long instant) { return convertByYear(instant, iGregorianChronology, iJulianChronology); }"
      },
      {
        "txt": "long julianToGregorianByWeekyear(long instant) { return convertByWeekyear(instant, iJulianChronology, iGregorianChronology); } long gregorianToJulianByWeekyear(long instant) { return convertByWeekyear(instant, iGregorianChronology, iJulianChronology); } private class CutoverField extends BaseDateTimeField { private static final long serialVersionUID = 3528501219481026402L; final DateTimeField iJulianField; final DateTimeField iGregorianField;"
      },
      {
        "txt": "final long iCutover; final boolean iConvertByWeekyear; protected DurationField iDurationField; protected DurationField iRangeDurationField; CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { this(julianField, gregorianField, cutoverMillis, false); } CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis, boolean convertByWeekyear) { super(gregorianField.getType());"
      },
      {
        "txt": "iJulianField = julianField; iGregorianField = gregorianField; iCutover = cutoverMillis; iConvertByWeekyear = convertByWeekyear; iDurationField = gregorianField.getDurationField(); DurationField rangeField = gregorianField.getRangeDurationField(); if (rangeField == null) { rangeField = julianField.getRangeDurationField(); } iRangeDurationField = rangeField;"
      },
      {
        "txt": "} public boolean isLenient() { return false; } public int get(long instant) { if (instant >= iCutover) { return iGregorianField.get(instant); } else { return iJulianField.get(instant); }"
      },
      {
        "txt": "} public String getAsText(long instant, Locale locale) { if (instant >= iCutover) { return iGregorianField.getAsText(instant, locale); } else { return iJulianField.getAsText(instant, locale); } } public String getAsText(int fieldValue, Locale locale) { return iGregorianField.getAsText(fieldValue, locale);"
      },
      {
        "txt": "} public String getAsShortText(long instant, Locale locale) { if (instant >= iCutover) { return iGregorianField.getAsShortText(instant, locale); } else { return iJulianField.getAsShortText(instant, locale); } } public String getAsShortText(int fieldValue, Locale locale) { return iGregorianField.getAsShortText(fieldValue, locale);"
      },
      {
        "txt": "} public long add(long instant, int value) { return iGregorianField.add(instant, value); } public long add(long instant, long value) { return iGregorianField.add(instant, value); } public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values;"
      },
      {
        "txt": "} if (DateTimeUtils.isContiguous(partial)) { long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]); } instant = add(instant, valueToAdd); return GJChronology.this.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd);"
      },
      {
        "txt": "} } public int getDifference(long minuendInstant, long subtrahendInstant) { return iGregorianField.getDifference(minuendInstant, subtrahendInstant); } public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } public long set(long instant, int value) { if (instant >= iCutover) {"
      },
      {
        "txt": "instant = iGregorianField.set(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } if (get(instant) != value) { throw new IllegalFieldValueException (iGregorianField.getType(), Integer.valueOf(value), null, null); } }"
      },
      {
        "txt": "} else { instant = iJulianField.set(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } if (get(instant) != value) { throw new IllegalFieldValueException (iJulianField.getType(), Integer.valueOf(value), null, null); }"
      },
      {
        "txt": "} } return instant; } public long set(long instant, String text, Locale locale) { if (instant >= iCutover) { instant = iGregorianField.set(instant, text, locale); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant);"
      },
      {
        "txt": "} } } else { instant = iJulianField.set(instant, text, locale); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } }"
      },
      {
        "txt": "return instant; } public DurationField getDurationField() { return iDurationField; } public DurationField getRangeDurationField() { return iRangeDurationField; } public boolean isLeap(long instant) { if (instant >= iCutover) {"
      },
      {
        "txt": "return iGregorianField.isLeap(instant); } else { return iJulianField.isLeap(instant); } } public int getLeapAmount(long instant) { if (instant >= iCutover) { return iGregorianField.getLeapAmount(instant); } else { return iJulianField.getLeapAmount(instant);"
      },
      {
        "txt": "} } public DurationField getLeapDurationField() { return iGregorianField.getLeapDurationField(); } public int getMinimumValue() { return iJulianField.getMinimumValue(); } public int getMinimumValue(ReadablePartial partial) { return iJulianField.getMinimumValue(partial);"
      },
      {
        "txt": "} public int getMinimumValue(ReadablePartial partial, int[] values) { return iJulianField.getMinimumValue(partial, values); } public int getMinimumValue(long instant) { if (instant < iCutover) { return iJulianField.getMinimumValue(instant); } int min = iGregorianField.getMinimumValue(instant); instant = iGregorianField.set(instant, min);"
      },
      {
        "txt": "if (instant < iCutover) { min = iGregorianField.get(iCutover); } return min; } public int getMaximumValue() { return iGregorianField.getMaximumValue(); } public int getMaximumValue(long instant) { if (instant >= iCutover) {"
      },
      {
        "txt": "return iGregorianField.getMaximumValue(instant); } int max = iJulianField.getMaximumValue(instant); instant = iJulianField.set(instant, max); if (instant >= iCutover) { max = iJulianField.get(iJulianField.add(iCutover, -1)); } return max; } public int getMaximumValue(ReadablePartial partial) {"
      },
      {
        "txt": "long instant = GJChronology.getInstanceUTC().set(partial, 0L); return getMaximumValue(instant); } public int getMaximumValue(ReadablePartial partial, int[] values) { Chronology chrono = GJChronology.getInstanceUTC(); long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { DateTimeField field = partial.getFieldType(i).getField(chrono); if (values[i] <= field.getMaximumValue(instant)) { instant = field.set(instant, values[i]);"
      },
      {
        "txt": "} } return getMaximumValue(instant); } public long roundFloor(long instant) { if (instant >= iCutover) { instant = iGregorianField.roundFloor(instant); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant);"
      },
      {
        "txt": "} } } else { instant = iJulianField.roundFloor(instant); } return instant; } public long roundCeiling(long instant) { if (instant >= iCutover) { instant = iGregorianField.roundCeiling(instant);"
      },
      {
        "txt": "} else { instant = iJulianField.roundCeiling(instant); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; }"
      },
      {
        "txt": "public int getMaximumTextLength(Locale locale) { return Math.max(iJulianField.getMaximumTextLength(locale), iGregorianField.getMaximumTextLength(locale)); } public int getMaximumShortTextLength(Locale locale) { return Math.max(iJulianField.getMaximumShortTextLength(locale), iGregorianField.getMaximumShortTextLength(locale)); } protected long julianToGregorian(long instant) { if (iConvertByWeekyear) {"
      },
      {
        "txt": "return julianToGregorianByWeekyear(instant); } else { return julianToGregorianByYear(instant); } } protected long gregorianToJulian(long instant) { if (iConvertByWeekyear) { return gregorianToJulianByWeekyear(instant); } else { return gregorianToJulianByYear(instant);"
      },
      {
        "txt": "} } } private final class ImpreciseCutoverField extends CutoverField { private static final long serialVersionUID = 3410248757173576441L; ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { this(julianField, gregorianField, null, cutoverMillis, false); } ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis)"
      },
      {
        "txt": "{ this(julianField, gregorianField, durationField, cutoverMillis, false); } ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis, boolean convertByWeekyear) { super(julianField, gregorianField, cutoverMillis, convertByWeekyear); if (durationField == null) { durationField = new LinkedDurationField(iDurationField, this);"
      },
      {
        "txt": "} iDurationField = durationField; } public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); }"
      },
      {
        "txt": "} } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant;"
      },
      {
        "txt": "} public long add(long instant, long value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else {"
      },
      {
        "txt": "instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; } public int getDifference(long minuendInstant, long subtrahendInstant) {"
      },
      {
        "txt": "if (minuendInstant >= iCutover) { if (subtrahendInstant >= iCutover) { return iGregorianField.getDifference(minuendInstant, subtrahendInstant); } minuendInstant = gregorianToJulian(minuendInstant); return iJulianField.getDifference(minuendInstant, subtrahendInstant); } else { if (subtrahendInstant < iCutover) { return iJulianField.getDifference(minuendInstant, subtrahendInstant); }"
      },
      {
        "txt": "minuendInstant = julianToGregorian(minuendInstant); return iGregorianField.getDifference(minuendInstant, subtrahendInstant); } } public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { if (minuendInstant >= iCutover) { if (subtrahendInstant >= iCutover) { return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } minuendInstant = gregorianToJulian(minuendInstant);"
      },
      {
        "txt": "return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } else { if (subtrahendInstant < iCutover) { return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } minuendInstant = julianToGregorian(minuendInstant); return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } } public int getMinimumValue(long instant) {"
      },
      {
        "txt": "if (instant >= iCutover) { return iGregorianField.getMinimumValue(instant); } else { return iJulianField.getMinimumValue(instant); } } public int getMaximumValue(long instant) { if (instant >= iCutover) { return iGregorianField.getMaximumValue(instant); } else {"
      },
      {
        "txt": "return iJulianField.getMaximumValue(instant); } } } private static class LinkedDurationField extends DecoratedDurationField { private static final long serialVersionUID = 4097975388007713084L; private final ImpreciseCutoverField iField; LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) { super(durationField, durationField.getType()); iField = dateTimeField;"
      },
      {
        "txt": "} public long add(long instant, int value) { return iField.add(instant, value); } public long add(long instant, long value) { return iField.add(instant, value); } public int getDifference(long minuendInstant, long subtrahendInstant) { return iField.getDifference(minuendInstant, subtrahendInstant); }"
      },
      {
        "txt": "public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } }"
      }
    ]
  },
  {
    "id": 2948,
    "file_path": "src/main/java/org/joda/time/chrono/GJChronology.java",
    "start-bug-line": 367,
    "end-bug-line": 367,
    "bug": "",
    "fix": "} catch (IllegalFieldValueException ex) { if (monthOfYear != 2 || dayOfMonth != 29) { throw ex; } instant = iGregorianChronology.getDateTimeMillis (year, monthOfYear, 28, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); if (instant >= iCutoverMillis) { throw ex; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time.chrono; import java.util.ArrayList; import java.util.HashMap; import java.util.Locale; import java.util.Map; import org.joda.time.Chronology; import org.joda.time.DateTimeField; import org.joda.time.DateTimeUtils; import org.joda.time.DateTimeZone;"
      },
      {
        "txt": "import org.joda.time.DurationField; import org.joda.time.IllegalFieldValueException; import org.joda.time.Instant; import org.joda.time.ReadableInstant; import org.joda.time.ReadablePartial; import org.joda.time.field.BaseDateTimeField; import org.joda.time.field.DecoratedDurationField; import org.joda.time.format.DateTimeFormatter; import org.joda.time.format.ISODateTimeFormat; public final class GJChronology extends AssembledChronology {"
      },
      {
        "txt": "private static final long serialVersionUID = -2545574827706931671L; private static long convertByYear(long instant, Chronology from, Chronology to) { return to.getDateTimeMillis (from.year().get(instant), from.monthOfYear().get(instant), from.dayOfMonth().get(instant), from.millisOfDay().get(instant)); } private static long convertByWeekyear(final long instant, Chronology from, Chronology to) { long newInstant;"
      },
      {
        "txt": "newInstant = to.weekyear().set(0, from.weekyear().get(instant)); newInstant = to.weekOfWeekyear().set(newInstant, from.weekOfWeekyear().get(instant)); newInstant = to.dayOfWeek().set(newInstant, from.dayOfWeek().get(instant)); newInstant = to.millisOfDay().set(newInstant, from.millisOfDay().get(instant)); return newInstant; } static final Instant DEFAULT_CUTOVER = new Instant(-12219292800000L); private static final Map<DateTimeZone, ArrayList<GJChronology>> cCache = new HashMap<DateTimeZone, ArrayList<GJChronology>>(); public static GJChronology getInstanceUTC() { return getInstance(DateTimeZone.UTC, DEFAULT_CUTOVER, 4);"
      },
      {
        "txt": "} public static GJChronology getInstance() { return getInstance(DateTimeZone.getDefault(), DEFAULT_CUTOVER, 4); } public static GJChronology getInstance(DateTimeZone zone) { return getInstance(zone, DEFAULT_CUTOVER, 4); } public static GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover) {"
      },
      {
        "txt": "return getInstance(zone, gregorianCutover, 4); } public static synchronized GJChronology getInstance( DateTimeZone zone, ReadableInstant gregorianCutover, int minDaysInFirstWeek) { zone = DateTimeUtils.getZone(zone); Instant cutoverInstant; if (gregorianCutover == null) { cutoverInstant = DEFAULT_CUTOVER;"
      },
      {
        "txt": "} else { cutoverInstant = gregorianCutover.toInstant(); } GJChronology chrono; ArrayList<GJChronology> chronos = cCache.get(zone); if (chronos == null) { chronos = new ArrayList<GJChronology>(2); cCache.put(zone, chronos); } else { for (int i=chronos.size(); --i>=0; ) {"
      },
      {
        "txt": "chrono = chronos.get(i); if (minDaysInFirstWeek == chrono.getMinimumDaysInFirstWeek() && cutoverInstant.equals(chrono.getGregorianCutover())) { return chrono; } } } if (zone == DateTimeZone.UTC) { chrono = new GJChronology (JulianChronology.getInstance(zone, minDaysInFirstWeek),"
      },
      {
        "txt": "GregorianChronology.getInstance(zone, minDaysInFirstWeek), cutoverInstant); } else { chrono = getInstance(DateTimeZone.UTC, cutoverInstant, minDaysInFirstWeek); chrono = new GJChronology (ZonedChronology.getInstance(chrono, zone), chrono.iJulianChronology, chrono.iGregorianChronology, chrono.iCutoverInstant); }"
      },
      {
        "txt": "chronos.add(chrono); return chrono; } public static GJChronology getInstance( DateTimeZone zone, long gregorianCutover, int minDaysInFirstWeek) { Instant cutoverInstant; if (gregorianCutover == DEFAULT_CUTOVER.getMillis()) { cutoverInstant = null;"
      },
      {
        "txt": "} else { cutoverInstant = new Instant(gregorianCutover); } return getInstance(zone, cutoverInstant, minDaysInFirstWeek); } private JulianChronology iJulianChronology; private GregorianChronology iGregorianChronology; private Instant iCutoverInstant; private long iCutoverMillis; private long iGapDuration;"
      },
      {
        "txt": "private GJChronology(JulianChronology julian, GregorianChronology gregorian, Instant cutoverInstant) { super(null, new Object[] {julian, gregorian, cutoverInstant}); } private GJChronology(Chronology base, JulianChronology julian, GregorianChronology gregorian, Instant cutoverInstant) { super(base, new Object[] {julian, gregorian, cutoverInstant});"
      },
      {
        "txt": "} private Object readResolve() { return getInstance(getZone(), iCutoverInstant, getMinimumDaysInFirstWeek()); } public DateTimeZone getZone() { Chronology base; if ((base = getBase()) != null) { return base.getZone(); } return DateTimeZone.UTC;"
      },
      {
        "txt": "} public Chronology withUTC() { return withZone(DateTimeZone.UTC); } public Chronology withZone(DateTimeZone zone) { if (zone == null) { zone = DateTimeZone.getDefault(); } if (zone == getZone()) { return this;"
      },
      {
        "txt": "} return getInstance(zone, iCutoverInstant, getMinimumDaysInFirstWeek()); } public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int millisOfDay) throws IllegalArgumentException { Chronology base; if ((base = getBase()) != null) { return base.getDateTimeMillis(year, monthOfYear, dayOfMonth, millisOfDay);"
      },
      {
        "txt": "} long instant = iGregorianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, millisOfDay); if (instant < iCutoverMillis) { instant = iJulianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, millisOfDay); if (instant >= iCutoverMillis) { throw new IllegalArgumentException(\"Specified date does not exist\"); } }"
      },
      {
        "txt": "return instant; } public long getDateTimeMillis(int year, int monthOfYear, int dayOfMonth, int hourOfDay, int minuteOfHour, int secondOfMinute, int millisOfSecond) throws IllegalArgumentException { Chronology base; if ((base = getBase()) != null) { return base.getDateTimeMillis"
      },
      {
        "txt": "hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); } long instant; instant = iGregorianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); <extra_id_0> instant = iJulianChronology.getDateTimeMillis (year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond); if (instant >= iCutoverMillis) { throw new IllegalArgumentException(\"Specified date does not exist\"); }"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Specified date does not exist\"); } } return instant; } public Instant getGregorianCutover() { return iCutoverInstant; } public int getMinimumDaysInFirstWeek() { return iGregorianChronology.getMinimumDaysInFirstWeek();"
      },
      {
        "txt": "} public boolean equals(Object obj) { return super.equals(obj); } public int hashCode() { return \"GJ\".hashCode() * 11 + iJulianChronology.hashCode() + iGregorianChronology.hashCode() + iCutoverInstant.hashCode(); } public String toString() { StringBuffer sb = new StringBuffer(60);"
      },
      {
        "txt": "sb.append(\"GJChronology\"); sb.append('['); sb.append(getZone().getID()); if (iCutoverMillis != DEFAULT_CUTOVER.getMillis()) { sb.append(\",cutover=\"); DateTimeFormatter printer; if (withUTC().dayOfYear().remainder(iCutoverMillis) == 0) { printer = ISODateTimeFormat.date(); } else { printer = ISODateTimeFormat.dateTime();"
      },
      {
        "txt": "} printer.withChronology(withUTC()).printTo(sb, iCutoverMillis); } if (getMinimumDaysInFirstWeek() != 4) { sb.append(\",mdfw=\"); sb.append(getMinimumDaysInFirstWeek()); } sb.append(']'); return sb.toString(); }"
      },
      {
        "txt": "protected void assemble(Fields fields) { Object[] params = (Object[])getParam(); JulianChronology julian = (JulianChronology)params[0]; GregorianChronology gregorian = (GregorianChronology)params[1]; Instant cutoverInstant = (Instant)params[2]; iCutoverMillis = cutoverInstant.getMillis(); iJulianChronology = julian; iGregorianChronology = gregorian; iCutoverInstant = cutoverInstant; if (getBase() != null) {"
      },
      {
        "txt": "return; } if (julian.getMinimumDaysInFirstWeek() != gregorian.getMinimumDaysInFirstWeek()) { throw new IllegalArgumentException(); } iGapDuration = iCutoverMillis - julianToGregorianByYear(iCutoverMillis); fields.copyFieldsFrom(gregorian); if (gregorian.millisOfDay().get(iCutoverMillis) == 0) { fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis); fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);"
      },
      {
        "txt": "fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis); fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis); fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis); fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis); fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis); fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis); fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis); fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(), fields.clockhourOfHalfday, iCutoverMillis); fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);"
      },
      {
        "txt": "} { fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis); } { long cutover = gregorian.year().roundCeiling(iCutoverMillis); fields.dayOfYear = new CutoverField( julian.dayOfYear(), fields.dayOfYear, cutover); } {"
      },
      {
        "txt": "long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis); fields.weekOfWeekyear = new CutoverField( julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true); } { fields.year = new ImpreciseCutoverField( julian.year(), fields.year, iCutoverMillis); fields.years = fields.year.getDurationField(); fields.yearOfEra = new ImpreciseCutoverField( julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);"
      },
      {
        "txt": "fields.yearOfCentury = new ImpreciseCutoverField( julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis); fields.centuryOfEra = new ImpreciseCutoverField( julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis); fields.centuries = fields.centuryOfEra.getDurationField(); fields.monthOfYear = new ImpreciseCutoverField( julian.monthOfYear(), fields.monthOfYear, iCutoverMillis); fields.months = fields.monthOfYear.getDurationField(); fields.weekyear = new ImpreciseCutoverField( julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);"
      },
      {
        "txt": "fields.weekyearOfCentury = new ImpreciseCutoverField( julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis); fields.weekyears = fields.weekyear.getDurationField(); } { CutoverField cf = new CutoverField (julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis); cf.iRangeDurationField = fields.months; fields.dayOfMonth = cf; }"
      },
      {
        "txt": "} long julianToGregorianByYear(long instant) { return convertByYear(instant, iJulianChronology, iGregorianChronology); } long gregorianToJulianByYear(long instant) { return convertByYear(instant, iGregorianChronology, iJulianChronology); } long julianToGregorianByWeekyear(long instant) { return convertByWeekyear(instant, iJulianChronology, iGregorianChronology); }"
      },
      {
        "txt": "long gregorianToJulianByWeekyear(long instant) { return convertByWeekyear(instant, iGregorianChronology, iJulianChronology); } private class CutoverField extends BaseDateTimeField { private static final long serialVersionUID = 3528501219481026402L; final DateTimeField iJulianField; final DateTimeField iGregorianField; final long iCutover; final boolean iConvertByWeekyear; protected DurationField iDurationField;"
      },
      {
        "txt": "protected DurationField iRangeDurationField; CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { this(julianField, gregorianField, cutoverMillis, false); } CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis, boolean convertByWeekyear) { super(gregorianField.getType()); iJulianField = julianField; iGregorianField = gregorianField; iCutover = cutoverMillis;"
      },
      {
        "txt": "iConvertByWeekyear = convertByWeekyear; iDurationField = gregorianField.getDurationField(); DurationField rangeField = gregorianField.getRangeDurationField(); if (rangeField == null) { rangeField = julianField.getRangeDurationField(); } iRangeDurationField = rangeField; } public boolean isLenient() { return false;"
      },
      {
        "txt": "} public int get(long instant) { if (instant >= iCutover) { return iGregorianField.get(instant); } else { return iJulianField.get(instant); } } public String getAsText(long instant, Locale locale) { if (instant >= iCutover) {"
      },
      {
        "txt": "return iGregorianField.getAsText(instant, locale); } else { return iJulianField.getAsText(instant, locale); } } public String getAsText(int fieldValue, Locale locale) { return iGregorianField.getAsText(fieldValue, locale); } public String getAsShortText(long instant, Locale locale) { if (instant >= iCutover) {"
      },
      {
        "txt": "return iGregorianField.getAsShortText(instant, locale); } else { return iJulianField.getAsShortText(instant, locale); } } public String getAsShortText(int fieldValue, Locale locale) { return iGregorianField.getAsShortText(fieldValue, locale); } public long add(long instant, int value) { return iGregorianField.add(instant, value);"
      },
      {
        "txt": "} public long add(long instant, long value) { return iGregorianField.add(instant, value); } public int[] add(ReadablePartial partial, int fieldIndex, int[] values, int valueToAdd) { if (valueToAdd == 0) { return values; } if (DateTimeUtils.isContiguous(partial)) { long instant = 0L;"
      },
      {
        "txt": "for (int i = 0, isize = partial.size(); i < isize; i++) { instant = partial.getFieldType(i).getField(GJChronology.this).set(instant, values[i]); } instant = add(instant, valueToAdd); return GJChronology.this.get(partial, instant); } else { return super.add(partial, fieldIndex, values, valueToAdd); } } public int getDifference(long minuendInstant, long subtrahendInstant) {"
      },
      {
        "txt": "return iGregorianField.getDifference(minuendInstant, subtrahendInstant); } public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } public long set(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.set(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) {"
      },
      {
        "txt": "instant = gregorianToJulian(instant); } if (get(instant) != value) { throw new IllegalFieldValueException (iGregorianField.getType(), Integer.valueOf(value), null, null); } } } else { instant = iJulianField.set(instant, value); if (instant >= iCutover) {"
      },
      {
        "txt": "if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } if (get(instant) != value) { throw new IllegalFieldValueException (iJulianField.getType(), Integer.valueOf(value), null, null); } } } return instant;"
      },
      {
        "txt": "} public long set(long instant, String text, Locale locale) { if (instant >= iCutover) { instant = iGregorianField.set(instant, text, locale); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else {"
      },
      {
        "txt": "instant = iJulianField.set(instant, text, locale); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; } public DurationField getDurationField() {"
      },
      {
        "txt": "return iDurationField; } public DurationField getRangeDurationField() { return iRangeDurationField; } public boolean isLeap(long instant) { if (instant >= iCutover) { return iGregorianField.isLeap(instant); } else { return iJulianField.isLeap(instant);"
      },
      {
        "txt": "} } public int getLeapAmount(long instant) { if (instant >= iCutover) { return iGregorianField.getLeapAmount(instant); } else { return iJulianField.getLeapAmount(instant); } } public DurationField getLeapDurationField() {"
      },
      {
        "txt": "return iGregorianField.getLeapDurationField(); } public int getMinimumValue() { return iJulianField.getMinimumValue(); } public int getMinimumValue(ReadablePartial partial) { return iJulianField.getMinimumValue(partial); } public int getMinimumValue(ReadablePartial partial, int[] values) { return iJulianField.getMinimumValue(partial, values);"
      },
      {
        "txt": "} public int getMinimumValue(long instant) { if (instant < iCutover) { return iJulianField.getMinimumValue(instant); } int min = iGregorianField.getMinimumValue(instant); instant = iGregorianField.set(instant, min); if (instant < iCutover) { min = iGregorianField.get(iCutover); }"
      },
      {
        "txt": "return min; } public int getMaximumValue() { return iGregorianField.getMaximumValue(); } public int getMaximumValue(long instant) { if (instant >= iCutover) { return iGregorianField.getMaximumValue(instant); } int max = iJulianField.getMaximumValue(instant);"
      },
      {
        "txt": "instant = iJulianField.set(instant, max); if (instant >= iCutover) { max = iJulianField.get(iJulianField.add(iCutover, -1)); } return max; } public int getMaximumValue(ReadablePartial partial) { long instant = GJChronology.getInstanceUTC().set(partial, 0L); return getMaximumValue(instant); }"
      },
      {
        "txt": "public int getMaximumValue(ReadablePartial partial, int[] values) { Chronology chrono = GJChronology.getInstanceUTC(); long instant = 0L; for (int i = 0, isize = partial.size(); i < isize; i++) { DateTimeField field = partial.getFieldType(i).getField(chrono); if (values[i] <= field.getMaximumValue(instant)) { instant = field.set(instant, values[i]); } } return getMaximumValue(instant);"
      },
      {
        "txt": "} public long roundFloor(long instant) { if (instant >= iCutover) { instant = iGregorianField.roundFloor(instant); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else {"
      },
      {
        "txt": "instant = iJulianField.roundFloor(instant); } return instant; } public long roundCeiling(long instant) { if (instant >= iCutover) { instant = iGregorianField.roundCeiling(instant); } else { instant = iJulianField.roundCeiling(instant); if (instant >= iCutover) {"
      },
      {
        "txt": "if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; } public int getMaximumTextLength(Locale locale) { return Math.max(iJulianField.getMaximumTextLength(locale), iGregorianField.getMaximumTextLength(locale));"
      },
      {
        "txt": "} public int getMaximumShortTextLength(Locale locale) { return Math.max(iJulianField.getMaximumShortTextLength(locale), iGregorianField.getMaximumShortTextLength(locale)); } protected long julianToGregorian(long instant) { if (iConvertByWeekyear) { return julianToGregorianByWeekyear(instant); } else { return julianToGregorianByYear(instant);"
      },
      {
        "txt": "} } protected long gregorianToJulian(long instant) { if (iConvertByWeekyear) { return gregorianToJulianByWeekyear(instant); } else { return gregorianToJulianByYear(instant); } } }"
      },
      {
        "txt": "private final class ImpreciseCutoverField extends CutoverField { private static final long serialVersionUID = 3410248757173576441L; ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) { this(julianField, gregorianField, null, cutoverMillis, false); } ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis) { this(julianField, gregorianField, durationField, cutoverMillis, false); }"
      },
      {
        "txt": "ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, DurationField durationField, long cutoverMillis, boolean convertByWeekyear) { super(julianField, gregorianField, cutoverMillis, convertByWeekyear); if (durationField == null) { durationField = new LinkedDurationField(iDurationField, this); } iDurationField = durationField; }"
      },
      {
        "txt": "public long add(long instant, int value) { if (instant >= iCutover) { instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value);"
      },
      {
        "txt": "if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) { instant = julianToGregorian(instant); } } } return instant; } public long add(long instant, long value) { if (instant >= iCutover) {"
      },
      {
        "txt": "instant = iGregorianField.add(instant, value); if (instant < iCutover) { if (instant + iGapDuration < iCutover) { instant = gregorianToJulian(instant); } } } else { instant = iJulianField.add(instant, value); if (instant >= iCutover) { if (instant - iGapDuration >= iCutover) {"
      },
      {
        "txt": "instant = julianToGregorian(instant); } } } return instant; } public int getDifference(long minuendInstant, long subtrahendInstant) { if (minuendInstant >= iCutover) { if (subtrahendInstant >= iCutover) { return iGregorianField.getDifference(minuendInstant, subtrahendInstant);"
      },
      {
        "txt": "} minuendInstant = gregorianToJulian(minuendInstant); return iJulianField.getDifference(minuendInstant, subtrahendInstant); } else { if (subtrahendInstant < iCutover) { return iJulianField.getDifference(minuendInstant, subtrahendInstant); } minuendInstant = julianToGregorian(minuendInstant); return iGregorianField.getDifference(minuendInstant, subtrahendInstant); }"
      },
      {
        "txt": "} public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { if (minuendInstant >= iCutover) { if (subtrahendInstant >= iCutover) { return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } minuendInstant = gregorianToJulian(minuendInstant); return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } else { if (subtrahendInstant < iCutover) {"
      },
      {
        "txt": "return iJulianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } minuendInstant = julianToGregorian(minuendInstant); return iGregorianField.getDifferenceAsLong(minuendInstant, subtrahendInstant); } } public int getMinimumValue(long instant) { if (instant >= iCutover) { return iGregorianField.getMinimumValue(instant); } else {"
      },
      {
        "txt": "return iJulianField.getMinimumValue(instant); } } public int getMaximumValue(long instant) { if (instant >= iCutover) { return iGregorianField.getMaximumValue(instant); } else { return iJulianField.getMaximumValue(instant); } }"
      },
      {
        "txt": "} private static class LinkedDurationField extends DecoratedDurationField { private static final long serialVersionUID = 4097975388007713084L; private final ImpreciseCutoverField iField; LinkedDurationField(DurationField durationField, ImpreciseCutoverField dateTimeField) { super(durationField, durationField.getType()); iField = dateTimeField; } public long add(long instant, int value) { return iField.add(instant, value);"
      },
      {
        "txt": "} public long add(long instant, long value) { return iField.add(instant, value); } public int getDifference(long minuendInstant, long subtrahendInstant) { return iField.getDifference(minuendInstant, subtrahendInstant); } public long getDifferenceAsLong(long minuendInstant, long subtrahendInstant) { return iField.getDifferenceAsLong(minuendInstant, subtrahendInstant); }"
      }
    ]
  }
]
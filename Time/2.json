[
  {
    "id": 2884,
    "file_path": "src/main/java/org/joda/time/Partial.java",
    "start-bug-line": 218,
    "end-bug-line": 218,
    "bug": "if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {",
    "fix": "if (compare < 0) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time; import java.io.Serializable; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Locale; import org.joda.time.base.AbstractPartial; import org.joda.time.field.AbstractPartialFieldProperty;"
      },
      {
        "txt": "import org.joda.time.field.FieldUtils; import org.joda.time.format.DateTimeFormat; import org.joda.time.format.DateTimeFormatter; import org.joda.time.format.ISODateTimeFormat; public final class Partial extends AbstractPartial implements ReadablePartial, Serializable { private static final long serialVersionUID = 12324121189002L; private final Chronology iChronology; private final DateTimeFieldType[] iTypes;"
      },
      {
        "txt": "private final int[] iValues; private transient DateTimeFormatter[] iFormatter; public Partial() { this((Chronology) null); } public Partial(Chronology chrono) { super(); iChronology = DateTimeUtils.getChronology(chrono).withUTC(); iTypes = new DateTimeFieldType[0]; iValues = new int[0];"
      },
      {
        "txt": "} public Partial(DateTimeFieldType type, int value) { this(type, value, null); } public Partial(DateTimeFieldType type, int value, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (type == null) { throw new IllegalArgumentException(\"The field type must not be null\");"
      },
      {
        "txt": "} iTypes = new DateTimeFieldType[] {type}; iValues = new int[] {value}; chronology.validate(this, iValues); } public Partial(DateTimeFieldType[] types, int[] values) { this(types, values, null); } public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) { super();"
      },
      {
        "txt": "chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException(\"Types array must not be null\"); } if (values == null) { throw new IllegalArgumentException(\"Values array must not be null\"); } if (values.length != types.length) { throw new IllegalArgumentException(\"Values array must be the same length as the types array\");"
      },
      {
        "txt": "} if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException(\"Types array must not contain null: index \" + i); }"
      },
      {
        "txt": "DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); <extra_id_0> throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \" + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +"
      },
      {
        "txt": "if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \" + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \" + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology);"
      },
      {
        "txt": "DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \" + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \" + loopType.getName()); } }"
      },
      {
        "txt": "} } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone(); } public Partial(ReadablePartial partial) { super();"
      },
      {
        "txt": "if (partial == null) { throw new IllegalArgumentException(\"The partial must not be null\"); } iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC(); iTypes = new DateTimeFieldType[partial.size()]; iValues = new int[partial.size()]; for (int i = 0; i < partial.size(); i++) { iTypes[i] = partial.getFieldType(i); iValues[i] = partial.getValue(i); }"
      },
      {
        "txt": "} Partial(Partial partial, int[] values) { super(); iChronology = partial.iChronology; iTypes = partial.iTypes; iValues = values; } Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) { super(); iChronology = chronology;"
      },
      {
        "txt": "iTypes = types; iValues = values; } public int size() { return iTypes.length; } public Chronology getChronology() { return iChronology; } protected DateTimeField getField(int index, Chronology chrono) {"
      },
      {
        "txt": "return iTypes[index].getField(chrono); } public DateTimeFieldType getFieldType(int index) { return iTypes[index]; } public DateTimeFieldType[] getFieldTypes() { return (DateTimeFieldType[]) iTypes.clone(); } public int getValue(int index) { return iValues[index];"
      },
      {
        "txt": "} public int[] getValues() { return (int[]) iValues.clone(); } public Partial withChronologyRetainFields(Chronology newChronology) { newChronology = DateTimeUtils.getChronology(newChronology); newChronology = newChronology.withUTC(); if (newChronology == getChronology()) { return this; } else {"
      },
      {
        "txt": "Partial newPartial = new Partial(newChronology, iTypes, iValues); newChronology.validate(newPartial, iValues); return newPartial; } } public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) { throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType);"
      },
      {
        "txt": "if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) { DateTimeFieldType loopType = iTypes[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) {"
      },
      {
        "txt": "int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } }"
      },
      {
        "txt": "} } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1); Partial newPartial = new Partial(newTypes, newValues, iChronology);"
      },
      {
        "txt": "iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); }"
      },
      {
        "txt": "public Partial without(DateTimeFieldType fieldType) { int index = indexOf(fieldType); if (index != -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1]; int[] newValues = new int[size() - 1]; System.arraycopy(iTypes, 0, newTypes, 0, index); System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index); System.arraycopy(iValues, 0, newValues, 0, index); System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index); Partial newPartial = new Partial(iChronology, newTypes, newValues);"
      },
      {
        "txt": "iChronology.validate(newPartial, newValues); return newPartial; } return this; } public Partial withField(DateTimeFieldType fieldType, int value) { int index = indexOfSupported(fieldType); if (value == getValue(index)) { return this; }"
      },
      {
        "txt": "int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); } public Partial withFieldAdded(DurationFieldType fieldType, int amount) { int index = indexOfSupported(fieldType); if (amount == 0) { return this; } int[] newValues = getValues();"
      },
      {
        "txt": "newValues = getField(index).add(this, index, newValues, amount); return new Partial(this, newValues); } public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) { int index = indexOfSupported(fieldType); if (amount == 0) { return this; } int[] newValues = getValues(); newValues = getField(index).addWrapPartial(this, index, newValues, amount);"
      },
      {
        "txt": "return new Partial(this, newValues); } public Partial withPeriodAdded(ReadablePeriod period, int scalar) { if (period == null || scalar == 0) { return this; } int[] newValues = getValues(); for (int i = 0; i < period.size(); i++) { DurationFieldType fieldType = period.getFieldType(i); int index = indexOf(fieldType);"
      },
      {
        "txt": "if (index >= 0) { newValues = getField(index).add(this, index, newValues, FieldUtils.safeMultiply(period.getValue(i), scalar)); } } return new Partial(this, newValues); } public Partial plus(ReadablePeriod period) { return withPeriodAdded(period, 1); }"
      },
      {
        "txt": "public Partial minus(ReadablePeriod period) { return withPeriodAdded(period, -1); } public Property property(DateTimeFieldType type) { return new Property(this, indexOfSupported(type)); } public boolean isMatch(ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant); for (int i = 0; i < iTypes.length; i++) {"
      },
      {
        "txt": "int value = iTypes[i].getField(chrono).get(millis); if (value != iValues[i]) { return false; } } return true; } public boolean isMatch(ReadablePartial partial) { if (partial == null) { throw new IllegalArgumentException(\"The partial must not be null\");"
      },
      {
        "txt": "} for (int i = 0; i < iTypes.length; i++) { int value = partial.get(iTypes[i]); if (value != iValues[i]) { return false; } } return true; } public DateTimeFormatter getFormatter() {"
      },
      {
        "txt": "DateTimeFormatter[] f = iFormatter; if (f == null) { if (size() == 0) { return null; } f = new DateTimeFormatter[2]; try { List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes)); f[0] = ISODateTimeFormat.forFields(list, true, false); if (list.size() == 0) {"
      },
      {
        "txt": "f[1] = f[0]; } } catch (IllegalArgumentException ex) { } iFormatter = f; } return f[0]; } public String toString() { DateTimeFormatter[] f = iFormatter;"
      },
      {
        "txt": "if (f == null) { getFormatter(); f = iFormatter; if (f == null) { return toStringList(); } } DateTimeFormatter f1 = f[1]; if (f1 == null) { return toStringList();"
      },
      {
        "txt": "} return f1.print(this); } public String toStringList() { int size = size(); StringBuilder buf = new StringBuilder(20 * size); buf.append('['); for (int i = 0; i < size; i++) { if (i > 0) { buf.append(',').append(' ');"
      },
      {
        "txt": "} buf.append(iTypes[i].getName()); buf.append('='); buf.append(iValues[i]); } buf.append(']'); return buf.toString(); } public String toString(String pattern) { if (pattern == null) {"
      },
      {
        "txt": "return toString(); } return DateTimeFormat.forPattern(pattern).print(this); } public String toString(String pattern, Locale locale) { if (pattern == null) { return toString(); } return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this); }"
      },
      {
        "txt": "public static class Property extends AbstractPartialFieldProperty implements Serializable { private static final long serialVersionUID = 53278362873888L; private final Partial iPartial; private final int iFieldIndex; Property(Partial partial, int fieldIndex) { super(); iPartial = partial; iFieldIndex = fieldIndex; } public DateTimeField getField() {"
      },
      {
        "txt": "return iPartial.getField(iFieldIndex); } protected ReadablePartial getReadablePartial() { return iPartial; } public Partial getPartial() { return iPartial; } public int get() { return iPartial.getValue(iFieldIndex);"
      },
      {
        "txt": "} public Partial addToCopy(int valueToAdd) { int[] newValues = iPartial.getValues(); newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd); return new Partial(iPartial, newValues); } public Partial addWrapFieldToCopy(int valueToAdd) { int[] newValues = iPartial.getValues(); newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd); return new Partial(iPartial, newValues);"
      },
      {
        "txt": "} public Partial setCopy(int value) { int[] newValues = iPartial.getValues(); newValues = getField().set(iPartial, iFieldIndex, newValues, value); return new Partial(iPartial, newValues); } public Partial setCopy(String text, Locale locale) { int[] newValues = iPartial.getValues(); newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale); return new Partial(iPartial, newValues);"
      },
      {
        "txt": "} public Partial setCopy(String text) { return setCopy(text, null); } public Partial withMaximumValue() { return setCopy(getMaximumValue()); } public Partial withMinimumValue() { return setCopy(getMinimumValue()); }"
      }
    ]
  },
  {
    "id": 2885,
    "file_path": "src/main/java/org/joda/time/Partial.java",
    "start-bug-line": 449,
    "end-bug-line": 449,
    "bug": "",
    "fix": "if (fieldType.getRangeDurationType() == null) { break; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time; import java.io.Serializable; import java.util.ArrayList; import java.util.Arrays; import java.util.List; import java.util.Locale; import org.joda.time.base.AbstractPartial;"
      },
      {
        "txt": "import org.joda.time.field.AbstractPartialFieldProperty; import org.joda.time.field.FieldUtils; import org.joda.time.format.DateTimeFormat; import org.joda.time.format.DateTimeFormatter; import org.joda.time.format.ISODateTimeFormat; public final class Partial extends AbstractPartial implements ReadablePartial, Serializable { private static final long serialVersionUID = 12324121189002L; private final Chronology iChronology;"
      },
      {
        "txt": "private final DateTimeFieldType[] iTypes; private final int[] iValues; private transient DateTimeFormatter[] iFormatter; public Partial() { this((Chronology) null); } public Partial(Chronology chrono) { super(); iChronology = DateTimeUtils.getChronology(chrono).withUTC(); iTypes = new DateTimeFieldType[0];"
      },
      {
        "txt": "iValues = new int[0]; } public Partial(DateTimeFieldType type, int value) { this(type, value, null); } public Partial(DateTimeFieldType type, int value, Chronology chronology) { super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (type == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The field type must not be null\"); } iTypes = new DateTimeFieldType[] {type}; iValues = new int[] {value}; chronology.validate(this, iValues); } public Partial(DateTimeFieldType[] types, int[] values) { this(types, values, null); } public Partial(DateTimeFieldType[] types, int[] values, Chronology chronology) {"
      },
      {
        "txt": "super(); chronology = DateTimeUtils.getChronology(chronology).withUTC(); iChronology = chronology; if (types == null) { throw new IllegalArgumentException(\"Types array must not be null\"); } if (values == null) { throw new IllegalArgumentException(\"Values array must not be null\"); } if (values.length != types.length) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"Values array must be the same length as the types array\"); } if (types.length == 0) { iTypes = types; iValues = values; return; } for (int i = 0; i < types.length; i++) { if (types[i] == null) { throw new IllegalArgumentException(\"Types array must not contain null: index \" + i);"
      },
      {
        "txt": "} } DurationField lastUnitField = null; for (int i = 0; i < types.length; i++) { DateTimeFieldType loopType = types[i]; DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (i > 0) { int compare = lastUnitField.compareTo(loopUnitField); if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) { throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +"
      },
      {
        "txt": "types[i - 1].getName() + \" < \" + loopType.getName()); } else if (compare == 0) { if (types[i - 1].getRangeDurationType() == null) { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + types[i - 1].getName() + \" and \" + loopType.getName()); } } else { if (loopType.getRangeDurationType() == null) { throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +"
      },
      {
        "txt": "types[i - 1].getName() + \" < \" + loopType.getName()); } DurationField lastRangeField = types[i - 1].getRangeDurationType().getField(iChronology); DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (lastRangeField.compareTo(loopRangeField) < 0) { throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" + types[i - 1].getName() + \" < \" + loopType.getName()); } if (lastRangeField.compareTo(loopRangeField) == 0) { throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +"
      },
      {
        "txt": "types[i - 1].getName() + \" and \" + loopType.getName()); } } } } lastUnitField = loopUnitField; } iTypes = (DateTimeFieldType[]) types.clone(); chronology.validate(this, values); iValues = (int[]) values.clone();"
      },
      {
        "txt": "} public Partial(ReadablePartial partial) { super(); if (partial == null) { throw new IllegalArgumentException(\"The partial must not be null\"); } iChronology = DateTimeUtils.getChronology(partial.getChronology()).withUTC(); iTypes = new DateTimeFieldType[partial.size()]; iValues = new int[partial.size()]; for (int i = 0; i < partial.size(); i++) {"
      },
      {
        "txt": "iTypes[i] = partial.getFieldType(i); iValues[i] = partial.getValue(i); } } Partial(Partial partial, int[] values) { super(); iChronology = partial.iChronology; iTypes = partial.iTypes; iValues = values; }"
      },
      {
        "txt": "Partial(Chronology chronology, DateTimeFieldType[] types, int[] values) { super(); iChronology = chronology; iTypes = types; iValues = values; } public int size() { return iTypes.length; } public Chronology getChronology() {"
      },
      {
        "txt": "return iChronology; } protected DateTimeField getField(int index, Chronology chrono) { return iTypes[index].getField(chrono); } public DateTimeFieldType getFieldType(int index) { return iTypes[index]; } public DateTimeFieldType[] getFieldTypes() { return (DateTimeFieldType[]) iTypes.clone();"
      },
      {
        "txt": "} public int getValue(int index) { return iValues[index]; } public int[] getValues() { return (int[]) iValues.clone(); } public Partial withChronologyRetainFields(Chronology newChronology) { newChronology = DateTimeUtils.getChronology(newChronology); newChronology = newChronology.withUTC();"
      },
      {
        "txt": "if (newChronology == getChronology()) { return this; } else { Partial newPartial = new Partial(newChronology, iTypes, iValues); newChronology.validate(newPartial, iValues); return newPartial; } } public Partial with(DateTimeFieldType fieldType, int value) { if (fieldType == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The field type must not be null\"); } int index = indexOf(fieldType); if (index == -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1]; int[] newValues = new int[newTypes.length]; int i = 0; DurationField unitField = fieldType.getDurationType().getField(iChronology); if (unitField.isSupported()) { for (; i < iTypes.length; i++) {"
      },
      {
        "txt": "DurationField loopUnitField = loopType.getDurationType().getField(iChronology); if (loopUnitField.isSupported()) { int compare = unitField.compareTo(loopUnitField); if (compare > 0) { break; } else if (compare == 0) { <extra_id_0> DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology); if (rangeField.compareTo(loopRangeField) > 0) { break; } } }"
      },
      {
        "txt": "} } } } System.arraycopy(iTypes, 0, newTypes, 0, i); System.arraycopy(iValues, 0, newValues, 0, i); newTypes[i] = fieldType; newValues[i] = value; System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1); System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);"
      },
      {
        "txt": "Partial newPartial = new Partial(newTypes, newValues, iChronology); iChronology.validate(newPartial, newValues); return newPartial; } if (value == getValue(index)) { return this; } int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues);"
      },
      {
        "txt": "} public Partial without(DateTimeFieldType fieldType) { int index = indexOf(fieldType); if (index != -1) { DateTimeFieldType[] newTypes = new DateTimeFieldType[size() - 1]; int[] newValues = new int[size() - 1]; System.arraycopy(iTypes, 0, newTypes, 0, index); System.arraycopy(iTypes, index + 1, newTypes, index, newTypes.length - index); System.arraycopy(iValues, 0, newValues, 0, index); System.arraycopy(iValues, index + 1, newValues, index, newValues.length - index);"
      },
      {
        "txt": "Partial newPartial = new Partial(iChronology, newTypes, newValues); iChronology.validate(newPartial, newValues); return newPartial; } return this; } public Partial withField(DateTimeFieldType fieldType, int value) { int index = indexOfSupported(fieldType); if (value == getValue(index)) { return this;"
      },
      {
        "txt": "} int[] newValues = getValues(); newValues = getField(index).set(this, index, newValues, value); return new Partial(this, newValues); } public Partial withFieldAdded(DurationFieldType fieldType, int amount) { int index = indexOfSupported(fieldType); if (amount == 0) { return this; }"
      },
      {
        "txt": "int[] newValues = getValues(); newValues = getField(index).add(this, index, newValues, amount); return new Partial(this, newValues); } public Partial withFieldAddWrapped(DurationFieldType fieldType, int amount) { int index = indexOfSupported(fieldType); if (amount == 0) { return this; } int[] newValues = getValues();"
      },
      {
        "txt": "newValues = getField(index).addWrapPartial(this, index, newValues, amount); return new Partial(this, newValues); } public Partial withPeriodAdded(ReadablePeriod period, int scalar) { if (period == null || scalar == 0) { return this; } int[] newValues = getValues(); for (int i = 0; i < period.size(); i++) { DurationFieldType fieldType = period.getFieldType(i);"
      },
      {
        "txt": "int index = indexOf(fieldType); if (index >= 0) { newValues = getField(index).add(this, index, newValues, FieldUtils.safeMultiply(period.getValue(i), scalar)); } } return new Partial(this, newValues); } public Partial plus(ReadablePeriod period) { return withPeriodAdded(period, 1);"
      },
      {
        "txt": "} public Partial minus(ReadablePeriod period) { return withPeriodAdded(period, -1); } public Property property(DateTimeFieldType type) { return new Property(this, indexOfSupported(type)); } public boolean isMatch(ReadableInstant instant) { long millis = DateTimeUtils.getInstantMillis(instant); Chronology chrono = DateTimeUtils.getInstantChronology(instant);"
      },
      {
        "txt": "for (int i = 0; i < iTypes.length; i++) { int value = iTypes[i].getField(chrono).get(millis); if (value != iValues[i]) { return false; } } return true; } public boolean isMatch(ReadablePartial partial) { if (partial == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"The partial must not be null\"); } for (int i = 0; i < iTypes.length; i++) { int value = partial.get(iTypes[i]); if (value != iValues[i]) { return false; } } return true; }"
      },
      {
        "txt": "public DateTimeFormatter getFormatter() { DateTimeFormatter[] f = iFormatter; if (f == null) { if (size() == 0) { return null; } f = new DateTimeFormatter[2]; try { List<DateTimeFieldType> list = new ArrayList<DateTimeFieldType>(Arrays.asList(iTypes)); f[0] = ISODateTimeFormat.forFields(list, true, false);"
      },
      {
        "txt": "if (list.size() == 0) { f[1] = f[0]; } } catch (IllegalArgumentException ex) { } iFormatter = f; } return f[0]; } public String toString() {"
      },
      {
        "txt": "DateTimeFormatter[] f = iFormatter; if (f == null) { getFormatter(); f = iFormatter; if (f == null) { return toStringList(); } } DateTimeFormatter f1 = f[1]; if (f1 == null) {"
      },
      {
        "txt": "return toStringList(); } return f1.print(this); } public String toStringList() { int size = size(); StringBuilder buf = new StringBuilder(20 * size); buf.append('['); for (int i = 0; i < size; i++) { if (i > 0) {"
      },
      {
        "txt": "buf.append(',').append(' '); } buf.append(iTypes[i].getName()); buf.append('='); buf.append(iValues[i]); } buf.append(']'); return buf.toString(); } public String toString(String pattern) {"
      },
      {
        "txt": "if (pattern == null) { return toString(); } return DateTimeFormat.forPattern(pattern).print(this); } public String toString(String pattern, Locale locale) { if (pattern == null) { return toString(); } return DateTimeFormat.forPattern(pattern).withLocale(locale).print(this);"
      },
      {
        "txt": "} public static class Property extends AbstractPartialFieldProperty implements Serializable { private static final long serialVersionUID = 53278362873888L; private final Partial iPartial; private final int iFieldIndex; Property(Partial partial, int fieldIndex) { super(); iPartial = partial; iFieldIndex = fieldIndex; }"
      },
      {
        "txt": "public DateTimeField getField() { return iPartial.getField(iFieldIndex); } protected ReadablePartial getReadablePartial() { return iPartial; } public Partial getPartial() { return iPartial; } public int get() {"
      },
      {
        "txt": "return iPartial.getValue(iFieldIndex); } public Partial addToCopy(int valueToAdd) { int[] newValues = iPartial.getValues(); newValues = getField().add(iPartial, iFieldIndex, newValues, valueToAdd); return new Partial(iPartial, newValues); } public Partial addWrapFieldToCopy(int valueToAdd) { int[] newValues = iPartial.getValues(); newValues = getField().addWrapField(iPartial, iFieldIndex, newValues, valueToAdd);"
      },
      {
        "txt": "return new Partial(iPartial, newValues); } public Partial setCopy(int value) { int[] newValues = iPartial.getValues(); newValues = getField().set(iPartial, iFieldIndex, newValues, value); return new Partial(iPartial, newValues); } public Partial setCopy(String text, Locale locale) { int[] newValues = iPartial.getValues(); newValues = getField().set(iPartial, iFieldIndex, newValues, text, locale);"
      },
      {
        "txt": "return new Partial(iPartial, newValues); } public Partial setCopy(String text) { return setCopy(text, null); } public Partial withMaximumValue() { return setCopy(getMaximumValue()); } public Partial withMinimumValue() { return setCopy(getMinimumValue());"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 2886,
    "file_path": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
    "start-bug-line": 227,
    "end-bug-line": 227,
    "bug": "",
    "fix": "if (durationField.isSupported()) { return 1; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.Serializable; import java.util.HashMap; import org.joda.time.DurationField; import org.joda.time.DurationFieldType; public final class UnsupportedDurationField extends DurationField implements Serializable { private static final long serialVersionUID = -6390301302770925357L; private static HashMap<DurationFieldType, UnsupportedDurationField> cCache; public static synchronized UnsupportedDurationField getInstance(DurationFieldType type) { UnsupportedDurationField field; if (cCache == null) {"
      },
      {
        "txt": "cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7); field = null; } else { field = cCache.get(type); } if (field == null) { field = new UnsupportedDurationField(type); cCache.put(type, field); } return field;"
      },
      {
        "txt": "} private final DurationFieldType iType; private UnsupportedDurationField(DurationFieldType type) { iType = type; } public final DurationFieldType getType() { return iType; } public String getName() { return iType.getName();"
      },
      {
        "txt": "} public boolean isSupported() { return false; } public boolean isPrecise() { return true; } public int getValue(long duration) { throw unsupported(); }"
      },
      {
        "txt": "public long getValueAsLong(long duration) { throw unsupported(); } public int getValue(long duration, long instant) { throw unsupported(); } public long getValueAsLong(long duration, long instant) { throw unsupported(); } public long getMillis(int value) {"
      },
      {
        "txt": "throw unsupported(); } public long getMillis(long value) { throw unsupported(); } public long getMillis(int value, long instant) { throw unsupported(); } public long getMillis(long value, long instant) { throw unsupported();"
      },
      {
        "txt": "} public long add(long instant, int value) { throw unsupported(); } public long add(long instant, long value) { throw unsupported(); } public int getDifference(long minuendInstant, long subtrahendInstant) { throw unsupported(); }"
      },
      {
        "txt": "throw unsupported(); } public long getUnitMillis() { return 0; } public int compareTo(DurationField durationField) { <extra_id_0> } public boolean equals(Object obj) { if (this == obj) { return true; } else if (obj instanceof UnsupportedDurationField) { UnsupportedDurationField other = (UnsupportedDurationField) obj;"
      },
      {
        "txt": "} else if (obj instanceof UnsupportedDurationField) { UnsupportedDurationField other = (UnsupportedDurationField) obj; if (other.getName() == null) { return (getName() == null); } return (other.getName().equals(getName())); } return false; } public int hashCode() {"
      },
      {
        "txt": "return getName().hashCode(); } public String toString() { return \"UnsupportedDurationField[\" + getName() + ']'; } private Object readResolve() { return getInstance(iType); } private UnsupportedOperationException unsupported() { return new UnsupportedOperationException(iType + \" field is unsupported\");"
      }
    ]
  }
]
[
  {
    "id": 2908,
    "file_path": "src/main/java/org/joda/time/Period.java",
    "start-bug-line": 1628,
    "end-bug-line": 1631,
    "bug": "years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years);",
    "fix": "long totalMonths = years * 12L + months; if (type.isSupported(DurationFieldType.YEARS_TYPE)) { int normalizedYears = FieldUtils.safeToInt(totalMonths / 12); result = result.withYears(normalizedYears); totalMonths = totalMonths - (normalizedYears * 12);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time; import java.io.Serializable; import org.joda.convert.FromString;"
      },
      {
        "txt": "import org.joda.time.base.BasePeriod; import org.joda.time.chrono.ISOChronology; import org.joda.time.field.FieldUtils; import org.joda.time.format.ISOPeriodFormat; import org.joda.time.format.PeriodFormatter; public final class Period extends BasePeriod implements ReadablePeriod, Serializable { public static final Period ZERO = new Period(); private static final long serialVersionUID = 741052353876488155L;"
      },
      {
        "txt": "@FromString public static Period parse(String str) { return parse(str, ISOPeriodFormat.standard()); } public static Period parse(String str, PeriodFormatter formatter) { return formatter.parsePeriod(str); } public static Period years(int years) { return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard()); }"
      },
      {
        "txt": "public static Period months(int months) { return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard()); } public static Period weeks(int weeks) { return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard()); } public static Period days(int days) { return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard()); } public static Period hours(int hours) {"
      },
      {
        "txt": "return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard()); } public static Period minutes(int minutes) { return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard()); } public static Period seconds(int seconds) { return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard()); } public static Period millis(int millis) { return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard());"
      },
      {
        "txt": "} public static Period fieldDifference(ReadablePartial start, ReadablePartial end) { if (start == null || end == null) { throw new IllegalArgumentException(\"ReadablePartial objects must not be null\"); } if (start.size() != end.size()) { throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\"); } DurationFieldType[] types = new DurationFieldType[start.size()]; int[] values = new int[start.size()];"
      },
      {
        "txt": "for (int i = 0, isize = start.size(); i < isize; i++) { if (start.getFieldType(i) != end.getFieldType(i)) { throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\"); } types[i] = start.getFieldType(i).getDurationType(); if (i > 0 && types[i - 1] == types[i]) { throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\"); } values[i] = end.getValue(i) - start.getValue(i); }"
      },
      {
        "txt": "return new Period(values, PeriodType.forFields(types)); } public Period() { super(0L, null, null); } public Period(int hours, int minutes, int seconds, int millis) { super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard()); } public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) {"
      },
      {
        "txt": "super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); } public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type) { super(years, months, weeks, days, hours, minutes, seconds, millis, type); } public Period(long duration) { super(duration); } public Period(long duration, PeriodType type) {"
      },
      {
        "txt": "super(duration, type, null); } public Period(long duration, Chronology chronology) { super(duration, null, chronology); } public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); } public Period(long startInstant, long endInstant) { super(startInstant, endInstant, null, null);"
      },
      {
        "txt": "} public Period(long startInstant, long endInstant, PeriodType type) { super(startInstant, endInstant, type, null); } public Period(long startInstant, long endInstant, Chronology chrono) { super(startInstant, endInstant, null, chrono); } public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) { super(startInstant, endInstant, type, chrono); }"
      },
      {
        "txt": "public Period(ReadableInstant startInstant, ReadableInstant endInstant) { super(startInstant, endInstant, null); } public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) { super(startInstant, endInstant, type); } public Period(ReadablePartial start, ReadablePartial end) { super(start, end, null); } public Period(ReadablePartial start, ReadablePartial end, PeriodType type) {"
      },
      {
        "txt": "super(start, end, type); } public Period(ReadableInstant startInstant, ReadableDuration duration) { super(startInstant, duration, null); } public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) { super(startInstant, duration, type); } public Period(ReadableDuration duration, ReadableInstant endInstant) { super(duration, endInstant, null);"
      },
      {
        "txt": "} public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) { super(duration, endInstant, type); } public Period(Object period) { super(period, null, null); } public Period(Object period, PeriodType type) { super(period, type, null); }"
      },
      {
        "txt": "public Period(Object period, Chronology chrono) { super(period, null, chrono); } public Period(Object period, PeriodType type, Chronology chrono) { super(period, type, chrono); } private Period(int[] values, PeriodType type) { super(values, type); } public Period toPeriod() {"
      },
      {
        "txt": "return this; } public int getYears() { return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX); } public int getMonths() { return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX); } public int getWeeks() { return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);"
      },
      {
        "txt": "} public int getDays() { return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX); } public int getHours() { return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX); } public int getMinutes() { return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX); }"
      },
      {
        "txt": "public int getSeconds() { return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX); } public int getMillis() { return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX); } public Period withPeriodType(PeriodType type) { type = DateTimeUtils.getPeriodType(type); if (type.equals(getPeriodType())) { return this;"
      },
      {
        "txt": "} return new Period(this, type); } public Period withFields(ReadablePeriod period) { if (period == null) { return this; } int[] newValues = getValues(); // cloned newValues = super.mergePeriodInto(newValues, period); return new Period(newValues, getPeriodType());"
      },
      {
        "txt": "} public Period withField(DurationFieldType field, int value) { if (field == null) { throw new IllegalArgumentException(\"Field must not be null\"); } int[] newValues = getValues(); // cloned super.setFieldInto(newValues, field, value); return new Period(newValues, getPeriodType()); } public Period withFieldAdded(DurationFieldType field, int value) {"
      },
      {
        "txt": "if (field == null) { throw new IllegalArgumentException(\"Field must not be null\"); } if (value == 0) { return this; } int[] newValues = getValues(); // cloned super.addFieldInto(newValues, field, value); return new Period(newValues, getPeriodType()); }"
      },
      {
        "txt": "public Period withYears(int years) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } public Period withMonths(int months) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withWeeks(int weeks) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks); return new Period(values, getPeriodType()); } public Period withDays(int days) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withHours(int hours) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours); return new Period(values, getPeriodType()); } public Period withMinutes(int minutes) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withSeconds(int seconds) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds); return new Period(values, getPeriodType()); } public Period withMillis(int millis) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period plus(ReadablePeriod period) { if (period == null) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE)); getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE)); return new Period(values, getPeriodType()); } public Period plusYears(int years) { if (years == 0) { return this; } int[] values = getValues(); // cloned"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } public Period plusMonths(int months) { if (months == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months); return new Period(values, getPeriodType());"
      },
      {
        "txt": "} public Period plusWeeks(int weeks) { if (weeks == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks); return new Period(values, getPeriodType()); } public Period plusDays(int days) {"
      },
      {
        "txt": "if (days == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days); return new Period(values, getPeriodType()); } public Period plusHours(int hours) { if (hours == 0) { return this;"
      },
      {
        "txt": "} int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours); return new Period(values, getPeriodType()); } public Period plusMinutes(int minutes) { if (minutes == 0) { return this; } int[] values = getValues(); // cloned"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes); return new Period(values, getPeriodType()); } public Period plusSeconds(int seconds) { if (seconds == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds); return new Period(values, getPeriodType());"
      },
      {
        "txt": "} public Period plusMillis(int millis) { if (millis == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis); return new Period(values, getPeriodType()); } public Period minus(ReadablePeriod period) {"
      },
      {
        "txt": "if (period == null) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE)); return new Period(values, getPeriodType()); } public Period minusYears(int years) { return plusYears(-years); } public Period minusMonths(int months) { return plusMonths(-months); }"
      },
      {
        "txt": "public Period minusWeeks(int weeks) { return plusWeeks(-weeks); } public Period minusDays(int days) { return plusDays(-days); } public Period minusHours(int hours) { return plusHours(-hours); } public Period minusMinutes(int minutes) {"
      },
      {
        "txt": "return plusMinutes(-minutes); } public Period minusSeconds(int seconds) { return plusSeconds(-seconds); } public Period minusMillis(int millis) { return plusMillis(-millis); } public Period multipliedBy(int scalar) { if (this == ZERO || scalar == 1) {"
      },
      {
        "txt": "return this; } int[] values = getValues(); // cloned for (int i = 0; i < values.length; i++) { values[i] = FieldUtils.safeMultiply(values[i], scalar); } return new Period(values, getPeriodType()); } public Period negated() { return multipliedBy(-1);"
      },
      {
        "txt": "} public Weeks toStandardWeeks() { checkYearsAndMonths(\"Weeks\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR; millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY; long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks(FieldUtils.safeToInt(weeks));"
      },
      {
        "txt": "} public Days toStandardDays() { checkYearsAndMonths(\"Days\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd(days, getDays()); days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK));"
      },
      {
        "txt": "return Days.days(FieldUtils.safeToInt(days)); } public Hours toStandardHours() { checkYearsAndMonths(\"Hours\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd(hours, getHours()); hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY));"
      },
      {
        "txt": "hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK)); return Hours.hours(FieldUtils.safeToInt(hours)); } public Minutes toStandardMinutes() { checkYearsAndMonths(\"Minutes\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd(minutes, getMinutes()); minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR));"
      },
      {
        "txt": "minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY)); minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK)); return Minutes.minutes(FieldUtils.safeToInt(minutes)); } public Seconds toStandardSeconds() { checkYearsAndMonths(\"Seconds\"); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd(seconds, getSeconds()); seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE)); seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR));"
      },
      {
        "txt": "seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY)); seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK)); return Seconds.seconds(FieldUtils.safeToInt(seconds)); } public Duration toStandardDuration() { checkYearsAndMonths(\"Duration\"); long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));"
      },
      {
        "txt": "millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); return new Duration(millis); } private void checkYearsAndMonths(String destintionType) { if (getMonths() != 0) { throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\"); } if (getYears() != 0) { throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\");"
      },
      {
        "txt": "} } public Period normalizedStandard() { return normalizedStandard(PeriodType.standard()); } public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));"
      },
      {
        "txt": "millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears(); int months = getMonths(); if (years != 0 || months != 0) { <extra_id_0> } if (months != 0) { result = result.withMonths(months); } } return result;"
      },
      {
        "txt": "} return result; }"
      }
    ]
  },
  {
    "id": 2909,
    "file_path": "src/main/java/org/joda/time/Period.java",
    "start-bug-line": 1633,
    "end-bug-line": 1634,
    "bug": "if (months != 0) { result = result.withMonths(months);",
    "fix": "if (type.isSupported(DurationFieldType.MONTHS_TYPE)) { int normalizedMonths = FieldUtils.safeToInt(totalMonths); result = result.withMonths(normalizedMonths); totalMonths = totalMonths - normalizedMonths; } if (totalMonths != 0) { throw new UnsupportedOperationException(\"Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: \" + toString());",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.joda.time; import java.io.Serializable; import org.joda.convert.FromString; import org.joda.time.base.BasePeriod; import org.joda.time.chrono.ISOChronology; import org.joda.time.field.FieldUtils; import org.joda.time.format.ISOPeriodFormat; import org.joda.time.format.PeriodFormatter;"
      },
      {
        "txt": "public final class Period extends BasePeriod implements ReadablePeriod, Serializable { public static final Period ZERO = new Period(); private static final long serialVersionUID = 741052353876488155L; @FromString public static Period parse(String str) { return parse(str, ISOPeriodFormat.standard()); } public static Period parse(String str, PeriodFormatter formatter) {"
      },
      {
        "txt": "return formatter.parsePeriod(str); } public static Period years(int years) { return new Period(new int[] {years, 0, 0, 0, 0, 0, 0, 0, 0}, PeriodType.standard()); } public static Period months(int months) { return new Period(new int[] {0, months, 0, 0, 0, 0, 0, 0}, PeriodType.standard()); } public static Period weeks(int weeks) { return new Period(new int[] {0, 0, weeks, 0, 0, 0, 0, 0}, PeriodType.standard());"
      },
      {
        "txt": "} public static Period days(int days) { return new Period(new int[] {0, 0, 0, days, 0, 0, 0, 0}, PeriodType.standard()); } public static Period hours(int hours) { return new Period(new int[] {0, 0, 0, 0, hours, 0, 0, 0}, PeriodType.standard()); } public static Period minutes(int minutes) { return new Period(new int[] {0, 0, 0, 0, 0, minutes, 0, 0}, PeriodType.standard()); }"
      },
      {
        "txt": "public static Period seconds(int seconds) { return new Period(new int[] {0, 0, 0, 0, 0, 0, seconds, 0}, PeriodType.standard()); } public static Period millis(int millis) { return new Period(new int[] {0, 0, 0, 0, 0, 0, 0, millis}, PeriodType.standard()); } public static Period fieldDifference(ReadablePartial start, ReadablePartial end) { if (start == null || end == null) { throw new IllegalArgumentException(\"ReadablePartial objects must not be null\"); }"
      },
      {
        "txt": "if (start.size() != end.size()) { throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\"); } DurationFieldType[] types = new DurationFieldType[start.size()]; int[] values = new int[start.size()]; for (int i = 0, isize = start.size(); i < isize; i++) { if (start.getFieldType(i) != end.getFieldType(i)) { throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\"); } types[i] = start.getFieldType(i).getDurationType();"
      },
      {
        "txt": "if (i > 0 && types[i - 1] == types[i]) { throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\"); } values[i] = end.getValue(i) - start.getValue(i); } return new Period(values, PeriodType.forFields(types)); } public Period() { super(0L, null, null); }"
      },
      {
        "txt": "public Period(int hours, int minutes, int seconds, int millis) { super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard()); } public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis) { super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard()); } public Period(int years, int months, int weeks, int days, int hours, int minutes, int seconds, int millis, PeriodType type) { super(years, months, weeks, days, hours, minutes, seconds, millis, type);"
      },
      {
        "txt": "} public Period(long duration) { super(duration); } public Period(long duration, PeriodType type) { super(duration, type, null); } public Period(long duration, Chronology chronology) { super(duration, null, chronology); }"
      },
      {
        "txt": "public Period(long duration, PeriodType type, Chronology chronology) { super(duration, type, chronology); } public Period(long startInstant, long endInstant) { super(startInstant, endInstant, null, null); } public Period(long startInstant, long endInstant, PeriodType type) { super(startInstant, endInstant, type, null); } public Period(long startInstant, long endInstant, Chronology chrono) {"
      },
      {
        "txt": "super(startInstant, endInstant, null, chrono); } public Period(long startInstant, long endInstant, PeriodType type, Chronology chrono) { super(startInstant, endInstant, type, chrono); } public Period(ReadableInstant startInstant, ReadableInstant endInstant) { super(startInstant, endInstant, null); } public Period(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type) { super(startInstant, endInstant, type);"
      },
      {
        "txt": "} public Period(ReadablePartial start, ReadablePartial end) { super(start, end, null); } public Period(ReadablePartial start, ReadablePartial end, PeriodType type) { super(start, end, type); } public Period(ReadableInstant startInstant, ReadableDuration duration) { super(startInstant, duration, null); }"
      },
      {
        "txt": "public Period(ReadableInstant startInstant, ReadableDuration duration, PeriodType type) { super(startInstant, duration, type); } public Period(ReadableDuration duration, ReadableInstant endInstant) { super(duration, endInstant, null); } public Period(ReadableDuration duration, ReadableInstant endInstant, PeriodType type) { super(duration, endInstant, type); } public Period(Object period) {"
      },
      {
        "txt": "super(period, null, null); } public Period(Object period, PeriodType type) { super(period, type, null); } public Period(Object period, Chronology chrono) { super(period, null, chrono); } public Period(Object period, PeriodType type, Chronology chrono) { super(period, type, chrono);"
      },
      {
        "txt": "} private Period(int[] values, PeriodType type) { super(values, type); } public Period toPeriod() { return this; } public int getYears() { return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX); }"
      },
      {
        "txt": "public int getMonths() { return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX); } public int getWeeks() { return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX); } public int getDays() { return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX); } public int getHours() {"
      },
      {
        "txt": "return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX); } public int getMinutes() { return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX); } public int getSeconds() { return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX); } public int getMillis() { return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);"
      },
      {
        "txt": "} public Period withPeriodType(PeriodType type) { type = DateTimeUtils.getPeriodType(type); if (type.equals(getPeriodType())) { return this; } return new Period(this, type); } public Period withFields(ReadablePeriod period) { if (period == null) {"
      },
      {
        "txt": "return this; } int[] newValues = getValues(); // cloned newValues = super.mergePeriodInto(newValues, period); return new Period(newValues, getPeriodType()); } public Period withField(DurationFieldType field, int value) { if (field == null) { throw new IllegalArgumentException(\"Field must not be null\"); }"
      },
      {
        "txt": "int[] newValues = getValues(); // cloned super.setFieldInto(newValues, field, value); return new Period(newValues, getPeriodType()); } public Period withFieldAdded(DurationFieldType field, int value) { if (field == null) { throw new IllegalArgumentException(\"Field must not be null\"); } if (value == 0) { return this;"
      },
      {
        "txt": "} int[] newValues = getValues(); // cloned super.addFieldInto(newValues, field, value); return new Period(newValues, getPeriodType()); } public Period withYears(int years) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withMonths(int months) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MONTH_INDEX, values, months); return new Period(values, getPeriodType()); } public Period withWeeks(int weeks) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.WEEK_INDEX, values, weeks); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withDays(int days) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.DAY_INDEX, values, days); return new Period(values, getPeriodType()); } public Period withHours(int hours) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.HOUR_INDEX, values, hours); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withMinutes(int minutes) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes); return new Period(values, getPeriodType()); } public Period withSeconds(int seconds) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.SECOND_INDEX, values, seconds); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period withMillis(int millis) { int[] values = getValues(); // cloned getPeriodType().setIndexedField(this, PeriodType.MILLI_INDEX, values, millis); return new Period(values, getPeriodType()); } public Period plus(ReadablePeriod period) { if (period == null) { return this; } int[] values = getValues(); // cloned"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE)); getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE)); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period plusYears(int years) { if (years == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, years); return new Period(values, getPeriodType()); } public Period plusMonths(int months) { if (months == 0) {"
      },
      {
        "txt": "return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, months); return new Period(values, getPeriodType()); } public Period plusWeeks(int weeks) { if (weeks == 0) { return this; }"
      },
      {
        "txt": "int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, weeks); return new Period(values, getPeriodType()); } public Period plusDays(int days) { if (days == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, days);"
      },
      {
        "txt": "return new Period(values, getPeriodType()); } public Period plusHours(int hours) { if (hours == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, hours); return new Period(values, getPeriodType()); }"
      },
      {
        "txt": "public Period plusMinutes(int minutes) { if (minutes == 0) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, minutes); return new Period(values, getPeriodType()); } public Period plusSeconds(int seconds) { if (seconds == 0) {"
      },
      {
        "txt": "return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, seconds); return new Period(values, getPeriodType()); } public Period plusMillis(int millis) { if (millis == 0) { return this; }"
      },
      {
        "txt": "int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis); return new Period(values, getPeriodType()); } public Period minus(ReadablePeriod period) { if (period == null) { return this; } int[] values = getValues(); // cloned getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));"
      },
      {
        "txt": "getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE)); getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE)); getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE)); return new Period(values, getPeriodType()); } public Period minusYears(int years) {"
      },
      {
        "txt": "return plusYears(-years); } public Period minusMonths(int months) { return plusMonths(-months); } public Period minusWeeks(int weeks) { return plusWeeks(-weeks); } public Period minusDays(int days) { return plusDays(-days);"
      },
      {
        "txt": "} public Period minusHours(int hours) { return plusHours(-hours); } public Period minusMinutes(int minutes) { return plusMinutes(-minutes); } public Period minusSeconds(int seconds) { return plusSeconds(-seconds); }"
      },
      {
        "txt": "public Period minusMillis(int millis) { return plusMillis(-millis); } public Period multipliedBy(int scalar) { if (this == ZERO || scalar == 1) { return this; } int[] values = getValues(); // cloned for (int i = 0; i < values.length; i++) { values[i] = FieldUtils.safeMultiply(values[i], scalar);"
      },
      {
        "txt": "} return new Period(values, getPeriodType()); } public Period negated() { return multipliedBy(-1); } public Weeks toStandardWeeks() { checkYearsAndMonths(\"Weeks\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;"
      },
      {
        "txt": "millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR; millis += ((long) getDays()) * DateTimeConstants.MILLIS_PER_DAY; long weeks = ((long) getWeeks()) + millis / DateTimeConstants.MILLIS_PER_WEEK; return Weeks.weeks(FieldUtils.safeToInt(weeks)); } public Days toStandardDays() { checkYearsAndMonths(\"Days\"); long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;"
      },
      {
        "txt": "millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; millis += ((long) getHours()) * DateTimeConstants.MILLIS_PER_HOUR; long days = millis / DateTimeConstants.MILLIS_PER_DAY; days = FieldUtils.safeAdd(days, getDays()); days = FieldUtils.safeAdd(days, ((long) getWeeks()) * ((long) DateTimeConstants.DAYS_PER_WEEK)); return Days.days(FieldUtils.safeToInt(days)); } public Hours toStandardHours() { checkYearsAndMonths(\"Hours\"); long millis = getMillis(); // assign to a long"
      },
      {
        "txt": "millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; millis += ((long) getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE; long hours = millis / DateTimeConstants.MILLIS_PER_HOUR; hours = FieldUtils.safeAdd(hours, getHours()); hours = FieldUtils.safeAdd(hours, ((long) getDays()) * ((long) DateTimeConstants.HOURS_PER_DAY)); hours = FieldUtils.safeAdd(hours, ((long) getWeeks()) * ((long) DateTimeConstants.HOURS_PER_WEEK)); return Hours.hours(FieldUtils.safeToInt(hours)); } public Minutes toStandardMinutes() { checkYearsAndMonths(\"Minutes\");"
      },
      {
        "txt": "long millis = getMillis(); // assign to a long millis += ((long) getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND; long minutes = millis / DateTimeConstants.MILLIS_PER_MINUTE; minutes = FieldUtils.safeAdd(minutes, getMinutes()); minutes = FieldUtils.safeAdd(minutes, ((long) getHours()) * ((long) DateTimeConstants.MINUTES_PER_HOUR)); minutes = FieldUtils.safeAdd(minutes, ((long) getDays()) * ((long) DateTimeConstants.MINUTES_PER_DAY)); minutes = FieldUtils.safeAdd(minutes, ((long) getWeeks()) * ((long) DateTimeConstants.MINUTES_PER_WEEK)); return Minutes.minutes(FieldUtils.safeToInt(minutes)); } public Seconds toStandardSeconds() {"
      },
      {
        "txt": "checkYearsAndMonths(\"Seconds\"); long seconds = getMillis() / DateTimeConstants.MILLIS_PER_SECOND; seconds = FieldUtils.safeAdd(seconds, getSeconds()); seconds = FieldUtils.safeAdd(seconds, ((long) getMinutes()) * ((long) DateTimeConstants.SECONDS_PER_MINUTE)); seconds = FieldUtils.safeAdd(seconds, ((long) getHours()) * ((long) DateTimeConstants.SECONDS_PER_HOUR)); seconds = FieldUtils.safeAdd(seconds, ((long) getDays()) * ((long) DateTimeConstants.SECONDS_PER_DAY)); seconds = FieldUtils.safeAdd(seconds, ((long) getWeeks()) * ((long) DateTimeConstants.SECONDS_PER_WEEK)); return Seconds.seconds(FieldUtils.safeToInt(seconds)); } public Duration toStandardDuration() {"
      },
      {
        "txt": "checkYearsAndMonths(\"Duration\"); long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); return new Duration(millis); } private void checkYearsAndMonths(String destintionType) {"
      },
      {
        "txt": "if (getMonths() != 0) { throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains months and months vary in length\"); } if (getYears() != 0) { throw new UnsupportedOperationException(\"Cannot convert to \" + destintionType + \" as this period contains years and years vary in length\"); } } public Period normalizedStandard() { return normalizedStandard(PeriodType.standard()); }"
      },
      {
        "txt": "public Period normalizedStandard(PeriodType type) { type = DateTimeUtils.getPeriodType(type); long millis = getMillis(); // no overflow can happen, even with Integer.MAX_VALUEs millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND)); millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE)); millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR)); millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY)); millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK)); Period result = new Period(millis, type, ISOChronology.getInstanceUTC()); int years = getYears();"
      },
      {
        "txt": "if (years != 0 || months != 0) { years = FieldUtils.safeAdd(years, months / 12); months = months % 12; if (years != 0) { result = result.withYears(years); } <extra_id_0> } } return result; } }"
      }
    ]
  }
]
[
  {
    "id": 88,
    "file_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 812,
    "end-bug-line": 812,
    "bug": "pos = findWrapPos(text, width, nextLineTabStop);",
    "fix": "pos = findWrapPos(text, width, 0);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \";"
      },
      {
        "txt": "public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;"
      },
      {
        "txt": "public String defaultArgName = DEFAULT_ARG_NAME; public void setWidth(int width) { this.defaultWidth = width; } public int getWidth() { return this.defaultWidth; } public void setLeftPadding(int padding)"
      },
      {
        "txt": "{ this.defaultLeftPad = padding; } public int getLeftPadding() { return this.defaultLeftPad; } public void setDescPadding(int padding) { this.defaultDescPad = padding;"
      },
      {
        "txt": "} public int getDescPadding() { return this.defaultDescPad; } public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public String getSyntaxPrefix()"
      },
      {
        "txt": "{ return this.defaultSyntaxPrefix; } public void setNewLine(String newline) { this.defaultNewLine = newline; } public String getNewLine() { return this.defaultNewLine;"
      },
      {
        "txt": "} public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public String getOptPrefix() { return this.defaultOptPrefix; } public void setLongOptPrefix(String prefix)"
      },
      {
        "txt": "{ this.defaultLongOptPrefix = prefix; } public String getLongOptPrefix() { return this.defaultLongOptPrefix; } public void setArgName(String name) { this.defaultArgName = name;"
      },
      {
        "txt": "} public String getArgName() { return this.defaultArgName; } public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void printHelp(String cmdLineSyntax, Options options,"
      },
      {
        "txt": "boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options,"
      },
      {
        "txt": "String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); }"
      },
      {
        "txt": "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad,"
      },
      {
        "txt": "int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))"
      },
      {
        "txt": "{ throw new IllegalArgumentException(\"cmdLineSyntax not provided\"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax);"
      },
      {
        "txt": "} if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); }"
      },
      {
        "txt": "} public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app) .append(\" \"); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, new OptionComparator());"
      },
      {
        "txt": "for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group);"
      },
      {
        "txt": "} } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(\" \"); }"
      },
      {
        "txt": "} printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private static void appendOptionGroup(final StringBuffer buff, final OptionGroup group) { if (!group.isRequired()) { buff.append(\"[\");"
      },
      {
        "txt": "} List optList = new ArrayList(group.getOptions()); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { appendOption(buff, (Option) i.next(), true); if (i.hasNext()) { buff.append(\" | \"); }"
      },
      {
        "txt": "} if (!group.isRequired()) { buff.append(\"]\"); } } private static void appendOption(final StringBuffer buff, final Option option, final boolean required) {"
      },
      {
        "txt": "if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else {"
      },
      {
        "txt": "buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && (option.getArgName() != null)) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); }"
      },
      {
        "txt": "} public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {"
      },
      {
        "txt": "StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)"
      },
      {
        "txt": "{ StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { final String lpad = createPadding(leftPad);"
      },
      {
        "txt": "final String dpad = createPadding(descPad); int max = 0; StringBuffer optBuf; List prefixList = new ArrayList(); Option option; List optList = options.helpOptions(); Collections.sort(optList, new OptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next();"
      },
      {
        "txt": "optBuf = new StringBuffer(8); if (option.getOpt() == null) { optBuf.append(lpad).append(\" \" + defaultLongOptPrefix) .append(option.getLongOpt()); } else { optBuf.append(lpad).append(defaultOptPrefix) .append(option.getOpt());"
      },
      {
        "txt": "if (option.hasLongOpt()) { optBuf.append(',').append(defaultLongOptPrefix) .append(option.getLongOpt()); } } if (option.hasArg()) { if (option.hasArgName()) {"
      },
      {
        "txt": "optBuf.append(\" <\").append(option.getArgName()).append(\">\"); } else { optBuf.append(' '); } } prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max; }"
      },
      {
        "txt": "int x = 0; for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString()); if (optBuf.length() < max) { optBuf.append(createPadding(max - optBuf.length())); } optBuf.append(dpad);"
      },
      {
        "txt": "int nextLineTabStop = max + descPad; if (option.getDescription() != null) { optBuf.append(option.getDescription()); } renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); if (i.hasNext()) { sb.append(defaultNewLine); }"
      },
      {
        "txt": "} return sb; } protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text));"
      },
      {
        "txt": "} sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); <extra_id_0> if (pos == -1) { sb.append(text); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
      },
      {
        "txt": "} sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } protected int findWrapPos(String text, int width, int startPos) { int pos = -1; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) {"
      },
      {
        "txt": "return pos+1; } else if ((startPos + width) >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r'))"
      },
      {
        "txt": "{ --pos; } if (pos > startPos) { return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r'))"
      },
      {
        "txt": "{ ++pos; } return (pos == text.length()) ? (-1) : pos; } protected String createPadding(int len) { StringBuffer sb = new StringBuffer(len); for (int i = 0; i < len; ++i) {"
      },
      {
        "txt": "sb.append(' '); } return sb.toString(); } protected String rtrim(String s) { if ((s == null) || (s.length() == 0)) { return s; }"
      },
      {
        "txt": "int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { --pos; } return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      },
      {
        "txt": "{ Option opt1 = (Option)o1; Option opt2 = (Option)o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey()); } }"
      }
    ]
  }
]
[
  {
    "id": 155,
    "file_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
    "start-bug-line": 348,
    "end-bug-line": 348,
    "bug": "",
    "fix": "Option option = null; try {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; public final class OptionBuilder"
      },
      {
        "txt": "{ private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep; private static OptionBuilder instance = new OptionBuilder();"
      },
      {
        "txt": "private OptionBuilder() { } private static void reset() { description = null; argName = \"arg\"; longopt = null; type = null; required = false;"
      },
      {
        "txt": "numberOfArgs = Option.UNINITIALIZED; optionalArg = false; valuesep = (char) 0; } public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } public static OptionBuilder hasArg()"
      },
      {
        "txt": "{ OptionBuilder.numberOfArgs = 1; return instance; } public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } public static OptionBuilder withArgName(String name)"
      },
      {
        "txt": "{ OptionBuilder.argName = name; return instance; } public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } public static OptionBuilder withValueSeparator(char sep)"
      },
      {
        "txt": "{ OptionBuilder.valuesep = sep; return instance; } public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } public static OptionBuilder isRequired(boolean newRequired)"
      },
      {
        "txt": "{ OptionBuilder.required = newRequired; return instance; } public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } public static OptionBuilder hasArgs(int num)"
      },
      {
        "txt": "{ OptionBuilder.numberOfArgs = num; return instance; } public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; }"
      },
      {
        "txt": "public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true;"
      },
      {
        "txt": "return instance; } public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription;"
      },
      {
        "txt": "return instance; } public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } public static Option create() throws IllegalArgumentException { if (longopt == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"must specify longopt\"); } return create(null); } public static Option create(String opt) throws IllegalArgumentException { <extra_id_0> Option option = new Option(opt, description); option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type);"
      },
      {
        "txt": "option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); OptionBuilder.reset(); return option; }"
      }
    ]
  },
  {
    "id": 156,
    "file_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
    "start-bug-line": 349,
    "end-bug-line": 349,
    "bug": "Option option = new Option(opt, description);",
    "fix": "option = new Option(opt, description);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; public final class OptionBuilder"
      },
      {
        "txt": "{ private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep; private static OptionBuilder instance = new OptionBuilder();"
      },
      {
        "txt": "private OptionBuilder() { } private static void reset() { description = null; argName = \"arg\"; longopt = null; type = null; required = false;"
      },
      {
        "txt": "numberOfArgs = Option.UNINITIALIZED; optionalArg = false; valuesep = (char) 0; } public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } public static OptionBuilder hasArg()"
      },
      {
        "txt": "{ OptionBuilder.numberOfArgs = 1; return instance; } public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } public static OptionBuilder withArgName(String name)"
      },
      {
        "txt": "{ OptionBuilder.argName = name; return instance; } public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } public static OptionBuilder withValueSeparator(char sep)"
      },
      {
        "txt": "{ OptionBuilder.valuesep = sep; return instance; } public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } public static OptionBuilder isRequired(boolean newRequired)"
      },
      {
        "txt": "{ OptionBuilder.required = newRequired; return instance; } public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } public static OptionBuilder hasArgs(int num)"
      },
      {
        "txt": "{ OptionBuilder.numberOfArgs = num; return instance; } public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; }"
      },
      {
        "txt": "public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true;"
      },
      {
        "txt": "return instance; } public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription;"
      },
      {
        "txt": "return instance; } public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } public static Option create() throws IllegalArgumentException { if (longopt == null) {"
      },
      {
        "txt": "throw new IllegalArgumentException(\"must specify longopt\"); } return create(null); } public static Option create(String opt) throws IllegalArgumentException { <extra_id_0> option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep);"
      },
      {
        "txt": "option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); OptionBuilder.reset(); return option; }"
      }
    ]
  },
  {
    "id": 157,
    "file_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
    "start-bug-line": 359,
    "end-bug-line": 359,
    "bug": "",
    "fix": "} finally {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; public final class OptionBuilder { private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg;"
      },
      {
        "txt": "private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); private OptionBuilder() { } private static void reset() { description = null; argName = \"arg\"; longopt = null;"
      },
      {
        "txt": "type = null; required = false; numberOfArgs = Option.UNINITIALIZED; optionalArg = false; valuesep = (char) 0; } public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance;"
      },
      {
        "txt": "} public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance;"
      },
      {
        "txt": "} public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance;"
      },
      {
        "txt": "} public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance;"
      },
      {
        "txt": "} public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance;"
      },
      {
        "txt": "} public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true;"
      },
      {
        "txt": "return instance; } public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs(int numArgs) {"
      },
      {
        "txt": "OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } public static OptionBuilder withDescription(String newDescription)"
      },
      {
        "txt": "{ OptionBuilder.description = newDescription; return instance; } public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } public static Option create() throws IllegalArgumentException {"
      },
      {
        "txt": "if (longopt == null) { OptionBuilder.reset(); throw new IllegalArgumentException(\"must specify longopt\"); } return create(null); } public static Option create(String opt) throws IllegalArgumentException { Option option = new Option(opt, description);"
      },
      {
        "txt": "option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); <extra_id_0> OptionBuilder.reset(); return option; } }"
      }
    ]
  },
  {
    "id": 158,
    "file_path": "src/java/org/apache/commons/cli/OptionBuilder.java",
    "start-bug-line": 361,
    "end-bug-line": 361,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "public final class OptionBuilder { private static String longopt; private static String description; private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep;"
      },
      {
        "txt": "private static OptionBuilder instance = new OptionBuilder(); private OptionBuilder() { } private static void reset() { description = null; argName = \"arg\"; longopt = null; type = null;"
      },
      {
        "txt": "required = false; numberOfArgs = Option.UNINITIALIZED; optionalArg = false; valuesep = (char) 0; } public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; }"
      },
      {
        "txt": "public static OptionBuilder hasArg() { OptionBuilder.numberOfArgs = 1; return instance; } public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; }"
      },
      {
        "txt": "public static OptionBuilder withArgName(String name) { OptionBuilder.argName = name; return instance; } public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; }"
      },
      {
        "txt": "public static OptionBuilder withValueSeparator(char sep) { OptionBuilder.valuesep = sep; return instance; } public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; }"
      },
      {
        "txt": "public static OptionBuilder isRequired(boolean newRequired) { OptionBuilder.required = newRequired; return instance; } public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; }"
      },
      {
        "txt": "public static OptionBuilder hasArgs(int num) { OptionBuilder.numberOfArgs = num; return instance; } public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance;"
      },
      {
        "txt": "} public static OptionBuilder hasOptionalArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs;"
      },
      {
        "txt": "OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } public static OptionBuilder withDescription(String newDescription) {"
      },
      {
        "txt": "OptionBuilder.description = newDescription; return instance; } public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } public static Option create() throws IllegalArgumentException { if (longopt == null)"
      },
      {
        "txt": "{ OptionBuilder.reset(); throw new IllegalArgumentException(\"must specify longopt\"); } return create(null); } public static Option create(String opt) throws IllegalArgumentException { Option option = new Option(opt, description); option.setLongOpt(longopt);"
      },
      {
        "txt": "option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); OptionBuilder.reset(); <extra_id_0> return option; } }"
      }
    ]
  }
]
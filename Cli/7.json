[
  {
    "id": 85,
    "file_path": "src/java/org/apache/commons/cli2/builder/PatternBuilder.java",
    "start-bug-line": 19,
    "end-bug-line": 19,
    "bug": "import java.util.HashSet;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.builder; <extra_id_0> import java.util.Iterator; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.validation.ClassValidator; import org.apache.commons.cli2.validation.DateValidator;"
      },
      {
        "txt": "import org.apache.commons.cli2.validation.ClassValidator; import org.apache.commons.cli2.validation.DateValidator; import org.apache.commons.cli2.validation.FileValidator; import org.apache.commons.cli2.validation.NumberValidator; import org.apache.commons.cli2.validation.UrlValidator; import org.apache.commons.cli2.validation.Validator; public class PatternBuilder { private final GroupBuilder gbuilder; private final DefaultOptionBuilder obuilder; private final ArgumentBuilder abuilder;"
      },
      {
        "txt": "public PatternBuilder() { this( new GroupBuilder(), new DefaultOptionBuilder(), new ArgumentBuilder()); } public PatternBuilder( final GroupBuilder gbuilder, final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder) {"
      },
      {
        "txt": "this.gbuilder = gbuilder; this.obuilder = obuilder; this.abuilder = abuilder; } private final Set options = new HashSet(); public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); }"
      },
      {
        "txt": "else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; }"
      },
      {
        "txt": "public PatternBuilder reset() { options.clear(); return this; } private void createOption( final char type, final boolean required, final char opt) { final Argument argument; if (type != ' ') {"
      },
      {
        "txt": "abuilder.reset(); abuilder.withValidator(validator(type)); if (required) { abuilder.withMinimum(1); } if (type != '*') { abuilder.withMaximum(1); } argument = abuilder.create(); }"
      },
      {
        "txt": "else { argument = null; } obuilder.reset(); obuilder.withArgument(argument); obuilder.withShortName(String.valueOf(opt)); obuilder.withRequired(required); options.add(obuilder.create()); } public void withPattern(final String pattern) {"
      },
      {
        "txt": "int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true;"
      },
      {
        "txt": "break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' :"
      },
      {
        "txt": "type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; }"
      },
      {
        "txt": "} if (opt != ' ') { createOption(type, required, opt); } } private static Validator validator(final char c) { switch (c) { case '@' : final ClassValidator classv = new ClassValidator(); classv.setInstance(true);"
      },
      {
        "txt": "return classv; case '+' : final ClassValidator instancev = new ClassValidator(); return instancev; case '%' : return NumberValidator.getNumberInstance(); case '#' : return DateValidator.getDateInstance(); case '<' : final FileValidator existingv = new FileValidator();"
      },
      {
        "txt": "existingv.setExisting(true); existingv.setFile(true); return existingv; case '>' : case '*' : return new FileValidator(); case '/' : return new UrlValidator(); default : return null;"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 86,
    "file_path": "src/java/org/apache/commons/cli2/builder/PatternBuilder.java",
    "start-bug-line": 21,
    "end-bug-line": 21,
    "bug": "",
    "fix": "import java.util.LinkedHashSet;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.builder; import java.util.HashSet; import java.util.Iterator; <extra_id_0> import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.validation.ClassValidator; import org.apache.commons.cli2.validation.DateValidator; import org.apache.commons.cli2.validation.FileValidator; import org.apache.commons.cli2.validation.NumberValidator;"
      },
      {
        "txt": "import org.apache.commons.cli2.validation.FileValidator; import org.apache.commons.cli2.validation.NumberValidator; import org.apache.commons.cli2.validation.UrlValidator; import org.apache.commons.cli2.validation.Validator; public class PatternBuilder { private final GroupBuilder gbuilder; private final DefaultOptionBuilder obuilder; private final ArgumentBuilder abuilder; public PatternBuilder() { this("
      },
      {
        "txt": "new GroupBuilder(), new DefaultOptionBuilder(), new ArgumentBuilder()); } public PatternBuilder( final GroupBuilder gbuilder, final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder) { this.gbuilder = gbuilder; this.obuilder = obuilder;"
      },
      {
        "txt": "this.abuilder = abuilder; } private final Set options = new HashSet(); public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else { gbuilder.reset();"
      },
      {
        "txt": "for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option; } public PatternBuilder reset() { options.clear();"
      },
      {
        "txt": "return this; } private void createOption( final char type, final boolean required, final char opt) { final Argument argument; if (type != ' ') { abuilder.reset(); abuilder.withValidator(validator(type));"
      },
      {
        "txt": "if (required) { abuilder.withMinimum(1); } if (type != '*') { abuilder.withMaximum(1); } argument = abuilder.create(); } else { argument = null;"
      },
      {
        "txt": "} obuilder.reset(); obuilder.withArgument(argument); obuilder.withShortName(String.valueOf(opt)); obuilder.withRequired(required); options.add(obuilder.create()); } public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' ';"
      },
      {
        "txt": "char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' : required = true; break; case '@' :"
      },
      {
        "txt": "case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' : case '/' : type = ch; break;"
      },
      {
        "txt": "default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch; } } if (opt != ' ') {"
      },
      {
        "txt": "createOption(type, required, opt); } } private static Validator validator(final char c) { switch (c) { case '@' : final ClassValidator classv = new ClassValidator(); classv.setInstance(true); return classv; case '+' :"
      },
      {
        "txt": "final ClassValidator instancev = new ClassValidator(); return instancev; case '%' : return NumberValidator.getNumberInstance(); case '#' : return DateValidator.getDateInstance(); case '<' : final FileValidator existingv = new FileValidator(); existingv.setExisting(true); existingv.setFile(true);"
      },
      {
        "txt": "return existingv; case '>' : case '*' : return new FileValidator(); case '/' : return new UrlValidator(); default : return null; } }"
      }
    ]
  },
  {
    "id": 87,
    "file_path": "src/java/org/apache/commons/cli2/builder/PatternBuilder.java",
    "start-bug-line": 67,
    "end-bug-line": 67,
    "bug": "private final Set options = new HashSet();",
    "fix": "private final Set options = new LinkedHashSet();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.builder; import java.util.HashSet; import java.util.Iterator;"
      },
      {
        "txt": "import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.validation.ClassValidator; import org.apache.commons.cli2.validation.DateValidator; import org.apache.commons.cli2.validation.FileValidator; import org.apache.commons.cli2.validation.NumberValidator; import org.apache.commons.cli2.validation.UrlValidator; import org.apache.commons.cli2.validation.Validator; public class PatternBuilder {"
      },
      {
        "txt": "private final GroupBuilder gbuilder; private final DefaultOptionBuilder obuilder; private final ArgumentBuilder abuilder; public PatternBuilder() { this( new GroupBuilder(), new DefaultOptionBuilder(), new ArgumentBuilder()); } public PatternBuilder("
      },
      {
        "txt": "final DefaultOptionBuilder obuilder, final ArgumentBuilder abuilder) { this.gbuilder = gbuilder; this.obuilder = obuilder; this.abuilder = abuilder; } <extra_id_0> public Option create() { final Option option; if (options.size() == 1) { option = (Option)options.iterator().next(); } else {"
      },
      {
        "txt": "} else { gbuilder.reset(); for (final Iterator i = options.iterator(); i.hasNext();) { gbuilder.withOption((Option)i.next()); } option = gbuilder.create(); } reset(); return option;"
      },
      {
        "txt": "} public PatternBuilder reset() { options.clear(); return this; } private void createOption( final char type, final boolean required, final char opt) { final Argument argument;"
      },
      {
        "txt": "if (type != ' ') { abuilder.reset(); abuilder.withValidator(validator(type)); if (required) { abuilder.withMinimum(1); } if (type != '*') { abuilder.withMaximum(1); } argument = abuilder.create();"
      },
      {
        "txt": "} else { argument = null; } obuilder.reset(); obuilder.withArgument(argument); obuilder.withShortName(String.valueOf(opt)); obuilder.withRequired(required); options.add(obuilder.create()); }"
      },
      {
        "txt": "public void withPattern(final String pattern) { int sz = pattern.length(); char opt = ' '; char ch = ' '; char type = ' '; boolean required = false; for (int i = 0; i < sz; i++) { ch = pattern.charAt(i); switch (ch) { case '!' :"
      },
      {
        "txt": "required = true; break; case '@' : case ':' : case '%' : case '+' : case '#' : case '<' : case '>' : case '*' :"
      },
      {
        "txt": "case '/' : type = ch; break; default : if (opt != ' ') { createOption(type, required, opt); required = false; type = ' '; } opt = ch;"
      },
      {
        "txt": "} } if (opt != ' ') { createOption(type, required, opt); } } private static Validator validator(final char c) { switch (c) { case '@' : final ClassValidator classv = new ClassValidator();"
      },
      {
        "txt": "classv.setInstance(true); return classv; case '+' : final ClassValidator instancev = new ClassValidator(); return instancev; case '%' : return NumberValidator.getNumberInstance(); case '#' : return DateValidator.getDateInstance(); case '<' :"
      },
      {
        "txt": "final FileValidator existingv = new FileValidator(); existingv.setExisting(true); existingv.setFile(true); return existingv; case '>' : case '*' : return new FileValidator(); case '/' : return new UrlValidator(); default :"
      },
      {
        "txt": "return null; } }"
      }
    ]
  }
]
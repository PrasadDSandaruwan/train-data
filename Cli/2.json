[
  {
    "id": 80,
    "file_path": "src/java/org/apache/commons/cli/PosixParser.java",
    "start-bug-line": 305,
    "end-bug-line": 305,
    "bug": "tokens.add(\"-\" + ch);",
    "fix": "tokens.add(token); break;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; public class PosixParser extends Parser {"
      },
      {
        "txt": "private ArrayList tokens = new ArrayList(); private boolean eatTheRest; private Option currentOption; private Options options; private void init() { eatTheRest = false; tokens.clear(); currentOption = null; }"
      },
      {
        "txt": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init(); this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); String token; while (iter.hasNext()) { token = (String) iter.next();"
      },
      {
        "txt": "if (token.startsWith(\"--\")) { if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else {"
      },
      {
        "txt": "tokens.add(token); } } else if (\"-\".equals(token)) { processSingleHyphen(token); } else if (token.startsWith(\"-\")) { int tokenLength = token.length();"
      },
      {
        "txt": "if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption);"
      },
      {
        "txt": "} } else { if (stopAtNonOption) { process(token); } else {"
      },
      {
        "txt": "tokens.add(token); } } gobble(iter); } return (String[]) tokens.toArray(new String[] { }); } private void gobble(Iterator iter) { if (eatTheRest)"
      },
      {
        "txt": "{ while (iter.hasNext()) { tokens.add(iter.next()); } } } private void process(String value) { if ((currentOption != null) && currentOption.hasArg())"
      },
      {
        "txt": "{ if (currentOption.hasArg()) { tokens.add(value); currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); }"
      },
      {
        "txt": "} else { eatTheRest = true; tokens.add(\"--\"); tokens.add(value); } } private void processSingleHyphen(String hyphen) {"
      },
      {
        "txt": "tokens.add(hyphen); } private void processOptionToken(String token, boolean stopAtNonOption) { if (this.options.hasOption(token)) { currentOption = this.options.getOption(token); tokens.add(token); } else if (stopAtNonOption)"
      },
      {
        "txt": "{ eatTheRest = true; } } protected void burstToken(String token, boolean stopAtNonOption) { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i));"
      },
      {
        "txt": "boolean hasOption = options.hasOption(ch); if (hasOption) { tokens.add(\"-\" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; }"
      },
      {
        "txt": "else if (stopAtNonOption) { process(token.substring(i)); } else { <extra_id_0> } } } }"
      }
    ]
  },
  {
    "id": 81,
    "file_path": "src/java/org/apache/commons/cli/PosixParser.java",
    "start-bug-line": 309,
    "end-bug-line": 309,
    "bug": "",
    "fix": "}",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.ArrayList; import java.util.Arrays; import java.util.Iterator; public class PosixParser extends Parser { private ArrayList tokens = new ArrayList(); private boolean eatTheRest; private Option currentOption; private Options options;"
      },
      {
        "txt": "private void init() { eatTheRest = false; tokens.clear(); currentOption = null; } protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { init();"
      },
      {
        "txt": "this.options = options; Iterator iter = Arrays.asList(arguments).iterator(); String token; while (iter.hasNext()) { token = (String) iter.next(); if (token.startsWith(\"--\")) { if (token.indexOf('=') != -1) {"
      },
      {
        "txt": "tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } } else if (\"-\".equals(token))"
      },
      {
        "txt": "{ processSingleHyphen(token); } else if (token.startsWith(\"-\")) { int tokenLength = token.length(); if (tokenLength == 2) { processOptionToken(token, stopAtNonOption); }"
      },
      {
        "txt": "else if (options.hasOption(token)) { tokens.add(token); } else { burstToken(token, stopAtNonOption); } } else {"
      },
      {
        "txt": "if (stopAtNonOption) { process(token); } else { tokens.add(token); } } gobble(iter);"
      },
      {
        "txt": "} return (String[]) tokens.toArray(new String[] { }); } private void gobble(Iterator iter) { if (eatTheRest) { while (iter.hasNext()) { tokens.add(iter.next());"
      },
      {
        "txt": "} } } private void process(String value) { if ((currentOption != null) && currentOption.hasArg()) { if (currentOption.hasArg()) { tokens.add(value);"
      },
      {
        "txt": "currentOption = null; } else if (currentOption.hasArgs()) { tokens.add(value); } } else { eatTheRest = true;"
      },
      {
        "txt": "tokens.add(\"--\"); tokens.add(value); } } private void processSingleHyphen(String hyphen) { tokens.add(hyphen); } private void processOptionToken(String token, boolean stopAtNonOption) {"
      },
      {
        "txt": "if (this.options.hasOption(token)) { currentOption = this.options.getOption(token); tokens.add(token); } else if (stopAtNonOption) { eatTheRest = true; } }"
      },
      {
        "txt": "protected void burstToken(String token, boolean stopAtNonOption) { int tokenLength = token.length(); for (int i = 1; i < tokenLength; i++) { String ch = String.valueOf(token.charAt(i)); boolean hasOption = options.hasOption(ch); if (hasOption) { tokens.add(\"-\" + ch);"
      },
      {
        "txt": "currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { process(token.substring(i));"
      },
      {
        "txt": "else { tokens.add(\"-\" + ch); } } } <extra_id_0>"
      }
    ]
  }
]
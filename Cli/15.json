[
  {
    "id": 104,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 117,
    "end-bug-line": 118,
    "bug": "if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues;",
    "fix": "if (defaultValues == null || defaultValues.isEmpty()) { defaultValues = (List) this.defaultValues.get(option);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine;"
      },
      {
        "txt": "import org.apache.commons.cli2.option.PropertyOption; import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Map optionToProperties = new HashMap(); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap();"
      },
      {
        "txt": "private final Map defaultValues = new HashMap(); private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) {"
      },
      {
        "txt": "options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option);"
      },
      {
        "txt": "} List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public void addSwitch(final Option option, final boolean value) {"
      },
      {
        "txt": "addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present;"
      },
      {
        "txt": "public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); <extra_id_0> } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } return valueList == null ? Collections.EMPTY_LIST : valueList; }"
      },
      {
        "txt": "return valueList == null ? Collections.EMPTY_LIST : valueList; } public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public Boolean getSwitch(final Option option,"
      },
      {
        "txt": "final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; }"
      },
      {
        "txt": "public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public void addProperty(final Option option, final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties);"
      },
      {
        "txt": "} properties.setProperty(property, value); } public void addProperty(final String property, final String value) { addProperty(new PropertyOption(), property, value); } public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option);"
      },
      {
        "txt": "if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue); } public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; }"
      },
      {
        "txt": "return Collections.unmodifiableSet(properties.keySet()); } public Set getProperties() { return getProperties(new PropertyOption()); } public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true;"
      },
      {
        "txt": "} } return false; } public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\");"
      },
      {
        "txt": "} else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } } return buffer.toString(); } public List getOptions() {"
      },
      {
        "txt": "return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else {"
      },
      {
        "txt": "defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); }"
      },
      {
        "txt": "} public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 105,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 122,
    "end-bug-line": 124,
    "bug": "if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); }",
    "fix": "if (defaultValues != null && !defaultValues.isEmpty()) { if (valueList == null || valueList.isEmpty()) { valueList = defaultValues; } else {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator;"
      },
      {
        "txt": "import java.util.List; import java.util.Map; import java.util.Properties; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine; import org.apache.commons.cli2.option.PropertyOption; import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper;"
      },
      {
        "txt": "public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Map optionToProperties = new HashMap(); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap(); private final Map defaultSwitches = new HashMap(); private final List normalised;"
      },
      {
        "txt": "private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {"
      },
      {
        "txt": "nameToOption.put(i.next(), option); } } public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) {"
      },
      {
        "txt": "valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));"
      },
      {
        "txt": "} else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger);"
      },
      {
        "txt": "public List getValues(final Option option, List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } <extra_id_0> return valueList == null ? Collections.EMPTY_LIST : valueList; } public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST;"
      },
      {
        "txt": "if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue;"
      },
      {
        "txt": "} if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public void addProperty(final Option option,"
      },
      {
        "txt": "final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public void addProperty(final String property, final String value) {"
      },
      {
        "txt": "addProperty(new PropertyOption(), property, value); } public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue);"
      },
      {
        "txt": "} public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public Set getProperties() { return getProperties(new PropertyOption());"
      },
      {
        "txt": "} public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; }"
      },
      {
        "txt": "public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) {"
      },
      {
        "txt": "buffer.append(' '); } } return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet());"
      },
      {
        "txt": "} public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option,"
      },
      {
        "txt": "final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 106,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 127,
    "end-bug-line": 127,
    "bug": "",
    "fix": "if (defaultValues.size() > valueList.size()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties;"
      },
      {
        "txt": "import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine; import org.apache.commons.cli2.option.PropertyOption; import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Map optionToProperties = new HashMap();"
      },
      {
        "txt": "private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap(); private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) {"
      },
      {
        "txt": "this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } }"
      },
      {
        "txt": "public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); }"
      },
      {
        "txt": "valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); }"
      },
      {
        "txt": "} public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, List defaultValues) {"
      },
      {
        "txt": "if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } <extra_id_0> return valueList == null ? Collections.EMPTY_LIST : valueList; } public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST;"
      },
      {
        "txt": "if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue;"
      },
      {
        "txt": "} if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public void addProperty(final Option option,"
      },
      {
        "txt": "final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public void addProperty(final String property, final String value) {"
      },
      {
        "txt": "addProperty(new PropertyOption(), property, value); } public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue);"
      },
      {
        "txt": "} public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public Set getProperties() { return getProperties(new PropertyOption());"
      },
      {
        "txt": "} public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; }"
      },
      {
        "txt": "public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) {"
      },
      {
        "txt": "buffer.append(' '); } } return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet());"
      },
      {
        "txt": "} public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option,"
      },
      {
        "txt": "final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 107,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 128,
    "end-bug-line": 128,
    "bug": "",
    "fix": "valueList = new ArrayList(valueList); for (int i=valueList.size(); i<defaultValues.size(); i++) { valueList.add(defaultValues.get(i)); } } } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList; import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties;"
      },
      {
        "txt": "import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine; import org.apache.commons.cli2.option.PropertyOption; import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Map optionToProperties = new HashMap();"
      },
      {
        "txt": "private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap(); private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) {"
      },
      {
        "txt": "this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option); nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } }"
      },
      {
        "txt": "public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); } List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); }"
      },
      {
        "txt": "valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option); if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); }"
      },
      {
        "txt": "} public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; } public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, List defaultValues) {"
      },
      {
        "txt": "if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) { valueList = (List) this.defaultValues.get(option); } <extra_id_0> return valueList == null ? Collections.EMPTY_LIST : valueList; } public List getUndefaultedValues(Option option) { List valueList = (List) values.get(option); if (valueList == null) { valueList = Collections.EMPTY_LIST;"
      },
      {
        "txt": "if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue;"
      },
      {
        "txt": "} if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public String getProperty(final String property) { return getProperty(new PropertyOption(), property); } public void addProperty(final Option option,"
      },
      {
        "txt": "final String property, final String value) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { properties = new Properties(); optionToProperties.put(option, properties); } properties.setProperty(property, value); } public void addProperty(final String property, final String value) {"
      },
      {
        "txt": "addProperty(new PropertyOption(), property, value); } public String getProperty(final Option option, final String property, final String defaultValue) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return defaultValue; } return properties.getProperty(property, defaultValue);"
      },
      {
        "txt": "} public Set getProperties(final Option option) { Properties properties = (Properties) optionToProperties.get(option); if (properties == null) { return Collections.EMPTY_SET; } return Collections.unmodifiableSet(properties.keySet()); } public Set getProperties() { return getProperties(new PropertyOption());"
      },
      {
        "txt": "} public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) { final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; }"
      },
      {
        "txt": "public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) { final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) {"
      },
      {
        "txt": "buffer.append(' '); } } return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet());"
      },
      {
        "txt": "} public void setDefaultValues(final Option option, final List defaults) { if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option,"
      },
      {
        "txt": "final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option); } else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  }
]
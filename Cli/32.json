[
  {
    "id": 177,
    "file_path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 937,
    "end-bug-line": 941,
    "bug": "while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; }",
    "fix": "",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Arrays;"
      },
      {
        "txt": "import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3;"
      },
      {
        "txt": "public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\");"
      },
      {
        "txt": "public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) { this.defaultWidth = width; } public int getWidth()"
      },
      {
        "txt": "{ return defaultWidth; } public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public int getLeftPadding() { return defaultLeftPad;"
      },
      {
        "txt": "} public void setDescPadding(int padding) { this.defaultDescPad = padding; } public int getDescPadding() { return defaultDescPad; } public void setSyntaxPrefix(String prefix)"
      },
      {
        "txt": "{ this.defaultSyntaxPrefix = prefix; } public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setNewLine(String newline) { this.defaultNewLine = newline;"
      },
      {
        "txt": "} public String getNewLine() { return defaultNewLine; } public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public String getOptPrefix()"
      },
      {
        "txt": "{ return defaultOptPrefix; } public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public String getLongOptPrefix() { return defaultLongOptPrefix;"
      },
      {
        "txt": "} public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } public String getLongOptSeparator() { return longOptSeparator; } public void setArgName(String name)"
      },
      {
        "txt": "{ this.defaultArgName = name; } public String getArgName() { return defaultArgName; } public Comparator getOptionComparator() { return optionComparator;"
      },
      {
        "txt": "} public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator;"
      },
      {
        "txt": "} } public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); }"
      },
      {
        "txt": "public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) {"
      },
      {
        "txt": "printHelp(width, cmdLineSyntax, header, options, footer, false); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax,"
      },
      {
        "txt": "String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))"
      },
      {
        "txt": "{ throw new IllegalArgumentException(\"cmdLineSyntax not provided\"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax);"
      },
      {
        "txt": "} if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); }"
      },
      {
        "txt": "} public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \"); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) {"
      },
      {
        "txt": "option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } }"
      },
      {
        "txt": "else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(\" \"); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());"
      },
      {
        "txt": "} private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) { if (!group.isRequired()) { buff.append(\"[\"); } List optList = new ArrayList(group.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();)"
      },
      {
        "txt": "{ appendOption(buff, (Option) i.next(), true); if (i.hasNext()) { buff.append(\" | \"); } } if (!group.isRequired()) { buff.append(\"]\");"
      },
      {
        "txt": "} } private void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) {"
      },
      {
        "txt": "buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0)) { buff.append(option.getOpt() == null ? longOptSeparator : \" \"); buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");"
      },
      {
        "txt": "} if (!required) { buff.append(\"]\"); } } public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);"
      },
      {
        "txt": "} public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) {"
      },
      {
        "txt": "printWrapped(pw, width, 0, text); } public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) {"
      },
      {
        "txt": "final String lpad = createPadding(leftPad); final String dpad = createPadding(descPad); int max = 0; StringBuffer optBuf; List prefixList = new ArrayList(); List optList = options.helpOptions(); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next();"
      },
      {
        "txt": "optBuf = new StringBuffer(); if (option.getOpt() == null) { optBuf.append(lpad).append(\" \" + defaultLongOptPrefix).append(option.getLongOpt()); } else { optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); if (option.hasLongOpt()) {"
      },
      {
        "txt": "optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt()); } } if (option.hasArg()) { String argName = option.getArgName(); if (argName != null && argName.length() == 0) { optBuf.append(' '); }"
      },
      {
        "txt": "else { optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \"); optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\"); } } prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max; } int x = 0;"
      },
      {
        "txt": "for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString()); if (optBuf.length() < max) { optBuf.append(createPadding(max - optBuf.length())); } optBuf.append(dpad); int nextLineTabStop = max + descPad;"
      },
      {
        "txt": "if (option.getDescription() != null) { optBuf.append(option.getDescription()); } renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); if (i.hasNext()) { sb.append(defaultNewLine); } }"
      },
      {
        "txt": "return sb; } protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb;"
      },
      {
        "txt": "} sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { nextLineTabStop = 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim();"
      },
      {
        "txt": "pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; } if ((text.length() > width) && (pos == nextLineTabStop - 1)) { pos = width; }"
      },
      {
        "txt": "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } protected int findWrapPos(String text, int width, int startPos) { int pos; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1;"
      },
      {
        "txt": "} else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) {"
      },
      {
        "txt": "} if (pos > startPos) { return pos; } pos = startPos + width; <extra_id_0> return pos == text.length() ? -1 : pos; } protected String createPadding(int len) { char[] padding = new char[len]; Arrays.fill(padding, ' ');"
      },
      {
        "txt": "char[] padding = new char[len]; Arrays.fill(padding, ' '); return new String(padding); } protected String rtrim(String s) { if ((s == null) || (s.length() == 0)) { return s; }"
      },
      {
        "txt": "int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { --pos; } return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2)"
      },
      {
        "txt": "{ Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey()); } }"
      }
    ]
  }
]
[
  {
    "id": 185,
    "file_path": "src/main/java/org/apache/commons/cli/OptionGroup.java",
    "start-bug-line": 22,
    "end-bug-line": 22,
    "bug": "import java.util.HashMap;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.Collection; <extra_id_0> import java.util.Iterator; import java.util.Map; public class OptionGroup implements Serializable { private static final long serialVersionUID = 1L; private final Map<String, Option> optionMap = new HashMap<String, Option>();"
      },
      {
        "txt": "private static final long serialVersionUID = 1L; private final Map<String, Option> optionMap = new HashMap<String, Option>(); private String selected; private boolean required; public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } public Collection<String> getNames()"
      },
      {
        "txt": "{ return optionMap.keySet(); } public Collection<Option> getOptions() { return optionMap.values(); } public void setSelected(Option option) throws AlreadySelectedException { if (option == null)"
      },
      {
        "txt": "{ selected = null; return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else {"
      },
      {
        "txt": "throw new AlreadySelectedException(this, option); } } public String getSelected() { return selected; } public void setRequired(boolean required) { this.required = required;"
      },
      {
        "txt": "} public boolean isRequired() { return required; } @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator();"
      },
      {
        "txt": "buff.append(\"[\"); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) { buff.append(\"-\"); buff.append(option.getOpt()); } else"
      },
      {
        "txt": "{ buff.append(\"--\"); buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append(\" \"); buff.append(option.getDescription()); } if (iter.hasNext())"
      },
      {
        "txt": "{ buff.append(\", \"); } } buff.append(\"]\"); return buff.toString(); }"
      }
    ]
  },
  {
    "id": 186,
    "file_path": "src/main/java/org/apache/commons/cli/OptionGroup.java",
    "start-bug-line": 24,
    "end-bug-line": 24,
    "bug": "",
    "fix": "import java.util.LinkedHashMap;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; <extra_id_0> public class OptionGroup implements Serializable { private static final long serialVersionUID = 1L; private final Map<String, Option> optionMap = new HashMap<String, Option>(); private String selected; private boolean required;"
      },
      {
        "txt": "private String selected; private boolean required; public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; } public Collection<String> getNames() { return optionMap.keySet();"
      },
      {
        "txt": "} public Collection<Option> getOptions() { return optionMap.values(); } public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null;"
      },
      {
        "txt": "return; } if (selected == null || selected.equals(option.getKey())) { selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); }"
      },
      {
        "txt": "} public String getSelected() { return selected; } public void setRequired(boolean required) { this.required = required; } public boolean isRequired()"
      },
      {
        "txt": "{ return required; } @Override public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append(\"[\"); while (iter.hasNext())"
      },
      {
        "txt": "{ Option option = iter.next(); if (option.getOpt() != null) { buff.append(\"-\"); buff.append(option.getOpt()); } else { buff.append(\"--\");"
      },
      {
        "txt": "buff.append(option.getLongOpt()); } if (option.getDescription() != null) { buff.append(\" \"); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append(\", \");"
      },
      {
        "txt": "} } buff.append(\"]\"); return buff.toString(); }"
      }
    ]
  },
  {
    "id": 187,
    "file_path": "src/main/java/org/apache/commons/cli/OptionGroup.java",
    "start-bug-line": 37,
    "end-bug-line": 37,
    "bug": "private final Map<String, Option> optionMap = new HashMap<String, Option>();",
    "fix": "private final Map<String, Option> optionMap = new LinkedHashMap<String, Option>();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable;"
      },
      {
        "txt": "import java.util.HashMap; import java.util.Iterator; import java.util.Map; public class OptionGroup implements Serializable { private static final long serialVersionUID = 1L; <extra_id_0> private String selected; private boolean required; public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this;"
      },
      {
        "txt": "optionMap.put(option.getKey(), option); return this; } public Collection<String> getNames() { return optionMap.keySet(); } public Collection<Option> getOptions() { return optionMap.values();"
      },
      {
        "txt": "} public void setSelected(Option option) throws AlreadySelectedException { if (option == null) { selected = null; return; } if (selected == null || selected.equals(option.getKey())) {"
      },
      {
        "txt": "selected = option.getKey(); } else { throw new AlreadySelectedException(this, option); } } public String getSelected() { return selected;"
      },
      {
        "txt": "} public void setRequired(boolean required) { this.required = required; } public boolean isRequired() { return required; } @Override"
      },
      {
        "txt": "public String toString() { StringBuilder buff = new StringBuilder(); Iterator<Option> iter = getOptions().iterator(); buff.append(\"[\"); while (iter.hasNext()) { Option option = iter.next(); if (option.getOpt() != null) {"
      },
      {
        "txt": "buff.append(\"-\"); buff.append(option.getOpt()); } else { buff.append(\"--\"); buff.append(option.getLongOpt()); } if (option.getDescription() != null) {"
      },
      {
        "txt": "buff.append(\" \"); buff.append(option.getDescription()); } if (iter.hasNext()) { buff.append(\", \"); } } buff.append(\"]\"); return buff.toString();"
      }
    ]
  },
  {
    "id": 188,
    "file_path": "src/main/java/org/apache/commons/cli/Options.java",
    "start-bug-line": 60,
    "end-bug-line": 60,
    "bug": "private final Map<String, OptionGroup> optionGroups = new java.util.HashMap<String, OptionGroup>();",
    "fix": "private final Map<String, OptionGroup> optionGroups = new LinkedHashMap<String, OptionGroup>();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashSet; import java.util.LinkedHashMap; import java.util.List;"
      },
      {
        "txt": "public class Options implements Serializable { private static final long serialVersionUID = 1L; private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>(); <extra_id_0> public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); }"
      },
      {
        "txt": "requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false); addOption(option); optionGroups.put(option.getKey(), group); } return this; }"
      },
      {
        "txt": "Collection<OptionGroup> getOptionGroups() { return new HashSet<OptionGroup>(optionGroups.values()); } public Options addOption(String opt, String description) { addOption(opt, null, false, description); return this; } public Options addOption(String opt, boolean hasArg, String description)"
      },
      {
        "txt": "{ addOption(opt, null, hasArg, description); return this; } public Options addOption(String opt, String longOpt, boolean hasArg, String description) { addOption(new Option(opt, longOpt, hasArg, description)); return this; } public Options addOption(Option opt)"
      },
      {
        "txt": "{ String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt); } if (opt.isRequired()) { if (requiredOpts.contains(key)) {"
      },
      {
        "txt": "requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt); return this; } public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions());"
      },
      {
        "txt": "} List<Option> helpOptions() { return new ArrayList<Option>(shortOpts.values()); } public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } public Option getOption(String opt)"
      },
      {
        "txt": "{ opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt); } return longOpts.get(opt); } public List<String> getMatchingOptions(String opt) {"
      },
      {
        "txt": "opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); if (longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); } for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) {"
      },
      {
        "txt": "matchingOpts.add(longOpt); } } return matchingOpts; } public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); }"
      },
      {
        "txt": "public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); }"
      },
      {
        "txt": "public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(\"[ Options: [ short \"); buf.append(shortOpts.toString());"
      },
      {
        "txt": "buf.append(\" ] [ long \"); buf.append(longOpts); buf.append(\" ]\"); return buf.toString(); }"
      }
    ]
  }
]
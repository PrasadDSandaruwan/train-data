[
  {
    "id": 161,
    "file_path": "src/java/org/apache/commons/cli/Parser.java",
    "start-bug-line": 290,
    "end-bug-line": 290,
    "bug": "break;",
    "fix": "continue;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.ArrayList; import java.util.Arrays; import java.util.Enumeration; import java.util.Iterator; import java.util.List; import java.util.ListIterator; import java.util.Properties;"
      },
      {
        "txt": "public abstract class Parser implements CommandLineParser { protected CommandLine cmd; private Options options; private List requiredOptions; protected void setOptions(final Options options) { this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); }"
      },
      {
        "txt": "protected Options getOptions() { return options; } protected List getRequiredOptions() { return requiredOptions; } protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption) throws ParseException; public CommandLine parse(Options options, String[] arguments) throws ParseException"
      },
      {
        "txt": "{ return parse(options, arguments, null, false); } public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { return parse(options, arguments, properties, false); } public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption);"
      },
      {
        "txt": "} public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)"
      },
      {
        "txt": "{ OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); } setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0];"
      },
      {
        "txt": "} List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator(); while (iterator.hasNext()) { String t = (String) iterator.next(); if (\"--\".equals(t)) { eatTheRest = true; }"
      },
      {
        "txt": "else if (\"-\".equals(t)) { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); }"
      },
      {
        "txt": "} else if (t.startsWith(\"-\")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else {"
      },
      {
        "txt": "processOption(t, iterator); } } else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; }"
      },
      {
        "txt": "} if (eatTheRest) { while (iterator.hasNext()) { String str = (String) iterator.next(); if (!\"--\".equals(str)) { cmd.addArg(str); }"
      },
      {
        "txt": "} } } processProperties(properties); checkRequiredOptions(); return cmd; } protected void processProperties(Properties properties) { if (properties == null)"
      },
      {
        "txt": "{ return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option); String value = properties.getProperty(option);"
      },
      {
        "txt": "if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {"
      },
      {
        "txt": "} } else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { <extra_id_0> } cmd.addOption(opt); } } } protected void checkRequiredOptions() throws MissingOptionException"
      },
      {
        "txt": "} protected void checkRequiredOptions() throws MissingOptionException { if (!getRequiredOptions().isEmpty()) { throw new MissingOptionException(getRequiredOptions()); } } public void processArgs(Option opt, ListIterator iter) throws ParseException {"
      },
      {
        "txt": "while (iter.hasNext()) { String str = (String) iter.next(); if (getOptions().hasOption(str) && str.startsWith(\"-\")) { iter.previous(); break; } try {"
      },
      {
        "txt": "opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } if (opt.getValues() == null && !opt.hasOptionalArg()) {"
      },
      {
        "txt": "throw new MissingArgumentException(opt); } } protected void processOption(String arg, ListIterator iter) throws ParseException { boolean hasOption = getOptions().hasOption(arg); if (!hasOption) { throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg, arg); }"
      },
      {
        "txt": "Option opt = (Option) getOptions().getOption(arg).clone(); if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); } if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) {"
      },
      {
        "txt": "getRequiredOptions().remove(group); } group.setSelected(opt); } if (opt.hasArg()) { processArgs(opt, iter); } cmd.addOption(opt); }"
      }
    ]
  }
]
[
  {
    "id": 83,
    "file_path": "src/java/org/apache/commons/cli/Parser.java",
    "start-bug-line": 298,
    "end-bug-line": 298,
    "bug": "StringBuffer buff = new StringBuffer();",
    "fix": "StringBuffer buff = new StringBuffer(\"Missing required option\"); buff.append(requiredOptions.size() == 1 ? \"\" : \"s\"); buff.append(\": \");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.Arrays; import java.util.Enumeration; import java.util.Iterator; import java.util.List; import java.util.ListIterator; import java.util.Properties; public abstract class Parser implements CommandLineParser { private CommandLine cmd; private Options options;"
      },
      {
        "txt": "private List requiredOptions; protected abstract String[] flatten(Options opts, String[] arguments, boolean stopAtNonOption); public CommandLine parse(Options options, String[] arguments) throws ParseException { return parse(options, arguments, null, false); } public CommandLine parse(Options options, String[] arguments, Properties properties)"
      },
      {
        "txt": "throws ParseException { return parse(options, arguments, properties, false); } public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException { return parse(options, arguments, null, stopAtNonOption); }"
      },
      {
        "txt": "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption) throws ParseException { this.options = options; for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); } requiredOptions = options.getRequiredOptions();"
      },
      {
        "txt": "cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(this.options, arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();"
      },
      {
        "txt": "while (iterator.hasNext()) { String t = (String) iterator.next(); if (\"--\".equals(t)) { eatTheRest = true; } else if (\"-\".equals(t)) { if (stopAtNonOption)"
      },
      {
        "txt": "{ eatTheRest = true; } else { cmd.addArg(t); } } else if (t.startsWith(\"-\")) {"
      },
      {
        "txt": "if (stopAtNonOption && !options.hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } }"
      },
      {
        "txt": "else { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } } if (eatTheRest) {"
      },
      {
        "txt": "while (iterator.hasNext()) { String str = (String) iterator.next(); if (!\"--\".equals(str)) { cmd.addArg(str); } } } }"
      },
      {
        "txt": "processProperties(properties); checkRequiredOptions(); return cmd; } private void processProperties(Properties properties) { if (properties == null) { return; }"
      },
      {
        "txt": "for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = options.getOption(option); String value = properties.getProperty(option); if (opt.hasArg()) { if ((opt.getValues() == null)"
      },
      {
        "txt": "|| (opt.getValues().length == 0)) { try { opt.addValue(value); } catch (RuntimeException exp) { } }"
      },
      {
        "txt": "} else if (!(\"yes\".equalsIgnoreCase(value) || \"true\".equalsIgnoreCase(value) || \"1\".equalsIgnoreCase(value))) { break; } cmd.addOption(opt); } }"
      },
      {
        "txt": "private void checkRequiredOptions() throws MissingOptionException { if (requiredOptions.size() > 0) { Iterator iter = requiredOptions.iterator(); <extra_id_0> while (iter.hasNext()) { buff.append(iter.next()); } throw new MissingOptionException(buff.toString()); }"
      },
      {
        "txt": "throw new MissingOptionException(buff.toString()); } } public void processArgs(Option opt, ListIterator iter) throws ParseException { while (iter.hasNext()) { String str = (String) iter.next(); if (options.hasOption(str) && str.startsWith(\"-\"))"
      },
      {
        "txt": "{ iter.previous(); break; } try { opt.addValue( Util.stripLeadingAndTrailingQuotes(str) ); } catch (RuntimeException exp) {"
      },
      {
        "txt": "iter.previous(); break; } } if ((opt.getValues() == null) && !opt.hasOptionalArg()) { throw new MissingArgumentException(\"Missing argument for option:\" + opt.getKey()); } }"
      },
      {
        "txt": "private void processOption(String arg, ListIterator iter) throws ParseException { boolean hasOption = options.hasOption(arg); if (!hasOption) { throw new UnrecognizedOptionException(\"Unrecognized option: \" + arg); } final Option opt = options.getOption(arg);"
      },
      {
        "txt": "if (opt.isRequired()) { requiredOptions.remove(opt.getKey()); } if (options.getOptionGroup(opt) != null) { OptionGroup group = options.getOptionGroup(opt); if (group.isRequired()) { requiredOptions.remove(group);"
      },
      {
        "txt": "} group.setSelected(opt); } if (opt.hasArg()) { processArgs(opt, iter); } cmd.addOption(opt); }"
      }
    ]
  }
]
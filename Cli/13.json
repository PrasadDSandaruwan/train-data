[
  {
    "id": 96,
    "file_path": "src/java/org/apache/commons/cli2/WriteableCommandLine.java",
    "start-bug-line": 47,
    "end-bug-line": 47,
    "bug": "",
    "fix": "List getUndefaultedValues(final Option option);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2; import java.util.List; public interface WriteableCommandLine extends CommandLine { void addOption(final Option option); void addValue(final Option option, final Object value); <extra_id_0> void setDefaultValues(final Option option, final List defaultValues); void addSwitch(final Option option, final boolean value) throws IllegalStateException; void setDefaultSwitch(final Option option, final Boolean defaultSwitch); void addProperty(final String property, final String value); boolean looksLikeOption(final String argument); }"
      }
    ]
  },
  {
    "id": 97,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 132,
    "end-bug-line": 132,
    "bug": "",
    "fix": "public List getUndefaultedValues(Option option) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine;"
      },
      {
        "txt": "import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Properties properties = new Properties(); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap();"
      },
      {
        "txt": "private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option);"
      },
      {
        "txt": "nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); }"
      },
      {
        "txt": "List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option);"
      },
      {
        "txt": "if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; }"
      },
      {
        "txt": "public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) {"
      },
      {
        "txt": "} if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } <extra_id_0> public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; }"
      },
      {
        "txt": "bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public void addProperty(final String property, final String value) { properties.setProperty(property, value);"
      },
      {
        "txt": "} public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } }"
      },
      {
        "txt": "return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public void setDefaultValues(final Option option, final List defaults) {"
      },
      {
        "txt": "if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option);"
      },
      {
        "txt": "} else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 98,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 133,
    "end-bug-line": 133,
    "bug": "",
    "fix": "List valueList = (List) values.get(option);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine;"
      },
      {
        "txt": "import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Properties properties = new Properties(); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap();"
      },
      {
        "txt": "private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option);"
      },
      {
        "txt": "nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); }"
      },
      {
        "txt": "List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option);"
      },
      {
        "txt": "if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; }"
      },
      {
        "txt": "public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) {"
      },
      {
        "txt": "} if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } <extra_id_0> public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; }"
      },
      {
        "txt": "bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public void addProperty(final String property, final String value) { properties.setProperty(property, value);"
      },
      {
        "txt": "} public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } }"
      },
      {
        "txt": "return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public void setDefaultValues(final Option option, final List defaults) {"
      },
      {
        "txt": "if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option);"
      },
      {
        "txt": "} else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 99,
    "file_path": "src/java/org/apache/commons/cli2/commandline/WriteableCommandLineImpl.java",
    "start-bug-line": 135,
    "end-bug-line": 135,
    "bug": "",
    "fix": "if (valueList == null) { valueList = Collections.EMPTY_LIST; }  return valueList; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.commandline; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.Collections; import java.util.HashMap; import java.util.Iterator; import java.util.List; import java.util.Map; import java.util.Properties; import java.util.Set; import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.WriteableCommandLine;"
      },
      {
        "txt": "import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; public class WriteableCommandLineImpl extends CommandLineImpl implements WriteableCommandLine { private final Properties properties = new Properties(); private final List options = new ArrayList(); private final Map nameToOption = new HashMap(); private final Map values = new HashMap(); private final Map switches = new HashMap(); private final Map defaultValues = new HashMap();"
      },
      {
        "txt": "private final Map defaultSwitches = new HashMap(); private final List normalised; private final Set prefixes; public WriteableCommandLineImpl(final Option rootOption, final List arguments) { this.prefixes = rootOption.getPrefixes(); this.normalised = arguments; } public void addOption(Option option) { options.add(option);"
      },
      {
        "txt": "nameToOption.put(option.getPreferredName(), option); for (Iterator i = option.getTriggers().iterator(); i.hasNext();) { nameToOption.put(i.next(), option); } } public void addValue(final Option option, final Object value) { if (option instanceof Argument) { addOption(option); }"
      },
      {
        "txt": "List valueList = (List) values.get(option); if (valueList == null) { valueList = new ArrayList(); values.put(option, valueList); } valueList.add(value); } public void addSwitch(final Option option, final boolean value) { addOption(option);"
      },
      {
        "txt": "if (switches.containsKey(option)) { throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET)); } else { switches.put(option, value ? Boolean.TRUE : Boolean.FALSE); } } public boolean hasOption(final Option option) { final boolean present = options.contains(option); return present; }"
      },
      {
        "txt": "public Option getOption(final String trigger) { return (Option) nameToOption.get(trigger); } public List getValues(final Option option, final List defaultValues) { List valueList = (List) values.get(option); if ((valueList == null) || valueList.isEmpty()) { valueList = defaultValues; } if ((valueList == null) || valueList.isEmpty()) {"
      },
      {
        "txt": "} if (valueList == null) { valueList = Collections.EMPTY_LIST; } return valueList; } <extra_id_0> public Boolean getSwitch(final Option option, final Boolean defaultValue) { Boolean bool = (Boolean) switches.get(option); if (bool == null) { bool = defaultValue; }"
      },
      {
        "txt": "bool = defaultValue; } if (bool == null) { bool = (Boolean) this.defaultSwitches.get(option); } return bool; } public void addProperty(final String property, final String value) { properties.setProperty(property, value);"
      },
      {
        "txt": "} public String getProperty(final String property, final String defaultValue) { return properties.getProperty(property, defaultValue); } public Set getProperties() { return Collections.unmodifiableSet(properties.keySet()); } public boolean looksLikeOption(final String trigger) { for (final Iterator i = prefixes.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String prefix = (String) i.next(); if (trigger.startsWith(prefix)) { return true; } } return false; } public String toString() { final StringBuffer buffer = new StringBuffer(); for (final Iterator i = normalised.iterator(); i.hasNext();) {"
      },
      {
        "txt": "final String arg = (String) i.next(); if (arg.indexOf(' ') >= 0) { buffer.append(\"\\\"\").append(arg).append(\"\\\"\"); } else { buffer.append(arg); } if (i.hasNext()) { buffer.append(' '); } }"
      },
      {
        "txt": "return buffer.toString(); } public List getOptions() { return Collections.unmodifiableList(options); } public Set getOptionTriggers() { return Collections.unmodifiableSet(nameToOption.keySet()); } public void setDefaultValues(final Option option, final List defaults) {"
      },
      {
        "txt": "if (defaults == null) { defaultValues.remove(option); } else { defaultValues.put(option, defaults); } } public void setDefaultSwitch(final Option option, final Boolean defaultSwitch) { if (defaultSwitch == null) { defaultSwitches.remove(option);"
      },
      {
        "txt": "} else { defaultSwitches.put(option, defaultSwitch); } } public List getNormalised() { return Collections.unmodifiableList(normalised); }"
      }
    ]
  },
  {
    "id": 100,
    "file_path": "src/java/org/apache/commons/cli2/option/ArgumentImpl.java",
    "start-bug-line": 144,
    "end-bug-line": 144,
    "bug": "int argumentCount = 0;",
    "fix": "int argumentCount = commandLine.getUndefaultedValues(option).size();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli2.option; import java.util.Collections; import java.util.Comparator; import java.util.List; import java.util.ListIterator; import java.util.Set; import java.util.StringTokenizer;"
      },
      {
        "txt": "import org.apache.commons.cli2.Argument; import org.apache.commons.cli2.DisplaySetting; import org.apache.commons.cli2.HelpLine; import org.apache.commons.cli2.Option; import org.apache.commons.cli2.OptionException; import org.apache.commons.cli2.WriteableCommandLine; import org.apache.commons.cli2.resource.ResourceConstants; import org.apache.commons.cli2.resource.ResourceHelper; import org.apache.commons.cli2.validation.InvalidArgumentException; import org.apache.commons.cli2.validation.Validator;"
      },
      {
        "txt": "public class ArgumentImpl extends OptionImpl implements Argument { private static final char NUL = '\\0'; public static final char DEFAULT_INITIAL_SEPARATOR = NUL; public static final char DEFAULT_SUBSEQUENT_SEPARATOR = NUL; public static final String DEFAULT_CONSUME_REMAINING = \"--\"; private final String name; private final String description; private final int minimum; private final int maximum;"
      },
      {
        "txt": "private final char initialSeparator; private final char subsequentSeparator; private final boolean subsequentSplit; private final Validator validator; private final String consumeRemaining; private final List defaultValues; private final ResourceHelper resources = ResourceHelper.getResourceHelper(); public ArgumentImpl(final String name, final String description, final int minimum,"
      },
      {
        "txt": "final int maximum, final char initialSeparator, final char subsequentSeparator, final Validator validator, final String consumeRemaining, final List valueDefaults, final int id) { super(id, false); this.name = (name == null) ? \"arg\" : name; this.description = description;"
      },
      {
        "txt": "this.minimum = minimum; this.maximum = maximum; this.initialSeparator = initialSeparator; this.subsequentSeparator = subsequentSeparator; this.subsequentSplit = subsequentSeparator != NUL; this.validator = validator; this.consumeRemaining = consumeRemaining; this.defaultValues = valueDefaults; if (minimum > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_MIN_EXCEEDS_MAX));"
      },
      {
        "txt": "} if ((valueDefaults != null) && (valueDefaults.size() > 0)) { if (valueDefaults.size() < minimum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_FEW_DEFAULTS)); } if (valueDefaults.size() > maximum) { throw new IllegalArgumentException(resources.getMessage(ResourceConstants.ARGUMENT_TOO_MANY_DEFAULTS)); } } }"
      },
      {
        "txt": "return name; } public void processValues(final WriteableCommandLine commandLine, final ListIterator arguments, final Option option) throws OptionException { <extra_id_0> while (arguments.hasNext() && (argumentCount < maximum)) { final String allValuesQuoted = (String) arguments.next(); final String allValues = stripBoundaryQuotes(allValuesQuoted); if (allValuesQuoted.equals(consumeRemaining)) { while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount;"
      },
      {
        "txt": "while (arguments.hasNext() && (argumentCount < maximum)) { ++argumentCount; commandLine.addValue(option, arguments.next()); } } else if (commandLine.looksLikeOption(allValuesQuoted)) { arguments.previous(); break; } else if (subsequentSplit) {"
      },
      {
        "txt": "final StringTokenizer values = new StringTokenizer(allValues, String.valueOf(subsequentSeparator)); arguments.remove(); while (values.hasMoreTokens() && (argumentCount < maximum)) { ++argumentCount; final String token = values.nextToken(); commandLine.addValue(option, token); arguments.add(token); } if (values.hasMoreTokens()) {"
      },
      {
        "txt": "throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, values.nextToken()); } } else { ++argumentCount; commandLine.addValue(option, allValues); } } }"
      },
      {
        "txt": "public boolean canProcess(final WriteableCommandLine commandLine, final String arg) { return true; } public Set getPrefixes() { return Collections.EMPTY_SET; } public void process(WriteableCommandLine commandLine, ListIterator args) throws OptionException {"
      },
      {
        "txt": "processValues(commandLine, args, this); } public char getInitialSeparator() { return this.initialSeparator; } public char getSubsequentSeparator() { return this.subsequentSeparator; } public Set getTriggers() { return Collections.EMPTY_SET;"
      },
      {
        "txt": "} public String getConsumeRemaining() { return this.consumeRemaining; } public List getDefaultValues() { return this.defaultValues; } public Validator getValidator() { return this.validator; }"
      },
      {
        "txt": "public void validate(final WriteableCommandLine commandLine) throws OptionException { validate(commandLine, this); } public void validate(final WriteableCommandLine commandLine, final Option option) throws OptionException { final List values = commandLine.getValues(option); if (values.size() < minimum) { throw new OptionException(option, ResourceConstants.ARGUMENT_MISSING_VALUES);"
      },
      {
        "txt": "} if (values.size() > maximum) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE, (String) values.get(maximum)); } if (validator != null) { try { validator.validate(values); } catch (InvalidArgumentException ive) { throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,"
      },
      {
        "txt": "ive.getMessage()); } } } public void appendUsage(final StringBuffer buffer, final Set helpSettings, final Comparator comp) { final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL); final boolean numbered = (maximum > 1) && helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_NUMBERED);"
      },
      {
        "txt": "final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED); final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum; int i = 0; while (i < max) { if (i > 0) { buffer.append(' '); } if ((i >= minimum) && (optional || (i > 0))) { buffer.append('['); }"
      },
      {
        "txt": "if (bracketed) { buffer.append('<'); } buffer.append(name); ++i; if (numbered) { buffer.append(i); } if (bracketed) { buffer.append('>');"
      },
      {
        "txt": "} } if (maximum == Integer.MAX_VALUE) { buffer.append(\" ...\"); } while (i > 0) { --i; if ((i >= minimum) && (optional || (i > 0))) { buffer.append(']'); }"
      },
      {
        "txt": "} } public String getDescription() { return description; } public List helpLines(final int depth, final Set helpSettings, final Comparator comp) { final HelpLine helpLine = new HelpLineImpl(this, depth); return Collections.singletonList(helpLine);"
      },
      {
        "txt": "} public int getMaximum() { return maximum; } public int getMinimum() { return minimum; } public String stripBoundaryQuotes(String token) { if (!token.startsWith(\"\\\"\") || !token.endsWith(\"\\\"\")) { return token;"
      },
      {
        "txt": "} token = token.substring(1, token.length() - 1); return token; } public boolean isRequired() { return getMinimum() > 0; } public void defaults(final WriteableCommandLine commandLine) { super.defaults(commandLine); defaultValues(commandLine, this);"
      },
      {
        "txt": "} public void defaultValues(final WriteableCommandLine commandLine, final Option option) { commandLine.setDefaultValues(option, defaultValues); }"
      }
    ]
  }
]
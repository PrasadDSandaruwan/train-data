[
  {
    "id": 184,
    "file_path": "src/main/java/org/apache/commons/cli/Options.java",
    "start-bug-line": 240,
    "end-bug-line": 240,
    "bug": "",
    "fix": "if(longOpts.keySet().contains(opt)) { return Collections.singletonList(opt); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.HashMap;"
      },
      {
        "txt": "import java.util.HashSet; import java.util.LinkedHashMap; import java.util.List; import java.util.Map; public class Options implements Serializable { private static final long serialVersionUID = 1L; private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>(); private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>(); private final List<Object> requiredOpts = new ArrayList<Object>();"
      },
      {
        "txt": "private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>(); public Options addOptionGroup(OptionGroup group) { if (group.isRequired()) { requiredOpts.add(group); } for (Option option : group.getOptions()) { option.setRequired(false);"
      },
      {
        "txt": "addOption(option); optionGroups.put(option.getKey(), group); } return this; } Collection<OptionGroup> getOptionGroups() { return new HashSet<OptionGroup>(optionGroups.values()); } public Options addOption(String opt, String description)"
      },
      {
        "txt": "{ addOption(opt, null, false, description); return this; } public Options addOption(String opt, boolean hasArg, String description) { addOption(opt, null, hasArg, description); return this; } public Options addOption(String opt, String longOpt, boolean hasArg, String description)"
      },
      {
        "txt": "{ addOption(new Option(opt, longOpt, hasArg, description)); return this; } public Options addOption(Option opt) { String key = opt.getKey(); if (opt.hasLongOpt()) { longOpts.put(opt.getLongOpt(), opt);"
      },
      {
        "txt": "} if (opt.isRequired()) { if (requiredOpts.contains(key)) { requiredOpts.remove(requiredOpts.indexOf(key)); } requiredOpts.add(key); } shortOpts.put(key, opt);"
      },
      {
        "txt": "return this; } public Collection<Option> getOptions() { return Collections.unmodifiableCollection(helpOptions()); } List<Option> helpOptions() { return new ArrayList<Option>(shortOpts.values()); }"
      },
      {
        "txt": "public List getRequiredOptions() { return Collections.unmodifiableList(requiredOpts); } public Option getOption(String opt) { opt = Util.stripLeadingHyphens(opt); if (shortOpts.containsKey(opt)) { return shortOpts.get(opt);"
      },
      {
        "txt": "return longOpts.get(opt); } public List<String> getMatchingOptions(String opt) { opt = Util.stripLeadingHyphens(opt); List<String> matchingOpts = new ArrayList<String>(); <extra_id_0> for (String longOpt : longOpts.keySet()) { if (longOpt.startsWith(opt)) { matchingOpts.add(longOpt); }"
      },
      {
        "txt": "matchingOpts.add(longOpt); } } return matchingOpts; } public boolean hasOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt) || longOpts.containsKey(opt); }"
      },
      {
        "txt": "public boolean hasLongOption(String opt) { opt = Util.stripLeadingHyphens(opt); return longOpts.containsKey(opt); } public boolean hasShortOption(String opt) { opt = Util.stripLeadingHyphens(opt); return shortOpts.containsKey(opt); }"
      },
      {
        "txt": "public OptionGroup getOptionGroup(Option opt) { return optionGroups.get(opt.getKey()); } @Override public String toString() { StringBuilder buf = new StringBuilder(); buf.append(\"[ Options: [ short \"); buf.append(shortOpts.toString());"
      },
      {
        "txt": "buf.append(\" ] [ long \"); buf.append(longOpts); buf.append(\" ]\"); return buf.toString(); }"
      }
    ]
  }
]
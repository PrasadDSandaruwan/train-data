[
  {
    "id": 159,
    "file_path": "src/java/org/apache/commons/cli/OptionGroup.java",
    "start-bug-line": 98,
    "end-bug-line": 98,
    "bug": "if (selected == null || selected.equals(option.getOpt()))",
    "fix": "if (selected == null || selected.equals(option.getKey()))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.Collection; import java.util.HashMap; import java.util.Iterator;"
      },
      {
        "txt": "import java.util.Map; public class OptionGroup implements Serializable { private static final long serialVersionUID = 1L; private Map optionMap = new HashMap(); private String selected; private boolean required; public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option);"
      },
      {
        "txt": "return this; } public Collection getNames() { return optionMap.keySet(); } public Collection getOptions() { return optionMap.values(); }"
      },
      {
        "txt": "{ if (option == null) { selected = null; return; } <extra_id_0> { selected = option.getOpt(); } else { throw new AlreadySelectedException(this, option);"
      },
      {
        "txt": "{ throw new AlreadySelectedException(this, option); } } public String getSelected() { return selected; } public void setRequired(boolean required) {"
      },
      {
        "txt": "this.required = required; } public boolean isRequired() { return required; } public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator();"
      },
      {
        "txt": "buff.append(\"[\"); while (iter.hasNext()) { Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(\"-\"); buff.append(option.getOpt()); } else"
      },
      {
        "txt": "{ buff.append(\"--\"); buff.append(option.getLongOpt()); } buff.append(\" \"); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append(\", \"); }"
      },
      {
        "txt": "} buff.append(\"]\"); return buff.toString(); }"
      }
    ]
  },
  {
    "id": 160,
    "file_path": "src/java/org/apache/commons/cli/OptionGroup.java",
    "start-bug-line": 100,
    "end-bug-line": 100,
    "bug": "selected = option.getOpt();",
    "fix": "selected = option.getKey();",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.Collection; import java.util.HashMap; import java.util.Iterator; import java.util.Map; public class OptionGroup implements Serializable"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; private Map optionMap = new HashMap(); private String selected; private boolean required; public OptionGroup addOption(Option option) { optionMap.put(option.getKey(), option); return this; }"
      },
      {
        "txt": "public Collection getNames() { return optionMap.keySet(); } public Collection getOptions() { return optionMap.values(); } public void setSelected(Option option) throws AlreadySelectedException {"
      },
      {
        "txt": "{ selected = null; return; } if (selected == null || selected.equals(option.getOpt())) { <extra_id_0> } else { throw new AlreadySelectedException(this, option); } }"
      },
      {
        "txt": "} } public String getSelected() { return selected; } public void setRequired(boolean required) { this.required = required; }"
      },
      {
        "txt": "public boolean isRequired() { return required; } public String toString() { StringBuffer buff = new StringBuffer(); Iterator iter = getOptions().iterator(); buff.append(\"[\"); while (iter.hasNext())"
      },
      {
        "txt": "{ Option option = (Option) iter.next(); if (option.getOpt() != null) { buff.append(\"-\"); buff.append(option.getOpt()); } else { buff.append(\"--\");"
      },
      {
        "txt": "buff.append(option.getLongOpt()); } buff.append(\" \"); buff.append(option.getDescription()); if (iter.hasNext()) { buff.append(\", \"); } } buff.append(\"]\");"
      },
      {
        "txt": "return buff.toString(); }"
      }
    ]
  }
]
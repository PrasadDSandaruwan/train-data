[
  {
    "id": 151,
    "file_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 824,
    "end-bug-line": 824,
    "bug": "int lastPos = pos;",
    "fix": "[Delete]",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List;"
      },
      {
        "txt": "public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH;"
      },
      {
        "txt": "public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) {"
      },
      {
        "txt": "this.defaultWidth = width; } public int getWidth() { return defaultWidth; } public void setLeftPadding(int padding) { this.defaultLeftPad = padding; }"
      },
      {
        "txt": "public int getLeftPadding() { return defaultLeftPad; } public void setDescPadding(int padding) { this.defaultDescPad = padding; } public int getDescPadding() {"
      },
      {
        "txt": "return defaultDescPad; } public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public String getSyntaxPrefix() { return defaultSyntaxPrefix; }"
      },
      {
        "txt": "public void setNewLine(String newline) { this.defaultNewLine = newline; } public String getNewLine() { return defaultNewLine; } public void setOptPrefix(String prefix) {"
      },
      {
        "txt": "this.defaultOptPrefix = prefix; } public String getOptPrefix() { return defaultOptPrefix; } public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; }"
      },
      {
        "txt": "public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setArgName(String name) { this.defaultArgName = name; } public String getArgName() {"
      },
      {
        "txt": "return defaultArgName; } public Comparator getOptionComparator() { return optionComparator; } public void setOptionComparator(Comparator comparator) { if (comparator == null) {"
      },
      {
        "txt": "this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } } public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);"
      },
      {
        "txt": "} public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage)"
      },
      {
        "txt": "{ printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) {"
      },
      {
        "txt": "PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); }"
      },
      {
        "txt": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(\"cmdLineSyntax not provided\"); } if (autoUsage) {"
      },
      {
        "txt": "printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); }"
      },
      {
        "txt": "printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \"); final Collection processedGroups = new ArrayList();"
      },
      {
        "txt": "Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group))"
      },
      {
        "txt": "{ processedGroups.add(group); appendOptionGroup(buff, group); } } else { appendOption(buff, option, option.isRequired()); } if (i.hasNext())"
      },
      {
        "txt": "{ buff.append(\" \"); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) { if (!group.isRequired()) {"
      },
      {
        "txt": "buff.append(\"[\"); } List optList = new ArrayList(group.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { appendOption(buff, (Option) i.next(), true); if (i.hasNext()) { buff.append(\" | \");"
      },
      {
        "txt": "} } if (!group.isRequired()) { buff.append(\"]\"); } } private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required)"
      },
      {
        "txt": "{ buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt());"
      },
      {
        "txt": "} if (option.hasArg() && option.hasArgName()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) { buff.append(\"]\"); } }"
      },
      {
        "txt": "public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad);"
      },
      {
        "txt": "pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text);"
      },
      {
        "txt": "pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { final String lpad = createPadding(leftPad); final String dpad = createPadding(descPad); int max = 0; StringBuffer optBuf; List prefixList = new ArrayList(); List optList = options.helpOptions();"
      },
      {
        "txt": "Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(8); if (option.getOpt() == null) { optBuf.append(lpad).append(\" \" + defaultLongOptPrefix).append(option.getLongOpt()); } else"
      },
      {
        "txt": "{ optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); if (option.hasLongOpt()) { optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt()); } } if (option.hasArg()) { if (option.hasArgName())"
      },
      {
        "txt": "{ optBuf.append(\" <\").append(option.getArgName()).append(\">\"); } else { optBuf.append(' '); } } prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max;"
      },
      {
        "txt": "} int x = 0; for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString()); if (optBuf.length() < max) { optBuf.append(createPadding(max - optBuf.length())); }"
      },
      {
        "txt": "optBuf.append(dpad); int nextLineTabStop = max + descPad; if (option.getDescription() != null) { optBuf.append(option.getDescription()); } renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); if (i.hasNext()) { sb.append(defaultNewLine);"
      },
      {
        "txt": "} } return sb; } protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) {"
      },
      {
        "txt": "return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) { <extra_id_0> text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb;"
      },
      {
        "txt": "sb.append(text); return sb; } else if (pos == lastPos) { throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text); } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } }"
      },
      {
        "txt": "protected int findWrapPos(String text, int width, int startPos) { int pos = -1; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) {"
      },
      {
        "txt": "return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos)"
      },
      {
        "txt": "{ return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } return (pos == text.length()) ? (-1) : pos;"
      },
      {
        "txt": "} protected String createPadding(int len) { StringBuffer sb = new StringBuffer(len); for (int i = 0; i < len; ++i) { sb.append(' '); } return sb.toString(); }"
      },
      {
        "txt": "protected String rtrim(String s) { if ((s == null) || (s.length() == 0)) { return s; } int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { --pos;"
      },
      {
        "txt": "} return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey());"
      },
      {
        "txt": "} }"
      }
    ]
  },
  {
    "id": 152,
    "file_path": "src/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 833,
    "end-bug-line": 836,
    "bug": "} else if (pos == lastPos) { throw new RuntimeException(\"Text too long for line - throwing exception to avoid infinite loop [CLI-162]: \" + text);",
    "fix": "}  if ( (text.length() > width) && (pos == nextLineTabStop - 1) ) { sb.append(text);  return sb;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collection; import java.util.Collections;"
      },
      {
        "txt": "import java.util.Comparator; import java.util.Iterator; import java.util.List; public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\";"
      },
      {
        "txt": "public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; public String defaultArgName = DEFAULT_ARG_NAME;"
      },
      {
        "txt": "protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) { this.defaultWidth = width; } public int getWidth() { return defaultWidth; } public void setLeftPadding(int padding)"
      },
      {
        "txt": "{ this.defaultLeftPad = padding; } public int getLeftPadding() { return defaultLeftPad; } public void setDescPadding(int padding) { this.defaultDescPad = padding;"
      },
      {
        "txt": "} public int getDescPadding() { return defaultDescPad; } public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public String getSyntaxPrefix()"
      },
      {
        "txt": "{ return defaultSyntaxPrefix; } public void setNewLine(String newline) { this.defaultNewLine = newline; } public String getNewLine() { return defaultNewLine;"
      },
      {
        "txt": "} public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public String getOptPrefix() { return defaultOptPrefix; } public void setLongOptPrefix(String prefix)"
      },
      {
        "txt": "{ this.defaultLongOptPrefix = prefix; } public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setArgName(String name) { this.defaultArgName = name;"
      },
      {
        "txt": "} public String getArgName() { return defaultArgName; } public Comparator getOptionComparator() { return optionComparator; } public void setOptionComparator(Comparator comparator)"
      },
      {
        "txt": "{ if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } }"
      },
      {
        "txt": "public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {"
      },
      {
        "txt": "printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); }"
      },
      {
        "txt": "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)"
      },
      {
        "txt": "{ printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(\"cmdLineSyntax not provided\");"
      },
      {
        "txt": "} if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0))"
      },
      {
        "txt": "{ printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void printUsage(PrintWriter pw, int width, String app, Options options)"
      },
      {
        "txt": "{ StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \"); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option);"
      },
      {
        "txt": "if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else {"
      },
      {
        "txt": "appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(\" \"); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(final StringBuffer buff, final OptionGroup group)"
      },
      {
        "txt": "{ if (!group.isRequired()) { buff.append(\"[\"); } List optList = new ArrayList(group.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { appendOption(buff, (Option) i.next(), true);"
      },
      {
        "txt": "if (i.hasNext()) { buff.append(\" | \"); } } if (!group.isRequired()) { buff.append(\"]\"); } }"
      },
      {
        "txt": "private static void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); }"
      },
      {
        "txt": "else { buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && option.hasArgName()) { buff.append(\" <\").append(option.getArgName()).append(\">\"); } if (!required) {"
      },
      {
        "txt": "buff.append(\"]\"); } } public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad)"
      },
      {
        "txt": "{ StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text)"
      },
      {
        "txt": "{ StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { final String lpad = createPadding(leftPad); final String dpad = createPadding(descPad); int max = 0;"
      },
      {
        "txt": "StringBuffer optBuf; List prefixList = new ArrayList(); List optList = options.helpOptions(); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(8); if (option.getOpt() == null) {"
      },
      {
        "txt": "optBuf.append(lpad).append(\" \" + defaultLongOptPrefix).append(option.getLongOpt()); } else { optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); if (option.hasLongOpt()) { optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt()); } }"
      },
      {
        "txt": "if (option.hasArg()) { if (option.hasArgName()) { optBuf.append(\" <\").append(option.getArgName()).append(\">\"); } else { optBuf.append(' '); }"
      },
      {
        "txt": "} prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max; } int x = 0; for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString()); if (optBuf.length() < max)"
      },
      {
        "txt": "{ optBuf.append(createPadding(max - optBuf.length())); } optBuf.append(dpad); int nextLineTabStop = max + descPad; if (option.getDescription() != null) { optBuf.append(option.getDescription()); } renderWrappedText(sb, width, nextLineTabStop, optBuf.toString());"
      },
      {
        "txt": "if (i.hasNext()) { sb.append(defaultNewLine); } } return sb; } protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) {"
      },
      {
        "txt": "int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); final String padding = createPadding(nextLineTabStop); while (true) {"
      },
      {
        "txt": "text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text); return sb; <extra_id_0> } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } protected int findWrapPos(String text, int width, int startPos) {"
      },
      {
        "txt": "protected int findWrapPos(String text, int width, int startPos) { int pos = -1; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) {"
      },
      {
        "txt": "return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos)"
      },
      {
        "txt": "{ return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } return (pos == text.length()) ? (-1) : pos;"
      },
      {
        "txt": "} protected String createPadding(int len) { StringBuffer sb = new StringBuffer(len); for (int i = 0; i < len; ++i) { sb.append(' '); } return sb.toString(); }"
      },
      {
        "txt": "protected String rtrim(String s) { if ((s == null) || (s.length() == 0)) { return s; } int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { --pos;"
      },
      {
        "txt": "} return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey());"
      },
      {
        "txt": "} }"
      }
    ]
  }
]
[
  {
    "id": 94,
    "file_path": "src/java/org/apache/commons/cli/GnuParser.java",
    "start-bug-line": 81,
    "end-bug-line": 81,
    "bug": "if (options.hasOption(arg.substring(0, 2)))",
    "fix": "if (opt.indexOf('=') != -1 && options.hasOption(opt.substring(0, opt.indexOf('='))))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.ArrayList;"
      },
      {
        "txt": "import java.util.List; public class GnuParser extends Parser { protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if (\"--\".equals(arg))"
      },
      {
        "txt": "{ eatTheRest = true; tokens.add(\"--\"); } else if (\"-\".equals(arg)) { tokens.add(\"-\"); } else if (arg.startsWith(\"-\")) {"
      },
      {
        "txt": "if (options.hasOption(opt)) { tokens.add(arg); } else { <extra_id_0> { tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else {"
      },
      {
        "txt": "else { eatTheRest = stopAtNonOption; tokens.add(arg); } } } else { tokens.add(arg);"
      },
      {
        "txt": "} if (eatTheRest) { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } return (String[]) tokens.toArray(new String[tokens.size()]);"
      }
    ]
  },
  {
    "id": 95,
    "file_path": "src/java/org/apache/commons/cli/GnuParser.java",
    "start-bug-line": 84,
    "end-bug-line": 84,
    "bug": "",
    "fix": "tokens.add(arg.substring(0, arg.indexOf('='))); // --foo tokens.add(arg.substring(arg.indexOf('=') + 1)); // value } else if (options.hasOption(arg.substring(0, 2))) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.util.ArrayList; import java.util.List; public class GnuParser extends Parser {"
      },
      {
        "txt": "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption) { List tokens = new ArrayList(); boolean eatTheRest = false; for (int i = 0; i < arguments.length; i++) { String arg = arguments[i]; if (\"--\".equals(arg)) { eatTheRest = true;"
      },
      {
        "txt": "tokens.add(\"--\"); } else if (\"-\".equals(arg)) { tokens.add(\"-\"); } else if (arg.startsWith(\"-\")) { String opt = Util.stripLeadingHyphens(arg); if (options.hasOption(opt))"
      },
      {
        "txt": "tokens.add(arg); } else { if (options.hasOption(arg.substring(0, 2))) { <extra_id_0> tokens.add(arg.substring(0, 2)); // -D tokens.add(arg.substring(2)); // property=value } else { eatTheRest = stopAtNonOption;"
      },
      {
        "txt": "{ eatTheRest = stopAtNonOption; tokens.add(arg); } } } else { tokens.add(arg); }"
      },
      {
        "txt": "if (eatTheRest) { for (i++; i < arguments.length; i++) { tokens.add(arguments[i]); } } } return (String[]) tokens.toArray(new String[tokens.size()]); }"
      }
    ]
  }
]
[
  {
    "id": 173,
    "file_path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 653,
    "end-bug-line": 653,
    "bug": "if (option.hasArg() && option.hasArgName())",
    "fix": "if (option.hasArg() && (option.getArgName() == null || option.getArgName().length() != 0))",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter;"
      },
      {
        "txt": "import java.util.ArrayList; import java.util.Collection; import java.util.Collections; import java.util.Comparator; import java.util.Iterator; import java.util.List; public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1;"
      },
      {
        "txt": "public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\"; public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;"
      },
      {
        "txt": "public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX; private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) { this.defaultWidth = width; }"
      },
      {
        "txt": "public int getWidth() { return defaultWidth; } public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public int getLeftPadding() {"
      },
      {
        "txt": "return defaultLeftPad; } public void setDescPadding(int padding) { this.defaultDescPad = padding; } public int getDescPadding() { return defaultDescPad; }"
      },
      {
        "txt": "public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix; } public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setNewLine(String newline) {"
      },
      {
        "txt": "this.defaultNewLine = newline; } public String getNewLine() { return defaultNewLine; } public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; }"
      },
      {
        "txt": "public String getOptPrefix() { return defaultOptPrefix; } public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public String getLongOptPrefix() {"
      },
      {
        "txt": "return defaultLongOptPrefix; } public void setLongOptSeparator(String longOptSeparator) { this.longOptSeparator = longOptSeparator; } public String getLongOptSeparator() { return longOptSeparator; }"
      },
      {
        "txt": "public void setArgName(String name) { this.defaultArgName = name; } public String getArgName() { return defaultArgName; } public Comparator getOptionComparator() {"
      },
      {
        "txt": "return optionComparator; } public void setOptionComparator(Comparator comparator) { if (comparator == null) { this.optionComparator = new OptionComparator(); } else {"
      },
      {
        "txt": "this.optionComparator = comparator; } } public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage);"
      },
      {
        "txt": "} public void printHelp(String cmdLineSyntax, String header, Options options, String footer) { printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer)"
      },
      {
        "txt": "{ printHelp(width, cmdLineSyntax, header, options, footer, false); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); }"
      },
      {
        "txt": "public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer) { printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) {"
      },
      {
        "txt": "if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(\"cmdLineSyntax not provided\"); } if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else {"
      },
      {
        "txt": "printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0)) { printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer);"
      },
      {
        "txt": "} } public void printUsage(PrintWriter pw, int width, String app, Options options) { StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \"); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();)"
      },
      {
        "txt": "{ option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option); if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); }"
      },
      {
        "txt": "} else { appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(\" \"); } }"
      },
      {
        "txt": "printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(final StringBuffer buff, final OptionGroup group) { if (!group.isRequired()) { buff.append(\"[\"); } List optList = new ArrayList(group.getOptions()); Collections.sort(optList, getOptionComparator());"
      },
      {
        "txt": "for (Iterator i = optList.iterator(); i.hasNext();) { appendOption(buff, (Option) i.next(), true); if (i.hasNext()) { buff.append(\" | \"); } } if (!group.isRequired()) {"
      },
      {
        "txt": "buff.append(\"]\"); } } private void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null)"
      },
      {
        "txt": "buff.append(\"-\").append(option.getOpt()); } else { buff.append(\"--\").append(option.getLongOpt()); } <extra_id_0> { buff.append(option.getOpt() == null ? longOptSeparator : \" \"); buff.append(\"<\").append(option.getArgName()).append(\">\"); } if (!required) {"
      },
      {
        "txt": "if (!required) { buff.append(\"]\"); } } public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); }"
      },
      {
        "txt": "public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) { StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text);"
      },
      {
        "txt": "} public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) { StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { final String lpad = createPadding(leftPad);"
      },
      {
        "txt": "final String dpad = createPadding(descPad); int max = 0; StringBuffer optBuf; List prefixList = new ArrayList(); List optList = options.helpOptions(); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer();"
      },
      {
        "txt": "if (option.getOpt() == null) { optBuf.append(lpad).append(\" \" + defaultLongOptPrefix).append(option.getLongOpt()); } else { optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); if (option.hasLongOpt()) { optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());"
      },
      {
        "txt": "} } if (option.hasArg()) { String argName = option.getArgName(); if (argName != null && argName.length() == 0) { optBuf.append(' '); } else"
      },
      {
        "txt": "{ optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \"); optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\"); } } prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max; } int x = 0; for (Iterator i = optList.iterator(); i.hasNext();)"
      },
      {
        "txt": "{ Option option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString()); if (optBuf.length() < max) { optBuf.append(createPadding(max - optBuf.length())); } optBuf.append(dpad); int nextLineTabStop = max + descPad; if (option.getDescription() != null)"
      },
      {
        "txt": "{ optBuf.append(option.getDescription()); } renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); if (i.hasNext()) { sb.append(defaultNewLine); } } return sb;"
      },
      {
        "txt": "} protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text) { int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; }"
      },
      {
        "txt": "sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) { nextLineTabStop = 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0);"
      },
      {
        "txt": "if (pos == -1) { sb.append(text); return sb; } if ((text.length() > width) && (pos == nextLineTabStop - 1)) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);"
      },
      {
        "txt": "} } protected int findWrapPos(String text, int width, int startPos) { int pos = -1; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; }"
      },
      {
        "txt": "else if (startPos + width >= text.length()) { return -1; } pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos;"
      },
      {
        "txt": "} if (pos > startPos) { return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos;"
      },
      {
        "txt": "} return (pos == text.length()) ? (-1) : pos; } protected String createPadding(int len) { StringBuffer sb = new StringBuffer(len); for (int i = 0; i < len; ++i) { sb.append(' '); }"
      },
      {
        "txt": "return sb.toString(); } protected String rtrim(String s) { if ((s == null) || (s.length() == 0)) { return s; } int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))"
      },
      {
        "txt": "{ --pos; } return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1;"
      },
      {
        "txt": "Option opt2 = (Option) o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey()); } }"
      }
    ]
  },
  {
    "id": 174,
    "file_path": "src/main/java/org/apache/commons/cli/HelpFormatter.java",
    "start-bug-line": 656,
    "end-bug-line": 656,
    "bug": "buff.append(\"<\").append(option.getArgName()).append(\">\");",
    "fix": "buff.append(\"<\").append(option.getArgName() != null ? option.getArgName() : getArgName()).append(\">\");",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.PrintWriter; import java.util.ArrayList; import java.util.Collection; import java.util.Collections;"
      },
      {
        "txt": "import java.util.Comparator; import java.util.Iterator; import java.util.List; public class HelpFormatter { public static final int DEFAULT_WIDTH = 74; public static final int DEFAULT_LEFT_PAD = 1; public static final int DEFAULT_DESC_PAD = 3; public static final String DEFAULT_SYNTAX_PREFIX = \"usage: \"; public static final String DEFAULT_OPT_PREFIX = \"-\";"
      },
      {
        "txt": "public static final String DEFAULT_LONG_OPT_PREFIX = \"--\"; public static final String DEFAULT_LONG_OPT_SEPARATOR = \" \"; public static final String DEFAULT_ARG_NAME = \"arg\"; public int defaultWidth = DEFAULT_WIDTH; public int defaultLeftPad = DEFAULT_LEFT_PAD; public int defaultDescPad = DEFAULT_DESC_PAD; public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX; public String defaultNewLine = System.getProperty(\"line.separator\"); public String defaultOptPrefix = DEFAULT_OPT_PREFIX; public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;"
      },
      {
        "txt": "private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR; public String defaultArgName = DEFAULT_ARG_NAME; protected Comparator optionComparator = new OptionComparator(); public void setWidth(int width) { this.defaultWidth = width; } public int getWidth() { return defaultWidth;"
      },
      {
        "txt": "} public void setLeftPadding(int padding) { this.defaultLeftPad = padding; } public int getLeftPadding() { return defaultLeftPad; } public void setDescPadding(int padding)"
      },
      {
        "txt": "{ this.defaultDescPad = padding; } public int getDescPadding() { return defaultDescPad; } public void setSyntaxPrefix(String prefix) { this.defaultSyntaxPrefix = prefix;"
      },
      {
        "txt": "} public String getSyntaxPrefix() { return defaultSyntaxPrefix; } public void setNewLine(String newline) { this.defaultNewLine = newline; } public String getNewLine()"
      },
      {
        "txt": "{ return defaultNewLine; } public void setOptPrefix(String prefix) { this.defaultOptPrefix = prefix; } public String getOptPrefix() { return defaultOptPrefix;"
      },
      {
        "txt": "} public void setLongOptPrefix(String prefix) { this.defaultLongOptPrefix = prefix; } public String getLongOptPrefix() { return defaultLongOptPrefix; } public void setLongOptSeparator(String longOptSeparator)"
      },
      {
        "txt": "{ this.longOptSeparator = longOptSeparator; } public String getLongOptSeparator() { return longOptSeparator; } public void setArgName(String name) { this.defaultArgName = name;"
      },
      {
        "txt": "} public String getArgName() { return defaultArgName; } public Comparator getOptionComparator() { return optionComparator; } public void setOptionComparator(Comparator comparator)"
      },
      {
        "txt": "{ if (comparator == null) { this.optionComparator = new OptionComparator(); } else { this.optionComparator = comparator; } }"
      },
      {
        "txt": "public void printHelp(String cmdLineSyntax, Options options) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, false); } public void printHelp(String cmdLineSyntax, Options options, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, null, options, null, autoUsage); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer) {"
      },
      {
        "txt": "printHelp(cmdLineSyntax, header, options, footer, false); } public void printHelp(String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { printHelp(defaultWidth, cmdLineSyntax, header, options, footer, autoUsage); } public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer) { printHelp(width, cmdLineSyntax, header, options, footer, false); }"
      },
      {
        "txt": "public void printHelp(int width, String cmdLineSyntax, String header, Options options, String footer, boolean autoUsage) { PrintWriter pw = new PrintWriter(System.out); printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage); pw.flush(); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer)"
      },
      {
        "txt": "{ printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false); } public void printHelp(PrintWriter pw, int width, String cmdLineSyntax, String header, Options options, int leftPad, int descPad, String footer, boolean autoUsage) { if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0)) { throw new IllegalArgumentException(\"cmdLineSyntax not provided\");"
      },
      {
        "txt": "} if (autoUsage) { printUsage(pw, width, cmdLineSyntax, options); } else { printUsage(pw, width, cmdLineSyntax); } if ((header != null) && (header.trim().length() > 0))"
      },
      {
        "txt": "{ printWrapped(pw, width, header); } printOptions(pw, width, options, leftPad, descPad); if ((footer != null) && (footer.trim().length() > 0)) { printWrapped(pw, width, footer); } } public void printUsage(PrintWriter pw, int width, String app, Options options)"
      },
      {
        "txt": "{ StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(\" \"); final Collection processedGroups = new ArrayList(); Option option; List optList = new ArrayList(options.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { option = (Option) i.next(); OptionGroup group = options.getOptionGroup(option);"
      },
      {
        "txt": "if (group != null) { if (!processedGroups.contains(group)) { processedGroups.add(group); appendOptionGroup(buff, group); } } else {"
      },
      {
        "txt": "appendOption(buff, option, option.isRequired()); } if (i.hasNext()) { buff.append(\" \"); } } printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString()); } private void appendOptionGroup(final StringBuffer buff, final OptionGroup group)"
      },
      {
        "txt": "{ if (!group.isRequired()) { buff.append(\"[\"); } List optList = new ArrayList(group.getOptions()); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { appendOption(buff, (Option) i.next(), true);"
      },
      {
        "txt": "if (i.hasNext()) { buff.append(\" | \"); } } if (!group.isRequired()) { buff.append(\"]\"); } }"
      },
      {
        "txt": "private void appendOption(final StringBuffer buff, final Option option, final boolean required) { if (!required) { buff.append(\"[\"); } if (option.getOpt() != null) { buff.append(\"-\").append(option.getOpt()); }"
      },
      {
        "txt": "{ buff.append(\"--\").append(option.getLongOpt()); } if (option.hasArg() && option.hasArgName()) { buff.append(option.getOpt() == null ? longOptSeparator : \" \"); <extra_id_0> } if (!required) { buff.append(\"]\"); } }"
      },
      {
        "txt": "} } public void printUsage(PrintWriter pw, int width, String cmdLineSyntax) { int argPos = cmdLineSyntax.indexOf(' ') + 1; printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax); } public void printOptions(PrintWriter pw, int width, Options options, int leftPad, int descPad) {"
      },
      {
        "txt": "StringBuffer sb = new StringBuffer(); renderOptions(sb, width, options, leftPad, descPad); pw.println(sb.toString()); } public void printWrapped(PrintWriter pw, int width, String text) { printWrapped(pw, width, 0, text); } public void printWrapped(PrintWriter pw, int width, int nextLineTabStop, String text) {"
      },
      {
        "txt": "StringBuffer sb = new StringBuffer(text.length()); renderWrappedText(sb, width, nextLineTabStop, text); pw.println(sb.toString()); } protected StringBuffer renderOptions(StringBuffer sb, int width, Options options, int leftPad, int descPad) { final String lpad = createPadding(leftPad); final String dpad = createPadding(descPad); int max = 0; StringBuffer optBuf;"
      },
      {
        "txt": "List prefixList = new ArrayList(); List optList = options.helpOptions(); Collections.sort(optList, getOptionComparator()); for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(); if (option.getOpt() == null) { optBuf.append(lpad).append(\" \" + defaultLongOptPrefix).append(option.getLongOpt());"
      },
      {
        "txt": "} else { optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt()); if (option.hasLongOpt()) { optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt()); } } if (option.hasArg())"
      },
      {
        "txt": "{ String argName = option.getArgName(); if (argName != null && argName.length() == 0) { optBuf.append(' '); } else { optBuf.append(option.hasLongOpt() ? longOptSeparator : \" \"); optBuf.append(\"<\").append(argName != null ? option.getArgName() : getArgName()).append(\">\");"
      },
      {
        "txt": "} } prefixList.add(optBuf); max = (optBuf.length() > max) ? optBuf.length() : max; } int x = 0; for (Iterator i = optList.iterator(); i.hasNext();) { Option option = (Option) i.next(); optBuf = new StringBuffer(prefixList.get(x++).toString());"
      },
      {
        "txt": "if (optBuf.length() < max) { optBuf.append(createPadding(max - optBuf.length())); } optBuf.append(dpad); int nextLineTabStop = max + descPad; if (option.getDescription() != null) { optBuf.append(option.getDescription()); }"
      },
      {
        "txt": "renderWrappedText(sb, width, nextLineTabStop, optBuf.toString()); if (i.hasNext()) { sb.append(defaultNewLine); } } return sb; } protected StringBuffer renderWrappedText(StringBuffer sb, int width, int nextLineTabStop, String text)"
      },
      {
        "txt": "{ int pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(rtrim(text)); return sb; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); if (nextLineTabStop >= width) {"
      },
      {
        "txt": "nextLineTabStop = 1; } final String padding = createPadding(nextLineTabStop); while (true) { text = padding + text.substring(pos).trim(); pos = findWrapPos(text, width, 0); if (pos == -1) { sb.append(text);"
      },
      {
        "txt": "return sb; } if ((text.length() > width) && (pos == nextLineTabStop - 1)) { pos = width; } sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine); } } protected int findWrapPos(String text, int width, int startPos)"
      },
      {
        "txt": "{ int pos = -1; if (((pos = text.indexOf('\\n', startPos)) != -1 && pos <= width) || ((pos = text.indexOf('\\t', startPos)) != -1 && pos <= width)) { return pos + 1; } else if (startPos + width >= text.length()) { return -1;"
      },
      {
        "txt": "} pos = startPos + width; char c; while ((pos >= startPos) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { --pos; } if (pos > startPos) {"
      },
      {
        "txt": "return pos; } pos = startPos + width; while ((pos <= text.length()) && ((c = text.charAt(pos)) != ' ') && (c != '\\n') && (c != '\\r')) { ++pos; } return (pos == text.length()) ? (-1) : pos; }"
      },
      {
        "txt": "protected String createPadding(int len) { StringBuffer sb = new StringBuffer(len); for (int i = 0; i < len; ++i) { sb.append(' '); } return sb.toString(); } protected String rtrim(String s)"
      },
      {
        "txt": "{ if ((s == null) || (s.length() == 0)) { return s; } int pos = s.length(); while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1))) { --pos; }"
      },
      {
        "txt": "return s.substring(0, pos); } private static class OptionComparator implements Comparator { public int compare(Object o1, Object o2) { Option opt1 = (Option) o1; Option opt2 = (Option) o2; return opt1.getKey().compareToIgnoreCase(opt2.getKey()); }"
      }
    ]
  },
  {
    "id": 175,
    "file_path": "src/main/java/org/apache/commons/cli/Option.java",
    "start-bug-line": 57,
    "end-bug-line": 57,
    "bug": "private String argName = \"arg\";",
    "fix": "private String argName;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; import java.io.Serializable; import java.util.ArrayList; import java.util.List;"
      },
      {
        "txt": "{ private static final long serialVersionUID = 1L; public static final int UNINITIALIZED = -1; public static final int UNLIMITED_VALUES = -2; private String opt; private String longOpt; <extra_id_0> private String description; private boolean required; private boolean optionalArg; private int numberOfArgs = UNINITIALIZED; private Object type; private List values = new ArrayList();"
      },
      {
        "txt": "private Object type; private List values = new ArrayList(); private char valuesep; public Option(String opt, String description) throws IllegalArgumentException { this(opt, null, false, description); } public Option(String opt, boolean hasArg, String description) throws IllegalArgumentException { this(opt, null, hasArg, description);"
      },
      {
        "txt": "} public Option(String opt, String longOpt, boolean hasArg, String description) throws IllegalArgumentException { OptionValidator.validateOption(opt); this.opt = opt; this.longOpt = longOpt; if (hasArg) { this.numberOfArgs = 1;"
      },
      {
        "txt": "} this.description = description; } public int getId() { return getKey().charAt(0); } String getKey() { if (opt == null)"
      },
      {
        "txt": "{ return longOpt; } return opt; } public String getOpt() { return opt; } public Object getType()"
      },
      {
        "txt": "{ return type; } public void setType(Object type) { this.type = type; } public String getLongOpt() { return longOpt;"
      },
      {
        "txt": "} public void setLongOpt(String longOpt) { this.longOpt = longOpt; } public void setOptionalArg(boolean optionalArg) { this.optionalArg = optionalArg; } public boolean hasOptionalArg()"
      },
      {
        "txt": "{ return optionalArg; } public boolean hasLongOpt() { return longOpt != null; } public boolean hasArg() { return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;"
      },
      {
        "txt": "} public String getDescription() { return description; } public void setDescription(String description) { this.description = description; } public boolean isRequired()"
      },
      {
        "txt": "{ return required; } public void setRequired(boolean required) { this.required = required; } public void setArgName(String argName) { this.argName = argName;"
      },
      {
        "txt": "} public String getArgName() { return argName; } public boolean hasArgName() { return argName != null && argName.length() > 0; } public boolean hasArgs()"
      },
      {
        "txt": "{ return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES; } public void setArgs(int num) { this.numberOfArgs = num; } public void setValueSeparator(char sep) { this.valuesep = sep;"
      },
      {
        "txt": "} public char getValueSeparator() { return valuesep; } public boolean hasValueSeparator() { return valuesep > 0; } public int getArgs()"
      },
      {
        "txt": "{ return numberOfArgs; } void addValueForProcessing(String value) { switch (numberOfArgs) { case UNINITIALIZED: throw new RuntimeException(\"NO_ARGS_ALLOWED\"); default:"
      },
      {
        "txt": "processValue(value); } } private void processValue(String value) { if (hasValueSeparator()) { char sep = getValueSeparator(); int index = value.indexOf(sep); while (index != -1)"
      },
      {
        "txt": "{ if (values.size() == (numberOfArgs - 1)) { break; } add(value.substring(0, index)); value = value.substring(index + 1); index = value.indexOf(sep); } }"
      },
      {
        "txt": "add(value); } private void add(String value) { if (!acceptsArg()) { throw new RuntimeException(\"Cannot add value, list full.\"); } values.add(value); }"
      },
      {
        "txt": "public String getValue() { return hasNoValues() ? null : (String) values.get(0); } public String getValue(int index) throws IndexOutOfBoundsException { return hasNoValues() ? null : (String) values.get(index); } public String getValue(String defaultValue) {"
      },
      {
        "txt": "String value = getValue(); return (value != null) ? value : defaultValue; } public String[] getValues() { return hasNoValues() ? null : (String[]) values.toArray(new String[values.size()]); } public List getValuesList() { return values;"
      },
      {
        "txt": "} public String toString() { StringBuffer buf = new StringBuffer().append(\"[ option: \"); buf.append(opt); if (longOpt != null) { buf.append(\" \").append(longOpt); } buf.append(\" \");"
      },
      {
        "txt": "if (hasArgs()) { buf.append(\"[ARG...]\"); } else if (hasArg()) { buf.append(\" [ARG]\"); } buf.append(\" :: \").append(description); if (type != null)"
      },
      {
        "txt": "{ buf.append(\" :: \").append(type); } buf.append(\" ]\"); return buf.toString(); } private boolean hasNoValues() { return values.isEmpty(); }"
      },
      {
        "txt": "public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; }"
      },
      {
        "txt": "Option option = (Option) o; if (opt != null ? !opt.equals(option.opt) : option.opt != null) { return false; } if (longOpt != null ? !longOpt.equals(option.longOpt) : option.longOpt != null) { return false; } return true;"
      },
      {
        "txt": "} public int hashCode() { int result; result = opt != null ? opt.hashCode() : 0; result = 31 * result + (longOpt != null ? longOpt.hashCode() : 0); return result; } public Object clone() {"
      },
      {
        "txt": "try { Option option = (Option) super.clone(); option.values = new ArrayList(values); return option; } catch (CloneNotSupportedException cnse) { throw new RuntimeException(\"A CloneNotSupportedException was thrown: \" + cnse.getMessage()); }"
      },
      {
        "txt": "} void clearValues() { values.clear(); } public boolean addValue(String value) { throw new UnsupportedOperationException(\"The addValue method is not intended for client use. \" + \"Subclasses should use the addValueForProcessing method instead. \"); }"
      },
      {
        "txt": "boolean acceptsArg() { return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs); } boolean requiresArg() { if (optionalArg) { return false; }"
      },
      {
        "txt": "if (numberOfArgs == UNLIMITED_VALUES) { return values.size() < 1; } else { return acceptsArg(); } }"
      }
    ]
  },
  {
    "id": 176,
    "file_path": "src/main/java/org/apache/commons/cli/OptionBuilder.java",
    "start-bug-line": 80,
    "end-bug-line": 80,
    "bug": "argName = \"arg\";",
    "fix": "argName = null;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package org.apache.commons.cli; public final class OptionBuilder { private static String longopt; private static String description;"
      },
      {
        "txt": "private static String argName; private static boolean required; private static int numberOfArgs = Option.UNINITIALIZED; private static Object type; private static boolean optionalArg; private static char valuesep; private static OptionBuilder instance = new OptionBuilder(); static { reset();"
      },
      {
        "txt": "private OptionBuilder() { } private static void reset() { description = null; <extra_id_0> longopt = null; type = null; required = false; numberOfArgs = Option.UNINITIALIZED; optionalArg = false; valuesep = (char) 0;"
      },
      {
        "txt": "optionalArg = false; valuesep = (char) 0; } public static OptionBuilder withLongOpt(String newLongopt) { OptionBuilder.longopt = newLongopt; return instance; } public static OptionBuilder hasArg() {"
      },
      {
        "txt": "OptionBuilder.numberOfArgs = 1; return instance; } public static OptionBuilder hasArg(boolean hasArg) { OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED; return instance; } public static OptionBuilder withArgName(String name) {"
      },
      {
        "txt": "OptionBuilder.argName = name; return instance; } public static OptionBuilder isRequired() { OptionBuilder.required = true; return instance; } public static OptionBuilder withValueSeparator(char sep) {"
      },
      {
        "txt": "OptionBuilder.valuesep = sep; return instance; } public static OptionBuilder withValueSeparator() { OptionBuilder.valuesep = '='; return instance; } public static OptionBuilder isRequired(boolean newRequired) {"
      },
      {
        "txt": "OptionBuilder.required = newRequired; return instance; } public static OptionBuilder hasArgs() { OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; return instance; } public static OptionBuilder hasArgs(int num) {"
      },
      {
        "txt": "OptionBuilder.numberOfArgs = num; return instance; } public static OptionBuilder hasOptionalArg() { OptionBuilder.numberOfArgs = 1; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs()"
      },
      {
        "txt": "{ OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES; OptionBuilder.optionalArg = true; return instance; } public static OptionBuilder hasOptionalArgs(int numArgs) { OptionBuilder.numberOfArgs = numArgs; OptionBuilder.optionalArg = true; return instance;"
      },
      {
        "txt": "} public static OptionBuilder withType(Object newType) { OptionBuilder.type = newType; return instance; } public static OptionBuilder withDescription(String newDescription) { OptionBuilder.description = newDescription; return instance;"
      },
      {
        "txt": "} public static Option create(char opt) throws IllegalArgumentException { return create(String.valueOf(opt)); } public static Option create() throws IllegalArgumentException { if (longopt == null) { OptionBuilder.reset();"
      },
      {
        "txt": "throw new IllegalArgumentException(\"must specify longopt\"); } return create(null); } public static Option create(String opt) throws IllegalArgumentException { Option option = null; try { option = new Option(opt, description);"
      },
      {
        "txt": "option.setLongOpt(longopt); option.setRequired(required); option.setOptionalArg(optionalArg); option.setArgs(numberOfArgs); option.setType(type); option.setValueSeparator(valuesep); option.setArgName(argName); } finally {"
      },
      {
        "txt": "OptionBuilder.reset(); } return option; }"
      }
    ]
  }
]
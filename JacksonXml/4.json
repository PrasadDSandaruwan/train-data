[
  {
    "id": 1835,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
    "start-bug-line": 204,
    "end-bug-line": 204,
    "bug": "",
    "fix": "QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = ROOT_NAME_FOR_NULL; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.ser; import java.io.IOException; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.PropertyName; import com.fasterxml.jackson.databind.SerializationConfig; import com.fasterxml.jackson.databind.ser.SerializerFactory; import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider; import com.fasterxml.jackson.databind.util.TokenBuffer; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil;"
      },
      {
        "txt": "import com.fasterxml.jackson.dataformat.xml.util.TypeUtil; import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup; public class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) { super();"
      },
      {
        "txt": "_rootNameLookup = rootNames; } public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) { super(src, config, f); _rootNameLookup = src._rootNameLookup; } @Override public DefaultSerializerProvider createInstance(SerializationConfig config,"
      },
      {
        "txt": "SerializerFactory jsf) { return new XmlSerializerProvider(this, config, jsf); } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value) throws IOException { if (value == null) { _serializeXmlNull(gen); return;"
      },
      {
        "txt": "} final Class<?> cls = value.getClass(); final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(cls, _config);"
      },
      {
        "txt": "} _initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(cls); if (asArray) { _startRootArray(xgen, rootName); } } final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null); try { ser.serialize(value, gen, this);"
      },
      {
        "txt": "} catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is throw ioe; } catch (Exception e) { // but wrap RuntimeExceptions, to get path information String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e); } if (asArray) {"
      },
      {
        "txt": "gen.writeEndObject(); } } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException { if (value == null) { _serializeXmlNull(gen);"
      },
      {
        "txt": "return; } final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(rootType, _config);"
      },
      {
        "txt": "} _initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(rootType); if (asArray) { _startRootArray(xgen, rootName); } } final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null); try { ser.serialize(value, gen, this);"
      },
      {
        "txt": "} catch (IOException ioe) { // no wrapping for IO (and derived) throw ioe; } catch (Exception e) { // but others do need to be, to get path etc String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e); } if (asArray) {"
      },
      {
        "txt": "gen.writeEndObject(); } } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException { if (value == null) { _serializeXmlNull(gen);"
      },
      {
        "txt": "return; } final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(rootType, _config);"
      },
      {
        "txt": "} _initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(rootType); if (asArray) { _startRootArray(xgen, rootName); } } if (ser == null) { ser = findTypedValueSerializer(rootType, true, null); }"
      },
      {
        "txt": "try { ser.serialize(value, gen, this); } catch (IOException ioe) { // no wrapping for IO (and derived) throw ioe; } catch (Exception e) { // but others do need to be, to get path etc String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e);"
      },
      {
        "txt": "if (asArray) { gen.writeEndObject(); } } protected void _serializeXmlNull(JsonGenerator jgen) throws IOException { <extra_id_0> _initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL); } super.serializeValue(jgen, null); } protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException {"
      },
      {
        "txt": "protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException { xgen.writeStartObject(); xgen.writeFieldName(\"item\"); } protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException { if (!xgen.setNextNameIfMissing(rootName)) { if (xgen.inRoot()) { xgen.setNextName(rootName);"
      },
      {
        "txt": "} } xgen.initGenerator(); String ns = rootName.getNamespaceURI(); if (ns != null && ns.length() > 0) { try { xgen.getStaxWriter().setDefaultNamespace(ns); } catch (XMLStreamException e) { StaxUtil.throwXmlAsIOException(e); }"
      },
      {
        "txt": "} } protected QName _rootNameFromConfig() { PropertyName name = _config.getFullRootName(); if (name == null) { return null; } String ns = name.getNamespace(); if (ns == null || ns.isEmpty()) {"
      },
      {
        "txt": "return new QName(name.getSimpleName()); } return new QName(ns, name.getSimpleName()); } protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException { if (!(gen instanceof ToXmlGenerator)) { if (!(gen instanceof TokenBuffer)) { throw JsonMappingException.from(gen,"
      },
      {
        "txt": "\"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName()); } return null; } return (ToXmlGenerator) gen; }"
      }
    ]
  },
  {
    "id": 1836,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/XmlSerializerProvider.java",
    "start-bug-line": 205,
    "end-bug-line": 205,
    "bug": "_initWithRootName((ToXmlGenerator) jgen, ROOT_NAME_FOR_NULL);",
    "fix": "_initWithRootName((ToXmlGenerator) jgen, rootName);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.ser; import java.io.IOException; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.databind.JavaType; import com.fasterxml.jackson.databind.JsonMappingException; import com.fasterxml.jackson.databind.JsonSerializer; import com.fasterxml.jackson.databind.PropertyName; import com.fasterxml.jackson.databind.SerializationConfig; import com.fasterxml.jackson.databind.ser.SerializerFactory; import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider; import com.fasterxml.jackson.databind.util.TokenBuffer; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; import com.fasterxml.jackson.dataformat.xml.util.TypeUtil;"
      },
      {
        "txt": "import com.fasterxml.jackson.dataformat.xml.util.XmlRootNameLookup; public class XmlSerializerProvider extends DefaultSerializerProvider { private static final long serialVersionUID = 1L; protected final static QName ROOT_NAME_FOR_NULL = new QName(\"null\"); protected final XmlRootNameLookup _rootNameLookup; public XmlSerializerProvider(XmlRootNameLookup rootNames) { super(); _rootNameLookup = rootNames;"
      },
      {
        "txt": "} public XmlSerializerProvider(XmlSerializerProvider src, SerializationConfig config, SerializerFactory f) { super(src, config, f); _rootNameLookup = src._rootNameLookup; } @Override public DefaultSerializerProvider createInstance(SerializationConfig config, SerializerFactory jsf) {"
      },
      {
        "txt": "return new XmlSerializerProvider(this, config, jsf); } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value) throws IOException { if (value == null) { _serializeXmlNull(gen); return; }"
      },
      {
        "txt": "final Class<?> cls = value.getClass(); final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(cls, _config); }"
      },
      {
        "txt": "_initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(cls); if (asArray) { _startRootArray(xgen, rootName); } } final JsonSerializer<Object> ser = findTypedValueSerializer(cls, true, null); try { ser.serialize(value, gen, this); } catch (IOException ioe) { // As per [JACKSON-99], pass IOException and subtypes as-is"
      },
      {
        "txt": "throw ioe; } catch (Exception e) { // but wrap RuntimeExceptions, to get path information String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e); } if (asArray) { gen.writeEndObject();"
      },
      {
        "txt": "} } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value, JavaType rootType) throws IOException { if (value == null) { _serializeXmlNull(gen); return;"
      },
      {
        "txt": "} final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(rootType, _config); }"
      },
      {
        "txt": "_initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(rootType); if (asArray) { _startRootArray(xgen, rootName); } } final JsonSerializer<Object> ser = findTypedValueSerializer(rootType, true, null); try { ser.serialize(value, gen, this); } catch (IOException ioe) { // no wrapping for IO (and derived)"
      },
      {
        "txt": "throw ioe; } catch (Exception e) { // but others do need to be, to get path etc String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e); } if (asArray) { gen.writeEndObject();"
      },
      {
        "txt": "} } @SuppressWarnings(\"resource\") @Override public void serializeValue(JsonGenerator gen, Object value, JavaType rootType, JsonSerializer<Object> ser) throws IOException { if (value == null) { _serializeXmlNull(gen); return;"
      },
      {
        "txt": "} final boolean asArray; final ToXmlGenerator xgen = _asXmlGenerator(gen); if (xgen == null) { // called by convertValue() asArray = false; } else { QName rootName = _rootNameFromConfig(); if (rootName == null) { rootName = _rootNameLookup.findRootName(rootType, _config); }"
      },
      {
        "txt": "_initWithRootName(xgen, rootName); asArray = TypeUtil.isIndexedType(rootType); if (asArray) { _startRootArray(xgen, rootName); } } if (ser == null) { ser = findTypedValueSerializer(rootType, true, null); } try {"
      },
      {
        "txt": "ser.serialize(value, gen, this); } catch (IOException ioe) { // no wrapping for IO (and derived) throw ioe; } catch (Exception e) { // but others do need to be, to get path etc String msg = e.getMessage(); if (msg == null) { msg = \"[no message for \"+e.getClass().getName()+\"]\"; } throw JsonMappingException.from(gen, msg, e); }"
      },
      {
        "txt": "gen.writeEndObject(); } } protected void _serializeXmlNull(JsonGenerator jgen) throws IOException { if (jgen instanceof ToXmlGenerator) { <extra_id_0> } super.serializeValue(jgen, null); } protected void _startRootArray(ToXmlGenerator xgen, QName rootName) throws IOException { xgen.writeStartObject();"
      },
      {
        "txt": "{ xgen.writeStartObject(); xgen.writeFieldName(\"item\"); } protected void _initWithRootName(ToXmlGenerator xgen, QName rootName) throws IOException { if (!xgen.setNextNameIfMissing(rootName)) { if (xgen.inRoot()) { xgen.setNextName(rootName); }"
      },
      {
        "txt": "} xgen.initGenerator(); String ns = rootName.getNamespaceURI(); if (ns != null && ns.length() > 0) { try { xgen.getStaxWriter().setDefaultNamespace(ns); } catch (XMLStreamException e) { StaxUtil.throwXmlAsIOException(e); } }"
      },
      {
        "txt": "} protected QName _rootNameFromConfig() { PropertyName name = _config.getFullRootName(); if (name == null) { return null; } String ns = name.getNamespace(); if (ns == null || ns.isEmpty()) { return new QName(name.getSimpleName());"
      },
      {
        "txt": "} return new QName(ns, name.getSimpleName()); } protected ToXmlGenerator _asXmlGenerator(JsonGenerator gen) throws JsonMappingException { if (!(gen instanceof ToXmlGenerator)) { if (!(gen instanceof TokenBuffer)) { throw JsonMappingException.from(gen, \"XmlMapper does not with generators of type other than ToXmlGenerator; got: \"+gen.getClass().getName());"
      },
      {
        "txt": "} return null; } return (ToXmlGenerator) gen; }"
      }
    ]
  }
]
[
  {
    "id": 1822,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
    "start-bug-line": 512,
    "end-bug-line": 512,
    "bug": "",
    "fix": "if (_parsingContext.inArray()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.deser; import java.io.IOException;"
      },
      {
        "txt": "import java.math.BigDecimal; import java.math.BigInteger; import java.util.Set; import javax.xml.stream.XMLStreamReader; import javax.xml.stream.XMLStreamWriter; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.base.ParserMinimalBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.util.ByteArrayBuilder; import com.fasterxml.jackson.dataformat.xml.PackageVersion;"
      },
      {
        "txt": "import com.fasterxml.jackson.dataformat.xml.XmlMapper; public class FromXmlParser extends ParserMinimalBase { public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\"; public enum Feature implements FormatFeature { ; final boolean _defaultState; final int _mask;"
      },
      {
        "txt": "public static int collectDefaults() { int flags = 0; for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; }"
      },
      {
        "txt": "private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal()); } @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY; protected int _formatFeatures;"
      },
      {
        "txt": "protected ObjectCodec _objectCodec; protected boolean _closed; final protected IOContext _ioContext; protected XmlReadContext _parsingContext; protected final XmlTokenStream _xmlTokens; protected boolean _mayBeLeaf; protected JsonToken _nextToken; protected String _currText; protected Set<String> _namesToWrap; protected ByteArrayBuilder _byteArrayBuilder = null;"
      },
      {
        "txt": "protected byte[] _binaryValue; public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamReader xmlReader) { super(genericParserFeatures); _formatFeatures = xmlFeatures; _ioContext = ctxt; _objectCodec = codec; _parsingContext = XmlReadContext.createRootContext(-1, -1); _nextToken = JsonToken.START_OBJECT;"
      },
      {
        "txt": "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference()); } @Override public Version version() { return PackageVersion.VERSION; } @Override public ObjectCodec getCodec() { return _objectCodec; }"
      },
      {
        "txt": "@Override public void setCodec(ObjectCodec c) { _objectCodec = c; } public void setXMLTextElementName(String name) { _cfgNameForTextElement = name; } @Override public boolean requiresCustomCodec() { return true;"
      },
      {
        "txt": "} public FromXmlParser enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public FromXmlParser disable(Feature f) { _formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) {"
      },
      {
        "txt": "return (_formatFeatures & f.getMask()) != 0; } public FromXmlParser configure(Feature f, boolean state) { if (state) { enable(f); } else { disable(f); } return this; }"
      },
      {
        "txt": "@Override public int getFormatFeatures() { return _formatFeatures; } @Override public JsonParser overrideFormatFeatures(int values, int mask) { _formatFeatures = (_formatFeatures & ~mask) | (values & mask); return this; } public XMLStreamReader getStaxReader() {"
      },
      {
        "txt": "return _xmlTokens.getXmlReader(); } public void addVirtualWrapping(Set<String> namesToWrap) { String name = _xmlTokens.getLocalName(); if (name != null && namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _namesToWrap = namesToWrap; _parsingContext.setNamesToWrap(namesToWrap);"
      },
      {
        "txt": "} @Override public String getCurrentName() throws IOException { String name; if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { XmlReadContext parent = _parsingContext.getParent(); name = parent.getCurrentName(); } else { name = _parsingContext.getCurrentName();"
      },
      {
        "txt": "} if (name == null) { throw new IllegalStateException(\"Missing name, in state: \"+_currToken); } return name; } @Override public void overrideCurrentName(String name) { XmlReadContext ctxt = _parsingContext;"
      },
      {
        "txt": "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { ctxt = ctxt.getParent(); } ctxt.setCurrentName(name); } @Override public void close() throws IOException { if (!_closed) { _closed = true;"
      },
      {
        "txt": "try { if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) { _xmlTokens.closeCompletely(); } else { _xmlTokens.close(); } } finally { _releaseBuffers(); } }"
      },
      {
        "txt": "} @Override public boolean isClosed() { return _closed; } @Override public XmlReadContext getParsingContext() { return _parsingContext; } @Override public JsonLocation getTokenLocation() { return _xmlTokens.getTokenLocation();"
      },
      {
        "txt": "} @Override public JsonLocation getCurrentLocation() { return _xmlTokens.getCurrentLocation(); } @Override public boolean isExpectedStartArrayToken() { JsonToken t = _currToken; if (t == JsonToken.START_OBJECT) {"
      },
      {
        "txt": "_currToken = JsonToken.START_ARRAY; _parsingContext.convertToArray(); _nextToken = null; _xmlTokens.skipAttributes(); return true; } return (t == JsonToken.START_ARRAY); } @Override public JsonToken nextToken() throws IOException"
      },
      {
        "txt": "{ JsonToken t = nextToken0(); if (t != null) { switch (t) { case FIELD_NAME: System.out.println(\"JsonToken: FIELD_NAME '\"+_parsingContext.getCurrentName()+\"'\"); break; case VALUE_STRING: System.out.println(\"JsonToken: VALUE_STRING '\"+getText()+\"'\"); break;"
      },
      {
        "txt": "default: System.out.println(\"JsonToken: \"+t); } } return t; } @Override public JsonToken nextToken() throws IOException { _binaryValue = null;"
      },
      {
        "txt": "if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; switch (t) { case START_OBJECT: _parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1);"
      },
      {
        "txt": "break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break; case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: // VALUE_STRING, VALUE_NULL"
      },
      {
        "txt": "} return t; } int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) { _nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); }"
      },
      {
        "txt": "if (_parsingContext.inArray()) { token = _xmlTokens.next(); _mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName(); _parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); }"
      },
      {
        "txt": "return (_currToken = JsonToken.FIELD_NAME); } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) { _mayBeLeaf = false; <extra_id_0> return (_currToken = JsonToken.VALUE_NULL); } _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken;"
      },
      {
        "txt": "_namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false; _nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); }"
      },
      {
        "txt": "_parsingContext.setCurrentName(_xmlTokens.getLocalName()); return (_currToken = JsonToken.FIELD_NAME); case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); return (_currToken = JsonToken.VALUE_STRING); case XmlTokenStream.XML_TEXT: _currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement();"
      },
      {
        "txt": "if (_parsingContext.inArray()) { if (_isEmpty(_currText)) { _currToken = JsonToken.END_ARRAY; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; } } return (_currToken = JsonToken.VALUE_STRING); } else {"
      },
      {
        "txt": "if (_parsingContext.inObject() && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) { _currToken = JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; } } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING;"
      },
      {
        "txt": "return (_currToken = JsonToken.FIELD_NAME); case XmlTokenStream.XML_END: return (_currToken = null); } _throwInternal(); return null; } @Override public String nextTextValue() throws IOException {"
      },
      {
        "txt": "_binaryValue = null; if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; if (t == JsonToken.VALUE_STRING) { return _currText; } _updateState(t); return null;"
      },
      {
        "txt": "} int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) { _nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); _currToken = JsonToken.START_OBJECT; return null; } if (_parsingContext.inArray()) {"
      },
      {
        "txt": "token = _xmlTokens.next(); _mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName(); _parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _mayBeLeaf = true;"
      },
      {
        "txt": "_currToken = JsonToken.FIELD_NAME; return null; } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) { _mayBeLeaf = false; _currToken = JsonToken.VALUE_STRING; return (_currText = \"\"); }"
      },
      {
        "txt": "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false; _nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1);"
      },
      {
        "txt": "_currToken = JsonToken.START_OBJECT; } else { _parsingContext.setCurrentName(_xmlTokens.getLocalName()); _currToken = JsonToken.FIELD_NAME; } break; case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); _currToken = JsonToken.VALUE_STRING; break;"
      },
      {
        "txt": "case XmlTokenStream.XML_TEXT: _currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement(); _currToken = JsonToken.VALUE_STRING; return _currText; } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING;"
      },
      {
        "txt": "_currToken = JsonToken.FIELD_NAME; break; case XmlTokenStream.XML_END: _currToken = null; } return null; } private void _updateState(JsonToken t) { switch (t) {"
      },
      {
        "txt": "case START_OBJECT: _parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1); break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap();"
      },
      {
        "txt": "break; case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: } } @Override public String getText() throws IOException {"
      },
      {
        "txt": "if (_currToken == null) { return null; } switch (_currToken) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; default: return _currToken.asString();"
      },
      {
        "txt": "} } @Override public final String getValueAsString() throws IOException { return getValueAsString(null); } @Override public String getValueAsString(String defValue) throws IOException { JsonToken t = _currToken;"
      },
      {
        "txt": "if (t == null) { return null; } switch (t) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; case START_OBJECT: {"
      },
      {
        "txt": "String str = _xmlTokens.convertToString(); if (str != null) { _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); _currToken = JsonToken.VALUE_STRING; _nextToken = null; _xmlTokens.skipEndElement(); return (_currText = str); } }"
      },
      {
        "txt": "return null; default: if (_currToken.isScalarValue()) { return _currToken.asString(); } } return defValue; } @Override public char[] getTextCharacters() throws IOException {"
      },
      {
        "txt": "String text = getText(); return (text == null) ? null : text.toCharArray(); } @Override public int getTextLength() throws IOException { String text = getText(); return (text == null) ? 0 : text.length(); } @Override public int getTextOffset() throws IOException {"
      },
      {
        "txt": "return 0; } @Override public boolean hasTextCharacters() { return false; } @Override public Object getEmbeddedObject() throws IOException { return null;"
      },
      {
        "txt": "} @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) { _reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\"); } if (_binaryValue == null) { try {"
      },
      {
        "txt": "_binaryValue = _decodeBase64(b64variant); } catch (IllegalArgumentException iae) { throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage()); } } return _binaryValue; } @SuppressWarnings(\"resource\") protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException {"
      },
      {
        "txt": "ByteArrayBuilder builder = _getByteArrayBuilder(); final String str = getText(); _decodeBase64(str, builder, b64variant); return builder.toByteArray(); } @Override public BigInteger getBigIntegerValue() throws IOException { return null; } @Override"
      },
      {
        "txt": "public BigDecimal getDecimalValue() throws IOException { return null; } @Override public double getDoubleValue() throws IOException { return 0; } @Override public float getFloatValue() throws IOException { return 0;"
      },
      {
        "txt": "} @Override public int getIntValue() throws IOException { return 0; } @Override public long getLongValue() throws IOException { return 0; } @Override"
      },
      {
        "txt": "public NumberType getNumberType() throws IOException { return null; } @Override public Number getNumberValue() throws IOException { return null; } @Override protected void _handleEOF() throws JsonParseException {"
      },
      {
        "txt": "if (!_parsingContext.inRoot()) { _reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\"); } } protected void _releaseBuffers() throws IOException { } protected ByteArrayBuilder _getByteArrayBuilder() { if (_byteArrayBuilder == null) { _byteArrayBuilder = new ByteArrayBuilder();"
      },
      {
        "txt": "} else { _byteArrayBuilder.reset(); } return _byteArrayBuilder; } protected boolean _isEmpty(String str) { int len = (str == null) ? 0 : str.length(); if (len > 0) { for (int i = 0; i < len; ++i) {"
      },
      {
        "txt": "if (str.charAt(i) > ' ') { return false; } } } return true; }"
      }
    ]
  },
  {
    "id": 1823,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
    "start-bug-line": 514,
    "end-bug-line": 514,
    "bug": "",
    "fix": "_nextToken = JsonToken.END_OBJECT; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.deser; import java.io.IOException;"
      },
      {
        "txt": "import java.math.BigDecimal; import java.math.BigInteger; import java.util.Set; import javax.xml.stream.XMLStreamReader; import javax.xml.stream.XMLStreamWriter; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.base.ParserMinimalBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.util.ByteArrayBuilder; import com.fasterxml.jackson.dataformat.xml.PackageVersion;"
      },
      {
        "txt": "import com.fasterxml.jackson.dataformat.xml.XmlMapper; public class FromXmlParser extends ParserMinimalBase { public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\"; public enum Feature implements FormatFeature { ; final boolean _defaultState; final int _mask;"
      },
      {
        "txt": "public static int collectDefaults() { int flags = 0; for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; }"
      },
      {
        "txt": "private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal()); } @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY; protected int _formatFeatures;"
      },
      {
        "txt": "protected ObjectCodec _objectCodec; protected boolean _closed; final protected IOContext _ioContext; protected XmlReadContext _parsingContext; protected final XmlTokenStream _xmlTokens; protected boolean _mayBeLeaf; protected JsonToken _nextToken; protected String _currText; protected Set<String> _namesToWrap; protected ByteArrayBuilder _byteArrayBuilder = null;"
      },
      {
        "txt": "protected byte[] _binaryValue; public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamReader xmlReader) { super(genericParserFeatures); _formatFeatures = xmlFeatures; _ioContext = ctxt; _objectCodec = codec; _parsingContext = XmlReadContext.createRootContext(-1, -1); _nextToken = JsonToken.START_OBJECT;"
      },
      {
        "txt": "_xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference()); } @Override public Version version() { return PackageVersion.VERSION; } @Override public ObjectCodec getCodec() { return _objectCodec; }"
      },
      {
        "txt": "@Override public void setCodec(ObjectCodec c) { _objectCodec = c; } public void setXMLTextElementName(String name) { _cfgNameForTextElement = name; } @Override public boolean requiresCustomCodec() { return true;"
      },
      {
        "txt": "} public FromXmlParser enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public FromXmlParser disable(Feature f) { _formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) {"
      },
      {
        "txt": "return (_formatFeatures & f.getMask()) != 0; } public FromXmlParser configure(Feature f, boolean state) { if (state) { enable(f); } else { disable(f); } return this; }"
      },
      {
        "txt": "@Override public int getFormatFeatures() { return _formatFeatures; } @Override public JsonParser overrideFormatFeatures(int values, int mask) { _formatFeatures = (_formatFeatures & ~mask) | (values & mask); return this; } public XMLStreamReader getStaxReader() {"
      },
      {
        "txt": "return _xmlTokens.getXmlReader(); } public void addVirtualWrapping(Set<String> namesToWrap) { String name = _xmlTokens.getLocalName(); if (name != null && namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _namesToWrap = namesToWrap; _parsingContext.setNamesToWrap(namesToWrap);"
      },
      {
        "txt": "} @Override public String getCurrentName() throws IOException { String name; if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { XmlReadContext parent = _parsingContext.getParent(); name = parent.getCurrentName(); } else { name = _parsingContext.getCurrentName();"
      },
      {
        "txt": "} if (name == null) { throw new IllegalStateException(\"Missing name, in state: \"+_currToken); } return name; } @Override public void overrideCurrentName(String name) { XmlReadContext ctxt = _parsingContext;"
      },
      {
        "txt": "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { ctxt = ctxt.getParent(); } ctxt.setCurrentName(name); } @Override public void close() throws IOException { if (!_closed) { _closed = true;"
      },
      {
        "txt": "try { if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) { _xmlTokens.closeCompletely(); } else { _xmlTokens.close(); } } finally { _releaseBuffers(); } }"
      },
      {
        "txt": "} @Override public boolean isClosed() { return _closed; } @Override public XmlReadContext getParsingContext() { return _parsingContext; } @Override public JsonLocation getTokenLocation() { return _xmlTokens.getTokenLocation();"
      },
      {
        "txt": "} @Override public JsonLocation getCurrentLocation() { return _xmlTokens.getCurrentLocation(); } @Override public boolean isExpectedStartArrayToken() { JsonToken t = _currToken; if (t == JsonToken.START_OBJECT) {"
      },
      {
        "txt": "_currToken = JsonToken.START_ARRAY; _parsingContext.convertToArray(); _nextToken = null; _xmlTokens.skipAttributes(); return true; } return (t == JsonToken.START_ARRAY); } @Override public JsonToken nextToken() throws IOException"
      },
      {
        "txt": "{ JsonToken t = nextToken0(); if (t != null) { switch (t) { case FIELD_NAME: System.out.println(\"JsonToken: FIELD_NAME '\"+_parsingContext.getCurrentName()+\"'\"); break; case VALUE_STRING: System.out.println(\"JsonToken: VALUE_STRING '\"+getText()+\"'\"); break;"
      },
      {
        "txt": "default: System.out.println(\"JsonToken: \"+t); } } return t; } @Override public JsonToken nextToken() throws IOException { _binaryValue = null;"
      },
      {
        "txt": "if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; switch (t) { case START_OBJECT: _parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1);"
      },
      {
        "txt": "break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break; case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: // VALUE_STRING, VALUE_NULL"
      },
      {
        "txt": "} return t; } int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) { _nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); }"
      },
      {
        "txt": "if (_parsingContext.inArray()) { token = _xmlTokens.next(); _mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName(); _parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); }"
      },
      {
        "txt": "return (_currToken = JsonToken.FIELD_NAME); } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) { _mayBeLeaf = false; <extra_id_0> } _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; case XmlTokenStream.XML_ATTRIBUTE_NAME:"
      },
      {
        "txt": "return _currToken; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false; _nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); } _parsingContext.setCurrentName(_xmlTokens.getLocalName());"
      },
      {
        "txt": "return (_currToken = JsonToken.FIELD_NAME); case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); return (_currToken = JsonToken.VALUE_STRING); case XmlTokenStream.XML_TEXT: _currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement(); if (_parsingContext.inArray()) {"
      },
      {
        "txt": "if (_isEmpty(_currText)) { _currToken = JsonToken.END_ARRAY; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; } } return (_currToken = JsonToken.VALUE_STRING); } else { if (_parsingContext.inObject()"
      },
      {
        "txt": "&& (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) { _currToken = JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; } } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING; return (_currToken = JsonToken.FIELD_NAME);"
      },
      {
        "txt": "case XmlTokenStream.XML_END: return (_currToken = null); } _throwInternal(); return null; } @Override public String nextTextValue() throws IOException { _binaryValue = null;"
      },
      {
        "txt": "if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; if (t == JsonToken.VALUE_STRING) { return _currText; } _updateState(t); return null; }"
      },
      {
        "txt": "int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) { _nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); _currToken = JsonToken.START_OBJECT; return null; } if (_parsingContext.inArray()) { token = _xmlTokens.next();"
      },
      {
        "txt": "_mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName(); _parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _mayBeLeaf = true; _currToken = JsonToken.FIELD_NAME;"
      },
      {
        "txt": "return null; } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) { _mayBeLeaf = false; _currToken = JsonToken.VALUE_STRING; return (_currText = \"\"); } _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT;"
      },
      {
        "txt": "_parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false; _nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1); _currToken = JsonToken.START_OBJECT;"
      },
      {
        "txt": "} else { _parsingContext.setCurrentName(_xmlTokens.getLocalName()); _currToken = JsonToken.FIELD_NAME; } break; case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); _currToken = JsonToken.VALUE_STRING; break; case XmlTokenStream.XML_TEXT:"
      },
      {
        "txt": "_currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement(); _currToken = JsonToken.VALUE_STRING; return _currText; } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING; _currToken = JsonToken.FIELD_NAME;"
      },
      {
        "txt": "break; case XmlTokenStream.XML_END: _currToken = null; } return null; } private void _updateState(JsonToken t) { switch (t) { case START_OBJECT:"
      },
      {
        "txt": "_parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1); break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break;"
      },
      {
        "txt": "case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: } } @Override public String getText() throws IOException { if (_currToken == null) {"
      },
      {
        "txt": "return null; } switch (_currToken) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; default: return _currToken.asString(); }"
      },
      {
        "txt": "} @Override public final String getValueAsString() throws IOException { return getValueAsString(null); } @Override public String getValueAsString(String defValue) throws IOException { JsonToken t = _currToken; if (t == null) {"
      },
      {
        "txt": "return null; } switch (t) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; case START_OBJECT: { String str = _xmlTokens.convertToString();"
      },
      {
        "txt": "if (str != null) { _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); _currToken = JsonToken.VALUE_STRING; _nextToken = null; _xmlTokens.skipEndElement(); return (_currText = str); } } return null;"
      },
      {
        "txt": "default: if (_currToken.isScalarValue()) { return _currToken.asString(); } } return defValue; } @Override public char[] getTextCharacters() throws IOException { String text = getText();"
      },
      {
        "txt": "return (text == null) ? null : text.toCharArray(); } @Override public int getTextLength() throws IOException { String text = getText(); return (text == null) ? 0 : text.length(); } @Override public int getTextOffset() throws IOException { return 0;"
      },
      {
        "txt": "} @Override public boolean hasTextCharacters() { return false; } @Override public Object getEmbeddedObject() throws IOException { return null; }"
      },
      {
        "txt": "@Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) { _reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\"); } if (_binaryValue == null) { try { _binaryValue = _decodeBase64(b64variant);"
      },
      {
        "txt": "} catch (IllegalArgumentException iae) { throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage()); } } return _binaryValue; } @SuppressWarnings(\"resource\") protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException { ByteArrayBuilder builder = _getByteArrayBuilder();"
      },
      {
        "txt": "final String str = getText(); _decodeBase64(str, builder, b64variant); return builder.toByteArray(); } @Override public BigInteger getBigIntegerValue() throws IOException { return null; } @Override public BigDecimal getDecimalValue() throws IOException {"
      },
      {
        "txt": "return null; } @Override public double getDoubleValue() throws IOException { return 0; } @Override public float getFloatValue() throws IOException { return 0; }"
      },
      {
        "txt": "@Override public int getIntValue() throws IOException { return 0; } @Override public long getLongValue() throws IOException { return 0; } @Override public NumberType getNumberType() throws IOException {"
      },
      {
        "txt": "return null; } @Override public Number getNumberValue() throws IOException { return null; } @Override protected void _handleEOF() throws JsonParseException { if (!_parsingContext.inRoot()) {"
      },
      {
        "txt": "_reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\"); } } protected void _releaseBuffers() throws IOException { } protected ByteArrayBuilder _getByteArrayBuilder() { if (_byteArrayBuilder == null) { _byteArrayBuilder = new ByteArrayBuilder(); } else {"
      },
      {
        "txt": "_byteArrayBuilder.reset(); } return _byteArrayBuilder; } protected boolean _isEmpty(String str) { int len = (str == null) ? 0 : str.length(); if (len > 0) { for (int i = 0; i < len; ++i) { if (str.charAt(i) > ' ') {"
      },
      {
        "txt": "return false; } } } return true; }"
      }
    ]
  },
  {
    "id": 1824,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/deser/FromXmlParser.java",
    "start-bug-line": 550,
    "end-bug-line": 553,
    "bug": "_currToken = JsonToken.END_ARRAY; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken;",
    "fix": "_nextToken = JsonToken.END_OBJECT; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.deser; import java.io.IOException; import java.math.BigDecimal; import java.math.BigInteger; import java.util.Set; import javax.xml.stream.XMLStreamReader; import javax.xml.stream.XMLStreamWriter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.ParserMinimalBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.util.ByteArrayBuilder; import com.fasterxml.jackson.dataformat.xml.PackageVersion; import com.fasterxml.jackson.dataformat.xml.XmlMapper; public class FromXmlParser extends ParserMinimalBase { public final static String DEFAULT_UNNAMED_TEXT_PROPERTY = \"\"; public enum Feature implements FormatFeature"
      },
      {
        "txt": "{ ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0; for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask();"
      },
      {
        "txt": "} } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal()); } @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; }"
      },
      {
        "txt": "@Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } protected String _cfgNameForTextElement = DEFAULT_UNNAMED_TEXT_PROPERTY; protected int _formatFeatures; protected ObjectCodec _objectCodec; protected boolean _closed; final protected IOContext _ioContext; protected XmlReadContext _parsingContext; protected final XmlTokenStream _xmlTokens; protected boolean _mayBeLeaf;"
      },
      {
        "txt": "protected JsonToken _nextToken; protected String _currText; protected Set<String> _namesToWrap; protected ByteArrayBuilder _byteArrayBuilder = null; protected byte[] _binaryValue; public FromXmlParser(IOContext ctxt, int genericParserFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamReader xmlReader) { super(genericParserFeatures); _formatFeatures = xmlFeatures;"
      },
      {
        "txt": "_ioContext = ctxt; _objectCodec = codec; _parsingContext = XmlReadContext.createRootContext(-1, -1); _nextToken = JsonToken.START_OBJECT; _xmlTokens = new XmlTokenStream(xmlReader, ctxt.getSourceReference()); } @Override public Version version() { return PackageVersion.VERSION; }"
      },
      {
        "txt": "@Override public ObjectCodec getCodec() { return _objectCodec; } @Override public void setCodec(ObjectCodec c) { _objectCodec = c; } public void setXMLTextElementName(String name) { _cfgNameForTextElement = name;"
      },
      {
        "txt": "} @Override public boolean requiresCustomCodec() { return true; } public FromXmlParser enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public FromXmlParser disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public FromXmlParser configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public int getFormatFeatures() { return _formatFeatures; } @Override public JsonParser overrideFormatFeatures(int values, int mask) {"
      },
      {
        "txt": "_formatFeatures = (_formatFeatures & ~mask) | (values & mask); return this; } public XMLStreamReader getStaxReader() { return _xmlTokens.getXmlReader(); } public void addVirtualWrapping(Set<String> namesToWrap) { String name = _xmlTokens.getLocalName(); if (name != null && namesToWrap.contains(name)) {"
      },
      {
        "txt": "_xmlTokens.repeatStartElement(); } _namesToWrap = namesToWrap; _parsingContext.setNamesToWrap(namesToWrap); } @Override public String getCurrentName() throws IOException { String name; if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {"
      },
      {
        "txt": "XmlReadContext parent = _parsingContext.getParent(); name = parent.getCurrentName(); } else { name = _parsingContext.getCurrentName(); } if (name == null) { throw new IllegalStateException(\"Missing name, in state: \"+_currToken); } return name; }"
      },
      {
        "txt": "@Override public void overrideCurrentName(String name) { XmlReadContext ctxt = _parsingContext; if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) { ctxt = ctxt.getParent(); } ctxt.setCurrentName(name); } @Override"
      },
      {
        "txt": "public void close() throws IOException { if (!_closed) { _closed = true; try { if (_ioContext.isResourceManaged() || isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE)) { _xmlTokens.closeCompletely(); } else { _xmlTokens.close(); }"
      },
      {
        "txt": "} finally { _releaseBuffers(); } } } @Override public boolean isClosed() { return _closed; } @Override public XmlReadContext getParsingContext() { return _parsingContext;"
      },
      {
        "txt": "} @Override public JsonLocation getTokenLocation() { return _xmlTokens.getTokenLocation(); } @Override public JsonLocation getCurrentLocation() { return _xmlTokens.getCurrentLocation(); } @Override"
      },
      {
        "txt": "public boolean isExpectedStartArrayToken() { JsonToken t = _currToken; if (t == JsonToken.START_OBJECT) { _currToken = JsonToken.START_ARRAY; _parsingContext.convertToArray(); _nextToken = null; _xmlTokens.skipAttributes(); return true; }"
      },
      {
        "txt": "return (t == JsonToken.START_ARRAY); } @Override public JsonToken nextToken() throws IOException { JsonToken t = nextToken0(); if (t != null) { switch (t) { case FIELD_NAME: System.out.println(\"JsonToken: FIELD_NAME '\"+_parsingContext.getCurrentName()+\"'\");"
      },
      {
        "txt": "break; case VALUE_STRING: System.out.println(\"JsonToken: VALUE_STRING '\"+getText()+\"'\"); break; default: System.out.println(\"JsonToken: \"+t); } } return t; }"
      },
      {
        "txt": "@Override public JsonToken nextToken() throws IOException { _binaryValue = null; if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; switch (t) { case START_OBJECT:"
      },
      {
        "txt": "_parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1); break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break;"
      },
      {
        "txt": "case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: // VALUE_STRING, VALUE_NULL } return t; } int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) {"
      },
      {
        "txt": "_nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); } if (_parsingContext.inArray()) { token = _xmlTokens.next(); _mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName();"
      },
      {
        "txt": "_parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _mayBeLeaf = true; return (_currToken = JsonToken.FIELD_NAME); } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) {"
      },
      {
        "txt": "_mayBeLeaf = false; return (_currToken = JsonToken.VALUE_NULL); } _currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false;"
      },
      {
        "txt": "_nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1); return (_currToken = JsonToken.START_OBJECT); } _parsingContext.setCurrentName(_xmlTokens.getLocalName()); return (_currToken = JsonToken.FIELD_NAME); case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); return (_currToken = JsonToken.VALUE_STRING);"
      },
      {
        "txt": "_currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement(); if (_parsingContext.inArray()) { if (_isEmpty(_currText)) { <extra_id_0> } } return (_currToken = JsonToken.VALUE_STRING); } else { if (_parsingContext.inObject() && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) {"
      },
      {
        "txt": "if (_parsingContext.inObject() && (_currToken != JsonToken.FIELD_NAME) && _isEmpty(_currText)) { _currToken = JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); return _currToken; } } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING;"
      },
      {
        "txt": "return (_currToken = JsonToken.FIELD_NAME); case XmlTokenStream.XML_END: return (_currToken = null); } _throwInternal(); return null; } @Override public String nextTextValue() throws IOException {"
      },
      {
        "txt": "_binaryValue = null; if (_nextToken != null) { JsonToken t = _nextToken; _currToken = t; _nextToken = null; if (t == JsonToken.VALUE_STRING) { return _currText; } _updateState(t); return null;"
      },
      {
        "txt": "} int token = _xmlTokens.next(); while (token == XmlTokenStream.XML_START_ELEMENT) { if (_mayBeLeaf) { _nextToken = JsonToken.FIELD_NAME; _parsingContext = _parsingContext.createChildObjectContext(-1, -1); _currToken = JsonToken.START_OBJECT; return null; } if (_parsingContext.inArray()) {"
      },
      {
        "txt": "token = _xmlTokens.next(); _mayBeLeaf = true; continue; } String name = _xmlTokens.getLocalName(); _parsingContext.setCurrentName(name); if (_namesToWrap != null && _namesToWrap.contains(name)) { _xmlTokens.repeatStartElement(); } _mayBeLeaf = true;"
      },
      {
        "txt": "_currToken = JsonToken.FIELD_NAME; return null; } switch (token) { case XmlTokenStream.XML_END_ELEMENT: if (_mayBeLeaf) { _mayBeLeaf = false; _currToken = JsonToken.VALUE_STRING; return (_currText = \"\"); }"
      },
      {
        "txt": "_currToken = _parsingContext.inArray() ? JsonToken.END_ARRAY : JsonToken.END_OBJECT; _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); break; case XmlTokenStream.XML_ATTRIBUTE_NAME: if (_mayBeLeaf) { _mayBeLeaf = false; _nextToken = JsonToken.FIELD_NAME; _currText = _xmlTokens.getText(); _parsingContext = _parsingContext.createChildObjectContext(-1, -1);"
      },
      {
        "txt": "_currToken = JsonToken.START_OBJECT; } else { _parsingContext.setCurrentName(_xmlTokens.getLocalName()); _currToken = JsonToken.FIELD_NAME; } break; case XmlTokenStream.XML_ATTRIBUTE_VALUE: _currText = _xmlTokens.getText(); _currToken = JsonToken.VALUE_STRING; break;"
      },
      {
        "txt": "case XmlTokenStream.XML_TEXT: _currText = _xmlTokens.getText(); if (_mayBeLeaf) { _mayBeLeaf = false; _xmlTokens.skipEndElement(); _currToken = JsonToken.VALUE_STRING; return _currText; } _parsingContext.setCurrentName(_cfgNameForTextElement); _nextToken = JsonToken.VALUE_STRING;"
      },
      {
        "txt": "_currToken = JsonToken.FIELD_NAME; break; case XmlTokenStream.XML_END: _currToken = null; } return null; } private void _updateState(JsonToken t) { switch (t) {"
      },
      {
        "txt": "case START_OBJECT: _parsingContext = _parsingContext.createChildObjectContext(-1, -1); break; case START_ARRAY: _parsingContext = _parsingContext.createChildArrayContext(-1, -1); break; case END_OBJECT: case END_ARRAY: _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap();"
      },
      {
        "txt": "break; case FIELD_NAME: _parsingContext.setCurrentName(_xmlTokens.getLocalName()); break; default: } } @Override public String getText() throws IOException {"
      },
      {
        "txt": "if (_currToken == null) { return null; } switch (_currToken) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; default: return _currToken.asString();"
      },
      {
        "txt": "} } @Override public final String getValueAsString() throws IOException { return getValueAsString(null); } @Override public String getValueAsString(String defValue) throws IOException { JsonToken t = _currToken;"
      },
      {
        "txt": "if (t == null) { return null; } switch (t) { case FIELD_NAME: return getCurrentName(); case VALUE_STRING: return _currText; case START_OBJECT: {"
      },
      {
        "txt": "String str = _xmlTokens.convertToString(); if (str != null) { _parsingContext = _parsingContext.getParent(); _namesToWrap = _parsingContext.getNamesToWrap(); _currToken = JsonToken.VALUE_STRING; _nextToken = null; _xmlTokens.skipEndElement(); return (_currText = str); } }"
      },
      {
        "txt": "return null; default: if (_currToken.isScalarValue()) { return _currToken.asString(); } } return defValue; } @Override public char[] getTextCharacters() throws IOException {"
      },
      {
        "txt": "String text = getText(); return (text == null) ? null : text.toCharArray(); } @Override public int getTextLength() throws IOException { String text = getText(); return (text == null) ? 0 : text.length(); } @Override public int getTextOffset() throws IOException {"
      },
      {
        "txt": "return 0; } @Override public boolean hasTextCharacters() { return false; } @Override public Object getEmbeddedObject() throws IOException { return null;"
      },
      {
        "txt": "} @Override public byte[] getBinaryValue(Base64Variant b64variant) throws IOException { if (_currToken != JsonToken.VALUE_STRING && (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) { _reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\"); } if (_binaryValue == null) { try {"
      },
      {
        "txt": "_binaryValue = _decodeBase64(b64variant); } catch (IllegalArgumentException iae) { throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage()); } } return _binaryValue; } @SuppressWarnings(\"resource\") protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException {"
      },
      {
        "txt": "ByteArrayBuilder builder = _getByteArrayBuilder(); final String str = getText(); _decodeBase64(str, builder, b64variant); return builder.toByteArray(); } @Override public BigInteger getBigIntegerValue() throws IOException { return null; } @Override"
      },
      {
        "txt": "public BigDecimal getDecimalValue() throws IOException { return null; } @Override public double getDoubleValue() throws IOException { return 0; } @Override public float getFloatValue() throws IOException { return 0;"
      },
      {
        "txt": "} @Override public int getIntValue() throws IOException { return 0; } @Override public long getLongValue() throws IOException { return 0; } @Override"
      },
      {
        "txt": "public NumberType getNumberType() throws IOException { return null; } @Override public Number getNumberValue() throws IOException { return null; } @Override protected void _handleEOF() throws JsonParseException {"
      },
      {
        "txt": "if (!_parsingContext.inRoot()) { _reportInvalidEOF(\": expected close marker for \"+_parsingContext.getTypeDesc()+\" (from \"+_parsingContext.getStartLocation(_ioContext.getSourceReference())+\")\"); } } protected void _releaseBuffers() throws IOException { } protected ByteArrayBuilder _getByteArrayBuilder() { if (_byteArrayBuilder == null) { _byteArrayBuilder = new ByteArrayBuilder();"
      },
      {
        "txt": "} else { _byteArrayBuilder.reset(); } return _byteArrayBuilder; } protected boolean _isEmpty(String str) { int len = (str == null) ? 0 : str.length(); if (len > 0) { for (int i = 0; i < len; ++i) {"
      },
      {
        "txt": "if (str.charAt(i) > ' ') { return false; } } } return true; }"
      }
    ]
  }
]
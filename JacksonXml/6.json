[
  {
    "id": 1838,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 843,
    "end-bug-line": 843,
    "bug": "",
    "fix": "@Override public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException { if (data == null) { writeNull(); return 0; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1839,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 844,
    "end-bug-line": 844,
    "bug": "",
    "fix": "byte[] fullBuffer = toFullBuffer(data, dataLength); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer); } else if (checkNextIsUnwrapped()) {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1840,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 845,
    "end-bug-line": 845,
    "bug": "",
    "fix": "writeStreamAsBinary(data, dataLength);",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1841,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 846,
    "end-bug-line": 846,
    "bug": "",
    "fix": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), toFullBuffer(data, dataLength), 0, dataLength); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); writeStreamAsBinary(data, dataLength); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1842,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 847,
    "end-bug-line": 847,
    "bug": "",
    "fix": "return dataLength; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1843,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 848,
    "end-bug-line": 848,
    "bug": "",
    "fix": "private void writeStreamAsBinary(InputStream data, int len) throws IOException, XMLStreamException {",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1844,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 849,
    "end-bug-line": 849,
    "bug": "",
    "fix": "byte[] tmp = new byte[3]; int offset = 0; int read; while((read = data.read(tmp, offset, Math.min(3 - offset, len))) != -1) { offset += read; len -= read; if(offset == 3) { offset = 0; _xmlWriter.writeBinary(tmp, 0, 3); } if (len == 0) { break; } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1845,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 851,
    "end-bug-line": 851,
    "bug": "",
    "fix": "if(offset > 0) { _xmlWriter.writeBinary(tmp, 0, offset); } }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "import java.io.*; import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.base.GeneratorBase; import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\";"
      },
      {
        "txt": "public enum Feature implements FormatFeature { WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0;"
      },
      {
        "txt": "for (Feature f : values()) { if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal());"
      },
      {
        "txt": "} @Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures;"
      },
      {
        "txt": "protected XmlPrettyPrinter _xmlPrettyPrinter; protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) {"
      },
      {
        "txt": "super(stdFeatures, codec); _formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException"
      },
      {
        "txt": "{ if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\");"
      },
      {
        "txt": "} else { return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ?"
      },
      {
        "txt": "(XmlPrettyPrinter) pp : null; return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1;"
      },
      {
        "txt": "} @Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask);"
      },
      {
        "txt": "if (oldF != newF) { _formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) {"
      },
      {
        "txt": "_formatFeatures &= ~f.getMask(); return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else {"
      },
      {
        "txt": "disable(f); } return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() {"
      },
      {
        "txt": "return _xmlWriter; } public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; }"
      },
      {
        "txt": "public void setNextIsCData(boolean isCData) { _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) {"
      },
      {
        "txt": "if (_nextName == null) { _nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "this.setNextName(wrappedName); } public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\");"
      },
      {
        "txt": "} } @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name));"
      },
      {
        "txt": "} @Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) {"
      },
      {
        "txt": "typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT; } return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeStartArray(this); } else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); }"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\");"
      },
      {
        "txt": "_writeContext = _writeContext.createChildObjectContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException {"
      },
      {
        "txt": "if (!_writeContext.inObject()) { _reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); }"
      },
      {
        "txt": "} public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try {"
      },
      {
        "txt": "_nextIsAttribute = false; _xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text);"
      },
      {
        "txt": "} else { _xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeString(char[] text, int offset, int len) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation();"
      },
      {
        "txt": "} @Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len));"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRawValue(SerializableString text) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try {"
      },
      {
        "txt": "_xmlWriter.writeRaw(text); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\");"
      },
      {
        "txt": "} try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException {"
      },
      {
        "txt": "if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeRaw(char c) throws IOException { writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull();"
      },
      {
        "txt": "return; } _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len);"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } <extra_id_0> private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data; } byte[] result = new byte[len];"
      },
      {
        "txt": "} byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } @Override public void writeBoolean(boolean value) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "} try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d);"
      },
      {
        "txt": "} else if (checkNextIsUnwrapped()) { _xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException {"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "dec.toPlainString()); } else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); }"
      },
      {
        "txt": "} else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else {"
      },
      {
        "txt": "_xmlWriter.writeDecimal(dec); } _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(BigInteger value) throws IOException { if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(),"
      },
      {
        "txt": "value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue();"
      },
      {
        "txt": "if (status == JsonWriteContext.STATUS_EXPECT_NAME) { _reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush();"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) {"
      },
      {
        "txt": "try { while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; }"
      },
      {
        "txt": "} } catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close();"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() {"
      },
      {
        "txt": "if (_nextIsUnwrapped) { _nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException"
      },
      {
        "txt": "{ throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1846,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 866,
    "end-bug-line": 866,
    "bug": "",
    "fix": "private byte[] toFullBuffer(InputStream data, final int len) throws IOException { byte[] result = new byte[len]; int offset = 0;",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.ser; import java.io.*;"
      },
      {
        "txt": "import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.base.GeneratorBase;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\"; public enum Feature implements FormatFeature"
      },
      {
        "txt": "{ WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0; for (Feature f : values()) {"
      },
      {
        "txt": "if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal()); }"
      },
      {
        "txt": "@Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures; protected XmlPrettyPrinter _xmlPrettyPrinter;"
      },
      {
        "txt": "protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) { super(stdFeatures, codec);"
      },
      {
        "txt": "_formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException {"
      },
      {
        "txt": "if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\"); } else {"
      },
      {
        "txt": "return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) pp : null;"
      },
      {
        "txt": "return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1; }"
      },
      {
        "txt": "@Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask); if (oldF != newF) {"
      },
      {
        "txt": "_formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) { _formatFeatures &= ~f.getMask();"
      },
      {
        "txt": "return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else { disable(f);"
      },
      {
        "txt": "} return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() { return _xmlWriter;"
      },
      {
        "txt": "} public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; } public void setNextIsCData(boolean isCData)"
      },
      {
        "txt": "{ _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) { if (_nextName == null) {"
      },
      {
        "txt": "_nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } this.setNextName(wrappedName);"
      },
      {
        "txt": "} public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement(); }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); }"
      },
      {
        "txt": "} @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name)); }"
      },
      {
        "txt": "@Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) { typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT;"
      },
      {
        "txt": "} return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this);"
      },
      {
        "txt": "} else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); } if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\"); _writeContext = _writeContext.createChildObjectContext();"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException { if (!_writeContext.inObject()) {"
      },
      {
        "txt": "_reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); } }"
      },
      {
        "txt": "public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try { _nextIsAttribute = false;"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) {"
      },
      {
        "txt": "handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else { _xmlWriter.writeCharacters(text);"
      },
      {
        "txt": "} } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeString(char[] text, int offset, int len) throws IOException"
      },
      {
        "txt": "{ _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) {"
      },
      {
        "txt": "_xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); }"
      },
      {
        "txt": "@Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); }"
      },
      {
        "txt": "try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(SerializableString text) throws IOException {"
      },
      {
        "txt": "_reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text);"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); }"
      },
      {
        "txt": "try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char c) throws IOException"
      },
      {
        "txt": "{ writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "_xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len); _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data;"
      },
      {
        "txt": "byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } <extra_id_0> @Override public void writeBoolean(boolean value) throws IOException { _verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); }"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) {"
      },
      {
        "txt": "handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter,"
      },
      {
        "txt": "_nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try {"
      },
      {
        "txt": "if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "_xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d); _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return; }"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec.toPlainString());"
      },
      {
        "txt": "} else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); } } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec);"
      },
      {
        "txt": "} _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigInteger value) throws IOException"
      },
      {
        "txt": "{ if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try {"
      },
      {
        "txt": "if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) {"
      },
      {
        "txt": "_reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush(); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) { try {"
      },
      {
        "txt": "while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; } }"
      },
      {
        "txt": "} catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close(); }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() { if (_nextIsUnwrapped) {"
      },
      {
        "txt": "_nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException {"
      },
      {
        "txt": "throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  },
  {
    "id": 1847,
    "file_path": "src/main/java/com/fasterxml/jackson/dataformat/xml/ser/ToXmlGenerator.java",
    "start-bug-line": 867,
    "end-bug-line": 867,
    "bug": "",
    "fix": "for (; offset < len; ) { int count = data.read(result, offset, len - offset); if (count < 0) { _reportError(\"Too few bytes available: missing \"+(len - offset)+\" bytes (out of \"+len+\")\"); } offset += count; } return result; }",
    "fixes": [],
    "err": "",
    "ctxs": [
      {
        "txt": "package com.fasterxml.jackson.dataformat.xml.ser; import java.io.*;"
      },
      {
        "txt": "import java.math.BigDecimal; import java.math.BigInteger; import java.util.*; import javax.xml.namespace.QName; import javax.xml.stream.XMLStreamException; import javax.xml.stream.XMLStreamWriter; import org.codehaus.stax2.XMLStreamWriter2; import org.codehaus.stax2.ri.Stax2WriterAdapter; import com.fasterxml.jackson.core.*; import com.fasterxml.jackson.core.base.GeneratorBase;"
      },
      {
        "txt": "import com.fasterxml.jackson.core.io.IOContext; import com.fasterxml.jackson.core.json.JsonWriteContext; import com.fasterxml.jackson.dataformat.xml.XmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.DefaultXmlPrettyPrinter; import com.fasterxml.jackson.dataformat.xml.util.StaxUtil; public final class ToXmlGenerator extends GeneratorBase { protected final static String DEFAULT_UNKNOWN_ELEMENT = \"unknown\"; public enum Feature implements FormatFeature"
      },
      {
        "txt": "{ WRITE_XML_DECLARATION(false), WRITE_XML_1_1(false) ; final boolean _defaultState; final int _mask; public static int collectDefaults() { int flags = 0; for (Feature f : values()) {"
      },
      {
        "txt": "if (f.enabledByDefault()) { flags |= f.getMask(); } } return flags; } private Feature(boolean defaultState) { _defaultState = defaultState; _mask = (1 << ordinal()); }"
      },
      {
        "txt": "@Override public boolean enabledByDefault() { return _defaultState; } @Override public int getMask() { return _mask; } @Override public boolean enabledIn(int flags) { return (flags & getMask()) != 0; } } final protected XMLStreamWriter2 _xmlWriter; final protected XMLStreamWriter _originalXmlWriter; final protected boolean _stax2Emulation; final protected IOContext _ioContext; protected int _formatFeatures; protected XmlPrettyPrinter _xmlPrettyPrinter;"
      },
      {
        "txt": "protected boolean _initialized; protected QName _nextName = null; protected boolean _nextIsAttribute = false; protected boolean _nextIsUnwrapped = false; protected boolean _nextIsCData = false; protected LinkedList<QName> _elementNameStack = new LinkedList<QName>(); public ToXmlGenerator(IOContext ctxt, int stdFeatures, int xmlFeatures, ObjectCodec codec, XMLStreamWriter sw) { super(stdFeatures, codec);"
      },
      {
        "txt": "_formatFeatures = xmlFeatures; _ioContext = ctxt; _originalXmlWriter = sw; _xmlWriter = Stax2WriterAdapter.wrapIfNecessary(sw); _stax2Emulation = (_xmlWriter != sw); _xmlPrettyPrinter = (_cfgPrettyPrinter instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) _cfgPrettyPrinter : null; } public void initGenerator() throws IOException {"
      },
      {
        "txt": "if (_initialized) { return; } _initialized = true; try { if (Feature.WRITE_XML_1_1.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.1\"); } else if (Feature.WRITE_XML_DECLARATION.enabledIn(_formatFeatures)) { _xmlWriter.writeStartDocument(\"UTF-8\", \"1.0\"); } else {"
      },
      {
        "txt": "return; } if (_xmlPrettyPrinter != null) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override protected PrettyPrinter _constructDefaultPrettyPrinter() { return new DefaultXmlPrettyPrinter(); } @Override public JsonGenerator setPrettyPrinter(PrettyPrinter pp) { _cfgPrettyPrinter = pp; _xmlPrettyPrinter = (pp instanceof XmlPrettyPrinter) ? (XmlPrettyPrinter) pp : null;"
      },
      {
        "txt": "return this; } @Override public Object getOutputTarget() { return _originalXmlWriter; } @Override public int getOutputBuffered() { return -1; }"
      },
      {
        "txt": "@Override public int getFormatFeatures() { return _formatFeatures; } @Override // since 2.7 public JsonGenerator overrideFormatFeatures(int values, int mask) { int oldF = _formatFeatures; int newF = (_formatFeatures & ~mask) | (values & mask); if (oldF != newF) {"
      },
      {
        "txt": "_formatFeatures = newF; } return this; } public ToXmlGenerator enable(Feature f) { _formatFeatures |= f.getMask(); return this; } public ToXmlGenerator disable(Feature f) { _formatFeatures &= ~f.getMask();"
      },
      {
        "txt": "return this; } public final boolean isEnabled(Feature f) { return (_formatFeatures & f.getMask()) != 0; } public ToXmlGenerator configure(Feature f, boolean state) { if (state) { enable(f); } else { disable(f);"
      },
      {
        "txt": "} return this; } @Override public boolean canWriteFormattedNumbers() { return true; } public boolean inRoot() { return _writeContext.inRoot(); } public XMLStreamWriter getStaxWriter() { return _xmlWriter;"
      },
      {
        "txt": "} public void setNextIsAttribute(boolean isAttribute) { _nextIsAttribute = isAttribute; } public void setNextIsUnwrapped(boolean isUnwrapped) { _nextIsUnwrapped = isUnwrapped; } public void setNextIsCData(boolean isCData)"
      },
      {
        "txt": "{ _nextIsCData = isCData; } public final void setNextName(QName name) { _nextName = name; } public final boolean setNextNameIfMissing(QName name) { if (_nextName == null) {"
      },
      {
        "txt": "_nextName = name; return true; } return false; } public void startWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeStartElement(_xmlWriter, wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } else { _xmlWriter.writeStartElement(wrapperName.getNamespaceURI(), wrapperName.getLocalPart()); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } this.setNextName(wrappedName);"
      },
      {
        "txt": "} public void finishWrappedValue(QName wrapperName, QName wrappedName) throws IOException { if (wrapperName != null) { try { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeEndElement(_xmlWriter, _writeContext.getEntryCount()); } else { _xmlWriter.writeEndElement(); }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } } public void writeRepeatedFieldName() throws IOException { if (_writeContext.writeFieldName(_nextName.getLocalPart()) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); }"
      },
      {
        "txt": "} @Override public final void writeFieldName(String name) throws IOException { if (_writeContext.writeFieldName(name) == JsonWriteContext.STATUS_EXPECT_VALUE) { _reportError(\"Can not write a field name, expecting a value\"); } String ns = (_nextName == null) ? \"\" : _nextName.getNamespaceURI(); setNextName(new QName(ns, name)); }"
      },
      {
        "txt": "@Override public final void writeStringField(String fieldName, String value) throws IOException { writeFieldName(fieldName); writeString(value); } public WritableTypeId writeTypePrefix(WritableTypeId typeIdDef) throws IOException { if (typeIdDef.include == WritableTypeId.Inclusion.WRAPPER_ARRAY) { typeIdDef.include = WritableTypeId.Inclusion.WRAPPER_OBJECT;"
      },
      {
        "txt": "} return super.writeTypePrefix(typeIdDef); } @Override public final void writeStartArray() throws IOException { _verifyValueWrite(\"start an array\"); _writeContext = _writeContext.createChildArrayContext(); if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartArray(this);"
      },
      {
        "txt": "} else { } } @Override public final void writeEndArray() throws IOException { if (!_writeContext.inArray()) { _reportError(\"Current context not Array but \"+_writeContext.typeDesc()); } if (_cfgPrettyPrinter != null) {"
      },
      {
        "txt": "_cfgPrettyPrinter.writeEndArray(this, _writeContext.getEntryCount()); } else { } _writeContext = _writeContext.getParent(); } @Override public final void writeStartObject() throws IOException { _verifyValueWrite(\"start an object\"); _writeContext = _writeContext.createChildObjectContext();"
      },
      {
        "txt": "if (_cfgPrettyPrinter != null) { _cfgPrettyPrinter.writeStartObject(this); } else { _handleStartObject(); } } @Override public final void writeEndObject() throws IOException { if (!_writeContext.inObject()) {"
      },
      {
        "txt": "_reportError(\"Current context not Object but \"+_writeContext.typeDesc()); } _writeContext = _writeContext.getParent(); if (_cfgPrettyPrinter != null) { int count = _nextIsAttribute ? 0 : _writeContext.getEntryCount(); _cfgPrettyPrinter.writeEndObject(this, count); } else { _handleEndObject(); } }"
      },
      {
        "txt": "public final void _handleStartObject() throws IOException { if (_nextName == null) { handleMissingName(); } _elementNameStack.addLast(_nextName); try { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } public final void _handleEndObject() throws IOException { if (_elementNameStack.isEmpty()) { throw new JsonGenerationException(\"Can not write END_ELEMENT without open START_ELEMENT\", this); } _nextName = _elementNameStack.removeLast(); try { _nextIsAttribute = false;"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); if (_elementNameStack.isEmpty() && (_xmlPrettyPrinter != null)) { if (!_stax2Emulation) { _xmlPrettyPrinter.writePrologLinefeed(_xmlWriter); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeFieldName(SerializableString name) throws IOException { writeFieldName(name.getValue()); } @Override public void writeString(String text) throws IOException { _verifyValueWrite(\"write String value\"); if (_nextName == null) {"
      },
      {
        "txt": "handleMissingName(); } try { if (_nextIsAttribute) { // must write attribute name and value with one call _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) { _xmlWriter.writeCData(text); } else { _xmlWriter.writeCharacters(text);"
      },
      {
        "txt": "} } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if(_nextIsCData) { _xmlWriter.writeCData(text); } else {"
      },
      {
        "txt": "_xmlWriter.writeCharacters(text); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeString(char[] text, int offset, int len) throws IOException"
      },
      {
        "txt": "{ _verifyValueWrite(\"write String value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else if (checkNextIsUnwrapped()) { if(_nextIsCData) {"
      },
      {
        "txt": "_xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } } else if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), text, offset, len, _nextIsCData); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "if(_nextIsCData) { _xmlWriter.writeCData(text, offset, len); } else { _xmlWriter.writeCharacters(text, offset, len); } _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); }"
      },
      {
        "txt": "} @Override public void writeString(SerializableString text) throws IOException { writeString(text.getValue()); } @Override public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); }"
      },
      {
        "txt": "@Override public void writeUTF8String(byte[] text, int offset, int length) throws IOException { _reportUnsupportedOperation(); } @Override public void writeRawValue(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\"); }"
      },
      {
        "txt": "try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text);"
      },
      {
        "txt": "_xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRawValue\");"
      },
      {
        "txt": "} try { _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), text.substring(offset, offset + len)); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart());"
      },
      {
        "txt": "_xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(char[] text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRawValue\"); } _verifyValueWrite(\"write raw value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeAttribute(_nextName.getNamespaceURI(), _nextName.getLocalPart(), new String(text, offset, len)); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeRaw(text, offset, len); _xmlWriter.writeEndElement(); } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRawValue(SerializableString text) throws IOException {"
      },
      {
        "txt": "_reportUnsupportedOperation(); } @Override public void writeRaw(String text) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text);"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(String text, int offset, int len) throws IOException { if (_stax2Emulation) { _reportUnimplementedStax2(\"writeRaw\"); }"
      },
      {
        "txt": "try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char[] text, int offset, int len) throws IOException { if (_stax2Emulation) {"
      },
      {
        "txt": "_reportUnimplementedStax2(\"writeRaw\"); } try { _xmlWriter.writeRaw(text, offset, len); } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeRaw(char c) throws IOException"
      },
      {
        "txt": "{ writeRaw(String.valueOf(c)); } @Override public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException { if (data == null) { writeNull(); return;"
      },
      {
        "txt": "} _verifyValueWrite(\"write Binary value\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { byte[] fullBuffer = toFullBuffer(data, offset, len); _xmlWriter.writeBinaryAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), fullBuffer); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "_xmlWriter.writeBinary(data, offset, len); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), data, offset, len); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBinary(data, offset, len); _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } private byte[] toFullBuffer(byte[] data, int offset, int len) { if (offset == 0 && len == data.length) { return data;"
      },
      {
        "txt": "byte[] result = new byte[len]; if (len > 0) { System.arraycopy(data, offset, result, 0, len); } return result; } <extra_id_0> @Override public void writeBoolean(boolean value) throws IOException { _verifyValueWrite(\"write boolean value\"); if (_nextName == null) { handleMissingName();"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeBooleanAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeBoolean(value); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeBoolean(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNull() throws IOException { _verifyValueWrite(\"write null value\"); if (_nextName == null) { handleMissingName(); }"
      },
      {
        "txt": "try { if (_nextIsAttribute) { } else if (checkNextIsUnwrapped()) { } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafNullElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart()); } else { _xmlWriter.writeEmptyElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); }"
      },
      {
        "txt": "} } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(int i) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) {"
      },
      {
        "txt": "handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeIntAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInt(i); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter,"
      },
      {
        "txt": "_nextName.getNamespaceURI(), _nextName.getLocalPart(), i); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInt(i); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this);"
      },
      {
        "txt": "} } @Override public void writeNumber(long l) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try {"
      },
      {
        "txt": "if (_nextIsAttribute) { _xmlWriter.writeLongAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeLong(l); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), l); } else {"
      },
      {
        "txt": "_xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeLong(l); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override"
      },
      {
        "txt": "public void writeNumber(double d) throws IOException { _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeDoubleAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else if (checkNextIsUnwrapped()) {"
      },
      {
        "txt": "_xmlWriter.writeDouble(d); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), d); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeDouble(d); _xmlWriter.writeEndElement();"
      },
      {
        "txt": "} } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(float f) throws IOException { _verifyValueWrite(\"write number\");"
      },
      {
        "txt": "if (_nextName == null) { handleMissingName(); } try { if (_nextIsAttribute) { _xmlWriter.writeFloatAttribute(null, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeFloat(f); } else { if (_xmlPrettyPrinter != null) {"
      },
      {
        "txt": "_xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), f); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeFloat(f); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigDecimal dec) throws IOException { if (dec == null) { writeNull(); return; }"
      },
      {
        "txt": "_verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } boolean usePlain = isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN); try { if (_nextIsAttribute) { if (usePlain) { _xmlWriter.writeAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec.toPlainString());"
      },
      {
        "txt": "} else { _xmlWriter.writeDecimalAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } } else if (checkNextIsUnwrapped()) { if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec); } } else {"
      },
      {
        "txt": "if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), dec); } else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); if (usePlain) { _xmlWriter.writeCharacters(dec.toPlainString()); } else { _xmlWriter.writeDecimal(dec);"
      },
      {
        "txt": "} _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override public void writeNumber(BigInteger value) throws IOException"
      },
      {
        "txt": "{ if (value == null) { writeNull(); return; } _verifyValueWrite(\"write number\"); if (_nextName == null) { handleMissingName(); } try {"
      },
      {
        "txt": "if (_nextIsAttribute) { _xmlWriter.writeIntegerAttribute(\"\", _nextName.getNamespaceURI(), _nextName.getLocalPart(), value); } else if (checkNextIsUnwrapped()) { _xmlWriter.writeInteger(value); } else { if (_xmlPrettyPrinter != null) { _xmlPrettyPrinter.writeLeafElement(_xmlWriter, _nextName.getNamespaceURI(), _nextName.getLocalPart(), value);"
      },
      {
        "txt": "} else { _xmlWriter.writeStartElement(_nextName.getNamespaceURI(), _nextName.getLocalPart()); _xmlWriter.writeInteger(value); _xmlWriter.writeEndElement(); } } } catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } }"
      },
      {
        "txt": "@Override public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException { writeString(encodedValue); } @Override protected final void _verifyValueWrite(String typeMsg) throws IOException { int status = _writeContext.writeValue(); if (status == JsonWriteContext.STATUS_EXPECT_NAME) {"
      },
      {
        "txt": "_reportError(\"Can not \"+typeMsg+\", expecting field name\"); } } @Override public void flush() throws IOException { if (isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM)) { try { _xmlWriter.flush(); } catch (XMLStreamException e) {"
      },
      {
        "txt": "StaxUtil.throwAsGenerationException(e, this); } } } @Override public void close() throws IOException { super.close(); if (isEnabled(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT)) { try {"
      },
      {
        "txt": "while (true) { JsonStreamContext ctxt = _writeContext; if (ctxt.inArray()) { writeEndArray(); } else if (ctxt.inObject()) { writeEndObject(); } else { break; } }"
      },
      {
        "txt": "} catch (ArrayIndexOutOfBoundsException e) { throw new JsonGenerationException(e, this); } } try { if (_ioContext.isResourceManaged() || isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET)) { _xmlWriter.closeCompletely(); } else { _xmlWriter.close(); }"
      },
      {
        "txt": "} catch (XMLStreamException e) { StaxUtil.throwAsGenerationException(e, this); } } @Override protected void _releaseBuffers() { } protected boolean checkNextIsUnwrapped() { if (_nextIsUnwrapped) {"
      },
      {
        "txt": "_nextIsUnwrapped = false; return true; } return false; } protected void handleMissingName() { throw new IllegalStateException(\"No element/attribute name specified when trying to output element\"); } protected void _reportUnimplementedStax2(String missingMethod) throws IOException {"
      },
      {
        "txt": "throw new JsonGenerationException(\"Underlying Stax XMLStreamWriter (of type \" +_originalXmlWriter.getClass().getName() +\") does not implement Stax2 API natively and is missing method '\" +missingMethod+\"': this breaks functionality such as indentation that relies on it. \" +\"You need to upgrade to using compliant Stax implementation like Woodstox or Aalto\", this); }"
      }
    ]
  }
]